(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module util::page_ptr_util_u'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.core.iter_into_iter_spec. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap_or. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%0.ghost_iter. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.exec_invariant. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_invariant. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_ensures. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_peek_next. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_advance. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_u64. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_usize. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%11.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%11.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%11.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_i32. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_1g_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.MEM_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_4k_range_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_4k_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_1g_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_v2l1index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_v2l2index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_v2l3index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_v2l4index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va2index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va22mindex. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va21gindex. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_index2va. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_add_range. FuelId)
(declare-const fuel%lib!define.KERNEL_MEM_END_L4INDEX. FuelId)
(declare-const fuel%lib!define.NUM_PAGES. FuelId)
(declare-const fuel%lib!define.MAX_USIZE. FuelId)
(declare-const fuel%lib!define.MEM_MASK. FuelId)
(declare-const fuel%lib!define.MEM_4k_MASK. FuelId)
(declare-const fuel%lib!define.MEM_2m_MASK. FuelId)
(declare-const fuel%lib!define.MEM_1g_MASK. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.core.iter_into_iter_spec. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.option.spec_unwrap_or. fuel%vstd!std_specs.range.impl&%0.ghost_iter. fuel%vstd!std_specs.range.impl&%1.exec_invariant. fuel%vstd!std_specs.range.impl&%1.ghost_invariant. fuel%vstd!std_specs.range.impl&%1.ghost_ensures. fuel%vstd!std_specs.range.impl&%1.ghost_peek_next. fuel%vstd!std_specs.range.impl&%1.ghost_advance. fuel%vstd!std_specs.range.impl&%6.spec_is_lt. fuel%vstd!std_specs.range.impl&%6.spec_forward_checked. fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_u64. fuel%vstd!std_specs.range.impl&%8.spec_is_lt. fuel%vstd!std_specs.range.impl&%8.spec_forward_checked. fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_usize. fuel%vstd!std_specs.range.impl&%11.spec_is_lt. fuel%vstd!std_specs.range.impl&%11.spec_forward_checked. fuel%vstd!std_specs.range.impl&%11.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_i32. fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index. fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr. fuel%lib!util.page_ptr_util_u.page_index_2m_valid. fuel%lib!util.page_ptr_util_u.page_index_1g_valid. fuel%lib!util.page_ptr_util_u.MEM_valid. fuel%lib!util.page_ptr_util_u.page_ptr_valid. fuel%lib!util.page_ptr_util_u.page_index_valid. fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m. fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g. fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid. fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid. fuel%lib!util.page_ptr_util_u.spec_va_4k_range_valid. fuel%lib!util.page_ptr_util_u.spec_va_4k_valid. fuel%lib!util.page_ptr_util_u.spec_va_2m_valid. fuel%lib!util.page_ptr_util_u.spec_va_1g_valid. fuel%lib!util.page_ptr_util_u.spec_v2l1index. fuel%lib!util.page_ptr_util_u.spec_v2l2index. fuel%lib!util.page_ptr_util_u.spec_v2l3index. fuel%lib!util.page_ptr_util_u.spec_v2l4index. fuel%lib!util.page_ptr_util_u.spec_va2index. fuel%lib!util.page_ptr_util_u.spec_va22mindex. fuel%lib!util.page_ptr_util_u.spec_va21gindex. fuel%lib!util.page_ptr_util_u.spec_index2va. fuel%lib!util.page_ptr_util_u.spec_va_add_range. fuel%lib!define.KERNEL_MEM_END_L4INDEX. fuel%lib!define.NUM_PAGES. fuel%lib!define.MAX_USIZE. fuel%lib!define.MEM_MASK. fuel%lib!define.MEM_4k_MASK. fuel%lib!define.MEM_2m_MASK. fuel%lib!define.MEM_1g_MASK. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_u64.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_usize.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_i32.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIterator./ExecIter (Dcr Type) Type)
(declare-fun proj%%vstd!pervasive.ForLoopGhostIterator./Item (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIterator./Item (Dcr Type) Type)
(declare-fun proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-datatypes ((core!option.Option. 0) (core!ops.range.Range. 0) (vstd!std_specs.range.RangeGhostIterator. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!ops.range.Range./Range (core!ops.range.Range./Range/?start Poly) (core!ops.range.Range./Range/?end Poly))) ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?start Poly) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?cur Poly) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?end Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!ops.range.Range./Range/start (core!ops.range.Range.) Poly)
(declare-fun core!ops.range.Range./Range/end (core!ops.range.Range.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!ops.range.Range. (Dcr Type) Type)
(declare-fun TYPE%vstd!std_specs.range.RangeGhostIterator. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!ops.range.Range. (core!ops.range.Range.) Poly)
(declare-fun %Poly%core!ops.range.Range. (Poly) core!ops.range.Range.)
(declare-fun Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun %Poly%vstd!std_specs.range.RangeGhostIterator. (Poly) vstd!std_specs.range.RangeGhostIterator.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!ops.range.Range.)) (! (= x (%Poly%core!ops.range.Range. (Poly%core!ops.range.Range. x))) :pattern ((Poly%core!ops.range.Range. x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (= x (Poly%core!ops.range.Range. (%Poly%core!ops.range.Range. x)))) :pattern ((has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (_start! Poly) (_end! Poly)) (! (=> (and (has_type _start! Idx&) (has_type _end! Idx&)) (has_type (Poly%core!ops.range.Range. (core!ops.range.Range./Range _start! _end!)) (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((has_type (Poly%core!ops.range.Range. (core!ops.range.Range./Range _start! _end!)) (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((x core!ops.range.Range.)) (! (= (core!ops.range.Range./Range/start x) (core!ops.range.Range./Range/?start x)) :pattern ((core!ops.range.Range./Range/start x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (has_type (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. x)) Idx&)) :pattern ((core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. x)) (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((x core!ops.range.Range.)) (! (= (core!ops.range.Range./Range/end x) (core!ops.range.Range./Range/?end x)) :pattern ((core!ops.range.Range./Range/end x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (has_type (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. x)) Idx&)) :pattern ((core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. x)) (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(define-fun is-core!ops.range.Range./Range_ ((c core!ops.range.Range.)) Bool ((_ is core!ops.range.Range./Range) c))
(assert (forall ((x core!ops.range.Range.)) (! (=> (is-core!ops.range.Range./Range_ x) (height_lt (height (core!ops.range.Range./Range/start x)) (height (Poly%core!ops.range.Range. x)))) :pattern ((height (core!ops.range.Range./Range/start x))))))
(assert (forall ((x core!ops.range.Range.)) (! (=> (is-core!ops.range.Range./Range_ x) (height_lt (height (core!ops.range.Range./Range/end x)) (height (Poly%core!ops.range.Range. x)))) :pattern ((height (core!ops.range.Range./Range/end x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= x (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. x))) :pattern ((Poly%vstd!std_specs.range.RangeGhostIterator. x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (= x (Poly%vstd!std_specs.range.RangeGhostIterator. (%Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type) (_start! Poly) (_cur! Poly) (_end! Poly)) (! (=> (and (has_type _start! A&) (has_type _cur! A&) (has_type _end! A&)) (has_type (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator _start! _cur! _end!)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((has_type (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator _start! _cur! _end!)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?start x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?cur x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?end x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(define-fun is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ ((c vstd!std_specs.range.RangeGhostIterator.)) Bool ((_ is vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator) c))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!pervasive.ForLoopGhostIterator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!iter.traits.iterator.Iterator. (Dcr Type) Bool)
(declare-fun tr_bound%core!iter.range.Step. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.range.StepSpec. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIterator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) :pattern ((tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!iter.traits.iterator.Iterator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!iter.range.Step. Self%&. Self%&) (and (tr_bound%core!clone.Clone. Self%&. Self%&) (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Self%&. Self%&))) :pattern ((tr_bound%core!iter.range.Step. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!std_specs.range.StepSpec. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&)) $) :pattern ((proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) :pattern ((proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) $) :pattern ((proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (TYPE%core!ops.range.Range. A&. A&)) :pattern ((proj%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) A&.) :pattern ((proj%%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) A&) :pattern ((proj%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap_or")
(declare-fun vstd!std_specs.option.spec_unwrap_or.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_is_lt")
(declare-fun vstd!std_specs.range.StepSpec.spec_is_lt.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_is_lt%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_forward_checked")
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_forward_checked_int")
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked_int.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked_int%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::spec_range_next")
(declare-fun vstd!std_specs.range.spec_range_next.? (Dcr Type Poly) tuple%2.)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::exec_invariant")
(declare-fun vstd!pervasive.ForLoopGhostIterator.exec_invariant.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.exec_invariant%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_invariant")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_invariant%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_ensures")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_ensures%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_peek_next")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_peek_next%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_advance")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_advance.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_advance%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIteratorNew::ghost_iter")
(declare-fun vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::define::MEM_MASK")
(declare-fun lib!define.MEM_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::MEM_valid")
(declare-fun lib!util.page_ptr_util_u.MEM_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::NUM_PAGES")
(declare-fun lib!define.NUM_PAGES.? () Int)
(set-info :comment ";; Function-Decl lib::define::MEM_4k_MASK")
(declare-fun lib!define.MEM_4k_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::KERNEL_MEM_END_L4INDEX")
(declare-fun lib!define.KERNEL_MEM_END_L4INDEX.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_4k_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_4k_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_index2va")
(declare-fun lib!util.page_ptr_util_u.spec_index2va.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::MEM_2m_MASK")
(declare-fun lib!define.MEM_2m_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_2m_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_2m_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_1g_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(declare-fun lib!util.page_ptr_util_u.spec_page_index2page_ptr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(declare-fun lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_2m_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_truncate_2m")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_1g_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_truncate_1g")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_add_range")
(declare-fun lib!util.page_ptr_util_u.spec_va_add_range.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_4k_range_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_4k_range_valid.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_v2l4index")
(declare-fun lib!util.page_ptr_util_u.spec_v2l4index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_v2l3index")
(declare-fun lib!util.page_ptr_util_u.spec_v2l3index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_v2l2index")
(declare-fun lib!util.page_ptr_util_u.spec_v2l2index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_v2l1index")
(declare-fun lib!util.page_ptr_util_u.spec_v2l1index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::MEM_1g_MASK")
(declare-fun lib!define.MEM_1g_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_1g_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va2index")
(declare-fun lib!util.page_ptr_util_u.spec_va2index.? (Poly) tuple%4.)
(set-info :comment ";; Function-Decl vstd::std_specs::core::iter_into_iter_spec")
(declare-fun vstd!std_specs.core.iter_into_iter_spec.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va22mindex")
(declare-fun lib!util.page_ptr_util_u.spec_va22mindex.? (Poly) tuple%3.)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va21gindex")
(declare-fun lib!util.page_ptr_util_u.spec_va21gindex.? (Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::define::MAX_USIZE")
(declare-fun lib!define.MAX_USIZE.? () Int)
(set-info :comment ";; Function-Specs core::iter::traits::collect::impl&%0::into_iter")
(declare-fun ens%core!iter.traits.collect.impl&%0.into_iter. (Dcr Type Poly Poly) Bool)
(assert (forall ((I&. Dcr) (I& Type) (i! Poly) (r! Poly)) (! (= (ens%core!iter.traits.collect.impl&%0.into_iter. I&. I& i! r!) (and (has_type r! I&) (= r! i!))) :pattern ((ens%core!iter.traits.collect.impl&%0.into_iter. I&. I& i! r!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap_or")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap_or.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap_or.) (forall ((T&. Dcr) (T& Type) (option! Poly) (default! Poly)) (! (= (vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)) (let ((t$ (core!option.Option./Some/0 (%Poly%core!option.Option. option!)))) t$) default!)) :pattern ((vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly) (default! Poly)) (! (=> (and (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type default! T&)) (has_type (vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_is_lt")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (vstd!std_specs.range.StepSpec.spec_is_lt.? Self%&. Self%& self! other!) BOOL)) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? Self%&. Self%& self! other!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_forward_checked")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (count! Poly)) (! (=> (and (has_type self! Self%&) (has_type count! (UINT SZ))) (has_type (vstd!std_specs.range.StepSpec.spec_forward_checked.? Self%&. Self%& self! count!) (TYPE%core!option.Option. Self%&. Self%&))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? Self%&. Self%& self! count!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_forward_checked_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (count! Poly)) (! (=> (and (has_type self! Self%&) (has_type count! INT)) (has_type (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? Self%&. Self%& self! count!) (TYPE%core!option.Option. Self%&. Self%&))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? Self%&. Self%& self! count!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::spec_range_next")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! (TYPE%core!ops.range.Range. A&. A&)) (has_type (Poly%tuple%2. (vstd!std_specs.range.spec_range_next.? A&. A& a!)) (TYPE%tuple%2. $ (TYPE%core!ops.range.Range. A&. A&) $ (TYPE%core!option.Option. A&. A&)))) :pattern ((vstd!std_specs.range.spec_range_next.? A&. A& a!)))))
(set-info :comment ";; Function-Specs core::iter::range::impl&%6::next")
(declare-fun ens%core!iter.range.impl&%6.next. (Dcr Type core!ops.range.Range. core!ops.range.Range. core!option.Option.) Bool)
(assert (forall ((A&. Dcr) (A& Type) (pre%range! core!ops.range.Range.) (range! core!ops.range.Range.) (r! core!option.Option.)) (! (= (ens%core!iter.range.impl&%6.next. A&. A& pre%range! range! r!) (and (has_type (Poly%core!option.Option. r!) (TYPE%core!option.Option. A&. A&)) (has_type (Poly%core!ops.range.Range. range!) (TYPE%core!ops.range.Range. A&. A&)) (= (tuple%2./tuple%2 (Poly%core!ops.range.Range. range!) (Poly%core!option.Option. r!)) (vstd!std_specs.range.spec_range_next.? A&. A& (Poly%core!ops.range.Range. pre%range!))))) :pattern ((ens%core!iter.range.impl&%6.next. A&. A& pre%range! range! r!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 18446744073709551615) (core!option.Option./Some (I (uClip 64 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_u64")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_u64.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT 64))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) (- (uHi SZ) 1)) (core!option.Option./Some (I (uClip SZ (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_usize")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_usize.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT SZ))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%11::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%11.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%11.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (SINT 32) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (SINT 32) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%11::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%11.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%11.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (SINT 32) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 2147483647) (core!option.Option./Some (I (iClip 32 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (SINT 32) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%11::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%11.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%11.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (SINT 32) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (SINT 32) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (SINT 32) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_i32")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_i32.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (SINT 32))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (SINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (SINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (SINT 32) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (SINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (SINT 32) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (SINT 32) range!))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::exec_invariant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (has_type self! Self%&) (has_type exec_iter! (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter Self%&. Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? Self%&. Self%& self! exec_iter!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.exec_invariant.? Self%&. Self%& self! exec_iter!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_invariant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (init! Poly)) (! (=> (and (has_type self! Self%&) (has_type init! (TYPE%core!option.Option. (REF Self%&.) Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? Self%&. Self%& self! init!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? Self%&. Self%& self! init!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_ensures")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? Self%&. Self%& self!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_peek_next")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? Self%&. Self%& self!) (TYPE%core!option.Option. (proj%%vstd!pervasive.ForLoopGhostIterator./Item Self%&. Self%&) (proj%vstd!pervasive.ForLoopGhostIterator./Item Self%&. Self%&)))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_advance")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (has_type self! Self%&) (has_type exec_iter! (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter Self%&. Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? Self%&. Self%& self! exec_iter!) Self%&)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_advance.? Self%&. Self%& self! exec_iter!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIteratorNew::ghost_iter")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? Self%&. Self%& self!) (proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter Self%&. Self%&))) :pattern ((vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms lib::define::MEM_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_MASK.) (= lib!define.MEM_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_MASK.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::MEM_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.MEM_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.MEM_valid.) (forall ((v! Poly)) (! (= (lib!util.page_ptr_util_u.MEM_valid.? v!) (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_MASK.?))))))) 0)) :pattern ((lib!util.page_ptr_util_u.MEM_valid.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::NUM_PAGES")
(assert (fuel_bool_default fuel%lib!define.NUM_PAGES.))
(assert (=> (fuel_bool fuel%lib!define.NUM_PAGES.) (= lib!define.NUM_PAGES.? (uClip SZ (Mul 128 1024)))))
(assert (uInv SZ lib!define.NUM_PAGES.?))
(set-info :comment ";; Function-Axioms lib::define::MEM_4k_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_4k_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_4k_MASK.) (= lib!define.MEM_4k_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_4k_MASK.?))
(set-info :comment ";; Function-Axioms lib::define::KERNEL_MEM_END_L4INDEX")
(assert (fuel_bool_default fuel%lib!define.KERNEL_MEM_END_L4INDEX.))
(assert (=> (fuel_bool fuel%lib!define.KERNEL_MEM_END_L4INDEX.) (= lib!define.KERNEL_MEM_END_L4INDEX.? 1)))
(assert (uInv SZ lib!define.KERNEL_MEM_END_L4INDEX.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_4k_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_4k_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_4k_valid.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_4k_valid.? va!) (and (= (uClip SZ (bitand (I (%I va!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_4k_MASK.?))))))) 0) (>= (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I va!))) (I 39)))) (I 511))) (uClip 64 lib!define.KERNEL_MEM_END_L4INDEX.?)))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_index2va")
(declare-fun req%lib!util.page_ptr_util_u.spec_index2va. (Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(declare-const %%global_location_label%%2 Bool)
(declare-const %%global_location_label%%3 Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((i! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_index2va. i!) (and (=> %%global_location_label%%1 (<= (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. i!))) 511)) (=> %%global_location_label%%2 (<= (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. i!))) 511)) (=> %%global_location_label%%3 (<= (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. i!))) 511)) (=> %%global_location_label%%4 (<= (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. i!))) 511)))) :pattern ((req%lib!util.page_ptr_util_u.spec_index2va. i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_index2va")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_index2va.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_index2va.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.spec_index2va.? i!) (uClip SZ (bitand (I (uClip SZ (bitand (I (uClip SZ (bitand (I (uClip SZ (bitshl (I (uClip SZ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. i!))))) (I 39)))) (I (uClip SZ (bitshl (I (uClip SZ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. i!))))) (I 30))))))) (I (uClip SZ (bitshl (I (uClip SZ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. i!))))) (I 21))))))) (I (uClip SZ (bitshl (I (uClip SZ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. i!))))) (I 12))))))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? i!))))))
(assert (forall ((i! Poly)) (! (=> (has_type i! (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ))) (uInv SZ (lib!util.page_ptr_util_u.spec_index2va.? i!))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 4096)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::define::MEM_2m_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_2m_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_2m_MASK.) (= lib!define.MEM_2m_MASK.? 281474974613504)))
(assert (uInv 64 lib!define.MEM_2m_MASK.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_2m_valid.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_2m_valid.? va!) (and (= (uClip SZ (bitand (I (%I va!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_2m_MASK.?))))))) 0) (>= (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I va!))) (I 39)))) (I 511))) (uClip 64 lib!define.KERNEL_MEM_END_L4INDEX.?)))) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_2m_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 2097152)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_1g_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 1073741824)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_valid.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_valid.? index!) (and (<= 0 (%I index!)) (< (%I index!) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? index!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. (Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((i! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. i!) (=> %%global_location_label%%5 (lib!util.page_ptr_util_u.page_index_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!) (uClip SZ (Mul (%I i!) 4096))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!))))))
(assert (forall ((i! Poly)) (! (=> (has_type i! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. (Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((ptr! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. ptr!) (=> %%global_location_label%%6 (lib!util.page_ptr_util_u.page_ptr_valid.? ptr!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. ptr!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!) (uClip SZ (uClip SZ (EucDiv (%I ptr!) 4096)))) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!))))))
(assert (forall ((ptr! Poly)) (! (=> (has_type ptr! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!))) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_2m_valid.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_2m_valid.? i!) (and (= (uClip SZ (EucMod (%I i!) 512)) 0) (and (<= 0 (%I i!)) (< (%I i!) lib!define.NUM_PAGES.?)))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_truncate_2m")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!) (uClip SZ (Mul (uClip SZ (EucDiv (%I index!) 512)) 512))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!))))))
(assert (forall ((index! Poly)) (! (=> (has_type index! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_1g_valid.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_1g_valid.? i!) (and (= (uClip SZ (EucMod (%I i!) (uClip SZ (nClip (Mul 512 512))))) 0) (and (<= 0 (%I i!)) (< (%I i!) lib!define.NUM_PAGES.?)))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? i!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_truncate_1g")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!) (uClip SZ (Mul (Mul (uClip SZ (EucDiv (uClip SZ (EucDiv (%I index!) 512)) 512)) 512) 512))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!))))))
(assert (forall ((index! Poly)) (! (=> (has_type index! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((i! Poly) (j! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. i! j!) (=> %%global_location_label%%7 (lib!util.page_ptr_util_u.page_index_2m_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. i! j!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.) (forall ((i! Poly) (j! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i! j!) (and (< (%I i!) (%I j!)) (< (%I j!) (Add (%I i!) 512)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i! j!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((i! Poly) (j! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. i! j!) (=> %%global_location_label%%8 (lib!util.page_ptr_util_u.page_index_1g_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. i! j!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.) (forall ((i! Poly) (j! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i! j!) (and (< (%I i!) (%I j!)) (< (%I j!) (Add (%I i!) 262144)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i! j!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_add_range")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_add_range.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_add_range.) (forall ((va! Poly) (i! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_add_range.? va! i!) (uClip SZ (Add (%I va!) (Mul (%I i!) 4096)))) :pattern ((lib!util.page_ptr_util_u.spec_va_add_range.? va! i!))))))
(assert (forall ((va! Poly) (i! Poly)) (! (=> (and (has_type va! (UINT SZ)) (has_type i! (UINT SZ))) (uInv SZ (lib!util.page_ptr_util_u.spec_va_add_range.? va! i!))) :pattern ((lib!util.page_ptr_util_u.spec_va_add_range.? va! i!)))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_t::lemma_usize_u64")
(declare-fun ens%lib!lemma.lemma_t.lemma_usize_u64. (Int) Bool)
(assert (forall ((x! Int)) (! (= (ens%lib!lemma.lemma_t.lemma_usize_u64. x!) (= (uClip 64 (uClip SZ x!)) x!)) :pattern ((ens%lib!lemma.lemma_t.lemma_usize_u64. x!)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va_add_range")
(declare-fun ens%lib!util.page_ptr_util_u.va_add_range. (Int Int Int) Bool)
(assert (forall ((va! Int) (i! Int) (ret! Int)) (! (= (ens%lib!util.page_ptr_util_u.va_add_range. va! i! ret!) (and (uInv SZ ret!) (= ret! (lib!util.page_ptr_util_u.spec_va_add_range.? (I va!) (I i!))) (=> (not (= i! 0)) (not (= ret! va!))))) :pattern ((ens%lib!util.page_ptr_util_u.va_add_range. va! i! ret!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_4k_range_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_4k_range_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_4k_range_valid.) (forall ((va! Poly) (len! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_4k_range_valid.? va! len!) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I len!))) (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I (lib!util.page_ptr_util_u.spec_va_add_range.? va! i$))))) :pattern ((lib!util.page_ptr_util_u.spec_va_add_range.? va! i$))))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_range_valid.? va! len!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va_range_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.va_range_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.va_range_lemma. no%param) (forall ((va$ Poly) (len$ Poly) (i$ Poly) (j$ Poly)) (! (=> (and (has_type va$ (UINT SZ)) (has_type len$ (UINT SZ)) (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (and (and (and (lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_va_4k_range_valid.? va$ len$)) (and (<= 0 (%I i$)) (< (%I i$) (%I len$)))) (and (<= 0 (%I i$)) (< (%I i$) (%I len$)))) (= (= i$ j$) (= (lib!util.page_ptr_util_u.spec_va_add_range.? va$ i$) (lib!util.page_ptr_util_u.spec_va_add_range.? va$ j$))))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_range_valid.? va$ len$) (lib!util.page_ptr_util_u.spec_va_add_range.? va$ i$) (lib!util.page_ptr_util_u.spec_va_add_range.? va$ j$))))) :pattern ((ens%lib!util.page_ptr_util_u.va_range_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_index_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_index_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_index_lemma. no%param) (and (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (and (lib!util.page_ptr_util_u.page_index_2m_valid.? i$) (lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i$ j$)) (lib!util.page_ptr_util_u.page_index_valid.? j$))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i$ j$)) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i$) (lib!util.page_ptr_util_u.page_index_valid.? j$)))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (and (lib!util.page_ptr_util_u.page_index_1g_valid.? i$) (lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i$ j$)) (lib!util.page_ptr_util_u.page_index_valid.? j$))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i$ j$)) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i$) (lib!util.page_ptr_util_u.page_index_valid.? j$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_index_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr_page_index_truncate_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr_page_index_truncate_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr_page_index_truncate_lemma. no%param) (and (forall ((pi$ Poly) (i$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type i$ (UINT SZ))) (= (=> (lib!util.page_ptr_util_u.page_index_1g_valid.? pi$) (and (<= (%I pi$) (%I i$)) (< (%I i$) (Add (%I pi$) 262144)))) (= (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? pi$)))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? pi$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$)))) (forall ((pi$ Poly) (i$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (lib!util.page_ptr_util_u.page_index_1g_valid.? pi$) (and (<= (%I pi$) (%I i$)) (< (%I i$) (Add (%I pi$) 262144)))) (lib!util.page_ptr_util_u.page_index_1g_valid.? (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? pi$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$)))) (forall ((pi$ Poly) (i$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type i$ (UINT SZ))) (= (=> (lib!util.page_ptr_util_u.page_index_2m_valid.? pi$) (and (<= (%I pi$) (%I i$)) (< (%I i$) (Add (%I pi$) 512)))) (= (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? pi$)))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? pi$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$)))) (forall ((pi$ Poly) (i$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (lib!util.page_ptr_util_u.page_index_2m_valid.? pi$) (and (<= (%I pi$) (%I i$)) (< (%I i$) (Add (%I pi$) 512)))) (lib!util.page_ptr_util_u.page_index_2m_valid.? (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? pi$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$)))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (not (= (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? j$))) (not (= i$ j$)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? j$)))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (not (= (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? j$))) (not (= i$ j$)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? j$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr_page_index_truncate_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr_lemma. no%param) (and (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_valid.? pa$) (lib!util.page_ptr_util_u.page_index_valid.? (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))) (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_valid.? pa$) (= (%I pa$) (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_index_valid.? i$) (= (%I i$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))))) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))) (forall ((pi$ Poly) (pj$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type pj$ (UINT SZ))) (=> (and (and (lib!util.page_ptr_util_u.page_ptr_valid.? pi$) (lib!util.page_ptr_util_u.page_ptr_valid.? pj$)) (not (= pi$ pj$))) (not (= (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pi$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pj$))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pi$) (lib!util.page_ptr_util_u.page_ptr_valid.? pj$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pi$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pj$)))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (and (and (and (< 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (and (< 0 (%I j$)) (< (%I j$) lib!define.NUM_PAGES.?))) (not (= i$ j$))) (not (= (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$) (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? j$))))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$) (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? j$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr_2m_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. no%param) (and (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_2m_valid.? pa$) (lib!util.page_ptr_util_u.page_ptr_valid.? pa$))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pa$)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_index_2m_valid.? i$) (lib!util.page_ptr_util_u.page_index_valid.? i$))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? i$)))) (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_2m_valid.? pa$) (lib!util.page_ptr_util_u.page_index_2m_valid.? (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr_1g_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. no%param) (and (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_1g_valid.? pa$) (lib!util.page_ptr_util_u.page_ptr_valid.? pa$))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? pa$)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_index_1g_valid.? i$) (lib!util.page_ptr_util_u.page_index_valid.? i$))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? i$)))) (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_1g_valid.? pa$) (lib!util.page_ptr_util_u.page_index_1g_valid.? (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. no%param)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_v2l4index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_v2l4index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_v2l4index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_v2l4index.? va!) (uClip SZ (uClip SZ (bitand (I (uClip SZ (bitshr (I (%I va!)) (I 39)))) (I 511))))) :pattern ((lib!util.page_ptr_util_u.spec_v2l4index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_v2l4index.? va!))) :pattern ((lib!util.page_ptr_util_u.spec_v2l4index.? va!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_v2l3index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_v2l3index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_v2l3index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_v2l3index.? va!) (uClip SZ (uClip SZ (bitand (I (uClip SZ (bitshr (I (%I va!)) (I 30)))) (I 511))))) :pattern ((lib!util.page_ptr_util_u.spec_v2l3index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_v2l3index.? va!))) :pattern ((lib!util.page_ptr_util_u.spec_v2l3index.? va!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_v2l2index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_v2l2index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_v2l2index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_v2l2index.? va!) (uClip SZ (uClip SZ (bitand (I (uClip SZ (bitshr (I (%I va!)) (I 21)))) (I 511))))) :pattern ((lib!util.page_ptr_util_u.spec_v2l2index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_v2l2index.? va!))) :pattern ((lib!util.page_ptr_util_u.spec_v2l2index.? va!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_v2l1index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_v2l1index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_v2l1index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_v2l1index.? va!) (uClip SZ (uClip SZ (bitand (I (uClip SZ (bitshr (I (%I va!)) (I 12)))) (I 511))))) :pattern ((lib!util.page_ptr_util_u.spec_v2l1index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_v2l1index.? va!))) :pattern ((lib!util.page_ptr_util_u.spec_v2l1index.? va!)))))
(set-info :comment ";; Function-Axioms lib::define::MEM_1g_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_1g_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_1g_MASK.) (= lib!define.MEM_1g_MASK.? 281457796841472)))
(assert (uInv 64 lib!define.MEM_1g_MASK.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_1g_valid.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_1g_valid.? va!) (and (= (uClip SZ (bitand (I (%I va!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_1g_MASK.?))))))) 0) (>= (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I va!))) (I 39)))) (I 511))) (uClip 64 lib!define.KERNEL_MEM_END_L4INDEX.?)))) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va2index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va2index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va2index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va2index.? va!) (tuple%4./tuple%4 (I (lib!util.page_ptr_util_u.spec_v2l4index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l3index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l2index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l1index.? va!)))) :pattern ((lib!util.page_ptr_util_u.spec_va2index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (has_type (Poly%tuple%4. (lib!util.page_ptr_util_u.spec_va2index.? va!)) (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((lib!util.page_ptr_util_u.spec_va2index.? va!)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.va_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.va_lemma. no%param) (and (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (and (and (and (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l4index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l3index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l2index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l1index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l4index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l3index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l2index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l1index.? va$)))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (and (and (and (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l4index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l3index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l2index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (= 0 (lib!util.page_ptr_util_u.spec_v2l1index.? va$))))) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l4index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l3index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l2index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l1index.? va$)))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (and (and (and (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l4index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l3index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (= 0 (lib!util.page_ptr_util_u.spec_v2l2index.? va$))) (= 0 (lib!util.page_ptr_util_u.spec_v2l1index.? va$))))) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l4index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l3index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l2index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l1index.? va$)))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly) (l4j$ Poly) (l3j$ Poly) (l2j$ Poly) (l1j$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ)) (has_type l4j$ (UINT SZ)) (has_type l3j$ (UINT SZ)) (has_type l2j$ (UINT SZ)) (has_type l1j$ (UINT SZ))) (= (and (and (and (and (and (and (and (and (ext_eq false (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$)) (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$))) (and (<= 0 (%I l4i$)) (< (%I l4i$) 512))) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (and (<= 0 (%I l4j$)) (< (%I l4j$) 512))) (and (<= 0 (%I l3j$)) (< (%I l3j$) 512))) (and (<= 0 (%I l2j$)) (< (%I l2j$) 512))) (and (<= 0 (%I l1j$)) (< (%I l1j$) 512))) (= (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$)))))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$)))))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly) (l4j$ Poly) (l3j$ Poly) (l2j$ Poly) (l1j$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ)) (has_type l4j$ (UINT SZ)) (has_type l3j$ (UINT SZ)) (has_type l2j$ (UINT SZ)) (has_type l1j$ (UINT SZ))) (= (and (and (and (and (and (and (and (and (= (ext_eq false (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$)) (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$))) false) (and (<= 0 (%I l4i$)) (< (%I l4i$) 512))) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (and (<= 0 (%I l4j$)) (< (%I l4j$) 512))) (and (<= 0 (%I l3j$)) (< (%I l3j$) 512))) (and (<= 0 (%I l2j$)) (< (%I l2j$) 512))) (and (<= 0 (%I l1j$)) (< (%I l1j$) 512))) (not (= (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$))))))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$)))))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (=> (and (and (and (and (<= 0 (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))))))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$)))))))) (forall ((va$ Poly) (l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type va$ (UINT SZ)) (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (= (and (lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (= (lib!util.page_ptr_util_u.spec_va2index.? va$) (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (and (and (and (and (and (<= lib!define.KERNEL_MEM_END_L4INDEX.? (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (= (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (%I va$))))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_va2index.? va$)))))) :pattern ((ens%lib!util.page_ptr_util_u.va_lemma. no%param)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::core::iter_into_iter_spec")
(assert (fuel_bool_default fuel%vstd!std_specs.core.iter_into_iter_spec.))
(assert (=> (fuel_bool fuel%vstd!std_specs.core.iter_into_iter_spec.) (forall ((I&. Dcr) (I& Type) (i! Poly)) (! (= (vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!) i!) :pattern ((vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!))))))
(assert (forall ((I&. Dcr) (I& Type) (i! Poly)) (! (=> (has_type i! I&) (has_type (vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!) I&)) :pattern ((vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%0::ghost_iter")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%0.ghost_iter.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%0.ghost_iter.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (= (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. A&. A&) self!) (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. self!)) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. self!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::exec_invariant")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.exec_invariant.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.exec_invariant.) (forall ((A&. Dcr) (A& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! exec_iter!) (B (and (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. exec_iter!))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. exec_iter!))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! exec_iter!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_invariant")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_invariant.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_invariant.) (forall ((A&. Dcr) (A& Type) (self! Poly) (init! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! init!) (B (and (and (or (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (or (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!))))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. init!)) (let ((init$ (%Poly%vstd!std_specs.range.RangeGhostIterator. (core!option.Option./Some/0 (%Poly%core!option.Option. init!))))) (and (and (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! init!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_ensures")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_ensures.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_ensures.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (B (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_peek_next")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_peek_next.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_peek_next.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (Poly%core!option.Option. (core!option.Option./Some (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_advance")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_advance.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_advance.) (forall ((A&. Dcr) (A& Type) (self! Poly) (_exec_iter! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! _exec_iter!) (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (I 1)))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! _exec_iter!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va22mindex")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va22mindex.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va22mindex.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va22mindex.? va!) (tuple%3./tuple%3 (I (lib!util.page_ptr_util_u.spec_v2l4index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l3index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l2index.? va!)))) :pattern ((lib!util.page_ptr_util_u.spec_va22mindex.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (has_type (Poly%tuple%3. (lib!util.page_ptr_util_u.spec_va22mindex.? va!)) (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((lib!util.page_ptr_util_u.spec_va22mindex.? va!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va21gindex")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va21gindex.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va21gindex.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va21gindex.? va!) (tuple%2./tuple%2 (I (lib!util.page_ptr_util_u.spec_v2l4index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l3index.? va!)))) :pattern ((lib!util.page_ptr_util_u.spec_va21gindex.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (has_type (Poly%tuple%2. (lib!util.page_ptr_util_u.spec_va21gindex.? va!)) (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) :pattern ((lib!util.page_ptr_util_u.spec_va21gindex.? va!)))))
(set-info :comment ";; Function-Axioms lib::define::MAX_USIZE")
(assert (fuel_bool_default fuel%lib!define.MAX_USIZE.))
(assert (=> (fuel_bool fuel%lib!define.MAX_USIZE.) (= lib!define.MAX_USIZE.? (uClip 64 (Mul (uClip 64 (Mul (uClip 64 (Mul 31 1024)) 1024)) 1024)))))
(assert (uInv 64 lib!define.MAX_USIZE.?))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. $ (TYPE%core!ops.range.Range. A&. A&))) :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. $ (TYPE%core!ops.range.Range. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (tr_bound%vstd!pervasive.ForLoopGhostIterator. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIterator. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. A&. A& B&. B&) (tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. W&. W& W&. W&) (tr_bound%core!cmp.PartialEq. V&. V& V&. V&) (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. W&. W& W&. W&) (tr_bound%core!cmp.PartialOrd. V&. V& V&. V&) (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. V&. V& V&. V&) (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. V&. V& V&. V&) (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (SINT 32) $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (SINT 32) $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!iter.range.Step. A&. A&) (tr_bound%core!iter.traits.iterator.Iterator. $ (TYPE%core!ops.range.Range. A&. A&))) :pattern ((tr_bound%core!iter.traits.iterator.Iterator. $ (TYPE%core!ops.range.Range. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Idx&. Dcr) (Idx& Type)) (! (=> (tr_bound%core!clone.Clone. Idx&. Idx&) (tr_bound%core!clone.Clone. $ (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Idx&. Dcr) (Idx& Type)) (! (=> (tr_bound%core!cmp.PartialEq. Idx&. Idx& Idx&. Idx&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.range.Range. Idx&. Idx&) $ (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.range.Range. Idx&. Idx&) $ (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr2page_index")
(declare-fun req%lib!util.page_ptr_util_u.page_ptr2page_index. (Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((ptr! Int)) (! (= (req%lib!util.page_ptr_util_u.page_ptr2page_index. ptr!) (=> %%global_location_label%%9 (= (uClip SZ (EucMod ptr! 4096)) 0))) :pattern ((req%lib!util.page_ptr_util_u.page_ptr2page_index. ptr!)))))
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr2page_index. (Int Int) Bool)
(assert (forall ((ptr! Int) (ret! Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr2page_index. ptr! ret!) (and (uInv SZ ret!) (= ret! (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I ptr!))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr2page_index. ptr! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::page_ptr2page_index")
(set-info :comment ";; util/page_ptr_util_u.rs:36:1: 36:54 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::v2l4index")
(declare-fun req%lib!util.page_ptr_util_u.v2l4index. (Int) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((va! Int)) (! (= (req%lib!util.page_ptr_util_u.v2l4index. va!) (=> %%global_location_label%%10 (or (or (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))))) :pattern ((req%lib!util.page_ptr_util_u.v2l4index. va!)))))
(declare-fun ens%lib!util.page_ptr_util_u.v2l4index. (Int Int) Bool)
(assert (forall ((va! Int) (ret! Int)) (! (= (ens%lib!util.page_ptr_util_u.v2l4index. va! ret!) (and (uInv SZ ret!) (= ret! (lib!util.page_ptr_util_u.spec_v2l4index.? (I va!))) (and (<= lib!define.KERNEL_MEM_END_L4INDEX.? ret!) (<= ret! 511)))) :pattern ((ens%lib!util.page_ptr_util_u.v2l4index. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::v2l4index")
(set-info :comment ";; util/page_ptr_util_u.rs:266:1: 266:45 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::v2l3index")
(declare-fun req%lib!util.page_ptr_util_u.v2l3index. (Int) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((va! Int)) (! (= (req%lib!util.page_ptr_util_u.v2l3index. va!) (=> %%global_location_label%%11 (or (or (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))))) :pattern ((req%lib!util.page_ptr_util_u.v2l3index. va!)))))
(declare-fun ens%lib!util.page_ptr_util_u.v2l3index. (Int Int) Bool)
(assert (forall ((va! Int) (ret! Int)) (! (= (ens%lib!util.page_ptr_util_u.v2l3index. va! ret!) (and (uInv SZ ret!) (= ret! (lib!util.page_ptr_util_u.spec_v2l3index.? (I va!))) (<= ret! 511))) :pattern ((ens%lib!util.page_ptr_util_u.v2l3index. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::v2l3index")
(set-info :comment ";; util/page_ptr_util_u.rs:256:1: 256:45 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::v2l2index")
(declare-fun req%lib!util.page_ptr_util_u.v2l2index. (Int) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((va! Int)) (! (= (req%lib!util.page_ptr_util_u.v2l2index. va!) (=> %%global_location_label%%12 (or (or (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))))) :pattern ((req%lib!util.page_ptr_util_u.v2l2index. va!)))))
(declare-fun ens%lib!util.page_ptr_util_u.v2l2index. (Int Int) Bool)
(assert (forall ((va! Int) (ret! Int)) (! (= (ens%lib!util.page_ptr_util_u.v2l2index. va! ret!) (and (uInv SZ ret!) (= ret! (lib!util.page_ptr_util_u.spec_v2l2index.? (I va!))) (<= ret! 511))) :pattern ((ens%lib!util.page_ptr_util_u.v2l2index. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::v2l2index")
(set-info :comment ";; util/page_ptr_util_u.rs:246:1: 246:45 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::v2l1index")
(declare-fun req%lib!util.page_ptr_util_u.v2l1index. (Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((va! Int)) (! (= (req%lib!util.page_ptr_util_u.v2l1index. va!) (=> %%global_location_label%%13 (or (or (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))))) :pattern ((req%lib!util.page_ptr_util_u.v2l1index. va!)))))
(declare-fun ens%lib!util.page_ptr_util_u.v2l1index. (Int Int) Bool)
(assert (forall ((va! Int) (ret! Int)) (! (= (ens%lib!util.page_ptr_util_u.v2l1index. va! ret!) (and (uInv SZ ret!) (= ret! (lib!util.page_ptr_util_u.spec_v2l1index.? (I va!))) (<= ret! 511))) :pattern ((ens%lib!util.page_ptr_util_u.v2l1index. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::v2l1index")
(set-info :comment ";; util/page_ptr_util_u.rs:236:1: 236:45 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va2index")
(declare-fun req%lib!util.page_ptr_util_u.va2index. (Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((va! Int)) (! (= (req%lib!util.page_ptr_util_u.va2index. va!) (=> %%global_location_label%%14 (or (or (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))))) :pattern ((req%lib!util.page_ptr_util_u.va2index. va!)))))
(declare-fun ens%lib!util.page_ptr_util_u.va2index. (Int tuple%4.) Bool)
(assert (forall ((va! Int) (ret! tuple%4.)) (! (= (ens%lib!util.page_ptr_util_u.va2index. va! ret!) (and (has_type (Poly%tuple%4. ret!) (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ))) (and (= (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. ret!)))) (lib!util.page_ptr_util_u.spec_v2l4index.? (I va!))) (let ((tmp%%$ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. ret!)))))) (and (<= lib!define.KERNEL_MEM_END_L4INDEX.? tmp%%$) (<= tmp%%$ 511)))) (and (= (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. ret!)))) (lib!util.page_ptr_util_u.spec_v2l3index.? (I va!))) (<= (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. ret!)))) 511)) (and (= (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. ret!)))) (lib!util.page_ptr_util_u.spec_v2l2index.? (I va!))) (<= (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. ret!)))) 511)) (and (= (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. ret!)))) (lib!util.page_ptr_util_u.spec_v2l1index.? (I va!))) (<= (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. ret!)))) 511)) (= ret! (lib!util.page_ptr_util_u.spec_va2index.? (I va!))))) :pattern ((ens%lib!util.page_ptr_util_u.va2index. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::va2index")
(set-info :comment ";; util/page_ptr_util_u.rs:298:1: 298:71 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_index2page_ptr")
(declare-fun req%lib!util.page_ptr_util_u.page_index2page_ptr. (Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((i! Int)) (! (= (req%lib!util.page_ptr_util_u.page_index2page_ptr. i!) (=> %%global_location_label%%15 (and (<= 0 i!) (< i! lib!define.NUM_PAGES.?)))) :pattern ((req%lib!util.page_ptr_util_u.page_index2page_ptr. i!)))))
(declare-fun ens%lib!util.page_ptr_util_u.page_index2page_ptr. (Int Int) Bool)
(assert (forall ((i! Int) (ret! Int)) (! (= (ens%lib!util.page_ptr_util_u.page_index2page_ptr. i! ret!) (and (uInv SZ ret!) (= ret! (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? (I i!))))) :pattern ((ens%lib!util.page_ptr_util_u.page_index2page_ptr. i! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::page_index2page_ptr")
(set-info :comment ";; util/page_ptr_util_u.rs:46:1: 46:51 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va_4k_valid")
(declare-fun ens%lib!util.page_ptr_util_u.va_4k_valid. (Int Bool) Bool)
(assert (forall ((va! Int) (ret! Bool)) (! (= (ens%lib!util.page_ptr_util_u.va_4k_valid. va! ret!) (= ret! (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)))) :pattern ((ens%lib!util.page_ptr_util_u.va_4k_valid. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::va_4k_valid")
(set-info :comment ";; util/page_ptr_util_u.rs:115:1: 115:42 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va_4k_range_valid")
(declare-fun req%lib!util.page_ptr_util_u.va_4k_range_valid. (Int Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((va! Int) (len! Int)) (! (= (req%lib!util.page_ptr_util_u.va_4k_range_valid. va! len!) (=> %%global_location_label%%16 (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)))) :pattern ((req%lib!util.page_ptr_util_u.va_4k_range_valid. va! len!)))))
(declare-fun ens%lib!util.page_ptr_util_u.va_4k_range_valid. (Int Int Bool) Bool)
(assert (forall ((va! Int) (len! Int) (ret! Bool)) (! (= (ens%lib!util.page_ptr_util_u.va_4k_range_valid. va! len! ret!) (= (lib!util.page_ptr_util_u.spec_va_4k_range_valid.? (I va!) (I len!)) ret!)) :pattern ((ens%lib!util.page_ptr_util_u.va_4k_range_valid. va! len! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::va_4k_range_valid")
(set-info :comment ";; util/page_ptr_util_u.rs:137:5: 149:6 (#0)")
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::va_4k_range_valid")
(set-info :comment ";; util/page_ptr_util_u.rs:131:1: 131:60 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va_2m_valid")
(declare-fun ens%lib!util.page_ptr_util_u.va_2m_valid. (Int Bool) Bool)
(assert (forall ((va! Int) (ret! Bool)) (! (= (ens%lib!util.page_ptr_util_u.va_2m_valid. va! ret!) (= ret! (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!)))) :pattern ((ens%lib!util.page_ptr_util_u.va_2m_valid. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::va_2m_valid")
(set-info :comment ";; util/page_ptr_util_u.rs:159:1: 159:42 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va_1g_valid")
(declare-fun ens%lib!util.page_ptr_util_u.va_1g_valid. (Int Bool) Bool)
(assert (forall ((va! Int) (ret! Bool)) (! (= (ens%lib!util.page_ptr_util_u.va_1g_valid. va! ret!) (= ret! (lib!util.page_ptr_util_u.spec_va_1g_valid.? (I va!)))) :pattern ((ens%lib!util.page_ptr_util_u.va_1g_valid. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::va_1g_valid")
(set-info :comment ";; util/page_ptr_util_u.rs:172:1: 172:42 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::index2va")
(declare-fun ens%lib!util.page_ptr_util_u.index2va. (tuple%4. Int) Bool)
(assert (forall ((i! tuple%4.) (%return! Int)) (! (= (ens%lib!util.page_ptr_util_u.index2va. i! %return!) (uInv SZ %return!)) :pattern ((ens%lib!util.page_ptr_util_u.index2va. i! %return!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::index2va")
(set-info :comment ";; util/page_ptr_util_u.rs:230:1: 230:62 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va21gindex")
(declare-fun req%lib!util.page_ptr_util_u.va21gindex. (Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((va! Int)) (! (= (req%lib!util.page_ptr_util_u.va21gindex. va!) (=> %%global_location_label%%17 (or (or (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))))) :pattern ((req%lib!util.page_ptr_util_u.va21gindex. va!)))))
(declare-fun ens%lib!util.page_ptr_util_u.va21gindex. (Int tuple%2.) Bool)
(assert (forall ((va! Int) (ret! tuple%2.)) (! (= (ens%lib!util.page_ptr_util_u.va21gindex. va! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (and (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (lib!util.page_ptr_util_u.spec_v2l4index.? (I va!))) (let ((tmp%%$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (and (<= lib!define.KERNEL_MEM_END_L4INDEX.? tmp%%$) (<= tmp%%$ 511)))) (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (lib!util.page_ptr_util_u.spec_v2l3index.? (I va!))) (<= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) 511)) (= ret! (lib!util.page_ptr_util_u.spec_va21gindex.? (I va!))))) :pattern ((ens%lib!util.page_ptr_util_u.va21gindex. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::va21gindex")
(set-info :comment ";; util/page_ptr_util_u.rs:275:1: 275:57 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va22mindex")
(declare-fun req%lib!util.page_ptr_util_u.va22mindex. (Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((va! Int)) (! (= (req%lib!util.page_ptr_util_u.va22mindex. va!) (=> %%global_location_label%%18 (or (or (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))))) :pattern ((req%lib!util.page_ptr_util_u.va22mindex. va!)))))
(declare-fun ens%lib!util.page_ptr_util_u.va22mindex. (Int tuple%3.) Bool)
(assert (forall ((va! Int) (ret! tuple%3.)) (! (= (ens%lib!util.page_ptr_util_u.va22mindex. va! ret!) (and (has_type (Poly%tuple%3. ret!) (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ))) (and (= (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (lib!util.page_ptr_util_u.spec_v2l4index.? (I va!))) (let ((tmp%%$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. ret!)))))) (and (<= lib!define.KERNEL_MEM_END_L4INDEX.? tmp%%$) (<= tmp%%$ 511)))) (and (= (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (lib!util.page_ptr_util_u.spec_v2l3index.? (I va!))) (<= (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) 511)) (and (= (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (lib!util.page_ptr_util_u.spec_v2l2index.? (I va!))) (<= (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) 511)) (= ret! (lib!util.page_ptr_util_u.spec_va22mindex.? (I va!))))) :pattern ((ens%lib!util.page_ptr_util_u.va22mindex. va! ret!)))))
(set-info :comment ";; Function-Def lib::util::page_ptr_util_u::va22mindex")
(set-info :comment ";; util/page_ptr_util_u.rs:286:1: 286:65 (#0)")
(declare-const ret! tuple%3.)
(declare-const va! Int)
(declare-const tmp%1 Int)
(declare-const tmp%2 Int)
(declare-const tmp%3 Int)
(assert fuel_defaults)
(assert (uInv SZ va!))
(assert (or (or (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I va!)) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))) (lib!util.page_ptr_util_u.spec_va_2m_valid.? (I va!))))
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%6 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!util.page_ptr_util_u.v2l4index. va!)) (=> (ens%lib!util.page_ptr_util_u.v2l4index. va! tmp%1) (and (=> %%location_label%%1 (req%lib!util.page_ptr_util_u.v2l3index. va!)) (=> (ens%lib!util.page_ptr_util_u.v2l3index. va! tmp%2) (and (=> %%location_label%%2 (req%lib!util.page_ptr_util_u.v2l2index. va!)) (=> (ens%lib!util.page_ptr_util_u.v2l2index. va! tmp%3) (=> (= ret! (tuple%3./tuple%3 (I tmp%1) (I tmp%2) (I tmp%3))) (and (=> %%location_label%%3 (and (= (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (lib!util.page_ptr_util_u.spec_v2l4index.? (I va!))) (let ((tmp%%$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. ret!)))))) (and (<= lib!define.KERNEL_MEM_END_L4INDEX.? tmp%%$) (<= tmp%%$ 511))))) (and (=> %%location_label%%4 (and (= (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (lib!util.page_ptr_util_u.spec_v2l3index.? (I va!))) (<= (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) 511))) (and (=> %%location_label%%5 (and (= (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (lib!util.page_ptr_util_u.spec_v2l2index.? (I va!))) (<= (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) 511))) (=> %%location_label%%6 (= ret! (lib!util.page_ptr_util_u.spec_va22mindex.? (I va!))))))))))))))))
(check-sat)
(exit)
