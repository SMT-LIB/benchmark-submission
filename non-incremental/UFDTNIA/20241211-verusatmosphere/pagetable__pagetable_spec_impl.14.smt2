(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module pagetable::pagetable_spec_impl'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%2.arrow_0. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.value. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%0.spec_addr. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.pptr. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.is_init. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.value. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%vstd!view.impl&%46.view. FuelId)
(declare-const fuel%lib!pagetable.pagemap.impl&%0.wf. FuelId)
(declare-const fuel%lib!pagetable.pagemap.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!pagetable.entry.impl&%4.is_empty. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_page_entry_to_map_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2present. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2ps. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2write. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2execute_disable. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2user. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2page_entry_perm. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2page_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2pa. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.page_closure. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_4k_pa_mapped. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_2m_pa_mapped. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_1g_pa_mapped. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.pcid_ioid_wf. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.tlb_wf. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.tlb_submap_of_mapping. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.user_only. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.no_self_mapping. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.kernel_entries_wf. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists. FuelId)
(declare-const fuel%lib!lemma.lemma_u.submap_by_transitivity. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.MEM_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_4k_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_1g_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_v2l1index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_v2l2index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_v2l3index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_v2l4index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va2index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_index2va. FuelId)
(declare-const fuel%lib!define.KERNEL_MEM_END_L4INDEX. FuelId)
(declare-const fuel%lib!define.NUM_PAGES. FuelId)
(declare-const fuel%lib!define.MEM_MASK. FuelId)
(declare-const fuel%lib!define.MEM_4k_MASK. FuelId)
(declare-const fuel%lib!define.MEM_2m_MASK. FuelId)
(declare-const fuel%lib!define.MEM_1g_MASK. FuelId)
(declare-const fuel%lib!define.NUM_CPUS. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. FuelId)
(declare-const fuel%lib!array.impl&%0.view. FuelId)
(declare-const fuel%lib!array.impl&%0.wf. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!raw_ptr.impl&%2.arrow_0. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.impl&%7.value. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!simple_pptr.impl&%0.spec_addr. fuel%vstd!simple_pptr.impl&%1.pptr. fuel%vstd!simple_pptr.impl&%1.is_init. fuel%vstd!simple_pptr.impl&%1.value. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%vstd!view.impl&%46.view. fuel%lib!pagetable.pagemap.impl&%0.wf. fuel%lib!pagetable.pagemap.impl&%0.spec_index. fuel%lib!pagetable.entry.impl&%4.is_empty. fuel%lib!pagetable.entry.spec_page_entry_to_map_entry. fuel%lib!pagetable.entry.usize2present. fuel%lib!pagetable.entry.usize2ps. fuel%lib!pagetable.entry.usize2write. fuel%lib!pagetable.entry.usize2execute_disable. fuel%lib!pagetable.entry.usize2user. fuel%lib!pagetable.entry.spec_usize2page_entry_perm. fuel%lib!pagetable.entry.spec_usize2page_entry. fuel%lib!pagetable.entry.spec_usize2pa. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_empty. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.page_closure. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_4k_pa_mapped. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_2m_pa_mapped. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_1g_pa_mapped. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.pcid_ioid_wf. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.tlb_wf. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.tlb_submap_of_mapping. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.user_only. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.no_self_mapping. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.kernel_entries_wf. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists. fuel%lib!lemma.lemma_u.submap_by_transitivity. fuel%lib!util.page_ptr_util_u.MEM_valid. fuel%lib!util.page_ptr_util_u.page_ptr_valid. fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid. fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid. fuel%lib!util.page_ptr_util_u.spec_va_4k_valid. fuel%lib!util.page_ptr_util_u.spec_va_2m_valid. fuel%lib!util.page_ptr_util_u.spec_va_1g_valid. fuel%lib!util.page_ptr_util_u.spec_v2l1index. fuel%lib!util.page_ptr_util_u.spec_v2l2index. fuel%lib!util.page_ptr_util_u.spec_v2l3index. fuel%lib!util.page_ptr_util_u.spec_v2l4index. fuel%lib!util.page_ptr_util_u.spec_va2index. fuel%lib!util.page_ptr_util_u.spec_index2va. fuel%lib!define.KERNEL_MEM_END_L4INDEX. fuel%lib!define.NUM_PAGES. fuel%lib!define.MEM_MASK. fuel%lib!define.MEM_4k_MASK. fuel%lib!define.MEM_2m_MASK. fuel%lib!define.MEM_1g_MASK. fuel%lib!define.NUM_CPUS. fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. fuel%lib!define.PAGE_ENTRY_USER_SHIFT. fuel%lib!define.PAGE_ENTRY_PS_SHIFT. fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. fuel%lib!define.PAGE_ENTRY_WRITE_MASK. fuel%lib!define.PAGE_ENTRY_USER_MASK. fuel%lib!define.PAGE_ENTRY_PS_MASK. fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. fuel%lib!array.impl&%0.view. fuel%lib!array.impl&%0.wf. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<usize./usize.>. 0)
(declare-sort vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. 0)
(declare-sort vstd!map.Map<usize./tuple%2<usize./usize.>.>. 0)
(declare-sort vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<usize.>. 0)
(declare-sort vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. 0)
(declare-sort vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. 0)
(declare-sort vstd!set.Set<usize.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!marker.PhantomData. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (vstd!simple_pptr.PPtr. 0) (lib!pagetable.pagemap.PageMap. 0) (lib!pagetable.entry.PageEntryPerm. 0) (lib!pagetable.entry.PageEntry. 0) (lib!pagetable.entry.MapEntry. 0) (lib!pagetable.pagetable_spec_impl.PageTable. 0) (lib!array.Array. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!marker.PhantomData./PhantomData )) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((vstd!simple_pptr.PPtr./PPtr (vstd!simple_pptr.PPtr./PPtr/?0 Int) (vstd!simple_pptr.PPtr./PPtr/?1 core!marker.PhantomData.))) ((lib!pagetable.pagemap.PageMap./PageMap (lib!pagetable.pagemap.PageMap./PageMap/?ar lib!array.Array.) (lib!pagetable.pagemap.PageMap./PageMap/?spec_seq vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.))) ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?present Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?ps Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?write Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?execute_disable Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?user Bool))) ((lib!pagetable.entry.PageEntry./PageEntry (lib!pagetable.entry.PageEntry./PageEntry/?addr Int) (lib!pagetable.entry.PageEntry./PageEntry/?perm lib!pagetable.entry.PageEntryPerm.))) ((lib!pagetable.entry.MapEntry./MapEntry (lib!pagetable.entry.MapEntry./MapEntry/?addr Int) (lib!pagetable.entry.MapEntry./MapEntry/?write Bool) (lib!pagetable.entry.MapEntry./MapEntry/?execute_disable Bool))) ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?cr3 Int) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?pcid core!option.Option.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?ioid core!option.Option.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?kernel_l4_end Int) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l4_table vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l3_rev_map vstd!map.Map<usize./usize.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l3_tables vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l2_rev_map vstd!map.Map<usize./tuple%2<usize./usize.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l2_tables vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l1_rev_map vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l1_tables vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_4k vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_2m vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_1g vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?kernel_entries vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_4k vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_2m vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_1g vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.))) ((lib!array.Array./Array (lib!array.Array./Array/?seq Poly) (lib!array.Array./Array/?ar %%Function%%))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun vstd!simple_pptr.PPtr./PPtr/0 (vstd!simple_pptr.PPtr.) Int)
(declare-fun vstd!simple_pptr.PPtr./PPtr/1 (vstd!simple_pptr.PPtr.) core!marker.PhantomData.)
(declare-fun lib!pagetable.pagemap.PageMap./PageMap/ar (lib!pagetable.pagemap.PageMap.) lib!array.Array.)
(declare-fun lib!pagetable.pagemap.PageMap./PageMap/spec_seq (lib!pagetable.pagemap.PageMap.) vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntry./PageEntry/addr (lib!pagetable.entry.PageEntry.) Int)
(declare-fun lib!pagetable.entry.PageEntry./PageEntry/perm (lib!pagetable.entry.PageEntry.) lib!pagetable.entry.PageEntryPerm.)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/addr (lib!pagetable.entry.MapEntry.) Int)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/write (lib!pagetable.entry.MapEntry.) Bool)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/execute_disable (lib!pagetable.entry.MapEntry.) Bool)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (lib!pagetable.pagetable_spec_impl.PageTable.) Int)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (lib!pagetable.pagetable_spec_impl.PageTable.) core!option.Option.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (lib!pagetable.pagetable_spec_impl.PageTable.) core!option.Option.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (lib!pagetable.pagetable_spec_impl.PageTable.) Int)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./usize.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./tuple%2<usize./usize.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)
(declare-fun lib!array.Array./Array/seq (lib!array.Array.) Poly)
(declare-fun lib!array.Array./Array/ar (lib!array.Array.) %%Function%%)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!marker.PhantomData. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PointsTo. (Dcr Type) Type)
(declare-const TYPE%lib!pagetable.pagemap.PageMap. Type)
(declare-const TYPE%lib!pagetable.entry.PageEntryPerm. Type)
(declare-const TYPE%lib!pagetable.entry.PageEntry. Type)
(declare-const TYPE%lib!pagetable.entry.MapEntry. Type)
(declare-const TYPE%lib!pagetable.pagetable_spec_impl.PageTable. Type)
(declare-fun TYPE%lib!array.Array. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<usize./usize.>. (vstd!map.Map<usize./usize.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./usize.>. (Poly) vstd!map.Map<usize./usize.>.)
(declare-fun Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (vstd!map.Map<usize./tuple%2<usize./usize.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (Poly) vstd!map.Map<usize./tuple%2<usize./usize.>.>.)
(declare-fun Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (Poly) vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq<usize.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<usize.>. (Poly) vstd!seq.Seq<usize.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (Poly) vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (Poly) vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)
(declare-fun Poly%vstd!set.Set<usize.>. (vstd!set.Set<usize.>.) Poly)
(declare-fun %Poly%vstd!set.Set<usize.>. (Poly) vstd!set.Set<usize.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. (vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. (Poly) vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!marker.PhantomData. (core!marker.PhantomData.) Poly)
(declare-fun %Poly%core!marker.PhantomData. (Poly) core!marker.PhantomData.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PPtr. (Poly) vstd!simple_pptr.PPtr.)
(declare-fun Poly%lib!pagetable.pagemap.PageMap. (lib!pagetable.pagemap.PageMap.) Poly)
(declare-fun %Poly%lib!pagetable.pagemap.PageMap. (Poly) lib!pagetable.pagemap.PageMap.)
(declare-fun Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntryPerm.) Poly)
(declare-fun %Poly%lib!pagetable.entry.PageEntryPerm. (Poly) lib!pagetable.entry.PageEntryPerm.)
(declare-fun Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry.) Poly)
(declare-fun %Poly%lib!pagetable.entry.PageEntry. (Poly) lib!pagetable.entry.PageEntry.)
(declare-fun Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry.) Poly)
(declare-fun %Poly%lib!pagetable.entry.MapEntry. (Poly) lib!pagetable.entry.MapEntry.)
(declare-fun Poly%lib!pagetable.pagetable_spec_impl.PageTable. (lib!pagetable.pagetable_spec_impl.PageTable.) Poly)
(declare-fun %Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly) lib!pagetable.pagetable_spec_impl.PageTable.)
(declare-fun Poly%lib!array.Array. (lib!array.Array.) Poly)
(declare-fun %Poly%lib!array.Array. (Poly) lib!array.Array.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x vstd!map.Map<usize./usize.>.)) (! (= x (%Poly%vstd!map.Map<usize./usize.>. (Poly%vstd!map.Map<usize./usize.>. x))) :pattern ((Poly%vstd!map.Map<usize./usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (UINT SZ))) (= x (Poly%vstd!map.Map<usize./usize.>. (%Poly%vstd!map.Map<usize./usize.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (UINT SZ)))))))
(assert (forall ((x vstd!map.Map<usize./usize.>.)) (! (has_type (Poly%vstd!map.Map<usize./usize.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (UINT SZ))) :pattern ((has_type (Poly%vstd!map.Map<usize./usize.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (UINT SZ)))))))
(assert (forall ((x vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)) (! (= x (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x))) :pattern ((Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)) (= x (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))))))
(assert (forall ((x vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)) (! (has_type (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((has_type (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.)))))))
(assert (forall ((x vstd!map.Map<usize./tuple%2<usize./usize.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (= x (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (%Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./tuple%2<usize./usize.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) (= x (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (%Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (= x (%Poly%vstd!seq.Seq<usize.>. (Poly%vstd!seq.Seq<usize.>. x))) :pattern ((Poly%vstd!seq.Seq<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ))) (= x (Poly%vstd!seq.Seq<usize.>. (%Poly%vstd!seq.Seq<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.)) (= x (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (%Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.))))))
(assert (forall ((x vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.))))))
(assert (forall ((x vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))) (= x (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (%Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)))))))
(assert (forall ((x vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (= x (%Poly%vstd!set.Set<usize.>. (Poly%vstd!set.Set<usize.>. x))) :pattern ((Poly%vstd!set.Set<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (UINT SZ))) (= x (Poly%vstd!set.Set<usize.>. (%Poly%vstd!set.Set<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. (%Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!marker.PhantomData.)) (! (= x (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. x))) :pattern ((Poly%core!marker.PhantomData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!marker.PhantomData. V&. V&)) (= x (Poly%core!marker.PhantomData. (%Poly%core!marker.PhantomData. x)))) :pattern ((has_type x (TYPE%core!marker.PhantomData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (x core!marker.PhantomData.)) (! (has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&)) :pattern ((has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= x (%Poly%vstd!simple_pptr.PPtr. (Poly%vstd!simple_pptr.PPtr. x))) :pattern ((Poly%vstd!simple_pptr.PPtr. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (= x (Poly%vstd!simple_pptr.PPtr. (%Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Int) (_1! core!marker.PhantomData.)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr./PPtr _0! _1!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))) :pattern ((has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr./PPtr _0! _1!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= (vstd!simple_pptr.PPtr./PPtr/0 x) (vstd!simple_pptr.PPtr./PPtr/?0 x)) :pattern ((vstd!simple_pptr.PPtr./PPtr/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (uInv SZ (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. x)) (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= (vstd!simple_pptr.PPtr./PPtr/1 x) (vstd!simple_pptr.PPtr./PPtr/?1 x)) :pattern ((vstd!simple_pptr.PPtr./PPtr/1 x)))))
(define-fun is-vstd!simple_pptr.PPtr./PPtr_ ((c vstd!simple_pptr.PPtr.)) Bool ((_ is vstd!simple_pptr.PPtr./PPtr) c))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (=> (is-vstd!simple_pptr.PPtr./PPtr_ x) (height_lt (height (Poly%core!marker.PhantomData. (vstd!simple_pptr.PPtr./PPtr/1 x))) (height (Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((height (Poly%core!marker.PhantomData. (vstd!simple_pptr.PPtr./PPtr/1 x)))))))
(assert (forall ((x lib!pagetable.pagemap.PageMap.)) (! (= x (%Poly%lib!pagetable.pagemap.PageMap. (Poly%lib!pagetable.pagemap.PageMap. x))) :pattern ((Poly%lib!pagetable.pagemap.PageMap. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagemap.PageMap.) (= x (Poly%lib!pagetable.pagemap.PageMap. (%Poly%lib!pagetable.pagemap.PageMap. x)))) :pattern ((has_type x TYPE%lib!pagetable.pagemap.PageMap.)))))
(assert (forall ((_ar! lib!array.Array.) (_spec_seq! vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)) (! (=> (has_type (Poly%lib!array.Array. _ar!) (TYPE%lib!array.Array. $ (UINT SZ) $ (CONST_INT 512))) (has_type (Poly%lib!pagetable.pagemap.PageMap. (lib!pagetable.pagemap.PageMap./PageMap _ar! _spec_seq!)) TYPE%lib!pagetable.pagemap.PageMap.)) :pattern ((has_type (Poly%lib!pagetable.pagemap.PageMap. (lib!pagetable.pagemap.PageMap./PageMap _ar! _spec_seq!)) TYPE%lib!pagetable.pagemap.PageMap.)))))
(assert (forall ((x lib!pagetable.pagemap.PageMap.)) (! (= (lib!pagetable.pagemap.PageMap./PageMap/ar x) (lib!pagetable.pagemap.PageMap./PageMap/?ar x)) :pattern ((lib!pagetable.pagemap.PageMap./PageMap/ar x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagemap.PageMap.) (has_type (Poly%lib!array.Array. (lib!pagetable.pagemap.PageMap./PageMap/ar (%Poly%lib!pagetable.pagemap.PageMap. x))) (TYPE%lib!array.Array. $ (UINT SZ) $ (CONST_INT 512)))) :pattern ((lib!pagetable.pagemap.PageMap./PageMap/ar (%Poly%lib!pagetable.pagemap.PageMap. x)) (has_type x TYPE%lib!pagetable.pagemap.PageMap.)))))
(assert (forall ((x lib!pagetable.pagemap.PageMap.)) (! (= (lib!pagetable.pagemap.PageMap./PageMap/spec_seq x) (lib!pagetable.pagemap.PageMap./PageMap/?spec_seq x)) :pattern ((lib!pagetable.pagemap.PageMap./PageMap/spec_seq x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= x (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. x))) :pattern ((Poly%lib!pagetable.entry.PageEntryPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntryPerm.) (= x (Poly%lib!pagetable.entry.PageEntryPerm. (%Poly%lib!pagetable.entry.PageEntryPerm. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.PageEntryPerm.)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?present x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?ps x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?write x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?execute_disable x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?user x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (has_type (Poly%lib!pagetable.entry.PageEntryPerm. x) TYPE%lib!pagetable.entry.PageEntryPerm.) :pattern ((has_type (Poly%lib!pagetable.entry.PageEntryPerm. x) TYPE%lib!pagetable.entry.PageEntryPerm.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= x (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. x))) :pattern ((Poly%lib!pagetable.entry.PageEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntry.) (= x (Poly%lib!pagetable.entry.PageEntry. (%Poly%lib!pagetable.entry.PageEntry. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((_addr! Int) (_perm! lib!pagetable.entry.PageEntryPerm.)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry./PageEntry _addr! _perm!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry./PageEntry _addr! _perm!)) TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= (lib!pagetable.entry.PageEntry./PageEntry/addr x) (lib!pagetable.entry.PageEntry./PageEntry/?addr x)) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntry.) (uInv SZ (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. x)))) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. x)) (has_type x TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= (lib!pagetable.entry.PageEntry./PageEntry/perm x) (lib!pagetable.entry.PageEntry./PageEntry/?perm x)) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/perm x)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= x (%Poly%lib!pagetable.entry.MapEntry. (Poly%lib!pagetable.entry.MapEntry. x))) :pattern ((Poly%lib!pagetable.entry.MapEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.MapEntry.) (= x (Poly%lib!pagetable.entry.MapEntry. (%Poly%lib!pagetable.entry.MapEntry. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((_addr! Int) (_write! Bool) (_execute_disable! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry./MapEntry _addr! _write! _execute_disable!)) TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry./MapEntry _addr! _write! _execute_disable!)) TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/addr x) (lib!pagetable.entry.MapEntry./MapEntry/?addr x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.MapEntry.) (uInv SZ (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. x)))) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. x)) (has_type x TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/write x) (lib!pagetable.entry.MapEntry./MapEntry/?write x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/write x)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/execute_disable x) (lib!pagetable.entry.MapEntry./MapEntry/?execute_disable x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/execute_disable x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= x (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. x))) :pattern ((Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (= x (Poly%lib!pagetable.pagetable_spec_impl.PageTable. (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)))) :pattern ((has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((_cr3! Int) (_pcid! core!option.Option.) (_ioid! core!option.Option.) (_kernel_l4_end! Int) (_l4_table! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (_l3_rev_map! vstd!map.Map<usize./usize.>.) (_l3_tables! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (_l2_rev_map! vstd!map.Map<usize./tuple%2<usize./usize.>.>.) (_l2_tables! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (_l1_rev_map! vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.) (_l1_tables! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (_mapping_4k! vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (_mapping_2m! vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (_mapping_1g! vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (_kernel_entries! vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) (_tlb_mapping_4k! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (_tlb_mapping_2m! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (_tlb_mapping_1g! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)) (! (=> (and (uInv SZ _cr3!) (has_type (Poly%core!option.Option. _pcid!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _ioid!) (TYPE%core!option.Option. $ (UINT SZ))) (uInv SZ _kernel_l4_end!)) (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable _cr3! _pcid! _ioid! _kernel_l4_end! _l4_table! _l3_rev_map! _l3_tables! _l2_rev_map! _l2_tables! _l1_rev_map! _l1_tables! _mapping_4k! _mapping_2m! _mapping_1g! _kernel_entries! _tlb_mapping_4k! _tlb_mapping_2m! _tlb_mapping_1g!)) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)) :pattern ((has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable _cr3! _pcid! _ioid! _kernel_l4_end! _l4_table! _l3_rev_map! _l3_tables! _l2_rev_map! _l2_tables! _l1_rev_map! _l1_tables! _mapping_4k! _mapping_2m! _mapping_1g! _kernel_entries! _tlb_mapping_4k! _tlb_mapping_2m! _tlb_mapping_1g!)) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?cr3 x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (uInv SZ (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)))) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)) (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?pcid x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)) (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?ioid x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)) (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?kernel_l4_end x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (uInv SZ (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)))) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)) (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l4_table x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l3_rev_map x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l3_tables x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l2_rev_map x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l2_tables x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l1_rev_map x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l1_tables x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_4k x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_2m x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_1g x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?kernel_entries x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_4k x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_2m x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_1g x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g x)))))
(assert (forall ((x lib!array.Array.)) (! (= x (%Poly%lib!array.Array. (Poly%lib!array.Array. x))) :pattern ((Poly%lib!array.Array. x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (= x (Poly%lib!array.Array. (%Poly%lib!array.Array. x)))) :pattern ((has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (_seq! Poly) (_ar! %%Function%%)) (! (=> (and (has_type _seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (Poly%array%. _ar!) (ARRAY A&. A& N&. N&))) (has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) :pattern ((has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/seq x) (lib!array.Array./Array/?seq x)) :pattern ((lib!array.Array./Array/seq x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/ar x) (lib!array.Array./Array/?ar x)) :pattern ((lib!array.Array./Array/ar x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (Poly%array%. (lib!array.Array./Array/ar (%Poly%lib!array.Array. x))) (ARRAY A&. A& N&. N&))) :pattern ((lib!array.Array./Array/ar (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(define-fun is-lib!array.Array./Array_ ((c lib!array.Array.)) Bool ((_ is lib!array.Array./Array) c))
(assert (forall ((x lib!array.Array.)) (! (=> (is-lib!array.Array./Array_ x) (height_lt (height (lib!array.Array./Array/seq x)) (height (Poly%lib!array.Array. x)))) :pattern ((height (lib!array.Array./Array/seq x))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%0::spec_addr")
(declare-fun vstd!simple_pptr.impl&%0.spec_addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::addr")
(declare-fun vstd!simple_pptr.impl&%1.addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::mem_contents")
(declare-fun vstd!simple_pptr.impl&%1.mem_contents.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::pptr")
(declare-fun vstd!simple_pptr.impl&%1.pptr.? (Dcr Type Poly) vstd!simple_pptr.PPtr.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::is_init")
(declare-fun vstd!simple_pptr.impl&%1.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%2::arrow_0")
(declare-fun vstd!raw_ptr.impl&%2.arrow_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::value")
(declare-fun vstd!raw_ptr.impl&%7.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::value")
(declare-fun vstd!simple_pptr.impl&%1.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::array::Array::wf")
(declare-fun lib!array.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::MEM_MASK")
(declare-fun lib!define.MEM_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2pa")
(declare-fun lib!pagetable.entry.spec_usize2pa.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PRESENT_MASK")
(declare-fun lib!define.PAGE_ENTRY_PRESENT_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2present")
(declare-fun lib!pagetable.entry.usize2present.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_PS_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_MASK")
(declare-fun lib!define.PAGE_ENTRY_PS_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2ps")
(declare-fun lib!pagetable.entry.usize2ps.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_WRITE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_MASK")
(declare-fun lib!define.PAGE_ENTRY_WRITE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2write")
(declare-fun lib!pagetable.entry.usize2write.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_MASK")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2execute_disable")
(declare-fun lib!pagetable.entry.usize2execute_disable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_USER_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_MASK")
(declare-fun lib!define.PAGE_ENTRY_USER_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2user")
(declare-fun lib!pagetable.entry.usize2user.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2page_entry_perm")
(declare-fun lib!pagetable.entry.spec_usize2page_entry_perm.? (Poly) lib!pagetable.entry.PageEntryPerm.)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2page_entry")
(declare-fun lib!pagetable.entry.spec_usize2page_entry.? (Poly) lib!pagetable.entry.PageEntry.)
(set-info :comment ";; Function-Decl lib::array::Array::view")
(declare-fun lib!array.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pagetable::pagemap::PageMap::wf")
(declare-fun lib!pagetable.pagemap.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagemap::PageMap::spec_index")
(declare-fun lib!pagetable.pagemap.impl&%0.spec_index.? (Poly Poly) lib!pagetable.entry.PageEntry.)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::MEM_valid")
(declare-fun lib!util.page_ptr_util_u.MEM_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::PageEntry::is_empty")
(declare-fun lib!pagetable.entry.impl&%4.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::NUM_CPUS")
(declare-fun lib!define.NUM_CPUS.? () Int)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::NUM_PAGES")
(declare-fun lib!define.NUM_PAGES.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf_l4")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l4")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf_l3")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l3")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf_l2")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l2")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf_l1")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::MEM_4k_MASK")
(declare-fun lib!define.MEM_4k_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::KERNEL_MEM_END_L4INDEX")
(declare-fun lib!define.KERNEL_MEM_END_L4INDEX.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_4k_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_4k_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_index2va")
(declare-fun lib!util.page_ptr_util_u.spec_index2va.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_4k_l1")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf_mapping_4k")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::MEM_2m_MASK")
(declare-fun lib!define.MEM_2m_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_2m_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_2m_l2")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_2m_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf_mapping_2m")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_1g_l3")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_1g_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf_mapping_1g")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::user_only")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.user_only.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::rwx_upper_level_entries")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::present_or_zero")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::table_pages_wf")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::kernel_entries_wf")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.kernel_entries_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::pcid_ioid_wf")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.pcid_ioid_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::tlb_wf")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.tlb_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::tlb_submap_of_mapping")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.tlb_submap_of_mapping.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::page_closure")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapping_4k")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::is_4k_pa_mapped")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.is_4k_pa_mapped.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapped_4k_pages")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapping_2m")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::is_2m_pa_mapped")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.is_2m_pa_mapped.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapped_2m_pages")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapping_1g")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::is_1g_pa_mapped")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.is_1g_pa_mapped.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapped_1g_pages")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::page_not_mapped")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::is_empty")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_v2l4index")
(declare-fun lib!util.page_ptr_util_u.spec_v2l4index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_v2l3index")
(declare-fun lib!util.page_ptr_util_u.spec_v2l3index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_v2l2index")
(declare-fun lib!util.page_ptr_util_u.spec_v2l2index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_v2l1index")
(declare-fun lib!util.page_ptr_util_u.spec_v2l1index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::MEM_1g_MASK")
(declare-fun lib!define.MEM_1g_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_1g_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va2index")
(declare-fun lib!util.page_ptr_util_u.spec_va2index.? (Poly) tuple%4.)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_page_entry_to_map_entry")
(declare-fun lib!pagetable.entry.spec_page_entry_to_map_entry.? (Poly) lib!pagetable.entry.MapEntry.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::no_self_mapping")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.no_self_mapping.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::l4_entry_exists")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::l3_2m_entry_exists")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::l3_4k_entry_exists")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::l2_4k_entry_exists")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_empty")
(declare-fun ens%vstd!map.impl&%0.tracked_empty. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (out_v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!) (and (has_type out_v! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= out_v! (vstd!map.impl&%0.empty.? K&. K& V&. V&)))) :pattern ((ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_insert")
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_remove")
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_borrow")
(declare-fun req%vstd!map.impl&%0.tracked_borrow. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key!) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_borrow. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key! v!) (and (has_type v! V&) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key! v!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%0::spec_addr")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%0.spec_addr.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%0.spec_addr.) (forall ((V&. Dcr) (V& Type) (p! Poly)) (! (= (vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!) (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. p!))) :pattern ((vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!))))))
(assert (forall ((V&. Dcr) (V& Type) (p! Poly)) (! (=> (has_type p! (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!))) :pattern ((vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%0::from_usize")
(declare-fun ens%vstd!simple_pptr.impl&%0.from_usize. (Dcr Type Int vstd!simple_pptr.PPtr.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (u! Int) (s! vstd!simple_pptr.PPtr.)) (! (= (ens%vstd!simple_pptr.impl&%0.from_usize. V&. V& u! s!) (and (has_type (Poly%vstd!simple_pptr.PPtr. s!) (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (= u! (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. (Poly%vstd!simple_pptr.PPtr. s!)))))) :pattern ((ens%vstd!simple_pptr.impl&%0.from_usize. V&. V& u! s!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::addr")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.addr.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::mem_contents")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)) (TYPE%vstd!raw_ptr.MemContents. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::pptr")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.pptr.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.pptr.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.pptr.? V&. V& self!) (vstd!simple_pptr.PPtr./PPtr (%I (I (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. core!marker.PhantomData./PhantomData)))) :pattern ((vstd!simple_pptr.impl&%1.pptr.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.impl&%1.pptr.? V&. V& self!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.pptr.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::is_init")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.is_init.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.is_init.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.is_init.? V&. V& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.is_init.? V&. V& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%2::arrow_0")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%2.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%7.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%1::value")
(declare-fun req%vstd!simple_pptr.impl&%1.value. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (req%vstd!simple_pptr.impl&%1.value. V&. V& self!) (=> %%global_location_label%%8 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))) :pattern ((req%vstd!simple_pptr.impl&%1.value. V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::value")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.value.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.value.? V&. V& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))))) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (vstd!simple_pptr.impl&%1.value.? V&. V& self!) V&)) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%4::borrow")
(declare-fun req%vstd!simple_pptr.impl&%4.borrow. (Dcr Type vstd!simple_pptr.PPtr. Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! vstd!simple_pptr.PPtr.) (perm! Poly)) (! (= (req%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm!) (and (=> %%global_location_label%%9 (= (vstd!simple_pptr.PPtr./PPtr (%I (I (vstd!simple_pptr.impl&%1.addr.? V&. V& perm!))) (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. core!marker.PhantomData./PhantomData))) self!)) (=> %%global_location_label%%10 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& perm!))))) :pattern ((req%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm!)))))
(declare-fun ens%vstd!simple_pptr.impl&%4.borrow. (Dcr Type vstd!simple_pptr.PPtr. Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! vstd!simple_pptr.PPtr.) (perm! Poly) (v! Poly)) (! (= (ens%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm! v!) (and (has_type v! V&) (= v! (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& perm!))))))) :pattern ((ens%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm! v!)))))
(set-info :comment ";; Function-Axioms lib::array::Array::wf")
(assert (fuel_bool_default fuel%lib!array.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.wf.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.wf.? A&. A& N&. N& self!) (= (vstd!seq.Seq.len.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) (const_int N&))) :pattern ((lib!array.impl&%0.wf.? A&. A& N&. N& self!))))))
(set-info :comment ";; Function-Axioms lib::define::MEM_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_MASK.) (= lib!define.MEM_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2pa")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2pa.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2pa.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2pa.? v!) (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.MEM_MASK.?))))) :pattern ((lib!pagetable.entry.spec_usize2pa.? v!))))))
(assert (forall ((v! Poly)) (! (=> (has_type v! (UINT SZ)) (uInv SZ (lib!pagetable.entry.spec_usize2pa.? v!))) :pattern ((lib!pagetable.entry.spec_usize2pa.? v!)))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PRESENT_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.) (= lib!define.PAGE_ENTRY_PRESENT_MASK.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PRESENT_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2present")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2present.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2present.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2present.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_PRESENT_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2present.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_SHIFT.) (= lib!define.PAGE_ENTRY_PS_SHIFT.? 7)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_MASK.) (= lib!define.PAGE_ENTRY_PS_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_PS_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2ps")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2ps.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2ps.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2ps.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_PS_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2ps.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.) (= lib!define.PAGE_ENTRY_WRITE_SHIFT.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_MASK.) (= lib!define.PAGE_ENTRY_WRITE_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_WRITE_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2write")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2write.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2write.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2write.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_WRITE_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2write.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT.) (= lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? 63)))
(assert (uInv 64 lib!define.PAGE_ENTRY_EXECUTE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_EXECUTE_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK.) (= lib!define.PAGE_ENTRY_EXECUTE_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_EXECUTE_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_EXECUTE_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2execute_disable")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2execute_disable.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2execute_disable.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2execute_disable.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2execute_disable.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_USER_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_USER_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_USER_SHIFT.) (= lib!define.PAGE_ENTRY_USER_SHIFT.? 2)))
(assert (uInv 64 lib!define.PAGE_ENTRY_USER_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_USER_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_USER_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_USER_MASK.) (= lib!define.PAGE_ENTRY_USER_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_USER_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_USER_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2user")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2user.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2user.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2user.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_USER_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2user.? v!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2page_entry_perm")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2page_entry_perm.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2page_entry_perm.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2page_entry_perm.? v!) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm (%B (B (lib!pagetable.entry.usize2present.? v!))) (%B (B (lib!pagetable.entry.usize2ps.? v!))) (%B (B (lib!pagetable.entry.usize2write.? v!))) (%B (B (lib!pagetable.entry.usize2execute_disable.? v!))) (%B (B (lib!pagetable.entry.usize2user.? v!))))) :pattern ((lib!pagetable.entry.spec_usize2page_entry_perm.? v!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2page_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2page_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2page_entry.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2page_entry.? v!) (lib!pagetable.entry.PageEntry./PageEntry (%I (I (lib!pagetable.entry.spec_usize2pa.? v!))) (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.spec_usize2page_entry_perm.? v!))))) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? v!))))))
(assert (forall ((v! Poly)) (! (=> (has_type v! (UINT SZ)) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_usize2page_entry.? v!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? v!)))))
(set-info :comment ";; Function-Axioms lib::array::Array::view")
(assert (fuel_bool_default fuel%lib!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.view.? A&. A& N&. N& self!) (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.impl&%0.view.? A&. A& N&. N& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagemap::PageMap::wf")
(assert (fuel_bool_default fuel%lib!pagetable.pagemap.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagemap.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!pagetable.pagemap.impl&%0.wf.? self!) (and (and (lib!array.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 512) (Poly%lib!array.Array. (lib!pagetable.pagemap.PageMap./PageMap/ar (%Poly%lib!pagetable.pagemap.PageMap. self!)))) (= (vstd!seq.Seq.len.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagemap.PageMap./PageMap/spec_seq (%Poly%lib!pagetable.pagemap.PageMap. self!)))) 512)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) 512)) (ext_eq false TYPE%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_usize2page_entry.? (vstd!seq.Seq.index.? $ (UINT SZ) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!pagetable.pagemap.PageMap./PageMap/ar (%Poly%lib!pagetable.pagemap.PageMap. self!))))) i$))) (vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagemap.PageMap./PageMap/spec_seq (%Poly%lib!pagetable.pagemap.PageMap. self!))) i$)))) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? (vstd!seq.Seq.index.? $ (UINT SZ) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!pagetable.pagemap.PageMap./PageMap/ar (%Poly%lib!pagetable.pagemap.PageMap. self!))))) i$))))))) :pattern ((lib!pagetable.pagemap.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagemap::PageMap::spec_index")
(declare-fun req%lib!pagetable.pagemap.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (index! Poly)) (! (= (req%lib!pagetable.pagemap.impl&%0.spec_index. self! index!) (=> %%global_location_label%%11 (and (<= 0 (%I index!)) (< (%I index!) 512)))) :pattern ((req%lib!pagetable.pagemap.impl&%0.spec_index. self! index!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagemap::PageMap::spec_index")
(assert (fuel_bool_default fuel%lib!pagetable.pagemap.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagemap.impl&%0.spec_index.) (forall ((self! Poly) (index! Poly)) (! (= (lib!pagetable.pagemap.impl&%0.spec_index.? self! index!) (%Poly%lib!pagetable.entry.PageEntry. (vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagemap.PageMap./PageMap/spec_seq (%Poly%lib!pagetable.pagemap.PageMap. self!))) index!))) :pattern ((lib!pagetable.pagemap.impl&%0.spec_index.? self! index!))))))
(assert (forall ((self! Poly) (index! Poly)) (! (=> (and (has_type self! TYPE%lib!pagetable.pagemap.PageMap.) (has_type index! (UINT SZ))) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? self! index!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((lib!pagetable.pagemap.impl&%0.spec_index.? self! index!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::MEM_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.MEM_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.MEM_valid.) (forall ((v! Poly)) (! (= (lib!util.page_ptr_util_u.MEM_valid.? v!) (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_MASK.?))))))) 0)) :pattern ((lib!util.page_ptr_util_u.MEM_valid.? v!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::PageEntry::is_empty")
(assert (fuel_bool_default fuel%lib!pagetable.entry.impl&%4.is_empty.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.impl&%4.is_empty.) (forall ((self! Poly)) (! (= (lib!pagetable.entry.impl&%4.is_empty.? self!) (and (and (and (and (and (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. self!)) 0) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? self!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagemap_util_t::page_map_set")
(declare-fun req%lib!pagetable.pagemap_util_t.page_map_set. (Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. Int lib!pagetable.entry.PageEntry.) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((page_map_ptr! Int) (pre%page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) (index! Int) (value! lib!pagetable.entry.PageEntry.)) (! (= (req%lib!pagetable.pagemap_util_t.page_map_set. page_map_ptr! pre%page_map_perm! index! value!) (and (=> %%global_location_label%%12 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. pre%page_map_perm!)) page_map_ptr!)) (=> %%global_location_label%%13 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. pre%page_map_perm!)))) (=> %%global_location_label%%14 (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. pre%page_map_perm!))))))) (=> %%global_location_label%%15 (=> (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. value!)))))) (lib!util.page_ptr_util_u.MEM_valid.? (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. value!))))))) (=> %%global_location_label%%16 (=> (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. value!)))))) false) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. value!)))) (=> %%global_location_label%%17 (and (<= 0 index!) (< index! 512))))) :pattern ((req%lib!pagetable.pagemap_util_t.page_map_set. page_map_ptr! pre%page_map_perm! index! value!)))))
(declare-fun ens%lib!pagetable.pagemap_util_t.page_map_set. (Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. Int lib!pagetable.entry.PageEntry.) Bool)
(assert (forall ((page_map_ptr! Int) (pre%page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) (index! Int) (value! lib!pagetable.entry.PageEntry.)) (! (= (ens%lib!pagetable.pagemap_util_t.page_map_set. page_map_ptr! pre%page_map_perm! page_map_perm! index! value!) (and (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)) page_map_ptr!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))) (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) 512)) (not (= (%I i$) index!))) (ext_eq false TYPE%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$)) (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. pre%page_map_perm!))))) i$))))) :pattern ((lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$)))) (ext_eq false TYPE%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) (I index!))) (Poly%lib!pagetable.entry.PageEntry. value!)))) :pattern ((ens%lib!pagetable.pagemap_util_t.page_map_set. page_map_ptr! pre%page_map_perm! page_map_perm! index! value!)))))
(set-info :comment ";; Function-Axioms lib::define::NUM_CPUS")
(assert (fuel_bool_default fuel%lib!define.NUM_CPUS.))
(assert (=> (fuel_bool fuel%lib!define.NUM_CPUS.) (= lib!define.NUM_CPUS.? 32)))
(assert (uInv SZ lib!define.NUM_CPUS.?))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::submap_of")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$))))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagemap_util_t::flush_tlb_4kentry")
(declare-fun req%lib!pagetable.pagemap_util_t.flush_tlb_4kentry. (vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((tlbmap_4k! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (va! Int)) (! (= (req%lib!pagetable.pagemap_util_t.flush_tlb_4kentry. tlbmap_4k! va!) (and (=> %%global_location_label%%18 (> lib!define.NUM_CPUS.? 0)) (=> %%global_location_label%%19 (= (vstd!seq.Seq.len.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. tlbmap_4k!)) lib!define.NUM_CPUS.?)))) :pattern ((req%lib!pagetable.pagemap_util_t.flush_tlb_4kentry. tlbmap_4k! va!)))))
(declare-fun ens%lib!pagetable.pagemap_util_t.flush_tlb_4kentry. (vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. Int vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) Bool)
(assert (forall ((tlbmap_4k! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (va! Int) (ret! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)) (! (= (ens%lib!pagetable.pagemap_util_t.flush_tlb_4kentry. tlbmap_4k! va! ret!) (and (= (vstd!seq.Seq.len.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. ret!)) lib!define.NUM_CPUS.?) (forall ((cpu_id$ Poly)) (! (=> (has_type cpu_id$ (UINT SZ)) (=> (and (<= 0 (%I cpu_id$)) (< (%I cpu_id$) lib!define.NUM_CPUS.?)) (not (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. ret!) cpu_id$)) (I va!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. ret!) cpu_id$)))) (forall ((cpu_id$ Poly)) (! (=> (has_type cpu_id$ (UINT SZ)) (=> (and (<= 0 (%I cpu_id$)) (< (%I cpu_id$) lib!define.NUM_CPUS.?)) (vstd!map_lib.impl&%0.submap_of.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. ret!) cpu_id$) (vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. tlbmap_4k!) cpu_id$)))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. ret!) cpu_id$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. tlbmap_4k!) cpu_id$)))))) :pattern ((ens%lib!pagetable.pagemap_util_t.flush_tlb_4kentry. tlbmap_4k! va! ret!)))))
(set-info :comment ";; Function-Axioms lib::define::NUM_PAGES")
(assert (fuel_bool_default fuel%lib!define.NUM_PAGES.))
(assert (=> (fuel_bool fuel%lib!define.NUM_PAGES.) (= lib!define.NUM_PAGES.? (uClip SZ (Mul 128 1024)))))
(assert (uInv SZ lib!define.NUM_PAGES.?))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::wf_l4")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4.? self!) (and (and (and (and (and (and (and (and (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (vstd!set.impl&%0.empty.? $ (UINT SZ)) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))))) (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (and (and (and (and (not (= i$ j$)) (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I j$)) (< (%I j$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) j$)))))))) (not (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) j$)))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) j$))))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) j$)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) (and (and (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))) false) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))) false)) (not (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) (not (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4.? self!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l4")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4. (Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (l4i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4. self! l4i!) (=> %%global_location_label%%20 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i!)) (< (%I l4i!) 512)))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4. self! l4i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l4")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.) (forall ((self! Poly) (l4i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!) (ite (or (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) l4i!))))))) (< (%I l4i!) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) l4i!))) core!option.Option./None)) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!))))))
(assert (forall ((self! Poly) (l4i! Poly)) (! (=> (and (has_type self! TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type l4i! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::wf_l3")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3.? self!) (and (and (and (and (and (and (and (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)) (%I p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))))) :pattern ((lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (and (and (let ((tmp%%$ (%I (vstd!map.impl&%0.index.? $ (UINT SZ) $ (UINT SZ) (Poly%vstd!map.Map<usize./usize.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))) (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) tmp%%$) (< tmp%%$ 512))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (UINT SZ) (Poly%vstd!map.Map<usize./usize.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$)) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! (vstd!map.impl&%0.index.? $ (UINT SZ) $ (UINT SZ) (Poly%vstd!map.Map<usize./usize.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))) (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! (vstd!map.impl&%0.index.? $ (UINT SZ) $ (UINT SZ) (Poly%vstd!map.Map<usize./usize.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))))) (%I p$))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (UINT SZ) (Poly%vstd!map.Map<usize./usize.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$)) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ (UINT SZ) (Poly%vstd!map.Map<usize./usize.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) (forall ((p$ Poly) (l3i$ Poly) (l3j$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l3j$ (UINT SZ))) (=> (and (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (not (= l3i$ l3j$))) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l3j$)) (< (%I l3j$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3j$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3i$))))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3j$))))))))) (not (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3j$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3j$)))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3j$))))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l3j$)))))))) (forall ((pi$ Poly) (pj$ Poly) (l3i$ Poly) (l3j$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type pj$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l3j$ (UINT SZ))) (=> (and (and (and (and (and (and (and (and (not (= pi$ pj$)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) pi$)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) pj$)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l3j$)) (< (%I l3j$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l3i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l3j$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l3i$))))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l3j$))))))))) (not (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l3i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l3j$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) pi$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) pj$) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l3i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l3j$)))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l3i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l3j$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l3i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l3j$))))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (and (and (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))) false) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))) false)) (not (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3.? self!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l3")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3. self! l4i! l3i!) (and (=> %%global_location_label%%21 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i!)) (< (%I l4i!) 512))) (=> %%global_location_label%%22 (and (<= 0 (%I l3i!)) (< (%I l3i!) 512))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3. self! l4i! l3i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l3")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.) (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!) (ite (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)) core!option.Option./None (ite (or (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)))))))))))) l3i!)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)))))))))))) l3i!)))))))) core!option.Option./None (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)))))))))))) l3i!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!))))))
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (=> (and (has_type self! TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type l4i! (UINT SZ)) (has_type l3i! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::wf_l2")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2.? self!) (and (and (and (and (and (and (and (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)) (%I p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))))) :pattern ((lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (let ((tmp%%$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))) (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))) (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))))))) (%I p$))))) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) (forall ((p$ Poly) (l2i$ Poly) (l2j$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l2j$ (UINT SZ))) (=> (and (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (not (= l2i$ l2j$))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l2j$)) (< (%I l2j$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2j$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2i$))))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2j$))))))))) (not (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2j$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2j$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) l2j$))))))))))) (forall ((pi$ Poly) (pj$ Poly) (l2i$ Poly) (l2j$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type pj$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l2j$ (UINT SZ))) (=> (and (and (and (and (and (and (and (and (not (= pi$ pj$)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) pi$)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) pj$)) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l2j$)) (< (%I l2j$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l2i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l2j$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l2i$))))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l2j$))))))))) (not (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l2i$)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l2j$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) pi$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) pj$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l2i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l2j$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pi$))))) l2i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) pj$))))) l2j$))))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (and (and (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))) false) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))) false)) (not (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2.? self!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l2")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2. self! l4i! l3i! l2i!) (and (=> %%global_location_label%%23 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i!)) (< (%I l4i!) 512))) (=> %%global_location_label%%24 (and (<= 0 (%I l3i!)) (< (%I l3i!) 512))) (=> %%global_location_label%%25 (and (<= 0 (%I l2i!)) (< (%I l2i!) 512))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2. self! l4i! l3i! l2i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_l2")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.) (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! l4i! l3i! l2i!) (ite (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)) core!option.Option./None (ite (or (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)))))))))))) l2i!)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)))))))))))) l2i!)))))))) core!option.Option./None (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)))))))))))) l2i!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! l4i! l3i! l2i!))))))
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly)) (! (=> (and (has_type self! TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type l4i! (UINT SZ)) (has_type l3i! (UINT SZ)) (has_type l2i! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! l4i! l3i! l2i!)) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! l4i! l3i! l2i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::wf_l1")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1.? self!) (and (and (and (and (and (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)) (%I p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))))) :pattern ((lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (and (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (let ((tmp%%$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))) (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! (tuple%3./tuple%3/0 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))) (tuple%3./tuple%3/1 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))) (tuple%3./tuple%3/2 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$)))))) (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! (tuple%3./tuple%3/0 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))) (tuple%3./tuple%3/1 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))) (tuple%3./tuple%3/2 (%Poly%tuple%3. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))))))) (%I p$))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$)) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (and (and (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))) false) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))) false)) (not (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1.? self!))))))
(set-info :comment ";; Function-Axioms lib::define::MEM_4k_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_4k_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_4k_MASK.) (= lib!define.MEM_4k_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_4k_MASK.?))
(set-info :comment ";; Function-Axioms lib::define::KERNEL_MEM_END_L4INDEX")
(assert (fuel_bool_default fuel%lib!define.KERNEL_MEM_END_L4INDEX.))
(assert (=> (fuel_bool fuel%lib!define.KERNEL_MEM_END_L4INDEX.) (= lib!define.KERNEL_MEM_END_L4INDEX.? 1)))
(assert (uInv SZ lib!define.KERNEL_MEM_END_L4INDEX.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_4k_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_4k_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_4k_valid.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_4k_valid.? va!) (and (= (uClip SZ (bitand (I (%I va!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_4k_MASK.?))))))) 0) (>= (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I va!))) (I 39)))) (I 511))) (uClip 64 lib!define.KERNEL_MEM_END_L4INDEX.?)))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_index2va")
(declare-fun req%lib!util.page_ptr_util_u.spec_index2va. (Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((i! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_index2va. i!) (and (=> %%global_location_label%%26 (<= (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. i!))) 511)) (=> %%global_location_label%%27 (<= (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. i!))) 511)) (=> %%global_location_label%%28 (<= (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. i!))) 511)) (=> %%global_location_label%%29 (<= (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. i!))) 511)))) :pattern ((req%lib!util.page_ptr_util_u.spec_index2va. i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_index2va")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_index2va.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_index2va.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.spec_index2va.? i!) (uClip SZ (bitand (I (uClip SZ (bitand (I (uClip SZ (bitand (I (uClip SZ (bitshl (I (uClip SZ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. i!))))) (I 39)))) (I (uClip SZ (bitshl (I (uClip SZ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. i!))))) (I 30))))))) (I (uClip SZ (bitshl (I (uClip SZ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. i!))))) (I 21))))))) (I (uClip SZ (bitshl (I (uClip SZ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. i!))))) (I 12))))))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? i!))))))
(assert (forall ((i! Poly)) (! (=> (has_type i! (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ))) (uInv SZ (lib!util.page_ptr_util_u.spec_index2va.? i!))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? i!)))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_4k_l1")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1. (Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly) (l1i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1. self! l4i! l3i! l2i! l1i!) (and (=> %%global_location_label%%30 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i!)) (< (%I l4i!) 512))) (=> %%global_location_label%%31 (and (<= 0 (%I l3i!)) (< (%I l3i!) 512))) (=> %%global_location_label%%32 (and (<= 0 (%I l2i!)) (< (%I l2i!) 512))) (=> %%global_location_label%%33 (and (<= 0 (%I l1i!)) (< (%I l1i!) 512))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1. self! l4i! l3i! l2i! l1i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_4k_l1")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.) (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly) (l1i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i! l3i! l2i! l1i!) (ite (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! l4i! l3i! l2i!)) core!option.Option./None (ite (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! l4i! l3i! l2i!)))))))))))) l1i!)))))))) core!option.Option./None (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! l4i! l3i! l2i!)))))))))))) l1i!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i! l3i! l2i! l1i!))))))
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly) (l1i! Poly)) (! (=> (and (has_type self! TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type l4i! (UINT SZ)) (has_type l3i! (UINT SZ)) (has_type l2i! (UINT SZ)) (has_type l1i! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i! l3i! l2i! l1i!)) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i! l3i! l2i! l1i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 4096)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::wf_mapping_4k")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k.? self!) (and (and (and (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.spec_va_4k_valid.? va$))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$)))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (=> (and (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i$ l3i$ l2i$ l1i$))))) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i$ l3i$ l2i$ l1i$))))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (=> (and (and (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i$ l3i$ l2i$ l1i$))) (and (and (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i$ l3i$ l2i$ l1i$))))))) (= (lib!pagetable.entry.MapEntry./MapEntry/write (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i$ l3i$ l2i$ l1i$))))))))))) (= (lib!pagetable.entry.MapEntry./MapEntry/execute_disable (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? self! l4i$ l3i$ l2i$ l1i$))))))))))))) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))))))))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.page_ptr_valid.? (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.page_ptr_valid.? (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$)))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k.? self!))))))
(set-info :comment ";; Function-Axioms lib::define::MEM_2m_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_2m_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_2m_MASK.) (= lib!define.MEM_2m_MASK.? 281474974613504)))
(assert (uInv 64 lib!define.MEM_2m_MASK.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_2m_valid.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_2m_valid.? va!) (and (= (uClip SZ (bitand (I (%I va!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_2m_MASK.?))))))) 0) (>= (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I va!))) (I 39)))) (I 511))) (uClip 64 lib!define.KERNEL_MEM_END_L4INDEX.?)))) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_2m_l2")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2. self! l4i! l3i! l2i!) (and (=> %%global_location_label%%34 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i!)) (< (%I l4i!) 512))) (=> %%global_location_label%%35 (and (<= 0 (%I l3i!)) (< (%I l3i!) 512))) (=> %%global_location_label%%36 (and (<= 0 (%I l2i!)) (< (%I l2i!) 512))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2. self! l4i! l3i! l2i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_2m_l2")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.) (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i! l3i! l2i!) (ite (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)) core!option.Option./None (ite (or (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)))))))))))) l2i!)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)))))))))))) l2i!))))))))) core!option.Option./None (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!)))))))))))) l2i!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i! l3i! l2i!))))))
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly)) (! (=> (and (has_type self! TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type l4i! (UINT SZ)) (has_type l3i! (UINT SZ)) (has_type l2i! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i! l3i! l2i!)) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i! l3i! l2i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_2m_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 2097152)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::wf_mapping_2m")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m.? self!) (and (and (and (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.spec_va_2m_valid.? va$))) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$)))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ))) (=> (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ (I 0)))))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i$ l3i$ l2i$))))) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ (I 0))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i$ l3i$ l2i$))))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ))) (=> (and (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i$ l3i$ l2i$))) (and (and (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ (I 0)))))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i$ l3i$ l2i$))))))) (= (lib!pagetable.entry.MapEntry./MapEntry/write (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ (I 0)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i$ l3i$ l2i$))))))))))) (= (lib!pagetable.entry.MapEntry./MapEntry/execute_disable (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ (I 0)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? self! l4i$ l3i$ l2i$))))))))))))) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ (I 0)))))))))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.page_ptr_2m_valid.? (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.page_ptr_2m_valid.? (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$)))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m.? self!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_1g_l3")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3. self! l4i! l3i!) (and (=> %%global_location_label%%37 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i!)) (< (%I l4i!) 512))) (=> %%global_location_label%%38 (and (<= 0 (%I l3i!)) (< (%I l3i!) 512))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3. self! l4i! l3i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::spec_resolve_mapping_1g_l3")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.) (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i! l3i!) (ite (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)) core!option.Option./None (ite (or (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)))))))))))) l3i!)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)))))))))))) l3i!))))))))) core!option.Option./None (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!)))))))))))) l3i!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i! l3i!))))))
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (=> (and (has_type self! TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type l4i! (UINT SZ)) (has_type l3i! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i! l3i!)) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i! l3i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_1g_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 1073741824)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::wf_mapping_1g")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g.? self!) (and (and (and (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.spec_va_2m_valid.? va$))) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$)))) (forall ((l4i$ Poly) (l3i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ))) (=> (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ (I 0) (I 0)))))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i$ l3i$))))) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ (I 0) (I 0))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i$ l3i$))))) (forall ((l4i$ Poly) (l3i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ))) (=> (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i$ l3i$))) (and (and (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ (I 0) (I 0)))))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i$ l3i$))))))) (= (lib!pagetable.entry.MapEntry./MapEntry/write (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ (I 0) (I 0)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i$ l3i$))))))))))) (= (lib!pagetable.entry.MapEntry./MapEntry/execute_disable (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ (I 0) (I 0)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i$ l3i$))))))))))))) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ (I 0) (I 0))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? self! l4i$ l3i$))))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.page_ptr_1g_valid.? (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (lib!util.page_ptr_util_u.page_ptr_1g_valid.? (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$)))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::user_only")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.user_only.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.user_only.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.user_only.? self!) (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.user_only.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::rwx_upper_level_entries")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries.? self!) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) (and (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) (and (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) (and (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::present_or_zero")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero.? self!) (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))))))) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))))))) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) p$))))) i$)))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::table_pages_wf")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf.? self!) (and (and (and (lib!util.page_ptr_util_u.page_ptr_valid.? (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::kernel_entries_wf")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.kernel_entries_wf.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.kernel_entries_wf.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.kernel_entries_wf.? self!) (and (and (< (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) 512) (ext_eq false NAT (I (vstd!seq.Seq.len.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (= (%Poly%lib!pagetable.entry.PageEntry. (vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) i$)) (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) i$)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.kernel_entries_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::pcid_ioid_wf")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.pcid_ioid_wf.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.pcid_ioid_wf.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.pcid_ioid_wf.? self!) (not (= (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.pcid_ioid_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::tlb_wf")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.tlb_wf.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.tlb_wf.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.tlb_wf.? self!) (and (and (= (vstd!seq.Seq.len.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) lib!define.NUM_CPUS.?) (= (vstd!seq.Seq.len.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) lib!define.NUM_CPUS.?)) (= (vstd!seq.Seq.len.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) lib!define.NUM_CPUS.?))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.tlb_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::tlb_submap_of_mapping")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.tlb_submap_of_mapping.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.tlb_submap_of_mapping.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.tlb_submap_of_mapping.? self!) (forall ((cpu_id$ Poly)) (! (=> (has_type cpu_id$ (UINT SZ)) (=> (and (<= 0 (%I cpu_id$)) (< (%I cpu_id$) lib!define.NUM_CPUS.?)) (and (and (vstd!map_lib.impl&%0.submap_of.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) cpu_id$) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!map_lib.impl&%0.submap_of.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) cpu_id$) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) (vstd!map_lib.impl&%0.submap_of.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) cpu_id$) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) cpu_id$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) cpu_id$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) cpu_id$))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.tlb_submap_of_mapping.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::wf")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4.? self!) (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.user_only.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.kernel_entries_wf.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.pcid_ioid_wf.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.tlb_wf.? self!)) (lib!pagetable.pagetable_spec_impl.impl&%0.tlb_submap_of_mapping.? self!))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::page_closure")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.union.? $ (UINT SZ) (vstd!set.impl&%0.union.? $ (UINT SZ) (vstd!set.impl&%0.union.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::mapping_4k")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? self!) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::is_4k_pa_mapped")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_4k_pa_mapped.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_4k_pa_mapped.) (forall ((self! Poly) (pa! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.is_4k_pa_mapped.? self! pa!) (exists ((va$ Poly)) (! (and (has_type va$ (UINT SZ)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? self!))) va$) (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? self!)) va$))) (%I pa!)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? self!))) va$))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.is_4k_pa_mapped.? self! pa!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::mapped_4k_pages")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.))
(declare-fun %%lambda%%1 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (pa$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0) pa$) (B (lib!pagetable.pagetable_spec_impl.impl&%0.is_4k_pa_mapped.? %%hole%%0 pa$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0) pa$)))))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.new.? $ (UINT SZ) $ (TYPE%fun%1. $ (UINT SZ) $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 self!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::mapping_2m")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? self!) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::is_2m_pa_mapped")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_2m_pa_mapped.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_2m_pa_mapped.) (forall ((self! Poly) (pa! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.is_2m_pa_mapped.? self! pa!) (exists ((va$ Poly)) (! (and (has_type va$ (UINT SZ)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? self!))) va$) (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? self!)) va$))) (%I pa!)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? self!))) va$))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.is_2m_pa_mapped.? self! pa!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::mapped_2m_pages")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.))
(declare-fun %%lambda%%2 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (pa$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0) pa$) (B (lib!pagetable.pagetable_spec_impl.impl&%0.is_2m_pa_mapped.? %%hole%%0 pa$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0) pa$)))))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.new.? $ (UINT SZ) $ (TYPE%fun%1. $ (UINT SZ) $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 self!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::mapping_1g")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? self!) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::is_1g_pa_mapped")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_1g_pa_mapped.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_1g_pa_mapped.) (forall ((self! Poly) (pa! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.is_1g_pa_mapped.? self! pa!) (exists ((va$ Poly)) (! (and (has_type va$ (UINT SZ)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? self!))) va$) (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? self!)) va$))) (%I pa!)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? self!))) va$))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.is_1g_pa_mapped.? self! pa!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::mapped_1g_pages")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.))
(declare-fun %%lambda%%3 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (pa$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0) pa$) (B (lib!pagetable.pagetable_spec_impl.impl&%0.is_1g_pa_mapped.? %%hole%%0 pa$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0) pa$)))))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.new.? $ (UINT SZ) $ (TYPE%fun%1. $ (UINT SZ) $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%3 self!)))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::page_not_mapped")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.) (forall ((self! Poly) (pa! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.? self! pa!) (and (and (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? self!)) pa!) false) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? self!)) pa!) false)) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? self!)) pa!) false))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.? self! pa!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::is_empty")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.? self!) (and (and (and (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? self!) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? self!) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? self!) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.? self!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_v2l4index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_v2l4index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_v2l4index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_v2l4index.? va!) (uClip SZ (uClip SZ (bitand (I (uClip SZ (bitshr (I (%I va!)) (I 39)))) (I 511))))) :pattern ((lib!util.page_ptr_util_u.spec_v2l4index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_v2l4index.? va!))) :pattern ((lib!util.page_ptr_util_u.spec_v2l4index.? va!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_v2l3index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_v2l3index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_v2l3index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_v2l3index.? va!) (uClip SZ (uClip SZ (bitand (I (uClip SZ (bitshr (I (%I va!)) (I 30)))) (I 511))))) :pattern ((lib!util.page_ptr_util_u.spec_v2l3index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_v2l3index.? va!))) :pattern ((lib!util.page_ptr_util_u.spec_v2l3index.? va!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_v2l2index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_v2l2index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_v2l2index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_v2l2index.? va!) (uClip SZ (uClip SZ (bitand (I (uClip SZ (bitshr (I (%I va!)) (I 21)))) (I 511))))) :pattern ((lib!util.page_ptr_util_u.spec_v2l2index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_v2l2index.? va!))) :pattern ((lib!util.page_ptr_util_u.spec_v2l2index.? va!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_v2l1index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_v2l1index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_v2l1index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_v2l1index.? va!) (uClip SZ (uClip SZ (bitand (I (uClip SZ (bitshr (I (%I va!)) (I 12)))) (I 511))))) :pattern ((lib!util.page_ptr_util_u.spec_v2l1index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_v2l1index.? va!))) :pattern ((lib!util.page_ptr_util_u.spec_v2l1index.? va!)))))
(set-info :comment ";; Function-Axioms lib::define::MEM_1g_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_1g_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_1g_MASK.) (= lib!define.MEM_1g_MASK.? 281457796841472)))
(assert (uInv 64 lib!define.MEM_1g_MASK.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_1g_valid.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_1g_valid.? va!) (and (= (uClip SZ (bitand (I (%I va!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_1g_MASK.?))))))) 0) (>= (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I va!))) (I 39)))) (I 511))) (uClip 64 lib!define.KERNEL_MEM_END_L4INDEX.?)))) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va2index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va2index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va2index.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va2index.? va!) (tuple%4./tuple%4 (I (lib!util.page_ptr_util_u.spec_v2l4index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l3index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l2index.? va!)) (I (lib!util.page_ptr_util_u.spec_v2l1index.? va!)))) :pattern ((lib!util.page_ptr_util_u.spec_va2index.? va!))))))
(assert (forall ((va! Poly)) (! (=> (has_type va! (UINT SZ)) (has_type (Poly%tuple%4. (lib!util.page_ptr_util_u.spec_va2index.? va!)) (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((lib!util.page_ptr_util_u.spec_va2index.? va!)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::va_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.va_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.va_lemma. no%param) (and (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (and (and (and (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l4index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l3index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l2index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l1index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l4index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l3index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l2index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l1index.? va$)))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (and (and (and (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l4index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l3index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l2index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (= 0 (lib!util.page_ptr_util_u.spec_v2l1index.? va$))))) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l4index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l3index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l2index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_2m_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l1index.? va$)))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (and (and (and (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l4index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512))) (let ((tmp%%$ (lib!util.page_ptr_util_u.spec_v2l3index.? va$))) (and (<= 0 tmp%%$) (< tmp%%$ 512)))) (= 0 (lib!util.page_ptr_util_u.spec_v2l2index.? va$))) (= 0 (lib!util.page_ptr_util_u.spec_v2l1index.? va$))))) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l4index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l3index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l2index.? va$)) :pattern ((lib!util.page_ptr_util_u.spec_va_1g_valid.? va$) (lib!util.page_ptr_util_u.spec_v2l1index.? va$)))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly) (l4j$ Poly) (l3j$ Poly) (l2j$ Poly) (l1j$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ)) (has_type l4j$ (UINT SZ)) (has_type l3j$ (UINT SZ)) (has_type l2j$ (UINT SZ)) (has_type l1j$ (UINT SZ))) (= (and (and (and (and (and (and (and (and (ext_eq false (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$)) (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$))) (and (<= 0 (%I l4i$)) (< (%I l4i$) 512))) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (and (<= 0 (%I l4j$)) (< (%I l4j$) 512))) (and (<= 0 (%I l3j$)) (< (%I l3j$) 512))) (and (<= 0 (%I l2j$)) (< (%I l2j$) 512))) (and (<= 0 (%I l1j$)) (< (%I l1j$) 512))) (= (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$)))))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$)))))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly) (l4j$ Poly) (l3j$ Poly) (l2j$ Poly) (l1j$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ)) (has_type l4j$ (UINT SZ)) (has_type l3j$ (UINT SZ)) (has_type l2j$ (UINT SZ)) (has_type l1j$ (UINT SZ))) (= (and (and (and (and (and (and (and (and (= (ext_eq false (TYPE%tuple%4. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$)) (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$))) false) (and (<= 0 (%I l4i$)) (< (%I l4i$) 512))) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (and (<= 0 (%I l4j$)) (< (%I l4j$) 512))) (and (<= 0 (%I l3j$)) (< (%I l3j$) 512))) (and (<= 0 (%I l2j$)) (< (%I l2j$) 512))) (and (<= 0 (%I l1j$)) (< (%I l1j$) 512))) (not (= (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$))))))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4j$ l3j$ l2j$ l1j$)))))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (=> (and (and (and (and (<= 0 (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))))))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$)))))))) (forall ((va$ Poly) (l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type va$ (UINT SZ)) (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (= (and (lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (= (lib!util.page_ptr_util_u.spec_va2index.? va$) (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (and (and (and (and (and (<= lib!define.KERNEL_MEM_END_L4INDEX.? (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (= (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (%I va$))))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 l4i$ l3i$ l2i$ l1i$))) (lib!util.page_ptr_util_u.spec_va2index.? va$)))))) :pattern ((ens%lib!util.page_ptr_util_u.va_lemma. no%param)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%46::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%46.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%46.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_page_entry_to_map_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_page_entry_to_map_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_page_entry_to_map_entry.) (forall ((p! Poly)) (! (= (lib!pagetable.entry.spec_page_entry_to_map_entry.? p!) (lib!pagetable.entry.MapEntry./MapEntry (%I (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. p!)))) (%B (B (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. p!))))))) (%B (B (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. p!))))))))) :pattern ((lib!pagetable.entry.spec_page_entry_to_map_entry.? p!))))))
(assert (forall ((p! Poly)) (! (=> (has_type p! TYPE%lib!pagetable.entry.PageEntry.) (has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.spec_page_entry_to_map_entry.? p!)) TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((lib!pagetable.entry.spec_page_entry_to_map_entry.? p!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::no_self_mapping")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.no_self_mapping.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.no_self_mapping.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.no_self_mapping.? self!) (and (and (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? self!)) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))))) false))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? self!)) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$)))))))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? self!)) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))))) false))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? self!)) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))))))))) (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? self!)) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))))) false))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? self!)) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$)))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.no_self_mapping.? self!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::l4_entry_exists")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists. (Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((self! Poly) (l4i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists. self! l4i!) (=> %%global_location_label%%39 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? self!))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists. self! l4i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::l4_entry_exists")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists.) (forall ((self! Poly) (l4i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists.? self! l4i!) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? self! l4i!))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists.? self! l4i!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::l3_2m_entry_exists")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists. self! l4i! l3i!) (and (=> %%global_location_label%%40 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? self!)) (=> %%global_location_label%%41 (lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists.? self! l4i!)))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists. self! l4i! l3i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::l3_2m_entry_exists")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists.) (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists.? self! l4i! l3i!) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.l3_2m_entry_exists.? self! l4i! l3i!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::l3_4k_entry_exists")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists. self! l4i! l3i!) (and (=> %%global_location_label%%42 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? self!)) (=> %%global_location_label%%43 (lib!pagetable.pagetable_spec_impl.impl&%0.l4_entry_exists.? self! l4i!)))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists. self! l4i! l3i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::l3_4k_entry_exists")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists.) (forall ((self! Poly) (l4i! Poly) (l3i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists.? self! l4i! l3i!) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? self! l4i! l3i!))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists.? self! l4i! l3i!))))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::l2_4k_entry_exists")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists. self! l4i! l3i! l2i!) (and (=> %%global_location_label%%44 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? self!)) (=> %%global_location_label%%45 (lib!pagetable.pagetable_spec_impl.impl&%0.l3_4k_entry_exists.? self! l4i! l3i!)))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists. self! l4i! l3i! l2i!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::l2_4k_entry_exists")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists.) (forall ((self! Poly) (l4i! Poly) (l3i! Poly) (l2i! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists.? self! l4i! l3i! l2i!) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? self! l4i! l3i! l2i!))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.l2_4k_entry_exists.? self! l4i! l3i! l2i!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Function-Specs lib::pagetable::pagemap::PageMap::get")
(declare-fun req%lib!pagetable.pagemap.impl&%0.get. (lib!pagetable.pagemap.PageMap. Int) Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((self! lib!pagetable.pagemap.PageMap.) (index! Int)) (! (= (req%lib!pagetable.pagemap.impl&%0.get. self! index!) (and (=> %%global_location_label%%46 (lib!pagetable.pagemap.impl&%0.wf.? (Poly%lib!pagetable.pagemap.PageMap. self!))) (=> %%global_location_label%%47 (and (<= 0 index!) (< index! 512))))) :pattern ((req%lib!pagetable.pagemap.impl&%0.get. self! index!)))))
(declare-fun ens%lib!pagetable.pagemap.impl&%0.get. (lib!pagetable.pagemap.PageMap. Int lib!pagetable.entry.PageEntry.) Bool)
(assert (forall ((self! lib!pagetable.pagemap.PageMap.) (index! Int) (ret! lib!pagetable.entry.PageEntry.)) (! (= (ens%lib!pagetable.pagemap.impl&%0.get. self! index! ret!) (and (has_type (Poly%lib!pagetable.entry.PageEntry. ret!) TYPE%lib!pagetable.entry.PageEntry.) (ext_eq false TYPE%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. ret!) (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (Poly%lib!pagetable.pagemap.PageMap. self!) (I index!)))))) :pattern ((ens%lib!pagetable.pagemap.impl&%0.get. self! index! ret!)))))
(set-info :comment ";; Function-Specs lib::pagetable::entry::PageEntry::empty")
(declare-fun ens%lib!pagetable.entry.impl&%4.empty. (Int lib!pagetable.entry.PageEntry.) Bool)
(assert (forall ((no%param Int) (ret! lib!pagetable.entry.PageEntry.)) (! (= (ens%lib!pagetable.entry.impl&%4.empty. no%param ret!) (and (has_type (Poly%lib!pagetable.entry.PageEntry. ret!) TYPE%lib!pagetable.entry.PageEntry.) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. ret!)))) :pattern ((ens%lib!pagetable.entry.impl&%4.empty. no%param ret!)))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::new")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%0.new. (Int vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((pcid! Int) (kernel_entries_ghost! vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) (page_map_ptr! Int) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%0.new. pcid! kernel_entries_ghost! page_map_ptr! page_map_perm!) (and (=> %%global_location_label%%48 (lib!util.page_ptr_util_u.page_ptr_valid.? (I page_map_ptr!))) (=> %%global_location_label%%49 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)) page_map_ptr!)) (=> %%global_location_label%%50 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)))) (=> %%global_location_label%%51 (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))))) (=> %%global_location_label%%52 (= (vstd!seq.Seq.len.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. kernel_entries_ghost!)) lib!define.KERNEL_MEM_END_L4INDEX.?)) (=> %%global_location_label%%53 (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= lib!define.KERNEL_MEM_END_L4INDEX.? (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))) (=> %%global_location_label%%54 (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.KERNEL_MEM_END_L4INDEX.?)) (= (%Poly%lib!pagetable.entry.PageEntry. (vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. kernel_entries_ghost!) i$)) (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. kernel_entries_ghost!) i$)) :pattern ((lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%0.new. pcid! kernel_entries_ghost! page_map_ptr! page_map_perm!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%0.new. (Int vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. lib!pagetable.pagetable_spec_impl.PageTable.) Bool)
(assert (forall ((pcid! Int) (kernel_entries_ghost! vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) (page_map_ptr! Int) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) (ret! lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%0.new. pcid! kernel_entries_ghost! page_map_ptr! page_map_perm! ret!) (and (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!))) (core!option.Option./Some (I pcid!))) (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!)))) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!))) lib!define.KERNEL_MEM_END_L4INDEX.?) (= (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!)) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.insert.? $ (UINT SZ) (vstd!set.impl&%0.empty.? $ (UINT SZ)) (I page_map_ptr!)))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!)) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!)) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!)) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))) (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!)))) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. kernel_entries_ghost!)) (lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. ret!)))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%0.new. pcid! kernel_entries_ghost! page_map_ptr! page_map_perm! ret!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::new")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:60:5: 60:162 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::no_mapping_infer_not_mapped")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_not_mapped. (lib!pagetable.pagetable_spec_impl.PageTable. Int) Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (page_map_ptr! Int)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_not_mapped. self! page_map_ptr!) (and (=> %%global_location_label%%55 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (=> %%global_location_label%%56 (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (not (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))) page_map_ptr!)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$)) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))))) (=> %%global_location_label%%57 (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (not (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))) page_map_ptr!)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$))))) (=> %%global_location_label%%58 (forall ((va$ Poly)) (! (=> (has_type va$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$) (not (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) va$))) page_map_ptr!)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) va$))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_not_mapped. self! page_map_ptr!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_not_mapped. (lib!pagetable.pagetable_spec_impl.PageTable. Int) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (page_map_ptr! Int)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_not_mapped. self! page_map_ptr!) (lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I page_map_ptr!))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_not_mapped. self! page_map_ptr!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::no_mapping_infer_not_mapped")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:810:5: 810:77 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::no_mapping_infer_no_reslove")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_no_reslove. (lib!pagetable.pagetable_spec_impl.PageTable.) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_no_reslove. self!) (=> %%global_location_label%%59 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_no_reslove. self!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_no_reslove. (lib!pagetable.pagetable_spec_impl.PageTable.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_no_reslove. self!) (and (=> (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ))) (=> (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (= (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$ l2i$)) false))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$ l2i$))))) (=> (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (forall ((l4i$ Poly) (l3i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ))) (=> (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (= (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$)) false))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$))))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%1.no_mapping_infer_no_reslove. self!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::no_mapping_infer_no_reslove")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:833:5: 833:52 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::ps_entries_exist_in_mapped_pages")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. (lib!pagetable.pagetable_spec_impl.PageTable.) Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. self!) (=> %%global_location_label%%60 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. self!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. (lib!pagetable.pagetable_spec_impl.PageTable.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. self!) (and (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$)))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$)))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$)))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$))))))))) (forall ((p$ Poly) (i$ Poly)) (! (=> (and (has_type p$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))))) p$) (and (<= 0 (%I i$)) (< (%I i$) 512))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$)))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) p$))))) i$))))))))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. self!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::ps_entries_exist_in_mapped_pages")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:852:5: 852:57 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::internal_resolve_disjoint")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%1.internal_resolve_disjoint. (lib!pagetable.pagetable_spec_impl.PageTable.) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%1.internal_resolve_disjoint. self!) (=> %%global_location_label%%61 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%1.internal_resolve_disjoint. self!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%1.internal_resolve_disjoint. (lib!pagetable.pagetable_spec_impl.PageTable.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%1.internal_resolve_disjoint. self!) (and (forall ((l4i$ Poly) (l4j$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l4j$ (UINT SZ))) (=> (and (and (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (%I l4i$)) (< (%I l4i$) 512)) (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (%I l4j$)) (< (%I l4j$) 512))) (not (= l4i$ l4j$))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$))) (not (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$)))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$)))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$) (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$)))) (forall ((l4i$ Poly) (l3i$ Poly) (l4j$ Poly) (l3j$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l4j$ (UINT SZ)) (has_type l3j$ (UINT SZ))) (=> (and (and (and (and (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (%I l4j$)) (< (%I l4j$) 512))) (and (<= 0 (%I l3j$)) (< (%I l3j$) 512))) (not (= (tuple%2./tuple%2 l4i$ l3i$) (tuple%2./tuple%2 l4j$ l3j$)))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$ l3j$))) (not (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$)))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$ l3j$)))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$) (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$ l3j$)))) (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l4j$ Poly) (l3j$ Poly) (l2j$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l4j$ (UINT SZ)) (has_type l3j$ (UINT SZ)) (has_type l2j$ (UINT SZ))) (=> (and (and (and (and (and (and (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (%I l4j$)) (< (%I l4j$) 512))) (and (<= 0 (%I l3j$)) (< (%I l3j$) 512))) (and (<= 0 (%I l2j$)) (< (%I l2j$) 512))) (not (= (tuple%3./tuple%3 l4i$ l3i$ l2i$) (tuple%3./tuple%3 l4j$ l3j$ l2j$)))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$ l2i$))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$ l3j$ l2j$))) (not (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$ l2i$)))))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$ l3j$ l2j$)))))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4i$ l3i$ l2i$) (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) l4j$ l3j$ l2j$)))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%1.internal_resolve_disjoint. self!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::internal_resolve_disjoint")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:956:5: 956:50 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::get_entry_l4")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l4. (lib!pagetable.pagetable_spec_impl.PageTable. Int) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l4. self! target_l4i!) (and (=> %%global_location_label%%62 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (=> %%global_location_label%%63 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) target_l4i!) (< target_l4i! 512))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l4. self! target_l4i!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l4. (lib!pagetable.pagetable_spec_impl.PageTable. Int core!option.Option.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (ret! core!option.Option.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l4. self! target_l4i! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.)) (= (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!)) ret!) (forall ((l3i$ Poly) (l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (=> (and (and (and (and (<= 0 (%I l3i$)) (< (%I l3i$) 512)) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (is-core!option.Option./None_ ret!)) (and (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) l3i$ l2i$ l1i$)) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) l3i$ l2i$ l1i$))))) false)))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) l3i$ l2i$ l1i$)))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) l3i$ l2i$ l1i$)))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l4. self! target_l4i! ret!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::get_entry_l4")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1032:5: 1032:79 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::get_entry_l3")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l3. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int lib!pagetable.entry.PageEntry.) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (l4_entry! lib!pagetable.entry.PageEntry.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l3. self! target_l4i! target_l3i! l4_entry!) (and (=> %%global_location_label%%64 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (=> %%global_location_label%%65 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) target_l4i!) (< target_l4i! 512))) (=> %%global_location_label%%66 (and (<= 0 target_l3i!) (< target_l3i! 512))) (=> %%global_location_label%%67 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!))) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. l4_entry!))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l3. self! target_l4i! target_l3i! l4_entry!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l3. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int lib!pagetable.entry.PageEntry. core!option.Option.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (l4_entry! lib!pagetable.entry.PageEntry.) (ret! core!option.Option.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l3. self! target_l4i! target_l3i! l4_entry! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.)) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!))) (Poly%core!option.Option. ret!)) (forall ((l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (=> (and (and (and (<= 0 (%I l2i$)) (< (%I l2i$) 512)) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (is-core!option.Option./None_ ret!)) (and (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) l2i$ l1i$)) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) (I target_l3i!) l2i$ l1i$))))) false)))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) (I target_l3i!) l2i$ l1i$)))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) l2i$ l1i$)))) (=> (is-core!option.Option./Some_ ret!) (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!)))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l3. self! target_l4i! target_l3i! l4_entry! ret!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::get_entry_l3")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1057:5: 1057:122 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::get_entry_1g_l3")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_1g_l3. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int lib!pagetable.entry.PageEntry.) Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (l4_entry! lib!pagetable.entry.PageEntry.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_1g_l3. self! target_l4i! target_l3i! l4_entry!) (and (=> %%global_location_label%%68 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (=> %%global_location_label%%69 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) target_l4i!) (< target_l4i! 512))) (=> %%global_location_label%%70 (and (<= 0 target_l3i!) (< target_l3i! 512))) (=> %%global_location_label%%71 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!))) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. l4_entry!))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_1g_l3. self! target_l4i! target_l3i! l4_entry!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_1g_l3. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int lib!pagetable.entry.PageEntry. core!option.Option.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (l4_entry! lib!pagetable.entry.PageEntry.) (ret! core!option.Option.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_1g_l3. self! target_l4i! target_l3i! l4_entry! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.)) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!))) (Poly%core!option.Option. ret!)))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_1g_l3. self! target_l4i! target_l3i! l4_entry! ret!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::get_entry_1g_l3")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1085:5: 1085:125 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::get_entry_l2")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l2. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int lib!pagetable.entry.PageEntry.) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l2i! Int) (l3_entry! lib!pagetable.entry.PageEntry.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l2. self! target_l4i! target_l3i! target_l2i! l3_entry!) (and (=> %%global_location_label%%72 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (=> %%global_location_label%%73 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) target_l4i!) (< target_l4i! 512))) (=> %%global_location_label%%74 (and (<= 0 target_l3i!) (< target_l3i! 512))) (=> %%global_location_label%%75 (and (<= 0 target_l2i!) (< target_l2i! 512))) (=> %%global_location_label%%76 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!))) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. l3_entry!))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l2. self! target_l4i! target_l3i! target_l2i! l3_entry!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l2. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int lib!pagetable.entry.PageEntry. core!option.Option.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l2i! Int) (l3_entry! lib!pagetable.entry.PageEntry.) (ret! core!option.Option.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l2. self! target_l4i! target_l3i! target_l2i! l3_entry! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.)) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!))) (Poly%core!option.Option. ret!)) (forall ((l1i$ Poly)) (! (=> (has_type l1i$ (UINT SZ)) (=> (and (and (<= 0 (%I l1i$)) (< (%I l1i$) 512)) (is-core!option.Option./None_ ret!)) (and (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!) l1i$)) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) (I target_l3i!) (I target_l2i!) l1i$))))) false)))) :pattern ((lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) (I target_l3i!) (I target_l2i!) l1i$)))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!) l1i$)))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l2. self! target_l4i! target_l3i! target_l2i! l3_entry! ret!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::get_entry_l2")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1104:5: 1104:143 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::get_entry_2m_l2")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_2m_l2. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int lib!pagetable.entry.PageEntry.) Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l2i! Int) (l3_entry! lib!pagetable.entry.PageEntry.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_2m_l2. self! target_l4i! target_l3i! target_l2i! l3_entry!) (and (=> %%global_location_label%%77 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (=> %%global_location_label%%78 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) target_l4i!) (< target_l4i! 512))) (=> %%global_location_label%%79 (and (<= 0 target_l3i!) (< target_l3i! 512))) (=> %%global_location_label%%80 (and (<= 0 target_l2i!) (< target_l2i! 512))) (=> %%global_location_label%%81 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!))) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. l3_entry!))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_2m_l2. self! target_l4i! target_l3i! target_l2i! l3_entry!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_2m_l2. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int lib!pagetable.entry.PageEntry. core!option.Option.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l2i! Int) (l3_entry! lib!pagetable.entry.PageEntry.) (ret! core!option.Option.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_2m_l2. self! target_l4i! target_l3i! target_l2i! l3_entry! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.)) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!))) (Poly%core!option.Option. ret!)))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_2m_l2. self! target_l4i! target_l3i! target_l2i! l3_entry! ret!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::get_entry_2m_l2")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1133:5: 1133:146 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::get_entry_l1")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l1. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int Int lib!pagetable.entry.PageEntry.) Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l2i! Int) (target_l1i! Int) (l2_entry! lib!pagetable.entry.PageEntry.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l1. self! target_l4i! target_l3i! target_l2i! target_l1i! l2_entry!) (and (=> %%global_location_label%%82 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (=> %%global_location_label%%83 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) target_l4i!) (< target_l4i! 512))) (=> %%global_location_label%%84 (and (<= 0 target_l3i!) (< target_l3i! 512))) (=> %%global_location_label%%85 (and (<= 0 target_l2i!) (< target_l2i! 512))) (=> %%global_location_label%%86 (and (<= 0 target_l1i!) (< target_l1i! 512))) (=> %%global_location_label%%87 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!))) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!pagetable.entry.PageEntry. l2_entry!))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l1. self! target_l4i! target_l3i! target_l2i! target_l1i! l2_entry!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l1. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int Int lib!pagetable.entry.PageEntry. core!option.Option.) Bool)
(assert (forall ((self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l2i! Int) (target_l1i! Int) (l2_entry! lib!pagetable.entry.PageEntry.) (ret! core!option.Option.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l1. self! target_l4i! target_l3i! target_l2i! target_l1i! l2_entry! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.)) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!) (I target_l1i!))) (Poly%core!option.Option. ret!)) (ext_eq false BOOL (B (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) (I target_l3i!) (I target_l2i!) (I target_l1i!))))))) (B (is-core!option.Option./Some_ ret!))) (=> (is-core!option.Option./Some_ ret!) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) (I target_l3i!) (I target_l2i!) (I target_l1i!)))))) (= (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!util.page_ptr_util_u.spec_index2va.? (Poly%tuple%4. (tuple%4./tuple%4 (I target_l4i!) (I target_l3i!) (I target_l2i!) (I target_l1i!))))))) (lib!pagetable.entry.spec_page_entry_to_map_entry.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ret!))))))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.get_entry_l1. self! target_l4i! target_l3i! target_l2i! target_l1i! l2_entry! ret!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::get_entry_l1")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1153:5: 1153:164 (#0)")
(set-info :comment ";; Function-Specs lib::lemma::lemma_u::page_ptr_valid_imply_MEM_valid")
(declare-fun req%lib!lemma.lemma_u.page_ptr_valid_imply_MEM_valid. (Int) Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((v! Int)) (! (= (req%lib!lemma.lemma_u.page_ptr_valid_imply_MEM_valid. v!) (=> %%global_location_label%%88 (lib!util.page_ptr_util_u.page_ptr_valid.? (I v!)))) :pattern ((req%lib!lemma.lemma_u.page_ptr_valid_imply_MEM_valid. v!)))))
(declare-fun ens%lib!lemma.lemma_u.page_ptr_valid_imply_MEM_valid. (Int) Bool)
(assert (forall ((v! Int)) (! (= (ens%lib!lemma.lemma_u.page_ptr_valid_imply_MEM_valid. v!) (lib!util.page_ptr_util_u.MEM_valid.? (I v!))) :pattern ((ens%lib!lemma.lemma_u.page_ptr_valid_imply_MEM_valid. v!)))))
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::create_entry_l4")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l4. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(assert (forall ((pre%self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (page_map_ptr! Int) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l4. pre%self! target_l4i! page_map_ptr! page_map_perm!) (and (=> %%global_location_label%%89 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (=> %%global_location_label%%90 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) target_l4i!) (< target_l4i! 512))) (=> %%global_location_label%%91 (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!)))) (=> %%global_location_label%%92 (lib!util.page_ptr_util_u.page_ptr_valid.? (I page_map_ptr!))) (=> %%global_location_label%%93 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (I page_map_ptr!)) false)) (=> %%global_location_label%%94 (lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I page_map_ptr!))) (=> %%global_location_label%%95 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)) page_map_ptr!)) (=> %%global_location_label%%96 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)))) (=> %%global_location_label%%97 (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))))) (=> %%global_location_label%%98 (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l4. pre%self! target_l4i! page_map_ptr! page_map_perm!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l4. (lib!pagetable.pagetable_spec_impl.PageTable. lib!pagetable.pagetable_spec_impl.PageTable. Int Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Bool)
(assert (forall ((pre%self! lib!pagetable.pagetable_spec_impl.PageTable.) (self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (page_map_ptr! Int) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l4. pre%self! self! target_l4i! page_map_ptr! page_map_perm!) (and (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (I page_map_ptr!))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!))) (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!))))))) page_map_ptr!) (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l4. pre%self! self! target_l4i! page_map_ptr! page_map_perm!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::create_entry_l4")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1180:5: 1180:137 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::create_entry_l3")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l3. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(declare-const %%global_location_label%%103 Bool)
(declare-const %%global_location_label%%104 Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(declare-const %%global_location_label%%112 Bool)
(assert (forall ((pre%self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l3_p! Int) (page_map_ptr! Int) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l3. pre%self! target_l4i! target_l3i! target_l3_p! page_map_ptr! page_map_perm!) (and (=> %%global_location_label%%99 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (=> %%global_location_label%%100 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) target_l4i!) (< target_l4i! 512))) (=> %%global_location_label%%101 (and (<= 0 target_l3i!) (< target_l3i! 512))) (=> %%global_location_label%%102 (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!)))) (=> %%global_location_label%%103 (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!))))))) target_l3_p!)) (=> %%global_location_label%%104 (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!) (I target_l3i!)))) (=> %%global_location_label%%105 (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!) (I target_l3i!)))) (=> %%global_location_label%%106 (lib!util.page_ptr_util_u.page_ptr_valid.? (I page_map_ptr!))) (=> %%global_location_label%%107 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (I page_map_ptr!)) false)) (=> %%global_location_label%%108 (lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I page_map_ptr!))) (=> %%global_location_label%%109 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)) page_map_ptr!)) (=> %%global_location_label%%110 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)))) (=> %%global_location_label%%111 (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))))) (=> %%global_location_label%%112 (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l3. pre%self! target_l4i! target_l3i! target_l3_p! page_map_ptr! page_map_perm!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l3. (lib!pagetable.pagetable_spec_impl.PageTable. lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Bool)
(assert (forall ((pre%self! lib!pagetable.pagetable_spec_impl.PageTable.) (self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l3_p! Int) (page_map_ptr! Int) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l3. pre%self! self! target_l4i! target_l3i! target_l3_p! page_map_ptr! page_map_perm!) (and (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (I page_map_ptr!))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!)) (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!))) (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!))))))) page_map_ptr!) (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!))) (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l3. pre%self! self! target_l4i! target_l3i! target_l3_p! page_map_ptr! page_map_perm!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::create_entry_l3")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1277:5: 1277:182 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::pagetable_spec_impl::PageTable::create_entry_l2")
(declare-fun req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l2. (lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int Int Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Bool)
(declare-const %%global_location_label%%113 Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(declare-const %%global_location_label%%119 Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(declare-const %%global_location_label%%126 Bool)
(declare-const %%global_location_label%%127 Bool)
(assert (forall ((pre%self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l2i! Int) (target_l2_p! Int) (page_map_ptr! Int) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= (req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l2. pre%self! target_l4i! target_l3i! target_l2i! target_l2_p! page_map_ptr! page_map_perm!) (and (=> %%global_location_label%%113 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (=> %%global_location_label%%114 (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) target_l4i!) (< target_l4i! 512))) (=> %%global_location_label%%115 (and (<= 0 target_l3i!) (< target_l3i! 512))) (=> %%global_location_label%%116 (and (<= 0 target_l2i!) (< target_l2i! 512))) (=> %%global_location_label%%117 (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!) (I target_l3i!)))) (=> %%global_location_label%%118 (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!) (I target_l3i!))))))) target_l2_p!)) (=> %%global_location_label%%119 (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!) (I target_l3i!) (I target_l2i!)))) (=> %%global_location_label%%120 (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I target_l4i!) (I target_l3i!) (I target_l2i!)))) (=> %%global_location_label%%121 (lib!util.page_ptr_util_u.page_ptr_valid.? (I page_map_ptr!))) (=> %%global_location_label%%122 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (I page_map_ptr!)) false)) (=> %%global_location_label%%123 (lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!) (I page_map_ptr!))) (=> %%global_location_label%%124 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)) page_map_ptr!)) (=> %%global_location_label%%125 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)))) (=> %%global_location_label%%126 (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))))) (=> %%global_location_label%%127 (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))))) :pattern ((req%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l2. pre%self! target_l4i! target_l3i! target_l2i! target_l2_p! page_map_ptr! page_map_perm!)))))
(declare-fun ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l2. (lib!pagetable.pagetable_spec_impl.PageTable. lib!pagetable.pagetable_spec_impl.PageTable. Int Int Int Int Int vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Bool)
(assert (forall ((pre%self! lib!pagetable.pagetable_spec_impl.PageTable.) (self! lib!pagetable.pagetable_spec_impl.PageTable.) (target_l4i! Int) (target_l3i! Int) (target_l2i! Int) (target_l2_p! Int) (page_map_ptr! Int) (page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= (ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l2. pre%self! self! target_l4i! target_l3i! target_l2i! target_l2_p! page_map_ptr! page_map_perm!) (and (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))) (I page_map_ptr!))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!)))) (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!))) (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!))))))) page_map_ptr!) (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!) (I target_l4i!) (I target_l3i!) (I target_l2i!))) (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. pre%self!))))))) :pattern ((ens%lib!pagetable.pagetable_spec_impl.impl&%2.create_entry_l2. pre%self! self! target_l4i! target_l3i! target_l2i! target_l2_p! page_map_ptr! page_map_perm!)))))
(set-info :comment ";; Function-Def lib::pagetable::pagetable_spec_impl::PageTable::create_entry_l2")
(set-info :comment ";; pagetable/pagetable_spec_impl.rs:1385:5: 1385:202 (#0)")
(declare-const self!@0 lib!pagetable.pagetable_spec_impl.PageTable.)
(declare-const target_l4i! Int)
(declare-const target_l3i! Int)
(declare-const target_l2i! Int)
(declare-const target_l2_p! Int)
(declare-const page_map_ptr! Int)
(declare-const page_map_perm! vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%3 Bool)
(declare-const tmp%4 Poly)
(declare-const verus_tmp_l2_perm@0 vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)
(declare-const tmp%5 lib!pagetable.entry.PageEntry.)
(declare-const tmp%6 Poly)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Bool)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Bool)
(declare-const tmp%17 Bool)
(declare-const tmp%18 Bool)
(declare-const verus_tmp@ vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)
(declare-const l2_perm@0 vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.))
(assert (uInv SZ target_l4i!))
(assert (uInv SZ target_l3i!))
(assert (uInv SZ target_l2i!))
(assert (uInv SZ target_l2_p!))
(assert (uInv SZ page_map_ptr!))
(assert (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0)))
(assert (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))) target_l4i!) (< target_l4i! 512)))
(assert (and (<= 0 target_l3i!) (< target_l3i! 512)))
(assert (and (<= 0 target_l2i!) (< target_l2i! 512)))
(assert (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!) (I target_l3i!))))
(assert (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!) (I target_l3i!))))))) target_l2_p!))
(assert (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!) (I target_l3i!) (I target_l2i!))))
(assert (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!) (I target_l3i!) (I target_l2i!))))
(assert (lib!util.page_ptr_util_u.page_ptr_valid.? (I page_map_ptr!)))
(assert (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))) (I page_map_ptr!)) false))
(assert (lib!pagetable.pagetable_spec_impl.impl&%0.page_not_mapped.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I page_map_ptr!)))
(assert (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)) page_map_ptr!))
(assert (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))
(assert (lib!pagetable.pagemap.impl&%0.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)))))))
(assert (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$)))))))
(declare-const self!@1 lib!pagetable.pagetable_spec_impl.PageTable.)
(declare-const l2_perm@1 vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)
(declare-const l2_perm@2 vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)
(declare-const self!@2 lib!pagetable.pagetable_spec_impl.PageTable.)
(declare-const self!@3 lib!pagetable.pagetable_spec_impl.PageTable.)
(declare-const self!@4 lib!pagetable.pagetable_spec_impl.PageTable.)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%37 Bool)
(assert (not (=> (= tmp%1 (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) 512)) (and (and (and (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))) false)))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$)))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!))))) i$))))))))))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (=> (= tmp%2 (and (and (and (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!)))))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!)))))))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!))))))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!))))))))))))) (and (=> %%location_label%%1 tmp%2) (=> tmp%2 (=> (= tmp%3 (and (and (and (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!) (I target_l3i!)))))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!) (I target_l3i!)))))))))))) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!) (I target_l3i!))))))))))) (not (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) (I target_l4i!) (I target_l3i!))))))))))))) (and (=> %%location_label%%2 tmp%3) (=> tmp%3 (and (=> %%location_label%%3 (req%vstd!map.impl&%0.tracked_remove. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0)))) (I target_l2_p!))) (=> (and (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m self!@1)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g self!@0) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g self!@1))) (=> (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@1) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (=> (ens%vstd!map.impl&%0.tracked_remove. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0)))) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@1)))) (I target_l2_p!) tmp%4) (=> (= verus_tmp@ (%Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. tmp%4)) (=> (= verus_tmp_l2_perm@0 verus_tmp@) (=> (= l2_perm@1 verus_tmp_l2_perm@0) (and (=> %%location_label%%4 (req%lib!lemma.lemma_u.page_ptr_valid_imply_MEM_valid. page_map_ptr!)) (=> (ens%lib!lemma.lemma_u.page_ptr_valid_imply_MEM_valid. page_map_ptr!) (=> (= tmp%5 (lib!pagetable.entry.PageEntry./PageEntry (%I (I page_map_ptr!)) (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntryPerm./PageEntryPerm (%B (B true)) (%B (B false)) (%B (B true)) (%B (B false)) (%B (B true))))))) (and (=> %%location_label%%5 (req%lib!pagetable.pagemap_util_t.page_map_set. target_l2_p! l2_perm@1 target_l2i! tmp%5)) (=> (ens%lib!pagetable.pagemap_util_t.page_map_set. target_l2_p! l2_perm@1 l2_perm@2 target_l2i! tmp%5) (=> (and (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m self!@2)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g self!@1) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g self!@2))) (=> (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@2) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (=> (ens%vstd!map.impl&%0.tracked_insert. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@1)))) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@2)))) (I target_l2_p!) (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. l2_perm@2)) (=> (and (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m self!@3)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g self!@2) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g self!@3))) (=> (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@3) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (=> (ens%vstd!map.impl&%0.tracked_insert. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@2)))) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@3)))) (I page_map_ptr!) (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. page_map_perm!)) (=> (= tmp%6 (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@3)))) (I page_map_ptr!) (Poly%tuple%3. (tuple%3./tuple%3 (I target_l4i!) (I target_l3i!) (I target_l2i!))))) (=> (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (%Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. tmp%6)) (=> (and (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m self!@4)) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g self!@3) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g self!@4))) (=> (= tmp%7 (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l4.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (and (=> %%location_label%%6 tmp%7) (=> tmp%7 (and (and (=> %%location_label%%7 (req%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. self!@0)) (=> (ens%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. self!@0) (=> %%location_label%%8 (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))))) (=> (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)) (=> (= tmp%8 (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (and (=> %%location_label%%9 tmp%8) (=> tmp%8 (and (and (=> %%location_label%%10 (req%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. self!@0)) (=> (ens%lib!pagetable.pagetable_spec_impl.impl&%1.ps_entries_exist_in_mapped_pages. self!@0) (=> %%location_label%%11 (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))))) (=> (lib!pagetable.pagetable_spec_impl.impl&%0.wf_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)) (and (=> (= tmp%9 (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly) (l1i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ)) (has_type l1i$ (UINT SZ))) (=> (and (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (and (<= 0 (%I l1i$)) (< (%I l1i$) 512))) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) l4i$ l3i$ l2i$ l1i$)) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) l4i$ l3i$ l2i$ l1i$))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) l4i$ l3i$ l2i$ l1i$)) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_4k_l1.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) l4i$ l3i$ l2i$ l1i$))))) (and (=> %%location_label%%12 tmp%9) (=> tmp%9 (=> %%location_label%%13 (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)))))) (=> (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)) (and (=> (= tmp%10 (forall ((l4i$ Poly) (l3i$ Poly) (l2i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ)) (has_type l2i$ (UINT SZ))) (=> (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (and (<= 0 (%I l2i$)) (< (%I l2i$) 512))) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) l4i$ l3i$ l2i$)) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) l4i$ l3i$ l2i$))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) l4i$ l3i$ l2i$)) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) l4i$ l3i$ l2i$))))) (and (=> %%location_label%%14 tmp%10) (=> tmp%10 (=> %%location_label%%15 (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)))))) (=> (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)) (and (=> (= tmp%11 (forall ((l4i$ Poly) (l3i$ Poly)) (! (=> (and (has_type l4i$ (UINT SZ)) (has_type l3i$ (UINT SZ))) (=> (and (and (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (%I l4i$)) (< (%I l4i$) 512)) (and (<= 0 (%I l3i$)) (< (%I l3i$) 512))) (not (= (tuple%2./tuple%2 l4i$ l3i$) (tuple%2./tuple%2 (I target_l4i!) (I target_l3i!))))) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) l4i$ l3i$)) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) l4i$ l3i$))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) l4i$ l3i$)) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_1g_l3.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0) l4i$ l3i$))))) (and (=> %%location_label%%16 tmp%11) (=> tmp%11 (=> %%location_label%%17 (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)))))) (=> (lib!pagetable.pagetable_spec_impl.impl&%0.wf_mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)) (=> (= tmp%12 (lib!pagetable.pagetable_spec_impl.impl&%0.user_only.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (and (=> %%location_label%%18 tmp%12) (=> tmp%12 (=> (= tmp%13 (lib!pagetable.pagetable_spec_impl.impl&%0.rwx_upper_level_entries.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (and (=> %%location_label%%19 tmp%13) (=> tmp%13 (=> (= tmp%14 (lib!pagetable.pagetable_spec_impl.impl&%0.present_or_zero.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (and (=> %%location_label%%20 tmp%14) (=> tmp%14 (=> (= tmp%15 (lib!pagetable.pagetable_spec_impl.impl&%0.table_pages_wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (and (=> %%location_label%%21 tmp%15) (=> tmp%15 (=> (= tmp%16 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%22 tmp%16) (=> tmp%16 (=> (= tmp%17 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%23 tmp%17) (=> tmp%17 (=> (= tmp%18 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%24 tmp%18) (=> tmp%18 (and (=> %%location_label%%25 (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (and (=> %%location_label%%26 (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%27 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))) (I page_map_ptr!)))) (and (=> %%location_label%%28 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%29 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%30 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%31 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_4k_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%32 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_2m_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%33 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapped_1g_pages.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0))))) (and (=> %%location_label%%34 (is-core!option.Option./Some_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) (I target_l4i!) (I target_l3i!) (I target_l2i!)))) (and (=> %%location_label%%35 (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) (I target_l4i!) (I target_l3i!) (I target_l2i!))))))) page_map_ptr!)) (and (=> %%location_label%%36 (is-core!option.Option./None_ (lib!pagetable.pagetable_spec_impl.impl&%0.spec_resolve_mapping_2m_l2.? (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4) (I target_l4i!) (I target_l3i!) (I target_l2i!)))) (=> %%location_label%%37 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@4)))) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!@0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
