(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-option :smt.arith.solver 6)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module definitions_u'")
(set-info :comment ";; page-table/definitions_u.rs:169:13: 169:19 (#0)")
(set-info :comment ";; query spun off because: nonlinear")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%lib!definitions_u.permissive_flags. FuelId)
(declare-const fuel%lib!definitions_u.impl&%1.view. FuelId)
(declare-const fuel%lib!definitions_u.impl&%2.view. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_LAYERS. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_ENTRIES. FuelId)
(declare-const fuel%lib!definitions_t.MAX_PHYADDR_SPEC. FuelId)
(declare-const fuel%lib!definitions_t.PAGE_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.MAX_BASE. FuelId)
(declare-const fuel%lib!definitions_t.L3_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L2_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L1_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L0_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.index_from_offset. FuelId)
(declare-const fuel%lib!definitions_t.index_from_base_and_addr. FuelId)
(declare-const fuel%lib!definitions_t.entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.next_entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.aligned. FuelId)
(declare-const fuel%lib!definitions_t.new_seq. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.num_entries. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.inv. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.contains_entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.index_for_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_base. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.next_entry_base. FuelId)
(declare-const fuel%lib!definitions_t.x86_arch_spec. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%40.view. fuel%lib!definitions_u.permissive_flags. fuel%lib!definitions_u.impl&%1.view. fuel%lib!definitions_u.impl&%2.view. fuel%lib!definitions_t.X86_NUM_LAYERS. fuel%lib!definitions_t.X86_NUM_ENTRIES. fuel%lib!definitions_t.MAX_PHYADDR_SPEC. fuel%lib!definitions_t.PAGE_SIZE. fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. fuel%lib!definitions_t.MAX_BASE. fuel%lib!definitions_t.L3_ENTRY_SIZE. fuel%lib!definitions_t.L2_ENTRY_SIZE. fuel%lib!definitions_t.L1_ENTRY_SIZE. fuel%lib!definitions_t.L0_ENTRY_SIZE. fuel%lib!definitions_t.index_from_offset. fuel%lib!definitions_t.index_from_base_and_addr. fuel%lib!definitions_t.entry_base_from_index. fuel%lib!definitions_t.next_entry_base_from_index. fuel%lib!definitions_t.aligned. fuel%lib!definitions_t.new_seq. fuel%lib!definitions_t.impl&%8.entry_size. fuel%lib!definitions_t.impl&%8.num_entries. fuel%lib!definitions_t.impl&%8.inv. fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast. fuel%lib!definitions_t.impl&%8.contains_entry_size. fuel%lib!definitions_t.impl&%8.index_for_vaddr. fuel%lib!definitions_t.impl&%8.entry_base. fuel%lib!definitions_t.impl&%8.next_entry_base. fuel%lib!definitions_t.x86_arch_spec. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayer.>. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!definitions_t.Flags. 0) (lib!definitions_t.ArchLayer. 0) (lib!definitions_t.Arch. 0) (lib!definitions_t.ArchLayerExec. 0) (lib!definitions_t.ArchExec. 0) (tuple%0. 0) (tuple%1. 0)) (((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!definitions_t.Flags./Flags (lib!definitions_t.Flags./Flags/?is_writable Bool) (lib!definitions_t.Flags./Flags/?is_supervisor Bool) (lib!definitions_t.Flags./Flags/?disable_execute Bool))) ((lib!definitions_t.ArchLayer./ArchLayer (lib!definitions_t.ArchLayer./ArchLayer/?entry_size Int) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries Int))) ((lib!definitions_t.Arch./Arch (lib!definitions_t.Arch./Arch/?layers vstd!seq.Seq<lib!definitions_t.ArchLayer.>.))) ((lib!definitions_t.ArchLayerExec./ArchLayerExec (lib!definitions_t.ArchLayerExec./ArchLayerExec/?entry_size Int) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?num_entries Int))) ((lib!definitions_t.ArchExec./ArchExec (lib!definitions_t.ArchExec./ArchExec/?layers %%Function%%))) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly)))))
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!definitions_t.Flags./Flags/is_writable (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/is_supervisor (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/disable_execute (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/entry_size (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/num_entries (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.Arch./Arch/layers (lib!definitions_t.Arch.) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (lib!definitions_t.ArchLayerExec.) Int)
(declare-fun lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (lib!definitions_t.ArchLayerExec.) Int)
(declare-fun lib!definitions_t.ArchExec./ArchExec/layers (lib!definitions_t.ArchExec.) %%Function%%)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!definitions_t.Flags. Type)
(declare-const TYPE%lib!definitions_t.ArchLayer. Type)
(declare-const TYPE%lib!definitions_t.Arch. Type)
(declare-const TYPE%lib!definitions_t.ArchLayerExec. Type)
(declare-const TYPE%lib!definitions_t.ArchExec. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun FNDEF%core!clone.Clone.clone. (Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!seq.Seq<lib!definitions_t.ArchLayer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags.) Poly)
(declare-fun %Poly%lib!definitions_t.Flags. (Poly) lib!definitions_t.Flags.)
(declare-fun Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayer. (Poly) lib!definitions_t.ArchLayer.)
(declare-fun Poly%lib!definitions_t.Arch. (lib!definitions_t.Arch.) Poly)
(declare-fun %Poly%lib!definitions_t.Arch. (Poly) lib!definitions_t.Arch.)
(declare-fun Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayerExec. (Poly) lib!definitions_t.ArchLayerExec.)
(declare-fun Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchExec. (Poly) lib!definitions_t.ArchExec.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= x (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. x))) :pattern ((Poly%lib!definitions_t.Flags. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Flags.) (= x (Poly%lib!definitions_t.Flags. (%Poly%lib!definitions_t.Flags. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_writable x) (lib!definitions_t.Flags./Flags/?is_writable x)) :pattern ((lib!definitions_t.Flags./Flags/is_writable x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_supervisor x) (lib!definitions_t.Flags./Flags/?is_supervisor x)) :pattern ((lib!definitions_t.Flags./Flags/is_supervisor x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/disable_execute x) (lib!definitions_t.Flags./Flags/?disable_execute x)) :pattern ((lib!definitions_t.Flags./Flags/disable_execute x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.) :pattern ((has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= x (%Poly%lib!definitions_t.ArchLayer. (Poly%lib!definitions_t.ArchLayer. x))) :pattern ((Poly%lib!definitions_t.ArchLayer. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (= x (Poly%lib!definitions_t.ArchLayer. (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (<= 0 _entry_size!) (<= 0 _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/entry_size x) (lib!definitions_t.ArchLayer./ArchLayer/?entry_size x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/num_entries x) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= x (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. x))) :pattern ((Poly%lib!definitions_t.Arch. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Arch.) (= x (Poly%lib!definitions_t.Arch. (%Poly%lib!definitions_t.Arch. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= (lib!definitions_t.Arch./Arch/layers x) (lib!definitions_t.Arch./Arch/?layers x)) :pattern ((lib!definitions_t.Arch./Arch/layers x)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.) :pattern ((has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= x (%Poly%lib!definitions_t.ArchLayerExec. (Poly%lib!definitions_t.ArchLayerExec. x))) :pattern ((Poly%lib!definitions_t.ArchLayerExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (= x (Poly%lib!definitions_t.ArchLayerExec. (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (uInv SZ _entry_size!) (uInv SZ _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec./ArchLayerExec _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayerExec.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec./ArchLayerExec _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= (lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size x) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?entry_size x)) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (uInv SZ (lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%lib!definitions_t.ArchLayerExec. x)) (has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= (lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries x) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?num_entries x)) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (uInv SZ (lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%lib!definitions_t.ArchLayerExec. x)) (has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchExec.)) (! (= x (%Poly%lib!definitions_t.ArchExec. (Poly%lib!definitions_t.ArchExec. x))) :pattern ((Poly%lib!definitions_t.ArchExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchExec.) (= x (Poly%lib!definitions_t.ArchExec. (%Poly%lib!definitions_t.ArchExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((_layers! %%Function%%)) (! (=> (has_type (Poly%array%. _layers!) (ARRAY $ TYPE%lib!definitions_t.ArchLayerExec. $ (CONST_INT 4))) (has_type (Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec./ArchExec _layers!)) TYPE%lib!definitions_t.ArchExec.)) :pattern ((has_type (Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec./ArchExec _layers!)) TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((x lib!definitions_t.ArchExec.)) (! (= (lib!definitions_t.ArchExec./ArchExec/layers x) (lib!definitions_t.ArchExec./ArchExec/?layers x)) :pattern ((lib!definitions_t.ArchExec./ArchExec/layers x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchExec.) (has_type (Poly%array%. (lib!definitions_t.ArchExec./ArchExec/layers (%Poly%lib!definitions_t.ArchExec. x))) (ARRAY $ TYPE%lib!definitions_t.ArchLayerExec. $ (CONST_INT 4)))) :pattern ((lib!definitions_t.ArchExec./ArchExec/layers (%Poly%lib!definitions_t.ArchExec. x)) (has_type x TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%2 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%2 Fn i) T)) :pattern ((has_type (%%apply%%2 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%2 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%2 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) (TYPE%tuple%1. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::definitions_t::aligned")
(declare-fun lib!definitions_t.aligned.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::PAGE_SIZE")
(declare-fun lib!definitions_t.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_WIDTH")
(declare-fun lib!definitions_t.MAX_PHYADDR_WIDTH.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_SPEC")
(declare-fun lib!definitions_t.MAX_PHYADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_LAYERS")
(declare-fun lib!definitions_t.X86_NUM_LAYERS.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_size")
(declare-fun lib!definitions_t.impl&%8.entry_size.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::num_entries")
(declare-fun lib!definitions_t.impl&%8.num_entries.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_MAX_ENTRY_SIZE")
(declare-fun lib!definitions_t.X86_MAX_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_ENTRIES")
(declare-fun lib!definitions_t.X86_NUM_ENTRIES.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::inv")
(declare-fun lib!definitions_t.impl&%8.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::entry_base_from_index")
(declare-fun lib!definitions_t.entry_base_from_index.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_base")
(declare-fun lib!definitions_t.impl&%8.entry_base.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L3_ENTRY_SIZE")
(declare-fun lib!definitions_t.L3_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L2_ENTRY_SIZE")
(declare-fun lib!definitions_t.L2_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L1_ENTRY_SIZE")
(declare-fun lib!definitions_t.L1_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L0_ENTRY_SIZE")
(declare-fun lib!definitions_t.L0_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::x86_arch_spec")
(declare-fun lib!definitions_t.x86_arch_spec.? () lib!definitions_t.Arch.)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_BASE")
(declare-fun lib!definitions_t.MAX_BASE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::new_seq")
(declare-fun lib!definitions_t.new_seq.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_t.rec%new_seq.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::definitions_u::permissive_flags")
(declare-fun lib!definitions_u.permissive_flags.? () lib!definitions_t.Flags.)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::contains_entry_size_at_index_atleast")
(declare-fun lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::contains_entry_size")
(declare-fun lib!definitions_t.impl&%8.contains_entry_size.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::index_from_offset")
(declare-fun lib!definitions_t.index_from_offset.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::index_from_base_and_addr")
(declare-fun lib!definitions_t.index_from_base_and_addr.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::index_for_vaddr")
(declare-fun lib!definitions_t.impl&%8.index_for_vaddr.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::next_entry_base_from_index")
(declare-fun lib!definitions_t.next_entry_base_from_index.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::next_entry_base")
(declare-fun lib!definitions_t.impl&%8.next_entry_base.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::ArchLayerExec::view")
(declare-fun lib!definitions_u.impl&%1.view.? (Poly) lib!definitions_t.ArchLayer.)
(set-info :comment ";; Function-Decl lib::definitions_t::ArchExec::view")
(declare-fun lib!definitions_u.impl&%2.view.? (Poly) lib!definitions_t.Arch.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Specs core::clone::Clone::clone")
(declare-fun ens%core!clone.Clone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (%return! Poly)) (! (= (ens%core!clone.Clone.clone. Self%&. Self%& self! %return!) (has_type %return! Self%&)) :pattern ((ens%core!clone.Clone.clone. Self%&. Self%& self! %return!)))))
(assert (forall ((tmp%%$ Poly) (Self%&. Dcr) (Self%& Type)) (! (=> (has_type tmp%%$ (TYPE%tuple%1. (REF Self%&.) Self%&)) (=> (let ((self$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) true) (closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$))) :pattern ((closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%14::clone")
(declare-fun ens%core!clone.impls.impl&%14.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%14.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (SINT 32) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%14.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (SINT 32))) (has_type res$ (SINT 32))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT 32)) $ (TYPE%tuple%1. (REF $) (SINT 32)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT 32)) $ (TYPE%tuple%1. (REF $) (SINT 32)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%9::clone")
(declare-fun ens%core!clone.impls.impl&%9.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%9.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 64) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%9.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 64))) (has_type res$ (UINT 64))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%5::clone")
(declare-fun ens%core!clone.impls.impl&%5.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%5.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT SZ) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%5.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT SZ))) (has_type res$ (UINT SZ))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%21::clone")
(declare-fun ens%core!clone.impls.impl&%21.clone. (Poly Poly) Bool)
(assert (forall ((b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%21.clone. b! res!) (and (ens%core!clone.Clone.clone. $ BOOL b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%21.clone. b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) BOOL)) (has_type res$ BOOL)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$) (let ((b$ (%B (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%B res$) b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%3::clone")
(declare-fun ens%core!clone.impls.impl&%3.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%3.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (REF T&.) T& b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%3.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (REF T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs builtin::impl&%4::clone")
(declare-fun ens%builtin!impl&%4.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%4.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (TRACKED T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%4.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (TRACKED T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs builtin::impl&%2::clone")
(declare-fun ens%builtin!impl&%2.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%2.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (GHOST T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%2.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (GHOST T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs alloc::boxed::impl&%12::clone")
(declare-fun ens%alloc!boxed.impl&%12.clone. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (b! Poly) (res! Poly)) (! (= (ens%alloc!boxed.impl&%12.clone. T&. T& A&. A& b! res!) (and (ens%core!clone.Clone.clone. (BOX A&. A& T&.) T& b! res!) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 b!)) res!))) :pattern ((ens%alloc!boxed.impl&%12.clone. T&. T& A&. A& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (BOX A&. A& T&.) T&) $ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 b$)) res$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (BOX A&. A& T&.) T&) $ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Function-Specs vstd::array::array_index_get")
(declare-fun req%vstd!array.array_index_get. (Dcr Type Dcr Type %%Function%% Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! %%Function%%) (i! Int)) (! (= (req%vstd!array.array_index_get. T&. T& N&. N& ar! i!) (=> %%global_location_label%%3 (and (<= 0 i!) (< i! (const_int N&))))) :pattern ((req%vstd!array.array_index_get. T&. T& N&. N& ar! i!)))))
(declare-fun ens%vstd!array.array_index_get. (Dcr Type Dcr Type %%Function%% Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! %%Function%%) (i! Int) (out! Poly)) (! (= (ens%vstd!array.array_index_get. T&. T& N&. N& ar! i! out!) (and (has_type out! T&) (= out! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) (Poly%array%. ar!)) (I i!))))) :pattern ((ens%vstd!array.array_index_get. T&. T& N&. N& ar! i! out!)))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::aligned")
(assert (fuel_bool_default fuel%lib!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%lib!definitions_t.aligned.) (forall ((addr! Poly) (size! Poly)) (! (= (lib!definitions_t.aligned.? addr! size!) (= (nClip (EucMod (%I addr!) (%I size!))) 0)) :pattern ((lib!definitions_t.aligned.? addr! size!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PAGE_SIZE.) (= lib!definitions_t.PAGE_SIZE.? 4096)))
(assert (uInv SZ lib!definitions_t.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_WIDTH")
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_WIDTH.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_SPEC")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_PHYADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_PHYADDR_SPEC.) (= lib!definitions_t.MAX_PHYADDR_SPEC.? (uClip 64 (Sub (uClip 64 (bitshl (I 1) (I lib!definitions_t.MAX_PHYADDR_WIDTH.?))) 1)))))
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_LAYERS")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_LAYERS.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_LAYERS.) (= lib!definitions_t.X86_NUM_LAYERS.? 4)))
(assert (uInv SZ lib!definitions_t.X86_NUM_LAYERS.?))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_size")
(declare-fun req%lib!definitions_t.impl&%8.entry_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size. self! layer!) (=> %%global_location_label%%4 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size. self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_size.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::num_entries")
(declare-fun req%lib!definitions_t.impl&%8.num_entries. (Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.num_entries. self! layer!) (=> %%global_location_label%%5 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.num_entries. self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::num_entries")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.num_entries.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.num_entries.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.num_entries.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.num_entries.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_MAX_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.) (= lib!definitions_t.X86_MAX_ENTRY_SIZE.? (nClip (Mul (nClip (Mul (nClip (Mul 512 512)) 512)) 4096)))))
(assert (<= 0 lib!definitions_t.X86_MAX_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_ENTRIES")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_ENTRIES.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_ENTRIES.) (= lib!definitions_t.X86_NUM_ENTRIES.? 512)))
(assert (uInv SZ lib!definitions_t.X86_NUM_ENTRIES.?))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!) (=> %%global_location_label%%6 (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_size_is_next_layer_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.) (forall ((self! Poly) (i! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!) (=> (< (nClip (Add (%I i!) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i!) (nClip (Mul (lib!definitions_t.impl&%8.entry_size.? self! (I (nClip (Add (%I i!) 1)))) (lib!definitions_t.impl&%8.num_entries.? self! (I (nClip (Add (%I i!) 1))))))))) :pattern ((lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::inv")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.inv.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.inv.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%8.inv.? self!) (and (<= (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))) lib!definitions_t.X86_NUM_LAYERS.?) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (and (and (let ((tmp%%$ (lib!definitions_t.impl&%8.entry_size.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_MAX_ENTRY_SIZE.?))) (let ((tmp%%$ (lib!definitions_t.impl&%8.num_entries.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_NUM_ENTRIES.?)))) (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i$)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$)) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! i$)))))) :pattern ((lib!definitions_t.impl&%8.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::entry_base_from_index")
(assert (fuel_bool_default fuel%lib!definitions_t.entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (%I idx!) (%I entry_size!)))))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_base")
(declare-fun req%lib!definitions_t.impl&%8.entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%7 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%8 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_base")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!) (lib!definitions_t.entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::L3_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L3_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L3_ENTRY_SIZE.) (= lib!definitions_t.L3_ENTRY_SIZE.? lib!definitions_t.PAGE_SIZE.?)))
(assert (uInv SZ lib!definitions_t.L3_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L2_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L2_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L2_ENTRY_SIZE.) (= lib!definitions_t.L2_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L3_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L2_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L1_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L1_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L1_ENTRY_SIZE.) (= lib!definitions_t.L1_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L2_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L1_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L0_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L0_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L0_ENTRY_SIZE.) (= lib!definitions_t.L0_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L1_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L0_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::x86_arch_spec")
(assert (fuel_bool_default fuel%lib!definitions_t.x86_arch_spec.))
(declare-fun %%array%%0 (Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3))) (and (= (%%apply%%2 %%x%% 0) %%hole%%0) (= (%%apply%%2 %%x%% 1) %%hole%%1) (= (%%apply%%2 %%x%% 2) %%hole%%2) (= (%%apply%%2 %%x%% 3) %%hole%%3))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3)))))
(assert (=> (fuel_bool fuel%lib!definitions_t.x86_arch_spec.) (= lib!definitions_t.x86_arch_spec.? (lib!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!definitions_t.ArchLayer. $ (CONST_INT 4)) (array_new $ TYPE%lib!definitions_t.ArchLayer. 4 (%%array%%0 (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L0_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L1_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L2_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L3_ENTRY_SIZE.?)) (%I (I 512))))))))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_BASE")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_BASE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_BASE.) (= lib!definitions_t.MAX_BASE.? (nClip (Mul lib!definitions_t.X86_MAX_ENTRY_SIZE.? lib!definitions_t.X86_NUM_ENTRIES.?)))))
(assert (<= 0 lib!definitions_t.MAX_BASE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::new_seq")
(assert (fuel_bool_default fuel%lib!definitions_t.new_seq.))
(declare-const fuel_nat%lib!definitions_t.new_seq. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%) (lib!definitions_t.rec%new_seq.? T&. T& i! e! zero)) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%)) (ite (= (%I i!) 0) (vstd!seq.Seq.empty.? T&. T&) (vstd!seq.Seq.push.? T&. T& (lib!definitions_t.rec%new_seq.? T&. T& (I (nClip (Sub (%I i!) 1))) e! fuel%) e!)))) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!definitions_t.new_seq.) (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.new_seq.? T&. T& i! e!) (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel_nat%lib!definitions_t.new_seq.)))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (has_type (lib!definitions_t.new_seq.? T&. T& i! e!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::axiom_max_phyaddr_width_facts")
(declare-fun ens%lib!definitions_t.axiom_max_phyaddr_width_facts. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!definitions_t.axiom_max_phyaddr_width_facts. no%param) (let ((tmp%%$ lib!definitions_t.MAX_PHYADDR_WIDTH.?)) (and (<= 32 tmp%%$) (<= tmp%%$ 52)))) :pattern ((ens%lib!definitions_t.axiom_max_phyaddr_width_facts. no%param)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%1 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%40::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (= (vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!view.View.view.? A0&. A0& (tuple%1./tuple%1/0 (%Poly%tuple%1. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!))))))
(set-info :comment ";; Function-Axioms lib::definitions_u::permissive_flags")
(assert (fuel_bool_default fuel%lib!definitions_u.permissive_flags.))
(assert (=> (fuel_bool fuel%lib!definitions_u.permissive_flags.) (= lib!definitions_u.permissive_flags.? (lib!definitions_t.Flags./Flags (%B (B true)) (%B (B false)) (%B (B false))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::contains_entry_size_at_index_atleast")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.) (forall ((self! Poly) (entry_size! Poly) (min_idx! Poly)) (! (= (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! min_idx!) (exists ((i$ Poly)) (! (and (has_type i$ NAT) (and (and (<= (%I min_idx!) (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i$) (%I entry_size!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$))))) :pattern ((lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! min_idx!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::contains_entry_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.contains_entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.contains_entry_size.) (forall ((self! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.impl&%8.contains_entry_size.? self! entry_size!) (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! (I 0))) :pattern ((lib!definitions_t.impl&%8.contains_entry_size.? self! entry_size!))))))
(set-info :comment ";; Function-Specs lib::definitions_t::index_from_offset")
(declare-fun req%lib!definitions_t.index_from_offset. (Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((offset! Poly) (entry_size! Poly)) (! (= (req%lib!definitions_t.index_from_offset. offset! entry_size!) (=> %%global_location_label%%9 (> (%I entry_size!) 0))) :pattern ((req%lib!definitions_t.index_from_offset. offset! entry_size!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::index_from_offset")
(assert (fuel_bool_default fuel%lib!definitions_t.index_from_offset.))
(assert (=> (fuel_bool fuel%lib!definitions_t.index_from_offset.) (forall ((offset! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.index_from_offset.? offset! entry_size!) (nClip (EucDiv (%I offset!) (%I entry_size!)))) :pattern ((lib!definitions_t.index_from_offset.? offset! entry_size!))))))
(assert (forall ((offset! Poly) (entry_size! Poly)) (! (=> (and (has_type offset! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.index_from_offset.? offset! entry_size!))) :pattern ((lib!definitions_t.index_from_offset.? offset! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::index_from_base_and_addr")
(declare-fun req%lib!definitions_t.index_from_base_and_addr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (= (req%lib!definitions_t.index_from_base_and_addr. base! addr! entry_size!) (and (=> %%global_location_label%%10 (>= (%I addr!) (%I base!))) (=> %%global_location_label%%11 (> (%I entry_size!) 0)))) :pattern ((req%lib!definitions_t.index_from_base_and_addr. base! addr! entry_size!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::index_from_base_and_addr")
(assert (fuel_bool_default fuel%lib!definitions_t.index_from_base_and_addr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.index_from_base_and_addr.) (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!) (lib!definitions_t.index_from_offset.? (I (nClip (Sub (%I addr!) (%I base!)))) entry_size!)) :pattern ((lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!))))))
(assert (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type addr! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!))) :pattern ((lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::index_for_vaddr")
(declare-fun req%lib!definitions_t.impl&%8.index_for_vaddr. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (= (req%lib!definitions_t.impl&%8.index_for_vaddr. self! layer! base! vaddr!) (and (=> %%global_location_label%%12 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%13 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))) (=> %%global_location_label%%14 (<= (%I base!) (%I vaddr!))))) :pattern ((req%lib!definitions_t.impl&%8.index_for_vaddr. self! layer! base! vaddr!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::index_for_vaddr")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.index_for_vaddr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.index_for_vaddr.) (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (= (lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!) (lib!definitions_t.index_from_base_and_addr.? base! vaddr! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type vaddr! NAT)) (<= 0 (lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!))) :pattern ((lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::next_entry_base_from_index")
(assert (fuel_bool_default fuel%lib!definitions_t.next_entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.next_entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (nClip (Add (%I idx!) 1)) (%I entry_size!)))))) :pattern ((lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::next_entry_base")
(declare-fun req%lib!definitions_t.impl&%8.next_entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.next_entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%15 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%16 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.next_entry_base. self! layer! base! idx!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::next_entry_base")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.next_entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.next_entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!) (lib!definitions_t.next_entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!)))))
(set-info :comment ";; Function-Specs lib::extra::aligned_transitive")
(declare-fun req%lib!extra.aligned_transitive. (Int Int Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (req%lib!extra.aligned_transitive. a! b! c!) (and (=> %%global_location_label%%17 (< 0 b!)) (=> %%global_location_label%%18 (< 0 c!)) (=> %%global_location_label%%19 (lib!definitions_t.aligned.? (I a!) (I b!))) (=> %%global_location_label%%20 (lib!definitions_t.aligned.? (I b!) (I c!))))) :pattern ((req%lib!extra.aligned_transitive. a! b! c!)))))
(declare-fun ens%lib!extra.aligned_transitive. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (ens%lib!extra.aligned_transitive. a! b! c!) (lib!definitions_t.aligned.? (I a!) (I c!))) :pattern ((ens%lib!extra.aligned_transitive. a! b! c!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::ArchLayerExec::view")
(assert (fuel_bool_default fuel%lib!definitions_u.impl&%1.view.))
(assert (=> (fuel_bool fuel%lib!definitions_u.impl&%1.view.) (forall ((self! Poly)) (! (= (lib!definitions_u.impl&%1.view.? self!) (lib!definitions_t.ArchLayer./ArchLayer (%I (I (lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%lib!definitions_t.ArchLayerExec. self!)))) (%I (I (lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%lib!definitions_t.ArchLayerExec. self!)))))) :pattern ((lib!definitions_u.impl&%1.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.ArchLayerExec.) (has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_u.impl&%1.view.? self!)) TYPE%lib!definitions_t.ArchLayer.)) :pattern ((lib!definitions_u.impl&%1.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::ArchExec::view")
(assert (fuel_bool_default fuel%lib!definitions_u.impl&%2.view.))
(declare-fun %%lambda%%2 () %%Function%%)
(assert (forall ((i$ Poly) (l$ Poly)) (! (= (%%apply%%1 %%lambda%%2 i$ l$) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_u.impl&%1.view.? l$))) :pattern ((%%apply%%1 %%lambda%%2 i$ l$)))))
(assert (=> (fuel_bool fuel%lib!definitions_u.impl&%2.view.) (forall ((self! Poly)) (! (= (lib!definitions_u.impl&%2.view.? self!) (lib!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!definitions_t.ArchLayerExec. $ TYPE%lib!definitions_t.ArchLayer. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!definitions_t.ArchLayerExec. $ (CONST_INT 4)) (Poly%array%. (lib!definitions_t.ArchExec./ArchExec/layers (%Poly%lib!definitions_t.ArchExec. self!)))) (Poly%fun%2. (mk_fun %%lambda%%2)))))) :pattern ((lib!definitions_u.impl&%2.view.? self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)))))
(set-info :comment ";; Function-Specs lib::definitions_u::lemma_new_seq")
(declare-fun ens%lib!definitions_u.lemma_new_seq. (Dcr Type Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (i! Int) (e! Poly)) (! (= (ens%lib!definitions_u.lemma_new_seq. T&. T& i! e!) (and (= (vstd!seq.Seq.len.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!)) i!) (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (< (%I j$) i!) (= (vstd!seq.Seq.index.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!) j$) e!))) :pattern ((vstd!seq.Seq.index.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!) j$)))))) :pattern ((ens%lib!definitions_u.lemma_new_seq. T&. T& i! e!)))))
(set-info :comment ";; Function-Specs lib::definitions_u::x86_arch_inv")
(declare-fun ens%lib!definitions_u.x86_arch_inv. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!definitions_u.x86_arch_inv. no%param) (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?))) :pattern ((ens%lib!definitions_u.x86_arch_inv. no%param)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::lemma_entry_sizes_aligned")
(declare-fun req%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned. (lib!definitions_t.Arch. Int Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((self! lib!definitions_t.Arch.) (i! Int) (j! Int)) (! (= (req%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned. self! i! j!) (and (=> %%global_location_label%%21 (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. self!))) (=> %%global_location_label%%22 (<= i! j!)) (=> %%global_location_label%%23 (< j! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. self!))))))))) :pattern ((req%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned. self! i! j!)))))
(declare-fun ens%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned. (lib!definitions_t.Arch. Int Int) Bool)
(assert (forall ((self! lib!definitions_t.Arch.) (i! Int) (j! Int)) (! (= (ens%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned. self! i! j!) (lib!definitions_t.aligned.? (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) (I i!))) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) (I j!))))) :pattern ((ens%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned. self! i! j!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::lemma_entry_sizes_aligned_auto")
(declare-fun ens%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned_auto. (lib!definitions_t.Arch.) Bool)
(assert (forall ((self! lib!definitions_t.Arch.)) (! (= (ens%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned_auto. self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ NAT) (has_type j$ NAT)) (=> (and (and (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. self!)) (<= (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. self!))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) i$)) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) j$))))) :pattern ((lib!definitions_t.aligned.? (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) i$)) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) j$))))))) :pattern ((ens%lib!definitions_u.impl&%3.lemma_entry_sizes_aligned_auto. self!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::ArchExec::entry_size")
(declare-fun req%lib!definitions_u.impl&%2.entry_size. (lib!definitions_t.ArchExec. Int) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int)) (! (= (req%lib!definitions_u.impl&%2.entry_size. self! layer!) (=> %%global_location_label%%24 (< layer! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!)))))))))) :pattern ((req%lib!definitions_u.impl&%2.entry_size. self! layer!)))))
(declare-fun ens%lib!definitions_u.impl&%2.entry_size. (lib!definitions_t.ArchExec. Int Int) Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (res! Int)) (! (= (ens%lib!definitions_u.impl&%2.entry_size. self! layer! res!) (and (uInv SZ res!) (= res! (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))) :pattern ((ens%lib!definitions_u.impl&%2.entry_size. self! layer! res!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::ArchExec::index_for_vaddr")
(declare-fun req%lib!definitions_u.impl&%2.index_for_vaddr. (lib!definitions_t.ArchExec. Int Int Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (vaddr! Int)) (! (= (req%lib!definitions_u.impl&%2.index_for_vaddr. self! layer! base! vaddr!) (and (=> %%global_location_label%%25 (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))) (=> %%global_location_label%%26 (< layer! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))))))) (=> %%global_location_label%%27 (>= vaddr! base!)))) :pattern ((req%lib!definitions_u.impl&%2.index_for_vaddr. self! layer! base! vaddr!)))))
(declare-fun ens%lib!definitions_u.impl&%2.index_for_vaddr. (lib!definitions_t.ArchExec. Int Int Int Int) Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (vaddr! Int) (res! Int)) (! (= (ens%lib!definitions_u.impl&%2.index_for_vaddr. self! layer! base! vaddr! res!) (and (uInv SZ res!) (= res! (lib!definitions_t.index_from_base_and_addr.? (I base!) (I vaddr!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))) (= res! (lib!definitions_t.index_from_base_and_addr.? (I base!) (I vaddr!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))))) :pattern ((ens%lib!definitions_u.impl&%2.index_for_vaddr. self! layer! base! vaddr! res!)))))
(set-info :comment ";; Function-Specs lib::extra::mult_leq_mono_both")
(declare-fun req%lib!extra.mult_leq_mono_both. (Int Int Int Int) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((a! Int) (b! Int) (c! Int) (d! Int)) (! (= (req%lib!extra.mult_leq_mono_both. a! b! c! d!) (and (=> %%global_location_label%%28 (<= a! c!)) (=> %%global_location_label%%29 (<= b! d!)))) :pattern ((req%lib!extra.mult_leq_mono_both. a! b! c! d!)))))
(declare-fun ens%lib!extra.mult_leq_mono_both. (Int Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (c! Int) (d! Int)) (! (= (ens%lib!extra.mult_leq_mono_both. a! b! c! d!) (let ((tmp%%$ (nClip (Mul a! b!)))) (and (<= 0 tmp%%$) (<= tmp%%$ (nClip (Mul c! d!)))))) :pattern ((ens%lib!extra.mult_leq_mono_both. a! b! c! d!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::ArchExec::entry_base")
(declare-fun req%lib!definitions_u.impl&%2.entry_base. (lib!definitions_t.ArchExec. Int Int Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (idx! Int)) (! (= (req%lib!definitions_u.impl&%2.entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%30 (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))) (=> %%global_location_label%%31 (< layer! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))))))) (=> %%global_location_label%%32 (<= base! lib!definitions_t.MAX_BASE.?)) (=> %%global_location_label%%33 (<= idx! lib!definitions_t.X86_NUM_ENTRIES.?)))) :pattern ((req%lib!definitions_u.impl&%2.entry_base. self! layer! base! idx!)))))
(declare-fun ens%lib!definitions_u.impl&%2.entry_base. (lib!definitions_t.ArchExec. Int Int Int Int) Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (idx! Int) (res! Int)) (! (= (ens%lib!definitions_u.impl&%2.entry_base. self! layer! base! idx! res!) (and (uInv SZ res!) (= res! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))))) :pattern ((ens%lib!definitions_u.impl&%2.entry_base. self! layer! base! idx! res!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::lemma_entry_sizes_increase")
(declare-fun req%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. (lib!definitions_t.Arch. Int Int) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((self! lib!definitions_t.Arch.) (i! Int) (j! Int)) (! (= (req%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. self! i! j!) (and (=> %%global_location_label%%34 (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. self!))) (=> %%global_location_label%%35 (< i! j!)) (=> %%global_location_label%%36 (< j! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. self!))))))))) :pattern ((req%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. self! i! j!)))))
(declare-fun ens%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. (lib!definitions_t.Arch. Int Int) Bool)
(assert (forall ((self! lib!definitions_t.Arch.) (i! Int) (j! Int)) (! (= (ens%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. self! i! j!) (>= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) (I i!)) (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) (I j!)))) :pattern ((ens%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. self! i! j!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::ArchExec::num_entries")
(declare-fun req%lib!definitions_u.impl&%2.num_entries. (lib!definitions_t.ArchExec. Int) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int)) (! (= (req%lib!definitions_u.impl&%2.num_entries. self! layer!) (=> %%global_location_label%%37 (< layer! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!)))))))))) :pattern ((req%lib!definitions_u.impl&%2.num_entries. self! layer!)))))
(declare-fun ens%lib!definitions_u.impl&%2.num_entries. (lib!definitions_t.ArchExec. Int Int) Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (res! Int)) (! (= (ens%lib!definitions_u.impl&%2.num_entries. self! layer! res!) (and (uInv SZ res!) (= res! (lib!definitions_t.impl&%8.num_entries.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))) :pattern ((ens%lib!definitions_u.impl&%2.num_entries. self! layer! res!)))))
(set-info :comment ";; Function-Specs lib::definitions_u::aligned_exec")
(declare-fun req%lib!definitions_u.aligned_exec. (Int Int) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((addr! Int) (size! Int)) (! (= (req%lib!definitions_u.aligned_exec. addr! size!) (=> %%global_location_label%%38 (> size! 0))) :pattern ((req%lib!definitions_u.aligned_exec. addr! size!)))))
(declare-fun ens%lib!definitions_u.aligned_exec. (Int Int Bool) Bool)
(assert (forall ((addr! Int) (size! Int) (res! Bool)) (! (= (ens%lib!definitions_u.aligned_exec. addr! size! res!) (= res! (lib!definitions_t.aligned.? (I addr!) (I size!)))) :pattern ((ens%lib!definitions_u.aligned_exec. addr! size! res!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!definitions_t.ArchLayerExec.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!definitions_t.Flags.))
(set-info :comment ";; Function-Specs lib::definitions_u::lemma_maxphyaddr_facts")
(declare-fun ens%lib!definitions_u.lemma_maxphyaddr_facts. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!definitions_u.lemma_maxphyaddr_facts. no%param) (let ((tmp%%$ lib!definitions_t.MAX_PHYADDR_SPEC.?)) (and (<= 4294967295 tmp%%$) (<= tmp%%$ 4503599627370495)))) :pattern ((ens%lib!definitions_u.lemma_maxphyaddr_facts. no%param)))))
(set-info :comment ";; Function-Specs lib::definitions_u::overflow_bounds")
(declare-fun ens%lib!definitions_u.overflow_bounds. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!definitions_u.overflow_bounds. no%param) (and (< (Mul lib!definitions_t.X86_MAX_ENTRY_SIZE.? (Add lib!definitions_t.X86_NUM_ENTRIES.? 1)) 18446744073709551616) (< (Add lib!definitions_t.MAX_BASE.? (Mul lib!definitions_t.X86_MAX_ENTRY_SIZE.? (Add lib!definitions_t.X86_NUM_ENTRIES.? 1))) 18446744073709551616))) :pattern ((ens%lib!definitions_u.overflow_bounds. no%param)))))
(set-info :comment ";; Function-Specs lib::definitions_t::ArchExec::next_entry_base")
(declare-fun req%lib!definitions_u.impl&%2.next_entry_base. (lib!definitions_t.ArchExec. Int Int Int) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (idx! Int)) (! (= (req%lib!definitions_u.impl&%2.next_entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%39 (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))) (=> %%global_location_label%%40 (< layer! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))))))) (=> %%global_location_label%%41 (<= base! lib!definitions_t.MAX_BASE.?)) (=> %%global_location_label%%42 (<= idx! lib!definitions_t.X86_NUM_ENTRIES.?)))) :pattern ((req%lib!definitions_u.impl&%2.next_entry_base. self! layer! base! idx!)))))
(declare-fun ens%lib!definitions_u.impl&%2.next_entry_base. (lib!definitions_t.ArchExec. Int Int Int Int) Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (idx! Int) (res! Int)) (! (= (ens%lib!definitions_u.impl&%2.next_entry_base. self! layer! base! idx! res!) (and (uInv SZ res!) (= res! (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))))) :pattern ((ens%lib!definitions_u.impl&%2.next_entry_base. self! layer! base! idx! res!)))))
(set-info :comment ";; Function-Def lib::definitions_t::ArchExec::next_entry_base")
(set-info :comment ";; page-table/definitions_u.rs:169:13: 169:19 (#0)")
(declare-const res! Int)
(declare-const self! lib!definitions_t.ArchExec.)
(declare-const layer! Int)
(declare-const base! Int)
(declare-const idx! Int)
(declare-const es@ Int)
(declare-const tmp%1 Int)
(declare-const offset@ Int)
(assert fuel_defaults)
(assert (uInv SZ idx!))
(assert (<= 0 es@))
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (<= es@ lib!definitions_t.X86_MAX_ENTRY_SIZE.?) (=> (<= idx! lib!definitions_t.X86_NUM_ENTRIES.?) (=> %%location_label%%0 (let ((tmp%%$ (Mul (Add idx! 1) es@))) (and (<= 0 tmp%%$) (<= tmp%%$ (Mul lib!definitions_t.X86_MAX_ENTRY_SIZE.? (Add lib!definitions_t.X86_NUM_ENTRIES.? 1))))))))))
(check-sat)
(exit)
