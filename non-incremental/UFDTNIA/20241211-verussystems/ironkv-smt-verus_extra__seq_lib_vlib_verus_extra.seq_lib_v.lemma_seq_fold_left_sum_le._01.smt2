(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-option :smt.arith.solver 6)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module verus_extra::seq_lib_v'")
(set-info :comment ";; ironsht/src/verus_extra/seq_lib_v.rs:165:5: 165:11 (#0)")
(set-info :comment ";; query spun off because: nonlinear")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.filter. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.filter_lemma. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.filter_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_last. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.fold_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.fold_left_alt. FuelId)
(declare-const fuel%vstd!seq_lib.check_argument_is_seq. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.filter. fuel%vstd!seq_lib.impl&%0.filter_lemma. fuel%vstd!seq_lib.impl&%0.filter_distributes_over_add. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.drop_last. fuel%vstd!seq_lib.impl&%0.fold_left. fuel%vstd!seq_lib.impl&%0.fold_left_alt. fuel%vstd!seq_lib.check_argument_is_seq. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.filter_lemma.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.filter_distributes_over_add.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::drop_last")
(declare-fun vstd!seq_lib.impl&%0.drop_last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::filter")
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.rec%filter.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::fold_left")
(declare-fun vstd!seq_lib.impl&%0.fold_left.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.rec%fold_left.? (Dcr Type Dcr Type Poly Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::fold_left_alt")
(declare-fun vstd!seq_lib.impl&%0.fold_left_alt.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.rec%fold_left_alt.? (Dcr Type Dcr Type Poly Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::skip")
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::check_argument_is_seq")
(declare-fun vstd!seq_lib.check_argument_is_seq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%1 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Specs vstd::function::fun_ext_2")
(declare-fun req%vstd!function.fun_ext_2. (Dcr Type Dcr Type Dcr Type %%Function%% %%Function%%) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (B&. Dcr) (B& Type) (f1! %%Function%%) (f2! %%Function%%)) (! (= (req%vstd!function.fun_ext_2. A1&. A1& A2&. A2& B&. B& f1! f2!) (=> %%global_location_label%%2 (forall ((x1$ Poly) (x2$ Poly)) (! (=> (and (has_type x1$ A1&) (has_type x2$ A2&)) (= (%%apply%%1 f1! x1$ x2$) (%%apply%%1 f2! x1$ x2$))) :pattern ((%%apply%%1 f1! x1$ x2$)))))) :pattern ((req%vstd!function.fun_ext_2. A1&. A1& A2&. A2& B&. B& f1! f2!)))))
(declare-fun ens%vstd!function.fun_ext_2. (Dcr Type Dcr Type Dcr Type %%Function%% %%Function%%) Bool)
(assert (forall ((A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (B&. Dcr) (B& Type) (f1! %%Function%%) (f2! %%Function%%)) (! (= (ens%vstd!function.fun_ext_2. A1&. A1& A2&. A2& B&. B& f1! f2!) (= f1! f2!)) :pattern ((ens%vstd!function.fun_ext_2. A1&. A1& A2&. A2& B&. B& f1! f2!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::drop_last")
(declare-fun req%vstd!seq_lib.impl&%0.drop_last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!) (=> %%global_location_label%%4 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::drop_last")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_last.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%5 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter")
(declare-const fuel_nat%vstd!seq_lib.impl&%0.filter. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly) (fuel% Fuel)) (! (= (vstd!seq_lib.impl&%0.rec%filter.? A&. A& self! pred! fuel%) (vstd!seq_lib.impl&%0.rec%filter.? A&. A& self! pred! zero)) :pattern ((vstd!seq_lib.impl&%0.rec%filter.? A&. A& self! pred! fuel%)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.rec%filter.? A&. A& self! pred! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) self! (let ((subseq$ (vstd!seq_lib.impl&%0.rec%filter.? A&. A& (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) pred! fuel%))) (ite (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.last.? A&. A& self!))) (vstd!seq.Seq.push.? A&. A& subseq$ (vstd!seq.Seq.last.? A&. A& self!)) subseq$))))) :pattern ((vstd!seq_lib.impl&%0.rec%filter.? A&. A& self! pred! (succ fuel%))))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.filter.) (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq_lib.impl&%0.rec%filter.? A&. A& self! pred! (succ fuel_nat%vstd!seq_lib.impl&%0.filter.)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_lemma")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.filter_lemma.) (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.filter_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! pred!) (vstd!seq_lib.impl&%0.filter.? A&. A& b! pred!)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::fold_left")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.fold_left.))
(declare-const fuel_nat%vstd!seq_lib.impl&%0.fold_left. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! zero)) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%)))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) b! (%%apply%%1 (%Poly%fun%2. f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) b! f! fuel%) (vstd!seq.Seq.last.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%))))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.fold_left.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel_nat%vstd!seq_lib.impl&%0.fold_left.)))) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) B&)) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::fold_left_alt")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.fold_left_alt.))
(declare-const fuel_nat%vstd!seq_lib.impl&%0.fold_left_alt. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (= (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! fuel%) (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! zero)) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! fuel%)))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) b! (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& (vstd!seq.Seq.subrange.? A&. A& self! (I 1) (I (vstd!seq.Seq.len.? A&. A& self!))) (%%apply%%1 (%Poly%fun%2. f!) b! (vstd!seq.Seq.index.? A&. A& self! (I 0))) f! fuel%)))) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! (succ fuel%))))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.fold_left_alt.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! f!) (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! (succ fuel_nat%vstd!seq_lib.impl&%0.fold_left_alt.)))) :pattern ((vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! f!) B&)) :pattern ((vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! f!)))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::lemma_fold_left_alt")
(declare-fun ens%vstd!seq_lib.impl&%0.lemma_fold_left_alt. (Dcr Type Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.lemma_fold_left_alt. A&. A& B&. B& self! b! f!) (= (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! (Poly%fun%2. f!)) (vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! (Poly%fun%2. f!)))) :pattern ((ens%vstd!seq_lib.impl&%0.lemma_fold_left_alt. A&. A& B&. B& self! b! f!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::skip")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::check_argument_is_seq")
(assert (fuel_bool_default fuel%vstd!seq_lib.check_argument_is_seq.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.check_argument_is_seq.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) s!) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!))))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_seq_add_subrange")
(declare-fun req%lib!verus_extra.seq_lib_v.lemma_seq_add_subrange. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (j! Int) (k! Int)) (! (= (req%lib!verus_extra.seq_lib_v.lemma_seq_add_subrange. A&. A& s! i! j! k!) (=> %%global_location_label%%6 (and (and (and (<= 0 i!) (<= i! j!)) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%lib!verus_extra.seq_lib_v.lemma_seq_add_subrange. A&. A& s! i! j! k!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_add_subrange. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (j! Int) (k! Int)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_add_subrange. A&. A& s! i! j! k!) (= (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I i!) (I j!)) (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (vstd!seq.Seq.subrange.? A&. A& s! (I i!) (I k!)))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_add_subrange. A&. A& s! i! j! k!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_seq_fold_left_merge_right_assoc")
(declare-fun req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_merge_right_assoc. (Dcr Type Dcr Type Poly Poly %%Function%% %%Function%%) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (init! Poly) (f! %%Function%%) (g! %%Function%%)) (! (= (req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_merge_right_assoc. A&. A& B&. B& s! init! f! g!) (and (=> %%global_location_label%%7 (> (vstd!seq.Seq.len.? A&. A& s!) 0)) (=> %%global_location_label%%8 (forall ((x$ Poly) (y$ Poly) (z$ Poly)) (! (=> (and (has_type x$ B&) (has_type y$ B&) (has_type z$ B&)) (= (%%apply%%1 g! (%%apply%%1 g! x$ y$) z$) (%%apply%%1 g! x$ (%%apply%%1 g! y$ z$)))) :pattern ((%%apply%%1 g! (%%apply%%1 g! x$ y$) z$))))))) :pattern ((req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_merge_right_assoc. A&. A& B&. B& s! init! f! g!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_merge_right_assoc. (Dcr Type Dcr Type Poly Poly %%Function%% %%Function%%) Bool)
(declare-fun %%lambda%%0 (%%Function%% %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (%%hole%%1 %%Function%%) (b$ Poly) (a$ Poly)) (! (= (%%apply%%1 (%%lambda%%0 %%hole%%0 %%hole%%1) b$ a$) (%%apply%%1 %%hole%%1 b$ (%%apply%%0 %%hole%%0 a$))) :pattern ((%%apply%%1 (%%lambda%%0 %%hole%%0 %%hole%%1) b$ a$)))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (init! Poly) (f! %%Function%%) (g! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_merge_right_assoc. A&. A& B&. B& s! init! f! g!) (= (%%apply%%1 g! (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& (vstd!seq.Seq.subrange.? A&. A& s! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& s!) 1))) init! (Poly%fun%2. (mk_fun (%%lambda%%0 f! g!)))) (%%apply%%0 f! (vstd!seq.Seq.index.? A&. A& s! (I (Sub (vstd!seq.Seq.len.? A&. A& s!) 1))))) (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& s! init! (Poly%fun%2. (mk_fun (%%lambda%%0 f! g!)))))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_merge_right_assoc. A&. A& B&. B& s! init! f! g!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_seq_fold_left_sum_right")
(declare-fun req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_right. (Dcr Type Poly Int %%Function%%) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (low! Int) (f! %%Function%%)) (! (= (req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_right. A&. A& s! low! f!) (=> %%global_location_label%%9 (> (vstd!seq.Seq.len.? A&. A& s!) 0))) :pattern ((req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_right. A&. A& s! low! f!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_right. (Dcr Type Poly Int %%Function%%) Bool)
(declare-fun %%lambda%%1 (%%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (b$ Poly) (a$ Poly)) (! (= (%%apply%%1 (%%lambda%%1 %%hole%%0) b$ a$) (I (Add (%I b$) (%I (%%apply%%0 %%hole%%0 a$))))) :pattern ((%%apply%%1 (%%lambda%%1 %%hole%%0) b$ a$)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (low! Int) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_right. A&. A& s! low! f!) (= (Add (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT (vstd!seq.Seq.subrange.? A&. A& s! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& s!) 1))) (I low!) (Poly%fun%2. (mk_fun (%%lambda%%1 f!))))) (%I (%%apply%%0 f! (vstd!seq.Seq.index.? A&. A& s! (I (Sub (vstd!seq.Seq.len.? A&. A& s!) 1)))))) (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT s! (I low!) (Poly%fun%2. (mk_fun (%%lambda%%1 f!))))))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_right. A&. A& s! low! f!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_seq_fold_left_sum_len_int_positive")
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_len_int_positive. (Dcr Type Dcr Type Poly Int %%Function%%) Bool)
(declare-fun %%lambda%%2 (%%Function%% Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (%%hole%%1 Dcr) (%%hole%%2 Type) (acc$ Poly) (x$ Poly)) (! (= (%%apply%%1 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) acc$ x$) (I (Add (%I acc$) (vstd!seq.Seq.len.? %%hole%%1 %%hole%%2 (%%apply%%0 %%hole%%0 x$))))) :pattern ((%%apply%%1 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) acc$ x$)))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (low! Int) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_len_int_positive. A&. A& B&. B& s! low! f!) (>= (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT s! (I low!) (Poly%fun%2. (mk_fun (%%lambda%%2 f! B&. B&))))) 0)) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_len_int_positive. A&. A& B&. B& s! low! f!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_seq_fold_left_append_len_int_le")
(declare-fun req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int_le. (Dcr Type Dcr Type Poly Int Int %%Function%%) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (i! Int) (low! Int) (f! %%Function%%)) (! (= (req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int_le. A&. A& B&. B& s! i! low! f!) (and (=> %%global_location_label%%10 (and (<= 0 i!) (<= i! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%11 (<= 0 low!)))) :pattern ((req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int_le. A&. A& B&. B& s! i! low! f!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int_le. (Dcr Type Dcr Type Poly Int Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (i! Int) (low! Int) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int_le. A&. A& B&. B& s! i! low! f!) (and (>= (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT s! (I low!) (Poly%fun%2. (mk_fun (%%lambda%%2 f! B&. B&))))) 0) (<= (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT (vstd!seq.Seq.subrange.? A&. A& s! (I 0) (I i!)) (I low!) (Poly%fun%2. (mk_fun (%%lambda%%2 f! B&. B&))))) (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT s! (I low!) (Poly%fun%2. (mk_fun (%%lambda%%2 f! B&. B&)))))))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int_le. A&. A& B&. B& s! i! low! f!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_seq_fold_left_append_len_int")
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int. (Dcr Type Dcr Type Poly Poly %%Function%%) Bool)
(declare-fun %%lambda%%3 (%%Function%% Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (%%hole%%1 Dcr) (%%hole%%2 Type) (sb$ Poly) (a$ Poly)) (! (= (%%apply%%1 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) sb$ a$) (vstd!seq.Seq.add.? %%hole%%1 %%hole%%2 sb$ (%%apply%%0 %%hole%%0 a$))) :pattern ((%%apply%%1 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) sb$ a$)))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (prefix! Poly) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int. A&. A& B&. B& s! prefix! f!) (= (vstd!seq.Seq.len.? B&. B& (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ (TYPE%vstd!seq.Seq. B&. B&) s! prefix! (Poly%fun%2. (mk_fun (%%lambda%%3 f! B&. B&))))) (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT s! (I (vstd!seq.Seq.len.? B&. B& prefix!)) (Poly%fun%2. (mk_fun (%%lambda%%2 f! B&. B&))))))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int. A&. A& B&. B& s! prefix! f!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_seq_fold_left_append_right")
(declare-fun req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_right. (Dcr Type Dcr Type Poly Poly %%Function%%) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (prefix! Poly) (f! %%Function%%)) (! (= (req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_right. A&. A& B&. B& s! prefix! f!) (=> %%global_location_label%%12 (> (vstd!seq.Seq.len.? A&. A& s!) 0))) :pattern ((req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_right. A&. A& B&. B& s! prefix! f!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_right. (Dcr Type Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (prefix! Poly) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_right. A&. A& B&. B& s! prefix! f!) (= (vstd!seq.Seq.add.? B&. B& (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ (TYPE%vstd!seq.Seq. B&. B&) (vstd!seq.Seq.subrange.? A&. A& s! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& s!) 1))) prefix! (Poly%fun%2. (mk_fun (%%lambda%%3 f! B&. B&)))) (%%apply%%0 f! (vstd!seq.Seq.index.? A&. A& s! (I (Sub (vstd!seq.Seq.len.? A&. A& s!) 1))))) (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ (TYPE%vstd!seq.Seq. B&. B&) s! prefix! (Poly%fun%2. (mk_fun (%%lambda%%3 f! B&. B&)))))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_right. A&. A& B&. B& s! prefix! f!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_fold_left_append_merge")
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_fold_left_append_merge. (Dcr Type Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s1! Poly) (s2! Poly) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_fold_left_append_merge. A&. A& B&. B& s1! s2! f!) (= (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ (TYPE%vstd!seq.Seq. B&. B&) (vstd!seq.Seq.add.? A&. A& s1! s2!) (vstd!seq.Seq.empty.? B&. B&) (Poly%fun%2. (mk_fun (%%lambda%%3 f! B&. B&)))) (vstd!seq.Seq.add.? B&. B& (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ (TYPE%vstd!seq.Seq. B&. B&) s1! (vstd!seq.Seq.empty.? B&. B&) (Poly%fun%2. (mk_fun (%%lambda%%3 f! B&. B&)))) (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ (TYPE%vstd!seq.Seq. B&. B&) s2! (vstd!seq.Seq.empty.? B&. B&) (Poly%fun%2. (mk_fun (%%lambda%%3 f! B&. B&))))))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_fold_left_append_merge. A&. A& B&. B& s1! s2! f!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_fold_left_on_equiv_seqs")
(declare-fun req%lib!verus_extra.seq_lib_v.lemma_fold_left_on_equiv_seqs. (Dcr Type Dcr Type Poly Poly %%Function%% Poly %%Function%%) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s1! Poly) (s2! Poly) (eq! %%Function%%) (init! Poly) (f! %%Function%%)) (! (= (req%lib!verus_extra.seq_lib_v.lemma_fold_left_on_equiv_seqs. A&. A& B&. B& s1! s2! eq! init! f!) (and (=> %%global_location_label%%13 (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))) (=> %%global_location_label%%14 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (%B (%%apply%%1 eq! (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))) (=> %%global_location_label%%15 (forall ((b$ Poly) (a1$ Poly) (a2$ Poly)) (! (=> (and (has_type b$ B&) (has_type a1$ A&) (has_type a2$ A&)) (=> (%B (%%apply%%1 eq! a1$ a2$)) (= (%%apply%%1 f! b$ a1$) (%%apply%%1 f! b$ a2$)))) :pattern ((%%apply%%1 eq! a1$ a2$) (%%apply%%1 f! b$ a1$))))))) :pattern ((req%lib!verus_extra.seq_lib_v.lemma_fold_left_on_equiv_seqs. A&. A& B&. B& s1! s2! eq! init! f!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_fold_left_on_equiv_seqs. (Dcr Type Dcr Type Poly Poly %%Function%% Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s1! Poly) (s2! Poly) (eq! %%Function%%) (init! Poly) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_fold_left_on_equiv_seqs. A&. A& B&. B& s1! s2! eq! init! f!) (= (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& s1! init! (Poly%fun%2. f!)) (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& s2! init! (Poly%fun%2. f!)))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_fold_left_on_equiv_seqs. A&. A& B&. B& s1! s2! eq! init! f!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::some_differing_index_for_unequal_seqs")
(declare-fun req%lib!verus_extra.seq_lib_v.some_differing_index_for_unequal_seqs. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%lib!verus_extra.seq_lib_v.some_differing_index_for_unequal_seqs. A&. A& s1! s2!) (and (=> %%global_location_label%%16 (not (= s1! s2!))) (=> %%global_location_label%%17 (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((req%lib!verus_extra.seq_lib_v.some_differing_index_for_unequal_seqs. A&. A& s1! s2!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.some_differing_index_for_unequal_seqs. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%lib!verus_extra.seq_lib_v.some_differing_index_for_unequal_seqs. A&. A& s1! s2! i!) (and (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))) (not (= (vstd!seq.Seq.index.? A&. A& s1! (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I i!)))))) :pattern ((ens%lib!verus_extra.seq_lib_v.some_differing_index_for_unequal_seqs. A&. A& s1! s2! i!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_subrange_subrange")
(declare-fun req%lib!verus_extra.seq_lib_v.lemma_subrange_subrange. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (start! Int) (midsize! Int) (endsize! Int)) (! (= (req%lib!verus_extra.seq_lib_v.lemma_subrange_subrange. A&. A& s! start! midsize! endsize!) (and (=> %%global_location_label%%18 (and (<= 0 start!) (<= start! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%19 (and (and (<= 0 midsize!) (<= midsize! endsize!)) (<= endsize! (Sub (vstd!seq.Seq.len.? A&. A& s!) start!)))))) :pattern ((req%lib!verus_extra.seq_lib_v.lemma_subrange_subrange. A&. A& s! start! midsize! endsize!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_subrange_subrange. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (start! Int) (midsize! Int) (endsize! Int)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_subrange_subrange. A&. A& s! start! midsize! endsize!) (= (vstd!seq.Seq.subrange.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I start!) (I (Add start! endsize!))) (I 0) (I midsize!)) (vstd!seq.Seq.subrange.? A&. A& s! (I start!) (I (Add start! midsize!))))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_subrange_subrange. A&. A& s! start! midsize! endsize!)))))
(set-info :comment ";; Function-Specs lib::verus_extra::seq_lib_v::lemma_seq_fold_left_sum_le")
(declare-fun req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_le. (Dcr Type Poly Int Int %%Function%%) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (init! Int) (high! Int) (f! %%Function%%)) (! (= (req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_le. A&. A& s! init! high! f!) (=> %%global_location_label%%20 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s!))) (<= (%I (%%apply%%0 f! (vstd!seq.Seq.index.? A&. A& s! i$))) high!))) :pattern ((vstd!seq.Seq.index.? A&. A& s! i$)))))) :pattern ((req%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_le. A&. A& s! init! high! f!)))))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_le. (Dcr Type Poly Int Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (init! Int) (high! Int) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_le. A&. A& s! init! high! f!) (<= (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT s! (I init!) (Poly%fun%2. (mk_fun (%%lambda%%1 f!))))) (Add init! (Mul (vstd!seq.Seq.len.? A&. A& s!) high!)))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_sum_le. A&. A& s! init! high! f!)))))
(set-info :comment ";; Function-Def lib::verus_extra::seq_lib_v::lemma_seq_fold_left_sum_le")
(set-info :comment ";; ironsht/src/verus_extra/seq_lib_v.rs:165:5: 165:11 (#0)")
(declare-const A&. Dcr)
(declare-const A& Type)
(declare-const s! Poly)
(declare-const init! Int)
(declare-const high! Int)
(declare-const f! %%Function%%)
(declare-const tmp%1 Poly)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (has_type s! (TYPE%vstd!seq.Seq. A&. A&)))
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(assert (not (=> %%location_label%%0 (<= (Add (Add init! (Mul (Sub (vstd!seq.Seq.len.? A&. A& s!) 1) high!)) high!) (Add init! (Mul (vstd!seq.Seq.len.? A&. A& s!) high!))))))
(check-sat)
(exit)
