(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module log::logimpl_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!arithmetic.div_mod.lemma_fundamental_div_mod. FuelId)
(declare-const fuel%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish. FuelId)
(declare-const fuel%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.spec_from_blanket_identity. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_first. FuelId)
(declare-const fuel%vstd!slice.axiom_spec_len. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%lib!log.inv_v.no_outstanding_writes_to_metadata. FuelId)
(declare-const fuel%lib!log.inv_v.no_outstanding_writes_to_active_metadata. FuelId)
(declare-const fuel%lib!log.inv_v.active_metadata_is_equal. FuelId)
(declare-const fuel%lib!log.inv_v.active_metadata_bytes_are_equal. FuelId)
(declare-const fuel%lib!log.inv_v.inactive_metadata_types_set. FuelId)
(declare-const fuel%lib!log.inv_v.memory_matches_deserialized_cdb. FuelId)
(declare-const fuel%lib!log.inv_v.metadata_consistent_with_info. FuelId)
(declare-const fuel%lib!log.inv_v.info_consistent_with_log_area. FuelId)
(declare-const fuel%lib!log.inv_v.info_consistent_with_log_area_in_region. FuelId)
(declare-const fuel%lib!log.inv_v.metadata_types_set. FuelId)
(declare-const fuel%lib!log.inv_v.log_area_offset_unreachable_during_recovery. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA. FuelId)
(declare-const fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE. FuelId)
(declare-const fuel%lib!log.layout_v.LOG_PROGRAM_GUID. FuelId)
(declare-const fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%3.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%3.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%12.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%12.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%21.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%21.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.extract_global_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_global_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_global_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_global_crc. FuelId)
(declare-const fuel%lib!log.layout_v.extract_region_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_region_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_region_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_region_crc. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_and_check_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.get_log_metadata_pos. FuelId)
(declare-const fuel%lib!log.layout_v.get_log_crc_end. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_crc. FuelId)
(declare-const fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset. FuelId)
(declare-const fuel%lib!log.layout_v.log_area_offset_to_relative_log_pos. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_from_log_area. FuelId)
(declare-const fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.recover_log. FuelId)
(declare-const fuel%lib!log.layout_v.recover_given_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.recover_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.recover_state. FuelId)
(declare-const fuel%lib!log.logimpl_t.read_correct_modulo_corruption. FuelId)
(declare-const fuel%lib!log.logimpl_t.can_only_crash_as_state. FuelId)
(declare-const fuel%lib!log.logimpl_v.impl&%0.tentatively_append. FuelId)
(declare-const fuel%lib!log.logimpl_v.impl&%1.recover. FuelId)
(declare-const fuel%lib!log.logimpl_v.impl&%1.inv. FuelId)
(declare-const fuel%lib!log.logimpl_v.impl&%1.view. FuelId)
(declare-const fuel%lib!log.logspec_t.impl&%0.initialize. FuelId)
(declare-const fuel%lib!log.logspec_t.impl&%0.tentatively_append. FuelId)
(declare-const fuel%lib!log.logspec_t.impl&%0.commit. FuelId)
(declare-const fuel%lib!log.logspec_t.impl&%0.advance_head. FuelId)
(declare-const fuel%lib!log.logspec_t.impl&%0.read. FuelId)
(declare-const fuel%lib!log.logspec_t.impl&%0.drop_pending_appends. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.all_elements_unique. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.maybe_corrupted. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.CDB_FALSE. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.CDB_TRUE. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.const_persistence_chunk_size. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.write. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.len. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.write. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.committed. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.can_crash_as. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.extract_bytes. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.axiom_bytes_len. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.axiom_to_from_bytes. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.spec_padding_needed. FuelId)
(declare-const fuel%lib!pmem.subregion_v.get_subregion_view. FuelId)
(declare-const fuel%lib!pmem.subregion_v.memories_differ_only_where_subregion_allows. FuelId)
(declare-const fuel%lib!pmem.subregion_v.views_differ_only_where_subregion_allows. FuelId)
(declare-const fuel%lib!pmem.subregion_v.condition_sufficient_to_create_wrpm_subregion. FuelId)
(declare-const fuel%lib!pmem.subregion_v.impl&%0.is_writable_relative_addr. FuelId)
(declare-const fuel%lib!pmem.subregion_v.impl&%0.inv. FuelId)
(declare-const fuel%lib!util_v.nat_seq_max. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.pmcopy_axioms. FuelId)
(assert (distinct fuel%vstd!arithmetic.div_mod.lemma_fundamental_div_mod. fuel%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish. fuel%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish. fuel%vstd!std_specs.control_flow.spec_from_blanket_identity. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.drop_first. fuel%vstd!slice.axiom_spec_len. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%lib!log.inv_v.no_outstanding_writes_to_metadata. fuel%lib!log.inv_v.no_outstanding_writes_to_active_metadata. fuel%lib!log.inv_v.active_metadata_is_equal. fuel%lib!log.inv_v.active_metadata_bytes_are_equal. fuel%lib!log.inv_v.inactive_metadata_types_set. fuel%lib!log.inv_v.memory_matches_deserialized_cdb. fuel%lib!log.inv_v.metadata_consistent_with_info. fuel%lib!log.inv_v.info_consistent_with_log_area. fuel%lib!log.inv_v.info_consistent_with_log_area_in_region. fuel%lib!log.inv_v.metadata_types_set. fuel%lib!log.inv_v.log_area_offset_unreachable_during_recovery. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA. fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE. fuel%lib!log.layout_v.LOG_PROGRAM_GUID. fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER. fuel%lib!log.layout_v.impl&%3.spec_size_of. fuel%lib!log.layout_v.impl&%3.spec_align_of. fuel%lib!log.layout_v.impl&%12.spec_size_of. fuel%lib!log.layout_v.impl&%12.spec_align_of. fuel%lib!log.layout_v.impl&%21.spec_size_of. fuel%lib!log.layout_v.impl&%21.spec_align_of. fuel%lib!log.layout_v.extract_global_metadata. fuel%lib!log.layout_v.deserialize_global_metadata. fuel%lib!log.layout_v.extract_global_crc. fuel%lib!log.layout_v.deserialize_global_crc. fuel%lib!log.layout_v.extract_region_metadata. fuel%lib!log.layout_v.deserialize_region_metadata. fuel%lib!log.layout_v.extract_region_crc. fuel%lib!log.layout_v.deserialize_region_crc. fuel%lib!log.layout_v.extract_log_cdb. fuel%lib!log.layout_v.deserialize_log_cdb. fuel%lib!log.layout_v.deserialize_and_check_log_cdb. fuel%lib!log.layout_v.get_log_metadata_pos. fuel%lib!log.layout_v.get_log_crc_end. fuel%lib!log.layout_v.extract_log_metadata. fuel%lib!log.layout_v.deserialize_log_metadata. fuel%lib!log.layout_v.extract_log_crc. fuel%lib!log.layout_v.deserialize_log_crc. fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset. fuel%lib!log.layout_v.log_area_offset_to_relative_log_pos. fuel%lib!log.layout_v.extract_log_from_log_area. fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata. fuel%lib!log.layout_v.recover_log. fuel%lib!log.layout_v.recover_given_cdb. fuel%lib!log.layout_v.recover_cdb. fuel%lib!log.layout_v.recover_state. fuel%lib!log.logimpl_t.read_correct_modulo_corruption. fuel%lib!log.logimpl_t.can_only_crash_as_state. fuel%lib!log.logimpl_v.impl&%0.tentatively_append. fuel%lib!log.logimpl_v.impl&%1.recover. fuel%lib!log.logimpl_v.impl&%1.inv. fuel%lib!log.logimpl_v.impl&%1.view. fuel%lib!log.logspec_t.impl&%0.initialize. fuel%lib!log.logspec_t.impl&%0.tentatively_append. fuel%lib!log.logspec_t.impl&%0.commit. fuel%lib!log.logspec_t.impl&%0.advance_head. fuel%lib!log.logspec_t.impl&%0.read. fuel%lib!log.logspec_t.impl&%0.drop_pending_appends. fuel%lib!pmem.pmemspec_t.all_elements_unique. fuel%lib!pmem.pmemspec_t.maybe_corrupted. fuel%lib!pmem.pmemspec_t.CDB_FALSE. fuel%lib!pmem.pmemspec_t.CDB_TRUE. fuel%lib!pmem.pmemspec_t.const_persistence_chunk_size. fuel%lib!pmem.pmemspec_t.impl&%5.write. fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. fuel%lib!pmem.pmemspec_t.impl&%5.flush. fuel%lib!pmem.pmemspec_t.impl&%6.len. fuel%lib!pmem.pmemspec_t.impl&%6.write. fuel%lib!pmem.pmemspec_t.impl&%6.flush. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%6.committed. fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush. fuel%lib!pmem.pmemspec_t.impl&%6.can_crash_as. fuel%lib!pmem.pmemspec_t.extract_bytes. fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc. fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. fuel%lib!pmem.pmcopy_t.axiom_bytes_len. fuel%lib!pmem.pmcopy_t.axiom_to_from_bytes. fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of. fuel%lib!pmem.pmcopy_t.spec_padding_needed. fuel%lib!pmem.subregion_v.get_subregion_view. fuel%lib!pmem.subregion_v.memories_differ_only_where_subregion_allows. fuel%lib!pmem.subregion_v.views_differ_only_where_subregion_allows. fuel%lib!pmem.subregion_v.condition_sufficient_to_create_wrpm_subregion. fuel%lib!pmem.subregion_v.impl&%0.is_writable_relative_addr. fuel%lib!pmem.subregion_v.impl&%0.inv. fuel%lib!util_v.nat_seq_max. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default. fuel%lib!pmem.pmcopy_t.pmcopy_axioms.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.))))
(assert (=> (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!slice.axiom_spec_len.)))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.spec_from_blanket_identity.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(assert (=> (fuel_bool_default fuel%lib!pmem.pmcopy_t.pmcopy_axioms.) (and (fuel_bool_default fuel%lib!pmem.pmcopy_t.axiom_bytes_len.) (fuel_bool_default fuel%lib!pmem.pmcopy_t.axiom_to_from_bytes.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort core!convert.Infallible. 0)
(declare-sort lib!log.logimpl_t.TrustedPermission. 0)
(declare-sort lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<int.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. 0)
(declare-sort slice%<u8.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!ops.control_flow.ControlFlow. 0) (core!option.Option. 0) (core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!log.layout_v.GlobalMetadata. 0) (lib!log.layout_v.RegionMetadata. 0) (lib!log.layout_v.LogMetadata. 0) (lib!log.logimpl_t.LogErr. 0) (lib!log.logimpl_v.LogInfo. 0) (lib!log.logimpl_v.UntrustedLogImpl. 0) (lib!log.logspec_t.AbstractLogState. 0) (lib!pmem.pmemspec_t.PmemError. 0) (lib!pmem.pmemspec_t.PersistentMemoryByte. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionView. 0) (lib!pmem.pmemspec_t.PersistentMemoryConstants. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!ops.control_flow.ControlFlow./Continue (core!ops.control_flow.ControlFlow./Continue/?0 Poly)) (core!ops.control_flow.ControlFlow./Break (core!ops.control_flow.ControlFlow./Break/?0 Poly))) ((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!log.layout_v.GlobalMetadata./GlobalMetadata (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?version_number Int) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?length_of_region_metadata Int) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?program_guid Int))) ((lib!log.layout_v.RegionMetadata./RegionMetadata (lib!log.layout_v.RegionMetadata./RegionMetadata/?region_size Int) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_area_len Int) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_id Int))) ((lib!log.layout_v.LogMetadata./LogMetadata (lib!log.layout_v.LogMetadata./LogMetadata/?log_length Int) (lib!log.layout_v.LogMetadata./LogMetadata/?_padding Int) (lib!log.layout_v.LogMetadata./LogMetadata/?head Int))) ((lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/?required_space Int)) (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/?log_id_expected Int) (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/?log_id_read Int)) (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/?region_size_expected Int) (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/?region_size_read Int)) (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/?version_number Int) (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/?max_supported Int)) (lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents ) (lib!log.logimpl_t.LogErr./CRCMismatch ) (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/?available_space Int)) (lib!log.logimpl_t.LogErr./CantReadBeforeHead (lib!log.logimpl_t.LogErr./CantReadBeforeHead/?head Int)) (lib!log.logimpl_t.LogErr./CantReadPastTail (lib!log.logimpl_t.LogErr./CantReadPastTail/?tail Int)) (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/?head Int)) (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/?tail Int)) (lib!log.logimpl_t.LogErr./PmemErr (lib!log.logimpl_t.LogErr./PmemErr/?err lib!pmem.pmemspec_t.PmemError.))) ((lib!log.logimpl_v.LogInfo./LogInfo (lib!log.logimpl_v.LogInfo./LogInfo/?log_area_len Int) (lib!log.logimpl_v.LogInfo./LogInfo/?head Int) (lib!log.logimpl_v.LogInfo./LogInfo/?head_log_area_offset Int) (lib!log.logimpl_v.LogInfo./LogInfo/?log_length Int) (lib!log.logimpl_v.LogInfo./LogInfo/?log_plus_pending_length Int))) ((lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?cdb Bool) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?info lib!log.logimpl_v.LogInfo.) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?state lib!log.logspec_t.AbstractLogState.))) ((lib!log.logspec_t.AbstractLogState./AbstractLogState (lib!log.logspec_t.AbstractLogState./AbstractLogState/?head Int) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?log vstd!seq.Seq<u8.>.) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?pending vstd!seq.Seq<u8.>.) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?capacity Int))) ((lib!pmem.pmemspec_t.PmemError./InvalidFileName ) (lib!pmem.pmemspec_t.PmemError./CannotOpenPmFile ) (lib!pmem.pmemspec_t.PmemError./NotPm ) (lib!pmem.pmemspec_t.PmemError./PmdkError ) (lib!pmem.pmemspec_t.PmemError./AccessOutOfRange )) ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush Int) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write core!option.Option.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.))) ((lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption Bool))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!ops.control_flow.ControlFlow./Continue/0 (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun core!ops.control_flow.ControlFlow./Break/0 (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/log_length (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/_padding (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/head (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./CantReadBeforeHead/head (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./CantReadPastTail/tail (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./PmemErr/err (lib!log.logimpl_t.LogErr.) lib!pmem.pmemspec_t.PmemError.)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/head (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/log_length (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (lib!log.logimpl_v.UntrustedLogImpl.) Bool)
(declare-fun lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (lib!log.logimpl_v.UntrustedLogImpl.) lib!log.logimpl_v.LogInfo.)
(declare-fun lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (lib!log.logimpl_v.UntrustedLogImpl.) lib!log.logspec_t.AbstractLogState.)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/head (lib!log.logspec_t.AbstractLogState.) Int)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/log (lib!log.logspec_t.AbstractLogState.) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (lib!log.logspec_t.AbstractLogState.) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (lib!log.logspec_t.AbstractLogState.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (lib!pmem.pmemspec_t.PersistentMemoryByte.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (lib!pmem.pmemspec_t.PersistentMemoryByte.) core!option.Option.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (lib!pmem.pmemspec_t.PersistentMemoryConstants.) Bool)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!ops.control_flow.ControlFlow. (Dcr Type Dcr Type) Type)
(declare-const TYPE%core!convert.Infallible. Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!log.layout_v.GlobalMetadata. Type)
(declare-const TYPE%lib!log.layout_v.RegionMetadata. Type)
(declare-const TYPE%lib!log.layout_v.LogMetadata. Type)
(declare-const TYPE%lib!log.logimpl_t.TrustedPermission. Type)
(declare-const TYPE%lib!log.logimpl_t.LogErr. Type)
(declare-const TYPE%lib!log.logimpl_v.LogInfo. Type)
(declare-const TYPE%lib!log.logimpl_v.UntrustedLogImpl. Type)
(declare-const TYPE%lib!log.logspec_t.AbstractLogState. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PmemError. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants. Type)
(declare-const TYPE%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Type)
(declare-fun TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%core!convert.Infallible. (core!convert.Infallible.) Poly)
(declare-fun %Poly%core!convert.Infallible. (Poly) core!convert.Infallible.)
(declare-fun Poly%lib!log.logimpl_t.TrustedPermission. (lib!log.logimpl_t.TrustedPermission.) Poly)
(declare-fun %Poly%lib!log.logimpl_t.TrustedPermission. (Poly) lib!log.logimpl_t.TrustedPermission.)
(declare-fun Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. (lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) Poly)
(declare-fun %Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. (Poly) lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq<int.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<int.>. (Poly) vstd!seq.Seq<int.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun Poly%slice%<u8.>. (slice%<u8.>.) Poly)
(declare-fun %Poly%slice%<u8.>. (Poly) slice%<u8.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun %Poly%core!ops.control_flow.ControlFlow. (Poly) core!ops.control_flow.ControlFlow.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.GlobalMetadata. (Poly) lib!log.layout_v.GlobalMetadata.)
(declare-fun Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.RegionMetadata. (Poly) lib!log.layout_v.RegionMetadata.)
(declare-fun Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.LogMetadata. (Poly) lib!log.layout_v.LogMetadata.)
(declare-fun Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr.) Poly)
(declare-fun %Poly%lib!log.logimpl_t.LogErr. (Poly) lib!log.logimpl_t.LogErr.)
(declare-fun Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.LogInfo.) Poly)
(declare-fun %Poly%lib!log.logimpl_v.LogInfo. (Poly) lib!log.logimpl_v.LogInfo.)
(declare-fun Poly%lib!log.logimpl_v.UntrustedLogImpl. (lib!log.logimpl_v.UntrustedLogImpl.) Poly)
(declare-fun %Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly) lib!log.logimpl_v.UntrustedLogImpl.)
(declare-fun Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.AbstractLogState.) Poly)
(declare-fun %Poly%lib!log.logspec_t.AbstractLogState. (Poly) lib!log.logspec_t.AbstractLogState.)
(declare-fun Poly%lib!pmem.pmemspec_t.PmemError. (lib!pmem.pmemspec_t.PmemError.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PmemError. (Poly) lib!pmem.pmemspec_t.PmemError.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryConstants.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly) lib!pmem.pmemspec_t.PersistentMemoryConstants.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))))))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))))))
(assert (forall ((x core!convert.Infallible.)) (! (= x (%Poly%core!convert.Infallible. (Poly%core!convert.Infallible. x))) :pattern ((Poly%core!convert.Infallible. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%core!convert.Infallible.) (= x (Poly%core!convert.Infallible. (%Poly%core!convert.Infallible. x)))) :pattern ((has_type x TYPE%core!convert.Infallible.)))))
(assert (forall ((x core!convert.Infallible.)) (! (has_type (Poly%core!convert.Infallible. x) TYPE%core!convert.Infallible.) :pattern ((has_type (Poly%core!convert.Infallible. x) TYPE%core!convert.Infallible.)))))
(assert (forall ((x lib!log.logimpl_t.TrustedPermission.)) (! (= x (%Poly%lib!log.logimpl_t.TrustedPermission. (Poly%lib!log.logimpl_t.TrustedPermission. x))) :pattern ((Poly%lib!log.logimpl_t.TrustedPermission. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.TrustedPermission.) (= x (Poly%lib!log.logimpl_t.TrustedPermission. (%Poly%lib!log.logimpl_t.TrustedPermission. x)))) :pattern ((has_type x TYPE%lib!log.logimpl_t.TrustedPermission.)))))
(assert (forall ((x lib!log.logimpl_t.TrustedPermission.)) (! (has_type (Poly%lib!log.logimpl_t.TrustedPermission. x) TYPE%lib!log.logimpl_t.TrustedPermission.) :pattern ((has_type (Poly%lib!log.logimpl_t.TrustedPermission. x) TYPE%lib!log.logimpl_t.TrustedPermission.)))))
(assert (forall ((x lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.)) (! (= x (%Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. x))) :pattern ((Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (= x (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. (%Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. x)))) :pattern ((has_type x TYPE%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.)))))
(assert (forall ((x lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.)) (! (has_type (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. x) TYPE%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) :pattern ((has_type (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. x) TYPE%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<int.>.)) (! (= x (%Poly%vstd!seq.Seq<int.>. (Poly%vstd!seq.Seq<int.>. x))) :pattern ((Poly%vstd!seq.Seq<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ INT)) (= x (Poly%vstd!seq.Seq<int.>. (%Poly%vstd!seq.Seq<int.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ INT))))))
(assert (forall ((x vstd!seq.Seq<int.>.)) (! (has_type (Poly%vstd!seq.Seq<int.>. x) (TYPE%vstd!seq.Seq. $ INT)) :pattern ((has_type (Poly%vstd!seq.Seq<int.>. x) (TYPE%vstd!seq.Seq. $ INT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))))))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))))))
(assert (forall ((x slice%<u8.>.)) (! (= x (%Poly%slice%<u8.>. (Poly%slice%<u8.>. x))) :pattern ((Poly%slice%<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (SLICE $ (UINT 8))) (= x (Poly%slice%<u8.>. (%Poly%slice%<u8.>. x)))) :pattern ((has_type x (SLICE $ (UINT 8)))))))
(assert (forall ((x slice%<u8.>.)) (! (has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8))) :pattern ((has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8)))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= x (%Poly%core!ops.control_flow.ControlFlow. (Poly%core!ops.control_flow.ControlFlow. x))) :pattern ((Poly%core!ops.control_flow.ControlFlow. x)))))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (= x (Poly%core!ops.control_flow.ControlFlow. (%Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))))))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (_0! Poly)) (! (=> (has_type _0! C&) (has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Continue _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Continue _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))))))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= (core!ops.control_flow.ControlFlow./Continue/0 x) (core!ops.control_flow.ControlFlow./Continue/?0 x)) :pattern ((core!ops.control_flow.ControlFlow./Continue/0 x)))))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (has_type (core!ops.control_flow.ControlFlow./Continue/0 (%Poly%core!ops.control_flow.ControlFlow. x)) C&)) :pattern ((core!ops.control_flow.ControlFlow./Continue/0 (%Poly%core!ops.control_flow.ControlFlow. x)) (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))))))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (_0! Poly)) (! (=> (has_type _0! B&) (has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Break _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Break _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))))))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= (core!ops.control_flow.ControlFlow./Break/0 x) (core!ops.control_flow.ControlFlow./Break/?0 x)) :pattern ((core!ops.control_flow.ControlFlow./Break/0 x)))))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (has_type (core!ops.control_flow.ControlFlow./Break/0 (%Poly%core!ops.control_flow.ControlFlow. x)) B&)) :pattern ((core!ops.control_flow.ControlFlow./Break/0 (%Poly%core!ops.control_flow.ControlFlow. x)) (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))))))
(define-fun is-core!ops.control_flow.ControlFlow./Continue_ ((c core!ops.control_flow.ControlFlow.)) Bool ((_ is core!ops.control_flow.ControlFlow./Continue) c))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (=> (is-core!ops.control_flow.ControlFlow./Continue_ x) (height_lt (height (core!ops.control_flow.ControlFlow./Continue/0 x)) (height (Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((height (core!ops.control_flow.ControlFlow./Continue/0 x))))))
(define-fun is-core!ops.control_flow.ControlFlow./Break_ ((c core!ops.control_flow.ControlFlow.)) Bool ((_ is core!ops.control_flow.ControlFlow./Break) c))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (=> (is-core!ops.control_flow.ControlFlow./Break_ x) (height_lt (height (core!ops.control_flow.ControlFlow./Break/0 x)) (height (Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((height (core!ops.control_flow.ControlFlow./Break/0 x))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= x (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. x))) :pattern ((Poly%lib!log.layout_v.GlobalMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (= x (Poly%lib!log.layout_v.GlobalMetadata. (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((_version_number! Int) (_length_of_region_metadata! Int) (_program_guid! Int)) (! (=> (and (uInv 64 _version_number!) (uInv 64 _length_of_region_metadata!) (uInv 128 _program_guid!)) (has_type (Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata./GlobalMetadata _version_number! _length_of_region_metadata! _program_guid!)) TYPE%lib!log.layout_v.GlobalMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata./GlobalMetadata _version_number! _length_of_region_metadata! _program_guid!)) TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?version_number x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 64 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?length_of_region_metadata x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 64 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?program_guid x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 128 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= x (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. x))) :pattern ((Poly%lib!log.layout_v.RegionMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (= x (Poly%lib!log.layout_v.RegionMetadata. (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((_region_size! Int) (_log_area_len! Int) (_log_id! Int)) (! (=> (and (uInv 64 _region_size!) (uInv 64 _log_area_len!) (uInv 128 _log_id!)) (has_type (Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata./RegionMetadata _region_size! _log_area_len! _log_id!)) TYPE%lib!log.layout_v.RegionMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata./RegionMetadata _region_size! _log_area_len! _log_id!)) TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?region_size x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/region_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 64 (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_area_len x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 64 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_id x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 128 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= x (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. x))) :pattern ((Poly%lib!log.layout_v.LogMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (= x (Poly%lib!log.layout_v.LogMetadata. (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((_log_length! Int) (__padding! Int) (_head! Int)) (! (=> (and (uInv 64 _log_length!) (uInv 64 __padding!) (uInv 128 _head!)) (has_type (Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata./LogMetadata _log_length! __padding! _head!)) TYPE%lib!log.layout_v.LogMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata./LogMetadata _log_length! __padding! _head!)) TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/log_length x) (lib!log.layout_v.LogMetadata./LogMetadata/?log_length x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/log_length x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 64 (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/_padding x) (lib!log.layout_v.LogMetadata./LogMetadata/?_padding x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/_padding x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 64 (lib!log.layout_v.LogMetadata./LogMetadata/_padding (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/_padding (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/head x) (lib!log.layout_v.LogMetadata./LogMetadata/?head x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 128 (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= x (%Poly%lib!log.logimpl_t.LogErr. (Poly%lib!log.logimpl_t.LogErr. x))) :pattern ((Poly%lib!log.logimpl_t.LogErr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (= x (Poly%lib!log.logimpl_t.LogErr. (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_required_space! Int)) (! (=> (uInv 64 _required_space!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup _required_space!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup _required_space!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space x) (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/?required_space x)) :pattern ((lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_log_id_expected! Int) (_log_id_read! Int)) (! (=> (and (uInv 128 _log_id_expected!) (uInv 128 _log_id_read!)) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch _log_id_expected! _log_id_read!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch _log_id_expected! _log_id_read!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected x) (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/?log_id_expected x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read x) (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/?log_id_read x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_region_size_expected! Int) (_region_size_read! Int)) (! (=> (and (uInv 64 _region_size_expected!) (uInv 64 _region_size_read!)) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch _region_size_expected! _region_size_read!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch _region_size_expected! _region_size_read!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected x) (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/?region_size_expected x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read x) (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/?region_size_read x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_version_number! Int) (_max_supported! Int)) (! (=> (and (uInv 64 _version_number!) (uInv 64 _max_supported!)) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported _version_number! _max_supported!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported _version_number! _max_supported!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number x) (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/?version_number x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported x) (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/?max_supported x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (has_type (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents) TYPE%lib!log.logimpl_t.LogErr.))
(assert (has_type (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./CRCMismatch) TYPE%lib!log.logimpl_t.LogErr.))
(assert (forall ((_available_space! Int)) (! (=> (uInv 64 _available_space!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend _available_space!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend _available_space!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space x) (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/?available_space x)) :pattern ((lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_head! Int)) (! (=> (uInv 128 _head!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantReadBeforeHead _head!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantReadBeforeHead _head!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./CantReadBeforeHead/head x) (lib!log.logimpl_t.LogErr./CantReadBeforeHead/?head x)) :pattern ((lib!log.logimpl_t.LogErr./CantReadBeforeHead/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./CantReadBeforeHead/head (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./CantReadBeforeHead/head (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_tail! Int)) (! (=> (uInv 128 _tail!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantReadPastTail _tail!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantReadPastTail _tail!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./CantReadPastTail/tail x) (lib!log.logimpl_t.LogErr./CantReadPastTail/?tail x)) :pattern ((lib!log.logimpl_t.LogErr./CantReadPastTail/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./CantReadPastTail/tail (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./CantReadPastTail/tail (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_head! Int)) (! (=> (uInv 128 _head!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead _head!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead _head!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head x) (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/?head x)) :pattern ((lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_tail! Int)) (! (=> (uInv 128 _tail!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail _tail!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail _tail!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail x) (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/?tail x)) :pattern ((lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_err! lib!pmem.pmemspec_t.PmemError.)) (! (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./PmemErr _err!)) TYPE%lib!log.logimpl_t.LogErr.) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./PmemErr _err!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./PmemErr/err x) (lib!log.logimpl_t.LogErr./PmemErr/?err x)) :pattern ((lib!log.logimpl_t.LogErr./PmemErr/err x)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= x (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. x))) :pattern ((Poly%lib!log.logimpl_v.LogInfo. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (= x (Poly%lib!log.logimpl_v.LogInfo. (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((_log_area_len! Int) (_head! Int) (_head_log_area_offset! Int) (_log_length! Int) (_log_plus_pending_length! Int)) (! (=> (and (uInv 64 _log_area_len!) (uInv 128 _head!) (uInv 64 _head_log_area_offset!) (uInv 64 _log_length!) (uInv 64 _log_plus_pending_length!)) (has_type (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.LogInfo./LogInfo _log_area_len! _head! _head_log_area_offset! _log_length! _log_plus_pending_length!)) TYPE%lib!log.logimpl_v.LogInfo.)) :pattern ((has_type (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.LogInfo./LogInfo _log_area_len! _head! _head_log_area_offset! _log_length! _log_plus_pending_length!)) TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len x) (lib!log.logimpl_v.LogInfo./LogInfo/?log_area_len x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_area_len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 64 (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/head x) (lib!log.logimpl_v.LogInfo./LogInfo/?head x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 128 (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset x) (lib!log.logimpl_v.LogInfo./LogInfo/?head_log_area_offset x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 64 (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/log_length x) (lib!log.logimpl_v.LogInfo./LogInfo/?log_length x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_length x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 64 (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length x) (lib!log.logimpl_v.LogInfo./LogInfo/?log_plus_pending_length x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 64 (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.UntrustedLogImpl.)) (! (= x (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. x))) :pattern ((Poly%lib!log.logimpl_v.UntrustedLogImpl. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.UntrustedLogImpl.) (= x (Poly%lib!log.logimpl_v.UntrustedLogImpl. (%Poly%lib!log.logimpl_v.UntrustedLogImpl. x)))) :pattern ((has_type x TYPE%lib!log.logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((_cdb! Bool) (_info! lib!log.logimpl_v.LogInfo.) (_state! lib!log.logspec_t.AbstractLogState.)) (! (=> (has_type (Poly%lib!log.logimpl_v.LogInfo. _info!) TYPE%lib!log.logimpl_v.LogInfo.) (has_type (Poly%lib!log.logimpl_v.UntrustedLogImpl. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl _cdb! _info! _state!)) TYPE%lib!log.logimpl_v.UntrustedLogImpl.)) :pattern ((has_type (Poly%lib!log.logimpl_v.UntrustedLogImpl. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl _cdb! _info! _state!)) TYPE%lib!log.logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((x lib!log.logimpl_v.UntrustedLogImpl.)) (! (= (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb x) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?cdb x)) :pattern ((lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb x)))))
(assert (forall ((x lib!log.logimpl_v.UntrustedLogImpl.)) (! (= (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info x) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?info x)) :pattern ((lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.UntrustedLogImpl.) (has_type (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. x))) TYPE%lib!log.logimpl_v.LogInfo.)) :pattern ((lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. x)) (has_type x TYPE%lib!log.logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((x lib!log.logimpl_v.UntrustedLogImpl.)) (! (= (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state x) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?state x)) :pattern ((lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= x (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. x))) :pattern ((Poly%lib!log.logspec_t.AbstractLogState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logspec_t.AbstractLogState.) (= x (Poly%lib!log.logspec_t.AbstractLogState. (%Poly%lib!log.logspec_t.AbstractLogState. x)))) :pattern ((has_type x TYPE%lib!log.logspec_t.AbstractLogState.)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/head x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?head x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/head x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/log x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?log x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/log x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?pending x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/pending x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?capacity x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (has_type (Poly%lib!log.logspec_t.AbstractLogState. x) TYPE%lib!log.logspec_t.AbstractLogState.) :pattern ((has_type (Poly%lib!log.logspec_t.AbstractLogState. x) TYPE%lib!log.logspec_t.AbstractLogState.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!log.logspec_t.AbstractLogState.) (has_type y TYPE%lib!log.logspec_t.AbstractLogState.) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. x)) (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. x))) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. x))) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. x)) (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (ext_eq deep TYPE%lib!log.logspec_t.AbstractLogState. x y)) :pattern ((ext_eq deep TYPE%lib!log.logspec_t.AbstractLogState. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PmemError.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PmemError. (Poly%lib!pmem.pmemspec_t.PmemError. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PmemError. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PmemError.) (= x (Poly%lib!pmem.pmemspec_t.PmemError. (%Poly%lib!pmem.pmemspec_t.PmemError. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PmemError.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PmemError.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PmemError. x) TYPE%lib!pmem.pmemspec_t.PmemError.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PmemError. x) TYPE%lib!pmem.pmemspec_t.PmemError.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((_state_at_last_flush! Int) (_outstanding_write! core!option.Option.)) (! (=> (and (uInv 8 _state_at_last_flush!) (has_type (Poly%core!option.Option. _outstanding_write!) (TYPE%core!option.Option. $ (UINT 8)))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (TYPE%core!option.Option. $ (UINT 8)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))) (ext_eq deep (TYPE%core!option.Option. $ (UINT 8)) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x) (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%2 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%2 Fn i) T)) :pattern ((has_type (%%apply%%2 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%2 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%2 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%core!convert.From. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopy. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.SpecPmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.wrpm_t.CheckPermission. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSafe. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%core!convert.From. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&) (and (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (State&. Dcr) (State& Type)) (! true :pattern ((tr_bound%lib!pmem.wrpm_t.CheckPermission. Self%&. Self%& State&. State&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT 128)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 128)) (UINT 128)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::len")
(declare-fun lib!pmem.pmemspec_t.impl&%6.len.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::SpecPmSized::spec_size_of")
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::SpecPmSized::spec_align_of")
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_align_of%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes_in_range")
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::spec_to_bytes")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::spec_from_bytes")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::bytes_parseable")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::spec_crc")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_crc%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::committed")
(declare-fun lib!pmem.pmemspec_t.impl&%6.committed.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::maybe_corrupted_byte")
(declare-fun lib!pmem.pmemspec_t.maybe_corrupted_byte.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::maybe_corrupted")
(declare-fun lib!pmem.pmemspec_t.maybe_corrupted.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::write")
(declare-fun lib!pmem.pmemspec_t.impl&%5.write.? (Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::write")
(declare-fun lib!pmem.pmemspec_t.impl&%6.write.? (Poly Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::flush_byte")
(declare-fun lib!pmem.pmemspec_t.impl&%5.flush_byte.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::flush")
(declare-fun lib!pmem.pmemspec_t.impl&%5.flush.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::flush")
(declare-fun lib!pmem.pmemspec_t.impl&%6.flush.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::control_flow::spec_from")
(declare-fun vstd!std_specs.control_flow.spec_from.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::drop_first")
(declare-fun vstd!seq_lib.impl&%0.drop_first.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::slice::spec_slice_len")
(declare-fun vstd!slice.spec_slice_len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegion::view")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegion::inv")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.inv%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegion::constants")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.constants%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes")
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::spec_crc_u64")
(declare-fun lib!pmem.pmemspec_t.spec_crc_u64.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::all_elements_unique")
(declare-fun lib!pmem.pmemspec_t.all_elements_unique.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::CDB_FALSE")
(declare-fun lib!pmem.pmemspec_t.CDB_FALSE.? () Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::CDB_TRUE")
(declare-fun lib!pmem.pmemspec_t.CDB_TRUE.? () Int)
(set-info :comment ";; Function-Decl lib::pmem::wrpm_t::CheckPermission::check_permission")
(declare-fun lib!pmem.wrpm_t.CheckPermission.check_permission.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.wrpm_t.CheckPermission.check_permission%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_GLOBAL_METADATA")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_LOG_AREA")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? () Int)
(set-info :comment ";; Function-Decl lib::log::inv_v::no_outstanding_writes_to_metadata")
(declare-fun lib!log.inv_v.no_outstanding_writes_to_metadata.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? () Int)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::spec_padding_needed")
(declare-fun lib!pmem.pmcopy_t.spec_padding_needed.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::log::inv_v::no_outstanding_writes_to_active_metadata")
(declare-fun lib!log.inv_v.no_outstanding_writes_to_active_metadata.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::extract_bytes")
(declare-fun lib!pmem.pmemspec_t.extract_bytes.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_LOG_CDB")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::extract_log_cdb")
(declare-fun lib!log.layout_v.extract_log_cdb.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::deserialize_log_cdb")
(declare-fun lib!log.layout_v.deserialize_log_cdb.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::deserialize_and_check_log_cdb")
(declare-fun lib!log.layout_v.deserialize_and_check_log_cdb.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::log::inv_v::active_metadata_bytes_are_equal")
(declare-fun lib!log.inv_v.active_metadata_bytes_are_equal.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::inv_v::active_metadata_is_equal")
(declare-fun lib!log.inv_v.active_metadata_is_equal.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::util_v::nat_seq_max")
(declare-fun lib!util_v.nat_seq_max.? (Poly) Int)
(declare-fun lib!util_v.rec%nat_seq_max.? (Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? () Int)
(set-info :comment ";; Function-Decl lib::log::inv_v::inactive_metadata_types_set")
(declare-fun lib!log.inv_v.inactive_metadata_types_set.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::inv_v::memory_matches_deserialized_cdb")
(declare-fun lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::layout_v::extract_global_metadata")
(declare-fun lib!log.layout_v.extract_global_metadata.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::deserialize_global_metadata")
(declare-fun lib!log.layout_v.deserialize_global_metadata.? (Poly) lib!log.layout_v.GlobalMetadata.)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_GLOBAL_CRC")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::extract_global_crc")
(declare-fun lib!log.layout_v.extract_global_crc.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::deserialize_global_crc")
(declare-fun lib!log.layout_v.deserialize_global_crc.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_REGION_METADATA")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::extract_region_metadata")
(declare-fun lib!log.layout_v.extract_region_metadata.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::deserialize_region_metadata")
(declare-fun lib!log.layout_v.deserialize_region_metadata.? (Poly) lib!log.layout_v.RegionMetadata.)
(set-info :comment ";; Function-Decl lib::log::layout_v::ABSOLUTE_POS_OF_REGION_CRC")
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::extract_region_crc")
(declare-fun lib!log.layout_v.extract_region_crc.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::deserialize_region_crc")
(declare-fun lib!log.layout_v.deserialize_region_crc.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::get_log_metadata_pos")
(declare-fun lib!log.layout_v.get_log_metadata_pos.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::extract_log_metadata")
(declare-fun lib!log.layout_v.extract_log_metadata.? (Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::deserialize_log_metadata")
(declare-fun lib!log.layout_v.deserialize_log_metadata.? (Poly Poly) lib!log.layout_v.LogMetadata.)
(set-info :comment ";; Function-Decl lib::log::layout_v::extract_log_crc")
(declare-fun lib!log.layout_v.extract_log_crc.? (Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::deserialize_log_crc")
(declare-fun lib!log.layout_v.deserialize_log_crc.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::get_log_crc_end")
(declare-fun lib!log.layout_v.get_log_crc_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::LOG_PROGRAM_GUID")
(declare-fun lib!log.layout_v.LOG_PROGRAM_GUID.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::LOG_PROGRAM_VERSION_NUMBER")
(declare-fun lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.? () Int)
(set-info :comment ";; Function-Decl lib::log::inv_v::metadata_consistent_with_info")
(declare-fun lib!log.inv_v.metadata_consistent_with_info.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::layout_v::MIN_LOG_AREA_SIZE")
(declare-fun lib!log.layout_v.MIN_LOG_AREA_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::log::layout_v::relative_log_pos_to_log_area_offset")
(declare-fun lib!log.layout_v.relative_log_pos_to_log_area_offset.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::log::inv_v::info_consistent_with_log_area")
(declare-fun lib!log.inv_v.info_consistent_with_log_area.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::get_subregion_view")
(declare-fun lib!pmem.subregion_v.get_subregion_view.? (Poly Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::log::inv_v::info_consistent_with_log_area_in_region")
(declare-fun lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::inv_v::metadata_types_set")
(declare-fun lib!log.inv_v.metadata_types_set.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::layout_v::log_area_offset_to_relative_log_pos")
(declare-fun lib!log.layout_v.log_area_offset_to_relative_log_pos.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::log::inv_v::log_area_offset_unreachable_during_recovery")
(declare-fun lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::layout_v::extract_log_from_log_area")
(declare-fun lib!log.layout_v.extract_log_from_log_area.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::log::layout_v::recover_log_from_log_area_given_metadata")
(declare-fun lib!log.layout_v.recover_log_from_log_area_given_metadata.? (Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::log::layout_v::recover_log")
(declare-fun lib!log.layout_v.recover_log.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::log::layout_v::recover_given_cdb")
(declare-fun lib!log.layout_v.recover_given_cdb.? (Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::log::layout_v::recover_cdb")
(declare-fun lib!log.layout_v.recover_cdb.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::log::layout_v::recover_state")
(declare-fun lib!log.layout_v.recover_state.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::log::logimpl_t::read_correct_modulo_corruption")
(declare-fun lib!log.logimpl_t.read_correct_modulo_corruption.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::const_persistence_chunk_size")
(declare-fun lib!pmem.pmemspec_t.const_persistence_chunk_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::chunk_corresponds_ignoring_outstanding_writes")
(declare-fun lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::chunk_corresponds_after_flush")
(declare-fun lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::can_crash_as")
(declare-fun lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::logimpl_v::UntrustedLogImpl::recover")
(declare-fun lib!log.logimpl_v.impl&%1.recover.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::log::logimpl_t::can_only_crash_as_state")
(declare-fun lib!log.logimpl_t.can_only_crash_as_state.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::logimpl_v::UntrustedLogImpl::view")
(declare-fun lib!log.logimpl_v.impl&%1.view.? (Poly) lib!log.logspec_t.AbstractLogState.)
(set-info :comment ";; Function-Decl lib::pmem::wrpm_t::WriteRestrictedPersistentMemoryRegion::constants")
(declare-fun lib!pmem.wrpm_t.impl&%1.constants.? (Dcr Type Dcr Type Poly) lib!pmem.pmemspec_t.PersistentMemoryConstants.)
(set-info :comment ";; Function-Decl lib::pmem::wrpm_t::WriteRestrictedPersistentMemoryRegion::inv")
(declare-fun lib!pmem.wrpm_t.impl&%1.inv.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::wrpm_t::WriteRestrictedPersistentMemoryRegion::view")
(declare-fun lib!pmem.wrpm_t.impl&%1.view.? (Dcr Type Dcr Type Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::log::logspec_t::AbstractLogState::drop_pending_appends")
(declare-fun lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly) lib!log.logspec_t.AbstractLogState.)
(set-info :comment ";; Function-Decl lib::log::logimpl_v::UntrustedLogImpl::inv")
(declare-fun lib!log.logimpl_v.impl&%1.inv.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::log::logimpl_v::LogInfo::tentatively_append")
(declare-fun lib!log.logimpl_v.impl&%0.tentatively_append.? (Poly Poly) lib!log.logimpl_v.LogInfo.)
(set-info :comment ";; Function-Decl lib::log::logspec_t::AbstractLogState::initialize")
(declare-fun lib!log.logspec_t.impl&%0.initialize.? (Poly) lib!log.logspec_t.AbstractLogState.)
(set-info :comment ";; Function-Decl lib::log::logspec_t::AbstractLogState::tentatively_append")
(declare-fun lib!log.logspec_t.impl&%0.tentatively_append.? (Poly Poly) lib!log.logspec_t.AbstractLogState.)
(set-info :comment ";; Function-Decl lib::log::logspec_t::AbstractLogState::commit")
(declare-fun lib!log.logspec_t.impl&%0.commit.? (Poly) lib!log.logspec_t.AbstractLogState.)
(set-info :comment ";; Function-Decl lib::log::logspec_t::AbstractLogState::advance_head")
(declare-fun lib!log.logspec_t.impl&%0.advance_head.? (Poly Poly) lib!log.logspec_t.AbstractLogState.)
(set-info :comment ";; Function-Decl lib::log::logspec_t::AbstractLogState::read")
(declare-fun lib!log.logspec_t.impl&%0.read.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::memories_differ_only_where_subregion_allows")
(declare-fun lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::views_differ_only_where_subregion_allows")
(declare-fun lib!pmem.subregion_v.views_differ_only_where_subregion_allows.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::condition_sufficient_to_create_wrpm_subregion")
(declare-fun lib!pmem.subregion_v.condition_sufficient_to_create_wrpm_subregion.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::constants")
(declare-fun lib!pmem.subregion_v.impl&%0.constants.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryConstants.)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::start")
(declare-fun lib!pmem.subregion_v.impl&%0.start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::len")
(declare-fun lib!pmem.subregion_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::initial_region_view")
(declare-fun lib!pmem.subregion_v.impl&%0.initial_region_view.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::is_writable_absolute_addr_fn")
(declare-fun lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::is_writable_relative_addr")
(declare-fun lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::initial_subregion_view")
(declare-fun lib!pmem.subregion_v.impl&%0.initial_subregion_view.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::view")
(declare-fun lib!pmem.subregion_v.impl&%0.view.? (Dcr Type Dcr Type Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::opaque_inv")
(declare-fun lib!pmem.subregion_v.impl&%0.opaque_inv.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::inv")
(declare-fun lib!pmem.subregion_v.impl&%0.inv.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::len")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.len.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.len.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (<= 0 (lib!pmem.pmemspec_t.impl&%6.len.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::SpecPmSized::spec_size_of")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::SpecPmSized::spec_align_of")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes_in_range")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.) (forall ((self! Poly) (i! Poly) (j! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (<= (%I i!) (%I k$)) (< (%I k$) (%I j!))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$)))))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::spec_to_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::spec_from_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!) Self%&)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::bytes_parseable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!) BOOL)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::spec_crc")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? Self%&. Self%& self!) (UINT 64))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%0::T::bytes_parseable")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.) (forall ((T&. Dcr) (T& Type) (bytes! Poly)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (= (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!) (B (= (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? T&. T& (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? T&. T& bytes!)) bytes!)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%3 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%0 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::committed")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.committed.))
(declare-fun %%lambda%%1 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%1 _addr$ b$) (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. b$)))) :pattern ((%%apply%%1 %%lambda%%1 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.committed.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.committed.? self!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ (UINT 8) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%1))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.committed.? self!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::maybe_corrupted")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.maybe_corrupted.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.maybe_corrupted.) (forall ((bytes! Poly) (true_bytes! Poly) (addrs! Poly)) (! (= (lib!pmem.pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs!) (and (let ((tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) true_bytes!))) (and (= (vstd!seq.Seq.len.? $ (UINT 8) bytes!) tmp%%$) (= tmp%%$ (vstd!seq.Seq.len.? $ INT addrs!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (UINT 8) bytes!))) (lib!pmem.pmemspec_t.maybe_corrupted_byte.? (vstd!seq.Seq.index.? $ (UINT 8) bytes! i$) (vstd!seq.Seq.index.? $ (UINT 8) true_bytes! i$) (vstd!seq.Seq.index.? $ INT addrs! i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) bytes! i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) true_bytes! i$)) :pattern ((vstd!seq.Seq.index.? $ INT addrs! i$)))))) :pattern ((lib!pmem.pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::write")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.write.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.write.) (forall ((self! Poly) (byte! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.write.? self! byte!) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (%I (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some byte!))))) :pattern ((lib!pmem.pmemspec_t.impl&%5.write.? self! byte!))))))
(assert (forall ((self! Poly) (byte! Poly)) (! (=> (and (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type byte! (UINT 8))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.write.? self! byte!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((lib!pmem.pmemspec_t.impl&%5.write.? self! byte!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::write")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.write.))
(declare-fun %%lambda%%2 (Int Int Int Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (pos$ Poly) (pre_byte$ Poly)) (! (= (%%apply%%1 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pos$ pre_byte$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (ite (and (<= %%hole%%0 (%I pos$)) (< (%I pos$) %%hole%%1)) (lib!pmem.pmemspec_t.impl&%5.write.? pre_byte$ (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 (I (Sub (%I pos$) %%hole%%2)))) (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pre_byte$)))) :pattern ((%%apply%%1 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pos$ pre_byte$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.write.) (forall ((self! Poly) (addr! Poly) (bytes! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.write.? self! addr! bytes!) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun (%%lambda%%2 (%I addr!) (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) bytes!)) (%I addr!) $ (UINT 8) bytes!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.write.? self! addr! bytes!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::flush_byte")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!) (let ((tmp%%$ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)))) (ite (is-core!option.Option./None_ tmp%%$) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)) (let ((b$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) b$)))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.flush.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.flush.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.flush.? self!) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (%I (I (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.flush.? self!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush.? self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.flush.))
(declare-fun %%lambda%%3 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%3 _addr$ b$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.flush.? b$))) :pattern ((%%apply%%1 %%lambda%%3 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.flush.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.flush.? self!) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%3)))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.flush.? self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%4 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::arithmetic::div_mod::lemma_small_mod")
(declare-fun req%vstd!arithmetic.div_mod.lemma_small_mod. (Int Int) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((x! Int) (m! Int)) (! (= (req%vstd!arithmetic.div_mod.lemma_small_mod. x! m!) (and (=> %%global_location_label%%5 (< x! m!)) (=> %%global_location_label%%6 (< 0 m!)))) :pattern ((req%vstd!arithmetic.div_mod.lemma_small_mod. x! m!)))))
(declare-fun ens%vstd!arithmetic.div_mod.lemma_small_mod. (Int Int) Bool)
(assert (forall ((x! Int) (m! Int)) (! (= (ens%vstd!arithmetic.div_mod.lemma_small_mod. x! m!) (= (nClip (EucMod x! m!)) x!)) :pattern ((ens%vstd!arithmetic.div_mod.lemma_small_mod. x! m!)))))
(set-info :comment ";; Function-Specs vstd::arithmetic::div_mod::lemma_fundamental_div_mod")
(declare-fun req%vstd!arithmetic.div_mod.lemma_fundamental_div_mod. (Int Int) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((x! Int) (d! Int)) (! (= (req%vstd!arithmetic.div_mod.lemma_fundamental_div_mod. x! d!) (=> %%global_location_label%%7 (not (= d! 0)))) :pattern ((req%vstd!arithmetic.div_mod.lemma_fundamental_div_mod. x! d!)))))
(declare-fun ens%vstd!arithmetic.div_mod.lemma_fundamental_div_mod. (Int Int) Bool)
(assert (forall ((x! Int) (d! Int)) (! (= (ens%vstd!arithmetic.div_mod.lemma_fundamental_div_mod. x! d!) (= x! (Add (Mul d! (EucDiv x! d!)) (EucMod x! d!)))) :pattern ((ens%vstd!arithmetic.div_mod.lemma_fundamental_div_mod. x! d!)))))
(set-info :comment ";; Broadcast vstd::arithmetic::div_mod::lemma_fundamental_div_mod")
(assert (=> (fuel_bool fuel%vstd!arithmetic.div_mod.lemma_fundamental_div_mod.) (forall ((x! Int) (d! Int)) (! (=> (not (= d! 0)) (= x! (Add (Mul d! (EucDiv x! d!)) (EucMod x! d!)))) :pattern ((Add (Mul d! (EucDiv x! d!)) (EucMod x! d!)))))))
(set-info :comment ";; Function-Specs vstd::arithmetic::div_mod::lemma_mod_sub_multiples_vanish")
(declare-fun req%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish. (Int Int) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((b! Int) (m! Int)) (! (= (req%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish. b! m!) (=> %%global_location_label%%8 (< 0 m!))) :pattern ((req%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish. b! m!)))))
(declare-fun ens%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish. (Int Int) Bool)
(assert (forall ((b! Int) (m! Int)) (! (= (ens%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish. b! m!) (= (EucMod (Add (Sub 0 m!) b!) m!) (EucMod b! m!))) :pattern ((ens%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish. b! m!)))))
(set-info :comment ";; Broadcast vstd::arithmetic::div_mod::lemma_mod_sub_multiples_vanish")
(assert (=> (fuel_bool fuel%vstd!arithmetic.div_mod.lemma_mod_sub_multiples_vanish.) (forall ((b! Int) (m! Int)) (! (=> (< 0 m!) (= (EucMod (Add (Sub 0 m!) b!) m!) (EucMod b! m!))) :pattern ((EucMod b! m!))))))
(set-info :comment ";; Function-Specs vstd::arithmetic::div_mod::lemma_mod_multiples_vanish")
(declare-fun req%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish. (Int Int Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((a! Int) (b! Int) (m! Int)) (! (= (req%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish. a! b! m!) (=> %%global_location_label%%9 (< 0 m!))) :pattern ((req%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish. a! b! m!)))))
(declare-fun ens%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (m! Int)) (! (= (ens%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish. a! b! m!) (= (EucMod (Add (Mul m! a!) b!) m!) (EucMod b! m!))) :pattern ((ens%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish. a! b! m!)))))
(set-info :comment ";; Broadcast vstd::arithmetic::div_mod::lemma_mod_multiples_vanish")
(assert (=> (fuel_bool fuel%vstd!arithmetic.div_mod.lemma_mod_multiples_vanish.) (forall ((a! Int) (b! Int) (m! Int)) (! (=> (< 0 m!) (= (EucMod (Add (Mul m! a!) b!) m!) (EucMod b! m!))) :pattern ((EucMod (Add (Mul m! a!) b!) m!))))))
(set-info :comment ";; Function-Specs core::result::impl&%26::branch")
(declare-fun ens%core!result.impl&%26.branch. (Dcr Type Dcr Type core!result.Result. core!ops.control_flow.ControlFlow.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (cf! core!ops.control_flow.ControlFlow.)) (! (= (ens%core!result.impl&%26.branch. T&. T& E&. E& result! cf!) (and (has_type (Poly%core!ops.control_flow.ControlFlow. cf!) (TYPE%core!ops.control_flow.ControlFlow. $ (TYPE%core!result.Result. $ TYPE%core!convert.Infallible. E&. E&) T&. T&)) (= cf! (ite (is-core!result.Result./Ok_ result!) (let ((v$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) (core!ops.control_flow.ControlFlow./Continue v$)) (let ((e$ (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) (core!ops.control_flow.ControlFlow./Break (Poly%core!result.Result. (core!result.Result./Err e$)))))))) :pattern ((ens%core!result.impl&%26.branch. T&. T& E&. E& result! cf!)))))
(set-info :comment ";; Broadcast vstd::std_specs::control_flow::spec_from_blanket_identity")
(assert (=> (fuel_bool fuel%vstd!std_specs.control_flow.spec_from_blanket_identity.) (forall ((T&. Dcr) (T& Type) (t! Poly) (s! Poly)) (! (=> (and (has_type t! T&) (has_type s! T&)) (=> (vstd!std_specs.control_flow.spec_from.? T&. T& T&. T& t! s!) (= t! s!))) :pattern ((vstd!std_specs.control_flow.spec_from.? T&. T& T&. T& t! s!))))))
(set-info :comment ";; Function-Specs core::result::impl&%27::from_residual")
(declare-fun ens%core!result.impl&%27.from_residual. (Dcr Type Dcr Type Dcr Type core!result.Result. core!result.Result.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (F&. Dcr) (F& Type) (result! core!result.Result.) (result2! core!result.Result.)) (! (= (ens%core!result.impl&%27.from_residual. T&. T& E&. E& F&. F& result! result2!) (and (has_type (Poly%core!result.Result. result2!) (TYPE%core!result.Result. T&. T& F&. F&)) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!result.Result. result!) (Poly%core!result.Result. result2!)))) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((e$ (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((e2$ (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (vstd!std_specs.control_flow.spec_from.? F&. F& E&. E& e$ e2$))))))) :pattern ((ens%core!result.impl&%27.from_residual. T&. T& E&. E& F&. F& result! result2!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::new")
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::append")
(declare-fun ens%alloc!vec.impl&%1.append. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (pre%other! Poly) (other! Poly)) (! (= (ens%alloc!vec.impl&%1.append. T&. T& A&. A& pre%vec! vec! pre%other! other!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (has_type other! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.add.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%other!))) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) other!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%1.append. T&. T& A&. A& pre%vec! vec! pre%other! other!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%4 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%4 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::drop_first")
(declare-fun req%vstd!seq_lib.impl&%0.drop_first. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_first. A&. A& self!) (=> %%global_location_label%%10 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_first. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::drop_first")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_first.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_first.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_first.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 1) (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq_lib.impl&%0.drop_first.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_first.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_first.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::slice::spec_slice_len")
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly)) (! (=> (has_type slice! (SLICE T&. T&)) (uInv SZ (vstd!slice.spec_slice_len.? T&. T& slice!))) :pattern ((vstd!slice.spec_slice_len.? T&. T& slice!)))))
(set-info :comment ";; Broadcast vstd::slice::axiom_spec_len")
(assert (=> (fuel_bool fuel%vstd!slice.axiom_spec_len.) (forall ((T&. Dcr) (T& Type) (slice! Poly)) (! (=> (has_type slice! (SLICE T&. T&)) (= (vstd!slice.spec_slice_len.? T&. T& slice!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!)))) :pattern ((vstd!slice.spec_slice_len.? T&. T& slice!))))))
(set-info :comment ";; Function-Specs core::slice::impl&%0::len")
(declare-fun ens%core!slice.impl&%0.len. (Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (len! Int)) (! (= (ens%core!slice.impl&%0.len. T&. T& slice! len!) (and (uInv SZ len!) (= len! (vstd!slice.spec_slice_len.? T&. T& slice!)))) :pattern ((ens%core!slice.impl&%0.len. T&. T& slice! len!)))))
(set-info :comment ";; Function-Specs vstd::slice::slice_subrange")
(declare-fun req%vstd!slice.slice_subrange. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (i! Int) (j! Int)) (! (= (req%vstd!slice.slice_subrange. T&. T& slice! i! j!) (=> %%global_location_label%%11 (and (and (<= 0 i!) (<= i! j!)) (<= j! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!)))))) :pattern ((req%vstd!slice.slice_subrange. T&. T& slice! i! j!)))))
(declare-fun ens%vstd!slice.slice_subrange. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (i! Int) (j! Int) (out! Poly)) (! (= (ens%vstd!slice.slice_subrange. T&. T& slice! i! j! out!) (and (has_type out! (SLICE T&. T&)) (= (vstd!view.View.view.? $ (SLICE T&. T&) out!) (vstd!seq.Seq.subrange.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!) (I i!) (I j!))))) :pattern ((ens%vstd!slice.slice_subrange. T&. T& slice! i! j! out!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegion::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegion::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!) BOOL)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegion::constants")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::get_region_size")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self!) (=> %%global_location_label%%12 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self!)))))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (result! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self! result!) (and (has_type result! (UINT 64)) (= (%I result!) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self! result!)))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::read_unaligned")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (addr! Poly) (num_bytes! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. Self%&. Self%& self! addr! num_bytes!) (and (=> %%global_location_label%%13 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!))) (=> %%global_location_label%%14 (<= (Add (%I addr!) (%I num_bytes!)) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)))) (=> %%global_location_label%%15 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!) addr! (I (Add (%I addr!) (%I num_bytes!))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. Self%&. Self%& self! addr! num_bytes!)))))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun %%lambda%%5 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0) i$) (I (Add (%I i$) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0) i$)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (addr! Poly) (num_bytes! Poly) (bytes! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. Self%&. Self%& self! addr! num_bytes! bytes!) (and (has_type bytes! (TYPE%core!result.Result. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. bytes!)) (let ((bytes$ (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. bytes!))))) (let ((true_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))) addr! (I (Add (%I addr!) (%I num_bytes!))))))) (let ((addrs$ (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) num_bytes! (Poly%fun%1. (mk_fun (%%lambda%%5 (%I addr!)))))))) (ite (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!))) (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. bytes$))) true_bytes$) (lib!pmem.pmemspec_t.maybe_corrupted.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. bytes$)) (Poly%vstd!seq.Seq<u8.>. true_bytes$) (Poly%vstd!seq.Seq<int.>. addrs$))))))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. Self%&. Self%& self! addr! num_bytes! bytes!)))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::flush")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. Self%&. Self%& pre%self!) (=> %%global_location_label%%16 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& pre%self!)))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. Self%&. Self%& pre%self!)))))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. Self%&. Self%& pre%self! self!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%6.flush.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& pre%self!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. Self%&. Self%& pre%self! self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! (I 0) (I (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::spec_crc_u64")
(assert (forall ((bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!pmem.pmemspec_t.spec_crc_u64.? bytes!))) :pattern ((lib!pmem.pmemspec_t.spec_crc_u64.? bytes!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%19::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 64)))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%19::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ (UINT 64)))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::all_elements_unique")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.all_elements_unique.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.all_elements_unique.) (forall ((seq! Poly)) (! (= (lib!pmem.pmemspec_t.all_elements_unique.? seq!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ INT seq!))) (not (= (vstd!seq.Seq.index.? $ INT seq! i$) (vstd!seq.Seq.index.? $ INT seq! j$))))) :pattern ((vstd!seq.Seq.index.? $ INT seq! i$) (vstd!seq.Seq.index.? $ INT seq! j$))))) :pattern ((lib!pmem.pmemspec_t.all_elements_unique.? seq!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::CDB_FALSE")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.CDB_FALSE.) (= lib!pmem.pmemspec_t.CDB_FALSE.? 11756720295082287198)))
(assert (uInv 64 lib!pmem.pmemspec_t.CDB_FALSE.?))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::CDB_TRUE")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.CDB_TRUE.) (= lib!pmem.pmemspec_t.CDB_TRUE.? 12331324665725530551)))
(assert (uInv 64 lib!pmem.pmemspec_t.CDB_TRUE.?))
(set-info :comment ";; Function-Axioms lib::pmem::wrpm_t::CheckPermission::check_permission")
(assert (forall ((Self%&. Dcr) (Self%& Type) (State&. Dcr) (State& Type) (self! Poly) (state! Poly)) (! (=> (and (has_type self! Self%&) (has_type state! State&)) (has_type (lib!pmem.wrpm_t.CheckPermission.check_permission.? Self%&. Self%& State&. State& self! state!) BOOL)) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? Self%&. Self%& State&. State& self! state!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%22::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 128) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_GLOBAL_METADATA")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.) (= lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.? 0)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_LOG_AREA")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? 256)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))
(set-info :comment ";; Function-Axioms lib::log::inv_v::no_outstanding_writes_to_metadata")
(assert (fuel_bool_default fuel%lib!log.inv_v.no_outstanding_writes_to_metadata.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.no_outstanding_writes_to_metadata.) (forall ((pm_region_view! Poly)) (! (= (lib!log.inv_v.no_outstanding_writes_to_metadata.? pm_region_view!) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? pm_region_view! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))) :pattern ((lib!log.inv_v.no_outstanding_writes_to_metadata.? pm_region_view!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? 128)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? 88)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::spec_padding_needed")
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.spec_padding_needed.) (forall ((offset! Poly) (align! Poly)) (! (= (lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!) (let ((misalignment$ (nClip (EucMod (%I offset!) (%I align!))))) (ite (> misalignment$ 0) (nClip (Sub (%I align!) misalignment$)) 0))) :pattern ((lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!))))))
(assert (forall ((offset! Poly) (align! Poly)) (! (=> (and (has_type offset! NAT) (has_type align! NAT)) (<= 0 (lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!))) :pattern ((lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%23::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128)) (I 16))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%23::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)) (I 16))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::LogMetadata::spec_size_of")
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%21.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%21.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$3))))))))
(set-info :comment ";; Function-Axioms lib::log::inv_v::no_outstanding_writes_to_active_metadata")
(assert (fuel_bool_default fuel%lib!log.inv_v.no_outstanding_writes_to_active_metadata.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.no_outstanding_writes_to_active_metadata.) (forall ((pm_region_view! Poly) (cdb! Poly)) (! (= (lib!log.inv_v.no_outstanding_writes_to_active_metadata.? pm_region_view! cdb!) (let ((metadata_pos$ (ite (%B cdb!) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))) (and (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? pm_region_view! (I metadata_pos$) (I (Add (Add metadata_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? pm_region_view! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))))) :pattern ((lib!log.inv_v.no_outstanding_writes_to_active_metadata.? pm_region_view! cdb!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::extract_bytes")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.extract_bytes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.extract_bytes.) (forall ((bytes! Poly) (pos! Poly) (len! Poly)) (! (= (lib!pmem.pmemspec_t.extract_bytes.? bytes! pos! len!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) bytes! pos! (I (nClip (Add (%I pos!) (%I len!))))))) :pattern ((lib!pmem.pmemspec_t.extract_bytes.? bytes! pos! len!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_LOG_CDB")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? 80)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::extract_log_cdb")
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_log_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_log_cdb.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_log_cdb.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!log.layout_v.extract_log_cdb.? mem!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::deserialize_log_cdb")
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_log_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_log_cdb.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_log_cdb.? mem!) (%I (let ((bytes$ (lib!log.layout_v.extract_log_cdb.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_log_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!log.layout_v.deserialize_log_cdb.? mem!))) :pattern ((lib!log.layout_v.deserialize_log_cdb.? mem!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::deserialize_and_check_log_cdb")
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_and_check_log_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_and_check_log_cdb.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_and_check_log_cdb.? mem!) (let ((log_cdb$ (lib!log.layout_v.deserialize_log_cdb.? mem!))) (ite (= log_cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?) (core!option.Option./Some (B false)) (ite (= log_cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) (core!option.Option./Some (B true)) core!option.Option./None)))) :pattern ((lib!log.layout_v.deserialize_and_check_log_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%core!option.Option. (lib!log.layout_v.deserialize_and_check_log_cdb.? mem!)) (TYPE%core!option.Option. $ BOOL))) :pattern ((lib!log.layout_v.deserialize_and_check_log_cdb.? mem!)))))
(set-info :comment ";; Function-Axioms lib::log::inv_v::active_metadata_bytes_are_equal")
(assert (fuel_bool_default fuel%lib!log.inv_v.active_metadata_bytes_are_equal.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.active_metadata_bytes_are_equal.) (forall ((pm_bytes1! Poly) (pm_bytes2! Poly)) (! (= (lib!log.inv_v.active_metadata_bytes_are_equal.? pm_bytes1! pm_bytes2!) (let ((cdb1$ (lib!log.layout_v.deserialize_and_check_log_cdb.? pm_bytes1!))) (let ((cdb2$ (lib!log.layout_v.deserialize_and_check_log_cdb.? pm_bytes2!))) (and (and (and (and (is-core!option.Option./Some_ cdb1$) (is-core!option.Option./Some_ cdb2$)) (= cdb1$ cdb2$)) (= (vstd!seq.Seq.subrange.? $ (UINT 8) pm_bytes1! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?)) (vstd!seq.Seq.subrange.? $ (UINT 8) pm_bytes2! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?)))) (let ((metadata_pos$ (ite (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. cdb1$)))) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))) (= (vstd!seq.Seq.subrange.? $ (UINT 8) pm_bytes1! (I metadata_pos$) (I (Add (Add metadata_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (vstd!seq.Seq.subrange.? $ (UINT 8) pm_bytes2! (I metadata_pos$) (I (Add (Add metadata_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))))))) :pattern ((lib!log.inv_v.active_metadata_bytes_are_equal.? pm_bytes1! pm_bytes2!))))))
(set-info :comment ";; Function-Axioms lib::log::inv_v::active_metadata_is_equal")
(assert (fuel_bool_default fuel%lib!log.inv_v.active_metadata_is_equal.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.active_metadata_is_equal.) (forall ((pm_region_view1! Poly) (pm_region_view2! Poly)) (! (= (lib!log.inv_v.active_metadata_is_equal.? pm_region_view1! pm_region_view2!) (let ((pm_bytes1$ (lib!pmem.pmemspec_t.impl&%6.committed.? pm_region_view1!))) (let ((pm_bytes2$ (lib!pmem.pmemspec_t.impl&%6.committed.? pm_region_view2!))) (lib!log.inv_v.active_metadata_bytes_are_equal.? (Poly%vstd!seq.Seq<u8.>. pm_bytes1$) (Poly%vstd!seq.Seq<u8.>. pm_bytes2$))))) :pattern ((lib!log.inv_v.active_metadata_is_equal.? pm_region_view1! pm_region_view2!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!log.layout_v.LogMetadata.))
(set-info :comment ";; Function-Specs lib::util_v::nat_seq_max")
(declare-fun req%lib!util_v.nat_seq_max. (Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((seq! Poly)) (! (= (req%lib!util_v.nat_seq_max. seq!) (=> %%global_location_label%%17 (< 0 (vstd!seq.Seq.len.? $ NAT seq!)))) :pattern ((req%lib!util_v.nat_seq_max. seq!)))))
(set-info :comment ";; Function-Axioms lib::util_v::nat_seq_max")
(assert (fuel_bool_default fuel%lib!util_v.nat_seq_max.))
(declare-const fuel_nat%lib!util_v.nat_seq_max. Fuel)
(assert (forall ((seq! Poly) (fuel% Fuel)) (! (= (lib!util_v.rec%nat_seq_max.? seq! fuel%) (lib!util_v.rec%nat_seq_max.? seq! zero)) :pattern ((lib!util_v.rec%nat_seq_max.? seq! fuel%)))))
(assert (forall ((seq! Poly) (fuel% Fuel)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (= (lib!util_v.rec%nat_seq_max.? seq! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? $ NAT seq!) 1) (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) (ite (= (vstd!seq.Seq.len.? $ NAT seq!) 0) 0 (let ((later_max$ (lib!util_v.rec%nat_seq_max.? (vstd!seq_lib.impl&%0.drop_first.? $ NAT seq!) fuel%))) (ite (>= (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) later_max$) (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) later_max$)))))) :pattern ((lib!util_v.rec%nat_seq_max.? seq! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!util_v.nat_seq_max.) (forall ((seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (= (lib!util_v.nat_seq_max.? seq!) (lib!util_v.rec%nat_seq_max.? seq! (succ fuel_nat%lib!util_v.nat_seq_max.)))) :pattern ((lib!util_v.nat_seq_max.? seq!))))))
(assert (forall ((seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (<= 0 (lib!util_v.nat_seq_max.? seq!))) :pattern ((lib!util_v.nat_seq_max.? seq!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::LogMetadata::spec_align_of")
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%21.spec_align_of.))
(declare-fun %%array%%0 (Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2))) (and (= (%%apply%%2 %%x%% 0) %%hole%%0) (= (%%apply%%2 %%x%% 1) %%hole%%1) (= (%%apply%%2 %%x%% 2) %%hole%%2))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2)))))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%21.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!log.layout_v.LogMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 3)) (array_new $ NAT 3 (%%array%%0 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!log.layout_v.LogMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!log.layout_v.LogMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!log.layout_v.LogMetadata.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!log.layout_v.LogMetadata.))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.? 120)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? 160)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.?))
(set-info :comment ";; Function-Axioms lib::log::inv_v::inactive_metadata_types_set")
(assert (fuel_bool_default fuel%lib!log.inv_v.inactive_metadata_types_set.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.inactive_metadata_types_set.) (forall ((mem! Poly)) (! (= (lib!log.inv_v.inactive_metadata_types_set.? mem!) (let ((cdb_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?)) (let ((cdb$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (vstd!seq.Seq.subrange.? $ (UINT 8) mem! (I cdb_pos$) (I (Add cdb_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))))) (let ((metadata_pos$ (ite (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.?))) (let ((metadata$ (%Poly%lib!log.layout_v.LogMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (vstd!seq.Seq.subrange.? $ (UINT 8) mem! (I metadata_pos$) (I (Add metadata_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))))))))) (let ((crc_pos$ (ite (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.?))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (vstd!seq.Seq.subrange.? $ (UINT 8) mem! (I crc_pos$) (I (Add crc_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))))) (and (and (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (vstd!seq.Seq.subrange.? $ (UINT 8) mem! (I cdb_pos$) (I (Add cdb_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!log.layout_v.LogMetadata. (vstd!seq.Seq.subrange.? $ (UINT 8) mem! (I metadata_pos$) (I (Add metadata_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)))))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (vstd!seq.Seq.subrange.? $ (UINT 8) mem! (I crc_pos$) (I (Add crc_pos$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))))) (or (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) (= cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. metadata$)))))))))))) :pattern ((lib!log.inv_v.inactive_metadata_types_set.? mem!))))))
(set-info :comment ";; Function-Axioms lib::log::inv_v::memory_matches_deserialized_cdb")
(assert (fuel_bool_default fuel%lib!log.inv_v.memory_matches_deserialized_cdb.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.memory_matches_deserialized_cdb.) (forall ((pm_region_view! Poly) (cdb! Poly)) (! (= (lib!log.inv_v.memory_matches_deserialized_cdb.? pm_region_view! cdb!) (and (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? pm_region_view! (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (I (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (= (lib!log.layout_v.deserialize_and_check_log_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? pm_region_view!))) (core!option.Option./Some cdb!)))) :pattern ((lib!log.inv_v.memory_matches_deserialized_cdb.? pm_region_view! cdb!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::GlobalMetadata::spec_size_of")
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%3.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%3.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$3))))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::extract_global_metadata")
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_global_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_global_metadata.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_global_metadata.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.))) :pattern ((lib!log.layout_v.extract_global_metadata.? mem!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(set-info :comment ";; Function-Axioms lib::log::layout_v::GlobalMetadata::spec_align_of")
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%3.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%3.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 3)) (array_new $ NAT 3 (%%array%%0 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!log.layout_v.GlobalMetadata.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(set-info :comment ";; Function-Axioms lib::log::layout_v::deserialize_global_metadata")
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_global_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_global_metadata.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_global_metadata.? mem!) (%Poly%lib!log.layout_v.GlobalMetadata. (let ((bytes$ (lib!log.layout_v.extract_global_metadata.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_global_metadata.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.deserialize_global_metadata.? mem!)) TYPE%lib!log.layout_v.GlobalMetadata.)) :pattern ((lib!log.layout_v.deserialize_global_metadata.? mem!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_GLOBAL_CRC")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.) (= lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.? 32)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::extract_global_crc")
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_global_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_global_crc.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_global_crc.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!log.layout_v.extract_global_crc.? mem!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::deserialize_global_crc")
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_global_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_global_crc.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_global_crc.? mem!) (%I (let ((bytes$ (lib!log.layout_v.extract_global_crc.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_global_crc.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!log.layout_v.deserialize_global_crc.? mem!))) :pattern ((lib!log.layout_v.deserialize_global_crc.? mem!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_REGION_METADATA")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.) (= lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.? 40)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::RegionMetadata::spec_size_of")
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%12.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%12.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$3))))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::extract_region_metadata")
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_region_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_region_metadata.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_region_metadata.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.))) :pattern ((lib!log.layout_v.extract_region_metadata.? mem!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!log.layout_v.RegionMetadata.))
(set-info :comment ";; Function-Axioms lib::log::layout_v::RegionMetadata::spec_align_of")
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%12.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%12.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!log.layout_v.RegionMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 3)) (array_new $ NAT 3 (%%array%%0 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!log.layout_v.RegionMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!log.layout_v.RegionMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!log.layout_v.RegionMetadata.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!log.layout_v.RegionMetadata.))
(set-info :comment ";; Function-Axioms lib::log::layout_v::deserialize_region_metadata")
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_region_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_region_metadata.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_region_metadata.? mem!) (%Poly%lib!log.layout_v.RegionMetadata. (let ((bytes$ (lib!log.layout_v.extract_region_metadata.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_region_metadata.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.deserialize_region_metadata.? mem!)) TYPE%lib!log.layout_v.RegionMetadata.)) :pattern ((lib!log.layout_v.deserialize_region_metadata.? mem!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::ABSOLUTE_POS_OF_REGION_CRC")
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.) (= lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.? 72)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::extract_region_crc")
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_region_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_region_crc.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_region_crc.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!log.layout_v.extract_region_crc.? mem!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::deserialize_region_crc")
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_region_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_region_crc.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_region_crc.? mem!) (%I (let ((bytes$ (lib!log.layout_v.extract_region_crc.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_region_crc.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!log.layout_v.deserialize_region_crc.? mem!))) :pattern ((lib!log.layout_v.deserialize_region_crc.? mem!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::get_log_metadata_pos")
(assert (fuel_bool_default fuel%lib!log.layout_v.get_log_metadata_pos.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.get_log_metadata_pos.) (forall ((cdb! Poly)) (! (= (lib!log.layout_v.get_log_metadata_pos.? cdb!) (ite (%B cdb!) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?)) :pattern ((lib!log.layout_v.get_log_metadata_pos.? cdb!))))))
(assert (forall ((cdb! Poly)) (! (=> (has_type cdb! BOOL) (uInv 64 (lib!log.layout_v.get_log_metadata_pos.? cdb!))) :pattern ((lib!log.layout_v.get_log_metadata_pos.? cdb!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::extract_log_metadata")
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_log_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_log_metadata.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.extract_log_metadata.? mem! cdb!) (let ((pos$ (lib!log.layout_v.get_log_metadata_pos.? cdb!))) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)))) :pattern ((lib!log.layout_v.extract_log_metadata.? mem! cdb!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::deserialize_log_metadata")
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_log_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_log_metadata.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.deserialize_log_metadata.? mem! cdb!) (%Poly%lib!log.layout_v.LogMetadata. (let ((bytes$ (lib!log.layout_v.extract_log_metadata.? mem! cdb!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_log_metadata.? mem! cdb!))))))
(assert (forall ((mem! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type cdb! BOOL)) (has_type (Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.deserialize_log_metadata.? mem! cdb!)) TYPE%lib!log.layout_v.LogMetadata.)) :pattern ((lib!log.layout_v.deserialize_log_metadata.? mem! cdb!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::extract_log_crc")
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_log_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_log_crc.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.extract_log_crc.? mem! cdb!) (let ((pos$ (ite (%B cdb!) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) :pattern ((lib!log.layout_v.extract_log_crc.? mem! cdb!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::deserialize_log_crc")
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_log_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_log_crc.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.deserialize_log_crc.? mem! cdb!) (%I (let ((bytes$ (lib!log.layout_v.extract_log_crc.? mem! cdb!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_log_crc.? mem! cdb!))))))
(assert (forall ((mem! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type cdb! BOOL)) (uInv 64 (lib!log.layout_v.deserialize_log_crc.? mem! cdb!))) :pattern ((lib!log.layout_v.deserialize_log_crc.? mem! cdb!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::get_log_crc_end")
(assert (fuel_bool_default fuel%lib!log.layout_v.get_log_crc_end.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.get_log_crc_end.) (forall ((cdb! Poly)) (! (= (lib!log.layout_v.get_log_crc_end.? cdb!) (uClip 64 (Add (Add (lib!log.layout_v.get_log_metadata_pos.? cdb!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) :pattern ((lib!log.layout_v.get_log_crc_end.? cdb!))))))
(assert (forall ((cdb! Poly)) (! (=> (has_type cdb! BOOL) (uInv 64 (lib!log.layout_v.get_log_crc_end.? cdb!))) :pattern ((lib!log.layout_v.get_log_crc_end.? cdb!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%0::T::spec_crc")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (= (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? T&. T& self!) (I (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? T&. T& self!))))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::LOG_PROGRAM_GUID")
(assert (fuel_bool_default fuel%lib!log.layout_v.LOG_PROGRAM_GUID.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.LOG_PROGRAM_GUID.) (= lib!log.layout_v.LOG_PROGRAM_GUID.? 189980176382013619342097570959470067903)))
(assert (uInv 128 lib!log.layout_v.LOG_PROGRAM_GUID.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::LOG_PROGRAM_VERSION_NUMBER")
(assert (fuel_bool_default fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.) (= lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.? 1)))
(assert (uInv 64 lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.?))
(set-info :comment ";; Function-Axioms lib::log::inv_v::metadata_consistent_with_info")
(assert (fuel_bool_default fuel%lib!log.inv_v.metadata_consistent_with_info.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.metadata_consistent_with_info.) (forall ((pm_region_view! Poly) (log_id! Poly) (cdb! Poly) (info! Poly)) (! (= (lib!log.inv_v.metadata_consistent_with_info.? pm_region_view! log_id! cdb! info!) (let ((mem$ (lib!pmem.pmemspec_t.impl&%6.committed.? pm_region_view!))) (let ((global_metadata$ (lib!log.layout_v.deserialize_global_metadata.? (Poly%vstd!seq.Seq<u8.>. mem$)))) (let ((global_crc$ (lib!log.layout_v.deserialize_global_crc.? (Poly%vstd!seq.Seq<u8.>. mem$)))) (let ((region_metadata$ (lib!log.layout_v.deserialize_region_metadata.? (Poly%vstd!seq.Seq<u8.>. mem$)))) (let ((region_crc$ (lib!log.layout_v.deserialize_region_crc.? (Poly%vstd!seq.Seq<u8.>. mem$)))) (let ((log_metadata$ (lib!log.layout_v.deserialize_log_metadata.? (Poly%vstd!seq.Seq<u8.>. mem$) cdb!))) (let ((log_crc$ (lib!log.layout_v.deserialize_log_crc.? (Poly%vstd!seq.Seq<u8.>. mem$) cdb!))) (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? pm_region_view! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?)) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? pm_region_view! (I (lib!log.layout_v.get_log_metadata_pos.? cdb!)) (I (lib!log.layout_v.get_log_crc_end.? cdb!)))) (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))))) (= region_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))))) (= log_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))))) (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) lib!log.layout_v.LOG_PROGRAM_GUID.?)) (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.?)) (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.)))) (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem$)))) (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (%I log_id!))) (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))) (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (>= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem$)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!))))))))))))) :pattern ((lib!log.inv_v.metadata_consistent_with_info.? pm_region_view! log_id! cdb! info!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::MIN_LOG_AREA_SIZE")
(assert (fuel_bool_default fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE.) (= lib!log.layout_v.MIN_LOG_AREA_SIZE.? 1)))
(assert (uInv 64 lib!log.layout_v.MIN_LOG_AREA_SIZE.?))
(set-info :comment ";; Function-Axioms lib::log::layout_v::relative_log_pos_to_log_area_offset")
(assert (fuel_bool_default fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset.) (forall ((pos_relative_to_head! Poly) (head_log_area_offset! Poly) (log_area_len! Poly)) (! (= (lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head! head_log_area_offset! log_area_len!) (let ((log_area_offset$ (Add (%I head_log_area_offset!) (%I pos_relative_to_head!)))) (ite (>= log_area_offset$ (%I log_area_len!)) (Sub log_area_offset$ (%I log_area_len!)) log_area_offset$))) :pattern ((lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head! head_log_area_offset! log_area_len!))))))
(set-info :comment ";; Function-Axioms lib::log::inv_v::info_consistent_with_log_area")
(assert (fuel_bool_default fuel%lib!log.inv_v.info_consistent_with_log_area.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.info_consistent_with_log_area.) (forall ((log_area_view! Poly) (info! Poly) (state! Poly)) (! (= (lib!log.inv_v.info_consistent_with_log_area.? log_area_view! info! state!) (and (and (and (and (and (and (and (and (>= (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)) lib!log.layout_v.MIN_LOG_AREA_SIZE.?) (let ((tmp%%$ (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (and (<= (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)) tmp%%$) (<= tmp%%$ (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))))) (= (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. info!)) (EucMod (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. info!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!))))) (<= (Add (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. info!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!))) 340282366920938463463374607431768211455)) (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. state!)))) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. state!)))) (Sub (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!))))) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. state!)) (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. state!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (forall ((pos_relative_to_head$ Poly)) (! (=> (has_type pos_relative_to_head$ INT) (let ((log_area_offset$ (lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head$ (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. info!))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))))) (let ((pmb$ (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. log_area_view!))) (I log_area_offset$))))) (and (and (=> (and (<= 0 (%I pos_relative_to_head$)) (< (%I pos_relative_to_head$) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (and (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pmb$))) (%I (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. state!))) pos_relative_to_head$))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pmb$)))))) (=> (and (<= (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)) (%I pos_relative_to_head$)) (< (%I pos_relative_to_head$) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (lib!pmem.pmemspec_t.impl&%5.flush_byte.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pmb$)) (%I (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. state!))) (I (Sub (%I pos_relative_to_head$) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!))))))))) (=> (and (<= (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!)) (%I pos_relative_to_head$)) (< (%I pos_relative_to_head$) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pmb$))))))))) :pattern ((lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head$ (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. info!))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!))))))))) :pattern ((lib!log.inv_v.info_consistent_with_log_area.? log_area_view! info! state!))))))
(set-info :comment ";; Broadcast lib::pmem::pmcopy_t::axiom_bytes_len")
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.axiom_bytes_len.) (forall ((S&. Dcr) (S& Type) (s! Poly)) (! (=> (has_type s! S&) (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. S&. S&) (= (vstd!seq.Seq.len.? $ (UINT 8) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& s!)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) :pattern ((vstd!seq.Seq.len.? $ (UINT 8) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& s!)))))))
(set-info :comment ";; Broadcast lib::pmem::pmcopy_t::axiom_to_from_bytes")
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.axiom_to_from_bytes.) (forall ((S&. Dcr) (S& Type) (s! Poly)) (! (=> (has_type s! S&) (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. S&. S&) (= s! (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? S&. S& (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& s!))))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? S&. S& (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& s!)))))))
(set-info :comment ";; Function-Specs lib::pmem::subregion_v::get_subregion_view")
(declare-fun req%lib!pmem.subregion_v.get_subregion_view. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((region! Poly) (start! Poly) (len! Poly)) (! (= (req%lib!pmem.subregion_v.get_subregion_view. region! start! len!) (and (=> %%global_location_label%%18 (<= 0 (%I start!))) (=> %%global_location_label%%19 (<= 0 (%I len!))) (=> %%global_location_label%%20 (<= (nClip (Add (%I start!) (%I len!))) (lib!pmem.pmemspec_t.impl&%6.len.? region!))))) :pattern ((req%lib!pmem.subregion_v.get_subregion_view. region! start! len!)))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::get_subregion_view")
(assert (fuel_bool_default fuel%lib!pmem.subregion_v.get_subregion_view.))
(assert (=> (fuel_bool fuel%lib!pmem.subregion_v.get_subregion_view.) (forall ((region! Poly) (start! Poly) (len! Poly)) (! (= (lib!pmem.subregion_v.get_subregion_view.? region! start! len!) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. region!))) start! (I (nClip (Add (%I start!) (%I len!)))))))) :pattern ((lib!pmem.subregion_v.get_subregion_view.? region! start! len!))))))
(set-info :comment ";; Function-Axioms lib::log::inv_v::info_consistent_with_log_area_in_region")
(assert (fuel_bool_default fuel%lib!log.inv_v.info_consistent_with_log_area_in_region.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.info_consistent_with_log_area_in_region.) (forall ((pm_region_view! Poly) (info! Poly) (state! Poly)) (! (= (lib!log.inv_v.info_consistent_with_log_area_in_region.? pm_region_view! info! state!) (and (>= (lib!pmem.pmemspec_t.impl&%6.len.? pm_region_view!) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (lib!log.inv_v.info_consistent_with_log_area.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.get_subregion_view.? pm_region_view! (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!))))) info! state!))) :pattern ((lib!log.inv_v.info_consistent_with_log_area_in_region.? pm_region_view! info! state!))))))
(set-info :comment ";; Function-Axioms lib::log::inv_v::metadata_types_set")
(assert (fuel_bool_default fuel%lib!log.inv_v.metadata_types_set.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.metadata_types_set.) (forall ((mem! Poly)) (! (= (lib!log.inv_v.metadata_types_set.? mem!) (and (and (let ((metadata_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?)) (let ((crc_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?)) (let ((metadata$ (%Poly%lib!log.layout_v.GlobalMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.))))))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. metadata$))))))))) (let ((metadata_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?)) (let ((crc_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?)) (let ((metadata$ (%Poly%lib!log.layout_v.RegionMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.))))))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. metadata$)))))))))) (let ((cdb_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?)) (let ((cdb$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip cdb_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (let ((metadata_pos$ (ite (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))) (let ((metadata$ (%Poly%lib!log.layout_v.LogMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I metadata_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))))))) (let ((crc_pos$ (ite (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I crc_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip cdb_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (or (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) (= cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I metadata_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I crc_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. metadata$))))))))))))) :pattern ((lib!log.inv_v.metadata_types_set.? mem!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::log_area_offset_to_relative_log_pos")
(assert (fuel_bool_default fuel%lib!log.layout_v.log_area_offset_to_relative_log_pos.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.log_area_offset_to_relative_log_pos.) (forall ((log_area_offset! Poly) (head_log_area_offset! Poly) (log_area_len! Poly)) (! (= (lib!log.layout_v.log_area_offset_to_relative_log_pos.? log_area_offset! head_log_area_offset! log_area_len!) (ite (>= (%I log_area_offset!) (%I head_log_area_offset!)) (Sub (%I log_area_offset!) (%I head_log_area_offset!)) (Add (Sub (%I log_area_offset!) (%I head_log_area_offset!)) (%I log_area_len!)))) :pattern ((lib!log.layout_v.log_area_offset_to_relative_log_pos.? log_area_offset! head_log_area_offset! log_area_len!))))))
(set-info :comment ";; Function-Axioms lib::log::inv_v::log_area_offset_unreachable_during_recovery")
(assert (fuel_bool_default fuel%lib!log.inv_v.log_area_offset_unreachable_during_recovery.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.log_area_offset_unreachable_during_recovery.) (forall ((head_log_area_offset! Poly) (log_area_len! Poly) (log_length! Poly) (log_area_offset! Poly)) (! (= (lib!log.inv_v.log_area_offset_unreachable_during_recovery.? head_log_area_offset! log_area_len! log_length! log_area_offset!) (>= (lib!log.layout_v.log_area_offset_to_relative_log_pos.? log_area_offset! head_log_area_offset! log_area_len!) (%I log_length!))) :pattern ((lib!log.inv_v.log_area_offset_unreachable_during_recovery.? head_log_area_offset! log_area_len! log_length! log_area_offset!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::extract_log_from_log_area")
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_log_from_log_area.))
(declare-fun %%lambda%%6 (Poly Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (pos_relative_to_head$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) pos_relative_to_head$) (vstd!seq.Seq.index.? %%hole%%2 %%hole%%3 %%hole%%4 (I (lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head$ %%hole%%0 %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) pos_relative_to_head$)))))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_log_from_log_area.) (forall ((log_area! Poly) (head! Poly) (log_length! Poly)) (! (= (lib!log.layout_v.extract_log_from_log_area.? log_area! head! log_length!) (%Poly%vstd!seq.Seq<u8.>. (let ((head_log_area_offset$ (EucMod (%I head!) (vstd!seq.Seq.len.? $ (UINT 8) log_area!)))) (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (nClip (%I log_length!))) (Poly%fun%1. (mk_fun (%%lambda%%6 (I head_log_area_offset$) (I (vstd!seq.Seq.len.? $ (UINT 8) log_area!)) $ (UINT 8) log_area!))))))) :pattern ((lib!log.layout_v.extract_log_from_log_area.? log_area! head! log_length!))))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::recover_log_from_log_area_given_metadata")
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata.) (forall ((log_area! Poly) (head! Poly) (log_length! Poly)) (! (= (lib!log.layout_v.recover_log_from_log_area_given_metadata.? log_area! head! log_length!) (ite (or (> (%I log_length!) (vstd!seq.Seq.len.? $ (UINT 8) log_area!)) (> (Add (%I head!) (%I log_length!)) 340282366920938463463374607431768211455)) core!option.Option./None (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.AbstractLogState./AbstractLogState (%I head!) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!log.layout_v.extract_log_from_log_area.? log_area! head! log_length!))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%I (I (vstd!seq.Seq.len.? $ (UINT 8) log_area!)))))))) :pattern ((lib!log.layout_v.recover_log_from_log_area_given_metadata.? log_area! head! log_length!))))))
(assert (forall ((log_area! Poly) (head! Poly) (log_length! Poly)) (! (=> (and (has_type log_area! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type head! INT) (has_type log_length! INT)) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_log_from_log_area_given_metadata.? log_area! head! log_length!)) (TYPE%core!option.Option. $ TYPE%lib!log.logspec_t.AbstractLogState.))) :pattern ((lib!log.layout_v.recover_log_from_log_area_given_metadata.? log_area! head! log_length!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::recover_log")
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_log.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_log.) (forall ((mem! Poly) (log_area_len! Poly) (head! Poly) (log_length! Poly)) (! (= (lib!log.layout_v.recover_log.? mem! log_area_len! head! log_length!) (lib!log.layout_v.recover_log_from_log_area_given_metadata.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (I (nClip (%I log_area_len!))))) head! log_length!)) :pattern ((lib!log.layout_v.recover_log.? mem! log_area_len! head! log_length!))))))
(assert (forall ((mem! Poly) (log_area_len! Poly) (head! Poly) (log_length! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type log_area_len! INT) (has_type head! INT) (has_type log_length! INT)) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_log.? mem! log_area_len! head! log_length!)) (TYPE%core!option.Option. $ TYPE%lib!log.logspec_t.AbstractLogState.))) :pattern ((lib!log.layout_v.recover_log.? mem! log_area_len! head! log_length!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::recover_given_cdb")
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_given_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_given_cdb.) (forall ((mem! Poly) (log_id! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.recover_given_cdb.? mem! log_id! cdb!) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) core!option.Option./None (let ((global_metadata$ (lib!log.layout_v.deserialize_global_metadata.? mem!))) (let ((global_crc$ (lib!log.layout_v.deserialize_global_crc.? mem!))) (ite (not (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))))) core!option.Option./None (ite (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) lib!log.layout_v.LOG_PROGRAM_GUID.?)) core!option.Option./None (ite (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) 1) (ite (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.)))) core!option.Option./None (let ((region_metadata$ (lib!log.layout_v.deserialize_region_metadata.? mem!))) (let ((region_crc$ (lib!log.layout_v.deserialize_region_crc.? mem!))) (ite (not (= region_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))))) core!option.Option./None (ite (or (or (or (not (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (vstd!seq.Seq.len.? $ (UINT 8) mem!))) (not (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (%I log_id!)))) (< (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$)))))) core!option.Option./None (let ((log_metadata$ (lib!log.layout_v.deserialize_log_metadata.? mem! cdb!))) (let ((log_crc$ (lib!log.layout_v.deserialize_log_crc.? mem! cdb!))) (ite (not (= log_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))))) core!option.Option./None (lib!log.layout_v.recover_log.? mem! (I (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$)))) (I (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$)))) (I (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))))))))))))) core!option.Option./None))))))) :pattern ((lib!log.layout_v.recover_given_cdb.? mem! log_id! cdb!))))))
(assert (forall ((mem! Poly) (log_id! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type log_id! (UINT 128)) (has_type cdb! BOOL)) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_given_cdb.? mem! log_id! cdb!)) (TYPE%core!option.Option. $ TYPE%lib!log.logspec_t.AbstractLogState.))) :pattern ((lib!log.layout_v.recover_given_cdb.? mem! log_id! cdb!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::recover_cdb")
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_cdb.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.recover_cdb.? mem!) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?) core!option.Option./None (let ((global_metadata$ (lib!log.layout_v.deserialize_global_metadata.? mem!))) (let ((global_crc$ (lib!log.layout_v.deserialize_global_crc.? mem!))) (ite (not (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))))) core!option.Option./None (ite (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) lib!log.layout_v.LOG_PROGRAM_GUID.?)) core!option.Option./None (ite (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) 1) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) core!option.Option./None (lib!log.layout_v.deserialize_and_check_log_cdb.? mem!)) core!option.Option./None))))))) :pattern ((lib!log.layout_v.recover_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_cdb.? mem!)) (TYPE%core!option.Option. $ BOOL))) :pattern ((lib!log.layout_v.recover_cdb.? mem!)))))
(set-info :comment ";; Function-Axioms lib::log::layout_v::recover_state")
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_state.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_state.) (forall ((mem! Poly) (log_id! Poly)) (! (= (lib!log.layout_v.recover_state.? mem! log_id!) (let ((tmp%%$ (lib!log.layout_v.recover_cdb.? mem!))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((cdb$ (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (lib!log.layout_v.recover_given_cdb.? mem! log_id! (B cdb$))) core!option.Option./None))) :pattern ((lib!log.layout_v.recover_state.? mem! log_id!))))))
(assert (forall ((mem! Poly) (log_id! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type log_id! (UINT 128))) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_state.? mem! log_id!)) (TYPE%core!option.Option. $ TYPE%lib!log.logspec_t.AbstractLogState.))) :pattern ((lib!log.layout_v.recover_state.? mem! log_id!)))))
(set-info :comment ";; Function-Axioms lib::log::logimpl_t::read_correct_modulo_corruption")
(assert (fuel_bool_default fuel%lib!log.logimpl_t.read_correct_modulo_corruption.))
(assert (=> (fuel_bool fuel%lib!log.logimpl_t.read_correct_modulo_corruption.) (forall ((bytes! Poly) (true_bytes! Poly) (impervious_to_corruption! Poly)) (! (= (lib!log.logimpl_t.read_correct_modulo_corruption.? bytes! true_bytes! impervious_to_corruption!) (ite (%B impervious_to_corruption!) (= bytes! true_bytes!) (exists ((addrs$ Poly)) (! (and (has_type addrs$ (TYPE%vstd!seq.Seq. $ INT)) (and (lib!pmem.pmemspec_t.all_elements_unique.? addrs$) (lib!pmem.pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs$))) :pattern ((lib!pmem.pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs$)))))) :pattern ((lib!log.logimpl_t.read_correct_modulo_corruption.? bytes! true_bytes! impervious_to_corruption!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::const_persistence_chunk_size")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.const_persistence_chunk_size.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.const_persistence_chunk_size.) (forall ((no%param Poly)) (! (= (lib!pmem.pmemspec_t.const_persistence_chunk_size.? no%param) 8) :pattern ((lib!pmem.pmemspec_t.const_persistence_chunk_size.? no%param))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::chunk_corresponds_ignoring_outstanding_writes")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes.) (forall ((self! Poly) (chunk! Poly) (bytes! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes.? self! chunk! bytes!) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (and (and (<= 0 (%I addr$)) (< (%I addr$) (lib!pmem.pmemspec_t.impl&%6.len.? self!))) (= (EucDiv (%I addr$) (lib!pmem.pmemspec_t.const_persistence_chunk_size.? (I 0))) (%I chunk!))) (= (%I (vstd!seq.Seq.index.? $ (UINT 8) bytes! addr$)) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) addr$)))))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) bytes! addr$))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes.? self! chunk! bytes!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::chunk_corresponds_after_flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush.) (forall ((self! Poly) (chunk! Poly) (bytes! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush.? self! chunk! bytes!) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (and (and (<= 0 (%I addr$)) (< (%I addr$) (lib!pmem.pmemspec_t.impl&%6.len.? self!))) (= (EucDiv (%I addr$) (lib!pmem.pmemspec_t.const_persistence_chunk_size.? (I 0))) (%I chunk!))) (= (%I (vstd!seq.Seq.index.? $ (UINT 8) bytes! addr$)) (lib!pmem.pmemspec_t.impl&%5.flush_byte.? (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) addr$))))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) bytes! addr$))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush.? self! chunk! bytes!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::can_crash_as")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.can_crash_as.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.can_crash_as.) (forall ((self! Poly) (bytes! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? self! bytes!) (and (= (vstd!seq.Seq.len.? $ (UINT 8) bytes!) (lib!pmem.pmemspec_t.impl&%6.len.? self!)) (forall ((chunk$ Poly)) (! (=> (has_type chunk$ INT) (or (lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes.? self! chunk$ bytes!) (lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush.? self! chunk$ bytes!))) :pattern ((lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes.? self! chunk$ bytes!)) :pattern ((lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush.? self! chunk$ bytes!)))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.can_crash_as.? self! bytes!))))))
(set-info :comment ";; Function-Axioms lib::log::logimpl_v::UntrustedLogImpl::recover")
(assert (fuel_bool_default fuel%lib!log.logimpl_v.impl&%1.recover.))
(assert (=> (fuel_bool fuel%lib!log.logimpl_v.impl&%1.recover.) (forall ((mem! Poly) (log_id! Poly)) (! (= (lib!log.logimpl_v.impl&%1.recover.? mem! log_id!) (ite (not (lib!log.inv_v.metadata_types_set.? mem!)) core!option.Option./None (lib!log.layout_v.recover_state.? mem! log_id!))) :pattern ((lib!log.logimpl_v.impl&%1.recover.? mem! log_id!))))))
(assert (forall ((mem! Poly) (log_id! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type log_id! (UINT 128))) (has_type (Poly%core!option.Option. (lib!log.logimpl_v.impl&%1.recover.? mem! log_id!)) (TYPE%core!option.Option. $ TYPE%lib!log.logspec_t.AbstractLogState.))) :pattern ((lib!log.logimpl_v.impl&%1.recover.? mem! log_id!)))))
(set-info :comment ";; Function-Axioms lib::log::logimpl_t::can_only_crash_as_state")
(assert (fuel_bool_default fuel%lib!log.logimpl_t.can_only_crash_as_state.))
(assert (=> (fuel_bool fuel%lib!log.logimpl_t.can_only_crash_as_state.) (forall ((pm_region_view! Poly) (log_id! Poly) (state! Poly)) (! (= (lib!log.logimpl_t.can_only_crash_as_state.? pm_region_view! log_id! state!) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? pm_region_view! s$) (= (lib!log.logimpl_v.impl&%1.recover.? s$ log_id!) (core!option.Option./Some state!)))) :pattern ((lib!pmem.pmemspec_t.impl&%6.can_crash_as.? pm_region_view! s$))))) :pattern ((lib!log.logimpl_t.can_only_crash_as_state.? pm_region_view! log_id! state!))))))
(set-info :comment ";; Function-Axioms lib::log::logimpl_v::UntrustedLogImpl::view")
(assert (fuel_bool_default fuel%lib!log.logimpl_v.impl&%1.view.))
(assert (=> (fuel_bool fuel%lib!log.logimpl_v.impl&%1.view.) (forall ((self! Poly)) (! (= (lib!log.logimpl_v.impl&%1.view.? self!) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))) :pattern ((lib!log.logimpl_v.impl&%1.view.? self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.wrpm_t.CheckPermission. $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms lib::log::logspec_t::AbstractLogState::drop_pending_appends")
(assert (fuel_bool_default fuel%lib!log.logspec_t.impl&%0.drop_pending_appends.))
(assert (=> (fuel_bool fuel%lib!log.logspec_t.impl&%0.drop_pending_appends.) (forall ((self! Poly)) (! (= (lib!log.logspec_t.impl&%0.drop_pending_appends.? self!) (lib!log.logspec_t.AbstractLogState./AbstractLogState (%I (I (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. self!)))) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. self!)))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%I (I (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. self!)))))) :pattern ((lib!log.logspec_t.impl&%0.drop_pending_appends.? self!))))))
(set-info :comment ";; Function-Axioms lib::log::logimpl_v::UntrustedLogImpl::inv")
(assert (fuel_bool_default fuel%lib!log.logimpl_v.impl&%1.inv.))
(assert (=> (fuel_bool fuel%lib!log.logimpl_v.impl&%1.inv.) (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! Poly) (wrpm_region! Poly) (log_id! Poly)) (! (= (lib!log.logimpl_v.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& self! wrpm_region! log_id!) (and (and (and (and (and (and (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& wrpm_region!) (lib!log.inv_v.no_outstanding_writes_to_metadata.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm_region!)))) (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm_region!)) (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))) (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm_region!)) log_id! (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm_region!)) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))) (lib!log.logimpl_t.can_only_crash_as_state.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm_region!)) log_id! (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))) (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm_region!))))))) :pattern ((lib!log.logimpl_v.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& self! wrpm_region! log_id!))))))
(set-info :comment ";; Function-Axioms lib::log::logimpl_v::LogInfo::tentatively_append")
(assert (fuel_bool_default fuel%lib!log.logimpl_v.impl&%0.tentatively_append.))
(assert (=> (fuel_bool fuel%lib!log.logimpl_v.impl&%0.tentatively_append.) (forall ((self! Poly) (num_bytes! Poly)) (! (= (lib!log.logimpl_v.impl&%0.tentatively_append.? self! num_bytes!) (lib!log.logimpl_v.LogInfo./LogInfo (%I (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. self!)))) (%I (I (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. self!)))) (%I (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. self!)))) (%I (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. self!)))) (%I (I (uClip 64 (Add (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. self!)) (%I num_bytes!))))))) :pattern ((lib!log.logimpl_v.impl&%0.tentatively_append.? self! num_bytes!))))))
(assert (forall ((self! Poly) (num_bytes! Poly)) (! (=> (and (has_type self! TYPE%lib!log.logimpl_v.LogInfo.) (has_type num_bytes! (UINT 64))) (has_type (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.impl&%0.tentatively_append.? self! num_bytes!)) TYPE%lib!log.logimpl_v.LogInfo.)) :pattern ((lib!log.logimpl_v.impl&%0.tentatively_append.? self! num_bytes!)))))
(set-info :comment ";; Function-Axioms lib::log::logspec_t::AbstractLogState::initialize")
(assert (fuel_bool_default fuel%lib!log.logspec_t.impl&%0.initialize.))
(assert (=> (fuel_bool fuel%lib!log.logspec_t.impl&%0.initialize.) (forall ((capacity! Poly)) (! (= (lib!log.logspec_t.impl&%0.initialize.? capacity!) (lib!log.logspec_t.AbstractLogState./AbstractLogState (%I (I 0)) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%I capacity!))) :pattern ((lib!log.logspec_t.impl&%0.initialize.? capacity!))))))
(set-info :comment ";; Function-Axioms lib::log::logspec_t::AbstractLogState::tentatively_append")
(assert (fuel_bool_default fuel%lib!log.logspec_t.impl&%0.tentatively_append.))
(assert (=> (fuel_bool fuel%lib!log.logspec_t.impl&%0.tentatively_append.) (forall ((self! Poly) (bytes! Poly)) (! (= (lib!log.logspec_t.impl&%0.tentatively_append.? self! bytes!) (lib!log.logspec_t.AbstractLogState./AbstractLogState (%I (I (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. self!)))) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. self!)))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. self!))) bytes!)) (%I (I (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. self!)))))) :pattern ((lib!log.logspec_t.impl&%0.tentatively_append.? self! bytes!))))))
(set-info :comment ";; Function-Axioms lib::log::logspec_t::AbstractLogState::commit")
(assert (fuel_bool_default fuel%lib!log.logspec_t.impl&%0.commit.))
(assert (=> (fuel_bool fuel%lib!log.logspec_t.impl&%0.commit.) (forall ((self! Poly)) (! (= (lib!log.logspec_t.impl&%0.commit.? self!) (lib!log.logspec_t.AbstractLogState./AbstractLogState (%I (I (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. self!)))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. self!))) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. self!))))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%I (I (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. self!)))))) :pattern ((lib!log.logspec_t.impl&%0.commit.? self!))))))
(set-info :comment ";; Function-Axioms lib::log::logspec_t::AbstractLogState::advance_head")
(assert (fuel_bool_default fuel%lib!log.logspec_t.impl&%0.advance_head.))
(assert (=> (fuel_bool fuel%lib!log.logspec_t.impl&%0.advance_head.) (forall ((self! Poly) (new_head! Poly)) (! (= (lib!log.logspec_t.impl&%0.advance_head.? self! new_head!) (let ((new_log$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. self!))) (I (Sub (%I new_head!) (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. self!)))) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. self!))))))))) (lib!log.logspec_t.AbstractLogState./AbstractLogState (%I new_head!) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. new_log$)) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. self!)))) (%I (I (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. self!))))))) :pattern ((lib!log.logspec_t.impl&%0.advance_head.? self! new_head!))))))
(set-info :comment ";; Function-Axioms lib::log::logspec_t::AbstractLogState::read")
(assert (fuel_bool_default fuel%lib!log.logspec_t.impl&%0.read.))
(assert (=> (fuel_bool fuel%lib!log.logspec_t.impl&%0.read.) (forall ((self! Poly) (pos! Poly) (len! Poly)) (! (= (lib!log.logspec_t.impl&%0.read.? self! pos! len!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. self!))) (I (Sub (%I pos!) (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. self!)))) (I (Add (Sub (%I pos!) (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. self!))) (%I len!)))))) :pattern ((lib!log.logspec_t.impl&%0.read.? self! pos! len!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%7::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%7::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%27::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT SZ)) (I 8))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%27::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT SZ)) (I 8))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%55::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ BOOL) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%55::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ BOOL) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%60::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (ARRAY T&. T& N&. N&)) (I (nClip (Mul (const_int N&) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? T&. T&))))))) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (ARRAY T&. T& N&. N&)))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%60::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (ARRAY T&. T& N&. N&)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? T&. T&))) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (ARRAY T&. T& N&. N&)))))))
(set-info :comment ";; Function-Specs lib::pmem::subregion_v::memories_differ_only_where_subregion_allows")
(declare-fun req%lib!pmem.subregion_v.memories_differ_only_where_subregion_allows. (Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((mem1! Poly) (mem2! Poly) (start! Poly) (len! Poly) (is_writable_absolute_addr_fn! Poly)) (! (= (req%lib!pmem.subregion_v.memories_differ_only_where_subregion_allows. mem1! mem2! start! len! is_writable_absolute_addr_fn!) (and (=> %%global_location_label%%21 (<= 0 (%I start!))) (=> %%global_location_label%%22 (<= 0 (%I len!))) (=> %%global_location_label%%23 (= (vstd!seq.Seq.len.? $ (UINT 8) mem1!) (vstd!seq.Seq.len.? $ (UINT 8) mem2!))) (=> %%global_location_label%%24 (<= (nClip (Add (%I start!) (%I len!))) (vstd!seq.Seq.len.? $ (UINT 8) mem1!))))) :pattern ((req%lib!pmem.subregion_v.memories_differ_only_where_subregion_allows. mem1! mem2! start! len! is_writable_absolute_addr_fn!)))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::memories_differ_only_where_subregion_allows")
(assert (fuel_bool_default fuel%lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.))
(assert (=> (fuel_bool fuel%lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.) (forall ((mem1! Poly) (mem2! Poly) (start! Poly) (len! Poly) (is_writable_absolute_addr_fn! Poly)) (! (= (lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.? mem1! mem2! start! len! is_writable_absolute_addr_fn!) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (or (or (and (<= 0 (%I addr$)) (< (%I addr$) (%I start!))) (and (<= (nClip (Add (%I start!) (%I len!))) (%I addr$)) (< (%I addr$) (vstd!seq.Seq.len.? $ (UINT 8) mem1!)))) (and (and (<= (%I start!) (%I addr$)) (< (%I addr$) (nClip (Add (%I start!) (%I len!))))) (not (%B (%%apply%%0 (%Poly%fun%1. is_writable_absolute_addr_fn!) addr$))))) (= (vstd!seq.Seq.index.? $ (UINT 8) mem1! addr$) (vstd!seq.Seq.index.? $ (UINT 8) mem2! addr$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) mem2! addr$))))) :pattern ((lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.? mem1! mem2! start! len! is_writable_absolute_addr_fn!))))))
(set-info :comment ";; Function-Specs lib::pmem::subregion_v::views_differ_only_where_subregion_allows")
(declare-fun req%lib!pmem.subregion_v.views_differ_only_where_subregion_allows. (Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((v1! Poly) (v2! Poly) (start! Poly) (len! Poly) (is_writable_absolute_addr_fn! Poly)) (! (= (req%lib!pmem.subregion_v.views_differ_only_where_subregion_allows. v1! v2! start! len! is_writable_absolute_addr_fn!) (and (=> %%global_location_label%%25 (<= 0 (%I start!))) (=> %%global_location_label%%26 (<= 0 (%I len!))) (=> %%global_location_label%%27 (<= (nClip (Add (%I start!) (%I len!))) (lib!pmem.pmemspec_t.impl&%6.len.? v1!))) (=> %%global_location_label%%28 (= (lib!pmem.pmemspec_t.impl&%6.len.? v1!) (lib!pmem.pmemspec_t.impl&%6.len.? v2!))))) :pattern ((req%lib!pmem.subregion_v.views_differ_only_where_subregion_allows. v1! v2! start! len! is_writable_absolute_addr_fn!)))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::views_differ_only_where_subregion_allows")
(assert (fuel_bool_default fuel%lib!pmem.subregion_v.views_differ_only_where_subregion_allows.))
(assert (=> (fuel_bool fuel%lib!pmem.subregion_v.views_differ_only_where_subregion_allows.) (forall ((v1! Poly) (v2! Poly) (start! Poly) (len! Poly) (is_writable_absolute_addr_fn! Poly)) (! (= (lib!pmem.subregion_v.views_differ_only_where_subregion_allows.? v1! v2! start! len! is_writable_absolute_addr_fn!) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (or (or (and (<= 0 (%I addr$)) (< (%I addr$) (%I start!))) (and (<= (nClip (Add (%I start!) (%I len!))) (%I addr$)) (< (%I addr$) (lib!pmem.pmemspec_t.impl&%6.len.? v1!)))) (and (and (<= (%I start!) (%I addr$)) (< (%I addr$) (nClip (Add (%I start!) (%I len!))))) (not (%B (%%apply%%0 (%Poly%fun%1. is_writable_absolute_addr_fn!) addr$))))) (= (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!))) addr$) (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v2!))) addr$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v2!))) addr$))))) :pattern ((lib!pmem.subregion_v.views_differ_only_where_subregion_allows.? v1! v2! start! len! is_writable_absolute_addr_fn!))))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::condition_sufficient_to_create_wrpm_subregion")
(assert (fuel_bool_default fuel%lib!pmem.subregion_v.condition_sufficient_to_create_wrpm_subregion.))
(assert (=> (fuel_bool fuel%lib!pmem.subregion_v.condition_sufficient_to_create_wrpm_subregion.) (forall ((Perm&. Dcr) (Perm& Type) (region_view! Poly) (perm! Poly) (start! Poly) (len! Poly) (is_writable_absolute_addr_fn! Poly) (condition! Poly)) (! (= (lib!pmem.subregion_v.condition_sufficient_to_create_wrpm_subregion.? Perm&. Perm& region_view! perm! start! len! is_writable_absolute_addr_fn! condition!) (and (and (and (and (<= 0 (%I len!)) (let ((tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? region_view!))) (and (<= (Add (%I start!) (%I len!)) tmp%%$) (<= tmp%%$ 18446744073709551615)))) (forall ((crash_state$ Poly)) (! (=> (has_type crash_state$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? region_view! crash_state$) (%B (%%apply%%0 (%Poly%fun%1. condition!) crash_state$)))) :pattern ((lib!pmem.pmemspec_t.impl&%6.can_crash_as.? region_view! crash_state$))))) (forall ((crash_state$ Poly)) (! (=> (has_type crash_state$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (%B (%%apply%%0 (%Poly%fun%1. condition!) crash_state$)) (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! crash_state$)))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! crash_state$))))) (forall ((s1$ Poly) (s2$ Poly)) (! (=> (and (has_type s1$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type s2$ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (=> (and (and (%B (%%apply%%0 (%Poly%fun%1. condition!) s1$)) (let ((tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) s2$))) (and (= (vstd!seq.Seq.len.? $ (UINT 8) s1$) tmp%%$) (= tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? region_view!))))) (lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.? s1$ s2$ start! len! is_writable_absolute_addr_fn!)) (%B (%%apply%%0 (%Poly%fun%1. condition!) s2$)))) :pattern ((lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.? s1$ s2$ start! len! is_writable_absolute_addr_fn!)))))) :pattern ((lib!pmem.subregion_v.condition_sufficient_to_create_wrpm_subregion.? Perm&. Perm& region_view! perm! start! len! is_writable_absolute_addr_fn! condition!))))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::start")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (<= 0 (lib!pmem.subregion_v.impl&%0.start.? self!))) :pattern ((lib!pmem.subregion_v.impl&%0.start.? self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::len")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (<= 0 (lib!pmem.subregion_v.impl&%0.len.? self!))) :pattern ((lib!pmem.subregion_v.impl&%0.len.? self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::is_writable_absolute_addr_fn")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (has_type (Poly%fun%1. (lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? self!)) (TYPE%fun%1. $ INT $ BOOL))) :pattern ((lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::is_writable_relative_addr")
(assert (fuel_bool_default fuel%lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.))
(assert (=> (fuel_bool fuel%lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? self! addr!) (%B (%%apply%%0 (lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? self!) (I (Add (%I addr!) (lib!pmem.subregion_v.impl&%0.start.? self!)))))) :pattern ((lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? self! addr!))))))
(set-info :comment ";; Function-Axioms lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::inv")
(assert (fuel_bool_default fuel%lib!pmem.subregion_v.impl&%0.inv.))
(assert (=> (fuel_bool fuel%lib!pmem.subregion_v.impl&%0.inv.) (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! Poly) (wrpm! Poly) (perm! Poly)) (! (= (lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& self! wrpm! perm!) (and (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& self! wrpm!))) (lib!pmem.subregion_v.impl&%0.len.? self!)) (lib!pmem.subregion_v.impl&%0.opaque_inv.? Perm&. Perm& PMRegion&. PMRegion& self! wrpm! perm!))) :pattern ((lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& self! wrpm! perm!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. T&. T& T&. T&) :pattern ((tr_bound%core!convert.From. T&. T& T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (TYPE%tuple%2. T&. T& T&. T&) $ (ARRAY T&. T& $ (CONST_INT 2))) :pattern ((tr_bound%core!convert.From. $ (TYPE%tuple%2. T&. T& T&. T&) $ (ARRAY T&. T& $ (CONST_INT 2)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (ARRAY T&. T& $ (CONST_INT 3)) $ (TYPE%tuple%3. T&. T& T&. T& T&. T&)) :pattern ((tr_bound%core!convert.From. $ (ARRAY T&. T& $ (CONST_INT 3)) $ (TYPE%tuple%3. T&. T& T&. T& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (ARRAY T&. T& $ (CONST_INT 2)) $ (TYPE%tuple%2. T&. T& T&. T&)) :pattern ((tr_bound%core!convert.From. $ (ARRAY T&. T& $ (CONST_INT 2)) $ (TYPE%tuple%2. T&. T& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 128) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 128) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 128) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 8) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 64) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 64) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (TYPE%core!option.Option. (REF T&.) T&) (REF $) (TYPE%core!option.Option. T&. T&)) :pattern ((tr_bound%core!convert.From. $ (TYPE%core!option.Option. (REF T&.) T&) (REF $) (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%core!convert.From. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (TYPE%tuple%3. T&. T& T&. T& T&. T&) $ (ARRAY T&. T& $ (CONST_INT 3))) :pattern ((tr_bound%core!convert.From. $ (TYPE%tuple%3. T&. T& T&. T& T&. T&) $ (ARRAY T&. T& $ (CONST_INT 3)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT SZ) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT SZ) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) (REF $) (SLICE T&. T&))) :pattern ((tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) (REF $) (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) (REF $) (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) (REF $) (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. E&. E&)) (tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type)) (! (=> (and (tr_bound%core!clone.Clone. B&. B&) (tr_bound%core!clone.Clone. C&. C&)) (tr_bound%core!clone.Clone. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%core!convert.Infallible.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. T&. T&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!log.layout_v.RegionMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!log.layout_v.LogMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!pmem.pmemspec_t.PmemError.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.traits_t.PmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Function-Specs lib::log::append_v::lemma_tentatively_append")
(declare-fun req%lib!log.append_v.lemma_tentatively_append. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. vstd!seq.Seq<u8.>. lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState.) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (bytes_to_append! vstd!seq.Seq<u8.>.) (prev_info! lib!log.logimpl_v.LogInfo.) (prev_state! lib!log.logspec_t.AbstractLogState.)) (! (= (req%lib!log.append_v.lemma_tentatively_append. pm_region_view! bytes_to_append! prev_info! prev_state!) (and (=> %%global_location_label%%29 (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))))) (=> %%global_location_label%%30 (lib!log.inv_v.info_consistent_with_log_area.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (Poly%lib!log.logimpl_v.LogInfo. prev_info!) (Poly%lib!log.logspec_t.AbstractLogState. prev_state!))) (=> %%global_location_label%%31 (let ((log_area_len$ (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))))) (let ((num_bytes$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!)))) (let ((max_len_without_wrapping$ (Sub log_area_len$ (lib!log.layout_v.relative_log_pos_to_log_area_offset.? (I (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I log_area_len$))))) (and (and (and (< 0 num_bytes$) (<= num_bytes$ max_len_without_wrapping$)) (<= (Add (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))) num_bytes$) log_area_len$)) (<= (Add (Add (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) num_bytes$) 340282366920938463463374607431768211455)))))))) :pattern ((req%lib!log.append_v.lemma_tentatively_append. pm_region_view! bytes_to_append! prev_info! prev_state!)))))
(declare-fun ens%lib!log.append_v.lemma_tentatively_append. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. vstd!seq.Seq<u8.>. lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState.) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (bytes_to_append! vstd!seq.Seq<u8.>.) (prev_info! lib!log.logimpl_v.LogInfo.) (prev_state! lib!log.logspec_t.AbstractLogState.)) (! (= (ens%lib!log.append_v.lemma_tentatively_append. pm_region_view! bytes_to_append! prev_info! prev_state!) (let ((log_area_len$ (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))))) (let ((num_bytes$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!)))) (let ((new_info$ (lib!log.logimpl_v.impl&%0.tentatively_append.? (Poly%lib!log.logimpl_v.LogInfo. prev_info!) (I (uClip 64 num_bytes$))))) (let ((new_state$ (lib!log.logspec_t.impl&%0.tentatively_append.? (Poly%lib!log.logspec_t.AbstractLogState. prev_state!) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!)))) (let ((write_addr$ (lib!log.layout_v.relative_log_pos_to_log_area_offset.? (I (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I log_area_len$)))) (let ((pm_region_view2$ (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (I write_addr$) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!)))) (and (and (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (I write_addr$) (I (Add write_addr$ num_bytes$))) (forall ((log_area_offset$ Poly)) (! (=> (has_type log_area_offset$ INT) (=> (and (<= write_addr$ (%I log_area_offset$)) (< (%I log_area_offset$) (Add write_addr$ num_bytes$))) (lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) log_area_offset$))) :pattern ((lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) log_area_offset$))))) (lib!log.inv_v.info_consistent_with_log_area.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view2$) (Poly%lib!log.logimpl_v.LogInfo. new_info$) (Poly%lib!log.logspec_t.AbstractLogState. new_state$)))))))))) :pattern ((ens%lib!log.append_v.lemma_tentatively_append. pm_region_view! bytes_to_append! prev_info! prev_state!)))))
(set-info :comment ";; Function-Specs lib::log::append_v::lemma_tentatively_append_wrapping")
(declare-fun req%lib!log.append_v.lemma_tentatively_append_wrapping. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. vstd!seq.Seq<u8.>. lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState.) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (bytes_to_append! vstd!seq.Seq<u8.>.) (prev_info! lib!log.logimpl_v.LogInfo.) (prev_state! lib!log.logspec_t.AbstractLogState.)) (! (= (req%lib!log.append_v.lemma_tentatively_append_wrapping. pm_region_view! bytes_to_append! prev_info! prev_state!) (and (=> %%global_location_label%%32 (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))))) (=> %%global_location_label%%33 (lib!log.inv_v.info_consistent_with_log_area.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (Poly%lib!log.logimpl_v.LogInfo. prev_info!) (Poly%lib!log.logspec_t.AbstractLogState. prev_state!))) (=> %%global_location_label%%34 (let ((log_area_len$ (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))))) (let ((num_bytes$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!)))) (let ((max_len_without_wrapping$ (Sub log_area_len$ (lib!log.layout_v.relative_log_pos_to_log_area_offset.? (I (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I log_area_len$))))) (and (and (> num_bytes$ max_len_without_wrapping$) (<= (Add (Add (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) num_bytes$) 340282366920938463463374607431768211455)) (<= num_bytes$ (Sub log_area_len$ (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))))))))))) :pattern ((req%lib!log.append_v.lemma_tentatively_append_wrapping. pm_region_view! bytes_to_append! prev_info! prev_state!)))))
(declare-fun ens%lib!log.append_v.lemma_tentatively_append_wrapping. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. vstd!seq.Seq<u8.>. lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState.) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (bytes_to_append! vstd!seq.Seq<u8.>.) (prev_info! lib!log.logimpl_v.LogInfo.) (prev_state! lib!log.logspec_t.AbstractLogState.)) (! (= (ens%lib!log.append_v.lemma_tentatively_append_wrapping. pm_region_view! bytes_to_append! prev_info! prev_state!) (let ((log_area_len$ (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))))) (let ((max_len_without_wrapping$ (Sub log_area_len$ (lib!log.layout_v.relative_log_pos_to_log_area_offset.? (I (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I log_area_len$))))) (let ((new_info$ (lib!log.logimpl_v.impl&%0.tentatively_append.? (Poly%lib!log.logimpl_v.LogInfo. prev_info!) (I (uClip 64 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!))))))) (let ((new_state$ (lib!log.logspec_t.impl&%0.tentatively_append.? (Poly%lib!log.logspec_t.AbstractLogState. prev_state!) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!)))) (let ((bytes_to_append_part1$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!) (I 0) (I max_len_without_wrapping$))))) (let ((bytes_to_append_part2$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!) (I max_len_without_wrapping$) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append!))))))) (let ((write_addr$ (lib!log.layout_v.relative_log_pos_to_log_area_offset.? (I (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I log_area_len$)))) (let ((pm_region_view2$ (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (I write_addr$) (Poly%vstd!seq.Seq<u8.>. bytes_to_append_part1$)))) (let ((pm_region_view3$ (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view2$) (I 0) (Poly%vstd!seq.Seq<u8.>. bytes_to_append_part2$)))) (and (and (and (and (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (I write_addr$) (I (Add write_addr$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append_part1$))))) (forall ((log_area_offset$ Poly)) (! (=> (has_type log_area_offset$ INT) (=> (and (<= write_addr$ (%I log_area_offset$)) (< (%I log_area_offset$) (Add write_addr$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append_part1$))))) (lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) log_area_offset$))) :pattern ((lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) log_area_offset$))))) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view2$) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append_part2$))))) (forall ((log_area_offset$ Poly)) (! (=> (has_type log_area_offset$ INT) (=> (and (<= 0 (%I log_area_offset$)) (< (%I log_area_offset$) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_append_part2$)))) (lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) log_area_offset$))) :pattern ((lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))) log_area_offset$))))) (lib!log.inv_v.info_consistent_with_log_area.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view3$) (Poly%lib!log.logimpl_v.LogInfo. new_info$) (Poly%lib!log.logspec_t.AbstractLogState. new_state$))))))))))))) :pattern ((ens%lib!log.append_v.lemma_tentatively_append_wrapping. pm_region_view! bytes_to_append! prev_info! prev_state!)))))
(set-info :comment ";; Function-Specs lib::log::layout_v::lemma_establish_subrange_equivalence")
(declare-fun ens%lib!log.layout_v.lemma_establish_subrange_equivalence. (vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>.) Bool)
(assert (forall ((mem1! vstd!seq.Seq<u8.>.) (mem2! vstd!seq.Seq<u8.>.)) (! (= (ens%lib!log.layout_v.lemma_establish_subrange_equivalence. mem1! mem2!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!) i$ j$) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem2!) i$ j$)) (= (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!) i$ j$) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem2!) i$ j$)))) :pattern ((vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!) i$ j$) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem2!) i$ j$))))) :pattern ((ens%lib!log.layout_v.lemma_establish_subrange_equivalence. mem1! mem2!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_metadata_consistent_with_info_after_cdb_update")
(declare-fun req%lib!log.inv_v.lemma_metadata_consistent_with_info_after_cdb_update. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int vstd!seq.Seq<u8.>. Bool lib!log.logimpl_v.LogInfo.) Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((old_pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (new_pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (log_id! Int) (new_cdb_bytes! vstd!seq.Seq<u8.>.) (new_cdb! Bool) (info! lib!log.logimpl_v.LogInfo.)) (! (= (req%lib!log.inv_v.lemma_metadata_consistent_with_info_after_cdb_update. old_pm_region_view! new_pm_region_view! log_id! new_cdb_bytes! new_cdb! info!) (and (=> %%global_location_label%%35 (=> (= new_cdb! false) (= new_cdb_bytes! (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I lib!pmem.pmemspec_t.CDB_FALSE.?)))))) (=> %%global_location_label%%36 (=> (= new_cdb! true) (= new_cdb_bytes! (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I lib!pmem.pmemspec_t.CDB_TRUE.?)))))) (=> %%global_location_label%%37 (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_cdb_bytes!)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (=> %%global_location_label%%38 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!))) (=> %%global_location_label%%39 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view!))) (=> %%global_location_label%%40 (ext_eq false TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view!) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (Poly%vstd!seq.Seq<u8.>. new_cdb_bytes!))))))) (=> %%global_location_label%%41 (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!) (I log_id!) (B new_cdb!) (Poly%lib!log.logimpl_v.LogInfo. info!))))) :pattern ((req%lib!log.inv_v.lemma_metadata_consistent_with_info_after_cdb_update. old_pm_region_view! new_pm_region_view! log_id! new_cdb_bytes! new_cdb! info!)))))
(declare-fun ens%lib!log.inv_v.lemma_metadata_consistent_with_info_after_cdb_update. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int vstd!seq.Seq<u8.>. Bool lib!log.logimpl_v.LogInfo.) Bool)
(assert (forall ((old_pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (new_pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (log_id! Int) (new_cdb_bytes! vstd!seq.Seq<u8.>.) (new_cdb! Bool) (info! lib!log.logimpl_v.LogInfo.)) (! (= (ens%lib!log.inv_v.lemma_metadata_consistent_with_info_after_cdb_update. old_pm_region_view! new_pm_region_view! log_id! new_cdb_bytes! new_cdb! info!) (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view!) (I log_id!) (B new_cdb!) (Poly%lib!log.logimpl_v.LogInfo. info!))) :pattern ((ens%lib!log.inv_v.lemma_metadata_consistent_with_info_after_cdb_update. old_pm_region_view! new_pm_region_view! log_id! new_cdb_bytes! new_cdb! info!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_addresses_in_log_area_correspond_to_relative_log_positions")
(declare-fun req%lib!log.inv_v.lemma_addresses_in_log_area_correspond_to_relative_log_positions. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!log.logimpl_v.LogInfo.) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (info! lib!log.logimpl_v.LogInfo.)) (! (= (req%lib!log.inv_v.lemma_addresses_in_log_area_correspond_to_relative_log_positions. pm_region_view! info!) (and (=> %%global_location_label%%42 (>= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))))) (=> %%global_location_label%%43 (< (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!))) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!))))) (=> %%global_location_label%%44 (> (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!))) 0)))) :pattern ((req%lib!log.inv_v.lemma_addresses_in_log_area_correspond_to_relative_log_positions. pm_region_view! info!)))))
(declare-fun ens%lib!log.inv_v.lemma_addresses_in_log_area_correspond_to_relative_log_positions. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!log.logimpl_v.LogInfo.) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (info! lib!log.logimpl_v.LogInfo.)) (! (= (ens%lib!log.inv_v.lemma_addresses_in_log_area_correspond_to_relative_log_positions. pm_region_view! info!) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (and (<= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (%I addr$)) (< (%I addr$) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))))) (let ((log_area_offset$ (Sub (%I addr$) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))) (let ((pos_relative_to_head$ (ite (>= log_area_offset$ (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (Sub log_area_offset$ (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (Add (Sub log_area_offset$ (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!))))))) (and (and (<= 0 pos_relative_to_head$) (< pos_relative_to_head$ (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!))))) (= (%I addr$) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.layout_v.relative_log_pos_to_log_area_offset.? (I pos_relative_to_head$) (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))))))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!)))) addr$))))) :pattern ((ens%lib!log.inv_v.lemma_addresses_in_log_area_correspond_to_relative_log_positions. pm_region_view! info!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_metadata_set_after_crash")
(declare-fun req%lib!log.inv_v.lemma_metadata_set_after_crash. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Bool) Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (cdb! Bool)) (! (= (req%lib!log.inv_v.lemma_metadata_set_after_crash. pm_region_view! cdb!) (and (=> %%global_location_label%%45 (lib!log.inv_v.no_outstanding_writes_to_active_metadata.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (B cdb!))) (=> %%global_location_label%%46 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!))))) (=> %%global_location_label%%47 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (B cdb!))))) :pattern ((req%lib!log.inv_v.lemma_metadata_set_after_crash. pm_region_view! cdb!)))))
(declare-fun ens%lib!log.inv_v.lemma_metadata_set_after_crash. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Bool) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (cdb! Bool)) (! (= (ens%lib!log.inv_v.lemma_metadata_set_after_crash. pm_region_view! cdb!) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (and (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) s$) (let ((tmp%%$ lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?)) (let ((tmp%%$1 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)) (and (and (<= 0 tmp%%$) (< tmp%%$ tmp%%$1)) (< tmp%%$1 (vstd!seq.Seq.len.? $ (UINT 8) s$)))))) (lib!log.inv_v.metadata_types_set.? s$))) :pattern ((lib!log.inv_v.metadata_types_set.? s$))))) :pattern ((ens%lib!log.inv_v.lemma_metadata_set_after_crash. pm_region_view! cdb!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_invariants_imply_crash_recover_forall")
(declare-fun req%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int Bool lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState.) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (log_id! Int) (cdb! Bool) (info! lib!log.logimpl_v.LogInfo.) (state! lib!log.logspec_t.AbstractLogState.)) (! (= (req%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. pm_region_view! log_id! cdb! info! state!) (and (=> %%global_location_label%%48 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (B cdb!))) (=> %%global_location_label%%49 (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info!))) (=> %%global_location_label%%50 (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (Poly%lib!log.logimpl_v.LogInfo. info!) (Poly%lib!log.logspec_t.AbstractLogState. state!))) (=> %%global_location_label%%51 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!))))))) :pattern ((req%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. pm_region_view! log_id! cdb! info! state!)))))
(declare-fun ens%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int Bool lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState.) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (log_id! Int) (cdb! Bool) (info! lib!log.logimpl_v.LogInfo.) (state! lib!log.logspec_t.AbstractLogState.)) (! (= (ens%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. pm_region_view! log_id! cdb! info! state!) (forall ((mem$ Poly)) (! (=> (has_type mem$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) mem$) (and (and (= (lib!log.layout_v.recover_cdb.? mem$) (core!option.Option./Some (B cdb!))) (= (lib!log.layout_v.recover_state.? mem$ (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. state!)))))) (lib!log.inv_v.metadata_types_set.? mem$)))) :pattern ((lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) mem$))))) :pattern ((ens%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. pm_region_view! log_id! cdb! info! state!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_metadata_matches_implies_metadata_types_set")
(declare-fun req%lib!log.inv_v.lemma_metadata_matches_implies_metadata_types_set. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!pmem.pmemspec_t.PersistentMemoryRegionView. Bool) Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((pm1! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (pm2! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (cdb! Bool)) (! (= (req%lib!log.inv_v.lemma_metadata_matches_implies_metadata_types_set. pm1! pm2! cdb!) (and (=> %%global_location_label%%52 (lib!log.inv_v.no_outstanding_writes_to_active_metadata.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm1!) (B cdb!))) (=> %%global_location_label%%53 (lib!log.inv_v.no_outstanding_writes_to_active_metadata.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm2!) (B cdb!))) (=> %%global_location_label%%54 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm1!))))) (=> %%global_location_label%%55 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm1!) (B cdb!))) (=> %%global_location_label%%56 (let ((tmp%%$ lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)) (and (< 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm1!)))))))) (=> %%global_location_label%%57 (let ((tmp%%$ lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)) (and (< 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm2!)))))))) (=> %%global_location_label%%58 (lib!log.inv_v.active_metadata_is_equal.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm1!) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm2!))) (=> %%global_location_label%%59 (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm1!)) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm2!)))))) :pattern ((req%lib!log.inv_v.lemma_metadata_matches_implies_metadata_types_set. pm1! pm2! cdb!)))))
(declare-fun ens%lib!log.inv_v.lemma_metadata_matches_implies_metadata_types_set. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!pmem.pmemspec_t.PersistentMemoryRegionView. Bool) Bool)
(assert (forall ((pm1! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (pm2! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (cdb! Bool)) (! (= (ens%lib!log.inv_v.lemma_metadata_matches_implies_metadata_types_set. pm1! pm2! cdb!) (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm2!))))) :pattern ((ens%lib!log.inv_v.lemma_metadata_matches_implies_metadata_types_set. pm1! pm2! cdb!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_flushing_metadata_maintains_invariants")
(declare-fun req%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int Bool lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState.) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (log_id! Int) (cdb! Bool) (info! lib!log.logimpl_v.LogInfo.) (state! lib!log.logspec_t.AbstractLogState.)) (! (= (req%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. pm_region_view! log_id! cdb! info! state!) (and (=> %%global_location_label%%60 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (B cdb!))) (=> %%global_location_label%%61 (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info!))) (=> %%global_location_label%%62 (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (Poly%lib!log.logimpl_v.LogInfo. info!) (Poly%lib!log.logspec_t.AbstractLogState. state!))) (=> %%global_location_label%%63 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!))))))) :pattern ((req%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. pm_region_view! log_id! cdb! info! state!)))))
(declare-fun ens%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int Bool lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState.) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (log_id! Int) (cdb! Bool) (info! lib!log.logimpl_v.LogInfo.) (state! lib!log.logspec_t.AbstractLogState.)) (! (= (ens%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. pm_region_view! log_id! cdb! info! state!) (let ((pm_region_view2$ (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!)))) (and (and (and (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view2$) (B cdb!)) (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view2$) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info!))) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view2$) (Poly%lib!log.logimpl_v.LogInfo. info!) (Poly%lib!log.logspec_t.AbstractLogState. state!))) (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view2$))))))) :pattern ((ens%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. pm_region_view! log_id! cdb! info! state!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_if_view_differs_only_in_log_area_parts_not_accessed_by_recovery_then_recover_state_matches")
(declare-fun req%lib!log.inv_v.lemma_if_view_differs_only_in_log_area_parts_not_accessed_by_recovery_then_recover_state_matches. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!pmem.pmemspec_t.PersistentMemoryRegionView. vstd!seq.Seq<u8.>. Int Bool lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState. %%Function%%) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((v1! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (v2! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (crash_state! vstd!seq.Seq<u8.>.) (log_id! Int) (cdb! Bool) (info! lib!log.logimpl_v.LogInfo.) (state! lib!log.logspec_t.AbstractLogState.) (is_writable_absolute_addr! %%Function%%)) (! (= (req%lib!log.inv_v.lemma_if_view_differs_only_in_log_area_parts_not_accessed_by_recovery_then_recover_state_matches. v1! v2! crash_state! log_id! cdb! info! state! is_writable_absolute_addr!) (and (=> %%global_location_label%%64 (lib!log.inv_v.no_outstanding_writes_to_metadata.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!))) (=> %%global_location_label%%65 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!) (B cdb!))) (=> %%global_location_label%%66 (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info!))) (=> %%global_location_label%%67 (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!) (Poly%lib!log.logimpl_v.LogInfo. info!) (Poly%lib!log.logspec_t.AbstractLogState. state!))) (=> %%global_location_label%%68 (<= (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!)))) (=> %%global_location_label%%69 (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v2!) (Poly%vstd!seq.Seq<u8.>. crash_state!))) (=> %%global_location_label%%70 (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!)) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v2!)))) (=> %%global_location_label%%71 (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (= (%B (%%apply%%0 is_writable_absolute_addr! addr$)) (lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (I (Sub (%I addr$) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))))) :pattern ((%%apply%%0 is_writable_absolute_addr! addr$))))) (=> %%global_location_label%%72 (lib!pmem.subregion_v.views_differ_only_where_subregion_allows.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v2!) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. info!)))) (Poly%fun%1. is_writable_absolute_addr!))))) :pattern ((req%lib!log.inv_v.lemma_if_view_differs_only_in_log_area_parts_not_accessed_by_recovery_then_recover_state_matches. v1! v2! crash_state! log_id! cdb! info! state! is_writable_absolute_addr!)))))
(declare-fun ens%lib!log.inv_v.lemma_if_view_differs_only_in_log_area_parts_not_accessed_by_recovery_then_recover_state_matches. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!pmem.pmemspec_t.PersistentMemoryRegionView. vstd!seq.Seq<u8.>. Int Bool lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState. %%Function%%) Bool)
(assert (forall ((v1! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (v2! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (crash_state! vstd!seq.Seq<u8.>.) (log_id! Int) (cdb! Bool) (info! lib!log.logimpl_v.LogInfo.) (state! lib!log.logspec_t.AbstractLogState.) (is_writable_absolute_addr! %%Function%%)) (! (= (ens%lib!log.inv_v.lemma_if_view_differs_only_in_log_area_parts_not_accessed_by_recovery_then_recover_state_matches. v1! v2! crash_state! log_id! cdb! info! state! is_writable_absolute_addr!) (and (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!)))) (= (lib!log.layout_v.recover_state.? (Poly%vstd!seq.Seq<u8.>. crash_state!) (I log_id!)) (lib!log.layout_v.recover_state.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. v1!))) (I log_id!))))) :pattern ((ens%lib!log.inv_v.lemma_if_view_differs_only_in_log_area_parts_not_accessed_by_recovery_then_recover_state_matches. v1! v2! crash_state! log_id! cdb! info! state! is_writable_absolute_addr!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_header_bytes_equal_implies_active_metadata_bytes_equal")
(declare-fun req%lib!log.inv_v.lemma_header_bytes_equal_implies_active_metadata_bytes_equal. (vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>.) Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((mem1! vstd!seq.Seq<u8.>.) (mem2! vstd!seq.Seq<u8.>.)) (! (= (req%lib!log.inv_v.lemma_header_bytes_equal_implies_active_metadata_bytes_equal. mem1! mem2!) (and (=> %%global_location_label%%73 (<= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!)))) (=> %%global_location_label%%74 (<= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem2!)))) (=> %%global_location_label%%75 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!) (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem2!) (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)))) (=> %%global_location_label%%76 (is-core!option.Option./Some_ (lib!log.layout_v.deserialize_and_check_log_cdb.? (Poly%vstd!seq.Seq<u8.>. mem1!)))))) :pattern ((req%lib!log.inv_v.lemma_header_bytes_equal_implies_active_metadata_bytes_equal. mem1! mem2!)))))
(declare-fun ens%lib!log.inv_v.lemma_header_bytes_equal_implies_active_metadata_bytes_equal. (vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>.) Bool)
(assert (forall ((mem1! vstd!seq.Seq<u8.>.) (mem2! vstd!seq.Seq<u8.>.)) (! (= (ens%lib!log.inv_v.lemma_header_bytes_equal_implies_active_metadata_bytes_equal. mem1! mem2!) (lib!log.inv_v.active_metadata_bytes_are_equal.? (Poly%vstd!seq.Seq<u8.>. mem1!) (Poly%vstd!seq.Seq<u8.>. mem2!))) :pattern ((ens%lib!log.inv_v.lemma_header_bytes_equal_implies_active_metadata_bytes_equal. mem1! mem2!)))))
(set-info :comment ";; Function-Specs lib::log::inv_v::lemma_metadata_types_set_after_cdb_update")
(declare-fun req%lib!log.inv_v.lemma_metadata_types_set_after_cdb_update. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int vstd!seq.Seq<u8.>. Bool) Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((old_pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (new_pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (log_id! Int) (new_cdb_bytes! vstd!seq.Seq<u8.>.) (old_cdb! Bool)) (! (= (req%lib!log.inv_v.lemma_metadata_types_set_after_cdb_update. old_pm_region_view! new_pm_region_view! log_id! new_cdb_bytes! old_cdb!) (and (=> %%global_location_label%%77 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!))) (=> %%global_location_label%%78 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view!))) (=> %%global_location_label%%79 (>= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!)) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)) (=> %%global_location_label%%80 (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!)) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view!)))) (=> %%global_location_label%%81 (or (= new_cdb_bytes! (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I lib!pmem.pmemspec_t.CDB_FALSE.?)))) (= new_cdb_bytes! (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I lib!pmem.pmemspec_t.CDB_TRUE.?)))))) (=> %%global_location_label%%82 (=> old_cdb! (= new_cdb_bytes! (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I lib!pmem.pmemspec_t.CDB_FALSE.?)))))) (=> %%global_location_label%%83 (=> (not old_cdb!) (= new_cdb_bytes! (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I lib!pmem.pmemspec_t.CDB_TRUE.?)))))) (=> %%global_location_label%%84 (ext_eq false TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view!) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (Poly%vstd!seq.Seq<u8.>. new_cdb_bytes!))))))) (=> %%global_location_label%%85 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!))))) (=> %%global_location_label%%86 (lib!log.inv_v.inactive_metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_pm_region_view!))))))) :pattern ((req%lib!log.inv_v.lemma_metadata_types_set_after_cdb_update. old_pm_region_view! new_pm_region_view! log_id! new_cdb_bytes! old_cdb!)))))
(declare-fun ens%lib!log.inv_v.lemma_metadata_types_set_after_cdb_update. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int vstd!seq.Seq<u8.>. Bool) Bool)
(assert (forall ((old_pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (new_pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (log_id! Int) (new_cdb_bytes! vstd!seq.Seq<u8.>.) (old_cdb! Bool)) (! (= (ens%lib!log.inv_v.lemma_metadata_types_set_after_cdb_update. old_pm_region_view! new_pm_region_view! log_id! new_cdb_bytes! old_cdb!) (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view!))))) :pattern ((ens%lib!log.inv_v.lemma_metadata_types_set_after_cdb_update. old_pm_region_view! new_pm_region_view! log_id! new_cdb_bytes! old_cdb!)))))
(set-info :comment ";; Function-Specs lib::pmem::pmemutil_v::lemma_if_no_outstanding_writes_then_persistent_memory_view_can_only_crash_as_committed")
(declare-fun req%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_then_persistent_memory_view_can_only_crash_as_committed. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (req%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_then_persistent_memory_view_can_only_crash_as_committed. pm_region_view!) (=> %%global_location_label%%87 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!)))) :pattern ((req%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_then_persistent_memory_view_can_only_crash_as_committed. pm_region_view!)))))
(declare-fun ens%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_then_persistent_memory_view_can_only_crash_as_committed. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (ens%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_then_persistent_memory_view_can_only_crash_as_committed. pm_region_view!) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) s$) (= (%Poly%vstd!seq.Seq<u8.>. s$) (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) s$))))) :pattern ((ens%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_then_persistent_memory_view_can_only_crash_as_committed. pm_region_view!)))))
(set-info :comment ";; Function-Specs lib::log::layout_v::lemma_recovered_state_is_crash_idempotent")
(declare-fun req%lib!log.layout_v.lemma_recovered_state_is_crash_idempotent. (vstd!seq.Seq<u8.>. Int) Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((mem! vstd!seq.Seq<u8.>.) (log_id! Int)) (! (= (req%lib!log.layout_v.lemma_recovered_state_is_crash_idempotent. mem! log_id!) (=> %%global_location_label%%88 (is-core!option.Option./Some_ (lib!log.layout_v.recover_state.? (Poly%vstd!seq.Seq<u8.>. mem!) (I log_id!))))) :pattern ((req%lib!log.layout_v.lemma_recovered_state_is_crash_idempotent. mem! log_id!)))))
(declare-fun ens%lib!log.layout_v.lemma_recovered_state_is_crash_idempotent. (vstd!seq.Seq<u8.>. Int) Bool)
(assert (forall ((mem! vstd!seq.Seq<u8.>.) (log_id! Int)) (! (= (ens%lib!log.layout_v.lemma_recovered_state_is_crash_idempotent. mem! log_id!) (let ((state$ (%Poly%lib!log.logspec_t.AbstractLogState. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!log.layout_v.recover_state.? (Poly%vstd!seq.Seq<u8.>. mem!) (I log_id!)))))))) (= state$ (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. state$))))) :pattern ((ens%lib!log.layout_v.lemma_recovered_state_is_crash_idempotent. mem! log_id!)))))
(set-info :comment ";; Function-Specs lib::log::layout_v::lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches")
(declare-fun req%lib!log.layout_v.lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches. (vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>. Int Bool) Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(assert (forall ((mem1! vstd!seq.Seq<u8.>.) (mem2! vstd!seq.Seq<u8.>.) (log_id! Int) (cdb! Bool)) (! (= (req%lib!log.layout_v.lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches. mem1! mem2! log_id! cdb!) (and (=> %%global_location_label%%89 (let ((tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem2!)))) (and (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!)) tmp%%$) (>= tmp%%$ lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)))) (=> %%global_location_label%%90 (= (lib!log.layout_v.recover_cdb.? (Poly%vstd!seq.Seq<u8.>. mem1!)) (core!option.Option./Some (B cdb!)))) (=> %%global_location_label%%91 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. mem1!))) (=> %%global_location_label%%92 (let ((unused_metadata_start$ (ite cdb! lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.?))) (let ((unused_metadata_end$ (Add (Add unused_metadata_start$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (and (and (<= 0 (%I addr$)) (< (%I addr$) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!)))) (not (and (<= unused_metadata_start$ (%I addr$)) (< (%I addr$) unused_metadata_end$)))) (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!) addr$) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem2!) addr$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem1!) addr$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem2!) addr$))))))))) :pattern ((req%lib!log.layout_v.lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches. mem1! mem2! log_id! cdb!)))))
(declare-fun ens%lib!log.layout_v.lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches. (vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>. Int Bool) Bool)
(assert (forall ((mem1! vstd!seq.Seq<u8.>.) (mem2! vstd!seq.Seq<u8.>.) (log_id! Int) (cdb! Bool)) (! (= (ens%lib!log.layout_v.lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches. mem1! mem2! log_id! cdb!) (and (= (lib!log.layout_v.recover_cdb.? (Poly%vstd!seq.Seq<u8.>. mem2!)) (core!option.Option./Some (B cdb!))) (= (lib!log.layout_v.recover_state.? (Poly%vstd!seq.Seq<u8.>. mem1!) (I log_id!)) (lib!log.layout_v.recover_state.? (Poly%vstd!seq.Seq<u8.>. mem2!) (I log_id!))) (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. mem2!)))) :pattern ((ens%lib!log.layout_v.lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches. mem1! mem2! log_id! cdb!)))))
(set-info :comment ";; Function-Specs lib::pmem::traits_t::size_of")
(declare-fun ens%lib!pmem.traits_t.size_of. (Dcr Type Int) Bool)
(assert (forall ((S&. Dcr) (S& Type) (out! Int)) (! (= (ens%lib!pmem.traits_t.size_of. S&. S& out!) (and (uInv SZ out!) (= out! (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) :pattern ((ens%lib!pmem.traits_t.size_of. S&. S& out!)))))
(set-info :comment ";; Function-Specs lib::pmem::pmemutil_v::calculate_crc")
(declare-fun req%lib!pmem.pmemutil_v.calculate_crc. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((S&. Dcr) (S& Type) (val! Poly)) (! (= (req%lib!pmem.pmemutil_v.calculate_crc. S&. S& val!) (=> %%global_location_label%%93 (= (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? S&. S& val!)) (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& val!))))) :pattern ((req%lib!pmem.pmemutil_v.calculate_crc. S&. S& val!)))))
(declare-fun ens%lib!pmem.pmemutil_v.calculate_crc. (Dcr Type Poly Int) Bool)
(assert (forall ((S&. Dcr) (S& Type) (val! Poly) (out! Int)) (! (= (ens%lib!pmem.pmemutil_v.calculate_crc. S&. S& val! out!) (and (uInv 64 out!) (= (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? S&. S& val!)) out!) (= (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& val!)) out!))) :pattern ((ens%lib!pmem.pmemutil_v.calculate_crc. S&. S& val! out!)))))
(set-info :comment ";; Function-Specs lib::log::setup_v::write_setup_metadata")
(declare-fun req%lib!log.setup_v.write_setup_metadata. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%pm_region! Poly) (region_size! Int) (log_capacity! Int) (log_id! Int)) (! (= (req%lib!log.setup_v.write_setup_metadata. PMRegion&. PMRegion& pre%pm_region! region_size! log_capacity! log_id!) (and (=> %%global_location_label%%94 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pre%pm_region!))) (=> %%global_location_label%%95 (= (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pre%pm_region!)) region_size!)) (=> %%global_location_label%%96 (>= (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pre%pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?))) (=> %%global_location_label%%97 (= (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pre%pm_region!)) (Add log_capacity! lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))) (=> %%global_location_label%%98 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pre%pm_region!))))) :pattern ((req%lib!log.setup_v.write_setup_metadata. PMRegion&. PMRegion& pre%pm_region! region_size! log_capacity! log_id!)))))
(declare-fun ens%lib!log.setup_v.write_setup_metadata. (Dcr Type Poly Poly Int Int Int) Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%pm_region! Poly) (pm_region! Poly) (region_size! Int) (log_capacity! Int) (log_id! Int)) (! (= (ens%lib!log.setup_v.write_setup_metadata. PMRegion&. PMRegion& pre%pm_region! pm_region! region_size! log_capacity! log_id!) (and (has_type pm_region! PMRegion&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm_region!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!) (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pre%pm_region!)) (= (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pre%pm_region!))) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (= (lib!log.layout_v.recover_state.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.initialize.? (I log_capacity!))))) (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))))) :pattern ((ens%lib!log.setup_v.write_setup_metadata. PMRegion&. PMRegion& pre%pm_region! pm_region! region_size! log_capacity! log_id!)))))
(set-info :comment ";; Function-Specs lib::pmem::pmemutil_v::lemma_if_no_outstanding_writes_to_region_then_flush_is_idempotent")
(declare-fun req%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_to_region_then_flush_is_idempotent. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Bool)
(declare-const %%global_location_label%%99 Bool)
(assert (forall ((region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (req%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_to_region_then_flush_is_idempotent. region_view!) (=> %%global_location_label%%99 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. region_view!)))) :pattern ((req%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_to_region_then_flush_is_idempotent. region_view!)))))
(declare-fun ens%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_to_region_then_flush_is_idempotent. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Bool)
(assert (forall ((region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (ens%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_to_region_then_flush_is_idempotent. region_view!) (= (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. region_view!)) region_view!)) :pattern ((ens%lib!pmem.pmemutil_v.lemma_if_no_outstanding_writes_to_region_then_flush_is_idempotent. region_view!)))))
(set-info :comment ";; Function-Specs lib::log::logimpl_v::UntrustedLogImpl::setup")
(declare-fun req%lib!log.logimpl_v.impl&%1.setup. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%100 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%pm_region! Poly) (log_id! Int)) (! (= (req%lib!log.logimpl_v.impl&%1.setup. PMRegion&. PMRegion& pre%pm_region! log_id!) (=> %%global_location_label%%100 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pre%pm_region!)))) :pattern ((req%lib!log.logimpl_v.impl&%1.setup. PMRegion&. PMRegion& pre%pm_region! log_id!)))))
(declare-fun ens%lib!log.logimpl_v.impl&%1.setup. (Dcr Type Poly Poly Int core!result.Result.) Bool)
(define-fun is-lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup) c))
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%pm_region! Poly) (pm_region! Poly) (log_id! Int) (result! core!result.Result.)) (! (= (ens%lib!log.logimpl_v.impl&%1.setup. PMRegion&. PMRegion& pre%pm_region! pm_region! log_id! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ (UINT 64) $ TYPE%lib!log.logimpl_t.LogErr.)) (has_type pm_region! PMRegion&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm_region!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!) (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pre%pm_region!)) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (ite (is-core!result.Result./Ok_ result!) (let ((log_capacity$ (%I (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((state$ (lib!log.logspec_t.impl&%0.initialize.? (I log_capacity$)))) (and (and (and (and (and (<= log_capacity$ (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (= (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pre%pm_region!)))) (lib!log.logimpl_t.can_only_crash_as_state.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (Poly%lib!log.logspec_t.AbstractLogState. state$))) (= (lib!log.logimpl_v.impl&%1.recover.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. state$)))) (= (lib!log.logimpl_v.impl&%1.recover.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))))) (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. state$)))) (= state$ (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. state$)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((required_space$ (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (lib!pmem.pmemspec_t.impl&%6.flush.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pre%pm_region!))) (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) required_space$))))))) :pattern ((ens%lib!log.logimpl_v.impl&%1.setup. PMRegion&. PMRegion& pre%pm_region! pm_region! log_id! result!)))))
(set-info :comment ";; Function-Def lib::log::logimpl_v::UntrustedLogImpl::setup")
(set-info :comment ";; src/log/logimpl_v.rs:161:9: 166:49 (#0)")
(set-info :comment ";; Function-Specs lib::pmem::wrpm_t::WriteRestrictedPersistentMemoryRegion::flush")
(declare-fun req%lib!pmem.wrpm_t.impl&%1.flush. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%101 Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (pre%self! Poly)) (! (= (req%lib!pmem.wrpm_t.impl&%1.flush. Perm&. Perm& PMRegion&. PMRegion& pre%self!) (=> %%global_location_label%%101 (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& pre%self!))) :pattern ((req%lib!pmem.wrpm_t.impl&%1.flush. Perm&. Perm& PMRegion&. PMRegion& pre%self!)))))
(declare-fun ens%lib!pmem.wrpm_t.impl&%1.flush. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (pre%self! Poly) (self! Poly)) (! (= (ens%lib!pmem.wrpm_t.impl&%1.flush. Perm&. Perm& PMRegion&. PMRegion& pre%self! self!) (and (has_type self! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. Perm&. Perm& PMRegion&. PMRegion&)) (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& self!) (= (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& self!) (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& pre%self!)))) (= (lib!pmem.wrpm_t.impl&%1.constants.? Perm&. Perm& PMRegion&. PMRegion& self!) (lib!pmem.wrpm_t.impl&%1.constants.? Perm&. Perm& PMRegion&. PMRegion& pre%self!)))) :pattern ((ens%lib!pmem.wrpm_t.impl&%1.flush. Perm&. Perm& PMRegion&. PMRegion& pre%self! self!)))))
(set-info :comment ";; Function-Specs lib::pmem::wrpm_t::WriteRestrictedPersistentMemoryRegion::get_pm_region_ref")
(declare-fun req%lib!pmem.wrpm_t.impl&%1.get_pm_region_ref. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%102 Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! Poly)) (! (= (req%lib!pmem.wrpm_t.impl&%1.get_pm_region_ref. Perm&. Perm& PMRegion&. PMRegion& self!) (=> %%global_location_label%%102 (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& self!))) :pattern ((req%lib!pmem.wrpm_t.impl&%1.get_pm_region_ref. Perm&. Perm& PMRegion&. PMRegion& self!)))))
(declare-fun ens%lib!pmem.wrpm_t.impl&%1.get_pm_region_ref. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! Poly) (pm_region! Poly)) (! (= (ens%lib!pmem.wrpm_t.impl&%1.get_pm_region_ref. Perm&. Perm& PMRegion&. PMRegion& self! pm_region!) (and (has_type pm_region! PMRegion&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm_region!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)) (lib!pmem.wrpm_t.impl&%1.constants.? Perm&. Perm& PMRegion&. PMRegion& self!)))) :pattern ((ens%lib!pmem.wrpm_t.impl&%1.get_pm_region_ref. Perm&. Perm& PMRegion&. PMRegion& self! pm_region!)))))
(set-info :comment ";; Function-Specs lib::log::start_v::read_cdb")
(declare-fun req%lib!log.start_v.read_cdb. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%103 Bool)
(declare-const %%global_location_label%%104 Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm_region! Poly)) (! (= (req%lib!log.start_v.read_cdb. PMRegion&. PMRegion& pm_region!) (and (=> %%global_location_label%%103 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm_region!))) (=> %%global_location_label%%104 (is-core!option.Option./Some_ (lib!log.layout_v.recover_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))))) (=> %%global_location_label%%105 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (=> %%global_location_label%%106 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))))))) :pattern ((req%lib!log.start_v.read_cdb. PMRegion&. PMRegion& pm_region!)))))
(declare-fun ens%lib!log.start_v.read_cdb. (Dcr Type Poly core!result.Result.) Bool)
(define-fun is-lib!log.logimpl_t.LogErr./CRCMismatch_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./CRCMismatch) c))
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm_region! Poly) (result! core!result.Result.)) (! (= (ens%lib!log.start_v.read_cdb. PMRegion&. PMRegion& pm_region! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ BOOL $ TYPE%lib!log.logimpl_t.LogErr.)) (ite (is-core!result.Result./Ok_ result!) (let ((b$ (%B (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (core!option.Option./Some (B b$)) (lib!log.layout_v.recover_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)))) (let ((e$ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= e$ (lib!log.logimpl_t.LogErr./PmemErr (%Poly%lib!pmem.pmemspec_t.PmemError. (Poly%lib!pmem.pmemspec_t.PmemError. lib!pmem.pmemspec_t.PmemError./AccessOutOfRange))))))))) :pattern ((ens%lib!log.start_v.read_cdb. PMRegion&. PMRegion& pm_region! result!)))))
(set-info :comment ";; Function-Specs lib::log::start_v::read_log_variables")
(declare-fun req%lib!log.start_v.read_log_variables. (Dcr Type Poly Int Bool) Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(declare-const %%global_location_label%%110 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm_region! Poly) (log_id! Int) (cdb! Bool)) (! (= (req%lib!log.start_v.read_log_variables. PMRegion&. PMRegion& pm_region! log_id! cdb!) (and (=> %%global_location_label%%107 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm_region!))) (=> %%global_location_label%%108 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (=> %%global_location_label%%109 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))))) (=> %%global_location_label%%110 (= cdb! (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!log.layout_v.deserialize_and_check_log_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))))))))))) :pattern ((req%lib!log.start_v.read_log_variables. PMRegion&. PMRegion& pm_region! log_id! cdb!)))))
(declare-fun ens%lib!log.start_v.read_log_variables. (Dcr Type Poly Int Bool core!result.Result.) Bool)
(define-fun is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents) c))
(define-fun is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported) c))
(define-fun is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch) c))
(define-fun is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch) c))
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm_region! Poly) (log_id! Int) (cdb! Bool) (result! core!result.Result.)) (! (= (ens%lib!log.start_v.read_log_variables. PMRegion&. PMRegion& pm_region! log_id! cdb! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%lib!log.logimpl_v.LogInfo. $ TYPE%lib!log.logimpl_t.LogErr.)) (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))) :pattern ((ens%lib!log.start_v.read_log_variables. PMRegion&. PMRegion& pm_region! log_id! cdb! result!)))))
(set-info :comment ";; Function-Specs lib::log::logimpl_v::UntrustedLogImpl::start")
(declare-fun req%lib!log.logimpl_v.impl&%1.start. (Dcr Type Poly Int lib!log.logimpl_t.TrustedPermission. lib!log.logspec_t.AbstractLogState.) Bool)
(declare-const %%global_location_label%%111 Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%wrpm_region! Poly) (log_id! Int) (perm! lib!log.logimpl_t.TrustedPermission.) (state! lib!log.logspec_t.AbstractLogState.)) (! (= (req%lib!log.logimpl_v.impl&%1.start. PMRegion&. PMRegion& pre%wrpm_region! log_id! perm! state!) (and (=> %%global_location_label%%111 (= (lib!log.logimpl_v.impl&%1.recover.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)))))) (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. state!)))) (=> %%global_location_label%%112 (lib!pmem.wrpm_t.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)) (=> %%global_location_label%%113 (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (= (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$)) (= (lib!log.logimpl_v.impl&%1.recover.? s$ (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. state!))))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$))))))) :pattern ((req%lib!log.logimpl_v.impl&%1.start. PMRegion&. PMRegion& pre%wrpm_region! log_id! perm! state!)))))
(declare-fun ens%lib!log.logimpl_v.impl&%1.start. (Dcr Type Poly Poly Int lib!log.logimpl_t.TrustedPermission. lib!log.logspec_t.AbstractLogState. core!result.Result.) Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%wrpm_region! Poly) (wrpm_region! Poly) (log_id! Int) (perm! lib!log.logimpl_t.TrustedPermission.) (state! lib!log.logspec_t.AbstractLogState.) (result! core!result.Result.)) (! (= (ens%lib!log.logimpl_v.impl&%1.start. PMRegion&. PMRegion& pre%wrpm_region! wrpm_region! log_id! perm! state! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%lib!log.logimpl_v.UntrustedLogImpl. $ TYPE%lib!log.logimpl_t.LogErr.)) (has_type wrpm_region! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (lib!pmem.wrpm_t.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!) (= (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!) (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)) (ite (is-core!result.Result./Ok_ result!) (let ((log_impl$ (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (and (lib!log.logimpl_v.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!log.logimpl_v.UntrustedLogImpl. log_impl$) wrpm_region! (I log_id!)) (= (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. log_impl$)) state!)) (lib!log.logimpl_t.can_only_crash_as_state.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!)) (I log_id!) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. state!)))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!))))) (let ((e$ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= e$ (lib!log.logimpl_t.LogErr./PmemErr (%Poly%lib!pmem.pmemspec_t.PmemError. (Poly%lib!pmem.pmemspec_t.PmemError. lib!pmem.pmemspec_t.PmemError./AccessOutOfRange))))))))) :pattern ((ens%lib!log.logimpl_v.impl&%1.start. PMRegion&. PMRegion& pre%wrpm_region! wrpm_region! log_id! perm! state! result!)))))
(set-info :comment ";; Function-Def lib::log::logimpl_v::UntrustedLogImpl::start")
(set-info :comment ";; src/log/logimpl_v.rs:261:9: 268:49 (#0)")
(set-info :comment ";; Function-Specs lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::new")
(declare-fun req%lib!pmem.subregion_v.impl&%0.new. (Dcr Type Dcr Type Poly Poly Int Int %%Function%%) Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(declare-const %%global_location_label%%117 Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (wrpm! Poly) (perm! Poly) (start! Int) (len! Int) (is_writable_absolute_addr_fn! %%Function%%)) (! (= (req%lib!pmem.subregion_v.impl&%0.new. Perm&. Perm& PMRegion&. PMRegion& wrpm! perm! start! len! is_writable_absolute_addr_fn!) (and (=> %%global_location_label%%114 (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (=> %%global_location_label%%115 (<= 0 len!)) (=> %%global_location_label%%116 (let ((tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!))))) (and (<= (Add start! len!) tmp%%$) (<= tmp%%$ 18446744073709551615)))) (=> %%global_location_label%%117 (forall ((alt_region_view$ Poly) (alt_crash_state$ Poly)) (! (=> (and (has_type alt_region_view$ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (has_type alt_crash_state$ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (=> (and (and (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? alt_region_view$ alt_crash_state$) (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!))) (lib!pmem.pmemspec_t.impl&%6.len.? alt_region_view$))) (lib!pmem.subregion_v.views_differ_only_where_subregion_allows.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) alt_region_view$ (I start!) (I len!) (Poly%fun%1. is_writable_absolute_addr_fn!))) (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! alt_crash_state$)))) :pattern ((lib!pmem.pmemspec_t.impl&%6.can_crash_as.? alt_region_view$ alt_crash_state$))))))) :pattern ((req%lib!pmem.subregion_v.impl&%0.new. Perm&. Perm& PMRegion&. PMRegion& wrpm! perm! start! len! is_writable_absolute_addr_fn!)))))
(declare-fun ens%lib!pmem.subregion_v.impl&%0.new. (Dcr Type Dcr Type Poly Poly Int Int %%Function%% lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (wrpm! Poly) (perm! Poly) (start! Int) (len! Int) (is_writable_absolute_addr_fn! %%Function%%) (result! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.)) (! (= (ens%lib!pmem.subregion_v.impl&%0.new. Perm&. Perm& PMRegion&. PMRegion& wrpm! perm! start! len! is_writable_absolute_addr_fn! result!) (and (lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!) wrpm! perm!) (= (lib!pmem.subregion_v.impl&%0.constants.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) (lib!pmem.wrpm_t.impl&%1.constants.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (= (lib!pmem.subregion_v.impl&%0.start.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) start!) (= (lib!pmem.subregion_v.impl&%0.len.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) len!) (= (lib!pmem.subregion_v.impl&%0.initial_region_view.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (= (lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) is_writable_absolute_addr_fn!) (= (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!) wrpm!) (lib!pmem.subregion_v.impl&%0.initial_subregion_view.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!))) (= (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!) wrpm!) (lib!pmem.subregion_v.get_subregion_view.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (I start!) (I len!))))) :pattern ((ens%lib!pmem.subregion_v.impl&%0.new. Perm&. Perm& PMRegion&. PMRegion& wrpm! perm! start! len! is_writable_absolute_addr_fn! result!)))))
(set-info :comment ";; Function-Specs lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::write_relative")
(declare-fun req%lib!pmem.subregion_v.impl&%0.write_relative. (Dcr Type Dcr Type lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Poly Int slice%<u8.>. Poly) Bool)
(declare-const %%global_location_label%%118 Bool)
(declare-const %%global_location_label%%119 Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (pre%wrpm! Poly) (relative_addr! Int) (bytes! slice%<u8.>.) (perm! Poly)) (! (= (req%lib!pmem.subregion_v.impl&%0.write_relative. Perm&. Perm& PMRegion&. PMRegion& self! pre%wrpm! relative_addr! bytes! perm!) (and (=> %%global_location_label%%118 (lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) pre%wrpm! perm!)) (=> %%global_location_label%%119 (<= (Add relative_addr! (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes!)))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) pre%wrpm!))))) (=> %%global_location_label%%120 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) pre%wrpm!)) (I relative_addr!) (I (Add relative_addr! (vstd!slice.spec_slice_len.? $ (UINT 8) (Poly%slice%<u8.>. bytes!)))))) (=> %%global_location_label%%121 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= relative_addr! (%I i$)) (< (%I i$) (Add relative_addr! (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes!)))))) (lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) i$))) :pattern ((lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) i$))))))) :pattern ((req%lib!pmem.subregion_v.impl&%0.write_relative. Perm&. Perm& PMRegion&. PMRegion& self! pre%wrpm! relative_addr! bytes! perm!)))))
(declare-fun ens%lib!pmem.subregion_v.impl&%0.write_relative. (Dcr Type Dcr Type lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Poly Poly Int slice%<u8.>. Poly) Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (pre%wrpm! Poly) (wrpm! Poly) (relative_addr! Int) (bytes! slice%<u8.>.) (perm! Poly)) (! (= (ens%lib!pmem.subregion_v.impl&%0.write_relative. Perm&. Perm& PMRegion&. PMRegion& self! pre%wrpm! wrpm! relative_addr! bytes! perm!) (and (has_type wrpm! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. Perm&. Perm& PMRegion&. PMRegion&)) (lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) wrpm! perm!) (= (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) wrpm!) (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) pre%wrpm!)) (I relative_addr!) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes!)))))) :pattern ((ens%lib!pmem.subregion_v.impl&%0.write_relative. Perm&. Perm& PMRegion&. PMRegion& self! pre%wrpm! wrpm! relative_addr! bytes! perm!)))))
(set-info :comment ";; Function-Specs lib::log::logimpl_v::UntrustedLogImpl::tentatively_append_to_log")
(declare-fun req%lib!log.logimpl_v.impl&%1.tentatively_append_to_log. (Dcr Type lib!log.logimpl_v.UntrustedLogImpl. Poly lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. slice%<u8.>. lib!log.logimpl_t.TrustedPermission.) Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(declare-const %%global_location_label%%126 Bool)
(declare-const %%global_location_label%%127 Bool)
(declare-const %%global_location_label%%128 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (self! lib!log.logimpl_v.UntrustedLogImpl.) (pre%wrpm_region! Poly) (subregion! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (bytes_to_append! slice%<u8.>.) (perm! lib!log.logimpl_t.TrustedPermission.)) (! (= (req%lib!log.logimpl_v.impl&%1.tentatively_append_to_log. PMRegion&. PMRegion& self! pre%wrpm_region! subregion! bytes_to_append! perm!) (and (=> %%global_location_label%%122 (<= (vstd!slice.spec_slice_len.? $ (UINT 8) (Poly%slice%<u8.>. bytes_to_append!)) (Sub (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))))) (=> %%global_location_label%%123 (<= (Add (Add (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))) (vstd!slice.spec_slice_len.? $ (UINT 8) (Poly%slice%<u8.>. bytes_to_append!))) 340282366920938463463374607431768211455)) (=> %%global_location_label%%124 (lib!pmem.subregion_v.impl&%0.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) pre%wrpm_region! (Poly%lib!log.logimpl_t.TrustedPermission. perm!))) (=> %%global_location_label%%125 (= (lib!pmem.subregion_v.impl&%0.start.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!)) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)) (=> %%global_location_label%%126 (= (lib!pmem.subregion_v.impl&%0.len.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (=> %%global_location_label%%127 (lib!log.inv_v.info_consistent_with_log_area.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) pre%wrpm_region!)) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))) (=> %%global_location_label%%128 (forall ((log_area_offset$ Poly)) (! (=> (has_type log_area_offset$ INT) (= (lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) log_area_offset$) (lib!log.inv_v.log_area_offset_unreachable_during_recovery.? (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))) log_area_offset$))) :pattern ((lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) log_area_offset$))))))) :pattern ((req%lib!log.logimpl_v.impl&%1.tentatively_append_to_log. PMRegion&. PMRegion& self! pre%wrpm_region! subregion! bytes_to_append! perm!)))))
(declare-fun ens%lib!log.logimpl_v.impl&%1.tentatively_append_to_log. (Dcr Type lib!log.logimpl_v.UntrustedLogImpl. Poly Poly lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. slice%<u8.>. lib!log.logimpl_t.TrustedPermission. core!result.Result.) Bool)
(define-fun is-lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend) c))
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (self! lib!log.logimpl_v.UntrustedLogImpl.) (pre%wrpm_region! Poly) (wrpm_region! Poly) (subregion! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (bytes_to_append! slice%<u8.>.) (perm! lib!log.logimpl_t.TrustedPermission.) (result! core!result.Result.)) (! (= (ens%lib!log.logimpl_v.impl&%1.tentatively_append_to_log. PMRegion&. PMRegion& self! pre%wrpm_region! wrpm_region! subregion! bytes_to_append! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ (UINT 128) $ TYPE%lib!log.logimpl_t.LogErr.)) (has_type wrpm_region! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (lib!pmem.subregion_v.impl&%0.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) wrpm_region! (Poly%lib!log.logimpl_t.TrustedPermission. perm!)) (ite (is-core!result.Result./Ok_ result!) (let ((offset$ (%I (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (= offset$ (Add (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (lib!log.inv_v.info_consistent_with_log_area.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) wrpm_region!)) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.impl&%0.tentatively_append.? (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))) (I (uClip 64 (vstd!slice.spec_slice_len.? $ (UINT 8) (Poly%slice%<u8.>. bytes_to_append!)))))) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.tentatively_append.? (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes_to_append!))))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((available_space$ (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (and (= (lib!pmem.subregion_v.impl&%0.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) wrpm_region!) (lib!pmem.subregion_v.impl&%0.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) pre%wrpm_region!)) (< available_space$ (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes_to_append!))))) (or (= available_space$ (Sub (Sub (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))))) (= available_space$ (Sub (Sub (Sub 340282366920938463463374607431768211455 (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))))))))))) :pattern ((ens%lib!log.logimpl_v.impl&%1.tentatively_append_to_log. PMRegion&. PMRegion& self! pre%wrpm_region! wrpm_region! subregion! bytes_to_append! perm! result!)))))
(set-info :comment ";; Function-Def lib::log::logimpl_v::UntrustedLogImpl::tentatively_append_to_log")
(set-info :comment ";; src/log/logimpl_v.rs:333:14: 341:49 (#0)")
(set-info :comment ";; Function-Specs lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::lemma_reveal_opaque_inv")
(declare-fun req%lib!pmem.subregion_v.impl&%0.lemma_reveal_opaque_inv. (Dcr Type Dcr Type lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Poly Poly) Bool)
(declare-const %%global_location_label%%129 Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (wrpm! Poly) (perm! Poly)) (! (= (req%lib!pmem.subregion_v.impl&%0.lemma_reveal_opaque_inv. Perm&. Perm& PMRegion&. PMRegion& self! wrpm! perm!) (=> %%global_location_label%%129 (lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) wrpm! perm!))) :pattern ((req%lib!pmem.subregion_v.impl&%0.lemma_reveal_opaque_inv. Perm&. Perm& PMRegion&. PMRegion& self! wrpm! perm!)))))
(declare-fun ens%lib!pmem.subregion_v.impl&%0.lemma_reveal_opaque_inv. (Dcr Type Dcr Type lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Poly Poly) Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (wrpm! Poly) (perm! Poly)) (! (= (ens%lib!pmem.subregion_v.impl&%0.lemma_reveal_opaque_inv. Perm&. Perm& PMRegion&. PMRegion& self! wrpm! perm!) (and (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& wrpm!) (= (lib!pmem.wrpm_t.impl&%1.constants.? Perm&. Perm& PMRegion&. PMRegion& wrpm!) (lib!pmem.subregion_v.impl&%0.constants.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!))) (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.initial_region_view.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!))))) (lib!pmem.subregion_v.views_differ_only_where_subregion_allows.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.initial_region_view.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!))) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (I (lib!pmem.subregion_v.impl&%0.start.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!))) (I (lib!pmem.subregion_v.impl&%0.len.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!))) (Poly%fun%1. (lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!)))) (= (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) wrpm!) (lib!pmem.subregion_v.get_subregion_view.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (I (lib!pmem.subregion_v.impl&%0.start.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!))) (I (lib!pmem.subregion_v.impl&%0.len.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!))))) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (and (<= 0 (%I addr$)) (< (%I addr$) (lib!pmem.subregion_v.impl&%0.len.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!)))) (= (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) wrpm!))))) addr$) (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!))))) (I (Add (%I addr$) (lib!pmem.subregion_v.impl&%0.start.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!)))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) wrpm!))))) addr$)))))) :pattern ((ens%lib!pmem.subregion_v.impl&%0.lemma_reveal_opaque_inv. Perm&. Perm& PMRegion&. PMRegion& self! wrpm! perm!)))))
(set-info :comment ";; Function-Specs lib::log::logimpl_v::UntrustedLogImpl::tentatively_append")
(declare-fun req%lib!log.logimpl_v.impl&%1.tentatively_append. (Dcr Type lib!log.logimpl_v.UntrustedLogImpl. Poly slice%<u8.>. Int lib!log.logimpl_t.TrustedPermission.) Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%self! lib!log.logimpl_v.UntrustedLogImpl.) (pre%wrpm_region! Poly) (bytes_to_append! slice%<u8.>.) (log_id! Int) (perm! lib!log.logimpl_t.TrustedPermission.)) (! (= (req%lib!log.logimpl_v.impl&%1.tentatively_append. PMRegion&. PMRegion& pre%self! pre%wrpm_region! bytes_to_append! log_id! perm!) (and (=> %%global_location_label%%130 (lib!log.logimpl_v.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!) pre%wrpm_region! (I log_id!))) (=> %%global_location_label%%131 (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (= (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$)) (= (lib!log.logimpl_v.impl&%1.recover.? s$ (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!))))))))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$))))))) :pattern ((req%lib!log.logimpl_v.impl&%1.tentatively_append. PMRegion&. PMRegion& pre%self! pre%wrpm_region! bytes_to_append! log_id! perm!)))))
(declare-fun ens%lib!log.logimpl_v.impl&%1.tentatively_append. (Dcr Type lib!log.logimpl_v.UntrustedLogImpl. lib!log.logimpl_v.UntrustedLogImpl. Poly Poly slice%<u8.>. Int lib!log.logimpl_t.TrustedPermission. core!result.Result.) Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%self! lib!log.logimpl_v.UntrustedLogImpl.) (self! lib!log.logimpl_v.UntrustedLogImpl.) (pre%wrpm_region! Poly) (wrpm_region! Poly) (bytes_to_append! slice%<u8.>.) (log_id! Int) (perm! lib!log.logimpl_t.TrustedPermission.) (result! core!result.Result.)) (! (= (ens%lib!log.logimpl_v.impl&%1.tentatively_append. PMRegion&. PMRegion& pre%self! self! pre%wrpm_region! wrpm_region! bytes_to_append! log_id! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ (UINT 128) $ TYPE%lib!log.logimpl_t.LogErr.)) (has_type (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!) TYPE%lib!log.logimpl_v.UntrustedLogImpl.) (has_type wrpm_region! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (lib!log.logimpl_v.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!) wrpm_region! (I log_id!)) (= (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!) (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)) (lib!log.logimpl_t.can_only_crash_as_state.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!)) (I log_id!) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))) (ite (is-core!result.Result./Ok_ result!) (let ((offset$ (%I (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((state$ (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!)))) (and (= offset$ (Add (Add (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. state$))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. state$)))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. state$))))))) (= (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)) (lib!log.logspec_t.impl&%0.tentatively_append.? (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!))) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes_to_append!))))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((available_space$ (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (and (= (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)) (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!))) (< available_space$ (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes_to_append!))))) (or (= available_space$ (Sub (Sub (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))))) (= available_space$ (Sub (Sub (Sub 340282366920938463463374607431768211455 (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.impl&%1.view.? (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))))))))))) :pattern ((ens%lib!log.logimpl_v.impl&%1.tentatively_append. PMRegion&. PMRegion& pre%self! self! pre%wrpm_region! wrpm_region! bytes_to_append! log_id! perm! result!)))))
(set-info :comment ";; Function-Def lib::log::logimpl_v::UntrustedLogImpl::tentatively_append")
(set-info :comment ";; src/log/logimpl_v.rs:516:9: 524:49 (#0)")
(set-info :comment ";; Function-Specs lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::new_with_condition")
(declare-fun req%lib!pmem.subregion_v.impl&%0.new_with_condition. (Dcr Type Dcr Type Poly Poly Int Int %%Function%% %%Function%%) Bool)
(declare-const %%global_location_label%%132 Bool)
(declare-const %%global_location_label%%133 Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (wrpm! Poly) (perm! Poly) (start! Int) (len! Int) (is_writable_absolute_addr_fn! %%Function%%) (condition! %%Function%%)) (! (= (req%lib!pmem.subregion_v.impl&%0.new_with_condition. Perm&. Perm& PMRegion&. PMRegion& wrpm! perm! start! len! is_writable_absolute_addr_fn! condition!) (and (=> %%global_location_label%%132 (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (=> %%global_location_label%%133 (lib!pmem.subregion_v.condition_sufficient_to_create_wrpm_subregion.? Perm&. Perm& (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) perm! (I start!) (I len!) (Poly%fun%1. is_writable_absolute_addr_fn!) (Poly%fun%1. condition!))))) :pattern ((req%lib!pmem.subregion_v.impl&%0.new_with_condition. Perm&. Perm& PMRegion&. PMRegion& wrpm! perm! start! len! is_writable_absolute_addr_fn! condition!)))))
(declare-fun ens%lib!pmem.subregion_v.impl&%0.new_with_condition. (Dcr Type Dcr Type Poly Poly Int Int %%Function%% %%Function%% lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (wrpm! Poly) (perm! Poly) (start! Int) (len! Int) (is_writable_absolute_addr_fn! %%Function%%) (condition! %%Function%%) (result! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.)) (! (= (ens%lib!pmem.subregion_v.impl&%0.new_with_condition. Perm&. Perm& PMRegion&. PMRegion& wrpm! perm! start! len! is_writable_absolute_addr_fn! condition! result!) (and (lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!) wrpm! perm!) (= (lib!pmem.subregion_v.impl&%0.constants.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) (lib!pmem.wrpm_t.impl&%1.constants.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (= (lib!pmem.subregion_v.impl&%0.start.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) start!) (= (lib!pmem.subregion_v.impl&%0.len.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) len!) (= (lib!pmem.subregion_v.impl&%0.initial_region_view.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (= (lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!)) is_writable_absolute_addr_fn!) (= (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!) wrpm!) (lib!pmem.subregion_v.impl&%0.initial_subregion_view.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!))) (= (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. result!) wrpm!) (lib!pmem.subregion_v.get_subregion_view.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& wrpm!)) (I start!) (I len!))))) :pattern ((ens%lib!pmem.subregion_v.impl&%0.new_with_condition. Perm&. Perm& PMRegion&. PMRegion& wrpm! perm! start! len! is_writable_absolute_addr_fn! condition! result!)))))
(set-info :comment ";; Function-Specs lib::pmem::wrpm_t::WriteRestrictedPersistentMemoryRegion::serialize_and_write")
(declare-fun req%lib!pmem.wrpm_t.impl&%1.serialize_and_write. (Dcr Type Dcr Type Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%134 Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(declare-const %%global_location_label%%137 Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (S&. Dcr) (S& Type) (pre%self! Poly) (addr! Int) (to_write! Poly) (perm! Poly)) (! (= (req%lib!pmem.wrpm_t.impl&%1.serialize_and_write. Perm&. Perm& PMRegion&. PMRegion& S&. S& pre%self! addr! to_write! perm!) (and (=> %%global_location_label%%134 (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& pre%self!)) (=> %%global_location_label%%135 (<= (Add addr! (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& pre%self!))))) (=> %%global_location_label%%136 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& pre%self!)) (I addr!) (I (Add addr! (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))) (=> %%global_location_label%%137 (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& pre%self!)) (I addr!) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& to_write!))) s$) (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! s$)))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! s$))))))) :pattern ((req%lib!pmem.wrpm_t.impl&%1.serialize_and_write. Perm&. Perm& PMRegion&. PMRegion& S&. S& pre%self! addr! to_write! perm!)))))
(declare-fun ens%lib!pmem.wrpm_t.impl&%1.serialize_and_write. (Dcr Type Dcr Type Dcr Type Poly Poly Int Poly Poly) Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (S&. Dcr) (S& Type) (pre%self! Poly) (self! Poly) (addr! Int) (to_write! Poly) (perm! Poly)) (! (= (ens%lib!pmem.wrpm_t.impl&%1.serialize_and_write. Perm&. Perm& PMRegion&. PMRegion& S&. S& pre%self! self! addr! to_write! perm!) (and (has_type self! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. Perm&. Perm& PMRegion&. PMRegion&)) (lib!pmem.wrpm_t.impl&%1.inv.? Perm&. Perm& PMRegion&. PMRegion& self!) (= (lib!pmem.wrpm_t.impl&%1.constants.? Perm&. Perm& PMRegion&. PMRegion& self!) (lib!pmem.wrpm_t.impl&%1.constants.? Perm&. Perm& PMRegion&. PMRegion& pre%self!)) (= (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& self!) (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? Perm&. Perm& PMRegion&. PMRegion& pre%self!)) (I addr!) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& to_write!))))) :pattern ((ens%lib!pmem.wrpm_t.impl&%1.serialize_and_write. Perm&. Perm& PMRegion&. PMRegion& S&. S& pre%self! self! addr! to_write! perm!)))))
(set-info :comment ";; Function-Specs lib::pmem::subregion_v::WriteRestrictedPersistentMemorySubregion::serialize_and_write_relative")
(declare-fun req%lib!pmem.subregion_v.impl&%0.serialize_and_write_relative. (Dcr Type Dcr Type Dcr Type lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%138 Bool)
(declare-const %%global_location_label%%139 Bool)
(declare-const %%global_location_label%%140 Bool)
(declare-const %%global_location_label%%141 Bool)
(assert (forall ((S&. Dcr) (S& Type) (Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (pre%wrpm! Poly) (relative_addr! Int) (to_write! Poly) (perm! Poly)) (! (= (req%lib!pmem.subregion_v.impl&%0.serialize_and_write_relative. S&. S& Perm&. Perm& PMRegion&. PMRegion& self! pre%wrpm! relative_addr! to_write! perm!) (and (=> %%global_location_label%%138 (lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) pre%wrpm! perm!)) (=> %%global_location_label%%139 (<= (Add relative_addr! (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) pre%wrpm!))))) (=> %%global_location_label%%140 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) pre%wrpm!)) (I relative_addr!) (I (Add relative_addr! (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))) (=> %%global_location_label%%141 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= relative_addr! (%I i$)) (< (%I i$) (Add relative_addr! (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) (lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) i$))) :pattern ((lib!pmem.subregion_v.impl&%0.is_writable_relative_addr.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) i$))))))) :pattern ((req%lib!pmem.subregion_v.impl&%0.serialize_and_write_relative. S&. S& Perm&. Perm& PMRegion&. PMRegion& self! pre%wrpm! relative_addr! to_write! perm!)))))
(declare-fun ens%lib!pmem.subregion_v.impl&%0.serialize_and_write_relative. (Dcr Type Dcr Type Dcr Type lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Poly Poly Int Poly Poly) Bool)
(assert (forall ((S&. Dcr) (S& Type) (Perm&. Dcr) (Perm& Type) (PMRegion&. Dcr) (PMRegion& Type) (self! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (pre%wrpm! Poly) (wrpm! Poly) (relative_addr! Int) (to_write! Poly) (perm! Poly)) (! (= (ens%lib!pmem.subregion_v.impl&%0.serialize_and_write_relative. S&. S& Perm&. Perm& PMRegion&. PMRegion& self! pre%wrpm! wrpm! relative_addr! to_write! perm!) (and (has_type wrpm! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. Perm&. Perm& PMRegion&. PMRegion&)) (lib!pmem.subregion_v.impl&%0.inv.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) wrpm! perm!) (= (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) wrpm!) (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? Perm&. Perm& PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. self!) pre%wrpm!)) (I relative_addr!) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& to_write!))))) :pattern ((ens%lib!pmem.subregion_v.impl&%0.serialize_and_write_relative. S&. S& Perm&. Perm& PMRegion&. PMRegion& self! pre%wrpm! wrpm! relative_addr! to_write! perm!)))))
(set-info :comment ";; Function-Specs lib::log::logimpl_v::UntrustedLogImpl::update_inactive_log_metadata")
(declare-fun req%lib!log.logimpl_v.impl&%1.update_inactive_log_metadata. (Dcr Type lib!log.logimpl_v.UntrustedLogImpl. Poly lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Int lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState. lib!log.logimpl_t.TrustedPermission.) Bool)
(declare-const %%global_location_label%%142 Bool)
(declare-const %%global_location_label%%143 Bool)
(declare-const %%global_location_label%%144 Bool)
(declare-const %%global_location_label%%145 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (self! lib!log.logimpl_v.UntrustedLogImpl.) (pre%wrpm_region! Poly) (subregion! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (log_id! Int) (prev_info! lib!log.logimpl_v.LogInfo.) (prev_state! lib!log.logspec_t.AbstractLogState.) (perm! lib!log.logimpl_t.TrustedPermission.)) (! (= (req%lib!log.logimpl_v.impl&%1.update_inactive_log_metadata. PMRegion&. PMRegion& self! pre%wrpm_region! subregion! log_id! prev_info! prev_state! perm!) (and (=> %%global_location_label%%142 (lib!pmem.subregion_v.impl&%0.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) pre%wrpm_region! (Poly%lib!log.logimpl_t.TrustedPermission. perm!))) (=> %%global_location_label%%143 (= (lib!pmem.subregion_v.impl&%0.len.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!)) (nClip (Add (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (=> %%global_location_label%%144 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) pre%wrpm_region!)))) (=> %%global_location_label%%145 (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (%B (%%apply%%0 (lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!)) addr$))) :pattern ((%%apply%%0 (lib!pmem.subregion_v.impl&%0.is_writable_absolute_addr_fn.? (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!)) addr$))))))) :pattern ((req%lib!log.logimpl_v.impl&%1.update_inactive_log_metadata. PMRegion&. PMRegion& self! pre%wrpm_region! subregion! log_id! prev_info! prev_state! perm!)))))
(declare-fun ens%lib!log.logimpl_v.impl&%1.update_inactive_log_metadata. (Dcr Type lib!log.logimpl_v.UntrustedLogImpl. Poly Poly lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. Int lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState. lib!log.logimpl_t.TrustedPermission.) Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (self! lib!log.logimpl_v.UntrustedLogImpl.) (pre%wrpm_region! Poly) (wrpm_region! Poly) (subregion! lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.) (log_id! Int) (prev_info! lib!log.logimpl_v.LogInfo.) (prev_state! lib!log.logspec_t.AbstractLogState.) (perm! lib!log.logimpl_t.TrustedPermission.)) (! (= (ens%lib!log.logimpl_v.impl&%1.update_inactive_log_metadata. PMRegion&. PMRegion& self! pre%wrpm_region! wrpm_region! subregion! log_id! prev_info! prev_state! perm!) (and (has_type wrpm_region! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (lib!pmem.subregion_v.impl&%0.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) wrpm_region! (Poly%lib!log.logimpl_t.TrustedPermission. perm!)) (let ((state_after_flush$ (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion!) wrpm_region!))))))) (let ((log_metadata_bytes$ (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. state_after_flush$) (I 0) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)))) (let ((log_crc_bytes$ (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. state_after_flush$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (let ((log_metadata$ (%Poly%lib!log.layout_v.LogMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. log_metadata_bytes$))))) (let ((log_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. log_crc_bytes$))))) (let ((new_metadata$ (lib!log.layout_v.LogMetadata./LogMetadata (%I (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (%I (I 0)) (%I (I (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))))))))))) (let ((new_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. new_metadata$))))) (and (and (and (and (= log_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$)))) (= (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))) (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (= (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!)))))))) (= log_metadata_bytes$ (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. new_metadata$))))) (= log_crc_bytes$ (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I new_crc$)))))))))))))) :pattern ((ens%lib!log.logimpl_v.impl&%1.update_inactive_log_metadata. PMRegion&. PMRegion& self! pre%wrpm_region! wrpm_region! subregion! log_id! prev_info! prev_state! perm!)))))
(set-info :comment ";; Function-Def lib::log::logimpl_v::UntrustedLogImpl::update_inactive_log_metadata")
(set-info :comment ";; src/log/logimpl_v.rs:652:14: 662:50 (#0)")
(set-info :comment ";; Function-Specs lib::pmem::pmemutil_v::lemma_write_reflected_after_flush_committed")
(declare-fun req%lib!pmem.pmemutil_v.lemma_write_reflected_after_flush_committed. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int vstd!seq.Seq<u8.>.) Bool)
(declare-const %%global_location_label%%146 Bool)
(declare-const %%global_location_label%%147 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (addr! Int) (bytes! vstd!seq.Seq<u8.>.)) (! (= (req%lib!pmem.pmemutil_v.lemma_write_reflected_after_flush_committed. pm_region_view! addr! bytes!) (and (=> %%global_location_label%%146 (<= 0 addr!)) (=> %%global_location_label%%147 (<= (Add addr! (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes!))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!)))))) :pattern ((req%lib!pmem.pmemutil_v.lemma_write_reflected_after_flush_committed. pm_region_view! addr! bytes!)))))
(declare-fun ens%lib!pmem.pmemutil_v.lemma_write_reflected_after_flush_committed. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int vstd!seq.Seq<u8.>.) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (addr! Int) (bytes! vstd!seq.Seq<u8.>.)) (! (= (ens%lib!pmem.pmemutil_v.lemma_write_reflected_after_flush_committed. pm_region_view! addr! bytes!) (= (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (I addr!) (Poly%vstd!seq.Seq<u8.>. bytes!))))))) (I addr!) (I (Add addr! (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes!)))))) bytes!)) :pattern ((ens%lib!pmem.pmemutil_v.lemma_write_reflected_after_flush_committed. pm_region_view! addr! bytes!)))))
(set-info :comment ";; Function-Specs lib::pmem::pmemutil_v::lemma_single_write_crash_effect_on_pm_region_view")
(declare-fun req%lib!pmem.pmemutil_v.lemma_single_write_crash_effect_on_pm_region_view. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int vstd!seq.Seq<u8.>.) Bool)
(declare-const %%global_location_label%%148 Bool)
(declare-const %%global_location_label%%149 Bool)
(declare-const %%global_location_label%%150 Bool)
(declare-const %%global_location_label%%151 Bool)
(declare-const %%global_location_label%%152 Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (write_addr! Int) (bytes_to_write! vstd!seq.Seq<u8.>.)) (! (= (req%lib!pmem.pmemutil_v.lemma_single_write_crash_effect_on_pm_region_view. pm_region_view! write_addr! bytes_to_write!) (and (=> %%global_location_label%%148 (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes_to_write!)) (lib!pmem.pmemspec_t.const_persistence_chunk_size.? (I 0)))) (=> %%global_location_label%%149 (= (EucMod write_addr! (lib!pmem.pmemspec_t.const_persistence_chunk_size.? (I 0))) 0)) (=> %%global_location_label%%150 (<= 0 write_addr!)) (=> %%global_location_label%%151 (<= (Add write_addr! (lib!pmem.pmemspec_t.const_persistence_chunk_size.? (I 0))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!)))) (=> %%global_location_label%%152 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!))))) :pattern ((req%lib!pmem.pmemutil_v.lemma_single_write_crash_effect_on_pm_region_view. pm_region_view! write_addr! bytes_to_write!)))))
(declare-fun ens%lib!pmem.pmemutil_v.lemma_single_write_crash_effect_on_pm_region_view. (lib!pmem.pmemspec_t.PersistentMemoryRegionView. Int vstd!seq.Seq<u8.>.) Bool)
(assert (forall ((pm_region_view! lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (write_addr! Int) (bytes_to_write! vstd!seq.Seq<u8.>.)) (! (= (ens%lib!pmem.pmemutil_v.lemma_single_write_crash_effect_on_pm_region_view. pm_region_view! write_addr! bytes_to_write!) (let ((new_pm_region_view$ (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!) (I write_addr!) (Poly%vstd!seq.Seq<u8.>. bytes_to_write!)))) (forall ((crash_bytes$ Poly)) (! (=> (has_type crash_bytes$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view$) crash_bytes$) (or (= (%Poly%vstd!seq.Seq<u8.>. crash_bytes$) (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_view!))) (= (%Poly%vstd!seq.Seq<u8.>. crash_bytes$) (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view$)))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. new_pm_region_view$) crash_bytes$)))))) :pattern ((ens%lib!pmem.pmemutil_v.lemma_single_write_crash_effect_on_pm_region_view. pm_region_view! write_addr! bytes_to_write!)))))
(set-info :comment ";; Function-Specs lib::log::logimpl_v::UntrustedLogImpl::update_log_metadata")
(declare-fun req%lib!log.logimpl_v.impl&%1.update_log_metadata. (Dcr Type lib!log.logimpl_v.UntrustedLogImpl. Poly Int lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState. lib!log.logimpl_t.TrustedPermission.) Bool)
(declare-const %%global_location_label%%153 Bool)
(declare-const %%global_location_label%%154 Bool)
(declare-const %%global_location_label%%155 Bool)
(declare-const %%global_location_label%%156 Bool)
(declare-const %%global_location_label%%157 Bool)
(declare-const %%global_location_label%%158 Bool)
(declare-const %%global_location_label%%159 Bool)
(declare-const %%global_location_label%%160 Bool)
(declare-const %%global_location_label%%161 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%self! lib!log.logimpl_v.UntrustedLogImpl.) (pre%wrpm_region! Poly) (log_id! Int) (prev_info! lib!log.logimpl_v.LogInfo.) (prev_state! lib!log.logspec_t.AbstractLogState.) (perm! lib!log.logimpl_t.TrustedPermission.)) (! (= (req%lib!log.logimpl_v.impl&%1.update_log_metadata. PMRegion&. PMRegion& pre%self! pre%wrpm_region! log_id! prev_info! prev_state! perm!) (and (=> %%global_location_label%%153 (lib!pmem.wrpm_t.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)) (=> %%global_location_label%%154 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)) (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!)))))) (=> %%global_location_label%%155 (lib!log.inv_v.no_outstanding_writes_to_metadata.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)))) (=> %%global_location_label%%156 (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)) (I log_id!) (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!)))) (Poly%lib!log.logimpl_v.LogInfo. prev_info!))) (=> %%global_location_label%%157 (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)))) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!)))) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!)))))) (=> %%global_location_label%%158 (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)) (Poly%lib!log.logimpl_v.LogInfo. prev_info!) (Poly%lib!log.logspec_t.AbstractLogState. prev_state!))) (=> %%global_location_label%%159 (= (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!)))))) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))))) (=> %%global_location_label%%160 (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (or (= (lib!log.logimpl_v.impl&%1.recover.? s$ (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. prev_state!))))) (= (lib!log.logimpl_v.impl&%1.recover.? s$ (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!))))))))) (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$)))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$))))) (=> %%global_location_label%%161 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)))))))) :pattern ((req%lib!log.logimpl_v.impl&%1.update_log_metadata. PMRegion&. PMRegion& pre%self! pre%wrpm_region! log_id! prev_info! prev_state! perm!)))))
(declare-fun ens%lib!log.logimpl_v.impl&%1.update_log_metadata. (Dcr Type lib!log.logimpl_v.UntrustedLogImpl. lib!log.logimpl_v.UntrustedLogImpl. Poly Poly Int lib!log.logimpl_v.LogInfo. lib!log.logspec_t.AbstractLogState. lib!log.logimpl_t.TrustedPermission.) Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pre%self! lib!log.logimpl_v.UntrustedLogImpl.) (self! lib!log.logimpl_v.UntrustedLogImpl.) (pre%wrpm_region! Poly) (wrpm_region! Poly) (log_id! Int) (prev_info! lib!log.logimpl_v.LogInfo.) (prev_state! lib!log.logspec_t.AbstractLogState.) (perm! lib!log.logimpl_t.TrustedPermission.)) (! (= (ens%lib!log.logimpl_v.impl&%1.update_log_metadata. PMRegion&. PMRegion& pre%self! self! pre%wrpm_region! wrpm_region! log_id! prev_info! prev_state! perm!) (and (has_type (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!) TYPE%lib!log.logimpl_v.UntrustedLogImpl.) (has_type wrpm_region! (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (lib!log.logimpl_v.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!) wrpm_region! (I log_id!)) (= (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!) (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& pre%wrpm_region!)) (= (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!))) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. pre%self!)))))) :pattern ((ens%lib!log.logimpl_v.impl&%1.update_log_metadata. PMRegion&. PMRegion& pre%self! self! pre%wrpm_region! wrpm_region! log_id! prev_info! prev_state! perm!)))))
(set-info :comment ";; Function-Def lib::log::logimpl_v::UntrustedLogImpl::update_log_metadata")
(set-info :comment ";; src/log/logimpl_v.rs:750:14: 759:49 (#0)")
(declare-const PMRegion&. Dcr)
(declare-const PMRegion& Type)
(declare-const self!@0 lib!log.logimpl_v.UntrustedLogImpl.)
(declare-const wrpm_region!@0 Poly)
(declare-const log_id! Int)
(declare-const prev_info! lib!log.logimpl_v.LogInfo.)
(declare-const prev_state! lib!log.logspec_t.AbstractLogState.)
(declare-const perm! lib!log.logimpl_t.TrustedPermission.)
(declare-const verus_tmp_old_wrpm@ lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%1 Bool)
(declare-const verus_tmp_is_writable_absolute_addr_fn@ %%Function%%)
(declare-const verus_tmp_condition@ %%Function%%)
(declare-const s1@ Poly)
(declare-const s2@ Poly)
(declare-const tmp%2 Bool)
(declare-const crash_state@ Poly)
(declare-const tmp%3 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%4 Bool)
(declare-const tmp%5 Int)
(declare-const tmp%6 Bool)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Bool)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Bool)
(declare-const mem3@ vstd!seq.Seq<u8.>.)
(declare-const tmp%17 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%18 Bool)
(declare-const tmp%19 Bool)
(declare-const tmp%20 Bool)
(declare-const mem@ vstd!seq.Seq<u8.>.)
(declare-const new_metadata@ lib!log.layout_v.LogMetadata.)
(declare-const new_crc@ Int)
(declare-const inactive_metadata_pos@ Int)
(declare-const mem1@ vstd!seq.Seq<u8.>.)
(declare-const mem2@ vstd!seq.Seq<u8.>.)
(declare-const tmp%21 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%22 Bool)
(declare-const verus_tmp_new_cdb_bytes@ vstd!seq.Seq<u8.>.)
(declare-const verus_tmp_pm_region_after_write@ lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const verus_tmp_flushed_mem_after_write@ lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%23 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%24 Int)
(declare-const flushed_region@ lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const verus_tmp_pm_region_after_flush@ lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%25 vstd!seq.Seq<u8.>.)
(declare-const tmp%26 vstd!seq.Seq<u8.>.)
(declare-const tmp%27 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%28 Bool)
(declare-const tmp%29 lib!log.logimpl_v.LogInfo.)
(declare-const tmp%30 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%31 Bool)
(declare-const tmp%32 Bool)
(declare-const tmp%33 Bool)
(declare-const tmp%34 lib!log.logimpl_v.LogInfo.)
(declare-const tmp%35 lib!log.logspec_t.AbstractLogState.)
(declare-const crash_bytes@ Poly)
(declare-const tmp%36 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%37 Bool)
(declare-const tmp%38 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const tmp%39 Int)
(declare-const tmp%40 Bool)
(declare-const tmp%41 Bool)
(declare-const tmp%42 Int)
(declare-const tmp%43 Bool)
(declare-const verus_tmp@0 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const old_wrpm@0 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const unused_metadata_pos@ Int)
(declare-const verus_tmp$1@0 %%Function%%)
(declare-const is_writable_absolute_addr_fn@0 %%Function%%)
(declare-const verus_tmp$2@0 %%Function%%)
(declare-const condition@0 %%Function%%)
(declare-const subregion@ lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion.)
(declare-const new_cdb@ Int)
(declare-const verus_tmp$3@0 vstd!seq.Seq<u8.>.)
(declare-const new_cdb_bytes@0 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$4@0 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const pm_region_after_write@0 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const verus_tmp$5@0 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const flushed_mem_after_write@0 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const verus_tmp$6@0 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const pm_region_after_flush@0 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0) TYPE%lib!log.logimpl_v.UntrustedLogImpl.))
(assert (has_type wrpm_region!@0 (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)))
(assert (uInv 128 log_id!))
(assert (has_type (Poly%lib!log.logimpl_v.LogInfo. prev_info!) TYPE%lib!log.logimpl_v.LogInfo.))
(assert (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. PMRegion&. PMRegion&))
(assert (lib!pmem.wrpm_t.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0))
(assert (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)) (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))))
(assert (lib!log.inv_v.no_outstanding_writes_to_metadata.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0))))
(assert (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)) (I log_id!) (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))
(assert (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)))) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))))
(assert (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)) (Poly%lib!log.logimpl_v.LogInfo. prev_info!) (Poly%lib!log.logspec_t.AbstractLogState. prev_state!)))
(assert (= (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!)))))
(assert (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (or (= (lib!log.logimpl_v.impl&%1.recover.? s$ (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. prev_state!))))) (= (lib!log.logimpl_v.impl&%1.recover.? s$ (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))))))) (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$)))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$)))))
(assert (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0))))))
(declare-fun %%lambda%%8 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0) addr$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0) addr$)))))
(declare-fun %%lambda%%9 (Dcr Type Int core!option.Option. Poly core!option.Option.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Int) (%%hole%%3 core!option.Option.) (%%hole%%4 Poly) (%%hole%%5 core!option.Option.) (mem$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) mem$) (B (and (and (and (>= (vstd!seq.Seq.len.? %%hole%%0 %%hole%%1 mem$) %%hole%%2) (= (lib!log.layout_v.recover_cdb.? mem$) %%hole%%3)) (= (lib!log.layout_v.recover_state.? mem$ %%hole%%4) %%hole%%5)) (lib!log.inv_v.metadata_types_set.? mem$)))) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) mem$)))))
(declare-const verus_tmp@1 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const old_wrpm@1 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const verus_tmp$1@1 %%Function%%)
(declare-const is_writable_absolute_addr_fn@1 %%Function%%)
(declare-const verus_tmp$2@1 %%Function%%)
(declare-const condition@1 %%Function%%)
(declare-const wrpm_region!@1 Poly)
(declare-const wrpm_region!@2 Poly)
(declare-const verus_tmp$3@1 vstd!seq.Seq<u8.>.)
(declare-const new_cdb_bytes@1 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$4@1 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const pm_region_after_write@1 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const verus_tmp$5@1 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const flushed_mem_after_write@1 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const verus_tmp$6@1 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const pm_region_after_flush@1 lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-const wrpm_region!@3 Poly)
(declare-const wrpm_region!@4 Poly)
(declare-const self!@1 lib!log.logimpl_v.UntrustedLogImpl.)
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%42 Bool)
(assert (not (=> (fuel_bool fuel%lib!pmem.pmcopy_t.pmcopy_axioms.) (=> (fuel_bool fuel%lib!pmem.pmcopy_t.spec_padding_needed.) (=> (= verus_tmp@1 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)) (=> (= verus_tmp_old_wrpm@ verus_tmp@1) (=> (= old_wrpm@1 verus_tmp_old_wrpm@) (=> (= unused_metadata_pos@ (ite (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.?)) (=> (= tmp%1 (= unused_metadata_pos@ (lib!log.layout_v.get_log_metadata_pos.? (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (=> (= verus_tmp$1@1 (mk_fun (%%lambda%%8 (B true)))) (=> (= verus_tmp_is_writable_absolute_addr_fn@ verus_tmp$1@1) (=> (= is_writable_absolute_addr_fn@1 verus_tmp_is_writable_absolute_addr_fn@) (=> (= verus_tmp$2@1 (mk_fun (%%lambda%%9 $ (UINT 8) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (core!option.Option./Some (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (I log_id!) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. prev_state!))))))) (=> (= verus_tmp_condition@ verus_tmp$2@1) (=> (= condition@1 verus_tmp_condition@) (and (=> (has_type s1@ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (has_type s2@ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (and (and (%B (%%apply%%0 condition@1 s1@)) (let ((tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) s2@))) (and (= (vstd!seq.Seq.len.? $ (UINT 8) s1@) tmp%%$) (= tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0))))))) (lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.? s1@ s2@ (I unused_metadata_pos@) (I (nClip (Add (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (Poly%fun%1. is_writable_absolute_addr_fn@1))) (=> (= tmp%2 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (and (=> %%location_label%%1 (req%lib!log.layout_v.lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches. (%Poly%vstd!seq.Seq<u8.>. s1@) (%Poly%vstd!seq.Seq<u8.>. s2@) log_id! tmp%2)) (=> (ens%lib!log.layout_v.lemma_if_only_differences_in_memory_are_inactive_metadata_then_recover_state_matches. (%Poly%vstd!seq.Seq<u8.>. s1@) (%Poly%vstd!seq.Seq<u8.>. s2@) log_id! tmp%2) (=> %%location_label%%2 (%B (%%apply%%0 condition@1 s2@))))))))) (=> (forall ((s1$ Poly) (s2$ Poly)) (! (=> (and (has_type s1$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type s2$ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (=> (and (and (%B (%%apply%%0 condition@1 s1$)) (let ((tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) s2$))) (and (= (vstd!seq.Seq.len.? $ (UINT 8) s1$) tmp%%$) (= tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0))))))) (lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.? s1$ s2$ (I unused_metadata_pos@) (I (nClip (Add (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (Poly%fun%1. is_writable_absolute_addr_fn@1))) (%B (%%apply%%0 condition@1 s2$)))) :pattern ((lib!pmem.subregion_v.memories_differ_only_where_subregion_allows.? s1$ s2$ (I unused_metadata_pos@) (I (nClip (Add (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (Poly%fun%1. is_writable_absolute_addr_fn@1))))) (and (=> (has_type crash_state@ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)) crash_state@) (=> (= tmp%3 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)) (=> (= tmp%4 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (and (=> %%location_label%%3 (req%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. tmp%3 log_id! tmp%4 prev_info! prev_state!)) (=> (ens%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. tmp%3 log_id! tmp%4 prev_info! prev_state!) (=> %%location_label%%4 (%B (%%apply%%0 condition@1 crash_state@))))))))) (=> (forall ((crash_state$ Poly)) (! (=> (has_type crash_state$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)) crash_state$) (%B (%%apply%%0 condition@1 crash_state$)))) :pattern ((lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0)) crash_state$)))) (=> (= tmp%5 (nClip (Add (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (and (=> %%location_label%%5 (req%lib!pmem.subregion_v.impl&%0.new_with_condition. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0 (Poly%lib!log.logimpl_t.TrustedPermission. perm!) unused_metadata_pos@ tmp%5 is_writable_absolute_addr_fn@1 condition@1)) (=> (ens%lib!pmem.subregion_v.impl&%0.new_with_condition. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0 (Poly%lib!log.logimpl_t.TrustedPermission. perm!) unused_metadata_pos@ tmp%5 is_writable_absolute_addr_fn@1 condition@1 subregion@) (and (=> %%location_label%%6 (req%lib!log.logimpl_v.impl&%1.update_inactive_log_metadata. PMRegion&. PMRegion& self!@0 wrpm_region!@0 subregion@ log_id! prev_info! prev_state! perm!)) (=> (has_type wrpm_region!@1 (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (=> (ens%lib!log.logimpl_v.impl&%1.update_inactive_log_metadata. PMRegion&. PMRegion& self!@0 wrpm_region!@0 wrpm_region!@1 subregion@ log_id! prev_info! prev_state! perm!) (=> (= mem1@ (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. old_wrpm@1))) (=> (= mem2@ (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)))) (and (=> %%location_label%%7 (req%lib!pmem.subregion_v.impl&%0.lemma_reveal_opaque_inv. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& subregion@ wrpm_region!@1 (Poly%lib!log.logimpl_t.TrustedPermission. perm!))) (=> (ens%lib!pmem.subregion_v.impl&%0.lemma_reveal_opaque_inv. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& subregion@ wrpm_region!@1 (Poly%lib!log.logimpl_t.TrustedPermission. perm!)) (=> (ens%lib!log.layout_v.lemma_establish_subrange_equivalence. mem1@ mem2@) (=> (= tmp%6 (lib!pmem.wrpm_t.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)) (and (=> %%location_label%%8 tmp%6) (=> tmp%6 (=> (= tmp%7 (= (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1) (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0))) (and (=> %%location_label%%9 tmp%7) (=> tmp%7 (=> (= tmp%8 (= unused_metadata_pos@ (lib!log.layout_v.get_log_metadata_pos.? (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))))) (and (=> %%location_label%%10 tmp%8) (=> tmp%8 (=> (= tmp%9 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)) (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))) (and (=> %%location_label%%11 tmp%9) (=> tmp%9 (=> (= tmp%10 (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)) (I log_id!) (B (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (Poly%lib!log.logimpl_v.LogInfo. prev_info!))) (and (=> %%location_label%%12 tmp%10) (=> tmp%10 (=> (= tmp%11 (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)) (Poly%lib!log.logimpl_v.LogInfo. prev_info!) (Poly%lib!log.logspec_t.AbstractLogState. prev_state!))) (and (=> %%location_label%%13 tmp%11) (=> tmp%11 (=> (= tmp%12 (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)))) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))) (and (=> %%location_label%%14 tmp%12) (=> tmp%12 (=> (= tmp%13 (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (= (lib!log.logimpl_v.impl&%1.recover.? s$ (I log_id!)) (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly%lib!log.logspec_t.AbstractLogState. prev_state!))))) (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$)))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) s$))))) (and (=> %%location_label%%15 tmp%13) (=> tmp%13 (=> (= tmp%14 (= (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. prev_info!))))) (and (=> %%location_label%%16 tmp%14) (=> tmp%14 (and (=> (= mem3@ (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)))))) (=> (ens%lib!log.layout_v.lemma_establish_subrange_equivalence. mem1@ mem3@) (=> (= tmp%15 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem3@) (I unused_metadata_pos@) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion@) wrpm_region!@1)))))) (I 0) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))))) (and (=> %%location_label%%17 tmp%15) (=> tmp%15 (=> (= tmp%16 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem3@) (I (nClip (Add unused_metadata_pos@ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))))) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.impl&%0.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.WriteRestrictedPersistentMemorySubregion. subregion@) wrpm_region!@1)))))) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (and (=> %%location_label%%18 tmp%16) (=> tmp%16 (=> %%location_label%%19 (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)))) (I log_id!) (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))))))))))) (=> (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)))) (I log_id!) (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (and (=> (= mem@ (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)))))) (=> (= tmp%17 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)) (=> (= tmp%18 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (and (=> %%location_label%%20 (req%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. tmp%17 log_id! tmp%18 prev_info! prev_state!)) (=> (ens%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. tmp%17 log_id! tmp%18 prev_info! prev_state!) (=> (= new_metadata@ (lib!log.layout_v.LogMetadata./LogMetadata (%I (I (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))))) (%I (I 0)) (%I (I (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))))))) (=> (= new_crc@ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. new_metadata@)))) (=> (= inactive_metadata_pos@ (lib!log.layout_v.get_log_metadata_pos.? (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))))) (=> (= tmp%19 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem@) (I inactive_metadata_pos@) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. new_metadata@)))) (and (=> %%location_label%%21 tmp%19) (=> tmp%19 (=> (= tmp%20 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem@) (I (nClip (Add inactive_metadata_pos@ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))))) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I new_crc@)))) (and (=> %%location_label%%22 tmp%20) (=> tmp%20 (=> %%location_label%%23 (lib!log.inv_v.inactive_metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)))))))))))))))))))))) (=> (lib!log.inv_v.inactive_metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1))))))) (=> (= tmp%21 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)) (=> (= tmp%22 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (and (=> %%location_label%%24 (req%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. tmp%21 log_id! tmp%22 prev_info! prev_state!)) (=> (ens%lib!log.inv_v.lemma_flushing_metadata_maintains_invariants. tmp%21 log_id! tmp%22 prev_info! prev_state!) (and (=> %%location_label%%25 (req%lib!pmem.wrpm_t.impl&%1.flush. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1)) (=> (has_type wrpm_region!@2 (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (=> (ens%lib!pmem.wrpm_t.impl&%1.flush. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@1 wrpm_region!@2) (=> (= new_cdb@ (ite (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))) lib!pmem.pmemspec_t.CDB_FALSE.? lib!pmem.pmemspec_t.CDB_TRUE.?)) (=> (= verus_tmp$3@1 (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I new_cdb@)))) (=> (= verus_tmp_new_cdb_bytes@ verus_tmp$3@1) (=> (= new_cdb_bytes@1 verus_tmp_new_cdb_bytes@) (=> (= verus_tmp$4@1 (lib!pmem.pmemspec_t.impl&%6.write.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (Poly%vstd!seq.Seq<u8.>. new_cdb_bytes@1))) (=> (= verus_tmp_pm_region_after_write@ verus_tmp$4@1) (=> (= pm_region_after_write@1 verus_tmp_pm_region_after_write@) (=> (= verus_tmp$5@1 (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_write@1))) (=> (= verus_tmp_flushed_mem_after_write@ verus_tmp$5@1) (=> (= flushed_mem_after_write@1 verus_tmp_flushed_mem_after_write@) (and (=> (= flushed_region@ (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_write@1))) (=> (= tmp%23 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)) (=> (= tmp%24 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (and (=> %%location_label%%26 (req%lib!pmem.pmemutil_v.lemma_write_reflected_after_flush_committed. tmp%23 tmp%24 new_cdb_bytes@1)) (=> (ens%lib!pmem.pmemutil_v.lemma_write_reflected_after_flush_committed. tmp%23 tmp%24 new_cdb_bytes@1) (=> %%location_label%%27 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. flushed_mem_after_write@1) (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))))))))) (=> (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. flushed_mem_after_write@1) (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))) (=> (= verus_tmp$6@1 (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_write@1))) (=> (= verus_tmp_pm_region_after_flush@ verus_tmp$6@1) (=> (= pm_region_after_flush@1 verus_tmp_pm_region_after_flush@) (and (=> (= tmp%25 (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)))) (=> (= tmp%26 (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1))) (=> (ens%lib!log.layout_v.lemma_establish_subrange_equivalence. tmp%25 tmp%26) (=> (= tmp%27 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)) (=> (= tmp%28 (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (=> (= tmp%29 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (and (=> %%location_label%%28 (req%lib!log.inv_v.lemma_metadata_consistent_with_info_after_cdb_update. tmp%27 pm_region_after_flush@1 log_id! new_cdb_bytes@1 tmp%28 tmp%29)) (=> (ens%lib!log.inv_v.lemma_metadata_consistent_with_info_after_cdb_update. tmp%27 pm_region_after_flush@1 log_id! new_cdb_bytes@1 tmp%28 tmp%29) (=> (= tmp%30 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)) (=> (= tmp%31 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (and (=> %%location_label%%29 (req%lib!log.inv_v.lemma_metadata_types_set_after_cdb_update. tmp%30 pm_region_after_flush@1 log_id! new_cdb_bytes@1 tmp%31)) (=> (ens%lib!log.inv_v.lemma_metadata_types_set_after_cdb_update. tmp%30 pm_region_after_flush@1 log_id! new_cdb_bytes@1 tmp%31) (=> %%location_label%%30 (and (and (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1) (I log_id!) (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))) (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1)))))))))))))))))) (=> (and (and (lib!log.inv_v.metadata_consistent_with_info.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1) (I log_id!) (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1) (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))))) (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1))))) (=> (= tmp%32 (lib!log.inv_v.memory_matches_deserialized_cdb.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1) (B (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))))) (and (=> %%location_label%%31 tmp%32) (=> tmp%32 (=> (= tmp%33 (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (=> (= tmp%34 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (=> (= tmp%35 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (and (=> %%location_label%%32 (req%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. pm_region_after_flush@1 log_id! tmp%33 tmp%34 tmp%35)) (=> (ens%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. pm_region_after_flush@1 log_id! tmp%33 tmp%34 tmp%35) (and (=> (has_type crash_bytes@ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_write@1) crash_bytes@) (=> (= tmp%36 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)) (=> (= tmp%37 (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0)))) (and (=> %%location_label%%33 (req%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. tmp%36 log_id! tmp%37 prev_info! prev_state!)) (=> (ens%lib!log.inv_v.lemma_invariants_imply_crash_recover_forall. tmp%36 log_id! tmp%37 prev_info! prev_state!) (=> (= tmp%38 (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)) (=> (= tmp%39 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (and (=> %%location_label%%34 (req%lib!pmem.pmemutil_v.lemma_single_write_crash_effect_on_pm_region_view. tmp%38 tmp%39 new_cdb_bytes@1)) (=> (ens%lib!pmem.pmemutil_v.lemma_single_write_crash_effect_on_pm_region_view. tmp%38 tmp%39 new_cdb_bytes@1) (or (and (=> (= (%Poly%vstd!seq.Seq<u8.>. crash_bytes@) (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)))) (=> (= tmp%40 (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2)) crash_bytes@)) (and (=> %%location_label%%35 tmp%40) (=> tmp%40 %%switch_label%%0)))) (=> (not (= (%Poly%vstd!seq.Seq<u8.>. crash_bytes@) (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.wrpm_t.impl&%1.view.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@2))))) (=> (= tmp%41 (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_flush@1) crash_bytes@)) (and (=> %%location_label%%36 tmp%41) (=> tmp%41 %%switch_label%%0))))) (and (not %%switch_label%%0) (=> %%location_label%%37 (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) crash_bytes@))))))))))))))) (=> (forall ((crash_bytes$ Poly)) (! (=> (has_type crash_bytes$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pm_region_after_write@1) crash_bytes$) (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) crash_bytes$)))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ TYPE%lib!log.logimpl_t.TrustedPermission. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%lib!log.logimpl_t.TrustedPermission. perm!) crash_bytes$)))) (=> (= tmp%42 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (and (=> %%location_label%%38 (req%lib!pmem.wrpm_t.impl&%1.serialize_and_write. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& $ (UINT 64) wrpm_region!@2 tmp%42 (I new_cdb@) (Poly%lib!log.logimpl_t.TrustedPermission. perm!))) (=> (has_type wrpm_region!@3 (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (=> (ens%lib!pmem.wrpm_t.impl&%1.serialize_and_write. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& $ (UINT 64) wrpm_region!@2 wrpm_region!@3 tmp%42 (I new_cdb@) (Poly%lib!log.logimpl_t.TrustedPermission. perm!)) (and (=> %%location_label%%39 (req%lib!pmem.wrpm_t.impl&%1.flush. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@3)) (=> (has_type wrpm_region!@4 (TYPE%lib!pmem.wrpm_t.WriteRestrictedPersistentMemoryRegion. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion&)) (=> (ens%lib!pmem.wrpm_t.impl&%1.flush. $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@3 wrpm_region!@4) (=> (= tmp%43 (not (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))) (=> (= (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/cdb (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@1))) tmp%43) (=> (and (= (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info self!@0) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/info self!@1)) (= (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state self!@0) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state self!@1))) (and (=> %%location_label%%40 (lib!log.logimpl_v.impl&%1.inv.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@1) wrpm_region!@4 (I log_id!))) (and (=> %%location_label%%41 (= (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@4) (lib!pmem.wrpm_t.impl&%1.constants.? $ TYPE%lib!log.logimpl_t.TrustedPermission. PMRegion&. PMRegion& wrpm_region!@0))) (=> %%location_label%%42 (= (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@1))) (lib!log.logimpl_v.UntrustedLogImpl./UntrustedLogImpl/state (%Poly%lib!log.logimpl_v.UntrustedLogImpl. (Poly%lib!log.logimpl_v.UntrustedLogImpl. self!@0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
