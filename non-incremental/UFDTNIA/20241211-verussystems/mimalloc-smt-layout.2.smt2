(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module layout'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. FuelId)
(declare-const fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.axiom_ptr_mut_from_data. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!raw_ptr.spec_cast_ptr_to_thin_ptr. FuelId)
(declare-const fuel%vstd!raw_ptr.spec_cast_ptr_to_usize. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%32.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%46.view. FuelId)
(declare-const fuel%lib!tokens.impl&%1.page_id_for_slice. FuelId)
(declare-const fuel%lib!types.impl&%30.wf. FuelId)
(declare-const fuel%lib!types.impl&%33.wf. FuelId)
(declare-const fuel%lib!layout.is_page_ptr. FuelId)
(declare-const fuel%lib!layout.is_segment_ptr. FuelId)
(declare-const fuel%lib!layout.is_heap_ptr. FuelId)
(declare-const fuel%lib!layout.is_tld_ptr. FuelId)
(declare-const fuel%lib!layout.segment_start. FuelId)
(declare-const fuel%lib!layout.page_header_start. FuelId)
(declare-const fuel%lib!layout.page_start. FuelId)
(declare-const fuel%lib!layout.start_offset. FuelId)
(declare-const fuel%lib!layout.block_start_at. FuelId)
(declare-const fuel%lib!layout.block_start. FuelId)
(declare-const fuel%lib!layout.is_block_ptr. FuelId)
(declare-const fuel%lib!layout.is_block_ptr1. FuelId)
(declare-const fuel%lib!layout.is_page_ptr_opt. FuelId)
(declare-const fuel%lib!config.INTPTR_SHIFT. FuelId)
(declare-const fuel%lib!config.INTPTR_SIZE. FuelId)
(declare-const fuel%lib!config.SLICE_SHIFT. FuelId)
(declare-const fuel%lib!config.SLICE_SIZE. FuelId)
(declare-const fuel%lib!config.SEGMENT_SHIFT. FuelId)
(declare-const fuel%lib!config.SEGMENT_SIZE. FuelId)
(declare-const fuel%lib!config.SLICES_PER_SEGMENT. FuelId)
(declare-const fuel%lib!config.SMALL_PAGE_SHIFT. FuelId)
(declare-const fuel%lib!config.MEDIUM_PAGE_SHIFT. FuelId)
(declare-const fuel%lib!config.SMALL_PAGE_SIZE. FuelId)
(declare-const fuel%lib!config.MEDIUM_PAGE_SIZE. FuelId)
(declare-const fuel%lib!config.SMALL_OBJ_SIZE_MAX. FuelId)
(declare-const fuel%lib!config.MEDIUM_OBJ_SIZE_MAX. FuelId)
(declare-const fuel%lib!config.MEDIUM_OBJ_WSIZE_MAX. FuelId)
(declare-const fuel%lib!config.LARGE_OBJ_SIZE_MAX. FuelId)
(declare-const fuel%lib!config.SMALL_WSIZE_MAX. FuelId)
(declare-const fuel%lib!config.SMALL_SIZE_MAX. FuelId)
(declare-const fuel%lib!config.MAX_ALIGN_SIZE. FuelId)
(declare-const fuel%lib!config.MAX_ALIGN_GUARANTEE. FuelId)
(declare-const fuel%lib!config.SIZEOF_SEGMENT_HEADER. FuelId)
(declare-const fuel%lib!config.SIZEOF_PAGE_HEADER. FuelId)
(declare-const fuel%lib!config.SIZEOF_HEAP. FuelId)
(declare-const fuel%lib!config.SIZEOF_TLD. FuelId)
(declare-const fuel%lib!config.COMMIT_SIZE. FuelId)
(declare-const fuel%lib!config.COMMIT_MASK_BITS. FuelId)
(declare-const fuel%lib!config.COMMIT_MASK_FIELD_COUNT. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.axiom_ptr_mut_from_data. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!raw_ptr.spec_cast_ptr_to_thin_ptr. fuel%vstd!raw_ptr.spec_cast_ptr_to_usize. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%32.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%46.view. fuel%lib!tokens.impl&%1.page_id_for_slice. fuel%lib!types.impl&%30.wf. fuel%lib!types.impl&%33.wf. fuel%lib!layout.is_page_ptr. fuel%lib!layout.is_segment_ptr. fuel%lib!layout.is_heap_ptr. fuel%lib!layout.is_tld_ptr. fuel%lib!layout.segment_start. fuel%lib!layout.page_header_start. fuel%lib!layout.page_start. fuel%lib!layout.start_offset. fuel%lib!layout.block_start_at. fuel%lib!layout.block_start. fuel%lib!layout.is_block_ptr. fuel%lib!layout.is_block_ptr1. fuel%lib!layout.is_page_ptr_opt. fuel%lib!config.INTPTR_SHIFT. fuel%lib!config.INTPTR_SIZE. fuel%lib!config.SLICE_SHIFT. fuel%lib!config.SLICE_SIZE. fuel%lib!config.SEGMENT_SHIFT. fuel%lib!config.SEGMENT_SIZE. fuel%lib!config.SLICES_PER_SEGMENT. fuel%lib!config.SMALL_PAGE_SHIFT. fuel%lib!config.MEDIUM_PAGE_SHIFT. fuel%lib!config.SMALL_PAGE_SIZE. fuel%lib!config.MEDIUM_PAGE_SIZE. fuel%lib!config.SMALL_OBJ_SIZE_MAX. fuel%lib!config.MEDIUM_OBJ_SIZE_MAX. fuel%lib!config.MEDIUM_OBJ_WSIZE_MAX. fuel%lib!config.LARGE_OBJ_SIZE_MAX. fuel%lib!config.SMALL_WSIZE_MAX. fuel%lib!config.SMALL_SIZE_MAX. fuel%lib!config.MAX_ALIGN_SIZE. fuel%lib!config.MAX_ALIGN_GUARANTEE. fuel%lib!config.SIZEOF_SEGMENT_HEADER. fuel%lib!config.SIZEOF_PAGE_HEADER. fuel%lib!config.SIZEOF_HEAP. fuel%lib!config.SIZEOF_TLD. fuel%lib!config.COMMIT_SIZE. fuel%lib!config.COMMIT_MASK_BITS. fuel%lib!config.COMMIT_MASK_FIELD_COUNT. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (and (fuel_bool_default fuel%vstd!raw_ptr.axiom_ptr_mut_from_data.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort lib!commit_mask.CommitMask. 0)
(declare-sort lib!linked_list.LL. 0)
(declare-sort lib!linked_list.StuffAgree.Instance. 0)
(declare-sort lib!linked_list.StuffAgree.x. 0)
(declare-sort lib!linked_list.StuffAgree.y. 0)
(declare-sort lib!tokens.Mim.Instance. 0)
(declare-sort lib!tokens.Mim.delay. 0)
(declare-sort lib!tokens.Mim.heap_of_page. 0)
(declare-sort lib!tokens.Mim.thread_of_segment. 0)
(declare-sort lib!types.BoolAgree.Instance. 0)
(declare-sort lib!types.BoolAgree.x. 0)
(declare-sort lib!types.BoolAgree.y. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!cell.PCell<u32.>. 0)
(declare-sort vstd!cell.PCell<usize.>. 0)
(declare-sort vstd!cell.PCell<lib!types.PageInner.>. 0)
(declare-sort vstd!cell.PCell<lib!types.SegmentHeaderMain.>. 0)
(declare-sort vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. 0)
(declare-sort vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort ptr_mut%<u8.>. 0)
(declare-sort ptr_mut%<lib!linked_list.Node.>. 0)
(declare-sort ptr_mut%<lib!types.Heap.>. 0)
(declare-sort ptr_mut%<lib!types.Page.>. 0)
(declare-sort ptr_mut%<lib!types.SegmentHeader.>. 0)
(declare-sort ptr_mut%<lib!types.Tld.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!atomic_ghost.AtomicPtr. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!thread.ThreadId. 0) (lib!tokens.HeapId. 0) (lib!tokens.TldId. 0) (lib!tokens.SegmentId. 0) (lib!tokens.PageId. 0) (lib!tokens.BlockId. 0) (lib!types.PageInner. 0) (lib!types.AtomicHeapPtr. 0) (lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. 0) (lib!types.Page. 0) (lib!types.SegmentKind. 0) (lib!types.SegmentHeaderMain. 0) (lib!types.SegmentHeaderMain2. 0) (lib!types.SegmentHeader. 0) (lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. 0) (lib!types.PageQueue. 0) (lib!types.Heap. 0) (lib!types.SegmentsTld. 0) (lib!types.SpanQueueHeader. 0) (lib!types.Tld. 0) (lib!types.TldPtr. 0) (lib!types.SegmentPtr. 0) (lib!types.PagePtr. 0) (lib!linked_list.Node. 0) (lib!linked_list.ThreadLLSimple. 0) (lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. 0) (lib!linked_list.ThreadLLWithDelayBits. 0) (lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. 0) (tuple%0. 0) (tuple%2. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!atomic_ghost.AtomicPtr./AtomicPtr (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?patomic Poly) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?atomic_inv Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!thread.ThreadId./ThreadId (lib!thread.ThreadId./ThreadId/?thread_id Int))) ((lib!tokens.HeapId./HeapId (lib!tokens.HeapId./HeapId/?id Int) (lib!tokens.HeapId./HeapId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.HeapId./HeapId/?uniq Int))) ((lib!tokens.TldId./TldId (lib!tokens.TldId./TldId/?id Int) (lib!tokens.TldId./TldId/?provenance vstd!raw_ptr.Provenance.))) ((lib!tokens.SegmentId./SegmentId (lib!tokens.SegmentId./SegmentId/?id Int) (lib!tokens.SegmentId./SegmentId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.SegmentId./SegmentId/?uniq Int))) ((lib!tokens.PageId./PageId (lib!tokens.PageId./PageId/?segment_id lib!tokens.SegmentId.) (lib!tokens.PageId./PageId/?idx Int))) ((lib!tokens.BlockId./BlockId (lib!tokens.BlockId./BlockId/?page_id lib!tokens.PageId.) (lib!tokens.BlockId./BlockId/?idx Int) (lib!tokens.BlockId./BlockId/?slice_idx Int) (lib!tokens.BlockId./BlockId/?block_size Int))) ((lib!types.PageInner./PageInner (lib!types.PageInner./PageInner/?flags0 Int) (lib!types.PageInner./PageInner/?capacity Int) (lib!types.PageInner./PageInner/?reserved Int) (lib!types.PageInner./PageInner/?flags1 Int) (lib!types.PageInner./PageInner/?flags2 Int) (lib!types.PageInner./PageInner/?free lib!linked_list.LL.) (lib!types.PageInner./PageInner/?used Int) (lib!types.PageInner./PageInner/?xblock_size Int) (lib!types.PageInner./PageInner/?local_free lib!linked_list.LL.))) ((lib!types.AtomicHeapPtr./AtomicHeapPtr (lib!types.AtomicHeapPtr./AtomicHeapPtr/?atomic vstd!atomic_ghost.AtomicPtr.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?instance lib!tokens.Mim.Instance.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?page_id lib!tokens.PageId.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp lib!types.BoolAgree.x.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp_inst lib!types.BoolAgree.Instance.))) ((lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic./InvariantPredicate_auto_AtomicHeapPtr_atomic )) ((lib!types.Page./Page (lib!types.Page./Page/?count vstd!cell.PCell<u32.>.) (lib!types.Page./Page/?offset Int) (lib!types.Page./Page/?inner vstd!cell.PCell<lib!types.PageInner.>.) (lib!types.Page./Page/?xthread_free lib!linked_list.ThreadLLWithDelayBits.) (lib!types.Page./Page/?xheap lib!types.AtomicHeapPtr.) (lib!types.Page./Page/?prev vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (lib!types.Page./Page/?next vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (lib!types.Page./Page/?padding Int))) ((lib!types.SegmentKind./Normal ) (lib!types.SegmentKind./Huge )) ((lib!types.SegmentHeaderMain./SegmentHeaderMain (lib!types.SegmentHeaderMain./SegmentHeaderMain/?memid Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_pinned Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_large Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_committed Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_alignment Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_align_offset Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?allow_decommit Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_expire Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_mask lib!commit_mask.CommitMask.) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?commit_mask lib!commit_mask.CommitMask.))) ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2 (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?next ptr_mut%<lib!types.SegmentHeader.>.) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned_visits Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?used Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?cookie Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_slices Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_info_slices Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?kind lib!types.SegmentKind.) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?slice_entries Int))) ((lib!types.SegmentHeader./SegmentHeader (lib!types.SegmentHeader./SegmentHeader/?main vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) (lib!types.SegmentHeader./SegmentHeader/?abandoned_next Int) (lib!types.SegmentHeader./SegmentHeader/?main2 vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) (lib!types.SegmentHeader./SegmentHeader/?thread_id vstd!atomic_ghost.AtomicU64.) (lib!types.SegmentHeader./SegmentHeader/?instance lib!tokens.Mim.Instance.) (lib!types.SegmentHeader./SegmentHeader/?segment_id lib!tokens.SegmentId.))) ((lib!types.InvariantPredicate_auto_SegmentHeader_thread_id./InvariantPredicate_auto_SegmentHeader_thread_id )) ((lib!types.PageQueue./PageQueue (lib!types.PageQueue./PageQueue/?first ptr_mut%<lib!types.Page.>.) (lib!types.PageQueue./PageQueue/?last ptr_mut%<lib!types.Page.>.) (lib!types.PageQueue./PageQueue/?block_size Int))) ((lib!types.Heap./Heap (lib!types.Heap./Heap/?tld_ptr lib!types.TldPtr.) (lib!types.Heap./Heap/?pages_free_direct Poly) (lib!types.Heap./Heap/?pages Poly) (lib!types.Heap./Heap/?thread_delayed_free lib!linked_list.ThreadLLSimple.) (lib!types.Heap./Heap/?thread_id lib!thread.ThreadId.) (lib!types.Heap./Heap/?arena_id Int) (lib!types.Heap./Heap/?page_count vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?page_retired_min vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?page_retired_max vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?no_reclaim Bool) (lib!types.Heap./Heap/?page_empty_ptr ptr_mut%<lib!types.Page.>.))) ((lib!types.SegmentsTld./SegmentsTld (lib!types.SegmentsTld./SegmentsTld/?span_queue_headers %%Function%%) (lib!types.SegmentsTld./SegmentsTld/?count Int) (lib!types.SegmentsTld./SegmentsTld/?peak_count Int) (lib!types.SegmentsTld./SegmentsTld/?current_size Int) (lib!types.SegmentsTld./SegmentsTld/?peak_size Int))) ((lib!types.SpanQueueHeader./SpanQueueHeader (lib!types.SpanQueueHeader./SpanQueueHeader/?first ptr_mut%<lib!types.Page.>.) (lib!types.SpanQueueHeader./SpanQueueHeader/?last ptr_mut%<lib!types.Page.>.))) ((lib!types.Tld./Tld (lib!types.Tld./Tld/?heap_backing ptr_mut%<lib!types.Heap.>.) (lib!types.Tld./Tld/?segments lib!types.SegmentsTld.))) ((lib!types.TldPtr./TldPtr (lib!types.TldPtr./TldPtr/?tld_ptr ptr_mut%<lib!types.Tld.>.) (lib!types.TldPtr./TldPtr/?tld_id lib!tokens.TldId.))) ((lib!types.SegmentPtr./SegmentPtr (lib!types.SegmentPtr./SegmentPtr/?segment_ptr ptr_mut%<lib!types.SegmentHeader.>.) (lib!types.SegmentPtr./SegmentPtr/?segment_id lib!tokens.SegmentId.))) ((lib!types.PagePtr./PagePtr (lib!types.PagePtr./PagePtr/?page_ptr ptr_mut%<lib!types.Page.>.) (lib!types.PagePtr./PagePtr/?page_id lib!tokens.PageId.))) ((lib!linked_list.Node./Node (lib!linked_list.Node./Node/?ptr ptr_mut%<lib!linked_list.Node.>.))) ((lib!linked_list.ThreadLLSimple./ThreadLLSimple (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?instance lib!tokens.Mim.Instance.) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?heap_id lib!tokens.HeapId.) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?atomic vstd!atomic_ghost.AtomicPtr.))) ((lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic./InvariantPredicate_auto_ThreadLLSimple_atomic )) ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?instance lib!tokens.Mim.Instance.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?atomic vstd!atomic_ghost.AtomicPtr.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp lib!linked_list.StuffAgree.x.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp_inst lib!linked_list.StuffAgree.Instance.))) ((lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic./InvariantPredicate_auto_ThreadLLWithDelayBits_atomic )) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!thread.ThreadId./ThreadId/thread_id (lib!thread.ThreadId.) Int)
(declare-fun lib!tokens.HeapId./HeapId/id (lib!tokens.HeapId.) Int)
(declare-fun lib!tokens.HeapId./HeapId/provenance (lib!tokens.HeapId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.HeapId./HeapId/uniq (lib!tokens.HeapId.) Int)
(declare-fun lib!tokens.TldId./TldId/id (lib!tokens.TldId.) Int)
(declare-fun lib!tokens.TldId./TldId/provenance (lib!tokens.TldId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/id (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.SegmentId./SegmentId/provenance (lib!tokens.SegmentId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/uniq (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.PageId./PageId/segment_id (lib!tokens.PageId.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.PageId./PageId/idx (lib!tokens.PageId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/page_id (lib!tokens.BlockId.) lib!tokens.PageId.)
(declare-fun lib!tokens.BlockId./BlockId/idx (lib!tokens.BlockId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/slice_idx (lib!tokens.BlockId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/block_size (lib!tokens.BlockId.) Int)
(declare-fun lib!types.PageInner./PageInner/flags0 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/capacity (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/reserved (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags1 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags2 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.PageInner./PageInner/used (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/xblock_size (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/local_free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (lib!types.AtomicHeapPtr.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/instance (lib!types.AtomicHeapPtr.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (lib!types.AtomicHeapPtr.) lib!tokens.PageId.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/emp (lib!types.AtomicHeapPtr.) lib!types.BoolAgree.x.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst (lib!types.AtomicHeapPtr.) lib!types.BoolAgree.Instance.)
(declare-fun lib!types.Page./Page/count (lib!types.Page.) vstd!cell.PCell<u32.>.)
(declare-fun lib!types.Page./Page/offset (lib!types.Page.) Int)
(declare-fun lib!types.Page./Page/inner (lib!types.Page.) vstd!cell.PCell<lib!types.PageInner.>.)
(declare-fun lib!types.Page./Page/xthread_free (lib!types.Page.) lib!linked_list.ThreadLLWithDelayBits.)
(declare-fun lib!types.Page./Page/xheap (lib!types.Page.) lib!types.AtomicHeapPtr.)
(declare-fun lib!types.Page./Page/prev (lib!types.Page.) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.Page./Page/next (lib!types.Page.) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.Page./Page/padding (lib!types.Page.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask (lib!types.SegmentHeaderMain.) lib!commit_mask.CommitMask.)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask (lib!types.SegmentHeaderMain.) lib!commit_mask.CommitMask.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next (lib!types.SegmentHeaderMain2.) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind (lib!types.SegmentHeaderMain2.) lib!types.SegmentKind.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeader./SegmentHeader/main (lib!types.SegmentHeader.) vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/abandoned_next (lib!types.SegmentHeader.) Int)
(declare-fun lib!types.SegmentHeader./SegmentHeader/main2 (lib!types.SegmentHeader.) vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/thread_id (lib!types.SegmentHeader.) vstd!atomic_ghost.AtomicU64.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/instance (lib!types.SegmentHeader.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/segment_id (lib!types.SegmentHeader.) lib!tokens.SegmentId.)
(declare-fun lib!types.PageQueue./PageQueue/first (lib!types.PageQueue.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PageQueue./PageQueue/last (lib!types.PageQueue.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PageQueue./PageQueue/block_size (lib!types.PageQueue.) Int)
(declare-fun lib!types.Heap./Heap/tld_ptr (lib!types.Heap.) lib!types.TldPtr.)
(declare-fun lib!types.Heap./Heap/pages_free_direct (lib!types.Heap.) Poly)
(declare-fun lib!types.Heap./Heap/pages (lib!types.Heap.) Poly)
(declare-fun lib!types.Heap./Heap/thread_delayed_free (lib!types.Heap.) lib!linked_list.ThreadLLSimple.)
(declare-fun lib!types.Heap./Heap/thread_id (lib!types.Heap.) lib!thread.ThreadId.)
(declare-fun lib!types.Heap./Heap/arena_id (lib!types.Heap.) Int)
(declare-fun lib!types.Heap./Heap/page_count (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/page_retired_min (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/page_retired_max (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/no_reclaim (lib!types.Heap.) Bool)
(declare-fun lib!types.Heap./Heap/page_empty_ptr (lib!types.Heap.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.SegmentsTld./SegmentsTld/span_queue_headers (lib!types.SegmentsTld.) %%Function%%)
(declare-fun lib!types.SegmentsTld./SegmentsTld/count (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/peak_count (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/current_size (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/peak_size (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SpanQueueHeader./SpanQueueHeader/first (lib!types.SpanQueueHeader.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.SpanQueueHeader./SpanQueueHeader/last (lib!types.SpanQueueHeader.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.Tld./Tld/heap_backing (lib!types.Tld.) ptr_mut%<lib!types.Heap.>.)
(declare-fun lib!types.Tld./Tld/segments (lib!types.Tld.) lib!types.SegmentsTld.)
(declare-fun lib!types.TldPtr./TldPtr/tld_ptr (lib!types.TldPtr.) ptr_mut%<lib!types.Tld.>.)
(declare-fun lib!types.TldPtr./TldPtr/tld_id (lib!types.TldPtr.) lib!tokens.TldId.)
(declare-fun lib!types.SegmentPtr./SegmentPtr/segment_ptr (lib!types.SegmentPtr.) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun lib!types.SegmentPtr./SegmentPtr/segment_id (lib!types.SegmentPtr.) lib!tokens.SegmentId.)
(declare-fun lib!types.PagePtr./PagePtr/page_ptr (lib!types.PagePtr.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PagePtr./PagePtr/page_id (lib!types.PagePtr.) lib!tokens.PageId.)
(declare-fun lib!linked_list.Node./Node/ptr (lib!linked_list.Node.) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (lib!linked_list.ThreadLLSimple.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (lib!linked_list.ThreadLLSimple.) lib!tokens.HeapId.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (lib!linked_list.ThreadLLSimple.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (lib!linked_list.ThreadLLWithDelayBits.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (lib!linked_list.ThreadLLWithDelayBits.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (lib!linked_list.ThreadLLWithDelayBits.) lib!linked_list.StuffAgree.x.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst (lib!linked_list.ThreadLLWithDelayBits.) lib!linked_list.StuffAgree.Instance.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-fun TYPE%vstd!atomic.PAtomicPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic.PermissionPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredPtr. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPtr. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!tokens.Mim.Instance. Type)
(declare-const TYPE%lib!tokens.Mim.thread_of_segment. Type)
(declare-const TYPE%lib!tokens.Mim.delay. Type)
(declare-const TYPE%lib!tokens.Mim.heap_of_page. Type)
(declare-const TYPE%lib!types.BoolAgree.Instance. Type)
(declare-const TYPE%lib!types.BoolAgree.x. Type)
(declare-const TYPE%lib!types.BoolAgree.y. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.Instance. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.x. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.y. Type)
(declare-const TYPE%lib!thread.ThreadId. Type)
(declare-const TYPE%lib!tokens.HeapId. Type)
(declare-const TYPE%lib!tokens.TldId. Type)
(declare-const TYPE%lib!tokens.SegmentId. Type)
(declare-const TYPE%lib!tokens.PageId. Type)
(declare-const TYPE%lib!tokens.BlockId. Type)
(declare-const TYPE%lib!types.PageInner. Type)
(declare-const TYPE%lib!types.AtomicHeapPtr. Type)
(declare-const TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. Type)
(declare-const TYPE%lib!types.Page. Type)
(declare-const TYPE%lib!types.SegmentKind. Type)
(declare-const TYPE%lib!types.SegmentHeaderMain. Type)
(declare-const TYPE%lib!types.SegmentHeaderMain2. Type)
(declare-const TYPE%lib!types.SegmentHeader. Type)
(declare-const TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. Type)
(declare-const TYPE%lib!types.PageQueue. Type)
(declare-const TYPE%lib!types.Heap. Type)
(declare-const TYPE%lib!types.SegmentsTld. Type)
(declare-const TYPE%lib!types.SpanQueueHeader. Type)
(declare-const TYPE%lib!types.Tld. Type)
(declare-const TYPE%lib!types.TldPtr. Type)
(declare-const TYPE%lib!types.SegmentPtr. Type)
(declare-const TYPE%lib!types.PagePtr. Type)
(declare-const TYPE%lib!linked_list.Node. Type)
(declare-const TYPE%lib!linked_list.LL. Type)
(declare-const TYPE%lib!linked_list.ThreadLLSimple. Type)
(declare-const TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. Type)
(declare-const TYPE%lib!linked_list.ThreadLLWithDelayBits. Type)
(declare-const TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. Type)
(declare-const TYPE%lib!commit_mask.CommitMask. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!commit_mask.CommitMask. (lib!commit_mask.CommitMask.) Poly)
(declare-fun %Poly%lib!commit_mask.CommitMask. (Poly) lib!commit_mask.CommitMask.)
(declare-fun Poly%lib!linked_list.LL. (lib!linked_list.LL.) Poly)
(declare-fun %Poly%lib!linked_list.LL. (Poly) lib!linked_list.LL.)
(declare-fun Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.Instance.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.Instance. (Poly) lib!linked_list.StuffAgree.Instance.)
(declare-fun Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.StuffAgree.x.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.x. (Poly) lib!linked_list.StuffAgree.x.)
(declare-fun Poly%lib!linked_list.StuffAgree.y. (lib!linked_list.StuffAgree.y.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.y. (Poly) lib!linked_list.StuffAgree.y.)
(declare-fun Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.Instance.) Poly)
(declare-fun %Poly%lib!tokens.Mim.Instance. (Poly) lib!tokens.Mim.Instance.)
(declare-fun Poly%lib!tokens.Mim.delay. (lib!tokens.Mim.delay.) Poly)
(declare-fun %Poly%lib!tokens.Mim.delay. (Poly) lib!tokens.Mim.delay.)
(declare-fun Poly%lib!tokens.Mim.heap_of_page. (lib!tokens.Mim.heap_of_page.) Poly)
(declare-fun %Poly%lib!tokens.Mim.heap_of_page. (Poly) lib!tokens.Mim.heap_of_page.)
(declare-fun Poly%lib!tokens.Mim.thread_of_segment. (lib!tokens.Mim.thread_of_segment.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_of_segment. (Poly) lib!tokens.Mim.thread_of_segment.)
(declare-fun Poly%lib!types.BoolAgree.Instance. (lib!types.BoolAgree.Instance.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.Instance. (Poly) lib!types.BoolAgree.Instance.)
(declare-fun Poly%lib!types.BoolAgree.x. (lib!types.BoolAgree.x.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.x. (Poly) lib!types.BoolAgree.x.)
(declare-fun Poly%lib!types.BoolAgree.y. (lib!types.BoolAgree.y.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.y. (Poly) lib!types.BoolAgree.y.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!cell.PCell<u32.>. (vstd!cell.PCell<u32.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<u32.>. (Poly) vstd!cell.PCell<u32.>.)
(declare-fun Poly%vstd!cell.PCell<usize.>. (vstd!cell.PCell<usize.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<usize.>. (Poly) vstd!cell.PCell<usize.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.PageInner.>. (vstd!cell.PCell<lib!types.PageInner.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.PageInner.>. (Poly) vstd!cell.PCell<lib!types.PageInner.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (Poly) vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (Poly) vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)
(declare-fun Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (Poly) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%ptr_mut%<u8.>. (ptr_mut%<u8.>.) Poly)
(declare-fun %Poly%ptr_mut%<u8.>. (Poly) ptr_mut%<u8.>.)
(declare-fun Poly%ptr_mut%<lib!linked_list.Node.>. (ptr_mut%<lib!linked_list.Node.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!linked_list.Node.>. (Poly) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun Poly%ptr_mut%<lib!types.Heap.>. (ptr_mut%<lib!types.Heap.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Heap.>. (Poly) ptr_mut%<lib!types.Heap.>.)
(declare-fun Poly%ptr_mut%<lib!types.Page.>. (ptr_mut%<lib!types.Page.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Page.>. (Poly) ptr_mut%<lib!types.Page.>.)
(declare-fun Poly%ptr_mut%<lib!types.SegmentHeader.>. (ptr_mut%<lib!types.SegmentHeader.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.SegmentHeader.>. (Poly) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun Poly%ptr_mut%<lib!types.Tld.>. (ptr_mut%<lib!types.Tld.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Tld.>. (Poly) ptr_mut%<lib!types.Tld.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPtr. (Poly) vstd!atomic_ghost.AtomicPtr.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!thread.ThreadId. (lib!thread.ThreadId.) Poly)
(declare-fun %Poly%lib!thread.ThreadId. (Poly) lib!thread.ThreadId.)
(declare-fun Poly%lib!tokens.HeapId. (lib!tokens.HeapId.) Poly)
(declare-fun %Poly%lib!tokens.HeapId. (Poly) lib!tokens.HeapId.)
(declare-fun Poly%lib!tokens.TldId. (lib!tokens.TldId.) Poly)
(declare-fun %Poly%lib!tokens.TldId. (Poly) lib!tokens.TldId.)
(declare-fun Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId.) Poly)
(declare-fun %Poly%lib!tokens.SegmentId. (Poly) lib!tokens.SegmentId.)
(declare-fun Poly%lib!tokens.PageId. (lib!tokens.PageId.) Poly)
(declare-fun %Poly%lib!tokens.PageId. (Poly) lib!tokens.PageId.)
(declare-fun Poly%lib!tokens.BlockId. (lib!tokens.BlockId.) Poly)
(declare-fun %Poly%lib!tokens.BlockId. (Poly) lib!tokens.BlockId.)
(declare-fun Poly%lib!types.PageInner. (lib!types.PageInner.) Poly)
(declare-fun %Poly%lib!types.PageInner. (Poly) lib!types.PageInner.)
(declare-fun Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr.) Poly)
(declare-fun %Poly%lib!types.AtomicHeapPtr. (Poly) lib!types.AtomicHeapPtr.)
(declare-fun Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) Poly)
(declare-fun %Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly) lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)
(declare-fun Poly%lib!types.Page. (lib!types.Page.) Poly)
(declare-fun %Poly%lib!types.Page. (Poly) lib!types.Page.)
(declare-fun Poly%lib!types.SegmentKind. (lib!types.SegmentKind.) Poly)
(declare-fun %Poly%lib!types.SegmentKind. (Poly) lib!types.SegmentKind.)
(declare-fun Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain.) Poly)
(declare-fun %Poly%lib!types.SegmentHeaderMain. (Poly) lib!types.SegmentHeaderMain.)
(declare-fun Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2.) Poly)
(declare-fun %Poly%lib!types.SegmentHeaderMain2. (Poly) lib!types.SegmentHeaderMain2.)
(declare-fun Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader.) Poly)
(declare-fun %Poly%lib!types.SegmentHeader. (Poly) lib!types.SegmentHeader.)
(declare-fun Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) Poly)
(declare-fun %Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly) lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)
(declare-fun Poly%lib!types.PageQueue. (lib!types.PageQueue.) Poly)
(declare-fun %Poly%lib!types.PageQueue. (Poly) lib!types.PageQueue.)
(declare-fun Poly%lib!types.Heap. (lib!types.Heap.) Poly)
(declare-fun %Poly%lib!types.Heap. (Poly) lib!types.Heap.)
(declare-fun Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld.) Poly)
(declare-fun %Poly%lib!types.SegmentsTld. (Poly) lib!types.SegmentsTld.)
(declare-fun Poly%lib!types.SpanQueueHeader. (lib!types.SpanQueueHeader.) Poly)
(declare-fun %Poly%lib!types.SpanQueueHeader. (Poly) lib!types.SpanQueueHeader.)
(declare-fun Poly%lib!types.Tld. (lib!types.Tld.) Poly)
(declare-fun %Poly%lib!types.Tld. (Poly) lib!types.Tld.)
(declare-fun Poly%lib!types.TldPtr. (lib!types.TldPtr.) Poly)
(declare-fun %Poly%lib!types.TldPtr. (Poly) lib!types.TldPtr.)
(declare-fun Poly%lib!types.SegmentPtr. (lib!types.SegmentPtr.) Poly)
(declare-fun %Poly%lib!types.SegmentPtr. (Poly) lib!types.SegmentPtr.)
(declare-fun Poly%lib!types.PagePtr. (lib!types.PagePtr.) Poly)
(declare-fun %Poly%lib!types.PagePtr. (Poly) lib!types.PagePtr.)
(declare-fun Poly%lib!linked_list.Node. (lib!linked_list.Node.) Poly)
(declare-fun %Poly%lib!linked_list.Node. (Poly) lib!linked_list.Node.)
(declare-fun Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple.) Poly)
(declare-fun %Poly%lib!linked_list.ThreadLLSimple. (Poly) lib!linked_list.ThreadLLSimple.)
(declare-fun Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) Poly)
(declare-fun %Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly) lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)
(declare-fun Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits.) Poly)
(declare-fun %Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly) lib!linked_list.ThreadLLWithDelayBits.)
(declare-fun Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) Poly)
(declare-fun %Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly) lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!commit_mask.CommitMask.)) (! (= x (%Poly%lib!commit_mask.CommitMask. (Poly%lib!commit_mask.CommitMask. x))) :pattern ((Poly%lib!commit_mask.CommitMask. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!commit_mask.CommitMask.) (= x (Poly%lib!commit_mask.CommitMask. (%Poly%lib!commit_mask.CommitMask. x)))) :pattern ((has_type x TYPE%lib!commit_mask.CommitMask.)))))
(assert (forall ((x lib!commit_mask.CommitMask.)) (! (has_type (Poly%lib!commit_mask.CommitMask. x) TYPE%lib!commit_mask.CommitMask.) :pattern ((has_type (Poly%lib!commit_mask.CommitMask. x) TYPE%lib!commit_mask.CommitMask.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (= x (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. x))) :pattern ((Poly%lib!linked_list.LL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LL.) (= x (Poly%lib!linked_list.LL. (%Poly%lib!linked_list.LL. x)))) :pattern ((has_type x TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (has_type (Poly%lib!linked_list.LL. x) TYPE%lib!linked_list.LL.) :pattern ((has_type (Poly%lib!linked_list.LL. x) TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (= x (%Poly%lib!linked_list.StuffAgree.Instance. (Poly%lib!linked_list.StuffAgree.Instance. x))) :pattern ((Poly%lib!linked_list.StuffAgree.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Instance.) (= x (Poly%lib!linked_list.StuffAgree.Instance. (%Poly%lib!linked_list.StuffAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.Instance.)))))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (has_type (Poly%lib!linked_list.StuffAgree.Instance. x) TYPE%lib!linked_list.StuffAgree.Instance.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Instance. x) TYPE%lib!linked_list.StuffAgree.Instance.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (= x (%Poly%lib!linked_list.StuffAgree.x. (Poly%lib!linked_list.StuffAgree.x. x))) :pattern ((Poly%lib!linked_list.StuffAgree.x. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x.) (= x (Poly%lib!linked_list.StuffAgree.x. (%Poly%lib!linked_list.StuffAgree.x. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.x.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (has_type (Poly%lib!linked_list.StuffAgree.x. x) TYPE%lib!linked_list.StuffAgree.x.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.x. x) TYPE%lib!linked_list.StuffAgree.x.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (= x (%Poly%lib!linked_list.StuffAgree.y. (Poly%lib!linked_list.StuffAgree.y. x))) :pattern ((Poly%lib!linked_list.StuffAgree.y. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y.) (= x (Poly%lib!linked_list.StuffAgree.y. (%Poly%lib!linked_list.StuffAgree.y. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.y.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (has_type (Poly%lib!linked_list.StuffAgree.y. x) TYPE%lib!linked_list.StuffAgree.y.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.y. x) TYPE%lib!linked_list.StuffAgree.y.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (= x (%Poly%lib!tokens.Mim.Instance. (Poly%lib!tokens.Mim.Instance. x))) :pattern ((Poly%lib!tokens.Mim.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Instance.) (= x (Poly%lib!tokens.Mim.Instance. (%Poly%lib!tokens.Mim.Instance. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (has_type (Poly%lib!tokens.Mim.Instance. x) TYPE%lib!tokens.Mim.Instance.) :pattern ((has_type (Poly%lib!tokens.Mim.Instance. x) TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (= x (%Poly%lib!tokens.Mim.delay. (Poly%lib!tokens.Mim.delay. x))) :pattern ((Poly%lib!tokens.Mim.delay. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay.) (= x (Poly%lib!tokens.Mim.delay. (%Poly%lib!tokens.Mim.delay. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (has_type (Poly%lib!tokens.Mim.delay. x) TYPE%lib!tokens.Mim.delay.) :pattern ((has_type (Poly%lib!tokens.Mim.delay. x) TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (= x (%Poly%lib!tokens.Mim.heap_of_page. (Poly%lib!tokens.Mim.heap_of_page. x))) :pattern ((Poly%lib!tokens.Mim.heap_of_page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page.) (= x (Poly%lib!tokens.Mim.heap_of_page. (%Poly%lib!tokens.Mim.heap_of_page. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (has_type (Poly%lib!tokens.Mim.heap_of_page. x) TYPE%lib!tokens.Mim.heap_of_page.) :pattern ((has_type (Poly%lib!tokens.Mim.heap_of_page. x) TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (= x (%Poly%lib!tokens.Mim.thread_of_segment. (Poly%lib!tokens.Mim.thread_of_segment. x))) :pattern ((Poly%lib!tokens.Mim.thread_of_segment. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment.) (= x (Poly%lib!tokens.Mim.thread_of_segment. (%Poly%lib!tokens.Mim.thread_of_segment. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (has_type (Poly%lib!tokens.Mim.thread_of_segment. x) TYPE%lib!tokens.Mim.thread_of_segment.) :pattern ((has_type (Poly%lib!tokens.Mim.thread_of_segment. x) TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((x lib!types.BoolAgree.Instance.)) (! (= x (%Poly%lib!types.BoolAgree.Instance. (Poly%lib!types.BoolAgree.Instance. x))) :pattern ((Poly%lib!types.BoolAgree.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.Instance.) (= x (Poly%lib!types.BoolAgree.Instance. (%Poly%lib!types.BoolAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.Instance.)))))
(assert (forall ((x lib!types.BoolAgree.Instance.)) (! (has_type (Poly%lib!types.BoolAgree.Instance. x) TYPE%lib!types.BoolAgree.Instance.) :pattern ((has_type (Poly%lib!types.BoolAgree.Instance. x) TYPE%lib!types.BoolAgree.Instance.)))))
(assert (forall ((x lib!types.BoolAgree.x.)) (! (= x (%Poly%lib!types.BoolAgree.x. (Poly%lib!types.BoolAgree.x. x))) :pattern ((Poly%lib!types.BoolAgree.x. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.x.) (= x (Poly%lib!types.BoolAgree.x. (%Poly%lib!types.BoolAgree.x. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.x.)))))
(assert (forall ((x lib!types.BoolAgree.x.)) (! (has_type (Poly%lib!types.BoolAgree.x. x) TYPE%lib!types.BoolAgree.x.) :pattern ((has_type (Poly%lib!types.BoolAgree.x. x) TYPE%lib!types.BoolAgree.x.)))))
(assert (forall ((x lib!types.BoolAgree.y.)) (! (= x (%Poly%lib!types.BoolAgree.y. (Poly%lib!types.BoolAgree.y. x))) :pattern ((Poly%lib!types.BoolAgree.y. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.y.) (= x (Poly%lib!types.BoolAgree.y. (%Poly%lib!types.BoolAgree.y. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.y.)))))
(assert (forall ((x lib!types.BoolAgree.y.)) (! (has_type (Poly%lib!types.BoolAgree.y. x) TYPE%lib!types.BoolAgree.y.) :pattern ((has_type (Poly%lib!types.BoolAgree.y. x) TYPE%lib!types.BoolAgree.y.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!cell.PCell<u32.>.)) (! (= x (%Poly%vstd!cell.PCell<u32.>. (Poly%vstd!cell.PCell<u32.>. x))) :pattern ((Poly%vstd!cell.PCell<u32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (UINT 32))) (= x (Poly%vstd!cell.PCell<u32.>. (%Poly%vstd!cell.PCell<u32.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PCell<u32.>.)) (! (has_type (Poly%vstd!cell.PCell<u32.>. x) (TYPE%vstd!cell.PCell. $ (UINT 32))) :pattern ((has_type (Poly%vstd!cell.PCell<u32.>. x) (TYPE%vstd!cell.PCell. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PCell<usize.>.)) (! (= x (%Poly%vstd!cell.PCell<usize.>. (Poly%vstd!cell.PCell<usize.>. x))) :pattern ((Poly%vstd!cell.PCell<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (UINT SZ))) (= x (Poly%vstd!cell.PCell<usize.>. (%Poly%vstd!cell.PCell<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PCell<usize.>.)) (! (has_type (Poly%vstd!cell.PCell<usize.>. x) (TYPE%vstd!cell.PCell. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!cell.PCell<usize.>. x) (TYPE%vstd!cell.PCell. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PCell<lib!types.PageInner.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.PageInner.>. (Poly%vstd!cell.PCell<lib!types.PageInner.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.PageInner.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.)) (= x (Poly%vstd!cell.PCell<lib!types.PageInner.>. (%Poly%vstd!cell.PCell<lib!types.PageInner.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.PageInner.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.PageInner.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.PageInner.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.)) (= x (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.)) (= x (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)) (! (= x (%Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x))) :pattern ((Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.))) (= x (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (%Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)) (! (has_type (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.))) :pattern ((has_type (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x ptr_mut%<u8.>.)) (! (= x (%Poly%ptr_mut%<u8.>. (Poly%ptr_mut%<u8.>. x))) :pattern ((Poly%ptr_mut%<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ (UINT 8))) (= x (Poly%ptr_mut%<u8.>. (%Poly%ptr_mut%<u8.>. x)))) :pattern ((has_type x (PTR $ (UINT 8)))))))
(assert (forall ((x ptr_mut%<u8.>.)) (! (has_type (Poly%ptr_mut%<u8.>. x) (PTR $ (UINT 8))) :pattern ((has_type (Poly%ptr_mut%<u8.>. x) (PTR $ (UINT 8)))))))
(assert (forall ((x ptr_mut%<lib!linked_list.Node.>.)) (! (= x (%Poly%ptr_mut%<lib!linked_list.Node.>. (Poly%ptr_mut%<lib!linked_list.Node.>. x))) :pattern ((Poly%ptr_mut%<lib!linked_list.Node.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!linked_list.Node.)) (= x (Poly%ptr_mut%<lib!linked_list.Node.>. (%Poly%ptr_mut%<lib!linked_list.Node.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x ptr_mut%<lib!linked_list.Node.>.)) (! (has_type (Poly%ptr_mut%<lib!linked_list.Node.>. x) (PTR $ TYPE%lib!linked_list.Node.)) :pattern ((has_type (Poly%ptr_mut%<lib!linked_list.Node.>. x) (PTR $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x ptr_mut%<lib!types.Heap.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Heap.>. (Poly%ptr_mut%<lib!types.Heap.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Heap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Heap.)) (= x (Poly%ptr_mut%<lib!types.Heap.>. (%Poly%ptr_mut%<lib!types.Heap.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Heap.))))))
(assert (forall ((x ptr_mut%<lib!types.Heap.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Heap.>. x) (PTR $ TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Heap.>. x) (PTR $ TYPE%lib!types.Heap.))))))
(assert (forall ((x ptr_mut%<lib!types.Page.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Page.>. (Poly%ptr_mut%<lib!types.Page.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Page.)) (= x (Poly%ptr_mut%<lib!types.Page.>. (%Poly%ptr_mut%<lib!types.Page.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Page.))))))
(assert (forall ((x ptr_mut%<lib!types.Page.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Page.>. x) (PTR $ TYPE%lib!types.Page.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Page.>. x) (PTR $ TYPE%lib!types.Page.))))))
(assert (forall ((x ptr_mut%<lib!types.SegmentHeader.>.)) (! (= x (%Poly%ptr_mut%<lib!types.SegmentHeader.>. (Poly%ptr_mut%<lib!types.SegmentHeader.>. x))) :pattern ((Poly%ptr_mut%<lib!types.SegmentHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.SegmentHeader.)) (= x (Poly%ptr_mut%<lib!types.SegmentHeader.>. (%Poly%ptr_mut%<lib!types.SegmentHeader.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x ptr_mut%<lib!types.SegmentHeader.>.)) (! (has_type (Poly%ptr_mut%<lib!types.SegmentHeader.>. x) (PTR $ TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.SegmentHeader.>. x) (PTR $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x ptr_mut%<lib!types.Tld.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Tld.>. (Poly%ptr_mut%<lib!types.Tld.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Tld.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Tld.)) (= x (Poly%ptr_mut%<lib!types.Tld.>. (%Poly%ptr_mut%<lib!types.Tld.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Tld.))))))
(assert (forall ((x ptr_mut%<lib!types.Tld.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Tld.>. x) (PTR $ TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Tld.>. x) (PTR $ TYPE%lib!types.Tld.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPtr. (Poly%vstd!atomic_ghost.AtomicPtr. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPtr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicPtr. (%Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! Poly) (_atomic_inv! Poly)) (! (=> (and (has_type _patomic! (TYPE%vstd!atomic.PAtomicPtr. T&. T&)) (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&)))) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr./AtomicPtr _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr./AtomicPtr _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (TYPE%vstd!atomic.PAtomicPtr. T&. T&))) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ ((c vstd!atomic_ghost.AtomicPtr.)) Bool ((_ is vstd!atomic_ghost.AtomicPtr./AtomicPtr) c))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (=> (is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ x) (height_lt (height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x)) (height (Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (=> (is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ x) (height_lt (height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!thread.ThreadId.)) (! (= x (%Poly%lib!thread.ThreadId. (Poly%lib!thread.ThreadId. x))) :pattern ((Poly%lib!thread.ThreadId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.ThreadId.) (= x (Poly%lib!thread.ThreadId. (%Poly%lib!thread.ThreadId. x)))) :pattern ((has_type x TYPE%lib!thread.ThreadId.)))))
(assert (forall ((_thread_id! Int)) (! (=> (uInv 64 _thread_id!) (has_type (Poly%lib!thread.ThreadId. (lib!thread.ThreadId./ThreadId _thread_id!)) TYPE%lib!thread.ThreadId.)) :pattern ((has_type (Poly%lib!thread.ThreadId. (lib!thread.ThreadId./ThreadId _thread_id!)) TYPE%lib!thread.ThreadId.)))))
(assert (forall ((x lib!thread.ThreadId.)) (! (= (lib!thread.ThreadId./ThreadId/thread_id x) (lib!thread.ThreadId./ThreadId/?thread_id x)) :pattern ((lib!thread.ThreadId./ThreadId/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.ThreadId.) (uInv 64 (lib!thread.ThreadId./ThreadId/thread_id (%Poly%lib!thread.ThreadId. x)))) :pattern ((lib!thread.ThreadId./ThreadId/thread_id (%Poly%lib!thread.ThreadId. x)) (has_type x TYPE%lib!thread.ThreadId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= x (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. x))) :pattern ((Poly%lib!tokens.HeapId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapId.) (= x (Poly%lib!tokens.HeapId. (%Poly%lib!tokens.HeapId. x)))) :pattern ((has_type x TYPE%lib!tokens.HeapId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId _id! _provenance! _uniq!)) TYPE%lib!tokens.HeapId.)) :pattern ((has_type (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId _id! _provenance! _uniq!)) TYPE%lib!tokens.HeapId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/id x) (lib!tokens.HeapId./HeapId/?id x)) :pattern ((lib!tokens.HeapId./HeapId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapId.) (<= 0 (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. x)))) :pattern ((lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. x)) (has_type x TYPE%lib!tokens.HeapId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/provenance x) (lib!tokens.HeapId./HeapId/?provenance x)) :pattern ((lib!tokens.HeapId./HeapId/provenance x)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/uniq x) (lib!tokens.HeapId./HeapId/?uniq x)) :pattern ((lib!tokens.HeapId./HeapId/uniq x)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= x (%Poly%lib!tokens.TldId. (Poly%lib!tokens.TldId. x))) :pattern ((Poly%lib!tokens.TldId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.TldId.) (= x (Poly%lib!tokens.TldId. (%Poly%lib!tokens.TldId. x)))) :pattern ((has_type x TYPE%lib!tokens.TldId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.TldId. (lib!tokens.TldId./TldId _id! _provenance!)) TYPE%lib!tokens.TldId.)) :pattern ((has_type (Poly%lib!tokens.TldId. (lib!tokens.TldId./TldId _id! _provenance!)) TYPE%lib!tokens.TldId.)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= (lib!tokens.TldId./TldId/id x) (lib!tokens.TldId./TldId/?id x)) :pattern ((lib!tokens.TldId./TldId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.TldId.) (<= 0 (lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. x)))) :pattern ((lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. x)) (has_type x TYPE%lib!tokens.TldId.)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= (lib!tokens.TldId./TldId/provenance x) (lib!tokens.TldId./TldId/?provenance x)) :pattern ((lib!tokens.TldId./TldId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= x (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. x))) :pattern ((Poly%lib!tokens.SegmentId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (= x (Poly%lib!tokens.SegmentId. (%Poly%lib!tokens.SegmentId. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/id x) (lib!tokens.SegmentId./SegmentId/?id x)) :pattern ((lib!tokens.SegmentId./SegmentId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (<= 0 (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)))) :pattern ((lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)) (has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/provenance x) (lib!tokens.SegmentId./SegmentId/?provenance x)) :pattern ((lib!tokens.SegmentId./SegmentId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/uniq x) (lib!tokens.SegmentId./SegmentId/?uniq x)) :pattern ((lib!tokens.SegmentId./SegmentId/uniq x)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= x (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. x))) :pattern ((Poly%lib!tokens.PageId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (= x (Poly%lib!tokens.PageId. (%Poly%lib!tokens.PageId. x)))) :pattern ((has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((_segment_id! lib!tokens.SegmentId.) (_idx! Int)) (! (=> (and (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.) (<= 0 _idx!)) (has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/segment_id x) (lib!tokens.PageId./PageId/?segment_id x)) :pattern ((lib!tokens.PageId./PageId/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/idx x) (lib!tokens.PageId./PageId/?idx x)) :pattern ((lib!tokens.PageId./PageId/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (<= 0 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= x (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. x))) :pattern ((Poly%lib!tokens.BlockId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (= x (Poly%lib!tokens.BlockId. (%Poly%lib!tokens.BlockId. x)))) :pattern ((has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((_page_id! lib!tokens.PageId.) (_idx! Int) (_slice_idx! Int) (_block_size! Int)) (! (=> (and (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.) (<= 0 _idx!) (<= 0 _slice_idx!) (<= 0 _block_size!)) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.BlockId./BlockId _page_id! _idx! _slice_idx! _block_size!)) TYPE%lib!tokens.BlockId.)) :pattern ((has_type (Poly%lib!tokens.BlockId. (lib!tokens.BlockId./BlockId _page_id! _idx! _slice_idx! _block_size!)) TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/page_id x) (lib!tokens.BlockId./BlockId/?page_id x)) :pattern ((lib!tokens.BlockId./BlockId/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/idx x) (lib!tokens.BlockId./BlockId/?idx x)) :pattern ((lib!tokens.BlockId./BlockId/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/slice_idx x) (lib!tokens.BlockId./BlockId/?slice_idx x)) :pattern ((lib!tokens.BlockId./BlockId/slice_idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/block_size x) (lib!tokens.BlockId./BlockId/?block_size x)) :pattern ((lib!tokens.BlockId./BlockId/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= x (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. x))) :pattern ((Poly%lib!types.PageInner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (= x (Poly%lib!types.PageInner. (%Poly%lib!types.PageInner. x)))) :pattern ((has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((_flags0! Int) (_capacity! Int) (_reserved! Int) (_flags1! Int) (_flags2! Int) (_free! lib!linked_list.LL.) (_used! Int) (_xblock_size! Int) (_local_free! lib!linked_list.LL.)) (! (=> (and (uInv 8 _flags0!) (uInv 16 _capacity!) (uInv 16 _reserved!) (uInv 8 _flags1!) (uInv 8 _flags2!) (uInv 32 _used!) (uInv 32 _xblock_size!)) (has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags0 x) (lib!types.PageInner./PageInner/?flags0 x)) :pattern ((lib!types.PageInner./PageInner/flags0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/capacity x) (lib!types.PageInner./PageInner/?capacity x)) :pattern ((lib!types.PageInner./PageInner/capacity x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/reserved x) (lib!types.PageInner./PageInner/?reserved x)) :pattern ((lib!types.PageInner./PageInner/reserved x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags1 x) (lib!types.PageInner./PageInner/?flags1 x)) :pattern ((lib!types.PageInner./PageInner/flags1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags2 x) (lib!types.PageInner./PageInner/?flags2 x)) :pattern ((lib!types.PageInner./PageInner/flags2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/free x) (lib!types.PageInner./PageInner/?free x)) :pattern ((lib!types.PageInner./PageInner/free x)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/used x) (lib!types.PageInner./PageInner/?used x)) :pattern ((lib!types.PageInner./PageInner/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/xblock_size x) (lib!types.PageInner./PageInner/?xblock_size x)) :pattern ((lib!types.PageInner./PageInner/xblock_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/local_free x) (lib!types.PageInner./PageInner/?local_free x)) :pattern ((lib!types.PageInner./PageInner/local_free x)))))
(define-fun is-lib!types.PageInner./PageInner_ ((c lib!types.PageInner.)) Bool ((_ is lib!types.PageInner./PageInner) c))
(assert (forall ((x lib!types.PageInner.)) (! (=> (is-lib!types.PageInner./PageInner_ x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x)))))))
(assert (forall ((x lib!types.PageInner.)) (! (=> (is-lib!types.PageInner./PageInner_ x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x)))))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= x (%Poly%lib!types.AtomicHeapPtr. (Poly%lib!types.AtomicHeapPtr. x))) :pattern ((Poly%lib!types.AtomicHeapPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (= x (Poly%lib!types.AtomicHeapPtr. (%Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((_atomic! vstd!atomic_ghost.AtomicPtr.) (_instance! lib!tokens.Mim.Instance.) (_page_id! lib!tokens.PageId.) (_emp! lib!types.BoolAgree.x.) (_emp_inst! lib!types.BoolAgree.Instance.)) (! (=> (and (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr _atomic! _instance! _page_id! _emp! _emp_inst!)) TYPE%lib!types.AtomicHeapPtr.)) :pattern ((has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr _atomic! _instance! _page_id! _emp! _emp_inst!)) TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?atomic x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.))) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?instance x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?page_id x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%lib!tokens.PageId. (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/emp x)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp_inst x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst x)))))
(define-fun is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ ((c lib!types.AtomicHeapPtr.)) Bool ((_ is lib!types.AtomicHeapPtr./AtomicHeapPtr) c))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (=> (is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x))) (height (Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x)))))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (=> (is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x))) (height (Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x)))))))
(assert (forall ((x lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (! (= x (%Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x))) :pattern ((Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) (= x (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (%Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x)))) :pattern ((has_type x TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)))))
(assert (forall ((x lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (! (has_type (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x) TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) :pattern ((has_type (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x) TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)))))
(assert (forall ((x lib!types.Page.)) (! (= x (%Poly%lib!types.Page. (Poly%lib!types.Page. x))) :pattern ((Poly%lib!types.Page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (= x (Poly%lib!types.Page. (%Poly%lib!types.Page. x)))) :pattern ((has_type x TYPE%lib!types.Page.)))))
(assert (forall ((_count! vstd!cell.PCell<u32.>.) (_offset! Int) (_inner! vstd!cell.PCell<lib!types.PageInner.>.) (_xthread_free! lib!linked_list.ThreadLLWithDelayBits.) (_xheap! lib!types.AtomicHeapPtr.) (_prev! vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (_next! vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (_padding! Int)) (! (=> (and (uInv 32 _offset!) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. _xthread_free!) TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%lib!types.AtomicHeapPtr. _xheap!) TYPE%lib!types.AtomicHeapPtr.) (uInv SZ _padding!)) (has_type (Poly%lib!types.Page. (lib!types.Page./Page _count! _offset! _inner! _xthread_free! _xheap! _prev! _next! _padding!)) TYPE%lib!types.Page.)) :pattern ((has_type (Poly%lib!types.Page. (lib!types.Page./Page _count! _offset! _inner! _xthread_free! _xheap! _prev! _next! _padding!)) TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/count x) (lib!types.Page./Page/?count x)) :pattern ((lib!types.Page./Page/count x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/offset x) (lib!types.Page./Page/?offset x)) :pattern ((lib!types.Page./Page/offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (uInv 32 (lib!types.Page./Page/offset (%Poly%lib!types.Page. x)))) :pattern ((lib!types.Page./Page/offset (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/inner x) (lib!types.Page./Page/?inner x)) :pattern ((lib!types.Page./Page/inner x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/xthread_free x) (lib!types.Page./Page/?xthread_free x)) :pattern ((lib!types.Page./Page/xthread_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. x))) TYPE%lib!linked_list.ThreadLLWithDelayBits.)) :pattern ((lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/xheap x) (lib!types.Page./Page/?xheap x)) :pattern ((lib!types.Page./Page/xheap x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap (%Poly%lib!types.Page. x))) TYPE%lib!types.AtomicHeapPtr.)) :pattern ((lib!types.Page./Page/xheap (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/prev x) (lib!types.Page./Page/?prev x)) :pattern ((lib!types.Page./Page/prev x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/next x) (lib!types.Page./Page/?next x)) :pattern ((lib!types.Page./Page/next x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/padding x) (lib!types.Page./Page/?padding x)) :pattern ((lib!types.Page./Page/padding x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (uInv SZ (lib!types.Page./Page/padding (%Poly%lib!types.Page. x)))) :pattern ((lib!types.Page./Page/padding (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(define-fun is-lib!types.Page./Page_ ((c lib!types.Page.)) Bool ((_ is lib!types.Page./Page) c))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next x)))))))
(assert (forall ((x lib!types.SegmentKind.)) (! (= x (%Poly%lib!types.SegmentKind. (Poly%lib!types.SegmentKind. x))) :pattern ((Poly%lib!types.SegmentKind. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentKind.) (= x (Poly%lib!types.SegmentKind. (%Poly%lib!types.SegmentKind. x)))) :pattern ((has_type x TYPE%lib!types.SegmentKind.)))))
(assert (forall ((x lib!types.SegmentKind.)) (! (has_type (Poly%lib!types.SegmentKind. x) TYPE%lib!types.SegmentKind.) :pattern ((has_type (Poly%lib!types.SegmentKind. x) TYPE%lib!types.SegmentKind.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= x (%Poly%lib!types.SegmentHeaderMain. (Poly%lib!types.SegmentHeaderMain. x))) :pattern ((Poly%lib!types.SegmentHeaderMain. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (= x (Poly%lib!types.SegmentHeaderMain. (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((_memid! Int) (_mem_is_pinned! Bool) (_mem_is_large! Bool) (_mem_is_committed! Bool) (_mem_alignment! Int) (_mem_align_offset! Int) (_allow_decommit! Bool) (_decommit_expire! Int) (_decommit_mask! lib!commit_mask.CommitMask.) (_commit_mask! lib!commit_mask.CommitMask.)) (! (=> (and (uInv SZ _memid!) (uInv SZ _mem_alignment!) (uInv SZ _mem_align_offset!) (iInv 64 _decommit_expire!)) (has_type (Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain./SegmentHeaderMain _memid! _mem_is_pinned! _mem_is_large! _mem_is_committed! _mem_alignment! _mem_align_offset! _allow_decommit! _decommit_expire! _decommit_mask! _commit_mask!)) TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain./SegmentHeaderMain _memid! _mem_is_pinned! _mem_is_large! _mem_is_committed! _mem_alignment! _mem_align_offset! _allow_decommit! _decommit_expire! _decommit_mask! _commit_mask!)) TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/memid x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?memid x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/memid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_pinned x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_large x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_committed x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_alignment x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_align_offset x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?allow_decommit x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_expire x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (iInv 64 (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_mask x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?commit_mask x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= x (%Poly%lib!types.SegmentHeaderMain2. (Poly%lib!types.SegmentHeaderMain2. x))) :pattern ((Poly%lib!types.SegmentHeaderMain2. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (= x (Poly%lib!types.SegmentHeaderMain2. (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((_next! ptr_mut%<lib!types.SegmentHeader.>.) (_abandoned! Int) (_abandoned_visits! Int) (_used! Int) (_cookie! Int) (_segment_slices! Int) (_segment_info_slices! Int) (_kind! lib!types.SegmentKind.) (_slice_entries! Int)) (! (=> (and (uInv SZ _abandoned!) (uInv SZ _abandoned_visits!) (uInv SZ _used!) (uInv SZ _cookie!) (uInv SZ _segment_slices!) (uInv SZ _segment_info_slices!) (uInv SZ _slice_entries!)) (has_type (Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2./SegmentHeaderMain2 _next! _abandoned! _abandoned_visits! _used! _cookie! _segment_slices! _segment_info_slices! _kind! _slice_entries!)) TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2./SegmentHeaderMain2 _next! _abandoned! _abandoned_visits! _used! _cookie! _segment_slices! _segment_info_slices! _kind! _slice_entries!)) TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?next x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned_visits x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?used x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?cookie x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_slices x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_info_slices x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?kind x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?slice_entries x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= x (%Poly%lib!types.SegmentHeader. (Poly%lib!types.SegmentHeader. x))) :pattern ((Poly%lib!types.SegmentHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (= x (Poly%lib!types.SegmentHeader. (%Poly%lib!types.SegmentHeader. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((_main! vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) (_abandoned_next! Int) (_main2! vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) (_thread_id! vstd!atomic_ghost.AtomicU64.) (_instance! lib!tokens.Mim.Instance.) (_segment_id! lib!tokens.SegmentId.)) (! (=> (and (uInv SZ _abandoned_next!) (has_type (Poly%vstd!atomic_ghost.AtomicU64. _thread_id!) (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.)) (has_type (Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader./SegmentHeader _main! _abandoned_next! _main2! _thread_id! _instance! _segment_id!)) TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader./SegmentHeader _main! _abandoned_next! _main2! _thread_id! _instance! _segment_id!)) TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/main x) (lib!types.SegmentHeader./SegmentHeader/?main x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/main x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/abandoned_next x) (lib!types.SegmentHeader./SegmentHeader/?abandoned_next x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/abandoned_next x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (uInv SZ (lib!types.SegmentHeader./SegmentHeader/abandoned_next (%Poly%lib!types.SegmentHeader. x)))) :pattern ((lib!types.SegmentHeader./SegmentHeader/abandoned_next (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/main2 x) (lib!types.SegmentHeader./SegmentHeader/?main2 x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/main2 x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/thread_id x) (lib!types.SegmentHeader./SegmentHeader/?thread_id x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. x))) (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.))) :pattern ((lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/instance x) (lib!types.SegmentHeader./SegmentHeader/?instance x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/instance x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/segment_id x) (lib!types.SegmentHeader./SegmentHeader/?segment_id x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%lib!tokens.SegmentId. (lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(define-fun is-lib!types.SegmentHeader./SegmentHeader_ ((c lib!types.SegmentHeader.)) Bool ((_ is lib!types.SegmentHeader./SegmentHeader) c))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 x)))))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id x)))))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance x)))))))
(assert (forall ((x lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (! (= x (%Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x))) :pattern ((Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) (= x (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (%Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x)))) :pattern ((has_type x TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)))))
(assert (forall ((x lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (! (has_type (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x) TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) :pattern ((has_type (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x) TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= x (%Poly%lib!types.PageQueue. (Poly%lib!types.PageQueue. x))) :pattern ((Poly%lib!types.PageQueue. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageQueue.) (= x (Poly%lib!types.PageQueue. (%Poly%lib!types.PageQueue. x)))) :pattern ((has_type x TYPE%lib!types.PageQueue.)))))
(assert (forall ((_first! ptr_mut%<lib!types.Page.>.) (_last! ptr_mut%<lib!types.Page.>.) (_block_size! Int)) (! (=> (uInv SZ _block_size!) (has_type (Poly%lib!types.PageQueue. (lib!types.PageQueue./PageQueue _first! _last! _block_size!)) TYPE%lib!types.PageQueue.)) :pattern ((has_type (Poly%lib!types.PageQueue. (lib!types.PageQueue./PageQueue _first! _last! _block_size!)) TYPE%lib!types.PageQueue.)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/first x) (lib!types.PageQueue./PageQueue/?first x)) :pattern ((lib!types.PageQueue./PageQueue/first x)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/last x) (lib!types.PageQueue./PageQueue/?last x)) :pattern ((lib!types.PageQueue./PageQueue/last x)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/block_size x) (lib!types.PageQueue./PageQueue/?block_size x)) :pattern ((lib!types.PageQueue./PageQueue/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageQueue.) (uInv SZ (lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. x)))) :pattern ((lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. x)) (has_type x TYPE%lib!types.PageQueue.)))))
(assert (forall ((x lib!types.Heap.)) (! (= x (%Poly%lib!types.Heap. (Poly%lib!types.Heap. x))) :pattern ((Poly%lib!types.Heap. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (= x (Poly%lib!types.Heap. (%Poly%lib!types.Heap. x)))) :pattern ((has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((_tld_ptr! lib!types.TldPtr.) (_pages_free_direct! Poly) (_pages! Poly) (_thread_delayed_free! lib!linked_list.ThreadLLSimple.) (_thread_id! lib!thread.ThreadId.) (_arena_id! Int) (_page_count! vstd!cell.PCell<usize.>.) (_page_retired_min! vstd!cell.PCell<usize.>.) (_page_retired_max! vstd!cell.PCell<usize.>.) (_no_reclaim! Bool) (_page_empty_ptr! ptr_mut%<lib!types.Page.>.)) (! (=> (and (has_type (Poly%lib!types.TldPtr. _tld_ptr!) TYPE%lib!types.TldPtr.) (has_type _pages_free_direct! (TYPE%vstd!cell.PCell. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)))) (has_type _pages! (TYPE%vstd!cell.PCell. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)))) (has_type (Poly%lib!linked_list.ThreadLLSimple. _thread_delayed_free!) TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!thread.ThreadId. _thread_id!) TYPE%lib!thread.ThreadId.) (uInv SZ _arena_id!)) (has_type (Poly%lib!types.Heap. (lib!types.Heap./Heap _tld_ptr! _pages_free_direct! _pages! _thread_delayed_free! _thread_id! _arena_id! _page_count! _page_retired_min! _page_retired_max! _no_reclaim! _page_empty_ptr!)) TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%lib!types.Heap. (lib!types.Heap./Heap _tld_ptr! _pages_free_direct! _pages! _thread_delayed_free! _thread_id! _arena_id! _page_count! _page_retired_min! _page_retired_max! _no_reclaim! _page_empty_ptr!)) TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/tld_ptr x) (lib!types.Heap./Heap/?tld_ptr x)) :pattern ((lib!types.Heap./Heap/tld_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. x))) TYPE%lib!types.TldPtr.)) :pattern ((lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/pages_free_direct x) (lib!types.Heap./Heap/?pages_free_direct x)) :pattern ((lib!types.Heap./Heap/pages_free_direct x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. x)) (TYPE%vstd!cell.PCell. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129))))) :pattern ((lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/pages x) (lib!types.Heap./Heap/?pages x)) :pattern ((lib!types.Heap./Heap/pages x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. x)) (TYPE%vstd!cell.PCell. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75))))) :pattern ((lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/thread_delayed_free x) (lib!types.Heap./Heap/?thread_delayed_free x)) :pattern ((lib!types.Heap./Heap/thread_delayed_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. x))) TYPE%lib!linked_list.ThreadLLSimple.)) :pattern ((lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/thread_id x) (lib!types.Heap./Heap/?thread_id x)) :pattern ((lib!types.Heap./Heap/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!thread.ThreadId. (lib!types.Heap./Heap/thread_id (%Poly%lib!types.Heap. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!types.Heap./Heap/thread_id (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/arena_id x) (lib!types.Heap./Heap/?arena_id x)) :pattern ((lib!types.Heap./Heap/arena_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (uInv SZ (lib!types.Heap./Heap/arena_id (%Poly%lib!types.Heap. x)))) :pattern ((lib!types.Heap./Heap/arena_id (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_count x) (lib!types.Heap./Heap/?page_count x)) :pattern ((lib!types.Heap./Heap/page_count x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_retired_min x) (lib!types.Heap./Heap/?page_retired_min x)) :pattern ((lib!types.Heap./Heap/page_retired_min x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_retired_max x) (lib!types.Heap./Heap/?page_retired_max x)) :pattern ((lib!types.Heap./Heap/page_retired_max x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/no_reclaim x) (lib!types.Heap./Heap/?no_reclaim x)) :pattern ((lib!types.Heap./Heap/no_reclaim x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_empty_ptr x) (lib!types.Heap./Heap/?page_empty_ptr x)) :pattern ((lib!types.Heap./Heap/page_empty_ptr x)))))
(define-fun is-lib!types.Heap./Heap_ ((c lib!types.Heap.)) Bool ((_ is lib!types.Heap./Heap) c))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr x))) (height (Poly%lib!types.Heap. x)))) :pattern ((height (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr x)))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (lib!types.Heap./Heap/pages_free_direct x)) (height (Poly%lib!types.Heap. x)))) :pattern ((height (lib!types.Heap./Heap/pages_free_direct x))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (lib!types.Heap./Heap/pages x)) (height (Poly%lib!types.Heap. x)))) :pattern ((height (lib!types.Heap./Heap/pages x))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free x))) (height (Poly%lib!types.Heap. x)))) :pattern ((height (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free x)))))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= x (%Poly%lib!types.SegmentsTld. (Poly%lib!types.SegmentsTld. x))) :pattern ((Poly%lib!types.SegmentsTld. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (= x (Poly%lib!types.SegmentsTld. (%Poly%lib!types.SegmentsTld. x)))) :pattern ((has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((_span_queue_headers! %%Function%%) (_count! Int) (_peak_count! Int) (_current_size! Int) (_peak_size! Int)) (! (=> (and (has_type (Poly%array%. _span_queue_headers!) (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32))) (uInv SZ _count!) (uInv SZ _peak_count!) (uInv SZ _current_size!) (uInv SZ _peak_size!)) (has_type (Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld./SegmentsTld _span_queue_headers! _count! _peak_count! _current_size! _peak_size!)) TYPE%lib!types.SegmentsTld.)) :pattern ((has_type (Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld./SegmentsTld _span_queue_headers! _count! _peak_count! _current_size! _peak_size!)) TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/span_queue_headers x) (lib!types.SegmentsTld./SegmentsTld/?span_queue_headers x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/span_queue_headers x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (has_type (Poly%array%. (lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. x))) (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/count x) (lib!types.SegmentsTld./SegmentsTld/?count x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/count (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/count (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/peak_count x) (lib!types.SegmentsTld./SegmentsTld/?peak_count x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/peak_count (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_count (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/current_size x) (lib!types.SegmentsTld./SegmentsTld/?current_size x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/current_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/current_size (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/current_size (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/peak_size x) (lib!types.SegmentsTld./SegmentsTld/?peak_size x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/peak_size (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_size (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= x (%Poly%lib!types.SpanQueueHeader. (Poly%lib!types.SpanQueueHeader. x))) :pattern ((Poly%lib!types.SpanQueueHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SpanQueueHeader.) (= x (Poly%lib!types.SpanQueueHeader. (%Poly%lib!types.SpanQueueHeader. x)))) :pattern ((has_type x TYPE%lib!types.SpanQueueHeader.)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= (lib!types.SpanQueueHeader./SpanQueueHeader/first x) (lib!types.SpanQueueHeader./SpanQueueHeader/?first x)) :pattern ((lib!types.SpanQueueHeader./SpanQueueHeader/first x)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= (lib!types.SpanQueueHeader./SpanQueueHeader/last x) (lib!types.SpanQueueHeader./SpanQueueHeader/?last x)) :pattern ((lib!types.SpanQueueHeader./SpanQueueHeader/last x)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (has_type (Poly%lib!types.SpanQueueHeader. x) TYPE%lib!types.SpanQueueHeader.) :pattern ((has_type (Poly%lib!types.SpanQueueHeader. x) TYPE%lib!types.SpanQueueHeader.)))))
(assert (forall ((x lib!types.Tld.)) (! (= x (%Poly%lib!types.Tld. (Poly%lib!types.Tld. x))) :pattern ((Poly%lib!types.Tld. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Tld.) (= x (Poly%lib!types.Tld. (%Poly%lib!types.Tld. x)))) :pattern ((has_type x TYPE%lib!types.Tld.)))))
(assert (forall ((_heap_backing! ptr_mut%<lib!types.Heap.>.) (_segments! lib!types.SegmentsTld.)) (! (=> (has_type (Poly%lib!types.SegmentsTld. _segments!) TYPE%lib!types.SegmentsTld.) (has_type (Poly%lib!types.Tld. (lib!types.Tld./Tld _heap_backing! _segments!)) TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%lib!types.Tld. (lib!types.Tld./Tld _heap_backing! _segments!)) TYPE%lib!types.Tld.)))))
(assert (forall ((x lib!types.Tld.)) (! (= (lib!types.Tld./Tld/heap_backing x) (lib!types.Tld./Tld/?heap_backing x)) :pattern ((lib!types.Tld./Tld/heap_backing x)))))
(assert (forall ((x lib!types.Tld.)) (! (= (lib!types.Tld./Tld/segments x) (lib!types.Tld./Tld/?segments x)) :pattern ((lib!types.Tld./Tld/segments x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Tld.) (has_type (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. x))) TYPE%lib!types.SegmentsTld.)) :pattern ((lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. x)) (has_type x TYPE%lib!types.Tld.)))))
(define-fun is-lib!types.Tld./Tld_ ((c lib!types.Tld.)) Bool ((_ is lib!types.Tld./Tld) c))
(assert (forall ((x lib!types.Tld.)) (! (=> (is-lib!types.Tld./Tld_ x) (height_lt (height (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments x))) (height (Poly%lib!types.Tld. x)))) :pattern ((height (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments x)))))))
(assert (forall ((x lib!types.TldPtr.)) (! (= x (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. x))) :pattern ((Poly%lib!types.TldPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.TldPtr.) (= x (Poly%lib!types.TldPtr. (%Poly%lib!types.TldPtr. x)))) :pattern ((has_type x TYPE%lib!types.TldPtr.)))))
(assert (forall ((_tld_ptr! ptr_mut%<lib!types.Tld.>.) (_tld_id! lib!tokens.TldId.)) (! (=> (has_type (Poly%lib!tokens.TldId. _tld_id!) TYPE%lib!tokens.TldId.) (has_type (Poly%lib!types.TldPtr. (lib!types.TldPtr./TldPtr _tld_ptr! _tld_id!)) TYPE%lib!types.TldPtr.)) :pattern ((has_type (Poly%lib!types.TldPtr. (lib!types.TldPtr./TldPtr _tld_ptr! _tld_id!)) TYPE%lib!types.TldPtr.)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= (lib!types.TldPtr./TldPtr/tld_ptr x) (lib!types.TldPtr./TldPtr/?tld_ptr x)) :pattern ((lib!types.TldPtr./TldPtr/tld_ptr x)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= (lib!types.TldPtr./TldPtr/tld_id x) (lib!types.TldPtr./TldPtr/?tld_id x)) :pattern ((lib!types.TldPtr./TldPtr/tld_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.TldPtr.) (has_type (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. x))) TYPE%lib!tokens.TldId.)) :pattern ((lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. x)) (has_type x TYPE%lib!types.TldPtr.)))))
(assert (forall ((x lib!types.SegmentPtr.)) (! (= x (%Poly%lib!types.SegmentPtr. (Poly%lib!types.SegmentPtr. x))) :pattern ((Poly%lib!types.SegmentPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentPtr.) (= x (Poly%lib!types.SegmentPtr. (%Poly%lib!types.SegmentPtr. x)))) :pattern ((has_type x TYPE%lib!types.SegmentPtr.)))))
(assert (forall ((_segment_ptr! ptr_mut%<lib!types.SegmentHeader.>.) (_segment_id! lib!tokens.SegmentId.)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!types.SegmentPtr. (lib!types.SegmentPtr./SegmentPtr _segment_ptr! _segment_id!)) TYPE%lib!types.SegmentPtr.)) :pattern ((has_type (Poly%lib!types.SegmentPtr. (lib!types.SegmentPtr./SegmentPtr _segment_ptr! _segment_id!)) TYPE%lib!types.SegmentPtr.)))))
(assert (forall ((x lib!types.SegmentPtr.)) (! (= (lib!types.SegmentPtr./SegmentPtr/segment_ptr x) (lib!types.SegmentPtr./SegmentPtr/?segment_ptr x)) :pattern ((lib!types.SegmentPtr./SegmentPtr/segment_ptr x)))))
(assert (forall ((x lib!types.SegmentPtr.)) (! (= (lib!types.SegmentPtr./SegmentPtr/segment_id x) (lib!types.SegmentPtr./SegmentPtr/?segment_id x)) :pattern ((lib!types.SegmentPtr./SegmentPtr/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentPtr.) (has_type (Poly%lib!tokens.SegmentId. (lib!types.SegmentPtr./SegmentPtr/segment_id (%Poly%lib!types.SegmentPtr. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!types.SegmentPtr./SegmentPtr/segment_id (%Poly%lib!types.SegmentPtr. x)) (has_type x TYPE%lib!types.SegmentPtr.)))))
(assert (forall ((x lib!types.PagePtr.)) (! (= x (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. x))) :pattern ((Poly%lib!types.PagePtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PagePtr.) (= x (Poly%lib!types.PagePtr. (%Poly%lib!types.PagePtr. x)))) :pattern ((has_type x TYPE%lib!types.PagePtr.)))))
(assert (forall ((_page_ptr! ptr_mut%<lib!types.Page.>.) (_page_id! lib!tokens.PageId.)) (! (=> (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!types.PagePtr. (lib!types.PagePtr./PagePtr _page_ptr! _page_id!)) TYPE%lib!types.PagePtr.)) :pattern ((has_type (Poly%lib!types.PagePtr. (lib!types.PagePtr./PagePtr _page_ptr! _page_id!)) TYPE%lib!types.PagePtr.)))))
(assert (forall ((x lib!types.PagePtr.)) (! (= (lib!types.PagePtr./PagePtr/page_ptr x) (lib!types.PagePtr./PagePtr/?page_ptr x)) :pattern ((lib!types.PagePtr./PagePtr/page_ptr x)))))
(assert (forall ((x lib!types.PagePtr.)) (! (= (lib!types.PagePtr./PagePtr/page_id x) (lib!types.PagePtr./PagePtr/?page_id x)) :pattern ((lib!types.PagePtr./PagePtr/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PagePtr.) (has_type (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. x)) (has_type x TYPE%lib!types.PagePtr.)))))
(assert (forall ((x lib!linked_list.Node.)) (! (= x (%Poly%lib!linked_list.Node. (Poly%lib!linked_list.Node. x))) :pattern ((Poly%lib!linked_list.Node. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.Node.) (= x (Poly%lib!linked_list.Node. (%Poly%lib!linked_list.Node. x)))) :pattern ((has_type x TYPE%lib!linked_list.Node.)))))
(assert (forall ((x lib!linked_list.Node.)) (! (= (lib!linked_list.Node./Node/ptr x) (lib!linked_list.Node./Node/?ptr x)) :pattern ((lib!linked_list.Node./Node/ptr x)))))
(assert (forall ((x lib!linked_list.Node.)) (! (has_type (Poly%lib!linked_list.Node. x) TYPE%lib!linked_list.Node.) :pattern ((has_type (Poly%lib!linked_list.Node. x) TYPE%lib!linked_list.Node.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= x (%Poly%lib!linked_list.ThreadLLSimple. (Poly%lib!linked_list.ThreadLLSimple. x))) :pattern ((Poly%lib!linked_list.ThreadLLSimple. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (= x (Poly%lib!linked_list.ThreadLLSimple. (%Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_heap_id! lib!tokens.HeapId.) (_atomic! vstd!atomic_ghost.AtomicPtr.)) (! (=> (and (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) (has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple./ThreadLLSimple _instance! _heap_id! _atomic!)) TYPE%lib!linked_list.ThreadLLSimple.)) :pattern ((has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple./ThreadLLSimple _instance! _heap_id! _atomic!)) TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?instance x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?heap_id x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!tokens.HeapId. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?atomic x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(define-fun is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ ((c lib!linked_list.ThreadLLSimple.)) Bool ((_ is lib!linked_list.ThreadLLSimple./ThreadLLSimple) c))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (=> (is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x))) (height (Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x)))))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (=> (is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x))) (height (Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x)))))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (! (= x (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x))) :pattern ((Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) (= x (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x)))) :pattern ((has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (! (has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) :pattern ((has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= x (%Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly%lib!linked_list.ThreadLLWithDelayBits. x))) :pattern ((Poly%lib!linked_list.ThreadLLWithDelayBits. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (= x (Poly%lib!linked_list.ThreadLLWithDelayBits. (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_atomic! vstd!atomic_ghost.AtomicPtr.) (_emp! lib!linked_list.StuffAgree.x.) (_emp_inst! lib!linked_list.StuffAgree.Instance.)) (! (=> (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits _instance! _atomic! _emp! _emp_inst!)) TYPE%lib!linked_list.ThreadLLWithDelayBits.)) :pattern ((has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits _instance! _atomic! _emp! _emp_inst!)) TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?instance x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?atomic x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)) (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp x)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp_inst x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst x)))))
(define-fun is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ ((c lib!linked_list.ThreadLLWithDelayBits.)) Bool ((_ is lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits) c))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (=> (is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x))) (height (Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x)))))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (=> (is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x))) (height (Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x)))))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (! (= x (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x))) :pattern ((Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) (= x (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x)))) :pattern ((has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (! (has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) :pattern ((has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 16)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 16)) (UINT 16)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (= (proj%%vstd!view.View./V $ (SINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 64)) (SINT 64)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_specs::spec_addr")
(declare-fun vstd!raw_ptr.ptr_mut_specs.spec_addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_from_data")
(declare-fun vstd!raw_ptr.ptr_mut_from_data.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_specs::spec_with_addr")
(declare-fun vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::layout::align_of")
(declare-fun vstd!layout.align_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::spec_cast_ptr_to_thin_ptr")
(declare-fun vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::spec_cast_ptr_to_usize")
(declare-fun vstd!raw_ptr.spec_cast_ptr_to_usize.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::is_heap_ptr")
(declare-fun lib!layout.is_heap_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::INTPTR_SHIFT")
(declare-fun lib!config.INTPTR_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SLICE_SHIFT")
(declare-fun lib!config.SLICE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SEGMENT_SHIFT")
(declare-fun lib!config.SEGMENT_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SEGMENT_SIZE")
(declare-fun lib!config.SEGMENT_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::layout::segment_start")
(declare-fun lib!layout.segment_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::config::SLICE_SIZE")
(declare-fun lib!config.SLICE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::SLICES_PER_SEGMENT")
(declare-fun lib!config.SLICES_PER_SEGMENT.? () Int)
(set-info :comment ";; Function-Decl lib::layout::page_start")
(declare-fun lib!layout.page_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::config::INTPTR_SIZE")
(declare-fun lib!config.INTPTR_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::MAX_ALIGN_SIZE")
(declare-fun lib!config.MAX_ALIGN_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::MAX_ALIGN_GUARANTEE")
(declare-fun lib!config.MAX_ALIGN_GUARANTEE.? () Int)
(set-info :comment ";; Function-Decl lib::layout::start_offset")
(declare-fun lib!layout.start_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::block_start_at")
(declare-fun lib!layout.block_start_at.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::block_start")
(declare-fun lib!layout.block_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::is_block_ptr1")
(declare-fun lib!layout.is_block_ptr1.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_block_ptr")
(declare-fun lib!layout.is_block_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_tld_ptr")
(declare-fun lib!layout.is_tld_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::BlockId::page_id_for_slice")
(declare-fun lib!tokens.impl&%1.page_id_for_slice.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::config::SMALL_PAGE_SHIFT")
(declare-fun lib!config.SMALL_PAGE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_PAGE_SHIFT")
(declare-fun lib!config.MEDIUM_PAGE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_PAGE_SIZE")
(declare-fun lib!config.MEDIUM_PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_OBJ_SIZE_MAX")
(declare-fun lib!config.MEDIUM_OBJ_SIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::config::SIZEOF_SEGMENT_HEADER")
(declare-fun lib!config.SIZEOF_SEGMENT_HEADER.? () Int)
(set-info :comment ";; Function-Decl lib::config::SIZEOF_PAGE_HEADER")
(declare-fun lib!config.SIZEOF_PAGE_HEADER.? () Int)
(set-info :comment ";; Function-Decl lib::layout::page_header_start")
(declare-fun lib!layout.page_header_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::is_page_ptr")
(declare-fun lib!layout.is_page_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_segment_ptr")
(declare-fun lib!layout.is_segment_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::SMALL_WSIZE_MAX")
(declare-fun lib!config.SMALL_WSIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::config::COMMIT_SIZE")
(declare-fun lib!config.COMMIT_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::layout::is_page_ptr_opt")
(declare-fun lib!layout.is_page_ptr_opt.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::SegmentPtr::wf")
(declare-fun lib!types.impl&%30.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PagePtr::wf")
(declare-fun lib!types.impl&%33.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::SMALL_PAGE_SIZE")
(declare-fun lib!config.SMALL_PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::SMALL_OBJ_SIZE_MAX")
(declare-fun lib!config.SMALL_OBJ_SIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_OBJ_WSIZE_MAX")
(declare-fun lib!config.MEDIUM_OBJ_WSIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::config::LARGE_OBJ_SIZE_MAX")
(declare-fun lib!config.LARGE_OBJ_SIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::config::SMALL_SIZE_MAX")
(declare-fun lib!config.SMALL_SIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::config::SIZEOF_HEAP")
(declare-fun lib!config.SIZEOF_HEAP.? () Int)
(set-info :comment ";; Function-Decl lib::config::SIZEOF_TLD")
(declare-fun lib!config.SIZEOF_TLD.? () Int)
(set-info :comment ";; Function-Decl lib::config::COMMIT_MASK_BITS")
(declare-fun lib!config.COMMIT_MASK_BITS.? () Int)
(set-info :comment ";; Function-Decl lib::config::COMMIT_MASK_FIELD_COUNT")
(declare-fun lib!config.COMMIT_MASK_FIELD_COUNT.? () Int)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_specs::spec_addr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.) (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (= (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))))))
(assert (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (=> (has_type p! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!)))))
(set-info :comment ";; Function-Specs core::ptr::mut_ptr::impl&%0::addr")
(declare-fun ens%core!ptr.mut_ptr.impl&%0.addr. (Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Int)) (! (= (ens%core!ptr.mut_ptr.impl&%0.addr. T&. T& p! addr!) (and (uInv SZ addr!) (= addr! (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))))) :pattern ((ens%core!ptr.mut_ptr.impl&%0.addr. T&. T& p! addr!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_from_data")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_specs::spec_with_addr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr.) (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Poly)) (! (= (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& (Poly%vstd!raw_ptr.PtrData. (let ((tmp%%$ (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))) (vstd!raw_ptr.PtrData./PtrData (%I addr!) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. tmp%%$))))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. tmp%%$)))))))))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!))))))
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Poly)) (! (=> (and (has_type p! (PTR T&. T&)) (has_type addr! (UINT SZ))) (has_type (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!)))))
(set-info :comment ";; Function-Specs core::ptr::mut_ptr::impl&%0::with_addr")
(declare-fun ens%core!ptr.mut_ptr.impl&%0.with_addr. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Int) (q! Poly)) (! (= (ens%core!ptr.mut_ptr.impl&%0.with_addr. T&. T& p! addr! q!) (and (has_type q! (PTR T&. T&)) (= q! (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! (I addr!))))) :pattern ((ens%core!ptr.mut_ptr.impl&%0.with_addr. T&. T& p! addr! q!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::layout::align_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.align_of.? V&. V&)) :pattern ((vstd!layout.align_of.? V&. V&)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::axiom_ptr_mut_from_data")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.axiom_ptr_mut_from_data.) (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (= (vstd!view.View.view.? $ (PTR T&. T&) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!)) data!)) :pattern ((vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::spec_cast_ptr_to_thin_ptr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.) (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (ptr! Poly)) (! (= (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!) (vstd!raw_ptr.ptr_mut_from_data.? U&. U& (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) ptr!))))) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) ptr!))))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin)))))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!))))))
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (ptr! Poly)) (! (=> (has_type ptr! (PTR T&. T&)) (has_type (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!) (PTR U&. U&))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::cast_ptr_to_thin_ptr")
(declare-fun ens%vstd!raw_ptr.cast_ptr_to_thin_ptr. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (ptr! Poly) (result! Poly)) (! (= (ens%vstd!raw_ptr.cast_ptr_to_thin_ptr. T&. T& U&. U& ptr! result!) (and (has_type result! (PTR U&. U&)) (= result! (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!)))) :pattern ((ens%vstd!raw_ptr.cast_ptr_to_thin_ptr. T&. T& U&. U& ptr! result!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::spec_cast_ptr_to_usize")
(assert (fuel_bool_default fuel%vstd!raw_ptr.spec_cast_ptr_to_usize.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.spec_cast_ptr_to_usize.) (forall ((T&. Dcr) (T& Type) (ptr! Poly)) (! (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) ptr!)))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!))))))
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly)) (! (=> (has_type ptr! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_heap_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_heap_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_heap_ptr.) (forall ((ptr! Poly) (heap_id! Poly)) (! (= (lib!layout.is_heap_ptr.? ptr! heap_id!) (and (and (= (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. heap_id!)) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!)))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!))) (lib!tokens.HeapId./HeapId/provenance (%Poly%lib!tokens.HeapId. heap_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_heap_ptr.? ptr! heap_id!))))))
(set-info :comment ";; Function-Axioms lib::config::INTPTR_SHIFT")
(assert (fuel_bool_default fuel%lib!config.INTPTR_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SHIFT.) (= lib!config.INTPTR_SHIFT.? 3)))
(assert (uInv 64 lib!config.INTPTR_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SLICE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SLICE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SHIFT.) (= lib!config.SLICE_SHIFT.? (uClip 64 (Add 13 lib!config.INTPTR_SHIFT.?)))))
(assert (uInv 64 lib!config.SLICE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SEGMENT_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SHIFT.) (= lib!config.SEGMENT_SHIFT.? (uClip 64 (Add 9 lib!config.SLICE_SHIFT.?)))))
(assert (uInv 64 lib!config.SEGMENT_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SEGMENT_SIZE")
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SIZE.) (= lib!config.SEGMENT_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.SEGMENT_SHIFT.?))))))
(assert (uInv 64 lib!config.SEGMENT_SIZE.?))
(set-info :comment ";; Function-Axioms lib::layout::segment_start")
(assert (fuel_bool_default fuel%lib!layout.segment_start.))
(assert (=> (fuel_bool fuel%lib!layout.segment_start.) (forall ((segment_id! Poly)) (! (= (lib!layout.segment_start.? segment_id!) (Mul (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. segment_id!)) lib!config.SEGMENT_SIZE.?)) :pattern ((lib!layout.segment_start.? segment_id!))))))
(set-info :comment ";; Function-Axioms lib::config::SLICE_SIZE")
(assert (fuel_bool_default fuel%lib!config.SLICE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SIZE.) (= lib!config.SLICE_SIZE.? 65536)))
(assert (uInv 64 lib!config.SLICE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::SLICES_PER_SEGMENT")
(assert (fuel_bool_default fuel%lib!config.SLICES_PER_SEGMENT.))
(assert (=> (fuel_bool fuel%lib!config.SLICES_PER_SEGMENT.) (= lib!config.SLICES_PER_SEGMENT.? (uClip 64 (EucDiv lib!config.SEGMENT_SIZE.? lib!config.SLICE_SIZE.?)))))
(assert (uInv 64 lib!config.SLICES_PER_SEGMENT.?))
(set-info :comment ";; Function-Axioms lib::layout::page_start")
(assert (fuel_bool_default fuel%lib!layout.page_start.))
(assert (=> (fuel_bool fuel%lib!layout.page_start.) (forall ((page_id! Poly)) (! (= (lib!layout.page_start.? page_id!) (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (Mul lib!config.SLICE_SIZE.? (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))) :pattern ((lib!layout.page_start.? page_id!))))))
(set-info :comment ";; Function-Axioms lib::config::INTPTR_SIZE")
(assert (fuel_bool_default fuel%lib!config.INTPTR_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SIZE.) (= lib!config.INTPTR_SIZE.? 8)))
(assert (uInv 64 lib!config.INTPTR_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::MAX_ALIGN_SIZE")
(assert (fuel_bool_default fuel%lib!config.MAX_ALIGN_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.MAX_ALIGN_SIZE.) (= lib!config.MAX_ALIGN_SIZE.? 16)))
(assert (uInv SZ lib!config.MAX_ALIGN_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::MAX_ALIGN_GUARANTEE")
(assert (fuel_bool_default fuel%lib!config.MAX_ALIGN_GUARANTEE.))
(assert (=> (fuel_bool fuel%lib!config.MAX_ALIGN_GUARANTEE.) (= lib!config.MAX_ALIGN_GUARANTEE.? (uClip SZ (Mul 8 lib!config.MAX_ALIGN_SIZE.?)))))
(assert (uInv SZ lib!config.MAX_ALIGN_GUARANTEE.?))
(set-info :comment ";; Function-Axioms lib::layout::start_offset")
(assert (fuel_bool_default fuel%lib!layout.start_offset.))
(assert (=> (fuel_bool fuel%lib!layout.start_offset.) (forall ((block_size! Poly)) (! (= (lib!layout.start_offset.? block_size!) (ite (and (>= (%I block_size!) lib!config.INTPTR_SIZE.?) (<= (%I block_size!) 1024)) (Mul 3 lib!config.MAX_ALIGN_GUARANTEE.?) 0)) :pattern ((lib!layout.start_offset.? block_size!))))))
(set-info :comment ";; Function-Axioms lib::layout::block_start_at")
(assert (fuel_bool_default fuel%lib!layout.block_start_at.))
(assert (=> (fuel_bool fuel%lib!layout.block_start_at.) (forall ((page_id! Poly) (block_size! Poly) (block_idx! Poly)) (! (= (lib!layout.block_start_at.? page_id! block_size! block_idx!) (Add (Add (lib!layout.page_start.? page_id!) (lib!layout.start_offset.? block_size!)) (Mul (%I block_idx!) (%I block_size!)))) :pattern ((lib!layout.block_start_at.? page_id! block_size! block_idx!))))))
(set-info :comment ";; Function-Axioms lib::layout::block_start")
(assert (fuel_bool_default fuel%lib!layout.block_start.))
(assert (=> (fuel_bool fuel%lib!layout.block_start.) (forall ((block_id! Poly)) (! (= (lib!layout.block_start.? block_id!) (lib!layout.block_start_at.? (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. block_id!))) (I (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id!))))) :pattern ((lib!layout.block_start.? block_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_block_ptr1")
(assert (=> (fuel_bool fuel%lib!layout.is_block_ptr1.) (forall ((ptr! Poly) (block_id! Poly)) (! (= (lib!layout.is_block_ptr1.? ptr! block_id!) (and (and (and (and (and (and (let ((tmp%%$ (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) lib!config.SEGMENT_SIZE.?))) (and (and (< (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (%I ptr!)) (<= (%I ptr!) tmp%%$)) (< tmp%%$ (- (uHi SZ) 1)))) (let ((tmp%%$ (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. block_id!)))) (and (<= 0 tmp%%$) (<= tmp%%$ lib!config.SLICES_PER_SEGMENT.?)))) (and (<= (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (Mul (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. block_id!)) lib!config.SLICE_SIZE.?)) (%I ptr!)) (< (%I ptr!) (Add (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (Mul (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. block_id!)) lib!config.SLICE_SIZE.?)) lib!config.SLICE_SIZE.?)))) (= (%I ptr!) (lib!layout.block_start.? block_id!))) (<= 0 (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))))) (>= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. block_id!)) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))) (= (nClip (EucMod (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. block_id!)) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))) 0))) :pattern ((lib!layout.is_block_ptr1.? ptr! block_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_block_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_block_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_block_ptr.) (forall ((ptr! Poly) (block_id! Poly)) (! (= (lib!layout.is_block_ptr.? ptr! block_id!) (and (and (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) ptr!))) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) ptr!))) vstd!raw_ptr.Metadata./Thin)) (lib!layout.is_block_ptr1.? (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) ptr!)) block_id!))) :pattern ((lib!layout.is_block_ptr.? ptr! block_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_tld_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_tld_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_tld_ptr.) (forall ((ptr! Poly) (tld_id! Poly)) (! (= (lib!layout.is_tld_ptr.? ptr! tld_id!) (and (and (= (lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. tld_id!)) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!)))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!))) (lib!tokens.TldId./TldId/provenance (%Poly%lib!tokens.TldId. tld_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_tld_ptr.? ptr! tld_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::BlockId::page_id_for_slice")
(assert (fuel_bool_default fuel%lib!tokens.impl&%1.page_id_for_slice.))
(assert (=> (fuel_bool fuel%lib!tokens.impl&%1.page_id_for_slice.) (forall ((self! Poly)) (! (= (lib!tokens.impl&%1.page_id_for_slice.? self!) (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. self!))))))) (%I (I (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. self!)))))) :pattern ((lib!tokens.impl&%1.page_id_for_slice.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.impl&%1.page_id_for_slice.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.impl&%1.page_id_for_slice.? self!)))))
(set-info :comment ";; Function-Axioms lib::config::SMALL_PAGE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SMALL_PAGE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_PAGE_SHIFT.) (= lib!config.SMALL_PAGE_SHIFT.? lib!config.SLICE_SHIFT.?)))
(assert (uInv 64 lib!config.SMALL_PAGE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_PAGE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_PAGE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_PAGE_SHIFT.) (= lib!config.MEDIUM_PAGE_SHIFT.? (uClip 64 (Add 3 lib!config.SMALL_PAGE_SHIFT.?)))))
(assert (uInv 64 lib!config.MEDIUM_PAGE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_PAGE_SIZE.) (= lib!config.MEDIUM_PAGE_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.MEDIUM_PAGE_SHIFT.?))))))
(assert (uInv 64 lib!config.MEDIUM_PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_OBJ_SIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_OBJ_SIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_OBJ_SIZE_MAX.) (= lib!config.MEDIUM_OBJ_SIZE_MAX.? (uClip 64 (EucDiv lib!config.MEDIUM_PAGE_SIZE.? 4)))))
(assert (uInv 64 lib!config.MEDIUM_OBJ_SIZE_MAX.?))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%16::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 16) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%32::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%32.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%32.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%46::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%46.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%46.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(set-info :comment ";; Function-Axioms lib::config::SIZEOF_SEGMENT_HEADER")
(assert (fuel_bool_default fuel%lib!config.SIZEOF_SEGMENT_HEADER.))
(assert (=> (fuel_bool fuel%lib!config.SIZEOF_SEGMENT_HEADER.) (= lib!config.SIZEOF_SEGMENT_HEADER.? 264)))
(assert (uInv SZ lib!config.SIZEOF_SEGMENT_HEADER.?))
(set-info :comment ";; Function-Axioms lib::config::SIZEOF_PAGE_HEADER")
(assert (fuel_bool_default fuel%lib!config.SIZEOF_PAGE_HEADER.))
(assert (=> (fuel_bool fuel%lib!config.SIZEOF_PAGE_HEADER.) (= lib!config.SIZEOF_PAGE_HEADER.? 80)))
(assert (uInv SZ lib!config.SIZEOF_PAGE_HEADER.?))
(set-info :comment ";; Function-Axioms lib::layout::page_header_start")
(assert (fuel_bool_default fuel%lib!layout.page_header_start.))
(assert (=> (fuel_bool fuel%lib!layout.page_header_start.) (forall ((page_id! Poly)) (! (= (lib!layout.page_header_start.? page_id!) (Add (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) lib!config.SIZEOF_SEGMENT_HEADER.?) (Mul (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) lib!config.SIZEOF_PAGE_HEADER.?))) :pattern ((lib!layout.page_header_start.? page_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_page_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_page_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_page_ptr.) (forall ((ptr! Poly) (page_id! Poly)) (! (= (lib!layout.is_page_ptr.? ptr! page_id!) (and (and (and (and (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. ptr!) (lib!layout.page_header_start.? page_id!)) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (and (<= 0 tmp%%$) (<= tmp%%$ lib!config.SLICES_PER_SEGMENT.?)))) (< (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) lib!config.SEGMENT_SIZE.?) (- (uHi SZ) 1))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) ptr!))) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_page_ptr.? ptr! page_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_segment_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_segment_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_segment_ptr.) (forall ((ptr! Poly) (segment_id! Poly)) (! (= (lib!layout.is_segment_ptr.? ptr! segment_id!) (and (and (and (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.SegmentHeader. ptr!) (lib!layout.segment_start.? segment_id!)) (< (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.SegmentHeader. ptr!) lib!config.SEGMENT_SIZE.?) (- (uHi SZ) 1))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.SegmentHeader.) ptr!))) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. segment_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.SegmentHeader.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_segment_ptr.? ptr! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::config::SMALL_WSIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.SMALL_WSIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_WSIZE_MAX.) (= lib!config.SMALL_WSIZE_MAX.? 128)))
(assert (uInv SZ lib!config.SMALL_WSIZE_MAX.?))
(set-info :comment ";; Function-Axioms lib::config::COMMIT_SIZE")
(assert (fuel_bool_default fuel%lib!config.COMMIT_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.COMMIT_SIZE.) (= lib!config.COMMIT_SIZE.? lib!config.SLICE_SIZE.?)))
(assert (uInv 64 lib!config.COMMIT_SIZE.?))
(set-info :comment ";; Function-Axioms lib::layout::is_page_ptr_opt")
(assert (fuel_bool_default fuel%lib!layout.is_page_ptr_opt.))
(assert (=> (fuel_bool fuel%lib!layout.is_page_ptr_opt.) (forall ((pptr! Poly) (opt_page_id! Poly)) (! (= (lib!layout.is_page_ptr_opt.? pptr! opt_page_id!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. opt_page_id!)) (let ((page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. opt_page_id!))))) (and (lib!layout.is_page_ptr.? pptr! (Poly%lib!tokens.PageId. page_id$)) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) pptr!))) 0)))) (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) pptr!))) 0))) :pattern ((lib!layout.is_page_ptr_opt.? pptr! opt_page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::SegmentPtr::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%30.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%30.wf.) (forall ((self! Poly)) (! (= (lib!types.impl&%30.wf.? self!) (lib!layout.is_segment_ptr.? (Poly%ptr_mut%<lib!types.SegmentHeader.>. (lib!types.SegmentPtr./SegmentPtr/segment_ptr (%Poly%lib!types.SegmentPtr. self!))) (Poly%lib!tokens.SegmentId. (lib!types.SegmentPtr./SegmentPtr/segment_id (%Poly%lib!types.SegmentPtr. self!))))) :pattern ((lib!types.impl&%30.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::PagePtr::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%33.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%33.wf.) (forall ((self! Poly)) (! (= (lib!types.impl&%33.wf.? self!) (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. self!))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. self!)))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. self!)))))) 0)))) :pattern ((lib!types.impl&%33.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::config::SMALL_PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!config.SMALL_PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_PAGE_SIZE.) (= lib!config.SMALL_PAGE_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.SMALL_PAGE_SHIFT.?))))))
(assert (uInv 64 lib!config.SMALL_PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::SMALL_OBJ_SIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.SMALL_OBJ_SIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_OBJ_SIZE_MAX.) (= lib!config.SMALL_OBJ_SIZE_MAX.? (uClip 64 (EucDiv lib!config.SMALL_PAGE_SIZE.? 4)))))
(assert (uInv 64 lib!config.SMALL_OBJ_SIZE_MAX.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_OBJ_WSIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_OBJ_WSIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_OBJ_WSIZE_MAX.) (= lib!config.MEDIUM_OBJ_WSIZE_MAX.? (uClip 64 (EucDiv lib!config.MEDIUM_OBJ_SIZE_MAX.? (uClip 64 (EucDiv (uClip 64 SZ) 8)))))))
(assert (uInv 64 lib!config.MEDIUM_OBJ_WSIZE_MAX.?))
(set-info :comment ";; Function-Axioms lib::config::LARGE_OBJ_SIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.LARGE_OBJ_SIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.LARGE_OBJ_SIZE_MAX.) (= lib!config.LARGE_OBJ_SIZE_MAX.? (uClip 64 (EucDiv lib!config.SEGMENT_SIZE.? 2)))))
(assert (uInv 64 lib!config.LARGE_OBJ_SIZE_MAX.?))
(set-info :comment ";; Function-Axioms lib::config::SMALL_SIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.SMALL_SIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_SIZE_MAX.) (= lib!config.SMALL_SIZE_MAX.? (uClip SZ (Mul lib!config.SMALL_WSIZE_MAX.? (uClip SZ lib!config.INTPTR_SIZE.?))))))
(assert (uInv SZ lib!config.SMALL_SIZE_MAX.?))
(set-info :comment ";; Function-Axioms lib::config::SIZEOF_HEAP")
(assert (fuel_bool_default fuel%lib!config.SIZEOF_HEAP.))
(assert (=> (fuel_bool fuel%lib!config.SIZEOF_HEAP.) (= lib!config.SIZEOF_HEAP.? 2904)))
(assert (uInv SZ lib!config.SIZEOF_HEAP.?))
(set-info :comment ";; Function-Axioms lib::config::SIZEOF_TLD")
(assert (fuel_bool_default fuel%lib!config.SIZEOF_TLD.))
(assert (=> (fuel_bool fuel%lib!config.SIZEOF_TLD.) (= lib!config.SIZEOF_TLD.? 552)))
(assert (uInv SZ lib!config.SIZEOF_TLD.?))
(set-info :comment ";; Function-Axioms lib::config::COMMIT_MASK_BITS")
(assert (fuel_bool_default fuel%lib!config.COMMIT_MASK_BITS.))
(assert (=> (fuel_bool fuel%lib!config.COMMIT_MASK_BITS.) (= lib!config.COMMIT_MASK_BITS.? lib!config.SLICES_PER_SEGMENT.?)))
(assert (uInv 64 lib!config.COMMIT_MASK_BITS.?))
(set-info :comment ";; Function-Axioms lib::config::COMMIT_MASK_FIELD_COUNT")
(assert (fuel_bool_default fuel%lib!config.COMMIT_MASK_FIELD_COUNT.))
(assert (=> (fuel_bool fuel%lib!config.COMMIT_MASK_FIELD_COUNT.) (= lib!config.COMMIT_MASK_FIELD_COUNT.? (uClip 64 (EucDiv lib!config.COMMIT_MASK_BITS.? (uClip 64 SZ))))))
(assert (uInv 64 lib!config.COMMIT_MASK_FIELD_COUNT.?))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Function-Specs lib::config::const_facts")
(declare-fun ens%lib!config.const_facts. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!config.const_facts. no%param) (and (= lib!config.SLICE_SIZE.? 65536) (= lib!config.SEGMENT_SIZE.? 33554432) (= lib!config.SLICES_PER_SEGMENT.? 512) (= lib!config.SMALL_PAGE_SIZE.? 65536) (= lib!config.MEDIUM_PAGE_SIZE.? 524288) (= lib!config.SMALL_OBJ_SIZE_MAX.? 16384) (= lib!config.MEDIUM_OBJ_SIZE_MAX.? 131072) (= lib!config.MEDIUM_OBJ_WSIZE_MAX.? 16384) (= lib!config.SMALL_SIZE_MAX.? 1024) (= lib!config.LARGE_OBJ_SIZE_MAX.? 16777216) (= lib!config.COMMIT_MASK_FIELD_COUNT.? 8) (= (vstd!layout.size_of.? $ TYPE%lib!types.SegmentHeader.) lib!config.SIZEOF_SEGMENT_HEADER.?) (= (vstd!layout.size_of.? $ TYPE%lib!types.Page.) lib!config.SIZEOF_PAGE_HEADER.?) (= (vstd!layout.size_of.? $ TYPE%lib!types.Heap.) lib!config.SIZEOF_HEAP.?) (= (vstd!layout.size_of.? $ TYPE%lib!types.Tld.) lib!config.SIZEOF_TLD.?) (= (vstd!layout.align_of.? $ TYPE%lib!types.SegmentHeader.) 8) (= (vstd!layout.align_of.? $ TYPE%lib!types.Page.) 8) (= (vstd!layout.align_of.? $ TYPE%lib!types.Heap.) 8) (= (vstd!layout.align_of.? $ TYPE%lib!types.Tld.) 8))) :pattern ((ens%lib!config.const_facts. no%param)))))
(set-info :comment ";; Function-Specs lib::layout::segment_start_ge0")
(declare-fun ens%lib!layout.segment_start_ge0. (lib!tokens.SegmentId.) Bool)
(assert (forall ((segment_id! lib!tokens.SegmentId.)) (! (= (ens%lib!layout.segment_start_ge0. segment_id!) (>= (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. segment_id!)) 0)) :pattern ((ens%lib!layout.segment_start_ge0. segment_id!)))))
(set-info :comment ";; Function-Def lib::layout::segment_start_ge0")
(set-info :comment ";; layout.rs:640:1: 640:54 (#0)")
(set-info :comment ";; Function-Specs lib::layout::is_page_ptr_nonzero")
(declare-fun req%lib!layout.is_page_ptr_nonzero. (ptr_mut%<lib!types.Page.>. lib!tokens.PageId.) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((ptr! ptr_mut%<lib!types.Page.>.) (page_id! lib!tokens.PageId.)) (! (= (req%lib!layout.is_page_ptr_nonzero. ptr! page_id!) (=> %%global_location_label%%3 (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. ptr!) (Poly%lib!tokens.PageId. page_id!)))) :pattern ((req%lib!layout.is_page_ptr_nonzero. ptr! page_id!)))))
(declare-fun ens%lib!layout.is_page_ptr_nonzero. (ptr_mut%<lib!types.Page.>. lib!tokens.PageId.) Bool)
(assert (forall ((ptr! ptr_mut%<lib!types.Page.>.) (page_id! lib!tokens.PageId.)) (! (= (ens%lib!layout.is_page_ptr_nonzero. ptr! page_id!) (not (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. ptr!)) 0))) :pattern ((ens%lib!layout.is_page_ptr_nonzero. ptr! page_id!)))))
(set-info :comment ";; Function-Def lib::layout::is_page_ptr_nonzero")
(set-info :comment ";; layout.rs:611:1: 611:66 (#0)")
(declare-const ptr! ptr_mut%<lib!types.Page.>.)
(declare-const page_id! lib!tokens.PageId.)
(declare-const tmp%1 lib!tokens.SegmentId.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!tokens.PageId. page_id!) TYPE%lib!tokens.PageId.))
(assert (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. ptr!) (Poly%lib!tokens.PageId. page_id!)))
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= tmp%1 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))) (=> (ens%lib!layout.segment_start_ge0. tmp%1) (=> %%location_label%%0 (not (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. ptr!)) 0)))))))
(check-sat)
(exit)
