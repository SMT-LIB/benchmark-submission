(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module spec_t::mem'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%lib!spec_t.mem.word_index_spec. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.inv. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.init. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.spec_read. FuelId)
(declare-const fuel%lib!definitions_t.MAX_PHYADDR_SPEC. FuelId)
(declare-const fuel%lib!definitions_t.WORD_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.PAGE_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.index_from_offset. FuelId)
(declare-const fuel%lib!definitions_t.aligned. FuelId)
(declare-const fuel%lib!definitions_t.new_seq. FuelId)
(declare-const fuel%lib!definitions_t.overlap. FuelId)
(declare-const fuel%lib!definitions_t.impl&%4.view. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%lib!spec_t.mem.word_index_spec. fuel%lib!spec_t.mem.impl&%1.inv. fuel%lib!spec_t.mem.impl&%1.init. fuel%lib!spec_t.mem.impl&%1.spec_read. fuel%lib!definitions_t.MAX_PHYADDR_SPEC. fuel%lib!definitions_t.WORD_SIZE. fuel%lib!definitions_t.PAGE_SIZE. fuel%lib!definitions_t.index_from_offset. fuel%lib!definitions_t.aligned. fuel%lib!definitions_t.new_seq. fuel%lib!definitions_t.overlap. fuel%lib!definitions_t.impl&%4.view. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort lib!spec_t.mem.PageTableMemory. 0)
(declare-sort vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!definitions_t.MemRegion.>. 0)
(declare-datatypes ((lib!spec_t.mem.TLB. 0) (lib!definitions_t.MemRegion. 0) (lib!definitions_t.MemRegionExec. 0) (lib!definitions_t.Flags. 0) (lib!definitions_t.PageTableEntry. 0) (tuple%0. 0)) (((lib!spec_t.mem.TLB./TLB )) ((lib!definitions_t.MemRegion./MemRegion (lib!definitions_t.MemRegion./MemRegion/?base Int) (lib!definitions_t.MemRegion./MemRegion/?size Int))) ((lib!definitions_t.MemRegionExec./MemRegionExec (lib!definitions_t.MemRegionExec./MemRegionExec/?base Int) (lib!definitions_t.MemRegionExec./MemRegionExec/?size Int))) ((lib!definitions_t.Flags./Flags (lib!definitions_t.Flags./Flags/?is_writable Bool) (lib!definitions_t.Flags./Flags/?is_supervisor Bool) (lib!definitions_t.Flags./Flags/?disable_execute Bool))) ((lib!definitions_t.PageTableEntry./PageTableEntry (lib!definitions_t.PageTableEntry./PageTableEntry/?frame lib!definitions_t.MemRegion.) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags lib!definitions_t.Flags.))) ((tuple%0./tuple%0 ))))
(declare-fun lib!definitions_t.MemRegion./MemRegion/base (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/size (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/base (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/size (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.Flags./Flags/is_writable (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/is_supervisor (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/disable_execute (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/frame (lib!definitions_t.PageTableEntry.) lib!definitions_t.MemRegion.)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/flags (lib!definitions_t.PageTableEntry.) lib!definitions_t.Flags.)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!spec_t.mem.TLB. Type)
(declare-const TYPE%lib!spec_t.mem.PageTableMemory. Type)
(declare-const TYPE%lib!definitions_t.MemRegion. Type)
(declare-const TYPE%lib!definitions_t.MemRegionExec. Type)
(declare-const TYPE%lib!definitions_t.Flags. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntry. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.mem.PageTableMemory.) Poly)
(declare-fun %Poly%lib!spec_t.mem.PageTableMemory. (Poly) lib!spec_t.mem.PageTableMemory.)
(declare-fun Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.Set<lib!definitions_t.MemRegion.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (Poly) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-fun Poly%lib!spec_t.mem.TLB. (lib!spec_t.mem.TLB.) Poly)
(declare-fun %Poly%lib!spec_t.mem.TLB. (Poly) lib!spec_t.mem.TLB.)
(declare-fun Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegion. (Poly) lib!definitions_t.MemRegion.)
(declare-fun Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegionExec. (Poly) lib!definitions_t.MemRegionExec.)
(declare-fun Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags.) Poly)
(declare-fun %Poly%lib!definitions_t.Flags. (Poly) lib!definitions_t.Flags.)
(declare-fun Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntry. (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (= x (%Poly%lib!spec_t.mem.PageTableMemory. (Poly%lib!spec_t.mem.PageTableMemory. x))) :pattern ((Poly%lib!spec_t.mem.PageTableMemory. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.mem.PageTableMemory.) (= x (Poly%lib!spec_t.mem.PageTableMemory. (%Poly%lib!spec_t.mem.PageTableMemory. x)))) :pattern ((has_type x TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.) :pattern ((has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (= x (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (= x (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x))) :pattern ((Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) (= x (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.))))))
(assert (forall ((x vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (has_type (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.))))))
(assert (forall ((x lib!spec_t.mem.TLB.)) (! (= x (%Poly%lib!spec_t.mem.TLB. (Poly%lib!spec_t.mem.TLB. x))) :pattern ((Poly%lib!spec_t.mem.TLB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.mem.TLB.) (= x (Poly%lib!spec_t.mem.TLB. (%Poly%lib!spec_t.mem.TLB. x)))) :pattern ((has_type x TYPE%lib!spec_t.mem.TLB.)))))
(assert (forall ((x lib!spec_t.mem.TLB.)) (! (has_type (Poly%lib!spec_t.mem.TLB. x) TYPE%lib!spec_t.mem.TLB.) :pattern ((has_type (Poly%lib!spec_t.mem.TLB. x) TYPE%lib!spec_t.mem.TLB.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= x (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. x))) :pattern ((Poly%lib!definitions_t.MemRegion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (= x (Poly%lib!definitions_t.MemRegion. (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (<= 0 _base!) (<= 0 _size!)) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/base x) (lib!definitions_t.MemRegion./MemRegion/?base x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/size x) (lib!definitions_t.MemRegion./MemRegion/?size x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= x (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. x))) :pattern ((Poly%lib!definitions_t.MemRegionExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (= x (Poly%lib!definitions_t.MemRegionExec. (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (uInv SZ _base!) (uInv SZ _size!)) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/base x) (lib!definitions_t.MemRegionExec./MemRegionExec/?base x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/size x) (lib!definitions_t.MemRegionExec./MemRegionExec/?size x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= x (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. x))) :pattern ((Poly%lib!definitions_t.Flags. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Flags.) (= x (Poly%lib!definitions_t.Flags. (%Poly%lib!definitions_t.Flags. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_writable x) (lib!definitions_t.Flags./Flags/?is_writable x)) :pattern ((lib!definitions_t.Flags./Flags/is_writable x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_supervisor x) (lib!definitions_t.Flags./Flags/?is_supervisor x)) :pattern ((lib!definitions_t.Flags./Flags/is_supervisor x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/disable_execute x) (lib!definitions_t.Flags./Flags/?disable_execute x)) :pattern ((lib!definitions_t.Flags./Flags/disable_execute x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.) :pattern ((has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= x (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. x))) :pattern ((Poly%lib!definitions_t.PageTableEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (= x (Poly%lib!definitions_t.PageTableEntry. (%Poly%lib!definitions_t.PageTableEntry. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegion.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _frame!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/frame x) (lib!definitions_t.PageTableEntry./PageTableEntry/?frame x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x)) (has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/flags x) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/flags x)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize_spec")
(declare-fun lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::regions")
(declare-fun lib!spec_t.mem.impl&%1.regions.? (Poly) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::overlap")
(declare-fun lib!definitions_t.overlap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::aligned")
(declare-fun lib!definitions_t.aligned.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::cr3_spec")
(declare-fun lib!spec_t.mem.impl&%1.cr3_spec.? (Poly) lib!definitions_t.MemRegionExec.)
(set-info :comment ";; Function-Decl lib::definitions_t::PAGE_SIZE")
(declare-fun lib!definitions_t.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::inv")
(declare-fun lib!spec_t.mem.impl&%1.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::MemRegionExec::view")
(declare-fun lib!definitions_t.impl&%4.view.? (Poly) lib!definitions_t.MemRegion.)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::region_view")
(declare-fun lib!spec_t.mem.impl&%1.region_view.? (Poly Poly) vstd!seq.Seq<u64.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_WIDTH")
(declare-fun lib!definitions_t.MAX_PHYADDR_WIDTH.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_SPEC")
(declare-fun lib!definitions_t.MAX_PHYADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::spec_read")
(declare-fun lib!spec_t.mem.impl&%1.spec_read.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::alloc_available_pages")
(declare-fun lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::mem::TLB::view")
(declare-fun lib!spec_t.mem.impl&%0.view.? (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::new_seq")
(declare-fun lib!definitions_t.new_seq.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_t.rec%new_seq.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::definitions_t::WORD_SIZE")
(declare-fun lib!definitions_t.WORD_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::index_from_offset")
(declare-fun lib!definitions_t.index_from_offset.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::word_index_spec")
(declare-fun lib!spec_t.mem.word_index_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::init")
(declare-fun lib!spec_t.mem.impl&%1.init.? (Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize_spec")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (uInv SZ (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!))) :pattern ((lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::overlap")
(assert (fuel_bool_default fuel%lib!definitions_t.overlap.))
(assert (=> (fuel_bool fuel%lib!definitions_t.overlap.) (forall ((region1! Poly) (region2! Poly)) (! (= (lib!definitions_t.overlap.? region1! region2!) (ite (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region1!))))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region2!))))))) :pattern ((lib!definitions_t.overlap.? region1! region2!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::aligned")
(assert (fuel_bool_default fuel%lib!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%lib!definitions_t.aligned.) (forall ((addr! Poly) (size! Poly)) (! (= (lib!definitions_t.aligned.? addr! size!) (= (nClip (EucMod (%I addr!) (%I size!))) 0)) :pattern ((lib!definitions_t.aligned.? addr! size!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::cr3_spec")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((lib!spec_t.mem.impl&%1.cr3_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PAGE_SIZE.) (= lib!definitions_t.PAGE_SIZE.? 4096)))
(assert (uInv SZ lib!definitions_t.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::inv")
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.inv.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.inv.) (forall ((self! Poly)) (! (= (lib!spec_t.mem.impl&%1.inv.? self!) (and (and (and (<= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!) 9214364837600034816) (forall ((s1$ Poly) (s2$ Poly)) (! (=> (and (has_type s1$ TYPE%lib!definitions_t.MemRegion.) (has_type s2$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? self!)) s1$) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? self!)) s2$)) (not (= s1$ s2$))) (not (lib!definitions_t.overlap.? s1$ s2$)))) :pattern ((lib!definitions_t.overlap.? s1$ s2$))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!))))) (I lib!definitions_t.PAGE_SIZE.?))) (= (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)))) lib!definitions_t.PAGE_SIZE.?))) :pattern ((lib!spec_t.mem.impl&%1.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MemRegionExec::view")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%4.view.? self!) (lib!definitions_t.MemRegion./MemRegion (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. self!)))) (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. self!)))))) :pattern ((lib!definitions_t.impl&%4.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.MemRegionExec.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? self!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_WIDTH")
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_WIDTH.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_SPEC")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_PHYADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_PHYADDR_SPEC.) (= lib!definitions_t.MAX_PHYADDR_SPEC.? (uClip 64 (Sub (uClip 64 (bitshl (I 1) (I lib!definitions_t.MAX_PHYADDR_WIDTH.?))) 1)))))
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::spec_read")
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.spec_read.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.spec_read.) (forall ((self! Poly) (idx! Poly) (region! Poly)) (! (= (lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!) (%I (vstd!seq.Seq.index.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? self! region!)) idx!))) :pattern ((lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!))))))
(assert (forall ((self! Poly) (idx! Poly) (region! Poly)) (! (=> (and (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type idx! NAT) (has_type region! TYPE%lib!definitions_t.MemRegion.)) (uInv 64 (lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!))) :pattern ((lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::alloc_available_pages")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (<= 0 (lib!spec_t.mem.impl&%1.alloc_available_pages.? self!))) :pattern ((lib!spec_t.mem.impl&%1.alloc_available_pages.? self!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!))))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::TLB::invalidate_entry")
(declare-fun ens%lib!spec_t.mem.impl&%0.invalidate_entry. (lib!spec_t.mem.TLB. lib!spec_t.mem.TLB. Int) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.TLB.) (self! lib!spec_t.mem.TLB.) (vbase! Int)) (! (= (ens%lib!spec_t.mem.impl&%0.invalidate_entry. pre%self! self! vbase!) (and (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.mem.impl&%0.view.? (Poly%lib!spec_t.mem.TLB. self!))) base$ pte$) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.mem.impl&%0.view.? (Poly%lib!spec_t.mem.TLB. pre%self!))) base$ pte$))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.mem.impl&%0.view.? (Poly%lib!spec_t.mem.TLB. self!))) base$ pte$)) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.mem.impl&%0.view.? (Poly%lib!spec_t.mem.TLB. pre%self!))) base$ pte$)))) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.mem.impl&%0.view.? (Poly%lib!spec_t.mem.TLB. self!)))) (I vbase!))))) :pattern ((ens%lib!spec_t.mem.impl&%0.invalidate_entry. pre%self! self! vbase!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::cr3")
(declare-fun ens%lib!spec_t.mem.impl&%1.cr3. (lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (res! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.cr3. self! res!) (and (has_type (Poly%lib!definitions_t.MemRegionExec. res!) TYPE%lib!definitions_t.MemRegionExec.) (= res! (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.cr3. self! res!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::new_seq")
(assert (fuel_bool_default fuel%lib!definitions_t.new_seq.))
(declare-const fuel_nat%lib!definitions_t.new_seq. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%) (lib!definitions_t.rec%new_seq.? T&. T& i! e! zero)) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%)) (ite (= (%I i!) 0) (vstd!seq.Seq.empty.? T&. T&) (vstd!seq.Seq.push.? T&. T& (lib!definitions_t.rec%new_seq.? T&. T& (I (nClip (Sub (%I i!) 1))) e! fuel%) e!)))) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!definitions_t.new_seq.) (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.new_seq.? T&. T& i! e!) (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel_nat%lib!definitions_t.new_seq.)))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (has_type (lib!definitions_t.new_seq.? T&. T& i! e!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::alloc_page")
(declare-fun req%lib!spec_t.mem.impl&%1.alloc_page. (lib!spec_t.mem.PageTableMemory.) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.)) (! (= (req%lib!spec_t.mem.impl&%1.alloc_page. pre%self!) (and (=> %%global_location_label%%5 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%6 (< 0 (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!)))))) :pattern ((req%lib!spec_t.mem.impl&%1.alloc_page. pre%self!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.alloc_page. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.alloc_page. pre%self! self! r!) (and (has_type (Poly%lib!definitions_t.MemRegionExec. r!) TYPE%lib!definitions_t.MemRegionExec.) (= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (Sub (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!)) 1)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) lib!definitions_t.PAGE_SIZE.?) (<= (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) lib!definitions_t.PAGE_SIZE.?) lib!definitions_t.MAX_PHYADDR_SPEC.?) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (I lib!definitions_t.PAGE_SIZE.?)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (%Poly%vstd!seq.Seq<u64.>. (lib!definitions_t.new_seq.? $ (UINT 64) (I 512) (I 0)))) (forall ((r2$ Poly)) (! (=> (has_type r2$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r2$) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r2$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$)))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. self!)))) :pattern ((ens%lib!spec_t.mem.impl&%1.alloc_page. pre%self! self! r!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::dealloc_page")
(declare-fun req%lib!spec_t.mem.impl&%1.dealloc_page. (lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (req%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! r!) (and (=> %%global_location_label%%7 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))))) :pattern ((req%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! r!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.dealloc_page. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! self! r!) (and (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (forall ((r2$ Poly)) (! (=> (has_type r2$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r2$) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r2$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$)))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. self!)))) :pattern ((ens%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! self! r!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::WORD_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.WORD_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.WORD_SIZE.) (= lib!definitions_t.WORD_SIZE.? 8)))
(assert (uInv SZ lib!definitions_t.WORD_SIZE.?))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::write")
(declare-fun req%lib!spec_t.mem.impl&%1.write. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (value! Int)) (! (= (req%lib!spec_t.mem.impl&%1.write. pre%self! pbase! idx! region! value!) (and (=> %%global_location_label%%9 (= pbase! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. region!))))) (=> %%global_location_label%%10 (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%11 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. region!))) (=> %%global_location_label%%13 (< idx! 512)))) :pattern ((req%lib!spec_t.mem.impl&%1.write. pre%self! pbase! idx! region! value!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.write. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (value! Int)) (! (= (ens%lib!spec_t.mem.impl&%1.write. pre%self! self! pbase! idx! region! value!) (and (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (Poly%lib!definitions_t.MemRegion. region!)) (%Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq.update.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) (Poly%lib!definitions_t.MemRegion. region!))) (I idx!) (I value!)))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r$) region!)) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r$)) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r$)))) (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.write. pre%self! self! pbase! idx! region! value!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::read")
(declare-fun req%lib!spec_t.mem.impl&%1.read. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion.) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.)) (! (= (req%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region!) (and (=> %%global_location_label%%14 (= pbase! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. region!))))) (=> %%global_location_label%%15 (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%16 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!))) (Poly%lib!definitions_t.MemRegion. region!))) (=> %%global_location_label%%17 (< idx! 512)))) :pattern ((req%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.read. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (res! Int)) (! (= (ens%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region! res!) (and (uInv 64 res!) (= res! (lib!spec_t.mem.impl&%1.spec_read.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (I idx!) (Poly%lib!definitions_t.MemRegion. region!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region! res!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize")
(declare-fun ens%lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize. (lib!spec_t.mem.PageTableMemory. Int) Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (res! Int)) (! (= (ens%lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize. self! res!) (and (uInv SZ res!) (= res! (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize. self! res!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::index_from_offset")
(declare-fun req%lib!definitions_t.index_from_offset. (Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((offset! Poly) (entry_size! Poly)) (! (= (req%lib!definitions_t.index_from_offset. offset! entry_size!) (=> %%global_location_label%%18 (> (%I entry_size!) 0))) :pattern ((req%lib!definitions_t.index_from_offset. offset! entry_size!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::index_from_offset")
(assert (fuel_bool_default fuel%lib!definitions_t.index_from_offset.))
(assert (=> (fuel_bool fuel%lib!definitions_t.index_from_offset.) (forall ((offset! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.index_from_offset.? offset! entry_size!) (nClip (EucDiv (%I offset!) (%I entry_size!)))) :pattern ((lib!definitions_t.index_from_offset.? offset! entry_size!))))))
(assert (forall ((offset! Poly) (entry_size! Poly)) (! (=> (and (has_type offset! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.index_from_offset.? offset! entry_size!))) :pattern ((lib!definitions_t.index_from_offset.? offset! entry_size!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::word_index_spec")
(declare-fun req%lib!spec_t.mem.word_index_spec. (Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((addr! Poly)) (! (= (req%lib!spec_t.mem.word_index_spec. addr!) (=> %%global_location_label%%19 (lib!definitions_t.aligned.? addr! (I 8)))) :pattern ((req%lib!spec_t.mem.word_index_spec. addr!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::word_index_spec")
(assert (fuel_bool_default fuel%lib!spec_t.mem.word_index_spec.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.word_index_spec.) (forall ((addr! Poly)) (! (= (lib!spec_t.mem.word_index_spec.? addr!) (nClip (EucDiv (%I addr!) lib!definitions_t.WORD_SIZE.?))) :pattern ((lib!spec_t.mem.word_index_spec.? addr!))))))
(assert (forall ((addr! Poly)) (! (=> (has_type addr! NAT) (<= 0 (lib!spec_t.mem.word_index_spec.? addr!))) :pattern ((lib!spec_t.mem.word_index_spec.? addr!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::init")
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.init.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.init.) (forall ((self! Poly)) (! (= (lib!spec_t.mem.impl&%1.init.? self!) (lib!spec_t.mem.impl&%1.inv.? self!)) :pattern ((lib!spec_t.mem.impl&%1.init.? self!))))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::word_index")
(declare-fun req%lib!spec_t.mem.word_index. (Int) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((addr! Int)) (! (= (req%lib!spec_t.mem.word_index. addr!) (=> %%global_location_label%%20 (lib!definitions_t.aligned.? (I addr!) (I 8)))) :pattern ((req%lib!spec_t.mem.word_index. addr!)))))
(declare-fun ens%lib!spec_t.mem.word_index. (Int Int) Bool)
(assert (forall ((addr! Int) (res! Int)) (! (= (ens%lib!spec_t.mem.word_index. addr! res!) (and (uInv SZ res!) (= res! (lib!spec_t.mem.word_index_spec.? (I addr!))) (= res! (lib!definitions_t.index_from_offset.? (I addr!) (I lib!definitions_t.WORD_SIZE.?))) (= (lib!spec_t.mem.word_index_spec.? (I addr!)) (lib!definitions_t.index_from_offset.? (I addr!) (I lib!definitions_t.WORD_SIZE.?))))) :pattern ((ens%lib!spec_t.mem.word_index. addr! res!)))))
(set-info :comment ";; Function-Def lib::spec_t::mem::word_index")
(set-info :comment ";; page-table/spec_t/mem.rs:17:1: 17:46 (#0)")
(set-info :comment ";; Function-Specs lib::definitions_u::lemma_maxphyaddr_facts")
(declare-fun ens%lib!definitions_u.lemma_maxphyaddr_facts. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!definitions_u.lemma_maxphyaddr_facts. no%param) (let ((tmp%%$ lib!definitions_t.MAX_PHYADDR_SPEC.?)) (and (<= 4294967295 tmp%%$) (<= tmp%%$ 4503599627370495)))) :pattern ((ens%lib!definitions_u.lemma_maxphyaddr_facts. no%param)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::check_overflow")
(declare-fun req%lib!spec_t.mem.impl&%1.check_overflow. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion.) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.)) (! (= (req%lib!spec_t.mem.impl&%1.check_overflow. self! pbase! idx! region!) (and (=> %%global_location_label%%21 (<= pbase! lib!definitions_t.MAX_PHYADDR_SPEC.?)) (=> %%global_location_label%%22 (<= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) 9214364837600034816)) (=> %%global_location_label%%23 (= pbase! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. region!))))) (=> %%global_location_label%%24 (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%25 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!))) (Poly%lib!definitions_t.MemRegion. region!))) (=> %%global_location_label%%26 (< idx! 512)))) :pattern ((req%lib!spec_t.mem.impl&%1.check_overflow. self! pbase! idx! region!)))))
(set-info :comment ";; Function-Def lib::spec_t::mem::PageTableMemory::check_overflow")
(set-info :comment ";; page-table/spec_t/mem.rs:182:5: 182:81 (#0)")
(declare-const self! lib!spec_t.mem.PageTableMemory.)
(declare-const pbase! Int)
(declare-const idx! Int)
(declare-const region! lib!definitions_t.MemRegion.)
(declare-const tmp%1 Int)
(declare-const tmp%2 Int)
(declare-const word_offset@ Int)
(declare-const phys_mem_ref@ Int)
(declare-const byte_offset@ Int)
(declare-const raw_ptr_offset@ Int)
(assert fuel_defaults)
(assert (uInv SZ pbase!))
(assert (uInv SZ idx!))
(assert (has_type (Poly%lib!definitions_t.MemRegion. region!) TYPE%lib!definitions_t.MemRegion.))
(assert (<= pbase! lib!definitions_t.MAX_PHYADDR_SPEC.?))
(assert (<= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) 9214364837600034816))
(assert (= pbase! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. region!)))))
(assert (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?)))
(assert (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!))) (Poly%lib!definitions_t.MemRegion. region!)))
(assert (< idx! 512))
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%11 Bool)
(assert (not (=> (ens%lib!definitions_u.lemma_maxphyaddr_facts. 0) (and (=> %%location_label%%0 (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?))) (and (=> %%location_label%%1 (<= pbase! lib!definitions_t.MAX_PHYADDR_SPEC.?)) (and (=> %%location_label%%2 (<= lib!definitions_t.MAX_PHYADDR_SPEC.? 4503599627370495)) (=> (< (lib!spec_t.mem.word_index_spec.? (I pbase!)) 562949953421312) (and (=> %%location_label%%3 (req%lib!spec_t.mem.word_index. pbase!)) (=> (ens%lib!spec_t.mem.word_index. pbase! tmp%1) (and (=> %%location_label%%4 (uInv SZ (Add tmp%1 idx!))) (=> (= word_offset@ (iClip SZ (uClip SZ (Add tmp%1 idx!)))) (and (=> %%location_label%%5 (< idx! 512)) (and (=> %%location_label%%6 (= word_offset@ (Add (lib!spec_t.mem.word_index_spec.? (I pbase!)) idx!))) (and (=> %%location_label%%7 (< (lib!spec_t.mem.word_index_spec.? (I pbase!)) 562949953421312)) (=> (< word_offset@ 562949953421823) (=> (ens%lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize. self! tmp%2) (=> (= phys_mem_ref@ (iClip SZ tmp%2)) (and (=> %%location_label%%8 (< word_offset@ 562949953421823)) (=> (< (Mul word_offset@ lib!definitions_t.WORD_SIZE.?) 4503599627374584) (and (=> %%location_label%%9 (iInv SZ (Mul word_offset@ (iClip SZ lib!definitions_t.WORD_SIZE.?)))) (=> (= byte_offset@ (iClip SZ (Mul word_offset@ (iClip SZ lib!definitions_t.WORD_SIZE.?)))) (and (=> %%location_label%%10 (iInv SZ (Mul word_offset@ (iClip SZ lib!definitions_t.WORD_SIZE.?)))) (=> %%location_label%%11 (iInv SZ (Add phys_mem_ref@ (iClip SZ (Mul word_offset@ (iClip SZ lib!definitions_t.WORD_SIZE.?))))))))))))))))))))))))))))
(check-sat)
(exit)
