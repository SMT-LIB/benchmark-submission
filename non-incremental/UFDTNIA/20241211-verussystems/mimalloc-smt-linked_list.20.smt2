(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module linked_list'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.is_ok. FuelId)
(declare-const fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. FuelId)
(declare-const fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%0.inv. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%22.inv. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%23.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%23.constant. FuelId)
(declare-const fuel%vstd!invariant.AtomicInvariant.inv. FuelId)
(declare-const fuel%vstd!layout.is_power_2. FuelId)
(declare-const fuel%vstd!layout.valid_layout. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.impl&%0.len. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map.check_argument_is_map. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%2.arrow_0. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.ptr. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.opt_value. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.is_uninit. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.value. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_uninit. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.value. FuelId)
(declare-const fuel%vstd!raw_ptr.axiom_ptr_mut_from_data. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!raw_ptr.ptr_null_mut. FuelId)
(declare-const fuel%vstd!raw_ptr.spec_cast_ptr_to_thin_ptr. FuelId)
(declare-const fuel%vstd!raw_ptr.spec_cast_ptr_to_usize. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%10.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%11.is_range. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%11.contains_range. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set_lib.set_int_range. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%32.view. FuelId)
(declare-const fuel%vstd!view.impl&%36.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%vstd!view.impl&%46.view. FuelId)
(declare-const fuel%lib!tokens.impl&%2.to_int. FuelId)
(declare-const fuel%lib!types.impl&%1.atomic_inv. FuelId)
(declare-const fuel%lib!types.impl&%10.atomic_inv. FuelId)
(declare-const fuel%lib!layout.is_heap_ptr. FuelId)
(declare-const fuel%lib!layout.page_start. FuelId)
(declare-const fuel%lib!layout.block_start_at. FuelId)
(declare-const fuel%lib!layout.is_block_ptr. FuelId)
(declare-const fuel%lib!config.INTPTR_SIZE. FuelId)
(declare-const fuel%lib!config.SLICE_SIZE. FuelId)
(declare-const fuel%lib!linked_list.VERUS_layout_of_Node. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.next_ptr. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.valid_node. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.wf. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.len. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.page_id. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.block_size. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.fixed_page. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.instance. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.heap_id. FuelId)
(declare-const fuel%lib!linked_list.impl&%2.ptr. FuelId)
(declare-const fuel%lib!linked_list.has_idx. FuelId)
(declare-const fuel%lib!linked_list.set_nat_range. FuelId)
(declare-const fuel%lib!linked_list.llgstr_wf. FuelId)
(declare-const fuel%lib!linked_list.impl&%3.atomic_inv. FuelId)
(declare-const fuel%lib!linked_list.impl&%4.wf. FuelId)
(declare-const fuel%lib!linked_list.impl&%6.atomic_inv. FuelId)
(declare-const fuel%lib!linked_list.impl&%7.wf. FuelId)
(declare-const fuel%lib!linked_list.impl&%8.is_empty. FuelId)
(declare-const fuel%lib!linked_list.impl&%8.block_size. FuelId)
(declare-const fuel%lib!linked_list.impl&%8.page_id. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.is_ok. fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!atomic_ghost.impl&%0.inv. fuel%vstd!atomic_ghost.impl&%22.inv. fuel%vstd!atomic_ghost.impl&%23.well_formed. fuel%vstd!atomic_ghost.impl&%23.constant. fuel%vstd!invariant.AtomicInvariant.inv. fuel%vstd!layout.is_power_2. fuel%vstd!layout.valid_layout. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.impl&%0.len. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map.check_argument_is_map. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!raw_ptr.impl&%2.arrow_0. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%6.ptr. fuel%vstd!raw_ptr.impl&%6.opt_value. fuel%vstd!raw_ptr.impl&%6.is_init. fuel%vstd!raw_ptr.impl&%6.is_uninit. fuel%vstd!raw_ptr.impl&%6.value. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.impl&%7.is_uninit. fuel%vstd!raw_ptr.impl&%7.value. fuel%vstd!raw_ptr.axiom_ptr_mut_from_data. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!raw_ptr.ptr_null_mut. fuel%vstd!raw_ptr.spec_cast_ptr_to_thin_ptr. fuel%vstd!raw_ptr.spec_cast_ptr_to_usize. fuel%vstd!raw_ptr.impl&%10.view. fuel%vstd!raw_ptr.impl&%11.is_range. fuel%vstd!raw_ptr.impl&%11.contains_range. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_le. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_difference. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_difference_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set_lib.set_int_range. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%32.view. fuel%vstd!view.impl&%36.view. fuel%vstd!view.impl&%40.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%vstd!view.impl&%46.view. fuel%lib!tokens.impl&%2.to_int. fuel%lib!types.impl&%1.atomic_inv. fuel%lib!types.impl&%10.atomic_inv. fuel%lib!layout.is_heap_ptr. fuel%lib!layout.page_start. fuel%lib!layout.block_start_at. fuel%lib!layout.is_block_ptr. fuel%lib!config.INTPTR_SIZE. fuel%lib!config.SLICE_SIZE. fuel%lib!linked_list.VERUS_layout_of_Node. fuel%lib!linked_list.impl&%2.next_ptr. fuel%lib!linked_list.impl&%2.valid_node. fuel%lib!linked_list.impl&%2.wf. fuel%lib!linked_list.impl&%2.len. fuel%lib!linked_list.impl&%2.page_id. fuel%lib!linked_list.impl&%2.block_size. fuel%lib!linked_list.impl&%2.fixed_page. fuel%lib!linked_list.impl&%2.instance. fuel%lib!linked_list.impl&%2.heap_id. fuel%lib!linked_list.impl&%2.ptr. fuel%lib!linked_list.has_idx. fuel%lib!linked_list.set_nat_range. fuel%lib!linked_list.llgstr_wf. fuel%lib!linked_list.impl&%3.atomic_inv. fuel%lib!linked_list.impl&%4.wf. fuel%lib!linked_list.impl&%6.atomic_inv. fuel%lib!linked_list.impl&%7.wf. fuel%lib!linked_list.impl&%8.is_empty. fuel%lib!linked_list.impl&%8.block_size. fuel%lib!linked_list.impl&%8.page_id. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (and (fuel_bool_default fuel%vstd!raw_ptr.axiom_ptr_mut_from_data.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_difference.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_difference_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%core!ptr.metadata.Pointee./Metadata (Dcr Type) Dcr)
(declare-fun proj%core!ptr.metadata.Pointee./Metadata (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort lib!commit_mask.CommitMask. 0)
(declare-sort lib!linked_list.StuffAgree.Instance. 0)
(declare-sort lib!linked_list.StuffAgree.x. 0)
(declare-sort lib!linked_list.StuffAgree.y. 0)
(declare-sort lib!tokens.Mim.Instance. 0)
(declare-sort lib!tokens.Mim.block. 0)
(declare-sort lib!tokens.Mim.delay. 0)
(declare-sort lib!tokens.Mim.heap_of_page. 0)
(declare-sort lib!tokens.Mim.thread_checked_state. 0)
(declare-sort lib!tokens.Mim.thread_local_state. 0)
(declare-sort lib!tokens.Mim.thread_of_segment. 0)
(declare-sort lib!types.BoolAgree.Instance. 0)
(declare-sort lib!types.BoolAgree.x. 0)
(declare-sort lib!types.BoolAgree.y. 0)
(declare-sort vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionPtr<lib!linked_list.Node.>. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. 0)
(declare-sort vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. 0)
(declare-sort vstd!cell.PCell<u32.>. 0)
(declare-sort vstd!cell.PCell<usize.>. 0)
(declare-sort vstd!cell.PCell<lib!types.PageInner.>. 0)
(declare-sort vstd!cell.PCell<lib!types.SegmentHeaderMain.>. 0)
(declare-sort vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. 0)
(declare-sort vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. 0)
(declare-sort vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. 0)
(declare-sort vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. 0)
(declare-sort vstd!invariant.OpenInvariantCredit. 0)
(declare-sort vstd!map.Map<int./lib!tokens.Mim.block.>. 0)
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. 0)
(declare-sort vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. 0)
(declare-sort vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.IsExposed. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.Heap.>. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.Page.>. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. 0)
(declare-sort vstd!raw_ptr.PointsToRaw. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!tokens.BlockId.>. 0)
(declare-sort vstd!set.Set<lib!tokens.PageId.>. 0)
(declare-sort ptr_mut%<u8.>. 0)
(declare-sort ptr_mut%<lib!linked_list.Node.>. 0)
(declare-sort ptr_mut%<lib!types.Heap.>. 0)
(declare-sort ptr_mut%<lib!types.Page.>. 0)
(declare-sort ptr_mut%<lib!types.SegmentHeader.>. 0)
(declare-sort ptr_mut%<lib!types.Tld.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!atomic.PermissionDataU64. 0) (vstd!atomic.PermissionDataPtr. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!atomic_ghost.AtomicPtr. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (vstd!raw_ptr.PointsToData. 0) (lib!tokens.Mim.thread_local_state_token_data. 0) (lib!tokens.Mim.block_token_data. 0) (lib!tokens.Mim.thread_of_segment_token_data. 0) (lib!tokens.Mim.delay_token_data. 0) (lib!tokens.Mim.heap_of_page_token_data. 0) (lib!tokens.Mim.thread_checked_state_token_data. 0) (lib!types.BoolAgree.y_token_data. 0) (lib!linked_list.StuffAgree.x_token_data. 0) (lib!linked_list.StuffAgree.y_token_data. 0) (lib!thread.ThreadId. 0) (lib!tokens.HeapId. 0) (lib!tokens.TldId. 0) (lib!tokens.SegmentId. 0) (lib!tokens.PageId. 0) (lib!tokens.BlockId. 0) (lib!tokens.DelayState. 0) (lib!tokens.PageState. 0) (lib!tokens.SegmentState. 0) (lib!tokens.BlockState. 0) (lib!tokens.HeapState. 0) (lib!tokens.ThreadState. 0) (lib!tokens.ThreadCheckedState. 0) (lib!types.PageInner. 0) (lib!types.AtomicHeapPtr. 0) (lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. 0) (lib!types.Page. 0) (lib!types.PageSharedAccess. 0) (lib!types.SegmentKind. 0) (lib!types.SegmentHeaderMain. 0) (lib!types.SegmentHeaderMain2. 0) (lib!types.SegmentHeader. 0) (lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. 0) (lib!types.SegmentSharedAccess. 0) (lib!types.PageQueue. 0) (lib!types.Heap. 0) (lib!types.HeapSharedAccess. 0) (lib!types.SegmentsTld. 0) (lib!types.SpanQueueHeader. 0) (lib!types.Tld. 0) (lib!types.TldPtr. 0) (lib!linked_list.Node. 0) (lib!linked_list.LLData. 0) (lib!linked_list.LL. 0) (lib!linked_list.LLGhostStateToReconvene. 0) (lib!linked_list.ThreadLLSimple. 0) (lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. 0) (lib!linked_list.BlockSizePageId. 0) (lib!linked_list.ThreadLLWithDelayBits. 0) (lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. 0) (tuple%0. 0) (tuple%1. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!atomic.PermissionDataU64./PermissionDataU64 (vstd!atomic.PermissionDataU64./PermissionDataU64/?patomic Int) (vstd!atomic.PermissionDataU64./PermissionDataU64/?value Int))) ((vstd!atomic.PermissionDataPtr./PermissionDataPtr (vstd!atomic.PermissionDataPtr./PermissionDataPtr/?patomic Int) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/?value Poly))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!atomic_ghost.AtomicPtr./AtomicPtr (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?patomic Poly) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?atomic_inv Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((vstd!raw_ptr.PointsToData./PointsToData (vstd!raw_ptr.PointsToData./PointsToData/?ptr Poly) (vstd!raw_ptr.PointsToData./PointsToData/?opt_value vstd!raw_ptr.MemContents.))) ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?key lib!thread.ThreadId.) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?value lib!tokens.ThreadState.))) ((lib!tokens.Mim.block_token_data./block_token_data (lib!tokens.Mim.block_token_data./block_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.block_token_data./block_token_data/?key lib!tokens.BlockId.) (lib!tokens.Mim.block_token_data./block_token_data/?value lib!tokens.BlockState.))) ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?key lib!tokens.SegmentId.) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?value lib!thread.ThreadId.))) ((lib!tokens.Mim.delay_token_data./delay_token_data (lib!tokens.Mim.delay_token_data./delay_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.delay_token_data./delay_token_data/?key lib!tokens.PageId.) (lib!tokens.Mim.delay_token_data./delay_token_data/?value lib!tokens.DelayState.))) ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?key lib!tokens.PageId.) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?value lib!tokens.HeapId.))) ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?key lib!thread.ThreadId.) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?value lib!tokens.ThreadCheckedState.))) ((lib!types.BoolAgree.y_token_data./y_token_data (lib!types.BoolAgree.y_token_data./y_token_data/?instance lib!types.BoolAgree.Instance.) (lib!types.BoolAgree.y_token_data./y_token_data/?value Bool))) ((lib!linked_list.StuffAgree.x_token_data./x_token_data (lib!linked_list.StuffAgree.x_token_data./x_token_data/?instance lib!linked_list.StuffAgree.Instance.) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?value core!option.Option.))) ((lib!linked_list.StuffAgree.y_token_data./y_token_data (lib!linked_list.StuffAgree.y_token_data./y_token_data/?instance lib!linked_list.StuffAgree.Instance.) (lib!linked_list.StuffAgree.y_token_data./y_token_data/?value core!option.Option.))) ((lib!thread.ThreadId./ThreadId (lib!thread.ThreadId./ThreadId/?thread_id Int))) ((lib!tokens.HeapId./HeapId (lib!tokens.HeapId./HeapId/?id Int) (lib!tokens.HeapId./HeapId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.HeapId./HeapId/?uniq Int))) ((lib!tokens.TldId./TldId (lib!tokens.TldId./TldId/?id Int) (lib!tokens.TldId./TldId/?provenance vstd!raw_ptr.Provenance.))) ((lib!tokens.SegmentId./SegmentId (lib!tokens.SegmentId./SegmentId/?id Int) (lib!tokens.SegmentId./SegmentId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.SegmentId./SegmentId/?uniq Int))) ((lib!tokens.PageId./PageId (lib!tokens.PageId./PageId/?segment_id lib!tokens.SegmentId.) (lib!tokens.PageId./PageId/?idx Int))) ((lib!tokens.BlockId./BlockId (lib!tokens.BlockId./BlockId/?page_id lib!tokens.PageId.) (lib!tokens.BlockId./BlockId/?idx Int) (lib!tokens.BlockId./BlockId/?slice_idx Int) (lib!tokens.BlockId./BlockId/?block_size Int))) ((lib!tokens.DelayState./UseDelayedFree ) (lib!tokens.DelayState./Freeing ) (lib!tokens.DelayState./NoDelayedFree ) (lib!tokens.DelayState./NeverDelayedFree )) ((lib!tokens.PageState./PageState (lib!tokens.PageState./PageState/?offset Int) (lib!tokens.PageState./PageState/?block_size Int) (lib!tokens.PageState./PageState/?num_blocks Int) (lib!tokens.PageState./PageState/?shared_access lib!types.PageSharedAccess.) (lib!tokens.PageState./PageState/?is_enabled Bool))) ((lib!tokens.SegmentState./SegmentState (lib!tokens.SegmentState./SegmentState/?shared_access lib!types.SegmentSharedAccess.) (lib!tokens.SegmentState./SegmentState/?is_enabled Bool))) ((lib!tokens.BlockState./BlockState (lib!tokens.BlockState./BlockState/?segment_shared_access lib!types.SegmentSharedAccess.) (lib!tokens.BlockState./BlockState/?page_shared_access lib!types.PageSharedAccess.) (lib!tokens.BlockState./BlockState/?page_slice_shared_access lib!types.PageSharedAccess.) (lib!tokens.BlockState./BlockState/?heap_id core!option.Option.))) ((lib!tokens.HeapState./HeapState (lib!tokens.HeapState./HeapState/?shared_access lib!types.HeapSharedAccess.))) ((lib!tokens.ThreadState./ThreadState (lib!tokens.ThreadState./ThreadState/?heap_id lib!tokens.HeapId.) (lib!tokens.ThreadState./ThreadState/?heap lib!tokens.HeapState.) (lib!tokens.ThreadState./ThreadState/?segments vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) (lib!tokens.ThreadState./ThreadState/?pages vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.))) ((lib!tokens.ThreadCheckedState./ThreadCheckedState (lib!tokens.ThreadCheckedState./ThreadCheckedState/?pages vstd!set.Set<lib!tokens.PageId.>.))) ((lib!types.PageInner./PageInner (lib!types.PageInner./PageInner/?flags0 Int) (lib!types.PageInner./PageInner/?capacity Int) (lib!types.PageInner./PageInner/?reserved Int) (lib!types.PageInner./PageInner/?flags1 Int) (lib!types.PageInner./PageInner/?flags2 Int) (lib!types.PageInner./PageInner/?free lib!linked_list.LL.) (lib!types.PageInner./PageInner/?used Int) (lib!types.PageInner./PageInner/?xblock_size Int) (lib!types.PageInner./PageInner/?local_free lib!linked_list.LL.))) ((lib!types.AtomicHeapPtr./AtomicHeapPtr (lib!types.AtomicHeapPtr./AtomicHeapPtr/?atomic vstd!atomic_ghost.AtomicPtr.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?instance lib!tokens.Mim.Instance.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?page_id lib!tokens.PageId.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp lib!types.BoolAgree.x.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp_inst lib!types.BoolAgree.Instance.))) ((lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic./InvariantPredicate_auto_AtomicHeapPtr_atomic )) ((lib!types.Page./Page (lib!types.Page./Page/?count vstd!cell.PCell<u32.>.) (lib!types.Page./Page/?offset Int) (lib!types.Page./Page/?inner vstd!cell.PCell<lib!types.PageInner.>.) (lib!types.Page./Page/?xthread_free lib!linked_list.ThreadLLWithDelayBits.) (lib!types.Page./Page/?xheap lib!types.AtomicHeapPtr.) (lib!types.Page./Page/?prev vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (lib!types.Page./Page/?next vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (lib!types.Page./Page/?padding Int))) ((lib!types.PageSharedAccess./PageSharedAccess (lib!types.PageSharedAccess./PageSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.Page.>.) (lib!types.PageSharedAccess./PageSharedAccess/?exposed vstd!raw_ptr.IsExposed.))) ((lib!types.SegmentKind./Normal ) (lib!types.SegmentKind./Huge )) ((lib!types.SegmentHeaderMain./SegmentHeaderMain (lib!types.SegmentHeaderMain./SegmentHeaderMain/?memid Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_pinned Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_large Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_committed Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_alignment Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_align_offset Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?allow_decommit Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_expire Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_mask lib!commit_mask.CommitMask.) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?commit_mask lib!commit_mask.CommitMask.))) ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2 (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?next ptr_mut%<lib!types.SegmentHeader.>.) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned_visits Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?used Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?cookie Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_slices Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_info_slices Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?kind lib!types.SegmentKind.) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?slice_entries Int))) ((lib!types.SegmentHeader./SegmentHeader (lib!types.SegmentHeader./SegmentHeader/?main vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) (lib!types.SegmentHeader./SegmentHeader/?abandoned_next Int) (lib!types.SegmentHeader./SegmentHeader/?main2 vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) (lib!types.SegmentHeader./SegmentHeader/?thread_id vstd!atomic_ghost.AtomicU64.) (lib!types.SegmentHeader./SegmentHeader/?instance lib!tokens.Mim.Instance.) (lib!types.SegmentHeader./SegmentHeader/?segment_id lib!tokens.SegmentId.))) ((lib!types.InvariantPredicate_auto_SegmentHeader_thread_id./InvariantPredicate_auto_SegmentHeader_thread_id )) ((lib!types.SegmentSharedAccess./SegmentSharedAccess (lib!types.SegmentSharedAccess./SegmentSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.))) ((lib!types.PageQueue./PageQueue (lib!types.PageQueue./PageQueue/?first ptr_mut%<lib!types.Page.>.) (lib!types.PageQueue./PageQueue/?last ptr_mut%<lib!types.Page.>.) (lib!types.PageQueue./PageQueue/?block_size Int))) ((lib!types.Heap./Heap (lib!types.Heap./Heap/?tld_ptr lib!types.TldPtr.) (lib!types.Heap./Heap/?pages_free_direct Poly) (lib!types.Heap./Heap/?pages Poly) (lib!types.Heap./Heap/?thread_delayed_free lib!linked_list.ThreadLLSimple.) (lib!types.Heap./Heap/?thread_id lib!thread.ThreadId.) (lib!types.Heap./Heap/?arena_id Int) (lib!types.Heap./Heap/?page_count vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?page_retired_min vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?page_retired_max vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?no_reclaim Bool) (lib!types.Heap./Heap/?page_empty_ptr ptr_mut%<lib!types.Page.>.))) ((lib!types.HeapSharedAccess./HeapSharedAccess (lib!types.HeapSharedAccess./HeapSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.Heap.>.))) ((lib!types.SegmentsTld./SegmentsTld (lib!types.SegmentsTld./SegmentsTld/?span_queue_headers %%Function%%) (lib!types.SegmentsTld./SegmentsTld/?count Int) (lib!types.SegmentsTld./SegmentsTld/?peak_count Int) (lib!types.SegmentsTld./SegmentsTld/?current_size Int) (lib!types.SegmentsTld./SegmentsTld/?peak_size Int))) ((lib!types.SpanQueueHeader./SpanQueueHeader (lib!types.SpanQueueHeader./SpanQueueHeader/?first ptr_mut%<lib!types.Page.>.) (lib!types.SpanQueueHeader./SpanQueueHeader/?last ptr_mut%<lib!types.Page.>.))) ((lib!types.Tld./Tld (lib!types.Tld./Tld/?heap_backing ptr_mut%<lib!types.Heap.>.) (lib!types.Tld./Tld/?segments lib!types.SegmentsTld.))) ((lib!types.TldPtr./TldPtr (lib!types.TldPtr./TldPtr/?tld_ptr ptr_mut%<lib!types.Tld.>.) (lib!types.TldPtr./TldPtr/?tld_id lib!tokens.TldId.))) ((lib!linked_list.Node./Node (lib!linked_list.Node./Node/?ptr ptr_mut%<lib!linked_list.Node.>.))) ((lib!linked_list.LLData./LLData (lib!linked_list.LLData./LLData/?fixed_page Bool) (lib!linked_list.LLData./LLData/?block_size Int) (lib!linked_list.LLData./LLData/?page_id lib!tokens.PageId.) (lib!linked_list.LLData./LLData/?heap_id core!option.Option.) (lib!linked_list.LLData./LLData/?instance lib!tokens.Mim.Instance.) (lib!linked_list.LLData./LLData/?len Int))) ((lib!linked_list.LL./LL (lib!linked_list.LL./LL/?first ptr_mut%<lib!linked_list.Node.>.) (lib!linked_list.LL./LL/?data lib!linked_list.LLData.) (lib!linked_list.LL./LL/?perms vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.))) ((lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/?block_size Int) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/?page_id lib!tokens.PageId.) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/?instance lib!tokens.Mim.Instance.) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/?map vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.))) ((lib!linked_list.ThreadLLSimple./ThreadLLSimple (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?instance lib!tokens.Mim.Instance.) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?heap_id lib!tokens.HeapId.) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?atomic vstd!atomic_ghost.AtomicPtr.))) ((lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic./InvariantPredicate_auto_ThreadLLSimple_atomic )) ((lib!linked_list.BlockSizePageId./BlockSizePageId (lib!linked_list.BlockSizePageId./BlockSizePageId/?block_size Int) (lib!linked_list.BlockSizePageId./BlockSizePageId/?page_id lib!tokens.PageId.))) ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?instance lib!tokens.Mim.Instance.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?atomic vstd!atomic_ghost.AtomicPtr.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp lib!linked_list.StuffAgree.x.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp_inst lib!linked_list.StuffAgree.Instance.))) ((lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic./InvariantPredicate_auto_ThreadLLWithDelayBits_atomic )) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly))) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (vstd!atomic.PermissionDataU64.) Int)
(declare-fun vstd!atomic.PermissionDataU64./PermissionDataU64/value (vstd!atomic.PermissionDataU64.) Int)
(declare-fun vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (vstd!atomic.PermissionDataPtr.) Int)
(declare-fun vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (vstd!atomic.PermissionDataPtr.) Poly)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun vstd!raw_ptr.PointsToData./PointsToData/ptr (vstd!raw_ptr.PointsToData.) Poly)
(declare-fun vstd!raw_ptr.PointsToData./PointsToData/opt_value (vstd!raw_ptr.PointsToData.) vstd!raw_ptr.MemContents.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (lib!tokens.Mim.thread_local_state_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (lib!tokens.Mim.thread_local_state_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (lib!tokens.Mim.thread_local_state_token_data.) lib!tokens.ThreadState.)
(declare-fun lib!tokens.Mim.block_token_data./block_token_data/instance (lib!tokens.Mim.block_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.block_token_data./block_token_data/key (lib!tokens.Mim.block_token_data.) lib!tokens.BlockId.)
(declare-fun lib!tokens.Mim.block_token_data./block_token_data/value (lib!tokens.Mim.block_token_data.) lib!tokens.BlockState.)
(declare-fun lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance (lib!tokens.Mim.thread_of_segment_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key (lib!tokens.Mim.thread_of_segment_token_data.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value (lib!tokens.Mim.thread_of_segment_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.delay_token_data./delay_token_data/instance (lib!tokens.Mim.delay_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.delay_token_data./delay_token_data/key (lib!tokens.Mim.delay_token_data.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.delay_token_data./delay_token_data/value (lib!tokens.Mim.delay_token_data.) lib!tokens.DelayState.)
(declare-fun lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance (lib!tokens.Mim.heap_of_page_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key (lib!tokens.Mim.heap_of_page_token_data.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value (lib!tokens.Mim.heap_of_page_token_data.) lib!tokens.HeapId.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (lib!tokens.Mim.thread_checked_state_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (lib!tokens.Mim.thread_checked_state_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (lib!tokens.Mim.thread_checked_state_token_data.) lib!tokens.ThreadCheckedState.)
(declare-fun lib!types.BoolAgree.y_token_data./y_token_data/instance (lib!types.BoolAgree.y_token_data.) lib!types.BoolAgree.Instance.)
(declare-fun lib!types.BoolAgree.y_token_data./y_token_data/value (lib!types.BoolAgree.y_token_data.) Bool)
(declare-fun lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (lib!linked_list.StuffAgree.x_token_data.) lib!linked_list.StuffAgree.Instance.)
(declare-fun lib!linked_list.StuffAgree.x_token_data./x_token_data/value (lib!linked_list.StuffAgree.x_token_data.) core!option.Option.)
(declare-fun lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (lib!linked_list.StuffAgree.y_token_data.) lib!linked_list.StuffAgree.Instance.)
(declare-fun lib!linked_list.StuffAgree.y_token_data./y_token_data/value (lib!linked_list.StuffAgree.y_token_data.) core!option.Option.)
(declare-fun lib!thread.ThreadId./ThreadId/thread_id (lib!thread.ThreadId.) Int)
(declare-fun lib!tokens.HeapId./HeapId/id (lib!tokens.HeapId.) Int)
(declare-fun lib!tokens.HeapId./HeapId/provenance (lib!tokens.HeapId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.HeapId./HeapId/uniq (lib!tokens.HeapId.) Int)
(declare-fun lib!tokens.TldId./TldId/id (lib!tokens.TldId.) Int)
(declare-fun lib!tokens.TldId./TldId/provenance (lib!tokens.TldId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/id (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.SegmentId./SegmentId/provenance (lib!tokens.SegmentId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/uniq (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.PageId./PageId/segment_id (lib!tokens.PageId.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.PageId./PageId/idx (lib!tokens.PageId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/page_id (lib!tokens.BlockId.) lib!tokens.PageId.)
(declare-fun lib!tokens.BlockId./BlockId/idx (lib!tokens.BlockId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/slice_idx (lib!tokens.BlockId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/block_size (lib!tokens.BlockId.) Int)
(declare-fun lib!tokens.PageState./PageState/offset (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/block_size (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/num_blocks (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/shared_access (lib!tokens.PageState.) lib!types.PageSharedAccess.)
(declare-fun lib!tokens.PageState./PageState/is_enabled (lib!tokens.PageState.) Bool)
(declare-fun lib!tokens.SegmentState./SegmentState/shared_access (lib!tokens.SegmentState.) lib!types.SegmentSharedAccess.)
(declare-fun lib!tokens.SegmentState./SegmentState/is_enabled (lib!tokens.SegmentState.) Bool)
(declare-fun lib!tokens.BlockState./BlockState/segment_shared_access (lib!tokens.BlockState.) lib!types.SegmentSharedAccess.)
(declare-fun lib!tokens.BlockState./BlockState/page_shared_access (lib!tokens.BlockState.) lib!types.PageSharedAccess.)
(declare-fun lib!tokens.BlockState./BlockState/page_slice_shared_access (lib!tokens.BlockState.) lib!types.PageSharedAccess.)
(declare-fun lib!tokens.BlockState./BlockState/heap_id (lib!tokens.BlockState.) core!option.Option.)
(declare-fun lib!tokens.HeapState./HeapState/shared_access (lib!tokens.HeapState.) lib!types.HeapSharedAccess.)
(declare-fun lib!tokens.ThreadState./ThreadState/heap_id (lib!tokens.ThreadState.) lib!tokens.HeapId.)
(declare-fun lib!tokens.ThreadState./ThreadState/heap (lib!tokens.ThreadState.) lib!tokens.HeapState.)
(declare-fun lib!tokens.ThreadState./ThreadState/segments (lib!tokens.ThreadState.) vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)
(declare-fun lib!tokens.ThreadState./ThreadState/pages (lib!tokens.ThreadState.) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(declare-fun lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (lib!tokens.ThreadCheckedState.) vstd!set.Set<lib!tokens.PageId.>.)
(declare-fun lib!types.PageInner./PageInner/flags0 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/capacity (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/reserved (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags1 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags2 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.PageInner./PageInner/used (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/xblock_size (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/local_free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (lib!types.AtomicHeapPtr.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/instance (lib!types.AtomicHeapPtr.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (lib!types.AtomicHeapPtr.) lib!tokens.PageId.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/emp (lib!types.AtomicHeapPtr.) lib!types.BoolAgree.x.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst (lib!types.AtomicHeapPtr.) lib!types.BoolAgree.Instance.)
(declare-fun lib!types.Page./Page/count (lib!types.Page.) vstd!cell.PCell<u32.>.)
(declare-fun lib!types.Page./Page/offset (lib!types.Page.) Int)
(declare-fun lib!types.Page./Page/inner (lib!types.Page.) vstd!cell.PCell<lib!types.PageInner.>.)
(declare-fun lib!types.Page./Page/xthread_free (lib!types.Page.) lib!linked_list.ThreadLLWithDelayBits.)
(declare-fun lib!types.Page./Page/xheap (lib!types.Page.) lib!types.AtomicHeapPtr.)
(declare-fun lib!types.Page./Page/prev (lib!types.Page.) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.Page./Page/next (lib!types.Page.) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.Page./Page/padding (lib!types.Page.) Int)
(declare-fun lib!types.PageSharedAccess./PageSharedAccess/points_to (lib!types.PageSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-fun lib!types.PageSharedAccess./PageSharedAccess/exposed (lib!types.PageSharedAccess.) vstd!raw_ptr.IsExposed.)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask (lib!types.SegmentHeaderMain.) lib!commit_mask.CommitMask.)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask (lib!types.SegmentHeaderMain.) lib!commit_mask.CommitMask.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next (lib!types.SegmentHeaderMain2.) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind (lib!types.SegmentHeaderMain2.) lib!types.SegmentKind.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeader./SegmentHeader/main (lib!types.SegmentHeader.) vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/abandoned_next (lib!types.SegmentHeader.) Int)
(declare-fun lib!types.SegmentHeader./SegmentHeader/main2 (lib!types.SegmentHeader.) vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/thread_id (lib!types.SegmentHeader.) vstd!atomic_ghost.AtomicU64.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/instance (lib!types.SegmentHeader.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/segment_id (lib!types.SegmentHeader.) lib!tokens.SegmentId.)
(declare-fun lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to (lib!types.SegmentSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)
(declare-fun lib!types.PageQueue./PageQueue/first (lib!types.PageQueue.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PageQueue./PageQueue/last (lib!types.PageQueue.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PageQueue./PageQueue/block_size (lib!types.PageQueue.) Int)
(declare-fun lib!types.Heap./Heap/tld_ptr (lib!types.Heap.) lib!types.TldPtr.)
(declare-fun lib!types.Heap./Heap/pages_free_direct (lib!types.Heap.) Poly)
(declare-fun lib!types.Heap./Heap/pages (lib!types.Heap.) Poly)
(declare-fun lib!types.Heap./Heap/thread_delayed_free (lib!types.Heap.) lib!linked_list.ThreadLLSimple.)
(declare-fun lib!types.Heap./Heap/thread_id (lib!types.Heap.) lib!thread.ThreadId.)
(declare-fun lib!types.Heap./Heap/arena_id (lib!types.Heap.) Int)
(declare-fun lib!types.Heap./Heap/page_count (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/page_retired_min (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/page_retired_max (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/no_reclaim (lib!types.Heap.) Bool)
(declare-fun lib!types.Heap./Heap/page_empty_ptr (lib!types.Heap.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.HeapSharedAccess./HeapSharedAccess/points_to (lib!types.HeapSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-fun lib!types.SegmentsTld./SegmentsTld/span_queue_headers (lib!types.SegmentsTld.) %%Function%%)
(declare-fun lib!types.SegmentsTld./SegmentsTld/count (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/peak_count (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/current_size (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/peak_size (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SpanQueueHeader./SpanQueueHeader/first (lib!types.SpanQueueHeader.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.SpanQueueHeader./SpanQueueHeader/last (lib!types.SpanQueueHeader.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.Tld./Tld/heap_backing (lib!types.Tld.) ptr_mut%<lib!types.Heap.>.)
(declare-fun lib!types.Tld./Tld/segments (lib!types.Tld.) lib!types.SegmentsTld.)
(declare-fun lib!types.TldPtr./TldPtr/tld_ptr (lib!types.TldPtr.) ptr_mut%<lib!types.Tld.>.)
(declare-fun lib!types.TldPtr./TldPtr/tld_id (lib!types.TldPtr.) lib!tokens.TldId.)
(declare-fun lib!linked_list.Node./Node/ptr (lib!linked_list.Node.) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun lib!linked_list.LLData./LLData/fixed_page (lib!linked_list.LLData.) Bool)
(declare-fun lib!linked_list.LLData./LLData/block_size (lib!linked_list.LLData.) Int)
(declare-fun lib!linked_list.LLData./LLData/page_id (lib!linked_list.LLData.) lib!tokens.PageId.)
(declare-fun lib!linked_list.LLData./LLData/heap_id (lib!linked_list.LLData.) core!option.Option.)
(declare-fun lib!linked_list.LLData./LLData/instance (lib!linked_list.LLData.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.LLData./LLData/len (lib!linked_list.LLData.) Int)
(declare-fun lib!linked_list.LL./LL/first (lib!linked_list.LL.) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun lib!linked_list.LL./LL/data (lib!linked_list.LL.) lib!linked_list.LLData.)
(declare-fun lib!linked_list.LL./LL/perms (lib!linked_list.LL.) vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.)
(declare-fun lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (lib!linked_list.LLGhostStateToReconvene.) Int)
(declare-fun lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (lib!linked_list.LLGhostStateToReconvene.) lib!tokens.PageId.)
(declare-fun lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance (lib!linked_list.LLGhostStateToReconvene.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map (lib!linked_list.LLGhostStateToReconvene.) vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (lib!linked_list.ThreadLLSimple.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (lib!linked_list.ThreadLLSimple.) lib!tokens.HeapId.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (lib!linked_list.ThreadLLSimple.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (lib!linked_list.BlockSizePageId.) Int)
(declare-fun lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (lib!linked_list.BlockSizePageId.) lib!tokens.PageId.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (lib!linked_list.ThreadLLWithDelayBits.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (lib!linked_list.ThreadLLWithDelayBits.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (lib!linked_list.ThreadLLWithDelayBits.) lib!linked_list.StuffAgree.x.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst (lib!linked_list.ThreadLLWithDelayBits.) lib!linked_list.StuffAgree.Instance.)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-const TYPE%vstd!atomic.PermissionDataU64. Type)
(declare-fun TYPE%vstd!atomic.PAtomicPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic.PermissionPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic.PermissionDataPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredPtr. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPtr. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!invariant.OpenInvariantCredit. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!raw_ptr.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.IsExposed. Type)
(declare-const TYPE%vstd!raw_ptr.PointsToRaw. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!tokens.Mim.Instance. Type)
(declare-const TYPE%lib!tokens.Mim.thread_local_state. Type)
(declare-const TYPE%lib!tokens.Mim.thread_local_state_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.block. Type)
(declare-const TYPE%lib!tokens.Mim.block_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.thread_of_segment. Type)
(declare-const TYPE%lib!tokens.Mim.thread_of_segment_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.delay. Type)
(declare-const TYPE%lib!tokens.Mim.delay_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.heap_of_page. Type)
(declare-const TYPE%lib!tokens.Mim.heap_of_page_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.thread_checked_state. Type)
(declare-const TYPE%lib!tokens.Mim.thread_checked_state_token_data. Type)
(declare-const TYPE%lib!types.BoolAgree.Instance. Type)
(declare-const TYPE%lib!types.BoolAgree.x. Type)
(declare-const TYPE%lib!types.BoolAgree.y. Type)
(declare-const TYPE%lib!types.BoolAgree.y_token_data. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.Instance. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.x. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.x_token_data. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.y. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.y_token_data. Type)
(declare-const TYPE%lib!thread.ThreadId. Type)
(declare-const TYPE%lib!tokens.HeapId. Type)
(declare-const TYPE%lib!tokens.TldId. Type)
(declare-const TYPE%lib!tokens.SegmentId. Type)
(declare-const TYPE%lib!tokens.PageId. Type)
(declare-const TYPE%lib!tokens.BlockId. Type)
(declare-const TYPE%lib!tokens.DelayState. Type)
(declare-const TYPE%lib!tokens.PageState. Type)
(declare-const TYPE%lib!tokens.SegmentState. Type)
(declare-const TYPE%lib!tokens.BlockState. Type)
(declare-const TYPE%lib!tokens.HeapState. Type)
(declare-const TYPE%lib!tokens.ThreadState. Type)
(declare-const TYPE%lib!tokens.ThreadCheckedState. Type)
(declare-const TYPE%lib!types.PageInner. Type)
(declare-const TYPE%lib!types.AtomicHeapPtr. Type)
(declare-const TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. Type)
(declare-const TYPE%lib!types.Page. Type)
(declare-const TYPE%lib!types.PageSharedAccess. Type)
(declare-const TYPE%lib!types.SegmentKind. Type)
(declare-const TYPE%lib!types.SegmentHeaderMain. Type)
(declare-const TYPE%lib!types.SegmentHeaderMain2. Type)
(declare-const TYPE%lib!types.SegmentHeader. Type)
(declare-const TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. Type)
(declare-const TYPE%lib!types.SegmentSharedAccess. Type)
(declare-const TYPE%lib!types.PageQueue. Type)
(declare-const TYPE%lib!types.Heap. Type)
(declare-const TYPE%lib!types.HeapSharedAccess. Type)
(declare-const TYPE%lib!types.SegmentsTld. Type)
(declare-const TYPE%lib!types.SpanQueueHeader. Type)
(declare-const TYPE%lib!types.Tld. Type)
(declare-const TYPE%lib!types.TldPtr. Type)
(declare-const TYPE%lib!linked_list.Node. Type)
(declare-const TYPE%lib!linked_list.LLData. Type)
(declare-const TYPE%lib!linked_list.LL. Type)
(declare-const TYPE%lib!linked_list.LLGhostStateToReconvene. Type)
(declare-const TYPE%lib!linked_list.ThreadLLSimple. Type)
(declare-const TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. Type)
(declare-const TYPE%lib!linked_list.BlockSizePageId. Type)
(declare-const TYPE%lib!linked_list.ThreadLLWithDelayBits. Type)
(declare-const TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. Type)
(declare-const TYPE%lib!commit_mask.CommitMask. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun FNDEF%core!clone.Clone.clone. (Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!commit_mask.CommitMask. (lib!commit_mask.CommitMask.) Poly)
(declare-fun %Poly%lib!commit_mask.CommitMask. (Poly) lib!commit_mask.CommitMask.)
(declare-fun Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.Instance.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.Instance. (Poly) lib!linked_list.StuffAgree.Instance.)
(declare-fun Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.StuffAgree.x.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.x. (Poly) lib!linked_list.StuffAgree.x.)
(declare-fun Poly%lib!linked_list.StuffAgree.y. (lib!linked_list.StuffAgree.y.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.y. (Poly) lib!linked_list.StuffAgree.y.)
(declare-fun Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.Instance.) Poly)
(declare-fun %Poly%lib!tokens.Mim.Instance. (Poly) lib!tokens.Mim.Instance.)
(declare-fun Poly%lib!tokens.Mim.block. (lib!tokens.Mim.block.) Poly)
(declare-fun %Poly%lib!tokens.Mim.block. (Poly) lib!tokens.Mim.block.)
(declare-fun Poly%lib!tokens.Mim.delay. (lib!tokens.Mim.delay.) Poly)
(declare-fun %Poly%lib!tokens.Mim.delay. (Poly) lib!tokens.Mim.delay.)
(declare-fun Poly%lib!tokens.Mim.heap_of_page. (lib!tokens.Mim.heap_of_page.) Poly)
(declare-fun %Poly%lib!tokens.Mim.heap_of_page. (Poly) lib!tokens.Mim.heap_of_page.)
(declare-fun Poly%lib!tokens.Mim.thread_checked_state. (lib!tokens.Mim.thread_checked_state.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_checked_state. (Poly) lib!tokens.Mim.thread_checked_state.)
(declare-fun Poly%lib!tokens.Mim.thread_local_state. (lib!tokens.Mim.thread_local_state.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_local_state. (Poly) lib!tokens.Mim.thread_local_state.)
(declare-fun Poly%lib!tokens.Mim.thread_of_segment. (lib!tokens.Mim.thread_of_segment.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_of_segment. (Poly) lib!tokens.Mim.thread_of_segment.)
(declare-fun Poly%lib!types.BoolAgree.Instance. (lib!types.BoolAgree.Instance.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.Instance. (Poly) lib!types.BoolAgree.Instance.)
(declare-fun Poly%lib!types.BoolAgree.x. (lib!types.BoolAgree.x.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.x. (Poly) lib!types.BoolAgree.x.)
(declare-fun Poly%lib!types.BoolAgree.y. (lib!types.BoolAgree.y.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.y. (Poly) lib!types.BoolAgree.y.)
(declare-fun Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. (vstd!atomic.PAtomicPtr<lib!linked_list.Node.>.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. (Poly) vstd!atomic.PAtomicPtr<lib!linked_list.Node.>.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. (vstd!atomic.PermissionPtr<lib!linked_list.Node.>.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. (Poly) vstd!atomic.PermissionPtr<lib!linked_list.Node.>.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. (vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. (Poly) vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. (vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. (Poly) vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.)
(declare-fun Poly%vstd!cell.PCell<u32.>. (vstd!cell.PCell<u32.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<u32.>. (Poly) vstd!cell.PCell<u32.>.)
(declare-fun Poly%vstd!cell.PCell<usize.>. (vstd!cell.PCell<usize.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<usize.>. (Poly) vstd!cell.PCell<usize.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.PageInner.>. (vstd!cell.PCell<lib!types.PageInner.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.PageInner.>. (Poly) vstd!cell.PCell<lib!types.PageInner.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (Poly) vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (Poly) vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)
(declare-fun Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (Poly) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. (vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>.) Poly)
(declare-fun %Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. (Poly) vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>.)
(declare-fun Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. (vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>.) Poly)
(declare-fun %Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. (Poly) vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>.)
(declare-fun Poly%vstd!invariant.OpenInvariantCredit. (vstd!invariant.OpenInvariantCredit.) Poly)
(declare-fun %Poly%vstd!invariant.OpenInvariantCredit. (Poly) vstd!invariant.OpenInvariantCredit.)
(declare-fun Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. (vstd!map.Map<int./lib!tokens.Mim.block.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. (Poly) vstd!map.Map<int./lib!tokens.Mim.block.>.)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (Poly) vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)
(declare-fun Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (Poly) vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (Poly) vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.IsExposed. (vstd!raw_ptr.IsExposed.) Poly)
(declare-fun %Poly%vstd!raw_ptr.IsExposed. (Poly) vstd!raw_ptr.IsExposed.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. (vstd!raw_ptr.PointsTo<lib!linked_list.Node.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. (Poly) vstd!raw_ptr.PointsTo<lib!linked_list.Node.>.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (vstd!raw_ptr.PointsTo<lib!types.Heap.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (vstd!raw_ptr.PointsTo<lib!types.Page.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)
(declare-fun Poly%vstd!raw_ptr.PointsToRaw. (vstd!raw_ptr.PointsToRaw.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsToRaw. (Poly) vstd!raw_ptr.PointsToRaw.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.BlockId.>. (vstd!set.Set<lib!tokens.BlockId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.BlockId.>. (Poly) vstd!set.Set<lib!tokens.BlockId.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.Set<lib!tokens.PageId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.PageId.>. (Poly) vstd!set.Set<lib!tokens.PageId.>.)
(declare-fun Poly%ptr_mut%<u8.>. (ptr_mut%<u8.>.) Poly)
(declare-fun %Poly%ptr_mut%<u8.>. (Poly) ptr_mut%<u8.>.)
(declare-fun Poly%ptr_mut%<lib!linked_list.Node.>. (ptr_mut%<lib!linked_list.Node.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!linked_list.Node.>. (Poly) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun Poly%ptr_mut%<lib!types.Heap.>. (ptr_mut%<lib!types.Heap.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Heap.>. (Poly) ptr_mut%<lib!types.Heap.>.)
(declare-fun Poly%ptr_mut%<lib!types.Page.>. (ptr_mut%<lib!types.Page.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Page.>. (Poly) ptr_mut%<lib!types.Page.>.)
(declare-fun Poly%ptr_mut%<lib!types.SegmentHeader.>. (ptr_mut%<lib!types.SegmentHeader.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.SegmentHeader.>. (Poly) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun Poly%ptr_mut%<lib!types.Tld.>. (ptr_mut%<lib!types.Tld.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Tld.>. (Poly) ptr_mut%<lib!types.Tld.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionDataU64. (Poly) vstd!atomic.PermissionDataU64.)
(declare-fun Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.PermissionDataPtr.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionDataPtr. (Poly) vstd!atomic.PermissionDataPtr.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPtr. (Poly) vstd!atomic_ghost.AtomicPtr.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsToData. (Poly) vstd!raw_ptr.PointsToData.)
(declare-fun Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly) lib!tokens.Mim.thread_local_state_token_data.)
(declare-fun Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.block_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.block_token_data. (Poly) lib!tokens.Mim.block_token_data.)
(declare-fun Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.thread_of_segment_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly) lib!tokens.Mim.thread_of_segment_token_data.)
(declare-fun Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.delay_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.delay_token_data. (Poly) lib!tokens.Mim.delay_token_data.)
(declare-fun Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.heap_of_page_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly) lib!tokens.Mim.heap_of_page_token_data.)
(declare-fun Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly) lib!tokens.Mim.thread_checked_state_token_data.)
(declare-fun Poly%lib!types.BoolAgree.y_token_data. (lib!types.BoolAgree.y_token_data.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.y_token_data. (Poly) lib!types.BoolAgree.y_token_data.)
(declare-fun Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.x_token_data. (Poly) lib!linked_list.StuffAgree.x_token_data.)
(declare-fun Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.y_token_data.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.y_token_data. (Poly) lib!linked_list.StuffAgree.y_token_data.)
(declare-fun Poly%lib!thread.ThreadId. (lib!thread.ThreadId.) Poly)
(declare-fun %Poly%lib!thread.ThreadId. (Poly) lib!thread.ThreadId.)
(declare-fun Poly%lib!tokens.HeapId. (lib!tokens.HeapId.) Poly)
(declare-fun %Poly%lib!tokens.HeapId. (Poly) lib!tokens.HeapId.)
(declare-fun Poly%lib!tokens.TldId. (lib!tokens.TldId.) Poly)
(declare-fun %Poly%lib!tokens.TldId. (Poly) lib!tokens.TldId.)
(declare-fun Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId.) Poly)
(declare-fun %Poly%lib!tokens.SegmentId. (Poly) lib!tokens.SegmentId.)
(declare-fun Poly%lib!tokens.PageId. (lib!tokens.PageId.) Poly)
(declare-fun %Poly%lib!tokens.PageId. (Poly) lib!tokens.PageId.)
(declare-fun Poly%lib!tokens.BlockId. (lib!tokens.BlockId.) Poly)
(declare-fun %Poly%lib!tokens.BlockId. (Poly) lib!tokens.BlockId.)
(declare-fun Poly%lib!tokens.DelayState. (lib!tokens.DelayState.) Poly)
(declare-fun %Poly%lib!tokens.DelayState. (Poly) lib!tokens.DelayState.)
(declare-fun Poly%lib!tokens.PageState. (lib!tokens.PageState.) Poly)
(declare-fun %Poly%lib!tokens.PageState. (Poly) lib!tokens.PageState.)
(declare-fun Poly%lib!tokens.SegmentState. (lib!tokens.SegmentState.) Poly)
(declare-fun %Poly%lib!tokens.SegmentState. (Poly) lib!tokens.SegmentState.)
(declare-fun Poly%lib!tokens.BlockState. (lib!tokens.BlockState.) Poly)
(declare-fun %Poly%lib!tokens.BlockState. (Poly) lib!tokens.BlockState.)
(declare-fun Poly%lib!tokens.HeapState. (lib!tokens.HeapState.) Poly)
(declare-fun %Poly%lib!tokens.HeapState. (Poly) lib!tokens.HeapState.)
(declare-fun Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState.) Poly)
(declare-fun %Poly%lib!tokens.ThreadState. (Poly) lib!tokens.ThreadState.)
(declare-fun Poly%lib!tokens.ThreadCheckedState. (lib!tokens.ThreadCheckedState.) Poly)
(declare-fun %Poly%lib!tokens.ThreadCheckedState. (Poly) lib!tokens.ThreadCheckedState.)
(declare-fun Poly%lib!types.PageInner. (lib!types.PageInner.) Poly)
(declare-fun %Poly%lib!types.PageInner. (Poly) lib!types.PageInner.)
(declare-fun Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr.) Poly)
(declare-fun %Poly%lib!types.AtomicHeapPtr. (Poly) lib!types.AtomicHeapPtr.)
(declare-fun Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) Poly)
(declare-fun %Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly) lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)
(declare-fun Poly%lib!types.Page. (lib!types.Page.) Poly)
(declare-fun %Poly%lib!types.Page. (Poly) lib!types.Page.)
(declare-fun Poly%lib!types.PageSharedAccess. (lib!types.PageSharedAccess.) Poly)
(declare-fun %Poly%lib!types.PageSharedAccess. (Poly) lib!types.PageSharedAccess.)
(declare-fun Poly%lib!types.SegmentKind. (lib!types.SegmentKind.) Poly)
(declare-fun %Poly%lib!types.SegmentKind. (Poly) lib!types.SegmentKind.)
(declare-fun Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain.) Poly)
(declare-fun %Poly%lib!types.SegmentHeaderMain. (Poly) lib!types.SegmentHeaderMain.)
(declare-fun Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2.) Poly)
(declare-fun %Poly%lib!types.SegmentHeaderMain2. (Poly) lib!types.SegmentHeaderMain2.)
(declare-fun Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader.) Poly)
(declare-fun %Poly%lib!types.SegmentHeader. (Poly) lib!types.SegmentHeader.)
(declare-fun Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) Poly)
(declare-fun %Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly) lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)
(declare-fun Poly%lib!types.SegmentSharedAccess. (lib!types.SegmentSharedAccess.) Poly)
(declare-fun %Poly%lib!types.SegmentSharedAccess. (Poly) lib!types.SegmentSharedAccess.)
(declare-fun Poly%lib!types.PageQueue. (lib!types.PageQueue.) Poly)
(declare-fun %Poly%lib!types.PageQueue. (Poly) lib!types.PageQueue.)
(declare-fun Poly%lib!types.Heap. (lib!types.Heap.) Poly)
(declare-fun %Poly%lib!types.Heap. (Poly) lib!types.Heap.)
(declare-fun Poly%lib!types.HeapSharedAccess. (lib!types.HeapSharedAccess.) Poly)
(declare-fun %Poly%lib!types.HeapSharedAccess. (Poly) lib!types.HeapSharedAccess.)
(declare-fun Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld.) Poly)
(declare-fun %Poly%lib!types.SegmentsTld. (Poly) lib!types.SegmentsTld.)
(declare-fun Poly%lib!types.SpanQueueHeader. (lib!types.SpanQueueHeader.) Poly)
(declare-fun %Poly%lib!types.SpanQueueHeader. (Poly) lib!types.SpanQueueHeader.)
(declare-fun Poly%lib!types.Tld. (lib!types.Tld.) Poly)
(declare-fun %Poly%lib!types.Tld. (Poly) lib!types.Tld.)
(declare-fun Poly%lib!types.TldPtr. (lib!types.TldPtr.) Poly)
(declare-fun %Poly%lib!types.TldPtr. (Poly) lib!types.TldPtr.)
(declare-fun Poly%lib!linked_list.Node. (lib!linked_list.Node.) Poly)
(declare-fun %Poly%lib!linked_list.Node. (Poly) lib!linked_list.Node.)
(declare-fun Poly%lib!linked_list.LLData. (lib!linked_list.LLData.) Poly)
(declare-fun %Poly%lib!linked_list.LLData. (Poly) lib!linked_list.LLData.)
(declare-fun Poly%lib!linked_list.LL. (lib!linked_list.LL.) Poly)
(declare-fun %Poly%lib!linked_list.LL. (Poly) lib!linked_list.LL.)
(declare-fun Poly%lib!linked_list.LLGhostStateToReconvene. (lib!linked_list.LLGhostStateToReconvene.) Poly)
(declare-fun %Poly%lib!linked_list.LLGhostStateToReconvene. (Poly) lib!linked_list.LLGhostStateToReconvene.)
(declare-fun Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple.) Poly)
(declare-fun %Poly%lib!linked_list.ThreadLLSimple. (Poly) lib!linked_list.ThreadLLSimple.)
(declare-fun Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) Poly)
(declare-fun %Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly) lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)
(declare-fun Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId.) Poly)
(declare-fun %Poly%lib!linked_list.BlockSizePageId. (Poly) lib!linked_list.BlockSizePageId.)
(declare-fun Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits.) Poly)
(declare-fun %Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly) lib!linked_list.ThreadLLWithDelayBits.)
(declare-fun Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) Poly)
(declare-fun %Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly) lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!commit_mask.CommitMask.)) (! (= x (%Poly%lib!commit_mask.CommitMask. (Poly%lib!commit_mask.CommitMask. x))) :pattern ((Poly%lib!commit_mask.CommitMask. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!commit_mask.CommitMask.) (= x (Poly%lib!commit_mask.CommitMask. (%Poly%lib!commit_mask.CommitMask. x)))) :pattern ((has_type x TYPE%lib!commit_mask.CommitMask.)))))
(assert (forall ((x lib!commit_mask.CommitMask.)) (! (has_type (Poly%lib!commit_mask.CommitMask. x) TYPE%lib!commit_mask.CommitMask.) :pattern ((has_type (Poly%lib!commit_mask.CommitMask. x) TYPE%lib!commit_mask.CommitMask.)))))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (= x (%Poly%lib!linked_list.StuffAgree.Instance. (Poly%lib!linked_list.StuffAgree.Instance. x))) :pattern ((Poly%lib!linked_list.StuffAgree.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Instance.) (= x (Poly%lib!linked_list.StuffAgree.Instance. (%Poly%lib!linked_list.StuffAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.Instance.)))))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (has_type (Poly%lib!linked_list.StuffAgree.Instance. x) TYPE%lib!linked_list.StuffAgree.Instance.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Instance. x) TYPE%lib!linked_list.StuffAgree.Instance.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (= x (%Poly%lib!linked_list.StuffAgree.x. (Poly%lib!linked_list.StuffAgree.x. x))) :pattern ((Poly%lib!linked_list.StuffAgree.x. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x.) (= x (Poly%lib!linked_list.StuffAgree.x. (%Poly%lib!linked_list.StuffAgree.x. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.x.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (has_type (Poly%lib!linked_list.StuffAgree.x. x) TYPE%lib!linked_list.StuffAgree.x.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.x. x) TYPE%lib!linked_list.StuffAgree.x.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (= x (%Poly%lib!linked_list.StuffAgree.y. (Poly%lib!linked_list.StuffAgree.y. x))) :pattern ((Poly%lib!linked_list.StuffAgree.y. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y.) (= x (Poly%lib!linked_list.StuffAgree.y. (%Poly%lib!linked_list.StuffAgree.y. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.y.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (has_type (Poly%lib!linked_list.StuffAgree.y. x) TYPE%lib!linked_list.StuffAgree.y.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.y. x) TYPE%lib!linked_list.StuffAgree.y.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (= x (%Poly%lib!tokens.Mim.Instance. (Poly%lib!tokens.Mim.Instance. x))) :pattern ((Poly%lib!tokens.Mim.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Instance.) (= x (Poly%lib!tokens.Mim.Instance. (%Poly%lib!tokens.Mim.Instance. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (has_type (Poly%lib!tokens.Mim.Instance. x) TYPE%lib!tokens.Mim.Instance.) :pattern ((has_type (Poly%lib!tokens.Mim.Instance. x) TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((x lib!tokens.Mim.block.)) (! (= x (%Poly%lib!tokens.Mim.block. (Poly%lib!tokens.Mim.block. x))) :pattern ((Poly%lib!tokens.Mim.block. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block.) (= x (Poly%lib!tokens.Mim.block. (%Poly%lib!tokens.Mim.block. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.block.)))))
(assert (forall ((x lib!tokens.Mim.block.)) (! (has_type (Poly%lib!tokens.Mim.block. x) TYPE%lib!tokens.Mim.block.) :pattern ((has_type (Poly%lib!tokens.Mim.block. x) TYPE%lib!tokens.Mim.block.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (= x (%Poly%lib!tokens.Mim.delay. (Poly%lib!tokens.Mim.delay. x))) :pattern ((Poly%lib!tokens.Mim.delay. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay.) (= x (Poly%lib!tokens.Mim.delay. (%Poly%lib!tokens.Mim.delay. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (has_type (Poly%lib!tokens.Mim.delay. x) TYPE%lib!tokens.Mim.delay.) :pattern ((has_type (Poly%lib!tokens.Mim.delay. x) TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (= x (%Poly%lib!tokens.Mim.heap_of_page. (Poly%lib!tokens.Mim.heap_of_page. x))) :pattern ((Poly%lib!tokens.Mim.heap_of_page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page.) (= x (Poly%lib!tokens.Mim.heap_of_page. (%Poly%lib!tokens.Mim.heap_of_page. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (has_type (Poly%lib!tokens.Mim.heap_of_page. x) TYPE%lib!tokens.Mim.heap_of_page.) :pattern ((has_type (Poly%lib!tokens.Mim.heap_of_page. x) TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state.)) (! (= x (%Poly%lib!tokens.Mim.thread_checked_state. (Poly%lib!tokens.Mim.thread_checked_state. x))) :pattern ((Poly%lib!tokens.Mim.thread_checked_state. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state.) (= x (Poly%lib!tokens.Mim.thread_checked_state. (%Poly%lib!tokens.Mim.thread_checked_state. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_checked_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state.)) (! (has_type (Poly%lib!tokens.Mim.thread_checked_state. x) TYPE%lib!tokens.Mim.thread_checked_state.) :pattern ((has_type (Poly%lib!tokens.Mim.thread_checked_state. x) TYPE%lib!tokens.Mim.thread_checked_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state.)) (! (= x (%Poly%lib!tokens.Mim.thread_local_state. (Poly%lib!tokens.Mim.thread_local_state. x))) :pattern ((Poly%lib!tokens.Mim.thread_local_state. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state.) (= x (Poly%lib!tokens.Mim.thread_local_state. (%Poly%lib!tokens.Mim.thread_local_state. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_local_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state.)) (! (has_type (Poly%lib!tokens.Mim.thread_local_state. x) TYPE%lib!tokens.Mim.thread_local_state.) :pattern ((has_type (Poly%lib!tokens.Mim.thread_local_state. x) TYPE%lib!tokens.Mim.thread_local_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (= x (%Poly%lib!tokens.Mim.thread_of_segment. (Poly%lib!tokens.Mim.thread_of_segment. x))) :pattern ((Poly%lib!tokens.Mim.thread_of_segment. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment.) (= x (Poly%lib!tokens.Mim.thread_of_segment. (%Poly%lib!tokens.Mim.thread_of_segment. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (has_type (Poly%lib!tokens.Mim.thread_of_segment. x) TYPE%lib!tokens.Mim.thread_of_segment.) :pattern ((has_type (Poly%lib!tokens.Mim.thread_of_segment. x) TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((x lib!types.BoolAgree.Instance.)) (! (= x (%Poly%lib!types.BoolAgree.Instance. (Poly%lib!types.BoolAgree.Instance. x))) :pattern ((Poly%lib!types.BoolAgree.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.Instance.) (= x (Poly%lib!types.BoolAgree.Instance. (%Poly%lib!types.BoolAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.Instance.)))))
(assert (forall ((x lib!types.BoolAgree.Instance.)) (! (has_type (Poly%lib!types.BoolAgree.Instance. x) TYPE%lib!types.BoolAgree.Instance.) :pattern ((has_type (Poly%lib!types.BoolAgree.Instance. x) TYPE%lib!types.BoolAgree.Instance.)))))
(assert (forall ((x lib!types.BoolAgree.x.)) (! (= x (%Poly%lib!types.BoolAgree.x. (Poly%lib!types.BoolAgree.x. x))) :pattern ((Poly%lib!types.BoolAgree.x. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.x.) (= x (Poly%lib!types.BoolAgree.x. (%Poly%lib!types.BoolAgree.x. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.x.)))))
(assert (forall ((x lib!types.BoolAgree.x.)) (! (has_type (Poly%lib!types.BoolAgree.x. x) TYPE%lib!types.BoolAgree.x.) :pattern ((has_type (Poly%lib!types.BoolAgree.x. x) TYPE%lib!types.BoolAgree.x.)))))
(assert (forall ((x lib!types.BoolAgree.y.)) (! (= x (%Poly%lib!types.BoolAgree.y. (Poly%lib!types.BoolAgree.y. x))) :pattern ((Poly%lib!types.BoolAgree.y. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.y.) (= x (Poly%lib!types.BoolAgree.y. (%Poly%lib!types.BoolAgree.y. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.y.)))))
(assert (forall ((x lib!types.BoolAgree.y.)) (! (has_type (Poly%lib!types.BoolAgree.y. x) TYPE%lib!types.BoolAgree.y.) :pattern ((has_type (Poly%lib!types.BoolAgree.y. x) TYPE%lib!types.BoolAgree.y.)))))
(assert (forall ((x vstd!atomic.PAtomicPtr<lib!linked_list.Node.>.)) (! (= x (%Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. (Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. x))) :pattern ((Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic.PAtomicPtr. $ TYPE%lib!linked_list.Node.)) (= x (Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. (%Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic.PAtomicPtr. $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x vstd!atomic.PAtomicPtr<lib!linked_list.Node.>.)) (! (has_type (Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. x) (TYPE%vstd!atomic.PAtomicPtr. $ TYPE%lib!linked_list.Node.)) :pattern ((has_type (Poly%vstd!atomic.PAtomicPtr<lib!linked_list.Node.>. x) (TYPE%vstd!atomic.PAtomicPtr. $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PermissionPtr<lib!linked_list.Node.>.)) (! (= x (%Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. (Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. x))) :pattern ((Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.)) (= x (Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. (%Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x vstd!atomic.PermissionPtr<lib!linked_list.Node.>.)) (! (has_type (Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. x) (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.)) :pattern ((has_type (Poly%vstd!atomic.PermissionPtr<lib!linked_list.Node.>. x) (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. (Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (= x (Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. (%Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. x) (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>. x) (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. (Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (= x (Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. (%Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. x) (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>. x) (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))))))
(assert (forall ((x vstd!cell.PCell<u32.>.)) (! (= x (%Poly%vstd!cell.PCell<u32.>. (Poly%vstd!cell.PCell<u32.>. x))) :pattern ((Poly%vstd!cell.PCell<u32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (UINT 32))) (= x (Poly%vstd!cell.PCell<u32.>. (%Poly%vstd!cell.PCell<u32.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PCell<u32.>.)) (! (has_type (Poly%vstd!cell.PCell<u32.>. x) (TYPE%vstd!cell.PCell. $ (UINT 32))) :pattern ((has_type (Poly%vstd!cell.PCell<u32.>. x) (TYPE%vstd!cell.PCell. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PCell<usize.>.)) (! (= x (%Poly%vstd!cell.PCell<usize.>. (Poly%vstd!cell.PCell<usize.>. x))) :pattern ((Poly%vstd!cell.PCell<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (UINT SZ))) (= x (Poly%vstd!cell.PCell<usize.>. (%Poly%vstd!cell.PCell<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PCell<usize.>.)) (! (has_type (Poly%vstd!cell.PCell<usize.>. x) (TYPE%vstd!cell.PCell. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!cell.PCell<usize.>. x) (TYPE%vstd!cell.PCell. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PCell<lib!types.PageInner.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.PageInner.>. (Poly%vstd!cell.PCell<lib!types.PageInner.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.PageInner.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.)) (= x (Poly%vstd!cell.PCell<lib!types.PageInner.>. (%Poly%vstd!cell.PCell<lib!types.PageInner.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.PageInner.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.PageInner.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.PageInner.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.)) (= x (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.)) (= x (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)) (! (= x (%Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x))) :pattern ((Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.))) (= x (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (%Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)) (! (has_type (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.))) :pattern ((has_type (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>.)) (! (= x (%Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. (Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. x))) :pattern ((Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.) $ TYPE%lib!linked_list.LL.) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) (= x (Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. (%Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. x)))) :pattern ((has_type x (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.) $ TYPE%lib!linked_list.LL.) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))))
(assert (forall ((x vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>.)) (! (has_type (Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. x) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.) $ TYPE%lib!linked_list.LL.) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) :pattern ((has_type (Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%5<lib!tokens.Mim.Instance.>./$%5<lib!tokens.HeapId.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./lib!linked_list.LL.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.>.>. x) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.) $ TYPE%lib!linked_list.LL.) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))))
(assert (forall ((x vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>.)) (! (= x (%Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. (Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. x))) :pattern ((Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.)))) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))) (= x (Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. (%Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. x)))) :pattern ((has_type x (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.)))) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))))
(assert (forall ((x vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>.)) (! (has_type (Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. x) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.)))) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))) :pattern ((has_type (Poly%vstd!invariant.AtomicInvariant<tuple%2<tuple%2<$%6<lib!tokens.Mim.Instance.>./$%6<lib!linked_list.StuffAgree.Instance.>.>./int.>./tuple%2<vstd!atomic.PermissionPtr<lib!linked_list.Node.>./tuple%2<lib!linked_list.StuffAgree.y./core!option.Option<tuple%2<lib!tokens.Mim.delay./lib!linked_list.LL.>.>.>.>./vstd!atomic_ghost.AtomicPredPtr<lib!linked_list.Node./lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.>.>. x) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. $ TYPE%lib!linked_list.Node.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.)))) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. $ TYPE%lib!linked_list.Node. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))))
(assert (forall ((x vstd!invariant.OpenInvariantCredit.)) (! (= x (%Poly%vstd!invariant.OpenInvariantCredit. (Poly%vstd!invariant.OpenInvariantCredit. x))) :pattern ((Poly%vstd!invariant.OpenInvariantCredit. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!invariant.OpenInvariantCredit.) (= x (Poly%vstd!invariant.OpenInvariantCredit. (%Poly%vstd!invariant.OpenInvariantCredit. x)))) :pattern ((has_type x TYPE%vstd!invariant.OpenInvariantCredit.)))))
(assert (forall ((x vstd!invariant.OpenInvariantCredit.)) (! (has_type (Poly%vstd!invariant.OpenInvariantCredit. x) TYPE%vstd!invariant.OpenInvariantCredit.) :pattern ((has_type (Poly%vstd!invariant.OpenInvariantCredit. x) TYPE%vstd!invariant.OpenInvariantCredit.)))))
(assert (forall ((x vstd!map.Map<int./lib!tokens.Mim.block.>.)) (! (= x (%Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. x))) :pattern ((Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%lib!tokens.Mim.block.)) (= x (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. (%Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%lib!tokens.Mim.block.))))))
(assert (forall ((x vstd!map.Map<int./lib!tokens.Mim.block.>.)) (! (has_type (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%lib!tokens.Mim.block.)) :pattern ((has_type (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%lib!tokens.Mim.block.))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)) (! (= x (%Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. x))) :pattern ((Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.))) (= x (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (%Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.)))))))
(assert (forall ((x vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)) (! (has_type (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. x) (TYPE%vstd!map.Map. $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.))) :pattern ((has_type (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. x) (TYPE%vstd!map.Map. $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.)))))))
(assert (forall ((x vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.)) (! (= x (%Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. x))) :pattern ((Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.))) (= x (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (%Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.)))))))
(assert (forall ((x vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.)) (! (has_type (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. x) (TYPE%vstd!map.Map. $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.))) :pattern ((has_type (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. x) (TYPE%vstd!map.Map. $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.)))))))
(assert (forall ((x vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.)) (= x (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.IsExposed.)) (! (= x (%Poly%vstd!raw_ptr.IsExposed. (Poly%vstd!raw_ptr.IsExposed. x))) :pattern ((Poly%vstd!raw_ptr.IsExposed. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.IsExposed.) (= x (Poly%vstd!raw_ptr.IsExposed. (%Poly%vstd!raw_ptr.IsExposed. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.IsExposed.)))))
(assert (forall ((x vstd!raw_ptr.IsExposed.)) (! (has_type (Poly%vstd!raw_ptr.IsExposed. x) TYPE%vstd!raw_ptr.IsExposed.) :pattern ((has_type (Poly%vstd!raw_ptr.IsExposed. x) TYPE%vstd!raw_ptr.IsExposed.)))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!linked_list.Node.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. (%Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!linked_list.Node.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Heap.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Heap.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Page.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Page.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x vstd!raw_ptr.PointsToRaw.)) (! (= x (%Poly%vstd!raw_ptr.PointsToRaw. (Poly%vstd!raw_ptr.PointsToRaw. x))) :pattern ((Poly%vstd!raw_ptr.PointsToRaw. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PointsToRaw.) (= x (Poly%vstd!raw_ptr.PointsToRaw. (%Poly%vstd!raw_ptr.PointsToRaw. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PointsToRaw.)))))
(assert (forall ((x vstd!raw_ptr.PointsToRaw.)) (! (has_type (Poly%vstd!raw_ptr.PointsToRaw. x) TYPE%vstd!raw_ptr.PointsToRaw.) :pattern ((has_type (Poly%vstd!raw_ptr.PointsToRaw. x) TYPE%vstd!raw_ptr.PointsToRaw.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<lib!tokens.BlockId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.BlockId.>. (Poly%vstd!set.Set<lib!tokens.BlockId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.BlockId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.)) (= x (Poly%vstd!set.Set<lib!tokens.BlockId.>. (%Poly%vstd!set.Set<lib!tokens.BlockId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.BlockId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.BlockId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.BlockId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.PageId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.PageId.>. (Poly%vstd!set.Set<lib!tokens.PageId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.PageId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.)) (= x (Poly%vstd!set.Set<lib!tokens.PageId.>. (%Poly%vstd!set.Set<lib!tokens.PageId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.PageId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.PageId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.PageId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x ptr_mut%<u8.>.)) (! (= x (%Poly%ptr_mut%<u8.>. (Poly%ptr_mut%<u8.>. x))) :pattern ((Poly%ptr_mut%<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ (UINT 8))) (= x (Poly%ptr_mut%<u8.>. (%Poly%ptr_mut%<u8.>. x)))) :pattern ((has_type x (PTR $ (UINT 8)))))))
(assert (forall ((x ptr_mut%<u8.>.)) (! (has_type (Poly%ptr_mut%<u8.>. x) (PTR $ (UINT 8))) :pattern ((has_type (Poly%ptr_mut%<u8.>. x) (PTR $ (UINT 8)))))))
(assert (forall ((x ptr_mut%<lib!linked_list.Node.>.)) (! (= x (%Poly%ptr_mut%<lib!linked_list.Node.>. (Poly%ptr_mut%<lib!linked_list.Node.>. x))) :pattern ((Poly%ptr_mut%<lib!linked_list.Node.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!linked_list.Node.)) (= x (Poly%ptr_mut%<lib!linked_list.Node.>. (%Poly%ptr_mut%<lib!linked_list.Node.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x ptr_mut%<lib!linked_list.Node.>.)) (! (has_type (Poly%ptr_mut%<lib!linked_list.Node.>. x) (PTR $ TYPE%lib!linked_list.Node.)) :pattern ((has_type (Poly%ptr_mut%<lib!linked_list.Node.>. x) (PTR $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x ptr_mut%<lib!types.Heap.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Heap.>. (Poly%ptr_mut%<lib!types.Heap.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Heap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Heap.)) (= x (Poly%ptr_mut%<lib!types.Heap.>. (%Poly%ptr_mut%<lib!types.Heap.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Heap.))))))
(assert (forall ((x ptr_mut%<lib!types.Heap.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Heap.>. x) (PTR $ TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Heap.>. x) (PTR $ TYPE%lib!types.Heap.))))))
(assert (forall ((x ptr_mut%<lib!types.Page.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Page.>. (Poly%ptr_mut%<lib!types.Page.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Page.)) (= x (Poly%ptr_mut%<lib!types.Page.>. (%Poly%ptr_mut%<lib!types.Page.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Page.))))))
(assert (forall ((x ptr_mut%<lib!types.Page.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Page.>. x) (PTR $ TYPE%lib!types.Page.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Page.>. x) (PTR $ TYPE%lib!types.Page.))))))
(assert (forall ((x ptr_mut%<lib!types.SegmentHeader.>.)) (! (= x (%Poly%ptr_mut%<lib!types.SegmentHeader.>. (Poly%ptr_mut%<lib!types.SegmentHeader.>. x))) :pattern ((Poly%ptr_mut%<lib!types.SegmentHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.SegmentHeader.)) (= x (Poly%ptr_mut%<lib!types.SegmentHeader.>. (%Poly%ptr_mut%<lib!types.SegmentHeader.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x ptr_mut%<lib!types.SegmentHeader.>.)) (! (has_type (Poly%ptr_mut%<lib!types.SegmentHeader.>. x) (PTR $ TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.SegmentHeader.>. x) (PTR $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x ptr_mut%<lib!types.Tld.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Tld.>. (Poly%ptr_mut%<lib!types.Tld.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Tld.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Tld.)) (= x (Poly%ptr_mut%<lib!types.Tld.>. (%Poly%ptr_mut%<lib!types.Tld.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Tld.))))))
(assert (forall ((x ptr_mut%<lib!types.Tld.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Tld.>. x) (PTR $ TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Tld.>. x) (PTR $ TYPE%lib!types.Tld.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= x (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. x))) :pattern ((Poly%vstd!atomic.PermissionDataU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataU64.) (= x (Poly%vstd!atomic.PermissionDataU64. (%Poly%vstd!atomic.PermissionDataU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionDataU64.)))))
(assert (forall ((_patomic! Int) (_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64./PermissionDataU64 _patomic! _value!)) TYPE%vstd!atomic.PermissionDataU64.)) :pattern ((has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64./PermissionDataU64 _patomic! _value!)) TYPE%vstd!atomic.PermissionDataU64.)))))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic x) (vstd!atomic.PermissionDataU64./PermissionDataU64/?patomic x)) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/patomic x)))))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value x) (vstd!atomic.PermissionDataU64./PermissionDataU64/?value x)) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataU64.) (uInv 64 (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. x)))) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. x)) (has_type x TYPE%vstd!atomic.PermissionDataU64.)))))
(assert (forall ((x vstd!atomic.PermissionDataPtr.)) (! (= x (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. x))) :pattern ((Poly%vstd!atomic.PermissionDataPtr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic.PermissionDataPtr. T&. T&)) (= x (Poly%vstd!atomic.PermissionDataPtr. (%Poly%vstd!atomic.PermissionDataPtr. x)))) :pattern ((has_type x (TYPE%vstd!atomic.PermissionDataPtr. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_patomic! Int) (_value! Poly)) (! (=> (has_type _value! (PTR T&. T&)) (has_type (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.PermissionDataPtr./PermissionDataPtr _patomic! _value!)) (TYPE%vstd!atomic.PermissionDataPtr. T&. T&))) :pattern ((has_type (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.PermissionDataPtr./PermissionDataPtr _patomic! _value!)) (TYPE%vstd!atomic.PermissionDataPtr. T&. T&))))))
(assert (forall ((x vstd!atomic.PermissionDataPtr.)) (! (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic x) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/?patomic x)) :pattern ((vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic x)))))
(assert (forall ((x vstd!atomic.PermissionDataPtr.)) (! (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value x) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/?value x)) :pattern ((vstd!atomic.PermissionDataPtr./PermissionDataPtr/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic.PermissionDataPtr. T&. T&)) (has_type (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. x)) (PTR T&. T&))) :pattern ((vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. x)) (has_type x (TYPE%vstd!atomic.PermissionDataPtr. T&. T&))))))
(define-fun is-vstd!atomic.PermissionDataPtr./PermissionDataPtr_ ((c vstd!atomic.PermissionDataPtr.)) Bool ((_ is vstd!atomic.PermissionDataPtr./PermissionDataPtr) c))
(assert (forall ((x vstd!atomic.PermissionDataPtr.)) (! (=> (is-vstd!atomic.PermissionDataPtr./PermissionDataPtr_ x) (height_lt (height (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value x)) (height (Poly%vstd!atomic.PermissionDataPtr. x)))) :pattern ((height (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPtr. (Poly%vstd!atomic_ghost.AtomicPtr. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPtr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicPtr. (%Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! Poly) (_atomic_inv! Poly)) (! (=> (and (has_type _patomic! (TYPE%vstd!atomic.PAtomicPtr. T&. T&)) (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&)))) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr./AtomicPtr _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr./AtomicPtr _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (TYPE%vstd!atomic.PAtomicPtr. T&. T&))) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ ((c vstd!atomic_ghost.AtomicPtr.)) Bool ((_ is vstd!atomic_ghost.AtomicPtr./AtomicPtr) c))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (=> (is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ x) (height_lt (height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x)) (height (Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (=> (is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ x) (height_lt (height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= x (%Poly%vstd!raw_ptr.PointsToData. (Poly%vstd!raw_ptr.PointsToData. x))) :pattern ((Poly%vstd!raw_ptr.PointsToData. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (= x (Poly%vstd!raw_ptr.PointsToData. (%Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_ptr! Poly) (_opt_value! vstd!raw_ptr.MemContents.)) (! (=> (and (has_type _ptr! (PTR T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. _opt_value!) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) (has_type (Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData./PointsToData _ptr! _opt_value!)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData./PointsToData _ptr! _opt_value!)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= (vstd!raw_ptr.PointsToData./PointsToData/ptr x) (vstd!raw_ptr.PointsToData./PointsToData/?ptr x)) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/ptr x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (has_type (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. x)) (PTR T&. T&))) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. x)) (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= (vstd!raw_ptr.PointsToData./PointsToData/opt_value x) (vstd!raw_ptr.PointsToData./PointsToData/?opt_value x)) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/opt_value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. x))) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. x)) (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(define-fun is-vstd!raw_ptr.PointsToData./PointsToData_ ((c vstd!raw_ptr.PointsToData.)) Bool ((_ is vstd!raw_ptr.PointsToData./PointsToData) c))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (=> (is-vstd!raw_ptr.PointsToData./PointsToData_ x) (height_lt (height (vstd!raw_ptr.PointsToData./PointsToData/ptr x)) (height (Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((height (vstd!raw_ptr.PointsToData./PointsToData/ptr x))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (=> (is-vstd!raw_ptr.PointsToData./PointsToData_ x) (height_lt (height (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value x))) (height (Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((height (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value x)))))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= x (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. x))) :pattern ((Poly%lib!tokens.Mim.thread_local_state_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (= x (Poly%lib!tokens.Mim.thread_local_state_token_data. (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!thread.ThreadId.) (_value! lib!tokens.ThreadState.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _key!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.ThreadState. _value!) TYPE%lib!tokens.ThreadState.)) (has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?instance x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?key x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?value x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. x))) TYPE%lib!tokens.ThreadState.)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.block_token_data.)) (! (= x (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. x))) :pattern ((Poly%lib!tokens.Mim.block_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block_token_data.) (= x (Poly%lib!tokens.Mim.block_token_data. (%Poly%lib!tokens.Mim.block_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.BlockId.) (_value! lib!tokens.BlockState.)) (! (=> (and (has_type (Poly%lib!tokens.BlockId. _key!) TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.BlockState. _value!) TYPE%lib!tokens.BlockState.)) (has_type (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.block_token_data./block_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.block_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.block_token_data./block_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((x lib!tokens.Mim.block_token_data.)) (! (= (lib!tokens.Mim.block_token_data./block_token_data/instance x) (lib!tokens.Mim.block_token_data./block_token_data/?instance x)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.block_token_data.)) (! (= (lib!tokens.Mim.block_token_data./block_token_data/key x) (lib!tokens.Mim.block_token_data./block_token_data/?key x)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block_token_data.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. x))) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. x)) (has_type x TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((x lib!tokens.Mim.block_token_data.)) (! (= (lib!tokens.Mim.block_token_data./block_token_data/value x) (lib!tokens.Mim.block_token_data./block_token_data/?value x)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block_token_data.) (has_type (Poly%lib!tokens.BlockState. (lib!tokens.Mim.block_token_data./block_token_data/value (%Poly%lib!tokens.Mim.block_token_data. x))) TYPE%lib!tokens.BlockState.)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/value (%Poly%lib!tokens.Mim.block_token_data. x)) (has_type x TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment_token_data.)) (! (= x (%Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly%lib!tokens.Mim.thread_of_segment_token_data. x))) :pattern ((Poly%lib!tokens.Mim.thread_of_segment_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.) (= x (Poly%lib!tokens.Mim.thread_of_segment_token_data. (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.SegmentId.) (_value! lib!thread.ThreadId.)) (! (=> (and (has_type (Poly%lib!tokens.SegmentId. _key!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!thread.ThreadId. _value!) TYPE%lib!thread.ThreadId.)) (has_type (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_of_segment_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment_token_data.)) (! (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance x) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?instance x)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment_token_data.)) (! (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key x) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?key x)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment_token_data.)) (! (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value x) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?value x)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_token_data.)) (! (= x (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. x))) :pattern ((Poly%lib!tokens.Mim.delay_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_token_data.) (= x (Poly%lib!tokens.Mim.delay_token_data. (%Poly%lib!tokens.Mim.delay_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.delay_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.PageId.) (_value! lib!tokens.DelayState.)) (! (=> (has_type (Poly%lib!tokens.PageId. _key!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.delay_token_data./delay_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.delay_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.delay_token_data./delay_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.delay_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_token_data.)) (! (= (lib!tokens.Mim.delay_token_data./delay_token_data/instance x) (lib!tokens.Mim.delay_token_data./delay_token_data/?instance x)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.delay_token_data.)) (! (= (lib!tokens.Mim.delay_token_data./delay_token_data/key x) (lib!tokens.Mim.delay_token_data./delay_token_data/?key x)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_token_data.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. x)) (has_type x TYPE%lib!tokens.Mim.delay_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_token_data.)) (! (= (lib!tokens.Mim.delay_token_data./delay_token_data/value x) (lib!tokens.Mim.delay_token_data./delay_token_data/?value x)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/value x)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page_token_data.)) (! (= x (%Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly%lib!tokens.Mim.heap_of_page_token_data. x))) :pattern ((Poly%lib!tokens.Mim.heap_of_page_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.) (= x (Poly%lib!tokens.Mim.heap_of_page_token_data. (%Poly%lib!tokens.Mim.heap_of_page_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.PageId.) (_value! lib!tokens.HeapId.)) (! (=> (and (has_type (Poly%lib!tokens.PageId. _key!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.HeapId. _value!) TYPE%lib!tokens.HeapId.)) (has_type (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.heap_of_page_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page_token_data.)) (! (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance x) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?instance x)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page_token_data.)) (! (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key x) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?key x)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key (%Poly%lib!tokens.Mim.heap_of_page_token_data. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key (%Poly%lib!tokens.Mim.heap_of_page_token_data. x)) (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page_token_data.)) (! (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value x) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?value x)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value (%Poly%lib!tokens.Mim.heap_of_page_token_data. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value (%Poly%lib!tokens.Mim.heap_of_page_token_data. x)) (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= x (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. x))) :pattern ((Poly%lib!tokens.Mim.thread_checked_state_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.) (= x (Poly%lib!tokens.Mim.thread_checked_state_token_data. (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!thread.ThreadId.) (_value! lib!tokens.ThreadCheckedState.)) (! (=> (has_type (Poly%lib!thread.ThreadId. _key!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?instance x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?key x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?value x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value x)))))
(assert (forall ((x lib!types.BoolAgree.y_token_data.)) (! (= x (%Poly%lib!types.BoolAgree.y_token_data. (Poly%lib!types.BoolAgree.y_token_data. x))) :pattern ((Poly%lib!types.BoolAgree.y_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.y_token_data.) (= x (Poly%lib!types.BoolAgree.y_token_data. (%Poly%lib!types.BoolAgree.y_token_data. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.y_token_data.)))))
(assert (forall ((x lib!types.BoolAgree.y_token_data.)) (! (= (lib!types.BoolAgree.y_token_data./y_token_data/instance x) (lib!types.BoolAgree.y_token_data./y_token_data/?instance x)) :pattern ((lib!types.BoolAgree.y_token_data./y_token_data/instance x)))))
(assert (forall ((x lib!types.BoolAgree.y_token_data.)) (! (= (lib!types.BoolAgree.y_token_data./y_token_data/value x) (lib!types.BoolAgree.y_token_data./y_token_data/?value x)) :pattern ((lib!types.BoolAgree.y_token_data./y_token_data/value x)))))
(assert (forall ((x lib!types.BoolAgree.y_token_data.)) (! (has_type (Poly%lib!types.BoolAgree.y_token_data. x) TYPE%lib!types.BoolAgree.y_token_data.) :pattern ((has_type (Poly%lib!types.BoolAgree.y_token_data. x) TYPE%lib!types.BoolAgree.y_token_data.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= x (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. x))) :pattern ((Poly%lib!linked_list.StuffAgree.x_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.) (= x (Poly%lib!linked_list.StuffAgree.x_token_data. (%Poly%lib!linked_list.StuffAgree.x_token_data. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.)))))
(assert (forall ((_instance! lib!linked_list.StuffAgree.Instance.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.)) (has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data./x_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data./x_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance x) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?instance x)) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/instance x)))))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/value x) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?value x)) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. x)) (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y_token_data.)) (! (= x (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. x))) :pattern ((Poly%lib!linked_list.StuffAgree.y_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.) (= x (Poly%lib!linked_list.StuffAgree.y_token_data. (%Poly%lib!linked_list.StuffAgree.y_token_data. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.)))))
(assert (forall ((_instance! lib!linked_list.StuffAgree.Instance.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.)) (has_type (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.y_token_data./y_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.y_token_data.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.y_token_data./y_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.y_token_data.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y_token_data.)) (! (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/instance x) (lib!linked_list.StuffAgree.y_token_data./y_token_data/?instance x)) :pattern ((lib!linked_list.StuffAgree.y_token_data./y_token_data/instance x)))))
(assert (forall ((x lib!linked_list.StuffAgree.y_token_data.)) (! (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/value x) (lib!linked_list.StuffAgree.y_token_data./y_token_data/?value x)) :pattern ((lib!linked_list.StuffAgree.y_token_data./y_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. x)) (has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.)))))
(assert (forall ((x lib!thread.ThreadId.)) (! (= x (%Poly%lib!thread.ThreadId. (Poly%lib!thread.ThreadId. x))) :pattern ((Poly%lib!thread.ThreadId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.ThreadId.) (= x (Poly%lib!thread.ThreadId. (%Poly%lib!thread.ThreadId. x)))) :pattern ((has_type x TYPE%lib!thread.ThreadId.)))))
(assert (forall ((_thread_id! Int)) (! (=> (uInv 64 _thread_id!) (has_type (Poly%lib!thread.ThreadId. (lib!thread.ThreadId./ThreadId _thread_id!)) TYPE%lib!thread.ThreadId.)) :pattern ((has_type (Poly%lib!thread.ThreadId. (lib!thread.ThreadId./ThreadId _thread_id!)) TYPE%lib!thread.ThreadId.)))))
(assert (forall ((x lib!thread.ThreadId.)) (! (= (lib!thread.ThreadId./ThreadId/thread_id x) (lib!thread.ThreadId./ThreadId/?thread_id x)) :pattern ((lib!thread.ThreadId./ThreadId/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.ThreadId.) (uInv 64 (lib!thread.ThreadId./ThreadId/thread_id (%Poly%lib!thread.ThreadId. x)))) :pattern ((lib!thread.ThreadId./ThreadId/thread_id (%Poly%lib!thread.ThreadId. x)) (has_type x TYPE%lib!thread.ThreadId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= x (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. x))) :pattern ((Poly%lib!tokens.HeapId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapId.) (= x (Poly%lib!tokens.HeapId. (%Poly%lib!tokens.HeapId. x)))) :pattern ((has_type x TYPE%lib!tokens.HeapId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId _id! _provenance! _uniq!)) TYPE%lib!tokens.HeapId.)) :pattern ((has_type (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId _id! _provenance! _uniq!)) TYPE%lib!tokens.HeapId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/id x) (lib!tokens.HeapId./HeapId/?id x)) :pattern ((lib!tokens.HeapId./HeapId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapId.) (<= 0 (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. x)))) :pattern ((lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. x)) (has_type x TYPE%lib!tokens.HeapId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/provenance x) (lib!tokens.HeapId./HeapId/?provenance x)) :pattern ((lib!tokens.HeapId./HeapId/provenance x)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/uniq x) (lib!tokens.HeapId./HeapId/?uniq x)) :pattern ((lib!tokens.HeapId./HeapId/uniq x)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= x (%Poly%lib!tokens.TldId. (Poly%lib!tokens.TldId. x))) :pattern ((Poly%lib!tokens.TldId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.TldId.) (= x (Poly%lib!tokens.TldId. (%Poly%lib!tokens.TldId. x)))) :pattern ((has_type x TYPE%lib!tokens.TldId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.TldId. (lib!tokens.TldId./TldId _id! _provenance!)) TYPE%lib!tokens.TldId.)) :pattern ((has_type (Poly%lib!tokens.TldId. (lib!tokens.TldId./TldId _id! _provenance!)) TYPE%lib!tokens.TldId.)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= (lib!tokens.TldId./TldId/id x) (lib!tokens.TldId./TldId/?id x)) :pattern ((lib!tokens.TldId./TldId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.TldId.) (<= 0 (lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. x)))) :pattern ((lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. x)) (has_type x TYPE%lib!tokens.TldId.)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= (lib!tokens.TldId./TldId/provenance x) (lib!tokens.TldId./TldId/?provenance x)) :pattern ((lib!tokens.TldId./TldId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= x (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. x))) :pattern ((Poly%lib!tokens.SegmentId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (= x (Poly%lib!tokens.SegmentId. (%Poly%lib!tokens.SegmentId. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/id x) (lib!tokens.SegmentId./SegmentId/?id x)) :pattern ((lib!tokens.SegmentId./SegmentId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (<= 0 (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)))) :pattern ((lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)) (has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/provenance x) (lib!tokens.SegmentId./SegmentId/?provenance x)) :pattern ((lib!tokens.SegmentId./SegmentId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/uniq x) (lib!tokens.SegmentId./SegmentId/?uniq x)) :pattern ((lib!tokens.SegmentId./SegmentId/uniq x)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= x (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. x))) :pattern ((Poly%lib!tokens.PageId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (= x (Poly%lib!tokens.PageId. (%Poly%lib!tokens.PageId. x)))) :pattern ((has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((_segment_id! lib!tokens.SegmentId.) (_idx! Int)) (! (=> (and (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.) (<= 0 _idx!)) (has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/segment_id x) (lib!tokens.PageId./PageId/?segment_id x)) :pattern ((lib!tokens.PageId./PageId/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/idx x) (lib!tokens.PageId./PageId/?idx x)) :pattern ((lib!tokens.PageId./PageId/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (<= 0 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= x (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. x))) :pattern ((Poly%lib!tokens.BlockId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (= x (Poly%lib!tokens.BlockId. (%Poly%lib!tokens.BlockId. x)))) :pattern ((has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((_page_id! lib!tokens.PageId.) (_idx! Int) (_slice_idx! Int) (_block_size! Int)) (! (=> (and (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.) (<= 0 _idx!) (<= 0 _slice_idx!) (<= 0 _block_size!)) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.BlockId./BlockId _page_id! _idx! _slice_idx! _block_size!)) TYPE%lib!tokens.BlockId.)) :pattern ((has_type (Poly%lib!tokens.BlockId. (lib!tokens.BlockId./BlockId _page_id! _idx! _slice_idx! _block_size!)) TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/page_id x) (lib!tokens.BlockId./BlockId/?page_id x)) :pattern ((lib!tokens.BlockId./BlockId/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/idx x) (lib!tokens.BlockId./BlockId/?idx x)) :pattern ((lib!tokens.BlockId./BlockId/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/slice_idx x) (lib!tokens.BlockId./BlockId/?slice_idx x)) :pattern ((lib!tokens.BlockId./BlockId/slice_idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/block_size x) (lib!tokens.BlockId./BlockId/?block_size x)) :pattern ((lib!tokens.BlockId./BlockId/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.DelayState.)) (! (= x (%Poly%lib!tokens.DelayState. (Poly%lib!tokens.DelayState. x))) :pattern ((Poly%lib!tokens.DelayState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.DelayState.) (= x (Poly%lib!tokens.DelayState. (%Poly%lib!tokens.DelayState. x)))) :pattern ((has_type x TYPE%lib!tokens.DelayState.)))))
(assert (forall ((x lib!tokens.DelayState.)) (! (has_type (Poly%lib!tokens.DelayState. x) TYPE%lib!tokens.DelayState.) :pattern ((has_type (Poly%lib!tokens.DelayState. x) TYPE%lib!tokens.DelayState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= x (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. x))) :pattern ((Poly%lib!tokens.PageState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (= x (Poly%lib!tokens.PageState. (%Poly%lib!tokens.PageState. x)))) :pattern ((has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((_offset! Int) (_block_size! Int) (_num_blocks! Int) (_shared_access! lib!types.PageSharedAccess.) (_is_enabled! Bool)) (! (=> (and (<= 0 _block_size!) (<= 0 _num_blocks!)) (has_type (Poly%lib!tokens.PageState. (lib!tokens.PageState./PageState _offset! _block_size! _num_blocks! _shared_access! _is_enabled!)) TYPE%lib!tokens.PageState.)) :pattern ((has_type (Poly%lib!tokens.PageState. (lib!tokens.PageState./PageState _offset! _block_size! _num_blocks! _shared_access! _is_enabled!)) TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/offset x) (lib!tokens.PageState./PageState/?offset x)) :pattern ((lib!tokens.PageState./PageState/offset x)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/block_size x) (lib!tokens.PageState./PageState/?block_size x)) :pattern ((lib!tokens.PageState./PageState/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (<= 0 (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. x)))) :pattern ((lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. x)) (has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/num_blocks x) (lib!tokens.PageState./PageState/?num_blocks x)) :pattern ((lib!tokens.PageState./PageState/num_blocks x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (<= 0 (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. x)))) :pattern ((lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. x)) (has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/shared_access x) (lib!tokens.PageState./PageState/?shared_access x)) :pattern ((lib!tokens.PageState./PageState/shared_access x)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/is_enabled x) (lib!tokens.PageState./PageState/?is_enabled x)) :pattern ((lib!tokens.PageState./PageState/is_enabled x)))))
(define-fun is-lib!tokens.PageState./PageState_ ((c lib!tokens.PageState.)) Bool ((_ is lib!tokens.PageState./PageState) c))
(assert (forall ((x lib!tokens.PageState.)) (! (=> (is-lib!tokens.PageState./PageState_ x) (height_lt (height (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access x))) (height (Poly%lib!tokens.PageState. x)))) :pattern ((height (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access x)))))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= x (%Poly%lib!tokens.SegmentState. (Poly%lib!tokens.SegmentState. x))) :pattern ((Poly%lib!tokens.SegmentState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentState.) (= x (Poly%lib!tokens.SegmentState. (%Poly%lib!tokens.SegmentState. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentState.)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= (lib!tokens.SegmentState./SegmentState/shared_access x) (lib!tokens.SegmentState./SegmentState/?shared_access x)) :pattern ((lib!tokens.SegmentState./SegmentState/shared_access x)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= (lib!tokens.SegmentState./SegmentState/is_enabled x) (lib!tokens.SegmentState./SegmentState/?is_enabled x)) :pattern ((lib!tokens.SegmentState./SegmentState/is_enabled x)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (has_type (Poly%lib!tokens.SegmentState. x) TYPE%lib!tokens.SegmentState.) :pattern ((has_type (Poly%lib!tokens.SegmentState. x) TYPE%lib!tokens.SegmentState.)))))
(define-fun is-lib!tokens.SegmentState./SegmentState_ ((c lib!tokens.SegmentState.)) Bool ((_ is lib!tokens.SegmentState./SegmentState) c))
(assert (forall ((x lib!tokens.SegmentState.)) (! (=> (is-lib!tokens.SegmentState./SegmentState_ x) (height_lt (height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access x))) (height (Poly%lib!tokens.SegmentState. x)))) :pattern ((height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access x)))))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= x (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. x))) :pattern ((Poly%lib!tokens.BlockState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockState.) (= x (Poly%lib!tokens.BlockState. (%Poly%lib!tokens.BlockState. x)))) :pattern ((has_type x TYPE%lib!tokens.BlockState.)))))
(assert (forall ((_segment_shared_access! lib!types.SegmentSharedAccess.) (_page_shared_access! lib!types.PageSharedAccess.) (_page_slice_shared_access! lib!types.PageSharedAccess.) (_heap_id! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _heap_id!) (TYPE%core!option.Option. $ TYPE%lib!tokens.HeapId.)) (has_type (Poly%lib!tokens.BlockState. (lib!tokens.BlockState./BlockState _segment_shared_access! _page_shared_access! _page_slice_shared_access! _heap_id!)) TYPE%lib!tokens.BlockState.)) :pattern ((has_type (Poly%lib!tokens.BlockState. (lib!tokens.BlockState./BlockState _segment_shared_access! _page_shared_access! _page_slice_shared_access! _heap_id!)) TYPE%lib!tokens.BlockState.)))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= (lib!tokens.BlockState./BlockState/segment_shared_access x) (lib!tokens.BlockState./BlockState/?segment_shared_access x)) :pattern ((lib!tokens.BlockState./BlockState/segment_shared_access x)))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= (lib!tokens.BlockState./BlockState/page_shared_access x) (lib!tokens.BlockState./BlockState/?page_shared_access x)) :pattern ((lib!tokens.BlockState./BlockState/page_shared_access x)))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= (lib!tokens.BlockState./BlockState/page_slice_shared_access x) (lib!tokens.BlockState./BlockState/?page_slice_shared_access x)) :pattern ((lib!tokens.BlockState./BlockState/page_slice_shared_access x)))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= (lib!tokens.BlockState./BlockState/heap_id x) (lib!tokens.BlockState./BlockState/?heap_id x)) :pattern ((lib!tokens.BlockState./BlockState/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockState.) (has_type (Poly%core!option.Option. (lib!tokens.BlockState./BlockState/heap_id (%Poly%lib!tokens.BlockState. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.HeapId.))) :pattern ((lib!tokens.BlockState./BlockState/heap_id (%Poly%lib!tokens.BlockState. x)) (has_type x TYPE%lib!tokens.BlockState.)))))
(define-fun is-lib!tokens.BlockState./BlockState_ ((c lib!tokens.BlockState.)) Bool ((_ is lib!tokens.BlockState./BlockState) c))
(assert (forall ((x lib!tokens.BlockState.)) (! (=> (is-lib!tokens.BlockState./BlockState_ x) (height_lt (height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.BlockState./BlockState/segment_shared_access x))) (height (Poly%lib!tokens.BlockState. x)))) :pattern ((height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.BlockState./BlockState/segment_shared_access x)))))))
(assert (forall ((x lib!tokens.BlockState.)) (! (=> (is-lib!tokens.BlockState./BlockState_ x) (height_lt (height (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_shared_access x))) (height (Poly%lib!tokens.BlockState. x)))) :pattern ((height (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_shared_access x)))))))
(assert (forall ((x lib!tokens.BlockState.)) (! (=> (is-lib!tokens.BlockState./BlockState_ x) (height_lt (height (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_slice_shared_access x))) (height (Poly%lib!tokens.BlockState. x)))) :pattern ((height (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_slice_shared_access x)))))))
(assert (forall ((x lib!tokens.HeapState.)) (! (= x (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. x))) :pattern ((Poly%lib!tokens.HeapState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapState.) (= x (Poly%lib!tokens.HeapState. (%Poly%lib!tokens.HeapState. x)))) :pattern ((has_type x TYPE%lib!tokens.HeapState.)))))
(assert (forall ((x lib!tokens.HeapState.)) (! (= (lib!tokens.HeapState./HeapState/shared_access x) (lib!tokens.HeapState./HeapState/?shared_access x)) :pattern ((lib!tokens.HeapState./HeapState/shared_access x)))))
(assert (forall ((x lib!tokens.HeapState.)) (! (has_type (Poly%lib!tokens.HeapState. x) TYPE%lib!tokens.HeapState.) :pattern ((has_type (Poly%lib!tokens.HeapState. x) TYPE%lib!tokens.HeapState.)))))
(define-fun is-lib!tokens.HeapState./HeapState_ ((c lib!tokens.HeapState.)) Bool ((_ is lib!tokens.HeapState./HeapState) c))
(assert (forall ((x lib!tokens.HeapState.)) (! (=> (is-lib!tokens.HeapState./HeapState_ x) (height_lt (height (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access x))) (height (Poly%lib!tokens.HeapState. x)))) :pattern ((height (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= x (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. x))) :pattern ((Poly%lib!tokens.ThreadState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadState.) (= x (Poly%lib!tokens.ThreadState. (%Poly%lib!tokens.ThreadState. x)))) :pattern ((has_type x TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((_heap_id! lib!tokens.HeapId.) (_heap! lib!tokens.HeapState.) (_segments! vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) (_pages! vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (=> (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState./ThreadState _heap_id! _heap! _segments! _pages!)) TYPE%lib!tokens.ThreadState.)) :pattern ((has_type (Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState./ThreadState _heap_id! _heap! _segments! _pages!)) TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/heap_id x) (lib!tokens.ThreadState./ThreadState/?heap_id x)) :pattern ((lib!tokens.ThreadState./ThreadState/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadState.) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. x)) (has_type x TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/heap x) (lib!tokens.ThreadState./ThreadState/?heap x)) :pattern ((lib!tokens.ThreadState./ThreadState/heap x)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/segments x) (lib!tokens.ThreadState./ThreadState/?segments x)) :pattern ((lib!tokens.ThreadState./ThreadState/segments x)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/pages x) (lib!tokens.ThreadState./ThreadState/?pages x)) :pattern ((lib!tokens.ThreadState./ThreadState/pages x)))))
(define-fun is-lib!tokens.ThreadState./ThreadState_ ((c lib!tokens.ThreadState.)) Bool ((_ is lib!tokens.ThreadState./ThreadState) c))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x)))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x))))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x)))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x))))))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (= x (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. x))) :pattern ((Poly%lib!tokens.ThreadCheckedState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadCheckedState.) (= x (Poly%lib!tokens.ThreadCheckedState. (%Poly%lib!tokens.ThreadCheckedState. x)))) :pattern ((has_type x TYPE%lib!tokens.ThreadCheckedState.)))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (= (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages x) (lib!tokens.ThreadCheckedState./ThreadCheckedState/?pages x)) :pattern ((lib!tokens.ThreadCheckedState./ThreadCheckedState/pages x)))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (has_type (Poly%lib!tokens.ThreadCheckedState. x) TYPE%lib!tokens.ThreadCheckedState.) :pattern ((has_type (Poly%lib!tokens.ThreadCheckedState. x) TYPE%lib!tokens.ThreadCheckedState.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= x (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. x))) :pattern ((Poly%lib!types.PageInner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (= x (Poly%lib!types.PageInner. (%Poly%lib!types.PageInner. x)))) :pattern ((has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((_flags0! Int) (_capacity! Int) (_reserved! Int) (_flags1! Int) (_flags2! Int) (_free! lib!linked_list.LL.) (_used! Int) (_xblock_size! Int) (_local_free! lib!linked_list.LL.)) (! (=> (and (uInv 8 _flags0!) (uInv 16 _capacity!) (uInv 16 _reserved!) (uInv 8 _flags1!) (uInv 8 _flags2!) (has_type (Poly%lib!linked_list.LL. _free!) TYPE%lib!linked_list.LL.) (uInv 32 _used!) (uInv 32 _xblock_size!) (has_type (Poly%lib!linked_list.LL. _local_free!) TYPE%lib!linked_list.LL.)) (has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags0 x) (lib!types.PageInner./PageInner/?flags0 x)) :pattern ((lib!types.PageInner./PageInner/flags0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/capacity x) (lib!types.PageInner./PageInner/?capacity x)) :pattern ((lib!types.PageInner./PageInner/capacity x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/reserved x) (lib!types.PageInner./PageInner/?reserved x)) :pattern ((lib!types.PageInner./PageInner/reserved x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags1 x) (lib!types.PageInner./PageInner/?flags1 x)) :pattern ((lib!types.PageInner./PageInner/flags1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags2 x) (lib!types.PageInner./PageInner/?flags2 x)) :pattern ((lib!types.PageInner./PageInner/flags2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/free x) (lib!types.PageInner./PageInner/?free x)) :pattern ((lib!types.PageInner./PageInner/free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (has_type (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. x))) TYPE%lib!linked_list.LL.)) :pattern ((lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/used x) (lib!types.PageInner./PageInner/?used x)) :pattern ((lib!types.PageInner./PageInner/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/xblock_size x) (lib!types.PageInner./PageInner/?xblock_size x)) :pattern ((lib!types.PageInner./PageInner/xblock_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/local_free x) (lib!types.PageInner./PageInner/?local_free x)) :pattern ((lib!types.PageInner./PageInner/local_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (has_type (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. x))) TYPE%lib!linked_list.LL.)) :pattern ((lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(define-fun is-lib!types.PageInner./PageInner_ ((c lib!types.PageInner.)) Bool ((_ is lib!types.PageInner./PageInner) c))
(assert (forall ((x lib!types.PageInner.)) (! (=> (is-lib!types.PageInner./PageInner_ x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x)))))))
(assert (forall ((x lib!types.PageInner.)) (! (=> (is-lib!types.PageInner./PageInner_ x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x)))))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= x (%Poly%lib!types.AtomicHeapPtr. (Poly%lib!types.AtomicHeapPtr. x))) :pattern ((Poly%lib!types.AtomicHeapPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (= x (Poly%lib!types.AtomicHeapPtr. (%Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((_atomic! vstd!atomic_ghost.AtomicPtr.) (_instance! lib!tokens.Mim.Instance.) (_page_id! lib!tokens.PageId.) (_emp! lib!types.BoolAgree.x.) (_emp_inst! lib!types.BoolAgree.Instance.)) (! (=> (and (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr _atomic! _instance! _page_id! _emp! _emp_inst!)) TYPE%lib!types.AtomicHeapPtr.)) :pattern ((has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr _atomic! _instance! _page_id! _emp! _emp_inst!)) TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?atomic x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.))) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?instance x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?page_id x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%lib!tokens.PageId. (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/emp x)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp_inst x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst x)))))
(define-fun is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ ((c lib!types.AtomicHeapPtr.)) Bool ((_ is lib!types.AtomicHeapPtr./AtomicHeapPtr) c))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (=> (is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x))) (height (Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x)))))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (=> (is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x))) (height (Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x)))))))
(assert (forall ((x lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (! (= x (%Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x))) :pattern ((Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) (= x (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (%Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x)))) :pattern ((has_type x TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)))))
(assert (forall ((x lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (! (has_type (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x) TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) :pattern ((has_type (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x) TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)))))
(assert (forall ((x lib!types.Page.)) (! (= x (%Poly%lib!types.Page. (Poly%lib!types.Page. x))) :pattern ((Poly%lib!types.Page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (= x (Poly%lib!types.Page. (%Poly%lib!types.Page. x)))) :pattern ((has_type x TYPE%lib!types.Page.)))))
(assert (forall ((_count! vstd!cell.PCell<u32.>.) (_offset! Int) (_inner! vstd!cell.PCell<lib!types.PageInner.>.) (_xthread_free! lib!linked_list.ThreadLLWithDelayBits.) (_xheap! lib!types.AtomicHeapPtr.) (_prev! vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (_next! vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (_padding! Int)) (! (=> (and (uInv 32 _offset!) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. _xthread_free!) TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%lib!types.AtomicHeapPtr. _xheap!) TYPE%lib!types.AtomicHeapPtr.) (uInv SZ _padding!)) (has_type (Poly%lib!types.Page. (lib!types.Page./Page _count! _offset! _inner! _xthread_free! _xheap! _prev! _next! _padding!)) TYPE%lib!types.Page.)) :pattern ((has_type (Poly%lib!types.Page. (lib!types.Page./Page _count! _offset! _inner! _xthread_free! _xheap! _prev! _next! _padding!)) TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/count x) (lib!types.Page./Page/?count x)) :pattern ((lib!types.Page./Page/count x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/offset x) (lib!types.Page./Page/?offset x)) :pattern ((lib!types.Page./Page/offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (uInv 32 (lib!types.Page./Page/offset (%Poly%lib!types.Page. x)))) :pattern ((lib!types.Page./Page/offset (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/inner x) (lib!types.Page./Page/?inner x)) :pattern ((lib!types.Page./Page/inner x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/xthread_free x) (lib!types.Page./Page/?xthread_free x)) :pattern ((lib!types.Page./Page/xthread_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. x))) TYPE%lib!linked_list.ThreadLLWithDelayBits.)) :pattern ((lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/xheap x) (lib!types.Page./Page/?xheap x)) :pattern ((lib!types.Page./Page/xheap x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap (%Poly%lib!types.Page. x))) TYPE%lib!types.AtomicHeapPtr.)) :pattern ((lib!types.Page./Page/xheap (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/prev x) (lib!types.Page./Page/?prev x)) :pattern ((lib!types.Page./Page/prev x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/next x) (lib!types.Page./Page/?next x)) :pattern ((lib!types.Page./Page/next x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/padding x) (lib!types.Page./Page/?padding x)) :pattern ((lib!types.Page./Page/padding x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (uInv SZ (lib!types.Page./Page/padding (%Poly%lib!types.Page. x)))) :pattern ((lib!types.Page./Page/padding (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(define-fun is-lib!types.Page./Page_ ((c lib!types.Page.)) Bool ((_ is lib!types.Page./Page) c))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next x)))))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= x (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. x))) :pattern ((Poly%lib!types.PageSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageSharedAccess.) (= x (Poly%lib!types.PageSharedAccess. (%Poly%lib!types.PageSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.PageSharedAccess.)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= (lib!types.PageSharedAccess./PageSharedAccess/points_to x) (lib!types.PageSharedAccess./PageSharedAccess/?points_to x)) :pattern ((lib!types.PageSharedAccess./PageSharedAccess/points_to x)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= (lib!types.PageSharedAccess./PageSharedAccess/exposed x) (lib!types.PageSharedAccess./PageSharedAccess/?exposed x)) :pattern ((lib!types.PageSharedAccess./PageSharedAccess/exposed x)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (has_type (Poly%lib!types.PageSharedAccess. x) TYPE%lib!types.PageSharedAccess.) :pattern ((has_type (Poly%lib!types.PageSharedAccess. x) TYPE%lib!types.PageSharedAccess.)))))
(define-fun is-lib!types.PageSharedAccess./PageSharedAccess_ ((c lib!types.PageSharedAccess.)) Bool ((_ is lib!types.PageSharedAccess./PageSharedAccess) c))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (=> (is-lib!types.PageSharedAccess./PageSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to x))) (height (Poly%lib!types.PageSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.SegmentKind.)) (! (= x (%Poly%lib!types.SegmentKind. (Poly%lib!types.SegmentKind. x))) :pattern ((Poly%lib!types.SegmentKind. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentKind.) (= x (Poly%lib!types.SegmentKind. (%Poly%lib!types.SegmentKind. x)))) :pattern ((has_type x TYPE%lib!types.SegmentKind.)))))
(assert (forall ((x lib!types.SegmentKind.)) (! (has_type (Poly%lib!types.SegmentKind. x) TYPE%lib!types.SegmentKind.) :pattern ((has_type (Poly%lib!types.SegmentKind. x) TYPE%lib!types.SegmentKind.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= x (%Poly%lib!types.SegmentHeaderMain. (Poly%lib!types.SegmentHeaderMain. x))) :pattern ((Poly%lib!types.SegmentHeaderMain. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (= x (Poly%lib!types.SegmentHeaderMain. (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((_memid! Int) (_mem_is_pinned! Bool) (_mem_is_large! Bool) (_mem_is_committed! Bool) (_mem_alignment! Int) (_mem_align_offset! Int) (_allow_decommit! Bool) (_decommit_expire! Int) (_decommit_mask! lib!commit_mask.CommitMask.) (_commit_mask! lib!commit_mask.CommitMask.)) (! (=> (and (uInv SZ _memid!) (uInv SZ _mem_alignment!) (uInv SZ _mem_align_offset!) (iInv 64 _decommit_expire!)) (has_type (Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain./SegmentHeaderMain _memid! _mem_is_pinned! _mem_is_large! _mem_is_committed! _mem_alignment! _mem_align_offset! _allow_decommit! _decommit_expire! _decommit_mask! _commit_mask!)) TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain./SegmentHeaderMain _memid! _mem_is_pinned! _mem_is_large! _mem_is_committed! _mem_alignment! _mem_align_offset! _allow_decommit! _decommit_expire! _decommit_mask! _commit_mask!)) TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/memid x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?memid x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/memid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_pinned x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_large x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_committed x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_alignment x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_align_offset x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?allow_decommit x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_expire x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (iInv 64 (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_mask x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?commit_mask x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= x (%Poly%lib!types.SegmentHeaderMain2. (Poly%lib!types.SegmentHeaderMain2. x))) :pattern ((Poly%lib!types.SegmentHeaderMain2. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (= x (Poly%lib!types.SegmentHeaderMain2. (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((_next! ptr_mut%<lib!types.SegmentHeader.>.) (_abandoned! Int) (_abandoned_visits! Int) (_used! Int) (_cookie! Int) (_segment_slices! Int) (_segment_info_slices! Int) (_kind! lib!types.SegmentKind.) (_slice_entries! Int)) (! (=> (and (uInv SZ _abandoned!) (uInv SZ _abandoned_visits!) (uInv SZ _used!) (uInv SZ _cookie!) (uInv SZ _segment_slices!) (uInv SZ _segment_info_slices!) (uInv SZ _slice_entries!)) (has_type (Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2./SegmentHeaderMain2 _next! _abandoned! _abandoned_visits! _used! _cookie! _segment_slices! _segment_info_slices! _kind! _slice_entries!)) TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2./SegmentHeaderMain2 _next! _abandoned! _abandoned_visits! _used! _cookie! _segment_slices! _segment_info_slices! _kind! _slice_entries!)) TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?next x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned_visits x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?used x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?cookie x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_slices x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_info_slices x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?kind x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?slice_entries x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= x (%Poly%lib!types.SegmentHeader. (Poly%lib!types.SegmentHeader. x))) :pattern ((Poly%lib!types.SegmentHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (= x (Poly%lib!types.SegmentHeader. (%Poly%lib!types.SegmentHeader. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((_main! vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) (_abandoned_next! Int) (_main2! vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) (_thread_id! vstd!atomic_ghost.AtomicU64.) (_instance! lib!tokens.Mim.Instance.) (_segment_id! lib!tokens.SegmentId.)) (! (=> (and (uInv SZ _abandoned_next!) (has_type (Poly%vstd!atomic_ghost.AtomicU64. _thread_id!) (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.)) (has_type (Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader./SegmentHeader _main! _abandoned_next! _main2! _thread_id! _instance! _segment_id!)) TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader./SegmentHeader _main! _abandoned_next! _main2! _thread_id! _instance! _segment_id!)) TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/main x) (lib!types.SegmentHeader./SegmentHeader/?main x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/main x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/abandoned_next x) (lib!types.SegmentHeader./SegmentHeader/?abandoned_next x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/abandoned_next x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (uInv SZ (lib!types.SegmentHeader./SegmentHeader/abandoned_next (%Poly%lib!types.SegmentHeader. x)))) :pattern ((lib!types.SegmentHeader./SegmentHeader/abandoned_next (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/main2 x) (lib!types.SegmentHeader./SegmentHeader/?main2 x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/main2 x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/thread_id x) (lib!types.SegmentHeader./SegmentHeader/?thread_id x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. x))) (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.))) :pattern ((lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/instance x) (lib!types.SegmentHeader./SegmentHeader/?instance x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/instance x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/segment_id x) (lib!types.SegmentHeader./SegmentHeader/?segment_id x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%lib!tokens.SegmentId. (lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(define-fun is-lib!types.SegmentHeader./SegmentHeader_ ((c lib!types.SegmentHeader.)) Bool ((_ is lib!types.SegmentHeader./SegmentHeader) c))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 x)))))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id x)))))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance x)))))))
(assert (forall ((x lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (! (= x (%Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x))) :pattern ((Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) (= x (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (%Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x)))) :pattern ((has_type x TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)))))
(assert (forall ((x lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (! (has_type (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x) TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) :pattern ((has_type (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x) TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (= x (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. x))) :pattern ((Poly%lib!types.SegmentSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentSharedAccess.) (= x (Poly%lib!types.SegmentSharedAccess. (%Poly%lib!types.SegmentSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.SegmentSharedAccess.)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (= (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x) (lib!types.SegmentSharedAccess./SegmentSharedAccess/?points_to x)) :pattern ((lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (has_type (Poly%lib!types.SegmentSharedAccess. x) TYPE%lib!types.SegmentSharedAccess.) :pattern ((has_type (Poly%lib!types.SegmentSharedAccess. x) TYPE%lib!types.SegmentSharedAccess.)))))
(define-fun is-lib!types.SegmentSharedAccess./SegmentSharedAccess_ ((c lib!types.SegmentSharedAccess.)) Bool ((_ is lib!types.SegmentSharedAccess./SegmentSharedAccess) c))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (=> (is-lib!types.SegmentSharedAccess./SegmentSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x))) (height (Poly%lib!types.SegmentSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.PageQueue.)) (! (= x (%Poly%lib!types.PageQueue. (Poly%lib!types.PageQueue. x))) :pattern ((Poly%lib!types.PageQueue. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageQueue.) (= x (Poly%lib!types.PageQueue. (%Poly%lib!types.PageQueue. x)))) :pattern ((has_type x TYPE%lib!types.PageQueue.)))))
(assert (forall ((_first! ptr_mut%<lib!types.Page.>.) (_last! ptr_mut%<lib!types.Page.>.) (_block_size! Int)) (! (=> (uInv SZ _block_size!) (has_type (Poly%lib!types.PageQueue. (lib!types.PageQueue./PageQueue _first! _last! _block_size!)) TYPE%lib!types.PageQueue.)) :pattern ((has_type (Poly%lib!types.PageQueue. (lib!types.PageQueue./PageQueue _first! _last! _block_size!)) TYPE%lib!types.PageQueue.)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/first x) (lib!types.PageQueue./PageQueue/?first x)) :pattern ((lib!types.PageQueue./PageQueue/first x)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/last x) (lib!types.PageQueue./PageQueue/?last x)) :pattern ((lib!types.PageQueue./PageQueue/last x)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/block_size x) (lib!types.PageQueue./PageQueue/?block_size x)) :pattern ((lib!types.PageQueue./PageQueue/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageQueue.) (uInv SZ (lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. x)))) :pattern ((lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. x)) (has_type x TYPE%lib!types.PageQueue.)))))
(assert (forall ((x lib!types.Heap.)) (! (= x (%Poly%lib!types.Heap. (Poly%lib!types.Heap. x))) :pattern ((Poly%lib!types.Heap. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (= x (Poly%lib!types.Heap. (%Poly%lib!types.Heap. x)))) :pattern ((has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((_tld_ptr! lib!types.TldPtr.) (_pages_free_direct! Poly) (_pages! Poly) (_thread_delayed_free! lib!linked_list.ThreadLLSimple.) (_thread_id! lib!thread.ThreadId.) (_arena_id! Int) (_page_count! vstd!cell.PCell<usize.>.) (_page_retired_min! vstd!cell.PCell<usize.>.) (_page_retired_max! vstd!cell.PCell<usize.>.) (_no_reclaim! Bool) (_page_empty_ptr! ptr_mut%<lib!types.Page.>.)) (! (=> (and (has_type (Poly%lib!types.TldPtr. _tld_ptr!) TYPE%lib!types.TldPtr.) (has_type _pages_free_direct! (TYPE%vstd!cell.PCell. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)))) (has_type _pages! (TYPE%vstd!cell.PCell. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)))) (has_type (Poly%lib!linked_list.ThreadLLSimple. _thread_delayed_free!) TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!thread.ThreadId. _thread_id!) TYPE%lib!thread.ThreadId.) (uInv SZ _arena_id!)) (has_type (Poly%lib!types.Heap. (lib!types.Heap./Heap _tld_ptr! _pages_free_direct! _pages! _thread_delayed_free! _thread_id! _arena_id! _page_count! _page_retired_min! _page_retired_max! _no_reclaim! _page_empty_ptr!)) TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%lib!types.Heap. (lib!types.Heap./Heap _tld_ptr! _pages_free_direct! _pages! _thread_delayed_free! _thread_id! _arena_id! _page_count! _page_retired_min! _page_retired_max! _no_reclaim! _page_empty_ptr!)) TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/tld_ptr x) (lib!types.Heap./Heap/?tld_ptr x)) :pattern ((lib!types.Heap./Heap/tld_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. x))) TYPE%lib!types.TldPtr.)) :pattern ((lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/pages_free_direct x) (lib!types.Heap./Heap/?pages_free_direct x)) :pattern ((lib!types.Heap./Heap/pages_free_direct x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. x)) (TYPE%vstd!cell.PCell. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129))))) :pattern ((lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/pages x) (lib!types.Heap./Heap/?pages x)) :pattern ((lib!types.Heap./Heap/pages x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. x)) (TYPE%vstd!cell.PCell. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75))))) :pattern ((lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/thread_delayed_free x) (lib!types.Heap./Heap/?thread_delayed_free x)) :pattern ((lib!types.Heap./Heap/thread_delayed_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. x))) TYPE%lib!linked_list.ThreadLLSimple.)) :pattern ((lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/thread_id x) (lib!types.Heap./Heap/?thread_id x)) :pattern ((lib!types.Heap./Heap/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!thread.ThreadId. (lib!types.Heap./Heap/thread_id (%Poly%lib!types.Heap. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!types.Heap./Heap/thread_id (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/arena_id x) (lib!types.Heap./Heap/?arena_id x)) :pattern ((lib!types.Heap./Heap/arena_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (uInv SZ (lib!types.Heap./Heap/arena_id (%Poly%lib!types.Heap. x)))) :pattern ((lib!types.Heap./Heap/arena_id (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_count x) (lib!types.Heap./Heap/?page_count x)) :pattern ((lib!types.Heap./Heap/page_count x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_retired_min x) (lib!types.Heap./Heap/?page_retired_min x)) :pattern ((lib!types.Heap./Heap/page_retired_min x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_retired_max x) (lib!types.Heap./Heap/?page_retired_max x)) :pattern ((lib!types.Heap./Heap/page_retired_max x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/no_reclaim x) (lib!types.Heap./Heap/?no_reclaim x)) :pattern ((lib!types.Heap./Heap/no_reclaim x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_empty_ptr x) (lib!types.Heap./Heap/?page_empty_ptr x)) :pattern ((lib!types.Heap./Heap/page_empty_ptr x)))))
(define-fun is-lib!types.Heap./Heap_ ((c lib!types.Heap.)) Bool ((_ is lib!types.Heap./Heap) c))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr x))) (height (Poly%lib!types.Heap. x)))) :pattern ((height (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr x)))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (lib!types.Heap./Heap/pages_free_direct x)) (height (Poly%lib!types.Heap. x)))) :pattern ((height (lib!types.Heap./Heap/pages_free_direct x))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (lib!types.Heap./Heap/pages x)) (height (Poly%lib!types.Heap. x)))) :pattern ((height (lib!types.Heap./Heap/pages x))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free x))) (height (Poly%lib!types.Heap. x)))) :pattern ((height (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free x)))))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (= x (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. x))) :pattern ((Poly%lib!types.HeapSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.HeapSharedAccess.) (= x (Poly%lib!types.HeapSharedAccess. (%Poly%lib!types.HeapSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.HeapSharedAccess.)))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (= (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x) (lib!types.HeapSharedAccess./HeapSharedAccess/?points_to x)) :pattern ((lib!types.HeapSharedAccess./HeapSharedAccess/points_to x)))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (has_type (Poly%lib!types.HeapSharedAccess. x) TYPE%lib!types.HeapSharedAccess.) :pattern ((has_type (Poly%lib!types.HeapSharedAccess. x) TYPE%lib!types.HeapSharedAccess.)))))
(define-fun is-lib!types.HeapSharedAccess./HeapSharedAccess_ ((c lib!types.HeapSharedAccess.)) Bool ((_ is lib!types.HeapSharedAccess./HeapSharedAccess) c))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (=> (is-lib!types.HeapSharedAccess./HeapSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x))) (height (Poly%lib!types.HeapSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= x (%Poly%lib!types.SegmentsTld. (Poly%lib!types.SegmentsTld. x))) :pattern ((Poly%lib!types.SegmentsTld. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (= x (Poly%lib!types.SegmentsTld. (%Poly%lib!types.SegmentsTld. x)))) :pattern ((has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((_span_queue_headers! %%Function%%) (_count! Int) (_peak_count! Int) (_current_size! Int) (_peak_size! Int)) (! (=> (and (has_type (Poly%array%. _span_queue_headers!) (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32))) (uInv SZ _count!) (uInv SZ _peak_count!) (uInv SZ _current_size!) (uInv SZ _peak_size!)) (has_type (Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld./SegmentsTld _span_queue_headers! _count! _peak_count! _current_size! _peak_size!)) TYPE%lib!types.SegmentsTld.)) :pattern ((has_type (Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld./SegmentsTld _span_queue_headers! _count! _peak_count! _current_size! _peak_size!)) TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/span_queue_headers x) (lib!types.SegmentsTld./SegmentsTld/?span_queue_headers x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/span_queue_headers x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (has_type (Poly%array%. (lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. x))) (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/count x) (lib!types.SegmentsTld./SegmentsTld/?count x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/count (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/count (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/peak_count x) (lib!types.SegmentsTld./SegmentsTld/?peak_count x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/peak_count (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_count (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/current_size x) (lib!types.SegmentsTld./SegmentsTld/?current_size x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/current_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/current_size (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/current_size (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/peak_size x) (lib!types.SegmentsTld./SegmentsTld/?peak_size x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/peak_size (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_size (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= x (%Poly%lib!types.SpanQueueHeader. (Poly%lib!types.SpanQueueHeader. x))) :pattern ((Poly%lib!types.SpanQueueHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SpanQueueHeader.) (= x (Poly%lib!types.SpanQueueHeader. (%Poly%lib!types.SpanQueueHeader. x)))) :pattern ((has_type x TYPE%lib!types.SpanQueueHeader.)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= (lib!types.SpanQueueHeader./SpanQueueHeader/first x) (lib!types.SpanQueueHeader./SpanQueueHeader/?first x)) :pattern ((lib!types.SpanQueueHeader./SpanQueueHeader/first x)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= (lib!types.SpanQueueHeader./SpanQueueHeader/last x) (lib!types.SpanQueueHeader./SpanQueueHeader/?last x)) :pattern ((lib!types.SpanQueueHeader./SpanQueueHeader/last x)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (has_type (Poly%lib!types.SpanQueueHeader. x) TYPE%lib!types.SpanQueueHeader.) :pattern ((has_type (Poly%lib!types.SpanQueueHeader. x) TYPE%lib!types.SpanQueueHeader.)))))
(assert (forall ((x lib!types.Tld.)) (! (= x (%Poly%lib!types.Tld. (Poly%lib!types.Tld. x))) :pattern ((Poly%lib!types.Tld. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Tld.) (= x (Poly%lib!types.Tld. (%Poly%lib!types.Tld. x)))) :pattern ((has_type x TYPE%lib!types.Tld.)))))
(assert (forall ((_heap_backing! ptr_mut%<lib!types.Heap.>.) (_segments! lib!types.SegmentsTld.)) (! (=> (has_type (Poly%lib!types.SegmentsTld. _segments!) TYPE%lib!types.SegmentsTld.) (has_type (Poly%lib!types.Tld. (lib!types.Tld./Tld _heap_backing! _segments!)) TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%lib!types.Tld. (lib!types.Tld./Tld _heap_backing! _segments!)) TYPE%lib!types.Tld.)))))
(assert (forall ((x lib!types.Tld.)) (! (= (lib!types.Tld./Tld/heap_backing x) (lib!types.Tld./Tld/?heap_backing x)) :pattern ((lib!types.Tld./Tld/heap_backing x)))))
(assert (forall ((x lib!types.Tld.)) (! (= (lib!types.Tld./Tld/segments x) (lib!types.Tld./Tld/?segments x)) :pattern ((lib!types.Tld./Tld/segments x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Tld.) (has_type (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. x))) TYPE%lib!types.SegmentsTld.)) :pattern ((lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. x)) (has_type x TYPE%lib!types.Tld.)))))
(define-fun is-lib!types.Tld./Tld_ ((c lib!types.Tld.)) Bool ((_ is lib!types.Tld./Tld) c))
(assert (forall ((x lib!types.Tld.)) (! (=> (is-lib!types.Tld./Tld_ x) (height_lt (height (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments x))) (height (Poly%lib!types.Tld. x)))) :pattern ((height (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments x)))))))
(assert (forall ((x lib!types.TldPtr.)) (! (= x (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. x))) :pattern ((Poly%lib!types.TldPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.TldPtr.) (= x (Poly%lib!types.TldPtr. (%Poly%lib!types.TldPtr. x)))) :pattern ((has_type x TYPE%lib!types.TldPtr.)))))
(assert (forall ((_tld_ptr! ptr_mut%<lib!types.Tld.>.) (_tld_id! lib!tokens.TldId.)) (! (=> (has_type (Poly%lib!tokens.TldId. _tld_id!) TYPE%lib!tokens.TldId.) (has_type (Poly%lib!types.TldPtr. (lib!types.TldPtr./TldPtr _tld_ptr! _tld_id!)) TYPE%lib!types.TldPtr.)) :pattern ((has_type (Poly%lib!types.TldPtr. (lib!types.TldPtr./TldPtr _tld_ptr! _tld_id!)) TYPE%lib!types.TldPtr.)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= (lib!types.TldPtr./TldPtr/tld_ptr x) (lib!types.TldPtr./TldPtr/?tld_ptr x)) :pattern ((lib!types.TldPtr./TldPtr/tld_ptr x)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= (lib!types.TldPtr./TldPtr/tld_id x) (lib!types.TldPtr./TldPtr/?tld_id x)) :pattern ((lib!types.TldPtr./TldPtr/tld_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.TldPtr.) (has_type (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. x))) TYPE%lib!tokens.TldId.)) :pattern ((lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. x)) (has_type x TYPE%lib!types.TldPtr.)))))
(assert (forall ((x lib!linked_list.Node.)) (! (= x (%Poly%lib!linked_list.Node. (Poly%lib!linked_list.Node. x))) :pattern ((Poly%lib!linked_list.Node. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.Node.) (= x (Poly%lib!linked_list.Node. (%Poly%lib!linked_list.Node. x)))) :pattern ((has_type x TYPE%lib!linked_list.Node.)))))
(assert (forall ((x lib!linked_list.Node.)) (! (= (lib!linked_list.Node./Node/ptr x) (lib!linked_list.Node./Node/?ptr x)) :pattern ((lib!linked_list.Node./Node/ptr x)))))
(assert (forall ((x lib!linked_list.Node.)) (! (has_type (Poly%lib!linked_list.Node. x) TYPE%lib!linked_list.Node.) :pattern ((has_type (Poly%lib!linked_list.Node. x) TYPE%lib!linked_list.Node.)))))
(assert (forall ((x lib!linked_list.LLData.)) (! (= x (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. x))) :pattern ((Poly%lib!linked_list.LLData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LLData.) (= x (Poly%lib!linked_list.LLData. (%Poly%lib!linked_list.LLData. x)))) :pattern ((has_type x TYPE%lib!linked_list.LLData.)))))
(assert (forall ((_fixed_page! Bool) (_block_size! Int) (_page_id! lib!tokens.PageId.) (_heap_id! core!option.Option.) (_instance! lib!tokens.Mim.Instance.) (_len! Int)) (! (=> (and (<= 0 _block_size!) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.) (has_type (Poly%core!option.Option. _heap_id!) (TYPE%core!option.Option. $ TYPE%lib!tokens.HeapId.)) (<= 0 _len!)) (has_type (Poly%lib!linked_list.LLData. (lib!linked_list.LLData./LLData _fixed_page! _block_size! _page_id! _heap_id! _instance! _len!)) TYPE%lib!linked_list.LLData.)) :pattern ((has_type (Poly%lib!linked_list.LLData. (lib!linked_list.LLData./LLData _fixed_page! _block_size! _page_id! _heap_id! _instance! _len!)) TYPE%lib!linked_list.LLData.)))))
(assert (forall ((x lib!linked_list.LLData.)) (! (= (lib!linked_list.LLData./LLData/fixed_page x) (lib!linked_list.LLData./LLData/?fixed_page x)) :pattern ((lib!linked_list.LLData./LLData/fixed_page x)))))
(assert (forall ((x lib!linked_list.LLData.)) (! (= (lib!linked_list.LLData./LLData/block_size x) (lib!linked_list.LLData./LLData/?block_size x)) :pattern ((lib!linked_list.LLData./LLData/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LLData.) (<= 0 (lib!linked_list.LLData./LLData/block_size (%Poly%lib!linked_list.LLData. x)))) :pattern ((lib!linked_list.LLData./LLData/block_size (%Poly%lib!linked_list.LLData. x)) (has_type x TYPE%lib!linked_list.LLData.)))))
(assert (forall ((x lib!linked_list.LLData.)) (! (= (lib!linked_list.LLData./LLData/page_id x) (lib!linked_list.LLData./LLData/?page_id x)) :pattern ((lib!linked_list.LLData./LLData/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LLData.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.LLData./LLData/page_id (%Poly%lib!linked_list.LLData. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.LLData./LLData/page_id (%Poly%lib!linked_list.LLData. x)) (has_type x TYPE%lib!linked_list.LLData.)))))
(assert (forall ((x lib!linked_list.LLData.)) (! (= (lib!linked_list.LLData./LLData/heap_id x) (lib!linked_list.LLData./LLData/?heap_id x)) :pattern ((lib!linked_list.LLData./LLData/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LLData.) (has_type (Poly%core!option.Option. (lib!linked_list.LLData./LLData/heap_id (%Poly%lib!linked_list.LLData. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.HeapId.))) :pattern ((lib!linked_list.LLData./LLData/heap_id (%Poly%lib!linked_list.LLData. x)) (has_type x TYPE%lib!linked_list.LLData.)))))
(assert (forall ((x lib!linked_list.LLData.)) (! (= (lib!linked_list.LLData./LLData/instance x) (lib!linked_list.LLData./LLData/?instance x)) :pattern ((lib!linked_list.LLData./LLData/instance x)))))
(assert (forall ((x lib!linked_list.LLData.)) (! (= (lib!linked_list.LLData./LLData/len x) (lib!linked_list.LLData./LLData/?len x)) :pattern ((lib!linked_list.LLData./LLData/len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LLData.) (<= 0 (lib!linked_list.LLData./LLData/len (%Poly%lib!linked_list.LLData. x)))) :pattern ((lib!linked_list.LLData./LLData/len (%Poly%lib!linked_list.LLData. x)) (has_type x TYPE%lib!linked_list.LLData.)))))
(define-fun is-lib!linked_list.LLData./LLData_ ((c lib!linked_list.LLData.)) Bool ((_ is lib!linked_list.LLData./LLData) c))
(assert (forall ((x lib!linked_list.LLData.)) (! (=> (is-lib!linked_list.LLData./LLData_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.LLData./LLData/instance x))) (height (Poly%lib!linked_list.LLData. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.LLData./LLData/instance x)))))))
(assert (forall ((x lib!linked_list.LL.)) (! (= x (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. x))) :pattern ((Poly%lib!linked_list.LL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LL.) (= x (Poly%lib!linked_list.LL. (%Poly%lib!linked_list.LL. x)))) :pattern ((has_type x TYPE%lib!linked_list.LL.)))))
(assert (forall ((_first! ptr_mut%<lib!linked_list.Node.>.) (_data! lib!linked_list.LLData.) (_perms! vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.)) (! (=> (has_type (Poly%lib!linked_list.LLData. _data!) TYPE%lib!linked_list.LLData.) (has_type (Poly%lib!linked_list.LL. (lib!linked_list.LL./LL _first! _data! _perms!)) TYPE%lib!linked_list.LL.)) :pattern ((has_type (Poly%lib!linked_list.LL. (lib!linked_list.LL./LL _first! _data! _perms!)) TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (= (lib!linked_list.LL./LL/first x) (lib!linked_list.LL./LL/?first x)) :pattern ((lib!linked_list.LL./LL/first x)))))
(assert (forall ((x lib!linked_list.LL.)) (! (= (lib!linked_list.LL./LL/data x) (lib!linked_list.LL./LL/?data x)) :pattern ((lib!linked_list.LL./LL/data x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LL.) (has_type (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. x))) TYPE%lib!linked_list.LLData.)) :pattern ((lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. x)) (has_type x TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (= (lib!linked_list.LL./LL/perms x) (lib!linked_list.LL./LL/?perms x)) :pattern ((lib!linked_list.LL./LL/perms x)))))
(define-fun is-lib!linked_list.LL./LL_ ((c lib!linked_list.LL.)) Bool ((_ is lib!linked_list.LL./LL) c))
(assert (forall ((x lib!linked_list.LL.)) (! (=> (is-lib!linked_list.LL./LL_ x) (height_lt (height (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data x))) (height (Poly%lib!linked_list.LL. x)))) :pattern ((height (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data x)))))))
(assert (forall ((x lib!linked_list.LL.)) (! (=> (is-lib!linked_list.LL./LL_ x) (height_lt (height (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms x))) (height (Poly%lib!linked_list.LL. x)))) :pattern ((height (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms x)))))))
(assert (forall ((x lib!linked_list.LL.)) (! (=> (is-lib!linked_list.LL./LL_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms x)))) (height (Poly%lib!linked_list.LL. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms x))))))))
(assert (forall ((x lib!linked_list.LLGhostStateToReconvene.)) (! (= x (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. x))) :pattern ((Poly%lib!linked_list.LLGhostStateToReconvene. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LLGhostStateToReconvene.) (= x (Poly%lib!linked_list.LLGhostStateToReconvene. (%Poly%lib!linked_list.LLGhostStateToReconvene. x)))) :pattern ((has_type x TYPE%lib!linked_list.LLGhostStateToReconvene.)))))
(assert (forall ((_block_size! Int) (_page_id! lib!tokens.PageId.) (_instance! lib!tokens.Mim.Instance.) (_map! vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)) (! (=> (and (<= 0 _block_size!) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!linked_list.LLGhostStateToReconvene. (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene _block_size! _page_id! _instance! _map!)) TYPE%lib!linked_list.LLGhostStateToReconvene.)) :pattern ((has_type (Poly%lib!linked_list.LLGhostStateToReconvene. (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene _block_size! _page_id! _instance! _map!)) TYPE%lib!linked_list.LLGhostStateToReconvene.)))))
(assert (forall ((x lib!linked_list.LLGhostStateToReconvene.)) (! (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size x) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/?block_size x)) :pattern ((lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LLGhostStateToReconvene.) (<= 0 (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (%Poly%lib!linked_list.LLGhostStateToReconvene. x)))) :pattern ((lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (%Poly%lib!linked_list.LLGhostStateToReconvene. x)) (has_type x TYPE%lib!linked_list.LLGhostStateToReconvene.)))))
(assert (forall ((x lib!linked_list.LLGhostStateToReconvene.)) (! (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id x) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/?page_id x)) :pattern ((lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LLGhostStateToReconvene.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (%Poly%lib!linked_list.LLGhostStateToReconvene. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (%Poly%lib!linked_list.LLGhostStateToReconvene. x)) (has_type x TYPE%lib!linked_list.LLGhostStateToReconvene.)))))
(assert (forall ((x lib!linked_list.LLGhostStateToReconvene.)) (! (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance x) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/?instance x)) :pattern ((lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance x)))))
(assert (forall ((x lib!linked_list.LLGhostStateToReconvene.)) (! (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map x) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/?map x)) :pattern ((lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map x)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= x (%Poly%lib!linked_list.ThreadLLSimple. (Poly%lib!linked_list.ThreadLLSimple. x))) :pattern ((Poly%lib!linked_list.ThreadLLSimple. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (= x (Poly%lib!linked_list.ThreadLLSimple. (%Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_heap_id! lib!tokens.HeapId.) (_atomic! vstd!atomic_ghost.AtomicPtr.)) (! (=> (and (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) (has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple./ThreadLLSimple _instance! _heap_id! _atomic!)) TYPE%lib!linked_list.ThreadLLSimple.)) :pattern ((has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple./ThreadLLSimple _instance! _heap_id! _atomic!)) TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?instance x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?heap_id x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!tokens.HeapId. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?atomic x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(define-fun is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ ((c lib!linked_list.ThreadLLSimple.)) Bool ((_ is lib!linked_list.ThreadLLSimple./ThreadLLSimple) c))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (=> (is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x))) (height (Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x)))))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (=> (is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x))) (height (Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x)))))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (! (= x (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x))) :pattern ((Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) (= x (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x)))) :pattern ((has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (! (has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) :pattern ((has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= x (%Poly%lib!linked_list.BlockSizePageId. (Poly%lib!linked_list.BlockSizePageId. x))) :pattern ((Poly%lib!linked_list.BlockSizePageId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (= x (Poly%lib!linked_list.BlockSizePageId. (%Poly%lib!linked_list.BlockSizePageId. x)))) :pattern ((has_type x TYPE%lib!linked_list.BlockSizePageId.)))))
(assert (forall ((_block_size! Int) (_page_id! lib!tokens.PageId.)) (! (=> (and (<= 0 _block_size!) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId./BlockSizePageId _block_size! _page_id!)) TYPE%lib!linked_list.BlockSizePageId.)) :pattern ((has_type (Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId./BlockSizePageId _block_size! _page_id!)) TYPE%lib!linked_list.BlockSizePageId.)))))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size x) (lib!linked_list.BlockSizePageId./BlockSizePageId/?block_size x)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (<= 0 (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. x)))) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. x)) (has_type x TYPE%lib!linked_list.BlockSizePageId.)))))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id x) (lib!linked_list.BlockSizePageId./BlockSizePageId/?page_id x)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. x)) (has_type x TYPE%lib!linked_list.BlockSizePageId.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= x (%Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly%lib!linked_list.ThreadLLWithDelayBits. x))) :pattern ((Poly%lib!linked_list.ThreadLLWithDelayBits. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (= x (Poly%lib!linked_list.ThreadLLWithDelayBits. (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_atomic! vstd!atomic_ghost.AtomicPtr.) (_emp! lib!linked_list.StuffAgree.x.) (_emp_inst! lib!linked_list.StuffAgree.Instance.)) (! (=> (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits _instance! _atomic! _emp! _emp_inst!)) TYPE%lib!linked_list.ThreadLLWithDelayBits.)) :pattern ((has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits _instance! _atomic! _emp! _emp_inst!)) TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?instance x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?atomic x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)) (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp x)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp_inst x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst x)))))
(define-fun is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ ((c lib!linked_list.ThreadLLWithDelayBits.)) Bool ((_ is lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits) c))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (=> (is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x))) (height (Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x)))))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (=> (is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x))) (height (Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x)))))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (! (= x (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x))) :pattern ((Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) (= x (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x)))) :pattern ((has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (! (has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) :pattern ((has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!invariant.InvariantPredicate. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%core!marker.Freeze. (Dcr Type) Bool)
(declare-fun tr_bound%core!fmt.Debug. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.Eq. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.Ord. (Dcr Type) Bool)
(declare-fun tr_bound%core!hash.Hash. (Dcr Type) Bool)
(declare-fun tr_bound%core!ptr.metadata.Pointee. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (G&. Dcr) (G& Type)) (! true :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Self%&. Self%& K&. K& V&. V& G&. G&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! true :pattern ((tr_bound%vstd!invariant.InvariantPredicate. Self%&. Self%& K&. K& V&. V&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!marker.Freeze. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!fmt.Debug. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!cmp.Eq. Self%&. Self%&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Self%&. Self%&)) :pattern ((tr_bound%core!cmp.Eq. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) :pattern ((tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!cmp.Ord. Self%&. Self%&) (and (tr_bound%core!cmp.Eq. Self%&. Self%&) (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Self%&. Self%&))) :pattern ((tr_bound%core!cmp.Ord. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!hash.Hash. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!ptr.metadata.Pointee. Self%&. Self%&) (and (tr_bound%core!marker.Freeze. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!fmt.Debug. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!hash.Hash. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!cmp.Ord. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!cmp.PartialOrd. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!cmp.PartialEq. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!cmp.Eq. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!clone.Clone. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)))) :pattern ((tr_bound%core!ptr.metadata.Pointee. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! true :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. Self%&. Self%& T&. T& E&. E&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 16)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 16)) (UINT 16)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (= (proj%%vstd!view.View./V $ (SINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 64)) (SINT 64)))
(assert (= (proj%%vstd!view.View./V $ (SINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (SINT SZ)) (SINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) (TYPE%tuple%1. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::is_ok")
(declare-fun vstd!std_specs.result.is_ok.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_specs::spec_addr")
(declare-fun vstd!raw_ptr.ptr_mut_specs.spec_addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_from_data")
(declare-fun vstd!raw_ptr.ptr_mut_from_data.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_specs::spec_with_addr")
(declare-fun vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%8::view")
(declare-fun vstd!atomic.impl&%8.view.? (Poly) vstd!atomic.PermissionDataU64.)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%22::view")
(declare-fun vstd!atomic.impl&%22.view.? (Dcr Type Poly) vstd!atomic.PermissionDataPtr.)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%23::id")
(declare-fun vstd!atomic.impl&%23.id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::AtomicInvariantPredicate::atomic_inv")
(declare-fun vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::InvariantPredicate::inv")
(declare-fun vstd!invariant.InvariantPredicate.inv.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!invariant.InvariantPredicate.inv%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::impl&%0::constant")
(declare-fun vstd!invariant.impl&%0.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%23::well_formed")
(declare-fun vstd!atomic_ghost.impl&%23.well_formed.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%23::constant")
(declare-fun vstd!atomic_ghost.impl&%23.constant.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::AtomicInvariant::namespace")
(declare-fun vstd!invariant.AtomicInvariant.namespace.? (Dcr Type Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::layout::is_sized")
(declare-fun vstd!layout.is_sized.? (Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::layout::align_of")
(declare-fun vstd!layout.align_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::layout::is_power_2")
(declare-fun vstd!layout.is_power_2.? (Poly) Bool)
(declare-fun vstd!layout.rec%is_power_2.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl vstd::layout::valid_layout")
(declare-fun vstd!layout.valid_layout.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::remove_keys")
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%0::null")
(declare-fun vstd!raw_ptr.impl&%0.null.? (Poly) vstd!raw_ptr.Provenance.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::ptr")
(declare-fun vstd!raw_ptr.impl&%6.ptr.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_uninit")
(declare-fun vstd!raw_ptr.impl&%7.is_uninit.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::opt_value")
(declare-fun vstd!raw_ptr.impl&%6.opt_value.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::is_uninit")
(declare-fun vstd!raw_ptr.impl&%6.is_uninit.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_null_mut")
(declare-fun vstd!raw_ptr.ptr_null_mut.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::spec_cast_ptr_to_thin_ptr")
(declare-fun vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::spec_cast_ptr_to_usize")
(declare-fun vstd!raw_ptr.spec_cast_ptr_to_usize.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::is_init")
(declare-fun vstd!raw_ptr.impl&%6.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%2::arrow_0")
(declare-fun vstd!raw_ptr.impl&%2.arrow_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::value")
(declare-fun vstd!raw_ptr.impl&%7.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::value")
(declare-fun vstd!raw_ptr.impl&%6.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%10::provenance")
(declare-fun vstd!raw_ptr.impl&%10.provenance.? (Poly) vstd!raw_ptr.Provenance.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%10::view")
(declare-fun vstd!raw_ptr.impl&%10.view.? (Poly) vstd!raw_ptr.Provenance.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%11::provenance")
(declare-fun vstd!raw_ptr.impl&%11.provenance.? (Poly) vstd!raw_ptr.Provenance.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%11::dom")
(declare-fun vstd!raw_ptr.impl&%11.dom.? (Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::set_int_range")
(declare-fun vstd!set_lib.set_int_range.? (Poly Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%11::is_range")
(declare-fun vstd!raw_ptr.impl&%11.is_range.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::is_heap_ptr")
(declare-fun lib!layout.is_heap_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::LL::next_ptr")
(declare-fun lib!linked_list.impl&%2.next_ptr.? (Poly Poly) ptr_mut%<lib!linked_list.Node.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::block::view")
(declare-fun lib!tokens.Mim.impl&%10.view.? (Poly) lib!tokens.Mim.block_token_data.)
(set-info :comment ";; Function-Decl lib::layout::segment_start")
(declare-fun lib!layout.segment_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::config::SLICE_SIZE")
(declare-fun lib!config.SLICE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::layout::page_start")
(declare-fun lib!layout.page_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::config::INTPTR_SIZE")
(declare-fun lib!config.INTPTR_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::layout::start_offset")
(declare-fun lib!layout.start_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::block_start_at")
(declare-fun lib!layout.block_start_at.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::block_start")
(declare-fun lib!layout.block_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::is_block_ptr1")
(declare-fun lib!layout.is_block_ptr1.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_block_ptr")
(declare-fun lib!layout.is_block_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::LL::valid_node")
(declare-fun lib!linked_list.impl&%2.valid_node.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::LL::wf")
(declare-fun lib!linked_list.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::LL::instance")
(declare-fun lib!linked_list.impl&%2.instance.? (Poly) lib!tokens.Mim.Instance.)
(set-info :comment ";; Function-Decl lib::linked_list::LL::fixed_page")
(declare-fun lib!linked_list.impl&%2.fixed_page.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::LL::heap_id")
(declare-fun lib!linked_list.impl&%2.heap_id.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::linked_list::LL::ptr")
(declare-fun lib!linked_list.impl&%2.ptr.? (Poly) ptr_mut%<lib!linked_list.Node.>.)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLSimple::wf")
(declare-fun lib!linked_list.impl&%4.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::len")
(declare-fun vstd!map.impl&%0.len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_local_state::view")
(declare-fun lib!tokens.Mim.impl&%8.view.? (Poly) lib!tokens.Mim.thread_local_state_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_of_segment::view")
(declare-fun lib!tokens.Mim.impl&%11.view.? (Poly) lib!tokens.Mim.thread_of_segment_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::delay::view")
(declare-fun lib!tokens.Mim.impl&%12.view.? (Poly) lib!tokens.Mim.delay_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::heap_of_page::view")
(declare-fun lib!tokens.Mim.impl&%13.view.? (Poly) lib!tokens.Mim.heap_of_page_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_checked_state::view")
(declare-fun lib!tokens.Mim.impl&%17.view.? (Poly) lib!tokens.Mim.thread_checked_state_token_data.)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_le")
(declare-fun vstd!set.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::BoolAgree::y::view")
(declare-fun lib!types.BoolAgree.impl&%5.view.? (Poly) lib!types.BoolAgree.y_token_data.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::x::view")
(declare-fun lib!linked_list.StuffAgree.impl&%4.view.? (Poly) lib!linked_list.StuffAgree.x_token_data.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::y::view")
(declare-fun lib!linked_list.StuffAgree.impl&%5.view.? (Poly) lib!linked_list.StuffAgree.y_token_data.)
(set-info :comment ";; Function-Decl vstd::invariant::AtomicInvariant::inv")
(declare-fun vstd!invariant.AtomicInvariant.inv.? (Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::check_argument_is_map")
(declare-fun vstd!map.check_argument_is_map.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%11::contains_range")
(declare-fun vstd!raw_ptr.impl&%11.contains_range.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::DelayState::to_int")
(declare-fun lib!tokens.impl&%2.to_int.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::linked_list::LL::page_id")
(declare-fun lib!linked_list.impl&%2.page_id.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::linked_list::LL::block_size")
(declare-fun lib!linked_list.impl&%2.block_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::linked_list::LL::len")
(declare-fun lib!linked_list.impl&%2.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLWithDelayBits::wf")
(declare-fun lib!linked_list.impl&%7.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLWithDelayBits::is_empty")
(declare-fun lib!linked_list.impl&%8.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLWithDelayBits::page_id")
(declare-fun lib!linked_list.impl&%8.page_id.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLWithDelayBits::block_size")
(declare-fun lib!linked_list.impl&%8.block_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::linked_list::has_idx")
(declare-fun lib!linked_list.has_idx.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::set_nat_range")
(declare-fun lib!linked_list.set_nat_range.? (Poly Poly) vstd!set.Set<nat.>.)
(set-info :comment ";; Function-Decl lib::linked_list::llgstr_wf")
(declare-fun lib!linked_list.llgstr_wf.? (Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Specs core::clone::Clone::clone")
(declare-fun ens%core!clone.Clone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (%return! Poly)) (! (= (ens%core!clone.Clone.clone. Self%&. Self%& self! %return!) (has_type %return! Self%&)) :pattern ((ens%core!clone.Clone.clone. Self%&. Self%& self! %return!)))))
(assert (forall ((tmp%%$ Poly) (Self%&. Dcr) (Self%& Type)) (! (=> (has_type tmp%%$ (TYPE%tuple%1. (REF Self%&.) Self%&)) (=> (let ((self$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) true) (closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$))) :pattern ((closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%6::clone")
(declare-fun ens%core!clone.impls.impl&%6.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%6.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 8) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%6.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 8))) (has_type res$ (UINT 8))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 8)) $ (TYPE%tuple%1. (REF $) (UINT 8)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 8)) $ (TYPE%tuple%1. (REF $) (UINT 8)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%7::clone")
(declare-fun ens%core!clone.impls.impl&%7.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%7.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 16) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%7.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 16))) (has_type res$ (UINT 16))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 16)) $ (TYPE%tuple%1. (REF $) (UINT 16)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 16)) $ (TYPE%tuple%1. (REF $) (UINT 16)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%8::clone")
(declare-fun ens%core!clone.impls.impl&%8.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%8.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 32) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%8.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 32))) (has_type res$ (UINT 32))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 32)) $ (TYPE%tuple%1. (REF $) (UINT 32)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 32)) $ (TYPE%tuple%1. (REF $) (UINT 32)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%14::clone")
(declare-fun ens%core!clone.impls.impl&%14.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%14.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (SINT 32) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%14.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (SINT 32))) (has_type res$ (SINT 32))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT 32)) $ (TYPE%tuple%1. (REF $) (SINT 32)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT 32)) $ (TYPE%tuple%1. (REF $) (SINT 32)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%9::clone")
(declare-fun ens%core!clone.impls.impl&%9.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%9.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 64) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%9.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 64))) (has_type res$ (UINT 64))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%15::clone")
(declare-fun ens%core!clone.impls.impl&%15.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%15.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (SINT 64) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%15.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (SINT 64))) (has_type res$ (SINT 64))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT 64)) $ (TYPE%tuple%1. (REF $) (SINT 64)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT 64)) $ (TYPE%tuple%1. (REF $) (SINT 64)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%5::clone")
(declare-fun ens%core!clone.impls.impl&%5.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%5.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT SZ) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%5.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT SZ))) (has_type res$ (UINT SZ))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%11::clone")
(declare-fun ens%core!clone.impls.impl&%11.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%11.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (SINT SZ) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%11.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (SINT SZ))) (has_type res$ (SINT SZ))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT SZ)) $ (TYPE%tuple%1. (REF $) (SINT SZ)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT SZ)) $ (TYPE%tuple%1. (REF $) (SINT SZ)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%21::clone")
(declare-fun ens%core!clone.impls.impl&%21.clone. (Poly Poly) Bool)
(assert (forall ((b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%21.clone. b! res!) (and (ens%core!clone.Clone.clone. $ BOOL b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%21.clone. b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) BOOL)) (has_type res$ BOOL)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$) (let ((b$ (%B (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%B res$) b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%3::clone")
(declare-fun ens%core!clone.impls.impl&%3.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%3.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (REF T&.) T& b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%3.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (REF T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs builtin::impl&%4::clone")
(declare-fun ens%builtin!impl&%4.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%4.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (TRACKED T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%4.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (TRACKED T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs builtin::impl&%2::clone")
(declare-fun ens%builtin!impl&%2.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%2.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (GHOST T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%2.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (GHOST T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::mem::swap")
(declare-fun ens%core!mem.swap. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%a! Poly) (a! Poly) (pre%b! Poly) (b! Poly)) (! (= (ens%core!mem.swap. T&. T& pre%a! a! pre%b! b!) (and (has_type a! T&) (has_type b! T&) (= a! pre%b!) (= b! pre%a!))) :pattern ((ens%core!mem.swap. T&. T& pre%a! a! pre%b! b!)))))
(set-info :comment ";; Function-Specs core::intrinsics::unlikely")
(declare-fun ens%core!intrinsics.unlikely. (Bool Bool) Bool)
(assert (forall ((b! Bool) (c! Bool)) (! (= (ens%core!intrinsics.unlikely. b! c!) (= c! b!)) :pattern ((ens%core!intrinsics.unlikely. b! c!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::OptionAdditionalFns::tracked_unwrap")
(declare-fun req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (= (req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self!) (=> %%global_location_label%%1 (%B (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))) :pattern ((req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self!)))))
(declare-fun ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (t! Poly)) (! (= (ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self! t!) (and (has_type t! T&) (= t! (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))) :pattern ((ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self! t!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::OptionAdditionalFns::tracked_borrow")
(declare-fun req%vstd!std_specs.option.OptionAdditionalFns.tracked_borrow. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (= (req%vstd!std_specs.option.OptionAdditionalFns.tracked_borrow. Self%&. Self%& T&. T& self!) (=> %%global_location_label%%2 (%B (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))) :pattern ((req%vstd!std_specs.option.OptionAdditionalFns.tracked_borrow. Self%&. Self%& T&. T& self!)))))
(declare-fun ens%vstd!std_specs.option.OptionAdditionalFns.tracked_borrow. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (t! Poly)) (! (= (ens%vstd!std_specs.option.OptionAdditionalFns.tracked_borrow. Self%&. Self%& T&. T& self! t!) (and (has_type t! T&) (= t! (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))) :pattern ((ens%vstd!std_specs.option.OptionAdditionalFns.tracked_borrow. Self%&. Self%& T&. T& self! t!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%3 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Specs core::option::impl&%5::clone")
(declare-fun ens%core!option.impl&%5.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (opt! Poly) (res! Poly)) (! (= (ens%core!option.impl&%5.clone. T&. T& opt! res!) (and (ens%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&) opt! res!) (=> (is-core!option.Option./None_ (%Poly%core!option.Option. opt!)) (is-core!option.Option./None_ (%Poly%core!option.Option. res!))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. opt!)) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. res!)) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (core!option.Option./Some/0 (%Poly%core!option.Option. opt!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. res!))))))) :pattern ((ens%core!option.impl&%5.clone. T&. T& opt! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&))) (has_type res$ (TYPE%core!option.Option. T&. T&))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&)) $ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&)) (F fndef_singleton) tmp%%$ res$) (let ((opt$ (%Poly%core!option.Option. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (and (=> (is-core!option.Option./None_ opt$) (is-core!option.Option./None_ (%Poly%core!option.Option. res$))) (=> (is-core!option.Option./Some_ opt$) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. res$)) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. opt$))))) (core!option.Option./Some/0 (%Poly%core!option.Option. res$))))))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&)) $ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::is_ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.is_ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.is_ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! Poly)) (! (= (vstd!std_specs.result.is_ok.? T&. T& E&. E& result!) (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!))) :pattern ((vstd!std_specs.result.is_ok.? T&. T& E&. E& result!))))))
(set-info :comment ";; Function-Specs core::result::impl&%0::is_ok")
(declare-fun ens%core!result.impl&%0.is_ok. (Dcr Type Dcr Type core!result.Result. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (b! Bool)) (! (= (ens%core!result.impl&%0.is_ok. T&. T& E&. E& result! b!) (= b! (is-core!result.Result./Ok_ result!))) :pattern ((ens%core!result.impl&%0.is_ok. T&. T& E&. E& result! b!)))))
(set-info :comment ";; Function-Specs alloc::boxed::impl&%12::clone")
(declare-fun ens%alloc!boxed.impl&%12.clone. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (b! Poly) (res! Poly)) (! (= (ens%alloc!boxed.impl&%12.clone. T&. T& A&. A& b! res!) (and (ens%core!clone.Clone.clone. (BOX A&. A& T&.) T& b! res!) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 b!)) res!))) :pattern ((ens%alloc!boxed.impl&%12.clone. T&. T& A&. A& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (BOX A&. A& T&.) T&) $ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 b$)) res$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (BOX A&. A& T&.) T&) $ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_specs::spec_addr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.) (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (= (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))))))
(assert (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (=> (has_type p! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!)))))
(set-info :comment ";; Function-Specs core::ptr::mut_ptr::impl&%0::addr")
(declare-fun ens%core!ptr.mut_ptr.impl&%0.addr. (Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Int)) (! (= (ens%core!ptr.mut_ptr.impl&%0.addr. T&. T& p! addr!) (and (uInv SZ addr!) (= addr! (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))))) :pattern ((ens%core!ptr.mut_ptr.impl&%0.addr. T&. T& p! addr!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_from_data")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_specs::spec_with_addr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr.) (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Poly)) (! (= (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& (Poly%vstd!raw_ptr.PtrData. (let ((tmp%%$ (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))) (vstd!raw_ptr.PtrData./PtrData (%I addr!) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. tmp%%$))))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. tmp%%$)))))))))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!))))))
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Poly)) (! (=> (and (has_type p! (PTR T&. T&)) (has_type addr! (UINT SZ))) (has_type (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!)))))
(set-info :comment ";; Function-Specs core::ptr::mut_ptr::impl&%0::with_addr")
(declare-fun ens%core!ptr.mut_ptr.impl&%0.with_addr. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Int) (q! Poly)) (! (= (ens%core!ptr.mut_ptr.impl&%0.with_addr. T&. T& p! addr! q!) (and (has_type q! (PTR T&. T&)) (= q! (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! (I addr!))))) :pattern ((ens%core!ptr.mut_ptr.impl&%0.with_addr. T&. T& p! addr! q!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::atomic::impl&%8::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%vstd!atomic.PermissionU64.) (has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? self!)) TYPE%vstd!atomic.PermissionDataU64.)) :pattern ((vstd!atomic.impl&%8.view.? self!)))))
(set-info :comment ";; Function-Axioms vstd::atomic::impl&%22::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic.PermissionPtr. T&. T&)) (has_type (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& self!)) (TYPE%vstd!atomic.PermissionDataPtr. T&. T&))) :pattern ((vstd!atomic.impl&%22.view.? T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%23::load")
(declare-fun req%vstd!atomic.impl&%23.load. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (perm! Poly)) (! (= (req%vstd!atomic.impl&%23.load. T&. T& self! perm!) (=> %%global_location_label%%6 (= (vstd!atomic.impl&%23.id.? T&. T& self!) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!))))))) :pattern ((req%vstd!atomic.impl&%23.load. T&. T& self! perm!)))))
(declare-fun ens%vstd!atomic.impl&%23.load. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (perm! Poly) (ret! Poly)) (! (= (ens%vstd!atomic.impl&%23.load. T&. T& self! perm! ret!) (and (has_type ret! (PTR T&. T&)) (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!)))) ret!))) :pattern ((ens%vstd!atomic.impl&%23.load. T&. T& self! perm! ret!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%23::compare_exchange_weak")
(declare-fun req%vstd!atomic.impl&%23.compare_exchange_weak. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (pre%perm! Poly) (current! Poly) (new! Poly)) (! (= (req%vstd!atomic.impl&%23.compare_exchange_weak. T&. T& self! pre%perm! current! new!) (=> %%global_location_label%%7 (= (vstd!atomic.impl&%23.id.? T&. T& self!) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!))))))) :pattern ((req%vstd!atomic.impl&%23.compare_exchange_weak. T&. T& self! pre%perm! current! new!)))))
(declare-fun ens%vstd!atomic.impl&%23.compare_exchange_weak. (Dcr Type Poly Poly Poly Poly Poly core!result.Result.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (current! Poly) (new! Poly) (ret! core!result.Result.)) (! (= (ens%vstd!atomic.impl&%23.compare_exchange_weak. T&. T& self! pre%perm! perm! current! new! ret!) (and (has_type (Poly%core!result.Result. ret!) (TYPE%core!result.Result. $ (PTR T&. T&) $ (PTR T&. T&))) (has_type perm! (TYPE%vstd!atomic.PermissionPtr. T&. T&)) (and (= (vstd!atomic.impl&%23.id.? T&. T& self!) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!))))) (ite (is-core!result.Result./Ok_ ret!) (let ((r$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. ret!))))) (and (and (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) current!))) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!)))))))) (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!)))) new!)) (= r$ (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!))))))) (let ((r$ (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. ret!))))) (and (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!)))) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!))))) (= r$ (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!))))))))))) :pattern ((ens%vstd!atomic.impl&%23.compare_exchange_weak. T&. T& self! pre%perm! perm! current! new! ret!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%23::swap")
(declare-fun req%vstd!atomic.impl&%23.swap. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (pre%perm! Poly) (v! Poly)) (! (= (req%vstd!atomic.impl&%23.swap. T&. T& self! pre%perm! v!) (=> %%global_location_label%%8 (= (vstd!atomic.impl&%23.id.? T&. T& self!) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!))))))) :pattern ((req%vstd!atomic.impl&%23.swap. T&. T& self! pre%perm! v!)))))
(declare-fun ens%vstd!atomic.impl&%23.swap. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly) (ret! Poly)) (! (= (ens%vstd!atomic.impl&%23.swap. T&. T& self! pre%perm! perm! v! ret!) (and (has_type ret! (PTR T&. T&)) (has_type perm! (TYPE%vstd!atomic.PermissionPtr. T&. T&)) (and (and (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!)))) v!) (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!)))) ret!)) (= (vstd!atomic.impl&%23.id.? T&. T& self!) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!)))))))) :pattern ((ens%vstd!atomic.impl&%23.swap. T&. T& self! pre%perm! perm! v! ret!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%24::fetch_and")
(declare-fun req%vstd!atomic.impl&%24.fetch_and. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (pre%perm! Poly) (n! Int)) (! (= (req%vstd!atomic.impl&%24.fetch_and. T&. T& self! pre%perm! n!) (=> %%global_location_label%%9 (= (vstd!atomic.impl&%23.id.? T&. T& self!) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!))))))) :pattern ((req%vstd!atomic.impl&%24.fetch_and. T&. T& self! pre%perm! n!)))))
(declare-fun ens%vstd!atomic.impl&%24.fetch_and. (Dcr Type Poly Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (n! Int) (ret! Poly)) (! (= (ens%vstd!atomic.impl&%24.fetch_and. T&. T& self! pre%perm! perm! n! ret!) (and (has_type ret! (PTR T&. T&)) (has_type perm! (TYPE%vstd!atomic.PermissionPtr. T&. T&)) (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!)))) ret!) (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!)))) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!))))) (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!))))))) (uClip SZ (bitand (I (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!)))))))) (I n!)))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!))))))) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!)))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm!))))))) (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& pre%perm!)))))))))) :pattern ((ens%vstd!atomic.impl&%24.fetch_and. T&. T& self! pre%perm! perm! n! ret!)))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::AtomicInvariantPredicate::atomic_inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (G&. Dcr) (G& Type) (k! Poly) (v! Poly) (g! Poly)) (! (=> (and (has_type k! K&) (has_type v! V&) (has_type g! G&)) (has_type (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Self%&. Self%& K&. K& V&. V& G&. G& k! v! g!) BOOL)) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Self%&. Self%& K&. K& V&. V& G&. G& k! v! g!)))))
(set-info :comment ";; Function-Axioms vstd::invariant::InvariantPredicate::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (k! Poly) (v! Poly)) (! (=> (and (has_type k! K&) (has_type v! V&)) (has_type (vstd!invariant.InvariantPredicate.inv.? Self%&. Self%& K&. K& V&. V& k! v!) BOOL)) :pattern ((vstd!invariant.InvariantPredicate.inv.? Self%&. Self%& K&. K& V&. V& k! v!)))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%0::inv")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%0.inv.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%0.inv.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k_loc! Poly) (perm_g! Poly)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (UINT 64) G&. G&) (= (vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) k_loc! perm_g!) (B (let ((k$ (tuple%2./tuple%2/0 (%Poly%tuple%2. k_loc!)))) (let ((loc$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k_loc!))))) (let ((perm$ (%Poly%vstd!atomic.PermissionU64. (tuple%2./tuple%2/0 (%Poly%tuple%2. perm_g!))))) (let ((g$ (tuple%2./tuple%2/1 (%Poly%tuple%2. perm_g!)))) (and (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm$))))) loc$) (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (UINT 64) G&. G& k$ (I (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm$)))))) g$)))))))))) :pattern ((vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) k_loc! perm_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (UINT 64) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))))))
(set-info :comment ";; Function-Axioms vstd::invariant::impl&%0::constant")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!invariant.AtomicInvariant. K&. K& V&. V& Pred&. Pred&)) (has_type (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) K&)) :pattern ((vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%22::inv")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%22.inv.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%22.inv.) (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k_loc! Poly) (perm_g! Poly)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (PTR T&. T&) G&. G&) (= (vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) k_loc! perm_g!) (B (let ((k$ (tuple%2./tuple%2/0 (%Poly%tuple%2. k_loc!)))) (let ((loc$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k_loc!))))) (let ((perm$ (tuple%2./tuple%2/0 (%Poly%tuple%2. perm_g!)))) (let ((g$ (tuple%2./tuple%2/1 (%Poly%tuple%2. perm_g!)))) (and (= (vstd!atomic.PermissionDataPtr./PermissionDataPtr/patomic (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm$)))) loc$) (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (PTR T&. T&) G&. G& k$ (vstd!atomic.PermissionDataPtr./PermissionDataPtr/value (%Poly%vstd!atomic.PermissionDataPtr. (Poly%vstd!atomic.PermissionDataPtr. (vstd!atomic.impl&%22.view.? T&. T& perm$)))) g$)))))))))) :pattern ((vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) k_loc! perm_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (PTR T&. T&) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%23::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%23.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%23.well_formed.) (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%23.well_formed.? T&. T& K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. self!)))))) (vstd!atomic.impl&%23.id.? T&. T& (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. self!))))) :pattern ((vstd!atomic_ghost.impl&%23.well_formed.? T&. T& K&. K& G&. G& Pred&. Pred& self!))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%23::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%23.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%23.constant.) (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. self!)))))) :pattern ((vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Specs vstd::atomic_ghost::impl&%23::new")
(declare-fun req%vstd!atomic_ghost.impl&%23.new. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Poly) (g! Poly)) (! (= (req%vstd!atomic_ghost.impl&%23.new. T&. T& K&. K& G&. G& Pred&. Pred& k! u! g!) (=> %%global_location_label%%10 (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (PTR T&. T&) G&. G& k! u! g!)))) :pattern ((req%vstd!atomic_ghost.impl&%23.new. T&. T& K&. K& G&. G& Pred&. Pred& k! u! g!)))))
(declare-fun ens%vstd!atomic_ghost.impl&%23.new. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly vstd!atomic_ghost.AtomicPtr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Poly) (g! Poly) (t! vstd!atomic_ghost.AtomicPtr.)) (! (= (ens%vstd!atomic_ghost.impl&%23.new. T&. T& K&. K& G&. G& Pred&. Pred& k! u! g! t!) (and (has_type (Poly%vstd!atomic_ghost.AtomicPtr. t!) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (and (vstd!atomic_ghost.impl&%23.well_formed.? T&. T& K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicPtr. t!)) (= (vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicPtr. t!)) k!)))) :pattern ((ens%vstd!atomic_ghost.impl&%23.new. T&. T& K&. K& G&. G& Pred&. Pred& k! u! g! t!)))))
(set-info :comment ";; Function-Specs vstd::atomic_ghost::impl&%23::load")
(declare-fun req%vstd!atomic_ghost.impl&%23.load. (Dcr Type Dcr Type Dcr Type Dcr Type vstd!atomic_ghost.AtomicPtr.) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! vstd!atomic_ghost.AtomicPtr.)) (! (= (req%vstd!atomic_ghost.impl&%23.load. T&. T& K&. K& G&. G& Pred&. Pred& self!) (=> %%global_location_label%%11 (vstd!atomic_ghost.impl&%23.well_formed.? T&. T& K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicPtr. self!)))) :pattern ((req%vstd!atomic_ghost.impl&%23.load. T&. T& K&. K& G&. G& Pred&. Pred& self!)))))
(declare-fun ens%vstd!atomic_ghost.impl&%23.load. (Dcr Type Dcr Type Dcr Type Dcr Type vstd!atomic_ghost.AtomicPtr. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! vstd!atomic_ghost.AtomicPtr.) (%return! Poly)) (! (= (ens%vstd!atomic_ghost.impl&%23.load. T&. T& K&. K& G&. G& Pred&. Pred& self! %return!) (has_type %return! (PTR T&. T&))) :pattern ((ens%vstd!atomic_ghost.impl&%23.load. T&. T& K&. K& G&. G& Pred&. Pred& self! %return!)))))
(set-info :comment ";; Function-Specs vstd::atomic_ghost::impl&%23::into_inner")
(declare-fun req%vstd!atomic_ghost.impl&%23.into_inner. (Dcr Type Dcr Type Dcr Type Dcr Type vstd!atomic_ghost.AtomicPtr.) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! vstd!atomic_ghost.AtomicPtr.)) (! (= (req%vstd!atomic_ghost.impl&%23.into_inner. T&. T& K&. K& G&. G& Pred&. Pred& self!) (=> %%global_location_label%%12 (vstd!atomic_ghost.impl&%23.well_formed.? T&. T& K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicPtr. self!)))) :pattern ((req%vstd!atomic_ghost.impl&%23.into_inner. T&. T& K&. K& G&. G& Pred&. Pred& self!)))))
(declare-fun ens%vstd!atomic_ghost.impl&%23.into_inner. (Dcr Type Dcr Type Dcr Type Dcr Type vstd!atomic_ghost.AtomicPtr. tuple%2.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! vstd!atomic_ghost.AtomicPtr.) (res! tuple%2.)) (! (= (ens%vstd!atomic_ghost.impl&%23.into_inner. T&. T& K&. K& G&. G& Pred&. Pred& self! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ (PTR T&. T&) (TRACKED G&.) G&)) (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (PTR T&. T&) G&. G& (vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicPtr. self!)) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))))))) :pattern ((ens%vstd!atomic_ghost.impl&%23.into_inner. T&. T& K&. K& G&. G& Pred&. Pred& self! res!)))))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::layout::align_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.align_of.? V&. V&)) :pattern ((vstd!layout.align_of.? V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::layout::is_power_2")
(assert (fuel_bool_default fuel%vstd!layout.is_power_2.))
(declare-const fuel_nat%vstd!layout.is_power_2. Fuel)
(assert (forall ((n! Poly) (fuel% Fuel)) (! (= (vstd!layout.rec%is_power_2.? n! fuel%) (vstd!layout.rec%is_power_2.? n! zero)) :pattern ((vstd!layout.rec%is_power_2.? n! fuel%)))))
(assert (forall ((n! Poly) (fuel% Fuel)) (! (=> (has_type n! INT) (= (vstd!layout.rec%is_power_2.? n! (succ fuel%)) (and (not (<= (%I n!) 0)) (=> (not (= (%I n!) 1)) (and (= (EucMod (%I n!) 2) 0) (vstd!layout.rec%is_power_2.? (I (EucDiv (%I n!) 2)) fuel%)))))) :pattern ((vstd!layout.rec%is_power_2.? n! (succ fuel%))))))
(assert (=> (fuel_bool fuel%vstd!layout.is_power_2.) (forall ((n! Poly)) (! (=> (has_type n! INT) (= (vstd!layout.is_power_2.? n!) (vstd!layout.rec%is_power_2.? n! (succ fuel_nat%vstd!layout.is_power_2.)))) :pattern ((vstd!layout.is_power_2.? n!))))))
(set-info :comment ";; Function-Axioms vstd::layout::valid_layout")
(assert (fuel_bool_default fuel%vstd!layout.valid_layout.))
(assert (=> (fuel_bool fuel%vstd!layout.valid_layout.) (forall ((size! Poly) (align! Poly)) (! (= (vstd!layout.valid_layout.? size! align!) (and (vstd!layout.is_power_2.? align!) (<= (%I size!) (Sub (- (iHi SZ) 1) (EucMod (- (iHi SZ) 1) (%I align!)))))) :pattern ((vstd!layout.valid_layout.? size! align!))))))
(set-info :comment ";; Function-Specs vstd::layout::layout_for_type_is_valid")
(declare-fun ens%vstd!layout.layout_for_type_is_valid. (Dcr Type) Bool)
(assert (forall ((V&. Dcr) (V& Type)) (! (= (ens%vstd!layout.layout_for_type_is_valid. V&. V&) (and (vstd!layout.valid_layout.? (I (uClip SZ (vstd!layout.size_of.? V&. V&))) (I (uClip SZ (vstd!layout.align_of.? V&. V&)))) (vstd!layout.is_sized.? V&. V&) (= (uClip SZ (vstd!layout.size_of.? V&. V&)) (vstd!layout.size_of.? V&. V&)) (= (uClip SZ (vstd!layout.align_of.? V&. V&)) (vstd!layout.align_of.? V&. V&)))) :pattern ((ens%vstd!layout.layout_for_type_is_valid. V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%13 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_empty")
(declare-fun ens%vstd!map.impl&%0.tracked_empty. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (out_v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!) (and (has_type out_v! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= out_v! (vstd!map.impl&%0.empty.? K&. K& V&. V&)))) :pattern ((ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_insert")
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%14 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_remove")
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%15 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_borrow")
(declare-fun req%vstd!map.impl&%0.tracked_borrow. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key!) (=> %%global_location_label%%16 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_borrow. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key! v!) (and (has_type v! V&) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key! v!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::remove_keys")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.remove_keys.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.remove_keys.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_union_prefer_right")
(declare-fun ens%vstd!map.impl&%0.tracked_union_prefer_right. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (right! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_union_prefer_right. K&. K& V&. V& pre%self! self! right!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& pre%self! right!)))) :pattern ((ens%vstd!map.impl&%0.tracked_union_prefer_right. K&. K& V&. V& pre%self! self! right!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Specs vstd::map::impl&%1::tracked_map_keys_in_place")
(declare-fun req%vstd!map.impl&%1.tracked_map_keys_in_place. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key_map! Poly)) (! (= (req%vstd!map.impl&%1.tracked_map_keys_in_place. K&. K& V&. V& pre%self! key_map!) (and (=> %%global_location_label%%17 (forall ((j$ Poly)) (! (=> (has_type j$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& K&. K& key_map!) j$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) (vstd!map.impl&%0.index.? K&. K& K&. K& key_map! j$)))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& K&. K& key_map!) j$))))) (=> %%global_location_label%%18 (forall ((j1$ Poly) (j2$ Poly)) (! (=> (and (has_type j1$ K&) (has_type j2$ K&)) (=> (and (and (not (= j1$ j2$)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& K&. K& key_map!) j1$)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& K&. K& key_map!) j2$)) (not (= (vstd!map.impl&%0.index.? K&. K& K&. K& key_map! j1$) (vstd!map.impl&%0.index.? K&. K& K&. K& key_map! j2$))))) :pattern ((vstd!map.impl&%0.index.? K&. K& K&. K& key_map! j1$) (vstd!map.impl&%0.index.? K&. K& K&. K& key_map! j2$))))))) :pattern ((req%vstd!map.impl&%1.tracked_map_keys_in_place. K&. K& V&. V& pre%self! key_map!)))))
(declare-fun ens%vstd!map.impl&%1.tracked_map_keys_in_place. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key_map! Poly)) (! (= (ens%vstd!map.impl&%1.tracked_map_keys_in_place. K&. K& V&. V& pre%self! self! key_map!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (forall ((j$ Poly)) (! (=> (has_type j$ K&) (= (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) j$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& K&. K& key_map!) j$))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) j$)))) (forall ((j$ Poly)) (! (=> (has_type j$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& K&. K& key_map!) j$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) j$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! j$) (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! (vstd!map.impl&%0.index.? K&. K& K&. K& key_map! j$)))))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! j$)))))) :pattern ((ens%vstd!map.impl&%1.tracked_map_keys_in_place. K&. K& V&. V& pre%self! self! key_map!)))))
(set-info :comment ";; Function-Specs vstd::modes::tracked_swap")
(declare-fun ens%vstd!modes.tracked_swap. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (pre%a! Poly) (a! Poly) (pre%b! Poly) (b! Poly)) (! (= (ens%vstd!modes.tracked_swap. V&. V& pre%a! a! pre%b! b!) (and (has_type a! V&) (has_type b! V&) (= a! pre%b!) (= b! pre%a!))) :pattern ((ens%vstd!modes.tracked_swap. V&. V& pre%a! a! pre%b! b!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::pervasive::proof_from_false")
(declare-fun req%vstd!pervasive.proof_from_false. (Dcr Type) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (req%vstd!pervasive.proof_from_false. A&. A&) (=> %%global_location_label%%19 false)) :pattern ((req%vstd!pervasive.proof_from_false. A&. A&)))))
(declare-fun ens%vstd!pervasive.proof_from_false. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (%return! Poly)) (! (= (ens%vstd!pervasive.proof_from_false. A&. A& %return!) (has_type %return! A&)) :pattern ((ens%vstd!pervasive.proof_from_false. A&. A& %return!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%6::is_nonnull")
(declare-fun req%vstd!raw_ptr.impl&%6.is_nonnull. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%vstd!raw_ptr.impl&%6.is_nonnull. T&. T& self!) (=> %%global_location_label%%20 (not (= (vstd!layout.size_of.? T&. T&) 0)))) :pattern ((req%vstd!raw_ptr.impl&%6.is_nonnull. T&. T& self!)))))
(declare-fun ens%vstd!raw_ptr.impl&%6.is_nonnull. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (ens%vstd!raw_ptr.impl&%6.is_nonnull. T&. T& self!) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!)))))) 0))) :pattern ((ens%vstd!raw_ptr.impl&%6.is_nonnull. T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::ptr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.ptr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.ptr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.ptr.? T&. T& self!) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!)))) :pattern ((vstd!raw_ptr.impl&%6.ptr.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (vstd!raw_ptr.impl&%6.ptr.? T&. T& self!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.impl&%6.ptr.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_uninit")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_uninit.))
(define-fun is-vstd!raw_ptr.MemContents./Uninit_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Uninit) c))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_uninit.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_uninit.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Uninit_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_uninit.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::opt_value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.opt_value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.opt_value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!) (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!)))) :pattern ((vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::is_uninit")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.is_uninit.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.is_uninit.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.is_uninit.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Uninit_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!))))) :pattern ((vstd!raw_ptr.impl&%6.is_uninit.? T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%6::leak_contents")
(declare-fun ens%vstd!raw_ptr.impl&%6.leak_contents. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%self! Poly) (self! Poly)) (! (= (ens%vstd!raw_ptr.impl&%6.leak_contents. T&. T& pre%self! self!) (and (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (= (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!))) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) pre%self!)))) (is-vstd!raw_ptr.MemContents./Uninit_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!)))))) :pattern ((ens%vstd!raw_ptr.impl&%6.leak_contents. T&. T& pre%self! self!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::axiom_ptr_mut_from_data")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.axiom_ptr_mut_from_data.) (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (= (vstd!view.View.view.? $ (PTR T&. T&) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!)) data!)) :pattern ((vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_null_mut")
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_null_mut.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_null_mut.) (forall ((T&. Dcr) (T& Type)) (! (= (vstd!raw_ptr.ptr_null_mut.? T&. T&) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin)))))) :pattern ((vstd!raw_ptr.ptr_null_mut.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (vstd!raw_ptr.ptr_null_mut.? T&. T&) (PTR T&. T&)) :pattern ((vstd!raw_ptr.ptr_null_mut.? T&. T&)))))
(set-info :comment ";; Function-Specs core::ptr::null_mut")
(declare-fun ens%core!ptr.null_mut. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (res! Poly)) (! (= (ens%core!ptr.null_mut. T&. T& res!) (and (has_type res! (PTR T&. T&)) (= res! (vstd!raw_ptr.ptr_mut_from_data.? T&. T& (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin)))))))) :pattern ((ens%core!ptr.null_mut. T&. T& res!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::spec_cast_ptr_to_thin_ptr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.) (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (ptr! Poly)) (! (= (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!) (vstd!raw_ptr.ptr_mut_from_data.? U&. U& (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) ptr!))))) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) ptr!))))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin)))))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!))))))
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (ptr! Poly)) (! (=> (has_type ptr! (PTR T&. T&)) (has_type (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!) (PTR U&. U&))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::cast_ptr_to_thin_ptr")
(declare-fun ens%vstd!raw_ptr.cast_ptr_to_thin_ptr. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (ptr! Poly) (result! Poly)) (! (= (ens%vstd!raw_ptr.cast_ptr_to_thin_ptr. T&. T& U&. U& ptr! result!) (and (has_type result! (PTR U&. U&)) (= result! (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? T&. T& U&. U& ptr!)))) :pattern ((ens%vstd!raw_ptr.cast_ptr_to_thin_ptr. T&. T& U&. U& ptr! result!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::spec_cast_ptr_to_usize")
(assert (fuel_bool_default fuel%vstd!raw_ptr.spec_cast_ptr_to_usize.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.spec_cast_ptr_to_usize.) (forall ((T&. Dcr) (T& Type) (ptr! Poly)) (! (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) ptr!)))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!))))))
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly)) (! (=> (has_type ptr! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::ptr_mut_write")
(declare-fun req%vstd!raw_ptr.ptr_mut_write. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly) (pre%perm! Poly) (v! Poly)) (! (= (req%vstd!raw_ptr.ptr_mut_write. T&. T& ptr! pre%perm! v!) (and (=> %%global_location_label%%21 (= (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) pre%perm!))) ptr!)) (=> %%global_location_label%%22 (is-vstd!raw_ptr.MemContents./Uninit_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) pre%perm!))))))) :pattern ((req%vstd!raw_ptr.ptr_mut_write. T&. T& ptr! pre%perm! v!)))))
(declare-fun ens%vstd!raw_ptr.ptr_mut_write. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!raw_ptr.ptr_mut_write. T&. T& ptr! pre%perm! perm! v!) (and (has_type perm! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (= (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))) ptr!) (= (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))) (vstd!raw_ptr.MemContents./Init v!)))) :pattern ((ens%vstd!raw_ptr.ptr_mut_write. T&. T& ptr! pre%perm! perm! v!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!))))) :pattern ((vstd!raw_ptr.impl&%6.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%2::arrow_0")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%2.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%7.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!))))))) :pattern ((vstd!raw_ptr.impl&%6.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (vstd!raw_ptr.impl&%6.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%6.value.? T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::ptr_mut_read")
(declare-fun req%vstd!raw_ptr.ptr_mut_read. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly) (pre%perm! Poly)) (! (= (req%vstd!raw_ptr.ptr_mut_read. T&. T& ptr! pre%perm!) (and (=> %%global_location_label%%23 (= (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) pre%perm!))) ptr!)) (=> %%global_location_label%%24 (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) pre%perm!))))))) :pattern ((req%vstd!raw_ptr.ptr_mut_read. T&. T& ptr! pre%perm!)))))
(declare-fun ens%vstd!raw_ptr.ptr_mut_read. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!raw_ptr.ptr_mut_read. T&. T& ptr! pre%perm! perm! v!) (and (has_type v! T&) (has_type perm! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (= (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))) ptr!) (is-vstd!raw_ptr.MemContents./Uninit_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!)))) (= v! (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) pre%perm!))))))))) :pattern ((ens%vstd!raw_ptr.ptr_mut_read. T&. T& ptr! pre%perm! perm! v!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::ptr_ref")
(declare-fun req%vstd!raw_ptr.ptr_ref. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly) (perm! Poly)) (! (= (req%vstd!raw_ptr.ptr_ref. T&. T& ptr! perm!) (and (=> %%global_location_label%%25 (= (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))) ptr!)) (=> %%global_location_label%%26 (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))))))) :pattern ((req%vstd!raw_ptr.ptr_ref. T&. T& ptr! perm!)))))
(declare-fun ens%vstd!raw_ptr.ptr_ref. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!raw_ptr.ptr_ref. T&. T& ptr! perm! v!) (and (has_type v! T&) (= v! (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))))))))) :pattern ((ens%vstd!raw_ptr.ptr_ref. T&. T& ptr! perm! v!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%8::clone")
(declare-fun ens%vstd!raw_ptr.impl&%8.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (s! Poly)) (! (= (ens%vstd!raw_ptr.impl&%8.clone. self! s!) (and (ens%core!clone.Clone.clone. $ TYPE%vstd!raw_ptr.IsExposed. self! s!) (= s! self!))) :pattern ((ens%vstd!raw_ptr.impl&%8.clone. self! s!)))))
(assert (forall ((tmp%%$ Poly) (s$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%vstd!raw_ptr.IsExposed.)) (has_type s$ TYPE%vstd!raw_ptr.IsExposed.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%vstd!raw_ptr.IsExposed.) $ (TYPE%tuple%1. (REF $) TYPE%vstd!raw_ptr.IsExposed.) (F fndef_singleton) tmp%%$ s$) (let ((self$ (%Poly%vstd!raw_ptr.IsExposed. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%vstd!raw_ptr.IsExposed. s$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%vstd!raw_ptr.IsExposed.) $ (TYPE%tuple%1. (REF $) TYPE%vstd!raw_ptr.IsExposed.) (F fndef_singleton) tmp%%$ s$)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!raw_ptr.impl&%10.view.? self!) (vstd!raw_ptr.impl&%10.provenance.? self!)) :pattern ((vstd!raw_ptr.impl&%10.view.? self!))))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::expose_provenance")
(declare-fun ens%vstd!raw_ptr.expose_provenance. (Dcr Type Poly vstd!raw_ptr.IsExposed.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (m! Poly) (provenance! vstd!raw_ptr.IsExposed.)) (! (= (ens%vstd!raw_ptr.expose_provenance. T&. T& m! provenance!) (= (vstd!raw_ptr.impl&%10.view.? (Poly%vstd!raw_ptr.IsExposed. provenance!)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) m!))))) :pattern ((ens%vstd!raw_ptr.expose_provenance. T&. T& m! provenance!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::with_exposed_provenance")
(declare-fun ens%vstd!raw_ptr.with_exposed_provenance. (Dcr Type Int vstd!raw_ptr.IsExposed. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (addr! Int) (provenance! vstd!raw_ptr.IsExposed.) (p! Poly)) (! (= (ens%vstd!raw_ptr.with_exposed_provenance. T&. T& addr! provenance! p!) (and (has_type p! (PTR T&. T&)) (= p! (vstd!raw_ptr.ptr_mut_from_data.? T&. T& (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I addr!)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%10.view.? (Poly%vstd!raw_ptr.IsExposed. provenance!)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin)))))))) :pattern ((ens%vstd!raw_ptr.with_exposed_provenance. T&. T& addr! provenance! p!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%11::empty")
(declare-fun ens%vstd!raw_ptr.impl&%11.empty. (vstd!raw_ptr.Provenance. vstd!raw_ptr.PointsToRaw.) Bool)
(assert (forall ((provenance! vstd!raw_ptr.Provenance.) (points_to_raw! vstd!raw_ptr.PointsToRaw.)) (! (= (ens%vstd!raw_ptr.impl&%11.empty. provenance! points_to_raw!) (and (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!)) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.empty.? $ INT))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!)) provenance!))) :pattern ((ens%vstd!raw_ptr.impl&%11.empty. provenance! points_to_raw!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%11::split")
(declare-fun req%vstd!raw_ptr.impl&%11.split. (vstd!raw_ptr.PointsToRaw. vstd!set.Set<int.>.) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((self! vstd!raw_ptr.PointsToRaw.) (range! vstd!set.Set<int.>.)) (! (= (req%vstd!raw_ptr.impl&%11.split. self! range!) (=> %%global_location_label%%27 (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. range!) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. self!)))))) :pattern ((req%vstd!raw_ptr.impl&%11.split. self! range!)))))
(declare-fun ens%vstd!raw_ptr.impl&%11.split. (vstd!raw_ptr.PointsToRaw. vstd!set.Set<int.>. tuple%2.) Bool)
(assert (forall ((self! vstd!raw_ptr.PointsToRaw.) (range! vstd!set.Set<int.>.) (res! tuple%2.)) (! (= (ens%vstd!raw_ptr.impl&%11.split. self! range! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%vstd!raw_ptr.PointsToRaw.)) (= (vstd!raw_ptr.impl&%11.provenance.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. self!))) (= (vstd!raw_ptr.impl&%11.provenance.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. self!))) (= (vstd!raw_ptr.impl&%11.dom.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))) range!) (= (vstd!raw_ptr.impl&%11.dom.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. self!))) (Poly%vstd!set.Set<int.>. range!)))))) :pattern ((ens%vstd!raw_ptr.impl&%11.split. self! range! res!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%11::join")
(declare-fun req%vstd!raw_ptr.impl&%11.join. (vstd!raw_ptr.PointsToRaw. vstd!raw_ptr.PointsToRaw.) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((self! vstd!raw_ptr.PointsToRaw.) (other! vstd!raw_ptr.PointsToRaw.)) (! (= (req%vstd!raw_ptr.impl&%11.join. self! other!) (=> %%global_location_label%%28 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. self!)) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. other!))))) :pattern ((req%vstd!raw_ptr.impl&%11.join. self! other!)))))
(declare-fun ens%vstd!raw_ptr.impl&%11.join. (vstd!raw_ptr.PointsToRaw. vstd!raw_ptr.PointsToRaw. vstd!raw_ptr.PointsToRaw.) Bool)
(assert (forall ((self! vstd!raw_ptr.PointsToRaw.) (other! vstd!raw_ptr.PointsToRaw.) (joined! vstd!raw_ptr.PointsToRaw.)) (! (= (ens%vstd!raw_ptr.impl&%11.join. self! other! joined!) (and (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. joined!)) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. self!))) (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. joined!)) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.union.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. self!))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. other!)))))))) :pattern ((ens%vstd!raw_ptr.impl&%11.join. self! other! joined!)))))
(set-info :comment ";; Function-Axioms vstd::set_lib::set_int_range")
(assert (fuel_bool_default fuel%vstd!set_lib.set_int_range.))
(declare-fun %%lambda%%5 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1) i$) (B (and (<= %%hole%%0 (%I i$)) (< (%I i$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1) i$)))))
(assert (=> (fuel_bool fuel%vstd!set_lib.set_int_range.) (forall ((lo! Poly) (hi! Poly)) (! (= (vstd!set_lib.set_int_range.? lo! hi!) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.new.? $ INT $ (TYPE%fun%1. $ INT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 (%I lo!) (%I hi!))))))) :pattern ((vstd!set_lib.set_int_range.? lo! hi!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%11::is_range")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%11.is_range.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%11.is_range.) (forall ((self! Poly) (start! Poly) (len! Poly)) (! (= (vstd!raw_ptr.impl&%11.is_range.? self! start! len!) (ext_eq false (TYPE%vstd!set.Set. $ INT) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? start! (I (Add (%I start!) (%I len!))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? self!)))) :pattern ((vstd!raw_ptr.impl&%11.is_range.? self! start! len!))))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%11::into_typed")
(declare-fun req%vstd!raw_ptr.impl&%11.into_typed. (Dcr Type vstd!raw_ptr.PointsToRaw. Int) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! vstd!raw_ptr.PointsToRaw.) (start! Int)) (! (= (req%vstd!raw_ptr.impl&%11.into_typed. V&. V& self! start!) (and (=> %%global_location_label%%29 (vstd!layout.is_sized.? V&. V&)) (=> %%global_location_label%%30 (= (EucMod start! (vstd!layout.align_of.? V&. V&)) 0)) (=> %%global_location_label%%31 (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. self!) (I start!) (I (vstd!layout.size_of.? V&. V&)))))) :pattern ((req%vstd!raw_ptr.impl&%11.into_typed. V&. V& self! start!)))))
(declare-fun ens%vstd!raw_ptr.impl&%11.into_typed. (Dcr Type vstd!raw_ptr.PointsToRaw. Int Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! vstd!raw_ptr.PointsToRaw.) (start! Int) (points_to! Poly)) (! (= (ens%vstd!raw_ptr.impl&%11.into_typed. V&. V& self! start! points_to!) (and (has_type points_to! (TYPE%vstd!raw_ptr.PointsTo. V&. V&)) (= (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. V&. V&) points_to!))) (vstd!raw_ptr.ptr_mut_from_data.? V&. V& (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I start!)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. self!)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin)))))) (is-vstd!raw_ptr.MemContents./Uninit_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. V&. V&) points_to!)))))) :pattern ((ens%vstd!raw_ptr.impl&%11.into_typed. V&. V& self! start! points_to!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%12::into_raw")
(declare-fun req%vstd!raw_ptr.impl&%12.into_raw. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (req%vstd!raw_ptr.impl&%12.into_raw. V&. V& self!) (=> %%global_location_label%%32 (is-vstd!raw_ptr.MemContents./Uninit_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. V&. V&) self!)))))) :pattern ((req%vstd!raw_ptr.impl&%12.into_raw. V&. V& self!)))))
(declare-fun ens%vstd!raw_ptr.impl&%12.into_raw. (Dcr Type Poly vstd!raw_ptr.PointsToRaw.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (points_to_raw! vstd!raw_ptr.PointsToRaw.)) (! (= (ens%vstd!raw_ptr.impl&%12.into_raw. V&. V& self! points_to_raw!) (and (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!) (I (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR V&. V&) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. V&. V&) self!))))))) (I (vstd!layout.size_of.? V&. V&))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR V&. V&) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. V&. V&) self!))))))) (vstd!layout.is_sized.? V&. V&))) :pattern ((ens%vstd!raw_ptr.impl&%12.into_raw. V&. V& self! points_to_raw!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_heap_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_heap_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_heap_ptr.) (forall ((ptr! Poly) (heap_id! Poly)) (! (= (lib!layout.is_heap_ptr.? ptr! heap_id!) (and (and (= (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. heap_id!)) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!)))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!))) (lib!tokens.HeapId./HeapId/provenance (%Poly%lib!tokens.HeapId. heap_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_heap_ptr.? ptr! heap_id!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::next_ptr")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.next_ptr.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.next_ptr.) (forall ((self! Poly) (i! Poly)) (! (= (lib!linked_list.impl&%2.next_ptr.? self! i!) (%Poly%ptr_mut%<lib!linked_list.Node.>. (ite (= (%I i!) 0) (vstd!raw_ptr.ptr_mut_from_data.? $ TYPE%lib!linked_list.Node. (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin))))) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (tuple%4./tuple%4/0 (%Poly%tuple%4. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms (%Poly%lib!linked_list.LL. self!))) (I (nClip (Sub (%I i!) 1)))))))))))) :pattern ((lib!linked_list.impl&%2.next_ptr.? self! i!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::block::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.block.) (has_type (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? self!)) TYPE%lib!tokens.Mim.block_token_data.)) :pattern ((lib!tokens.Mim.impl&%10.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::config::SLICE_SIZE")
(assert (fuel_bool_default fuel%lib!config.SLICE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SIZE.) (= lib!config.SLICE_SIZE.? 65536)))
(assert (uInv 64 lib!config.SLICE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::layout::page_start")
(assert (fuel_bool_default fuel%lib!layout.page_start.))
(assert (=> (fuel_bool fuel%lib!layout.page_start.) (forall ((page_id! Poly)) (! (= (lib!layout.page_start.? page_id!) (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (Mul lib!config.SLICE_SIZE.? (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))) :pattern ((lib!layout.page_start.? page_id!))))))
(set-info :comment ";; Function-Axioms lib::config::INTPTR_SIZE")
(assert (fuel_bool_default fuel%lib!config.INTPTR_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SIZE.) (= lib!config.INTPTR_SIZE.? 8)))
(assert (uInv 64 lib!config.INTPTR_SIZE.?))
(set-info :comment ";; Function-Axioms lib::layout::block_start_at")
(assert (fuel_bool_default fuel%lib!layout.block_start_at.))
(assert (=> (fuel_bool fuel%lib!layout.block_start_at.) (forall ((page_id! Poly) (block_size! Poly) (block_idx! Poly)) (! (= (lib!layout.block_start_at.? page_id! block_size! block_idx!) (Add (Add (lib!layout.page_start.? page_id!) (lib!layout.start_offset.? block_size!)) (Mul (%I block_idx!) (%I block_size!)))) :pattern ((lib!layout.block_start_at.? page_id! block_size! block_idx!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_block_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_block_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_block_ptr.) (forall ((ptr! Poly) (block_id! Poly)) (! (= (lib!layout.is_block_ptr.? ptr! block_id!) (and (and (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) ptr!))) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) ptr!))) vstd!raw_ptr.Metadata./Thin)) (lib!layout.is_block_ptr1.? (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) ptr!)) block_id!))) :pattern ((lib!layout.is_block_ptr.? ptr! block_id!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::valid_node")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.valid_node.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.valid_node.) (forall ((self! Poly) (i! Poly) (next_ptr! Poly)) (! (= (lib!linked_list.impl&%2.valid_node.? self! i! next_ptr!) (=> (and (<= 0 (%I i!)) (< (%I i!) (lib!linked_list.LLData./LLData/len (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!))))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms (%Poly%lib!linked_list.LL. self!)))) i!) (let ((tmp%%$ (%Poly%tuple%4. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms (%Poly%lib!linked_list.LL. self!))) i!)))) (let ((perm$ (%Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((padding$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((block_token$ (%Poly%lib!tokens.Mim.block. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((is_exposed$ (%Poly%vstd!raw_ptr.IsExposed. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (and (and (and (and (and (and (and (and (and (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))) (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.Node./Node/ptr (%Poly%lib!linked_list.Node. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))))))))))) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) next_ptr!))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.Node./Node/ptr (%Poly%lib!linked_list.Node. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))))))))))) vstd!raw_ptr.Metadata./Thin)) (>= (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)) 0)) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. padding$) (I (Add (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))) (I (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. padding$)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))))))) (= (vstd!raw_ptr.impl&%10.provenance.? (Poly%vstd!raw_ptr.IsExposed. is_exposed$)) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. padding$)))) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))) (lib!linked_list.LLData./LLData/instance (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!))))))) (lib!layout.is_block_ptr.? (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? $ TYPE%lib!linked_list.Node. $ (UINT 8) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))) (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))))) vstd!raw_ptr.Metadata./Thin)) (=> (lib!linked_list.LLData./LLData/fixed_page (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!))))) (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (lib!linked_list.LLData./LLData/page_id (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!)))))) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (lib!linked_list.LLData./LLData/block_size (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!))))))))) (let ((tmp%%$1 (lib!linked_list.LLData./LLData/heap_id (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!))))))) (=> (is-core!option.Option./Some_ tmp%%$1) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)))))) (= (lib!tokens.BlockState./BlockState/heap_id (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. (lib!tokens.Mim.block_token_data./block_token_data/value (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (core!option.Option./Some (Poly%lib!tokens.HeapId. heap_id$))))))))))))))) :pattern ((lib!linked_list.impl&%2.valid_node.? self! i! next_ptr!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::wf")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.wf.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.wf.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%2.wf.? self!) (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms (%Poly%lib!linked_list.LL. self!)))) i$) (and (<= 0 (%I i$)) (< (%I i$) (lib!linked_list.LLData./LLData/len (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. (lib!linked_list.LL./LL/perms (%Poly%lib!linked_list.LL. self!)))) i$)))) (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.LL./LL/first (%Poly%lib!linked_list.LL. self!)))))) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.impl&%2.next_ptr.? self! (I (lib!linked_list.LLData./LLData/len (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!))))))))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.LL./LL/first (%Poly%lib!linked_list.LL. self!)))))) vstd!raw_ptr.Metadata./Thin)) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (lib!linked_list.impl&%2.valid_node.? self! i$ (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.impl&%2.next_ptr.? self! i$)))) :pattern ((lib!linked_list.impl&%2.next_ptr.? self! i$)))))) :pattern ((lib!linked_list.impl&%2.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::instance")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.instance.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.instance.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%2.instance.? self!) (lib!linked_list.LLData./LLData/instance (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!)))))) :pattern ((lib!linked_list.impl&%2.instance.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::fixed_page")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.fixed_page.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.fixed_page.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%2.fixed_page.? self!) (lib!linked_list.LLData./LLData/fixed_page (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!)))))) :pattern ((lib!linked_list.impl&%2.fixed_page.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::heap_id")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.heap_id.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.heap_id.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%2.heap_id.? self!) (lib!linked_list.LLData./LLData/heap_id (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!)))))) :pattern ((lib!linked_list.impl&%2.heap_id.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.LL.) (has_type (Poly%core!option.Option. (lib!linked_list.impl&%2.heap_id.? self!)) (TYPE%core!option.Option. $ TYPE%lib!tokens.HeapId.))) :pattern ((lib!linked_list.impl&%2.heap_id.? self!)))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::ptr")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.ptr.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.ptr.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%2.ptr.? self!) (lib!linked_list.LL./LL/first (%Poly%lib!linked_list.LL. self!))) :pattern ((lib!linked_list.impl&%2.ptr.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::InvariantPredicate_auto_ThreadLLSimple_atomic::atomic_inv")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%3.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%3.atomic_inv.) (forall ((declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ (PTR $ TYPE%lib!linked_list.Node.) $ TYPE%lib!linked_list.LL. declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((instance$ (%Poly%lib!tokens.Mim.Instance. (tuple%2./tuple%2/0 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!))))) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (tuple%2./tuple%2/1 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!))))) (let ((v$ (%Poly%ptr_mut%<lib!linked_list.Node.>. declare_struct_with_invariants_tmp_v!))) (let ((ll$ (%Poly%lib!linked_list.LL. declare_struct_with_invariants_tmp_g!))) (and (and (and (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. ll$)) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. ll$)) instance$)) (not (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. ll$)))) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. ll$)) (core!option.Option./Some (Poly%lib!tokens.HeapId. heap_id$)))) (= v$ (lib!linked_list.impl&%2.ptr.? (Poly%lib!linked_list.LL. ll$)))))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ (PTR $ TYPE%lib!linked_list.Node.) $ TYPE%lib!linked_list.LL. declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ (PTR $ TYPE%lib!linked_list.Node.) $ TYPE%lib!linked_list.LL.))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLSimple::wf")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%4.wf.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%4.wf.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%4.wf.? self!) (and (and (vstd!atomic_ghost.impl&%23.well_formed.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. self!)))) (= (%Poly%lib!tokens.Mim.Instance. (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. self!))))))) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (%Poly%lib!linked_list.ThreadLLSimple. self!)))) (= (%Poly%lib!tokens.HeapId. (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. self!))))))) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. self!))))) :pattern ((lib!linked_list.impl&%4.wf.? self!))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::len")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.len.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.len.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map.impl&%0.len.? K&. K& V&. V& self!) (vstd!set.impl&%0.len.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!))) :pattern ((vstd!map.impl&%0.len.? K&. K& V&. V& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (<= 0 (vstd!map.impl&%0.len.? K&. K& V&. V& self!))) :pattern ((vstd!map.impl&%0.len.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_local_state::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.thread_local_state.) (has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? self!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)) :pattern ((lib!tokens.Mim.impl&%8.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_of_segment::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.thread_of_segment.) (has_type (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.impl&%11.view.? self!)) TYPE%lib!tokens.Mim.thread_of_segment_token_data.)) :pattern ((lib!tokens.Mim.impl&%11.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::delay::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.delay.) (has_type (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? self!)) TYPE%lib!tokens.Mim.delay_token_data.)) :pattern ((lib!tokens.Mim.impl&%12.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::heap_of_page::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.heap_of_page.) (has_type (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.impl&%13.view.? self!)) TYPE%lib!tokens.Mim.heap_of_page_token_data.)) :pattern ((lib!tokens.Mim.impl&%13.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_checked_state::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.thread_checked_state.) (has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? self!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)) :pattern ((lib!tokens.Mim.impl&%17.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::Instance::clone")
(declare-fun ens%lib!tokens.Mim.impl&%18.clone. (lib!tokens.Mim.Instance. lib!tokens.Mim.Instance.) Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (s! lib!tokens.Mim.Instance.)) (! (= (ens%lib!tokens.Mim.impl&%18.clone. self! s!) (= self! s!)) :pattern ((ens%lib!tokens.Mim.impl&%18.clone. self! s!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_le.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_le.? A&. A& self! s2!) (vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_le.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::x::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.x.) (has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? self!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)) :pattern ((lib!linked_list.StuffAgree.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::y::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.y.) (has_type (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? self!)) TYPE%lib!linked_list.StuffAgree.y_token_data.)) :pattern ((lib!linked_list.StuffAgree.impl&%5.view.? self!)))))
(set-info :comment ";; Broadcast lib::linked_list::VERUS_layout_of_Node")
(assert (and (= (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.) 8) (= (vstd!layout.align_of.? $ TYPE%lib!linked_list.Node.) 8)))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Axioms vstd::invariant::AtomicInvariant::inv")
(assert (fuel_bool_default fuel%vstd!invariant.AtomicInvariant.inv.))
(assert (=> (fuel_bool fuel%vstd!invariant.AtomicInvariant.inv.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly) (v! Poly)) (! (= (vstd!invariant.AtomicInvariant.inv.? K&. K& V&. V& Pred&. Pred& self! v!) (%B (vstd!invariant.InvariantPredicate.inv.? Pred&. Pred& K&. K& V&. V& (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) v!))) :pattern ((vstd!invariant.AtomicInvariant.inv.? K&. K& V&. V& Pred&. Pred& self! v!))))))
(set-info :comment ";; Function-Axioms vstd::map::check_argument_is_map")
(assert (fuel_bool_default fuel%vstd!map.check_argument_is_map.))
(assert (=> (fuel_bool fuel%vstd!map.check_argument_is_map.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly)) (! (= (vstd!map.check_argument_is_map.? K&. K& V&. V& m!) m!) :pattern ((vstd!map.check_argument_is_map.? K&. K& V&. V& m!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.check_argument_is_map.? K&. K& V&. V& m!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.check_argument_is_map.? K&. K& V&. V& m!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%11::contains_range")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%11.contains_range.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%11.contains_range.) (forall ((self! Poly) (start! Poly) (len! Poly)) (! (= (vstd!raw_ptr.impl&%11.contains_range.? self! start! len!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? start! (I (Add (%I start!) (%I len!))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? self!)))) :pattern ((vstd!raw_ptr.impl&%11.contains_range.? self! start! len!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%16::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 16) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%32::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%32.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%32.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%36::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%36.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%36.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%40::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (= (vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!view.View.view.? A0&. A0& (tuple%1./tuple%1/0 (%Poly%tuple%1. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%46::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%46.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%46.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::DelayState::to_int")
(assert (fuel_bool_default fuel%lib!tokens.impl&%2.to_int.))
(define-fun is-lib!tokens.DelayState./UseDelayedFree_ ((c lib!tokens.DelayState.)) Bool ((_ is lib!tokens.DelayState./UseDelayedFree) c))
(define-fun is-lib!tokens.DelayState./Freeing_ ((c lib!tokens.DelayState.)) Bool ((_ is lib!tokens.DelayState./Freeing) c))
(define-fun is-lib!tokens.DelayState./NoDelayedFree_ ((c lib!tokens.DelayState.)) Bool ((_ is lib!tokens.DelayState./NoDelayedFree) c))
(assert (=> (fuel_bool fuel%lib!tokens.impl&%2.to_int.) (forall ((self! Poly)) (! (= (lib!tokens.impl&%2.to_int.? self!) (ite (is-lib!tokens.DelayState./UseDelayedFree_ (%Poly%lib!tokens.DelayState. self!)) 0 (ite (is-lib!tokens.DelayState./Freeing_ (%Poly%lib!tokens.DelayState. self!)) 1 (ite (is-lib!tokens.DelayState./NoDelayedFree_ (%Poly%lib!tokens.DelayState. self!)) 2 3)))) :pattern ((lib!tokens.impl&%2.to_int.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::page_id")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.page_id.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.page_id.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%2.page_id.? self!) (lib!linked_list.LLData./LLData/page_id (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!)))))) :pattern ((lib!linked_list.impl&%2.page_id.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.LL.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.impl&%2.page_id.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.impl&%2.page_id.? self!)))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::block_size")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.block_size.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.block_size.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%2.block_size.? self!) (lib!linked_list.LLData./LLData/block_size (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!)))))) :pattern ((lib!linked_list.impl&%2.block_size.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.LL.) (<= 0 (lib!linked_list.impl&%2.block_size.? self!))) :pattern ((lib!linked_list.impl&%2.block_size.? self!)))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::len")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%2.len.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%2.len.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%2.len.? self!) (lib!linked_list.LLData./LLData/len (%Poly%lib!linked_list.LLData. (Poly%lib!linked_list.LLData. (lib!linked_list.LL./LL/data (%Poly%lib!linked_list.LL. self!)))))) :pattern ((lib!linked_list.impl&%2.len.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.LL.) (<= 0 (lib!linked_list.impl&%2.len.? self!))) :pattern ((lib!linked_list.impl&%2.len.? self!)))))
(set-info :comment ";; Function-Axioms lib::types::InvariantPredicate_auto_AtomicHeapPtr_atomic::atomic_inv")
(assert (fuel_bool_default fuel%lib!types.impl&%1.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!types.impl&%1.atomic_inv.) (forall ((declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (PTR $ TYPE%lib!types.Heap.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((instance$ (%Poly%lib!tokens.Mim.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%4./tuple%4/1 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((emp$ (%Poly%lib!types.BoolAgree.x. (tuple%4./tuple%4/2 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((emp_inst$ (%Poly%lib!types.BoolAgree.Instance. (tuple%4./tuple%4/3 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((v$ (%Poly%ptr_mut%<lib!types.Heap.>. declare_struct_with_invariants_tmp_v!))) (let ((all_g$ (%Poly%tuple%2. declare_struct_with_invariants_tmp_g!))) (let ((is_emp$ (%Poly%lib!types.BoolAgree.y. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. all_g$)))))) (let ((g_opt$ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. all_g$)))))) (and (= (lib!types.BoolAgree.y_token_data./y_token_data/instance (%Poly%lib!types.BoolAgree.y_token_data. (Poly%lib!types.BoolAgree.y_token_data. (lib!types.BoolAgree.impl&%5.view.? (Poly%lib!types.BoolAgree.y. is_emp$))))) emp_inst$) (ite (is-core!option.Option./None_ g_opt$) (lib!types.BoolAgree.y_token_data./y_token_data/value (%Poly%lib!types.BoolAgree.y_token_data. (Poly%lib!types.BoolAgree.y_token_data. (lib!types.BoolAgree.impl&%5.view.? (Poly%lib!types.BoolAgree.y. is_emp$))))) (let ((g$ (%Poly%lib!tokens.Mim.heap_of_page. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. g_opt$)))))) (and (and (and (not (lib!types.BoolAgree.y_token_data./y_token_data/value (%Poly%lib!types.BoolAgree.y_token_data. (Poly%lib!types.BoolAgree.y_token_data. (lib!types.BoolAgree.impl&%5.view.? (Poly%lib!types.BoolAgree.y. is_emp$)))))) (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance (%Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.impl&%13.view.? (Poly%lib!tokens.Mim.heap_of_page. g$))))) instance$)) (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key (%Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.impl&%13.view.? (Poly%lib!tokens.Mim.heap_of_page. g$))))) page_id$)) (lib!layout.is_heap_ptr.? (Poly%ptr_mut%<lib!types.Heap.>. v$) (Poly%lib!tokens.HeapId. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value (%Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.impl&%13.view.? (Poly%lib!tokens.Mim.heap_of_page. g$))))))))))))))))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (PTR $ TYPE%lib!types.Heap.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (PTR $ TYPE%lib!types.Heap.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.))))
(set-info :comment ";; Function-Axioms lib::linked_list::InvariantPredicate_auto_ThreadLLWithDelayBits_atomic::atomic_inv")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%6.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%6.atomic_inv.) (forall ((declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (PTR $ TYPE%lib!linked_list.Node.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((instance$ (%Poly%lib!tokens.Mim.Instance. (tuple%2./tuple%2/0 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!))))) (let ((emp_inst$ (%Poly%lib!linked_list.StuffAgree.Instance. (tuple%2./tuple%2/1 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!))))) (let ((v$ (%Poly%ptr_mut%<lib!linked_list.Node.>. declare_struct_with_invariants_tmp_v!))) (let ((all_g$ (%Poly%tuple%2. declare_struct_with_invariants_tmp_g!))) (let ((is_emp$ (%Poly%lib!linked_list.StuffAgree.y. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. all_g$)))))) (let ((g_opt$ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. all_g$)))))) (and (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. is_emp$))))) emp_inst$) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!option.Option. g_opt$) (Poly%core!option.Option. (lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. is_emp$))))))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (= v$ (%Poly%ptr_mut%<lib!linked_list.Node.>. (vstd!raw_ptr.ptr_mut_from_data.? $ TYPE%lib!linked_list.Node. (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin))))))) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((g$ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))))) (let ((stuff$ (%Poly%lib!linked_list.BlockSizePageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))))) (let ((delay_token$ (%Poly%lib!tokens.Mim.delay. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. g$)))))) (let ((ll$ (%Poly%lib!linked_list.LL. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. g$)))))) (let ((page_id$ (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. (Poly%lib!linked_list.BlockSizePageId. stuff$))))) (let ((block_size$ (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. (Poly%lib!linked_list.BlockSizePageId. stuff$))))) (and (and (and (and (and (and (and (and (and (and (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. ll$)) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. ll$)) block_size$)) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. ll$)) instance$)) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. ll$)) page_id$)) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. ll$))) (is-core!option.Option./None_ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. ll$)))) (= (lib!tokens.Mim.delay_token_data./delay_token_data/instance (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. delay_token$))))) instance$)) (= (lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. delay_token$))))) page_id$)) (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (Poly%ptr_mut%<lib!linked_list.Node.>. v$)) (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.impl&%2.ptr.? (Poly%lib!linked_list.LL. ll$)))) (lib!tokens.impl&%2.to_int.? (Poly%lib!tokens.DelayState. (lib!tokens.Mim.delay_token_data./delay_token_data/value (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. delay_token$)))))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. v$)))) (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.impl&%2.ptr.? (Poly%lib!linked_list.LL. ll$)))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. v$)))) vstd!raw_ptr.Metadata./Thin)) (= (EucMod (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.impl&%2.ptr.? (Poly%lib!linked_list.LL. ll$)))) 4) 0)))))))))))))))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (PTR $ TYPE%lib!linked_list.Node.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (PTR $ TYPE%lib!linked_list.Node.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.)))))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLWithDelayBits::wf")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%7.wf.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%7.wf.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%7.wf.? self!) (and (and (and (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))) (vstd!atomic_ghost.impl&%23.well_formed.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))) (= (%Poly%lib!tokens.Mim.Instance. (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!)))) (= (%Poly%lib!linked_list.StuffAgree.Instance. (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))) :pattern ((lib!linked_list.impl&%7.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLWithDelayBits::is_empty")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%8.is_empty.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%8.is_empty.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%8.is_empty.? self!) (is-core!option.Option./None_ (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))))) :pattern ((lib!linked_list.impl&%8.is_empty.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLWithDelayBits::page_id")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%8.page_id.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%8.page_id.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%8.page_id.? self!) (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))))))))) :pattern ((lib!linked_list.impl&%8.page_id.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.impl&%8.page_id.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.impl&%8.page_id.? self!)))))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLWithDelayBits::block_size")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%8.block_size.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%8.block_size.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%8.block_size.? self!) (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))))))))) :pattern ((lib!linked_list.impl&%8.block_size.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.ThreadLLWithDelayBits.) (<= 0 (lib!linked_list.impl&%8.block_size.? self!))) :pattern ((lib!linked_list.impl&%8.block_size.? self!)))))
(set-info :comment ";; Function-Axioms lib::types::InvariantPredicate_auto_SegmentHeader_thread_id::atomic_inv")
(assert (fuel_bool_default fuel%lib!types.impl&%10.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!types.impl&%10.atomic_inv.) (forall ((declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ (UINT 64) $ TYPE%lib!tokens.Mim.thread_of_segment. declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((instance$ (%Poly%lib!tokens.Mim.Instance. (tuple%2./tuple%2/0 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%2./tuple%2/1 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!))))) (let ((v$ (%I declare_struct_with_invariants_tmp_v!))) (let ((g$ (%Poly%lib!tokens.Mim.thread_of_segment. declare_struct_with_invariants_tmp_g!))) (and (and (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance (%Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.impl&%11.view.? (Poly%lib!tokens.Mim.thread_of_segment. g$))))) instance$) (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key (%Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.impl&%11.view.? (Poly%lib!tokens.Mim.thread_of_segment. g$))))) segment_id$)) (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value (%Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.impl&%11.view.? (Poly%lib!tokens.Mim.thread_of_segment. g$))))) (lib!thread.ThreadId./ThreadId (%I (I v$))))))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ (UINT 64) $ TYPE%lib!tokens.Mim.thread_of_segment. declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ (UINT 64) $ TYPE%lib!tokens.Mim.thread_of_segment.))
(set-info :comment ";; Function-Axioms lib::linked_list::has_idx")
(assert (fuel_bool_default fuel%lib!linked_list.has_idx.))
(assert (=> (fuel_bool fuel%lib!linked_list.has_idx.) (forall ((map! Poly) (i! Poly)) (! (= (lib!linked_list.has_idx.? map! i!) (exists ((p$ Poly)) (! (and (has_type p$ NAT) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) map!) p$) (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) map! p$)))))))))) (%I i!)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) map!) p$))))) :pattern ((lib!linked_list.has_idx.? map! i!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::set_nat_range")
(assert (fuel_bool_default fuel%lib!linked_list.set_nat_range.))
(assert (=> (fuel_bool fuel%lib!linked_list.set_nat_range.) (forall ((lo! Poly) (hi! Poly)) (! (= (lib!linked_list.set_nat_range.? lo! hi!) (%Poly%vstd!set.Set<nat.>. (vstd!set.impl&%0.new.? $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 (%I lo!) (%I hi!))))))) :pattern ((lib!linked_list.set_nat_range.? lo! hi!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::llgstr_wf")
(assert (fuel_bool_default fuel%lib!linked_list.llgstr_wf.))
(assert (=> (fuel_bool fuel%lib!linked_list.llgstr_wf.) (forall ((llgstr! Poly)) (! (= (lib!linked_list.llgstr_wf.? llgstr!) (let ((len$ (vstd!map.impl&%0.len.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map (%Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!)))))) (let ((map$ (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map (%Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!)))) (let ((block_size$ (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (%Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!)))) (let ((page_id$ (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (%Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!)))) (let ((instance$ (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance (%Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (and (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. map$)) i$) (and (<= 0 (%I i$)) (< (%I i$) len$))) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. map$)) i$) (let ((tmp%%$ (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. map$) i$)))) (let ((padding$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((block_token$ (%Poly%lib!tokens.Mim.block. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (and (and (and (>= (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)) 0) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. padding$) (I (lib!layout.block_start.? (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. padding$)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))))))) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))) instance$)) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) page_id$)) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) block_size$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. map$)) i$)))))))))) :pattern ((lib!linked_list.llgstr_wf.? llgstr!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%vstd!raw_ptr.IsExposed.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. V&. V& V&. V&) (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Eq. V&. V&) (tr_bound%core!cmp.Eq. U&. U&) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 16) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (SINT 64) $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%1. T&. T&) $ (TYPE%tuple%1. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%1. T&. T&) $ (TYPE%tuple%1. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%1. T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%1. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Eq. U&. U&) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!cmp.Eq. A&. A&) (tr_bound%core!cmp.Eq. (REF A&.) A&)) :pattern ((tr_bound%core!cmp.Eq. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Eq. $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Eq. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (SINT 32) $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& U&. U&) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Eq. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Eq. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. E&. E& E&. E&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. E&. E&)) (tr_bound%core!cmp.Eq. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (SINT SZ) $ (SINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (SINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.Eq. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. W&. W& W&. W&) (tr_bound%core!cmp.PartialEq. V&. V& V&. V&) (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Eq. W&. W&) (tr_bound%core!cmp.Eq. V&. V&) (tr_bound%core!cmp.Eq. U&. U&) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!marker.Freeze. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!marker.Freeze. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!marker.Freeze. (REF T&.) T&) :pattern ((tr_bound%core!marker.Freeze. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!marker.Freeze. $ (PTR T&. T&)) :pattern ((tr_bound%core!marker.Freeze. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!fmt.Debug. U&. U&) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!fmt.Debug. $ (PTR T&. T&)) :pattern ((tr_bound%core!fmt.Debug. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. (REF T&.) T&)) :pattern ((tr_bound%core!fmt.Debug. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (SINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!fmt.Debug. W&. W&) (tr_bound%core!fmt.Debug. V&. V&) (tr_bound%core!fmt.Debug. U&. U&) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. $ (SLICE T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!fmt.Debug. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!fmt.Debug. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%1. T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%1. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!fmt.Debug. V&. V&) (tr_bound%core!fmt.Debug. U&. U&) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!fmt.Debug. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!fmt.Debug. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) (REF $) (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) (REF $) (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. A&. A& B&. B&) (tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (SINT 64) $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 16) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (SINT 32) $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (SINT SZ) $ (SINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. V&. V& V&. V&) (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. E&. E& E&. E&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. W&. W& W&. W&) (tr_bound%core!cmp.PartialOrd. V&. V& V&. V&) (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%1. T&. T&) $ (TYPE%tuple%1. T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%1. T&. T&) $ (TYPE%tuple%1. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Ord. $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Ord. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (SINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Ord. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Ord. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Ord. T&. T&) (tr_bound%core!cmp.Ord. $ (TYPE%tuple%1. T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%tuple%1. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Ord. T&. T&) (tr_bound%core!cmp.Ord. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Ord. W&. W&) (tr_bound%core!cmp.Ord. V&. V&) (tr_bound%core!cmp.Ord. U&. U&) (tr_bound%core!cmp.Ord. T&. T&)) (tr_bound%core!cmp.Ord. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!cmp.Ord. A&. A&) (tr_bound%core!cmp.Ord. (REF A&.) A&)) :pattern ((tr_bound%core!cmp.Ord. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Ord. U&. U&) (tr_bound%core!cmp.Ord. T&. T&)) (tr_bound%core!cmp.Ord. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.Ord. T&. T&)) (tr_bound%core!cmp.Ord. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.Ord. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Ord. T&. T&) (tr_bound%core!cmp.Ord. $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.Ord. T&. T&) (tr_bound%core!cmp.Ord. E&. E&)) (tr_bound%core!cmp.Ord. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Ord. V&. V&) (tr_bound%core!cmp.Ord. U&. U&) (tr_bound%core!cmp.Ord. T&. T&)) (tr_bound%core!cmp.Ord. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (SINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. (REF T&.) T&)) :pattern ((tr_bound%core!hash.Hash. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (B&. Dcr) (B& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. B&. B&)) (tr_bound%core!hash.Hash. $ (TYPE%tuple%2. T&. T& B&. B&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%2. T&. T& B&. B&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. E&. E&)) (tr_bound%core!hash.Hash. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (D&. Dcr) (D& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. B&. B&) (tr_bound%core!hash.Hash. C&. C&) (tr_bound%core!hash.Hash. D&. D&)) (tr_bound%core!hash.Hash. $ (TYPE%tuple%4. T&. T& B&. B& C&. C& D&. D&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%4. T&. T& B&. B& C&. C& D&. D&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!hash.Hash. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!hash.Hash. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!hash.Hash. T&. T&)) (tr_bound%core!hash.Hash. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!hash.Hash. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (B&. Dcr) (B& Type) (C&. Dcr) (C& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. B&. B&) (tr_bound%core!hash.Hash. C&. C&)) (tr_bound%core!hash.Hash. $ (TYPE%tuple%3. T&. T& B&. B& C&. C&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%3. T&. T& B&. B& C&. C&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. $ (SLICE T&. T&))) :pattern ((tr_bound%core!hash.Hash. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!hash.Hash. $ (PTR T&. T&)) :pattern ((tr_bound%core!hash.Hash. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. $ (TYPE%tuple%1. T&. T&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%1. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. E&. E&)) (tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (SINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!tokens.Mim.Instance.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.BoolAgree.Instance.))
(set-info :comment ";; Function-Specs lib::types::PageQueue::clone")
(declare-fun ens%lib!types.impl&%14.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (s! Poly)) (! (= (ens%lib!types.impl&%14.clone. self! s!) (and (ens%core!clone.Clone.clone. $ TYPE%lib!types.PageQueue. self! s!) (= s! self!))) :pattern ((ens%lib!types.impl&%14.clone. self! s!)))))
(assert (forall ((tmp%%$ Poly) (s$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%lib!types.PageQueue.)) (has_type s$ TYPE%lib!types.PageQueue.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.PageQueue.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.PageQueue.) (F fndef_singleton) tmp%%$ s$) (let ((self$ (%Poly%lib!types.PageQueue. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%lib!types.PageQueue. s$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.PageQueue.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.PageQueue.) (F fndef_singleton) tmp%%$ s$)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.PageQueue.))
(set-info :comment ";; Function-Specs lib::types::SpanQueueHeader::clone")
(declare-fun ens%lib!types.impl&%19.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (s! Poly)) (! (= (ens%lib!types.impl&%19.clone. self! s!) (and (ens%core!clone.Clone.clone. $ TYPE%lib!types.SpanQueueHeader. self! s!) (= s! self!))) :pattern ((ens%lib!types.impl&%19.clone. self! s!)))))
(assert (forall ((tmp%%$ Poly) (s$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%lib!types.SpanQueueHeader.)) (has_type s$ TYPE%lib!types.SpanQueueHeader.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.SpanQueueHeader.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.SpanQueueHeader.) (F fndef_singleton) tmp%%$ s$) (let ((self$ (%Poly%lib!types.SpanQueueHeader. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%lib!types.SpanQueueHeader. s$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.SpanQueueHeader.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.SpanQueueHeader.) (F fndef_singleton) tmp%%$ s$)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.SpanQueueHeader.))
(set-info :comment ";; Function-Specs lib::types::TldPtr::clone")
(declare-fun ens%lib!types.impl&%25.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (s! Poly)) (! (= (ens%lib!types.impl&%25.clone. self! s!) (and (ens%core!clone.Clone.clone. $ TYPE%lib!types.TldPtr. self! s!) (= self! s!))) :pattern ((ens%lib!types.impl&%25.clone. self! s!)))))
(assert (forall ((tmp%%$ Poly) (s$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%lib!types.TldPtr.)) (has_type s$ TYPE%lib!types.TldPtr.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.TldPtr.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.TldPtr.) (F fndef_singleton) tmp%%$ s$) (let ((self$ (%Poly%lib!types.TldPtr. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%lib!types.TldPtr. s$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.TldPtr.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.TldPtr.) (F fndef_singleton) tmp%%$ s$)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.TldPtr.))
(set-info :comment ";; Function-Def lib::linked_list::Node::clone")
(set-info :comment ";; linked_list.rs:45:5: 45:28 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!linked_list.Node.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!linked_list.StuffAgree.Instance.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.SegmentKind.))
(set-info :comment ";; Function-Specs lib::tokens::Mim::Instance::set_use_delayed_free")
(declare-fun req%lib!tokens.Mim.impl&%18.set_use_delayed_free. (lib!tokens.Mim.Instance. lib!tokens.PageId. lib!tokens.Mim.delay.) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (page_id! lib!tokens.PageId.) (param_token_0_delay! lib!tokens.Mim.delay.)) (! (= (req%lib!tokens.Mim.impl&%18.set_use_delayed_free. self! page_id! param_token_0_delay!) (and (=> %%global_location_label%%33 (= (lib!tokens.Mim.delay_token_data./delay_token_data/instance (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_0_delay!))))) self!)) (=> %%global_location_label%%34 (and (= (lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_0_delay!))))) page_id!) (= (lib!tokens.Mim.delay_token_data./delay_token_data/value (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_0_delay!))))) lib!tokens.DelayState./NoDelayedFree))))) :pattern ((req%lib!tokens.Mim.impl&%18.set_use_delayed_free. self! page_id! param_token_0_delay!)))))
(declare-fun ens%lib!tokens.Mim.impl&%18.set_use_delayed_free. (lib!tokens.Mim.Instance. lib!tokens.PageId. lib!tokens.Mim.delay. lib!tokens.Mim.delay.) Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (page_id! lib!tokens.PageId.) (param_token_0_delay! lib!tokens.Mim.delay.) (param_token_1_delay! lib!tokens.Mim.delay.)) (! (= (ens%lib!tokens.Mim.impl&%18.set_use_delayed_free. self! page_id! param_token_0_delay! param_token_1_delay!) (and (= (lib!tokens.Mim.delay_token_data./delay_token_data/instance (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_1_delay!))))) self!) (and (= (lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_1_delay!))))) page_id!) (= (lib!tokens.Mim.delay_token_data./delay_token_data/value (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_1_delay!))))) lib!tokens.DelayState./UseDelayedFree)))) :pattern ((ens%lib!tokens.Mim.impl&%18.set_use_delayed_free. self! page_id! param_token_0_delay! param_token_1_delay!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::Instance::page_check_delay_state")
(declare-fun req%lib!tokens.Mim.impl&%18.page_check_delay_state. (lib!tokens.Mim.Instance. lib!thread.ThreadId. lib!tokens.PageId. lib!tokens.Mim.thread_local_state. lib!tokens.Mim.delay. lib!tokens.Mim.thread_checked_state.) Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (thread_id! lib!thread.ThreadId.) (page_id! lib!tokens.PageId.) (param_token_0_thread_local_state! lib!tokens.Mim.thread_local_state.) (param_token_2_delay! lib!tokens.Mim.delay.) (param_token_1_thread_checked_state! lib!tokens.Mim.thread_checked_state.)) (! (= (req%lib!tokens.Mim.impl&%18.page_check_delay_state. self! thread_id! page_id! param_token_0_thread_local_state! param_token_2_delay! param_token_1_thread_checked_state!) (and (=> %%global_location_label%%35 (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))) self!)) (=> %%global_location_label%%36 (= (lib!tokens.Mim.delay_token_data./delay_token_data/instance (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_2_delay!))))) self!)) (=> %%global_location_label%%37 (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_1_thread_checked_state!))))) self!)) (=> %%global_location_label%%38 (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))) thread_id!)) (=> %%global_location_label%%39 (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_1_thread_checked_state!))))) thread_id!))) (=> %%global_location_label%%40 (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (let ((cs$ (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_1_thread_checked_state!))))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.PageId. page_id!))))) (=> %%global_location_label%%41 (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (let ((cs$ (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_1_thread_checked_state!))))))) (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.PageId. page_id!)))) 0)))) (=> %%global_location_label%%42 (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (let ((cs$ (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_1_thread_checked_state!))))))) (= (lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_2_delay!))))) page_id!)))) (=> %%global_location_label%%43 (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (let ((cs$ (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_1_thread_checked_state!))))))) (let ((delay_state$ (lib!tokens.Mim.delay_token_data./delay_token_data/value (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_2_delay!))))))) (not (= delay_state$ lib!tokens.DelayState./Freeing)))))))) :pattern ((req%lib!tokens.Mim.impl&%18.page_check_delay_state. self! thread_id! page_id! param_token_0_thread_local_state! param_token_2_delay! param_token_1_thread_checked_state!)))))
(declare-fun ens%lib!tokens.Mim.impl&%18.page_check_delay_state. (lib!tokens.Mim.Instance. lib!thread.ThreadId. lib!tokens.PageId. lib!tokens.Mim.thread_local_state. lib!tokens.Mim.delay. lib!tokens.Mim.thread_checked_state. lib!tokens.Mim.thread_checked_state.) Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (thread_id! lib!thread.ThreadId.) (page_id! lib!tokens.PageId.) (param_token_0_thread_local_state! lib!tokens.Mim.thread_local_state.) (param_token_2_delay! lib!tokens.Mim.delay.) (param_token_1_thread_checked_state! lib!tokens.Mim.thread_checked_state.) (param_token_3_thread_checked_state! lib!tokens.Mim.thread_checked_state.)) (! (= (ens%lib!tokens.Mim.impl&%18.page_check_delay_state. self! thread_id! page_id! param_token_0_thread_local_state! param_token_2_delay! param_token_1_thread_checked_state! param_token_3_thread_checked_state!) (and (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_3_thread_checked_state!))))) self!) (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (let ((cs$ (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_1_thread_checked_state!))))))) (let ((delay_state$ (lib!tokens.Mim.delay_token_data./delay_token_data/value (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (Poly%lib!tokens.Mim.delay. param_token_2_delay!))))))) (let ((cs2$ (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) (Poly%lib!tokens.PageId. page_id!)))))) (and (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_3_thread_checked_state!))))) thread_id!) (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. param_token_3_thread_checked_state!))))) cs2$)))))))) :pattern ((ens%lib!tokens.Mim.impl&%18.page_check_delay_state. self! thread_id! page_id! param_token_0_thread_local_state! param_token_2_delay! param_token_1_thread_checked_state! param_token_3_thread_checked_state!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::Instance::block_tokens_distinct")
(declare-fun req%lib!tokens.Mim.impl&%18.block_tokens_distinct. (lib!tokens.Mim.Instance. lib!tokens.BlockId. lib!tokens.BlockId. lib!tokens.Mim.block. lib!tokens.Mim.block.) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (block_id1! lib!tokens.BlockId.) (block_id2! lib!tokens.BlockId.) (param_token_0_block! lib!tokens.Mim.block.) (param_token_1_block! lib!tokens.Mim.block.)) (! (= (req%lib!tokens.Mim.impl&%18.block_tokens_distinct. self! block_id1! block_id2! param_token_0_block! param_token_1_block!) (and (=> %%global_location_label%%44 (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. param_token_0_block!))))) self!)) (=> %%global_location_label%%45 (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. param_token_1_block!))))) self!)) (=> %%global_location_label%%46 (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id1!))) (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id2!))))) (=> %%global_location_label%%47 (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id1!))) (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id2!))))) (=> %%global_location_label%%48 (= (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. param_token_0_block!))))) block_id1!)) (=> %%global_location_label%%49 (= (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. param_token_1_block!))))) block_id2!)))) :pattern ((req%lib!tokens.Mim.impl&%18.block_tokens_distinct. self! block_id1! block_id2! param_token_0_block! param_token_1_block!)))))
(declare-fun ens%lib!tokens.Mim.impl&%18.block_tokens_distinct. (lib!tokens.Mim.Instance. lib!tokens.BlockId. lib!tokens.BlockId. lib!tokens.Mim.block. lib!tokens.Mim.block.) Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (block_id1! lib!tokens.BlockId.) (block_id2! lib!tokens.BlockId.) (param_token_0_block! lib!tokens.Mim.block.) (param_token_1_block! lib!tokens.Mim.block.)) (! (= (ens%lib!tokens.Mim.impl&%18.block_tokens_distinct. self! block_id1! block_id2! param_token_0_block! param_token_1_block!) false) :pattern ((ens%lib!tokens.Mim.impl&%18.block_tokens_distinct. self! block_id1! block_id2! param_token_0_block! param_token_1_block!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::Instance::block_in_range")
(declare-fun req%lib!tokens.Mim.impl&%18.block_in_range. (lib!tokens.Mim.Instance. lib!thread.ThreadId. lib!tokens.BlockId. lib!tokens.Mim.thread_local_state. lib!tokens.Mim.block.) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (thread_id! lib!thread.ThreadId.) (block_id! lib!tokens.BlockId.) (param_token_0_thread_local_state! lib!tokens.Mim.thread_local_state.) (param_token_1_block! lib!tokens.Mim.block.)) (! (= (req%lib!tokens.Mim.impl&%18.block_in_range. self! thread_id! block_id! param_token_0_thread_local_state! param_token_1_block!) (and (=> %%global_location_label%%50 (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))) self!)) (=> %%global_location_label%%51 (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. param_token_1_block!))))) self!)) (=> %%global_location_label%%52 (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))) thread_id!)) (=> %%global_location_label%%53 (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (= (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. param_token_1_block!))))) block_id!))) (=> %%global_location_label%%54 (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id!))))))))) :pattern ((req%lib!tokens.Mim.impl&%18.block_in_range. self! thread_id! block_id! param_token_0_thread_local_state! param_token_1_block!)))))
(declare-fun ens%lib!tokens.Mim.impl&%18.block_in_range. (lib!tokens.Mim.Instance. lib!thread.ThreadId. lib!tokens.BlockId. lib!tokens.Mim.thread_local_state. lib!tokens.Mim.block.) Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (thread_id! lib!thread.ThreadId.) (block_id! lib!tokens.BlockId.) (param_token_0_thread_local_state! lib!tokens.Mim.thread_local_state.) (param_token_1_block! lib!tokens.Mim.block.)) (! (= (ens%lib!tokens.Mim.impl&%18.block_in_range. self! thread_id! block_id! param_token_0_thread_local_state! param_token_1_block!) (let ((ts$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (let ((tmp%%$ (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id!))))) (and (<= 0 tmp%%$) (< tmp%%$ (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id!)))))))))))) :pattern ((ens%lib!tokens.Mim.impl&%18.block_in_range. self! thread_id! block_id! param_token_0_thread_local_state! param_token_1_block!)))))
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::Instance::initialize")
(declare-fun ens%lib!linked_list.StuffAgree.impl&%6.initialize. (core!option.Option. tuple%3.) Bool)
(assert (forall ((b! core!option.Option.) (tmp_tuple! tuple%3.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%6.initialize. b! tmp_tuple!) (and (has_type (Poly%tuple%3. tmp_tuple!) (TYPE%tuple%3. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.x. (TRACKED $) TYPE%lib!linked_list.StuffAgree.y.)) (let ((instance$ (%Poly%lib!linked_list.StuffAgree.Instance. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_x$ (%Poly%lib!linked_list.StuffAgree.x. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_y$ (%Poly%lib!linked_list.StuffAgree.y. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((instance$1 instance$)) (let ((param_token_x$1 param_token_x$)) (let ((param_token_y$1 param_token_y$)) (and (and (and (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. param_token_x$1))))) instance$1) (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. param_token_y$1))))) instance$1)) (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. param_token_x$1))))) b!)) (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. param_token_y$1))))) b!)))))))))) :pattern ((ens%lib!linked_list.StuffAgree.impl&%6.initialize. b! tmp_tuple!)))))
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::Instance::set")
(declare-fun req%lib!linked_list.StuffAgree.impl&%6.set. (lib!linked_list.StuffAgree.Instance. core!option.Option. lib!linked_list.StuffAgree.x. lib!linked_list.StuffAgree.y.) Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((self! lib!linked_list.StuffAgree.Instance.) (b! core!option.Option.) (pre%param_token_x! lib!linked_list.StuffAgree.x.) (pre%param_token_y! lib!linked_list.StuffAgree.y.)) (! (= (req%lib!linked_list.StuffAgree.impl&%6.set. self! b! pre%param_token_x! pre%param_token_y!) (and (=> %%global_location_label%%55 (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. pre%param_token_x!))))) self!)) (=> %%global_location_label%%56 (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. pre%param_token_y!))))) self!)))) :pattern ((req%lib!linked_list.StuffAgree.impl&%6.set. self! b! pre%param_token_x! pre%param_token_y!)))))
(declare-fun ens%lib!linked_list.StuffAgree.impl&%6.set. (lib!linked_list.StuffAgree.Instance. core!option.Option. lib!linked_list.StuffAgree.x. lib!linked_list.StuffAgree.x. lib!linked_list.StuffAgree.y. lib!linked_list.StuffAgree.y.) Bool)
(assert (forall ((self! lib!linked_list.StuffAgree.Instance.) (b! core!option.Option.) (pre%param_token_x! lib!linked_list.StuffAgree.x.) (param_token_x! lib!linked_list.StuffAgree.x.) (pre%param_token_y! lib!linked_list.StuffAgree.y.) (param_token_y! lib!linked_list.StuffAgree.y.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%6.set. self! b! pre%param_token_x! param_token_x! pre%param_token_y! param_token_y!) (and (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. param_token_x!))))) self!) (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. param_token_y!))))) self!) (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. pre%param_token_x!))))) (lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. pre%param_token_y!)))))) (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. param_token_x!))))) b!) (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. param_token_y!))))) b!))) :pattern ((ens%lib!linked_list.StuffAgree.impl&%6.set. self! b! pre%param_token_x! param_token_x! pre%param_token_y! param_token_y!)))))
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::Instance::agree")
(declare-fun req%lib!linked_list.StuffAgree.impl&%6.agree. (lib!linked_list.StuffAgree.Instance. lib!linked_list.StuffAgree.x. lib!linked_list.StuffAgree.y.) Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self! lib!linked_list.StuffAgree.Instance.) (param_token_x! lib!linked_list.StuffAgree.x.) (param_token_y! lib!linked_list.StuffAgree.y.)) (! (= (req%lib!linked_list.StuffAgree.impl&%6.agree. self! param_token_x! param_token_y!) (and (=> %%global_location_label%%57 (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. param_token_x!))))) self!)) (=> %%global_location_label%%58 (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. param_token_y!))))) self!)))) :pattern ((req%lib!linked_list.StuffAgree.impl&%6.agree. self! param_token_x! param_token_y!)))))
(declare-fun ens%lib!linked_list.StuffAgree.impl&%6.agree. (lib!linked_list.StuffAgree.Instance. lib!linked_list.StuffAgree.x. lib!linked_list.StuffAgree.y.) Bool)
(assert (forall ((self! lib!linked_list.StuffAgree.Instance.) (param_token_x! lib!linked_list.StuffAgree.x.) (param_token_y! lib!linked_list.StuffAgree.y.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%6.agree. self! param_token_x! param_token_y!) (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. param_token_x!))))) (lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? (Poly%lib!linked_list.StuffAgree.y. param_token_y!))))))) :pattern ((ens%lib!linked_list.StuffAgree.impl&%6.agree. self! param_token_x! param_token_y!)))))
(set-info :comment ";; Function-Specs lib::layout::block_size_ge_word")
(declare-fun ens%lib!layout.block_size_ge_word. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!layout.block_size_ge_word. no%param) (forall ((p$ Poly) (block_id$ Poly)) (! (=> (and (has_type p$ (PTR $ (UINT 8))) (has_type block_id$ TYPE%lib!tokens.BlockId.)) (=> (lib!layout.is_block_ptr.? p$ block_id$) (>= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. block_id$)) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)))) :pattern ((lib!layout.is_block_ptr.? p$ block_id$))))) :pattern ((ens%lib!layout.block_size_ge_word. no%param)))))
(set-info :comment ";; Function-Specs lib::linked_list::size_of_node")
(declare-fun ens%lib!linked_list.size_of_node. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!linked_list.size_of_node. no%param) (and (= (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.) 8) (= (vstd!layout.align_of.? $ TYPE%lib!linked_list.Node.) 8))) :pattern ((ens%lib!linked_list.size_of_node. no%param)))))
(set-info :comment ";; Function-Def lib::linked_list::size_of_node")
(set-info :comment ";; linked_list.rs:52:1: 52:28 (#0)")
(set-info :comment ";; Function-Specs lib::layout::block_ptr_aligned_to_word")
(declare-fun ens%lib!layout.block_ptr_aligned_to_word. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!layout.block_ptr_aligned_to_word. no%param) (forall ((p$ Poly) (block_id$ Poly)) (! (=> (and (has_type p$ (PTR $ (UINT 8))) (has_type block_id$ TYPE%lib!tokens.BlockId.)) (=> (lib!layout.is_block_ptr.? p$ block_id$) (= (EucMod (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) p$) (vstd!layout.align_of.? $ TYPE%lib!linked_list.Node.)) 0))) :pattern ((lib!layout.is_block_ptr.? p$ block_id$))))) :pattern ((ens%lib!layout.block_ptr_aligned_to_word. no%param)))))
(set-info :comment ";; Function-Specs lib::layout::block_start_at_diff")
(declare-fun ens%lib!layout.block_start_at_diff. (lib!tokens.PageId. Int Int Int) Bool)
(assert (forall ((page_id! lib!tokens.PageId.) (block_size! Int) (block_idx1! Int) (block_idx2! Int)) (! (= (ens%lib!layout.block_start_at_diff. page_id! block_size! block_idx1! block_idx2!) (= (lib!layout.block_start_at.? (Poly%lib!tokens.PageId. page_id!) (I block_size!) (I block_idx2!)) (Add (lib!layout.block_start_at.? (Poly%lib!tokens.PageId. page_id!) (I block_size!) (I block_idx1!)) (Mul (Sub block_idx2! block_idx1!) block_size!)))) :pattern ((ens%lib!layout.block_start_at_diff. page_id! block_size! block_idx1! block_idx2!)))))
(set-info :comment ";; Function-Specs lib::layout::get_block_start_from_is_block_ptr")
(declare-fun req%lib!layout.get_block_start_from_is_block_ptr. (ptr_mut%<u8.>. lib!tokens.BlockId.) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((ptr! ptr_mut%<u8.>.) (block_id! lib!tokens.BlockId.)) (! (= (req%lib!layout.get_block_start_from_is_block_ptr. ptr! block_id!) (=> %%global_location_label%%59 (lib!layout.is_block_ptr.? (Poly%ptr_mut%<u8.>. ptr!) (Poly%lib!tokens.BlockId. block_id!)))) :pattern ((req%lib!layout.get_block_start_from_is_block_ptr. ptr! block_id!)))))
(declare-fun ens%lib!layout.get_block_start_from_is_block_ptr. (ptr_mut%<u8.>. lib!tokens.BlockId.) Bool)
(assert (forall ((ptr! ptr_mut%<u8.>.) (block_id! lib!tokens.BlockId.)) (! (= (ens%lib!layout.get_block_start_from_is_block_ptr. ptr! block_id!) (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. ptr!)) (lib!layout.block_start.? (Poly%lib!tokens.BlockId. block_id!)))) :pattern ((ens%lib!layout.get_block_start_from_is_block_ptr. ptr! block_id!)))))
(set-info :comment ";; Function-Specs lib::layout::get_block_start_defn")
(declare-fun ens%lib!layout.get_block_start_defn. (lib!tokens.BlockId.) Bool)
(assert (forall ((block_id! lib!tokens.BlockId.)) (! (= (ens%lib!layout.get_block_start_defn. block_id!) (= (lib!layout.block_start.? (Poly%lib!tokens.BlockId. block_id!)) (lib!layout.block_start_at.? (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id!)))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id!)))) (I (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. block_id!))))))) :pattern ((ens%lib!layout.get_block_start_defn. block_id!)))))
(set-info :comment ";; Function-Specs lib::pigeonhole::pigeonhole_missing_idx_implies_double")
(declare-fun req%lib!pigeonhole.pigeonhole_missing_idx_implies_double. (vstd!map.Map<nat./nat.>. Int Int) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((m! vstd!map.Map<nat./nat.>.) (missing! Int) (len! Int)) (! (= (req%lib!pigeonhole.pigeonhole_missing_idx_implies_double. m! missing! len!) (and (=> %%global_location_label%%60 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (and (<= 0 (%I i$)) (< (%I i$) len!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$))))) (=> %%global_location_label%%61 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$) (and (let ((tmp%%$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) i$)))) (and (<= 0 tmp%%$) (< tmp%%$ len!))) (not (= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) i$)) missing!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$))))) (=> %%global_location_label%%62 (and (<= 0 missing!) (< missing! len!))))) :pattern ((req%lib!pigeonhole.pigeonhole_missing_idx_implies_double. m! missing! len!)))))
(declare-fun ens%lib!pigeonhole.pigeonhole_missing_idx_implies_double. (vstd!map.Map<nat./nat.>. Int Int tuple%2.) Bool)
(assert (forall ((m! vstd!map.Map<nat./nat.>.) (missing! Int) (len! Int) (r! tuple%2.)) (! (= (ens%lib!pigeonhole.pigeonhole_missing_idx_implies_double. m! missing! len! r!) (and (has_type (Poly%tuple%2. r!) (TYPE%tuple%2. $ NAT $ NAT)) (let ((i$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. r!)))))) (let ((j$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. r!)))))) (and (and (and (not (= i$ j$)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) (I i$))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) (I j$))) (= (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) (I i$)) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) (I j$)))))))) :pattern ((ens%lib!pigeonhole.pigeonhole_missing_idx_implies_double. m! missing! len! r!)))))
(set-info :comment ";; Function-Specs lib::pigeonhole::pigeonhole_too_many_elements_implies_double")
(declare-fun req%lib!pigeonhole.pigeonhole_too_many_elements_implies_double. (vstd!map.Map<nat./nat.>. Int) Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((m! vstd!map.Map<nat./nat.>.) (len! Int)) (! (= (req%lib!pigeonhole.pigeonhole_too_many_elements_implies_double. m! len!) (and (=> %%global_location_label%%63 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (and (<= 0 (%I i$)) (< (%I i$) (nClip (Add len! 1)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$))))) (=> %%global_location_label%%64 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$) (let ((tmp%%$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) i$)))) (and (<= 0 tmp%%$) (< tmp%%$ len!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$))))))) :pattern ((req%lib!pigeonhole.pigeonhole_too_many_elements_implies_double. m! len!)))))
(declare-fun ens%lib!pigeonhole.pigeonhole_too_many_elements_implies_double. (vstd!map.Map<nat./nat.>. Int tuple%2.) Bool)
(assert (forall ((m! vstd!map.Map<nat./nat.>.) (len! Int) (r! tuple%2.)) (! (= (ens%lib!pigeonhole.pigeonhole_too_many_elements_implies_double. m! len! r!) (and (has_type (Poly%tuple%2. r!) (TYPE%tuple%2. $ NAT $ NAT)) (let ((i$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. r!)))))) (let ((j$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. r!)))))) (and (and (and (not (= i$ j$)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) (I i$))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) (I j$))) (= (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) (I i$)) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) (I j$)))))))) :pattern ((ens%lib!pigeonhole.pigeonhole_too_many_elements_implies_double. m! len! r!)))))
(set-info :comment ";; Function-Specs lib::linked_list::LL::insert_block")
(declare-fun req%lib!linked_list.impl&%2.insert_block. (lib!linked_list.LL. ptr_mut%<u8.>. vstd!raw_ptr.PointsToRaw. lib!tokens.Mim.block.) Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (ptr! ptr_mut%<u8.>.) (points_to_raw! vstd!raw_ptr.PointsToRaw.) (block_token! lib!tokens.Mim.block.)) (! (= (req%lib!linked_list.impl&%2.insert_block. pre%self! ptr! points_to_raw! block_token!) (and (=> %%global_location_label%%65 (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. pre%self!))) (=> %%global_location_label%%66 (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. ptr!))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!))))))))))) (=> %%global_location_label%%67 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. ptr!)))))) (=> %%global_location_label%%68 (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!))))) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!)))) (=> %%global_location_label%%69 (lib!layout.is_block_ptr.? (Poly%ptr_mut%<u8.>. ptr!) (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (=> %%global_location_label%%70 (=> (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!)) (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!)))))) (=> %%global_location_label%%71 (is-core!option.Option./None_ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!)))))) :pattern ((req%lib!linked_list.impl&%2.insert_block. pre%self! ptr! points_to_raw! block_token!)))))
(declare-fun ens%lib!linked_list.impl&%2.insert_block. (lib!linked_list.LL. lib!linked_list.LL. ptr_mut%<u8.>. vstd!raw_ptr.PointsToRaw. lib!tokens.Mim.block.) Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (self! lib!linked_list.LL.) (ptr! ptr_mut%<u8.>.) (points_to_raw! vstd!raw_ptr.PointsToRaw.) (block_token! lib!tokens.Mim.block.)) (! (= (ens%lib!linked_list.impl&%2.insert_block. pre%self! self! ptr! points_to_raw! block_token!) (and (has_type (Poly%lib!linked_list.LL. self!) TYPE%lib!linked_list.LL.) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) (nClip (Add (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%self!)) 1))) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!))))) :pattern ((ens%lib!linked_list.impl&%2.insert_block. pre%self! self! ptr! points_to_raw! block_token!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::insert_block")
(set-info :comment ";; linked_list.rs:172:5: 172:138 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::ghost_insert_block")
(declare-fun req%lib!linked_list.impl&%2.ghost_insert_block. (lib!linked_list.LL. ptr_mut%<lib!linked_list.Node.>. vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. vstd!raw_ptr.PointsToRaw. lib!tokens.Mim.block. vstd!raw_ptr.IsExposed.) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (ptr! ptr_mut%<lib!linked_list.Node.>.) (points_to_ptr! vstd!raw_ptr.PointsTo<lib!linked_list.Node.>.) (points_to_raw! vstd!raw_ptr.PointsToRaw.) (block_token! lib!tokens.Mim.block.) (is_exposed! vstd!raw_ptr.IsExposed.)) (! (= (req%lib!linked_list.impl&%2.ghost_insert_block. pre%self! ptr! points_to_ptr! points_to_raw! block_token! is_exposed!) (and (=> %%global_location_label%%72 (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. pre%self!))) (=> %%global_location_label%%73 (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!))))) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!)))) (=> %%global_location_label%%74 (lib!layout.is_block_ptr.? (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? $ TYPE%lib!linked_list.Node. $ (UINT 8) (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)) (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (=> %%global_location_label%%75 (= (%Poly%ptr_mut%<lib!linked_list.Node.>. (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. points_to_ptr!))))) ptr!)) (=> %%global_location_label%%76 (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. points_to_ptr!)))))) (=> %%global_location_label%%77 (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.Node./Node/ptr (%Poly%lib!linked_list.Node. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. points_to_ptr!))))))))))))) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.impl&%2.ptr.? (Poly%lib!linked_list.LL. pre%self!)))))))) (=> %%global_location_label%%78 (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.Node./Node/ptr (%Poly%lib!linked_list.Node. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. points_to_ptr!))))))))))))) vstd!raw_ptr.Metadata./Thin)) (=> %%global_location_label%%79 (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!) (I (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))) (I (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))))) (=> %%global_location_label%%80 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!)) (vstd!raw_ptr.impl&%10.provenance.? (Poly%vstd!raw_ptr.IsExposed. is_exposed!)))) (=> %%global_location_label%%81 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw!)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)))))) (=> %%global_location_label%%82 (>= (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)) 0)) (=> %%global_location_label%%83 (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)))) vstd!raw_ptr.Metadata./Thin)) (=> %%global_location_label%%84 (=> (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!)) (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!)))))) (=> %%global_location_label%%85 (let ((tmp%%$ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!)))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (lib!tokens.BlockState./BlockState/heap_id (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. (lib!tokens.Mim.block_token_data./block_token_data/value (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token!)))))))) (core!option.Option./Some (Poly%lib!tokens.HeapId. heap_id$))))))))) :pattern ((req%lib!linked_list.impl&%2.ghost_insert_block. pre%self! ptr! points_to_ptr! points_to_raw! block_token! is_exposed!)))))
(declare-fun ens%lib!linked_list.impl&%2.ghost_insert_block. (lib!linked_list.LL. lib!linked_list.LL. ptr_mut%<lib!linked_list.Node.>. vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. vstd!raw_ptr.PointsToRaw. lib!tokens.Mim.block. vstd!raw_ptr.IsExposed.) Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (self! lib!linked_list.LL.) (ptr! ptr_mut%<lib!linked_list.Node.>.) (points_to_ptr! vstd!raw_ptr.PointsTo<lib!linked_list.Node.>.) (points_to_raw! vstd!raw_ptr.PointsToRaw.) (block_token! lib!tokens.Mim.block.) (is_exposed! vstd!raw_ptr.IsExposed.)) (! (= (ens%lib!linked_list.impl&%2.ghost_insert_block. pre%self! self! ptr! points_to_ptr! points_to_raw! block_token! is_exposed!) (and (has_type (Poly%lib!linked_list.LL. self!) TYPE%lib!linked_list.LL.) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) (nClip (Add (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%self!)) 1))) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.ptr.? (Poly%lib!linked_list.LL. self!)) ptr!))) :pattern ((ens%lib!linked_list.impl&%2.ghost_insert_block. pre%self! self! ptr! points_to_ptr! points_to_raw! block_token! is_exposed!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::ghost_insert_block")
(set-info :comment ";; linked_list.rs:253:5: 260:7 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::is_empty_iff_null")
(declare-fun req%lib!linked_list.impl&%2.is_empty_iff_null. (lib!linked_list.LL.) Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((self! lib!linked_list.LL.)) (! (= (req%lib!linked_list.impl&%2.is_empty_iff_null. self!) (=> %%global_location_label%%86 (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)))) :pattern ((req%lib!linked_list.impl&%2.is_empty_iff_null. self!)))))
(declare-fun ens%lib!linked_list.impl&%2.is_empty_iff_null. (lib!linked_list.LL.) Bool)
(assert (forall ((self! lib!linked_list.LL.)) (! (= (ens%lib!linked_list.impl&%2.is_empty_iff_null. self!) (= (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) 0) (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. (lib!linked_list.LL./LL/first (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. self!))))))) 0))) :pattern ((ens%lib!linked_list.impl&%2.is_empty_iff_null. self!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::is_empty_iff_null")
(set-info :comment ";; linked_list.rs:335:11: 335:46 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::is_empty")
(declare-fun req%lib!linked_list.impl&%2.is_empty. (lib!linked_list.LL.) Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((self! lib!linked_list.LL.)) (! (= (req%lib!linked_list.impl&%2.is_empty. self!) (=> %%global_location_label%%87 (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)))) :pattern ((req%lib!linked_list.impl&%2.is_empty. self!)))))
(declare-fun ens%lib!linked_list.impl&%2.is_empty. (lib!linked_list.LL. Bool) Bool)
(assert (forall ((self! lib!linked_list.LL.) (b! Bool)) (! (= (ens%lib!linked_list.impl&%2.is_empty. self! b!) (= b! (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) 0))) :pattern ((ens%lib!linked_list.impl&%2.is_empty. self! b!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::is_empty")
(set-info :comment ";; linked_list.rs:352:5: 352:39 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::pop_block")
(declare-fun req%lib!linked_list.impl&%2.pop_block. (lib!linked_list.LL.) Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(assert (forall ((pre%self! lib!linked_list.LL.)) (! (= (req%lib!linked_list.impl&%2.pop_block. pre%self!) (and (=> %%global_location_label%%88 (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. pre%self!))) (=> %%global_location_label%%89 (not (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%self!)) 0))))) :pattern ((req%lib!linked_list.impl&%2.pop_block. pre%self!)))))
(declare-fun ens%lib!linked_list.impl&%2.pop_block. (lib!linked_list.LL. lib!linked_list.LL. tuple%3.) Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (self! lib!linked_list.LL.) (x! tuple%3.)) (! (= (ens%lib!linked_list.impl&%2.pop_block. pre%self! self! x!) (and (has_type (Poly%tuple%3. x!) (TYPE%tuple%3. $ (PTR $ (UINT 8)) (TRACKED $) TYPE%vstd!raw_ptr.PointsToRaw. (TRACKED $) TYPE%lib!tokens.Mim.block.)) (has_type (Poly%lib!linked_list.LL. self!) TYPE%lib!linked_list.LL.) (let ((ptr$ (%Poly%ptr_mut%<u8.>. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. x!)))))) (let ((points_to$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. x!)))))) (let ((block_token$ (%Poly%lib!tokens.Mim.block. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. x!)))))) (and (and (and (and (and (and (and (and (and (and (and (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!)))) (= (nClip (Add (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) 1)) (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%self!)))) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!)))) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!)))) (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!)))) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!)))) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. points_to$) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. ptr$))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to$)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. ptr$)))))) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!)))) (lib!layout.is_block_ptr.? (Poly%ptr_mut%<u8.>. ptr$) (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (=> (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. self!)) (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. self!))) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. self!)))))) (let ((tmp%%$ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. self!)))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (lib!tokens.BlockState./BlockState/heap_id (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. (lib!tokens.Mim.block_token_data./block_token_data/value (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (core!option.Option./Some (Poly%lib!tokens.HeapId. heap_id$)))))))))))) :pattern ((ens%lib!linked_list.impl&%2.pop_block. pre%self! self! x!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::pop_block")
(set-info :comment ";; linked_list.rs:363:5: 363:92 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::block_write_ptr")
(declare-fun req%lib!linked_list.impl&%2.block_write_ptr. (ptr_mut%<lib!linked_list.Node.>. vstd!raw_ptr.PointsToRaw. ptr_mut%<lib!linked_list.Node.>.) Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((ptr! ptr_mut%<lib!linked_list.Node.>.) (perm! vstd!raw_ptr.PointsToRaw.) (next! ptr_mut%<lib!linked_list.Node.>.)) (! (= (req%lib!linked_list.impl&%2.block_write_ptr. ptr! perm! next!) (and (=> %%global_location_label%%90 (vstd!raw_ptr.impl&%11.contains_range.? (Poly%vstd!raw_ptr.PointsToRaw. perm!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!))) (I (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)))) (=> %%global_location_label%%91 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. perm!)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)))))) (=> %%global_location_label%%92 (= (EucMod (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)) (vstd!layout.align_of.? $ TYPE%lib!linked_list.Node.)) 0)) (=> %%global_location_label%%93 (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)))) vstd!raw_ptr.Metadata./Thin)))) :pattern ((req%lib!linked_list.impl&%2.block_write_ptr. ptr! perm! next!)))))
(declare-fun ens%lib!linked_list.impl&%2.block_write_ptr. (ptr_mut%<lib!linked_list.Node.>. vstd!raw_ptr.PointsToRaw. ptr_mut%<lib!linked_list.Node.>. tuple%2.) Bool)
(assert (forall ((ptr! ptr_mut%<lib!linked_list.Node.>.) (perm! vstd!raw_ptr.PointsToRaw.) (next! ptr_mut%<lib!linked_list.Node.>.) (res! tuple%2.)) (! (= (ens%lib!linked_list.impl&%2.block_write_ptr. ptr! perm! next! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. (TRACKED $) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (TRACKED $) TYPE%vstd!raw_ptr.PointsToRaw.)) (let ((points_to$ (%Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) (let ((points_to_raw$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) (and (and (and (= (%Poly%ptr_mut%<lib!linked_list.Node.>. (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. points_to$))))) ptr!) (= (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. points_to$)))) (vstd!raw_ptr.MemContents./Init (Poly%lib!linked_list.Node. (lib!linked_list.Node./Node (%Poly%ptr_mut%<lib!linked_list.Node.>. (Poly%ptr_mut%<lib!linked_list.Node.>. next!))))))) (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw$)) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. perm!))) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!))) (I (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to_raw$)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!linked_list.Node.) (Poly%ptr_mut%<lib!linked_list.Node.>. ptr!)))))))))) :pattern ((ens%lib!linked_list.impl&%2.block_write_ptr. ptr! perm! next! res!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::block_write_ptr")
(set-info :comment ";; linked_list.rs:444:5: 445:65 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::new")
(declare-fun ens%lib!linked_list.impl&%2.new. (lib!tokens.PageId. Bool lib!tokens.Mim.Instance. Int core!option.Option. lib!linked_list.LL.) Bool)
(assert (forall ((page_id! lib!tokens.PageId.) (fixed_page! Bool) (instance! lib!tokens.Mim.Instance.) (block_size! Int) (heap_id! core!option.Option.) (ll! lib!linked_list.LL.)) (! (= (ens%lib!linked_list.impl&%2.new. page_id! fixed_page! instance! block_size! heap_id! ll!) (and (has_type (Poly%lib!linked_list.LL. ll!) TYPE%lib!linked_list.LL.) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. ll!)) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. ll!)) page_id!) (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. ll!)) fixed_page!) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. ll!)) instance!) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. ll!)) block_size!) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. ll!)) heap_id!) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. ll!)) 0))) :pattern ((ens%lib!linked_list.impl&%2.new. page_id! fixed_page! instance! block_size! heap_id! ll!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::new")
(set-info :comment ";; linked_list.rs:471:5: 476:17 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::empty")
(declare-fun ens%lib!linked_list.impl&%2.empty. (Int lib!linked_list.LL.) Bool)
(assert (forall ((no%param Int) (ll! lib!linked_list.LL.)) (! (= (ens%lib!linked_list.impl&%2.empty. no%param ll!) (and (has_type (Poly%lib!linked_list.LL. ll!) TYPE%lib!linked_list.LL.) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. ll!)) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. ll!)) 0))) :pattern ((ens%lib!linked_list.impl&%2.empty. no%param ll!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::empty")
(set-info :comment ";; linked_list.rs:495:5: 495:30 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::set_ghost_data")
(declare-fun req%lib!linked_list.impl&%2.set_ghost_data. (lib!linked_list.LL. lib!tokens.PageId. Bool lib!tokens.Mim.Instance. Int core!option.Option.) Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (page_id! lib!tokens.PageId.) (fixed_page! Bool) (instance! lib!tokens.Mim.Instance.) (block_size! Int) (heap_id! core!option.Option.)) (! (= (req%lib!linked_list.impl&%2.set_ghost_data. pre%self! page_id! fixed_page! instance! block_size! heap_id!) (and (=> %%global_location_label%%94 (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. pre%self!))) (=> %%global_location_label%%95 (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%self!)) 0)))) :pattern ((req%lib!linked_list.impl&%2.set_ghost_data. pre%self! page_id! fixed_page! instance! block_size! heap_id!)))))
(declare-fun ens%lib!linked_list.impl&%2.set_ghost_data. (lib!linked_list.LL. lib!linked_list.LL. lib!tokens.PageId. Bool lib!tokens.Mim.Instance. Int core!option.Option.) Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (self! lib!linked_list.LL.) (page_id! lib!tokens.PageId.) (fixed_page! Bool) (instance! lib!tokens.Mim.Instance.) (block_size! Int) (heap_id! core!option.Option.)) (! (= (ens%lib!linked_list.impl&%2.set_ghost_data. pre%self! self! page_id! fixed_page! instance! block_size! heap_id!) (and (has_type (Poly%lib!linked_list.LL. self!) TYPE%lib!linked_list.LL.) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. self!)) page_id!) (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. self!)) fixed_page!) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. self!)) instance!) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. self!)) block_size!) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. self!)) heap_id!) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) 0))) :pattern ((ens%lib!linked_list.impl&%2.set_ghost_data. pre%self! self! page_id! fixed_page! instance! block_size! heap_id!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::set_ghost_data")
(set-info :comment ";; linked_list.rs:504:5: 511:6 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::append")
(declare-fun req%lib!linked_list.impl&%2.append. (lib!linked_list.LL. lib!linked_list.LL.) Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(declare-const %%global_location_label%%103 Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (pre%other! lib!linked_list.LL.)) (! (= (req%lib!linked_list.impl&%2.append. pre%self! pre%other!) (and (=> %%global_location_label%%96 (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. pre%self!)) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. pre%other!)))) (=> %%global_location_label%%97 (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!)) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%other!)))) (=> %%global_location_label%%98 (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!)) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%other!)))) (=> %%global_location_label%%99 (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!)) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%other!)))) (=> %%global_location_label%%100 (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!)) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%other!)))) (=> %%global_location_label%%101 (is-core!option.Option./None_ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!)))) (=> %%global_location_label%%102 (is-core!option.Option./None_ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%other!)))) (=> %%global_location_label%%103 (< (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%other!)) 4294967295)))) :pattern ((req%lib!linked_list.impl&%2.append. pre%self! pre%other!)))))
(declare-fun ens%lib!linked_list.impl&%2.append. (lib!linked_list.LL. lib!linked_list.LL. lib!linked_list.LL. lib!linked_list.LL. Int) Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (self! lib!linked_list.LL.) (pre%other! lib!linked_list.LL.) (other! lib!linked_list.LL.) (other_len! Int)) (! (= (ens%lib!linked_list.impl&%2.append. pre%self! self! pre%other! other! other_len!) (and (uInv 32 other_len!) (has_type (Poly%lib!linked_list.LL. self!) TYPE%lib!linked_list.LL.) (has_type (Poly%lib!linked_list.LL. other!) TYPE%lib!linked_list.LL.) (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. other!))) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. other!)) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%other!))) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. other!)) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%other!))) (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. other!)) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%other!))) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. other!)) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%other!))) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. other!)) (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%other!))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) (nClip (Add (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%self!)) (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%other!))))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. other!)) 0) (= other_len! (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%other!))))) :pattern ((ens%lib!linked_list.impl&%2.append. pre%self! self! pre%other! other! other_len!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::append")
(set-info :comment ";; linked_list.rs:576:9: 607:10 (#0)")
(set-info :comment ";; Function-Def lib::linked_list::LL::append")
(set-info :comment ";; linked_list.rs:537:5: 537:64 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::prepend_contiguous_blocks")
(declare-fun req%lib!linked_list.impl&%2.prepend_contiguous_blocks. (lib!linked_list.LL. ptr_mut%<u8.>. ptr_mut%<u8.>. Int Int Int vstd!raw_ptr.PointsToRaw. vstd!map.Map<int./lib!tokens.Mim.block.>.) Bool)
(declare-const %%global_location_label%%104 Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(declare-const %%global_location_label%%119 Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (start! ptr_mut%<u8.>.) (last! ptr_mut%<u8.>.) (bsize! Int) (cap! Int) (extend! Int) (pre%points_to_raw_r! vstd!raw_ptr.PointsToRaw.) (pre%tokens! vstd!map.Map<int./lib!tokens.Mim.block.>.)) (! (= (req%lib!linked_list.impl&%2.prepend_contiguous_blocks. pre%self! start! last! bsize! cap! extend! pre%points_to_raw_r! pre%tokens!) (and (=> %%global_location_label%%104 (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. pre%self!))) (=> %%global_location_label%%105 (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!))) (=> %%global_location_label%%106 (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!)) bsize!)) (=> %%global_location_label%%107 (is-core!option.Option./None_ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!)))) (=> %%global_location_label%%108 (<= lib!config.INTPTR_SIZE.? bsize!)) (=> %%global_location_label%%109 (= (EucMod (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. start!)) lib!config.INTPTR_SIZE.?) 0)) (=> %%global_location_label%%110 (= (EucMod bsize! lib!config.INTPTR_SIZE.?) 0)) (=> %%global_location_label%%111 (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. pre%points_to_raw_r!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. start!))) (I (Mul extend! bsize!)))) (=> %%global_location_label%%112 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. pre%points_to_raw_r!)) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. start!)))))) (=> %%global_location_label%%113 (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. start!)))) vstd!raw_ptr.Metadata./Thin)) (=> %%global_location_label%%114 (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. start!)))) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!)))))))))) (=> %%global_location_label%%115 (<= (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. start!)) (Mul extend! bsize!)) (- (uHi SZ) 1))) (=> %%global_location_label%%116 (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. start!)) (lib!layout.block_start_at.? (Poly%lib!tokens.PageId. (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))) (I (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!))) (I cap!)))) (=> %%global_location_label%%117 (>= extend! 1)) (=> %%global_location_label%%118 (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. last!)) (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. start!)) (Mul (Sub extend! 1) bsize!)))) (=> %%global_location_label%%119 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= cap! (%I i$)) (< (%I i$) (nClip (Add cap! extend!)))) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!)) i$))))) (=> %%global_location_label%%120 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= cap! (%I i$)) (< (%I i$) (nClip (Add cap! extend!)))) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$))))) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$))))) (=> %%global_location_label%%121 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= cap! (%I i$)) (< (%I i$) (nClip (Add cap! extend!)))) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$)))))))) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$))))) (=> %%global_location_label%%122 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= cap! (%I i$)) (< (%I i$) (nClip (Add cap! extend!)))) (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$)))))))) (%I i$)))) :pattern ((vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$))))) (=> %%global_location_label%%123 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= cap! (%I i$)) (< (%I i$) (nClip (Add cap! extend!)))) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$)))))))) bsize!))) :pattern ((vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$))))) (=> %%global_location_label%%124 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= cap! (%I i$)) (< (%I i$) (nClip (Add cap! extend!)))) (lib!layout.is_block_ptr1.? (I (lib!layout.block_start.? (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$)))))))) (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$))))))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) i$))))))) :pattern ((req%lib!linked_list.impl&%2.prepend_contiguous_blocks. pre%self! start! last! bsize! cap! extend! pre%points_to_raw_r! pre%tokens!)))))
(declare-fun ens%lib!linked_list.impl&%2.prepend_contiguous_blocks. (lib!linked_list.LL. lib!linked_list.LL. ptr_mut%<u8.>. ptr_mut%<u8.>. Int Int Int vstd!raw_ptr.PointsToRaw. vstd!raw_ptr.PointsToRaw. vstd!map.Map<int./lib!tokens.Mim.block.>. vstd!map.Map<int./lib!tokens.Mim.block.>.) Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (self! lib!linked_list.LL.) (start! ptr_mut%<u8.>.) (last! ptr_mut%<u8.>.) (bsize! Int) (cap! Int) (extend! Int) (pre%points_to_raw_r! vstd!raw_ptr.PointsToRaw.) (points_to_raw_r! vstd!raw_ptr.PointsToRaw.) (pre%tokens! vstd!map.Map<int./lib!tokens.Mim.block.>.) (tokens! vstd!map.Map<int./lib!tokens.Mim.block.>.)) (! (= (ens%lib!linked_list.impl&%2.prepend_contiguous_blocks. pre%self! self! start! last! bsize! cap! extend! pre%points_to_raw_r! points_to_raw_r! pre%tokens! tokens!) (and (has_type (Poly%lib!linked_list.LL. self!) TYPE%lib!linked_list.LL.) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. self!)) (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) (nClip (Add (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%self!)) extend!))) (= tokens! (%Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. (vstd!map_lib.impl&%0.remove_keys.? $ INT $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<int./lib!tokens.Mim.block.>. pre%tokens!) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? (I cap!) (I (Add cap! extend!))))))))) :pattern ((ens%lib!linked_list.impl&%2.prepend_contiguous_blocks. pre%self! self! start! last! bsize! cap! extend! pre%points_to_raw_r! points_to_raw_r! pre%tokens! tokens!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::prepend_contiguous_blocks")
(set-info :comment ";; linked_list.rs:761:9: 877:10 (#0)")
(set-info :comment ";; Function-Def lib::linked_list::LL::prepend_contiguous_blocks")
(set-info :comment ";; linked_list.rs:692:5: 703:6 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::convene_pt_map")
(declare-fun req%lib!linked_list.impl&%2.convene_pt_map. (vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. Int lib!tokens.Mim.Instance. lib!tokens.PageId. Int) Bool)
(declare-const %%global_location_label%%125 Bool)
(assert (forall ((m! vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.) (len! Int) (instance! lib!tokens.Mim.Instance.) (page_id! lib!tokens.PageId.) (block_size! Int)) (! (= (req%lib!linked_list.impl&%2.convene_pt_map. m! len! instance! page_id! block_size!) (=> %%global_location_label%%125 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (and (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. m!)) i$) (and (<= 0 (%I i$)) (< (%I i$) len!))) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. m!)) i$) (let ((tmp%%$ (%Poly%tuple%4. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. m!) i$)))) (let ((perm$ (%Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((padding$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((block_token$ (%Poly%lib!tokens.Mim.block. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((exposed$ (%Poly%vstd!raw_ptr.IsExposed. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (and (and (and (and (and (and (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))) (>= (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)) 0)) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. padding$) (I (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!linked_list.Node. (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))) (I (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. padding$)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. padding$)) (vstd!raw_ptr.impl&%10.provenance.? (Poly%vstd!raw_ptr.IsExposed. exposed$)))) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))) instance!)) (lib!layout.is_block_ptr.? (vstd!raw_ptr.spec_cast_ptr_to_thin_ptr.? $ TYPE%lib!linked_list.Node. $ (UINT 8) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) (Poly%vstd!raw_ptr.PointsTo<lib!linked_list.Node.>. perm$))))) (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) page_id!)) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) block_size!)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%4. $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!linked_list.Node.) $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block. $ TYPE%vstd!raw_ptr.IsExposed.) (Poly%vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. m!)) i$)))))) :pattern ((req%lib!linked_list.impl&%2.convene_pt_map. m! len! instance! page_id! block_size!)))))
(declare-fun ens%lib!linked_list.impl&%2.convene_pt_map. (vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>. Int lib!tokens.Mim.Instance. lib!tokens.PageId. Int vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.) Bool)
(assert (forall ((m! vstd!map.Map<nat./tuple%4<vstd!raw_ptr.PointsTo<lib!linked_list.Node.>./vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block./vstd!raw_ptr.IsExposed.>.>.) (len! Int) (instance! lib!tokens.Mim.Instance.) (page_id! lib!tokens.PageId.) (block_size! Int) (m2! vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)) (! (= (ens%lib!linked_list.impl&%2.convene_pt_map. m! len! instance! page_id! block_size! m2!) (and (= (vstd!map.impl&%0.len.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m2!)) len!) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m2!))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (and (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m2!)) i$) (and (<= 0 (%I i$)) (< (%I i$) len!))) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m2!)) i$) (let ((tmp%%$ (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m2!) i$)))) (let ((padding$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((block_token$ (%Poly%lib!tokens.Mim.block. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (and (and (and (>= (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)) 0) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. padding$) (I (lib!layout.block_start.? (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. padding$)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))))))) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))) instance!)) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) page_id!)) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) block_size!)))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m2!)) i$)))))) :pattern ((ens%lib!linked_list.impl&%2.convene_pt_map. m! len! instance! page_id! block_size! m2!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::convene_pt_map")
(set-info :comment ";; linked_list.rs:1055:5: 1061:58 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::make_empty")
(declare-fun req%lib!linked_list.impl&%2.make_empty. (lib!linked_list.LL.) Bool)
(declare-const %%global_location_label%%126 Bool)
(declare-const %%global_location_label%%127 Bool)
(assert (forall ((pre%self! lib!linked_list.LL.)) (! (= (req%lib!linked_list.impl&%2.make_empty. pre%self!) (and (=> %%global_location_label%%126 (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. pre%self!))) (=> %%global_location_label%%127 (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. pre%self!))))) :pattern ((req%lib!linked_list.impl&%2.make_empty. pre%self!)))))
(declare-fun ens%lib!linked_list.impl&%2.make_empty. (lib!linked_list.LL. lib!linked_list.LL. lib!linked_list.LLGhostStateToReconvene.) Bool)
(assert (forall ((pre%self! lib!linked_list.LL.) (self! lib!linked_list.LL.) (llgstr! lib!linked_list.LLGhostStateToReconvene.)) (! (= (ens%lib!linked_list.impl&%2.make_empty. pre%self! self! llgstr!) (and (has_type (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!) TYPE%lib!linked_list.LLGhostStateToReconvene.) (has_type (Poly%lib!linked_list.LL. self!) TYPE%lib!linked_list.LL.) (lib!linked_list.llgstr_wf.? (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!)) (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!))) (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!))) (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. pre%self!))) (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!))) (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. pre%self!))) (= (vstd!map.impl&%0.len.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!))))) (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. pre%self!))) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. self!)) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. self!)) 0))) :pattern ((ens%lib!linked_list.impl&%2.make_empty. pre%self! self! llgstr!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::make_empty")
(set-info :comment ";; linked_list.rs:993:5: 993:78 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::lemma_nat_range")
(declare-fun req%lib!linked_list.lemma_nat_range. (Int Int) Bool)
(declare-const %%global_location_label%%128 Bool)
(assert (forall ((lo! Int) (hi! Int)) (! (= (req%lib!linked_list.lemma_nat_range. lo! hi!) (=> %%global_location_label%%128 (<= lo! hi!))) :pattern ((req%lib!linked_list.lemma_nat_range. lo! hi!)))))
(declare-fun ens%lib!linked_list.lemma_nat_range. (Int Int) Bool)
(assert (forall ((lo! Int) (hi! Int)) (! (= (ens%lib!linked_list.lemma_nat_range. lo! hi!) (and (vstd!set.impl&%0.finite.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!linked_list.set_nat_range.? (I lo!) (I hi!)))) (= (vstd!set.impl&%0.len.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!linked_list.set_nat_range.? (I lo!) (I hi!)))) (Sub hi! lo!)))) :pattern ((ens%lib!linked_list.lemma_nat_range. lo! hi!)))))
(set-info :comment ";; Function-Def lib::linked_list::lemma_nat_range")
(set-info :comment ";; linked_list.rs:1324:1: 1324:47 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::llgstr_merge")
(declare-fun req%lib!linked_list.impl&%2.llgstr_merge. (lib!linked_list.LLGhostStateToReconvene. lib!linked_list.LLGhostStateToReconvene.) Bool)
(declare-const %%global_location_label%%129 Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(declare-const %%global_location_label%%132 Bool)
(declare-const %%global_location_label%%133 Bool)
(assert (forall ((llgstr1! lib!linked_list.LLGhostStateToReconvene.) (llgstr2! lib!linked_list.LLGhostStateToReconvene.)) (! (= (req%lib!linked_list.impl&%2.llgstr_merge. llgstr1! llgstr2!) (and (=> %%global_location_label%%129 (lib!linked_list.llgstr_wf.? (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr1!))) (=> %%global_location_label%%130 (lib!linked_list.llgstr_wf.? (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr2!))) (=> %%global_location_label%%131 (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr1!))) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr2!))))) (=> %%global_location_label%%132 (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr1!))) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr2!))))) (=> %%global_location_label%%133 (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr1!))) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr2!))))))) :pattern ((req%lib!linked_list.impl&%2.llgstr_merge. llgstr1! llgstr2!)))))
(declare-fun ens%lib!linked_list.impl&%2.llgstr_merge. (lib!linked_list.LLGhostStateToReconvene. lib!linked_list.LLGhostStateToReconvene. lib!linked_list.LLGhostStateToReconvene.) Bool)
(assert (forall ((llgstr1! lib!linked_list.LLGhostStateToReconvene.) (llgstr2! lib!linked_list.LLGhostStateToReconvene.) (llgstr! lib!linked_list.LLGhostStateToReconvene.)) (! (= (ens%lib!linked_list.impl&%2.llgstr_merge. llgstr1! llgstr2! llgstr!) (and (has_type (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!) TYPE%lib!linked_list.LLGhostStateToReconvene.) (lib!linked_list.llgstr_wf.? (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!)) (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!))) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/block_size (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr2!)))) (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!))) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/page_id (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr2!)))) (= (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!))) (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/instance (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr2!)))) (= (vstd!map.impl&%0.len.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr!))))) (nClip (Add (vstd!map.impl&%0.len.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr1!))))) (vstd!map.impl&%0.len.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. (lib!linked_list.LLGhostStateToReconvene./LLGhostStateToReconvene/map (%Poly%lib!linked_list.LLGhostStateToReconvene. (Poly%lib!linked_list.LLGhostStateToReconvene. llgstr2!)))))))))) :pattern ((ens%lib!linked_list.impl&%2.llgstr_merge. llgstr1! llgstr2! llgstr!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::llgstr_merge")
(set-info :comment ";; linked_list.rs:1178:5: 1181:50 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::LL::reconvene_rec")
(declare-fun req%lib!linked_list.impl&%2.reconvene_rec. (vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. Int lib!tokens.Mim.Instance. lib!tokens.PageId. Int) Bool)
(declare-const %%global_location_label%%134 Bool)
(declare-const %%global_location_label%%135 Bool)
(assert (forall ((m! vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.) (len! Int) (instance! lib!tokens.Mim.Instance.) (page_id! lib!tokens.PageId.) (block_size! Int)) (! (= (req%lib!linked_list.impl&%2.reconvene_rec. m! len! instance! page_id! block_size!) (and (=> %%global_location_label%%134 (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (and (<= 0 (%I j$)) (< (%I j$) len!)) (lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!) j$))) :pattern ((lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!) j$))))) (=> %%global_location_label%%135 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!)) i$) (let ((tmp%%$ (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!) i$)))) (let ((padding$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((block_token$ (%Poly%lib!tokens.Mim.block. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (and (and (and (>= (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)) 0) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. padding$) (I (lib!layout.block_start.? (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. padding$)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))))))) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))) instance!)) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) page_id!)) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) block_size!))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!)) i$))))))) :pattern ((req%lib!linked_list.impl&%2.reconvene_rec. m! len! instance! page_id! block_size!)))))
(declare-fun ens%lib!linked_list.impl&%2.reconvene_rec. (vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. Int lib!tokens.Mim.Instance. lib!tokens.PageId. Int tuple%2.) Bool)
(assert (forall ((m! vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.) (len! Int) (instance! lib!tokens.Mim.Instance.) (page_id! lib!tokens.PageId.) (block_size! Int) (res! tuple%2.)) (! (= (ens%lib!linked_list.impl&%2.reconvene_rec. m! len! instance! page_id! block_size! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.))) (let ((points_to$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) (let ((map$ (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) (and (and (and (and (and (and (and (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$))) (= (vstd!map.impl&%0.len.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) len!)) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id$)) page_id!))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$))))) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$) (= (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$) block_id$))))) (%Poly%lib!tokens.BlockId. block_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$))))) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$) block_id$))))) instance!))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$))))) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$) (let ((tmp%%$ (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id$)))) (and (<= 0 tmp%%$) (< tmp%%$ len!))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$))))) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. points_to$) (I (lib!layout.block_start_at.? (Poly%lib!tokens.PageId. page_id!) (I block_size!) (I 0))) (I (nClip (Mul len! block_size!))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to$)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))))))))))) :pattern ((ens%lib!linked_list.impl&%2.reconvene_rec. m! len! instance! page_id! block_size! res!)))))
(set-info :comment ";; Function-Def lib::linked_list::LL::reconvene_rec")
(set-info :comment ";; linked_list.rs:1247:5: 1253:63 (#0)")
(declare-const res! tuple%2.)
(declare-const m! vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)
(declare-const len! Int)
(declare-const instance! lib!tokens.Mim.Instance.)
(declare-const page_id! lib!tokens.PageId.)
(declare-const block_size! Int)
(declare-const tmp%1 vstd!raw_ptr.PointsToRaw.)
(declare-const tmp%2 vstd!raw_ptr.Provenance.)
(declare-const tmp%3 Poly)
(declare-const tmp%4 Bool)
(declare-const tmp%5 Poly)
(declare-const k@ Poly)
(declare-const tmp%6 Bool)
(declare-const tmp%7 Bool)
(declare-const p@ Int)
(declare-const tmp%8 Int)
(declare-const tmp%9 lib!tokens.BlockId.)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%13 Bool)
(declare-const tmp%14 lib!tokens.BlockId.)
(declare-const j@ Int)
(declare-const i@ Int)
(declare-const old_m@ vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)
(declare-const m@0 vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)
(declare-const tmp%%@ tuple%2.)
(declare-const ptraw@ vstd!raw_ptr.PointsToRaw.)
(declare-const block@ lib!tokens.Mim.block.)
(declare-const tmp%%$1@ tuple%2.)
(declare-const ptraw1@ vstd!raw_ptr.PointsToRaw.)
(declare-const blocks@0 vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)
(declare-const ptraw2@ vstd!raw_ptr.PointsToRaw.)
(declare-const old_blocks@ vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)
(declare-const tmp%15 tuple%2.)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (<= 0 len!))
(assert (has_type (Poly%lib!tokens.PageId. page_id!) TYPE%lib!tokens.PageId.))
(assert (<= 0 block_size!))
(assert (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (and (<= 0 (%I j$)) (< (%I j$) len!)) (lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!) j$))) :pattern ((lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!) j$)))))
(assert (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!)) i$) (let ((tmp%%$ (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!) i$)))) (let ((padding$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((block_token$ (%Poly%lib!tokens.Mim.block. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (and (and (and (>= (Sub (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (vstd!layout.size_of.? $ TYPE%lib!linked_list.Node.)) 0) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. padding$) (I (lib!layout.block_start.? (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. padding$)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))))))) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$))))) instance!)) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) page_id!)) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block_token$)))))))) block_size!))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!)) i$)))))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Dcr Type Poly Int Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly) (%%hole%%9 Int) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly)) (! (=> (exists ((i$1 Poly)) (! (and (has_type i$1 %%hole%%0) (and (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 i$1) (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 i$1)))))))))) %%hole%%9))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%10 %%hole%%11 %%hole%%12 i$1)))) (exists ((i$1 Poly)) (! (and (and (has_type i$1 %%hole%%0) (and (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 i$1) (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 i$1)))))))))) %%hole%%9))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) i$1)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%10 %%hole%%11 %%hole%%12 i$1))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12)))))
(declare-const m@1 vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>.)
(declare-const blocks@1 vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%13 Bool)
(assert (not (=> (= decrease%init0 len!) (or (and (=> (= len! 0) (=> (= tmp%2 (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!))))))) (=> (ens%vstd!raw_ptr.impl&%11.empty. tmp%2 tmp%1) (=> (ens%vstd!map.impl&%0.tracked_empty. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. tmp%3) (=> (= tmp%15 (tuple%2./tuple%2 (Poly%vstd!raw_ptr.PointsToRaw. tmp%1) tmp%3)) (=> (= m@1 m@0) (=> (= blocks@1 blocks@0) %%switch_label%%0))))))) (=> (not (= len! 0)) (=> (= j@ (nClip (Sub len! 1))) (=> (= tmp%4 (lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!) (I j@))) (and (=> %%location_label%%0 tmp%4) (=> tmp%4 (=> (= i@ (%I (as_type (%%choose%%0 NAT $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!)) $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!) j@ $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m!))) NAT))) (=> (= old_m@ m!) (=> (= m@0 m!) (and (=> %%location_label%%1 (req%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m@0) (I i@))) (=> (ens%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m@0) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m@1) (I i@) tmp%5) (=> (= tmp%%@ (%Poly%tuple%2. tmp%5)) (=> (= ptraw@ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= block@ (%Poly%lib!tokens.Mim.block. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (and (=> (has_type k@ NAT) (=> (and (<= 0 (%I k@)) (< (%I k@) (nClip (Sub len! 1)))) (=> (= tmp%6 (lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. old_m@) k@)) (and (=> %%location_label%%2 tmp%6) (=> tmp%6 (=> (= p@ (%I (as_type (%%choose%%0 NAT $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. old_m@)) $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. old_m@) (%I k@) $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. old_m@))) NAT))) (=> (= tmp%7 (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m@1)) (I p@)) (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%tuple%2. $ TYPE%vstd!raw_ptr.PointsToRaw. $ TYPE%lib!tokens.Mim.block.) (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m@1) (I p@))))))))))) (%I k@)))) (and (=> %%location_label%%3 tmp%7) (=> tmp%7 (=> %%location_label%%4 (lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m@1) k@))))))))))) (=> (forall ((k$ Poly)) (! (=> (has_type k$ NAT) (=> (and (<= 0 (%I k$)) (< (%I k$) (nClip (Sub len! 1)))) (lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m@1) k$))) :pattern ((lib!linked_list.has_idx.? (Poly%vstd!map.Map<nat./tuple%2<vstd!raw_ptr.PointsToRaw./lib!tokens.Mim.block.>.>. m@1) k$)))) (=> (= tmp%8 (nClip (Sub len! 1))) (and (=> %%location_label%%5 (check_decrease_int (let ((m!$0 m@1) (len!$1 tmp%8) (instance!$2 instance!) (page_id!$3 page_id!) (block_size!$4 block_size!)) len!$1) decrease%init0 false)) (and (=> %%location_label%%6 (req%lib!linked_list.impl&%2.reconvene_rec. m@1 tmp%8 instance! page_id! block_size!)) (=> (ens%lib!linked_list.impl&%2.reconvene_rec. m@1 tmp%8 instance! page_id! block_size! tmp%%$1@) (=> (= ptraw1@ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1@))))) (=> (= blocks@0 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1@))))) (and (=> %%location_label%%7 (req%vstd!raw_ptr.impl&%11.join. ptraw1@ ptraw@)) (=> (ens%vstd!raw_ptr.impl&%11.join. ptraw1@ ptraw@ ptraw2@) (=> (= old_blocks@ blocks@0) (=> (= tmp%9 (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block@)))))) (=> (ens%vstd!map.impl&%0.tracked_insert. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. blocks@0) (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. blocks@1) (Poly%lib!tokens.BlockId. tmp%9) (Poly%lib!tokens.Mim.block. block@)) (=> (= tmp%10 (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block@)))))))) (Sub len! 1))) (and (=> %%location_label%%8 tmp%10) (=> tmp%10 (=> (= tmp%11 (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. old_blocks@)) (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block@))))))) false)) (and (=> %%location_label%%9 tmp%11) (=> tmp%11 (=> (= tmp%12 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. blocks@1)) (vstd!set.impl&%0.insert.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. old_blocks@)) (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block@))))))))) (and (=> %%location_label%%10 tmp%12) (=> tmp%12 (=> (= tmp%13 (= (vstd!set.impl&%0.len.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. blocks@1))) len!)) (and (=> %%location_label%%11 tmp%13) (=> tmp%13 (and (=> %%location_label%%12 true) (=> (= (Add (Mul (Sub len! 1) block_size!) block_size!) (nClip (Mul len! block_size!))) (=> (= tmp%14 (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (Poly%lib!tokens.Mim.block. block@)))))) (=> (ens%lib!layout.get_block_start_defn. tmp%14) (=> (= tmp%15 (tuple%2./tuple%2 (Poly%vstd!raw_ptr.PointsToRaw. ptraw2@) (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. blocks@1))) %%switch_label%%0)))))))))))))))))))))))))))))))))))))))))))) (and (not %%switch_label%%0) (=> (= res! tmp%15) (=> %%location_label%%13 (let ((points_to$ (%Poly%vstd!raw_ptr.PointsToRaw. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) (let ((map$ (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) (and (and (and (and (and (and (and (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$))) (= (vstd!map.impl&%0.len.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) len!)) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id$)) page_id!))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$))))) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$) (= (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$) block_id$))))) (%Poly%lib!tokens.BlockId. block_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$))))) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$) (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$) block_id$))))) instance!))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$))))) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$) (let ((tmp%%$ (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id$)))) (and (<= 0 tmp%%$) (< tmp%%$ len!))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. map$)) block_id$))))) (vstd!raw_ptr.impl&%11.is_range.? (Poly%vstd!raw_ptr.PointsToRaw. points_to$) (I (lib!layout.block_start_at.? (Poly%lib!tokens.PageId. page_id!) (I block_size!) (I 0))) (I (nClip (Mul len! block_size!))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to$)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))))))))))))))))
(check-sat)
(exit)
