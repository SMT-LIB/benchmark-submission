(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module impl_u::os_refinement'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!arithmetic.div_mod.lemma_mod_multiples_basic. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.impl&%0.interp. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.step_Map_enabled. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.step_Map. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.step_Unmap_enabled. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.step_Unmap. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.step_Resolve_enabled. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.step_Resolve. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.step_Stutter. FuelId)
(declare-const fuel%lib!impl_u.spec_pt.init. FuelId)
(declare-const fuel%lib!spec_t.hlspec.init. FuelId)
(declare-const fuel%lib!spec_t.hlspec.mem_domain_from_mappings_contains. FuelId)
(declare-const fuel%lib!spec_t.hlspec.mem_domain_from_mappings. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_ReadWrite. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Map_enabled. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Map. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Unmap_enabled. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Unmap. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Resolve_enabled. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Resolve. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Stutter. FuelId)
(declare-const fuel%lib!spec_t.hlspec.next_step. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_P. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_PWT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_PCD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_A. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_D. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_G. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%3.view. FuelId)
(declare-const fuel%lib!spec_t.hardware.read_entry. FuelId)
(declare-const fuel%lib!spec_t.hardware.valid_pt_walk. FuelId)
(declare-const fuel%lib!spec_t.hardware.nat_to_u64. FuelId)
(declare-const fuel%lib!spec_t.hardware.interp_pt_mem. FuelId)
(declare-const fuel%lib!spec_t.hardware.init. FuelId)
(declare-const fuel%lib!spec_t.hardware.step_ReadWrite. FuelId)
(declare-const fuel%lib!spec_t.hardware.step_PTMemOp. FuelId)
(declare-const fuel%lib!spec_t.hardware.step_TLBFill. FuelId)
(declare-const fuel%lib!spec_t.hardware.step_TLBEvict. FuelId)
(declare-const fuel%lib!spec_t.hardware.next_step. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_vmem. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.tlb_is_submap_of_pt. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.pt_entries_aligned. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.inv. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.pt_variables. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.interp_pt_mem. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.effective_mappings. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.interp_vmem. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.interp. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%0.interp_constants. FuelId)
(declare-const fuel%lib!spec_t.os.step_HW. FuelId)
(declare-const fuel%lib!spec_t.os.step_Map. FuelId)
(declare-const fuel%lib!spec_t.os.step_Unmap. FuelId)
(declare-const fuel%lib!spec_t.os.step_Resolve. FuelId)
(declare-const fuel%lib!spec_t.os.impl&%2.interp. FuelId)
(declare-const fuel%lib!spec_t.os.next_step. FuelId)
(declare-const fuel%lib!spec_t.os.init. FuelId)
(declare-const fuel%lib!spec_t.mem.word_index_spec. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.inv. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.spec_read. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_LAYERS. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_ENTRIES. FuelId)
(declare-const fuel%lib!definitions_t.MAX_PHYADDR_SPEC. FuelId)
(declare-const fuel%lib!definitions_t.WORD_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.PAGE_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.MAX_BASE. FuelId)
(declare-const fuel%lib!definitions_t.PT_BOUND_LOW. FuelId)
(declare-const fuel%lib!definitions_t.PT_BOUND_HIGH. FuelId)
(declare-const fuel%lib!definitions_t.L3_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L2_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L1_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L0_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%lib!definitions_t.candidate_mapping_overlaps_existing_vmem. FuelId)
(declare-const fuel%lib!definitions_t.candidate_mapping_overlaps_existing_pmem. FuelId)
(declare-const fuel%lib!definitions_t.aligned. FuelId)
(declare-const fuel%lib!definitions_t.between. FuelId)
(declare-const fuel%lib!definitions_t.impl&%0.arrow_0. FuelId)
(declare-const fuel%lib!definitions_t.overlap. FuelId)
(declare-const fuel%lib!definitions_t.impl&%4.view. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.num_entries. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.upper_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.inv. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_base. FuelId)
(declare-const fuel%lib!definitions_t.x86_arch_spec. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!arithmetic.div_mod.lemma_mod_multiples_basic. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%lib!impl_u.spec_pt.impl&%0.interp. fuel%lib!impl_u.spec_pt.step_Map_enabled. fuel%lib!impl_u.spec_pt.step_Map. fuel%lib!impl_u.spec_pt.step_Unmap_enabled. fuel%lib!impl_u.spec_pt.step_Unmap. fuel%lib!impl_u.spec_pt.step_Resolve_enabled. fuel%lib!impl_u.spec_pt.step_Resolve. fuel%lib!impl_u.spec_pt.step_Stutter. fuel%lib!impl_u.spec_pt.init. fuel%lib!spec_t.hlspec.init. fuel%lib!spec_t.hlspec.mem_domain_from_mappings_contains. fuel%lib!spec_t.hlspec.mem_domain_from_mappings. fuel%lib!spec_t.hlspec.step_ReadWrite. fuel%lib!spec_t.hlspec.step_Map_enabled. fuel%lib!spec_t.hlspec.step_Map. fuel%lib!spec_t.hlspec.step_Unmap_enabled. fuel%lib!spec_t.hlspec.step_Unmap. fuel%lib!spec_t.hlspec.step_Resolve_enabled. fuel%lib!spec_t.hlspec.step_Resolve. fuel%lib!spec_t.hlspec.step_Stutter. fuel%lib!spec_t.hlspec.next_step. fuel%lib!spec_t.hardware.MASK_FLAG_P. fuel%lib!spec_t.hardware.MASK_FLAG_RW. fuel%lib!spec_t.hardware.MASK_FLAG_US. fuel%lib!spec_t.hardware.MASK_FLAG_PWT. fuel%lib!spec_t.hardware.MASK_FLAG_PCD. fuel%lib!spec_t.hardware.MASK_FLAG_A. fuel%lib!spec_t.hardware.MASK_FLAG_XD. fuel%lib!spec_t.hardware.MASK_PG_FLAG_D. fuel%lib!spec_t.hardware.MASK_PG_FLAG_G. fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT. fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS. fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS. fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT. fuel%lib!spec_t.hardware.MASK_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.impl&%3.view. fuel%lib!spec_t.hardware.read_entry. fuel%lib!spec_t.hardware.valid_pt_walk. fuel%lib!spec_t.hardware.nat_to_u64. fuel%lib!spec_t.hardware.interp_pt_mem. fuel%lib!spec_t.hardware.init. fuel%lib!spec_t.hardware.step_ReadWrite. fuel%lib!spec_t.hardware.step_PTMemOp. fuel%lib!spec_t.hardware.step_TLBFill. fuel%lib!spec_t.hardware.step_TLBEvict. fuel%lib!spec_t.hardware.next_step. fuel%lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_vmem. fuel%lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem. fuel%lib!spec_t.os.impl&%0.tlb_is_submap_of_pt. fuel%lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid. fuel%lib!spec_t.os.impl&%0.pt_entries_aligned. fuel%lib!spec_t.os.impl&%0.inv. fuel%lib!spec_t.os.impl&%0.pt_variables. fuel%lib!spec_t.os.impl&%0.interp_pt_mem. fuel%lib!spec_t.os.impl&%0.effective_mappings. fuel%lib!spec_t.os.impl&%0.interp_vmem. fuel%lib!spec_t.os.impl&%0.interp. fuel%lib!spec_t.os.impl&%0.interp_constants. fuel%lib!spec_t.os.step_HW. fuel%lib!spec_t.os.step_Map. fuel%lib!spec_t.os.step_Unmap. fuel%lib!spec_t.os.step_Resolve. fuel%lib!spec_t.os.impl&%2.interp. fuel%lib!spec_t.os.next_step. fuel%lib!spec_t.os.init. fuel%lib!spec_t.mem.word_index_spec. fuel%lib!spec_t.mem.impl&%1.inv. fuel%lib!spec_t.mem.impl&%1.spec_read. fuel%lib!definitions_t.X86_NUM_LAYERS. fuel%lib!definitions_t.X86_NUM_ENTRIES. fuel%lib!definitions_t.MAX_PHYADDR_SPEC. fuel%lib!definitions_t.WORD_SIZE. fuel%lib!definitions_t.PAGE_SIZE. fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. fuel%lib!definitions_t.MAX_BASE. fuel%lib!definitions_t.PT_BOUND_LOW. fuel%lib!definitions_t.PT_BOUND_HIGH. fuel%lib!definitions_t.L3_ENTRY_SIZE. fuel%lib!definitions_t.L2_ENTRY_SIZE. fuel%lib!definitions_t.L1_ENTRY_SIZE. fuel%lib!definitions_t.L0_ENTRY_SIZE. fuel%lib!definitions_t.entry_base_from_index. fuel%lib!definitions_t.candidate_mapping_in_bounds. fuel%lib!definitions_t.candidate_mapping_overlaps_existing_vmem. fuel%lib!definitions_t.candidate_mapping_overlaps_existing_pmem. fuel%lib!definitions_t.aligned. fuel%lib!definitions_t.between. fuel%lib!definitions_t.impl&%0.arrow_0. fuel%lib!definitions_t.overlap. fuel%lib!definitions_t.impl&%4.view. fuel%lib!definitions_t.impl&%8.entry_size. fuel%lib!definitions_t.impl&%8.num_entries. fuel%lib!definitions_t.impl&%8.upper_vaddr. fuel%lib!definitions_t.impl&%8.inv. fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. fuel%lib!definitions_t.impl&%8.entry_base. fuel%lib!definitions_t.x86_arch_spec. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort lib!spec_t.mem.PageTableMemory. 0)
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayer.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!definitions_t.MemRegion.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!impl_u.spec_pt.PageTableVariables. 0) (lib!spec_t.hlspec.AbstractConstants. 0) (lib!spec_t.hlspec.AbstractVariables. 0) (lib!spec_t.hlspec.AbstractStep. 0) (lib!spec_t.hardware.HWVariables. 0) (lib!spec_t.hardware.HWStep. 0) (lib!spec_t.hardware.GhostPageDirectoryEntry. 0) (lib!spec_t.hardware.PageDirectoryEntry. 0) (lib!spec_t.os.OSVariables. 0) (lib!spec_t.os.OSStep. 0) (lib!definitions_t.LoadResult. 0) (lib!definitions_t.StoreResult. 0) (lib!definitions_t.RWOp. 0) (lib!definitions_t.MemRegion. 0) (lib!definitions_t.MemRegionExec. 0) (lib!definitions_t.Flags. 0) (lib!definitions_t.PageTableEntry. 0) (lib!definitions_t.ArchLayer. 0) (lib!definitions_t.Arch. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!impl_u.spec_pt.PageTableVariables./PageTableVariables (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/?pt_mem lib!spec_t.mem.PageTableMemory.))) ((lib!spec_t.hlspec.AbstractConstants./AbstractConstants (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/?phys_mem_size Int))) ((lib!spec_t.hlspec.AbstractVariables./AbstractVariables (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/?mem vstd!map.Map<nat./nat.>.) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/?mappings vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.))) ((lib!spec_t.hlspec.AbstractStep./ReadWrite (lib!spec_t.hlspec.AbstractStep./ReadWrite/?vaddr Int) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?op lib!definitions_t.RWOp.) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?pte core!option.Option.)) (lib!spec_t.hlspec.AbstractStep./Map (lib!spec_t.hlspec.AbstractStep./Map/?vaddr Int) (lib!spec_t.hlspec.AbstractStep./Map/?pte lib!definitions_t.PageTableEntry.) (lib!spec_t.hlspec.AbstractStep./Map/?result core!result.Result.)) (lib!spec_t.hlspec.AbstractStep./Unmap (lib!spec_t.hlspec.AbstractStep./Unmap/?vaddr Int) (lib!spec_t.hlspec.AbstractStep./Unmap/?result core!result.Result.)) (lib!spec_t.hlspec.AbstractStep./Resolve (lib!spec_t.hlspec.AbstractStep./Resolve/?vaddr Int) (lib!spec_t.hlspec.AbstractStep./Resolve/?result core!result.Result.)) (lib!spec_t.hlspec.AbstractStep./Stutter )) ((lib!spec_t.hardware.HWVariables./HWVariables (lib!spec_t.hardware.HWVariables./HWVariables/?mem vstd!seq.Seq<nat.>.) (lib!spec_t.hardware.HWVariables./HWVariables/?pt_mem lib!spec_t.mem.PageTableMemory.) (lib!spec_t.hardware.HWVariables./HWVariables/?tlb vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.))) ((lib!spec_t.hardware.HWStep./ReadWrite (lib!spec_t.hardware.HWStep./ReadWrite/?vaddr Int) (lib!spec_t.hardware.HWStep./ReadWrite/?paddr Int) (lib!spec_t.hardware.HWStep./ReadWrite/?op lib!definitions_t.RWOp.) (lib!spec_t.hardware.HWStep./ReadWrite/?pte core!option.Option.)) (lib!spec_t.hardware.HWStep./PTMemOp ) (lib!spec_t.hardware.HWStep./TLBFill (lib!spec_t.hardware.HWStep./TLBFill/?vaddr Int) (lib!spec_t.hardware.HWStep./TLBFill/?pte lib!definitions_t.PageTableEntry.)) (lib!spec_t.hardware.HWStep./TLBEvict (lib!spec_t.hardware.HWStep./TLBEvict/?vaddr Int))) ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?addr Int) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_P Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_RW Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_US Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PWT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PCD Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_A Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_XD Bool)) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?addr Int) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_P Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_RW Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_US Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PWT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PCD Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_A Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_D Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_G Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PAT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_XD Bool)) (lib!spec_t.hardware.GhostPageDirectoryEntry./Empty )) ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?entry Int) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?layer Int))) ((lib!spec_t.os.OSVariables./OSVariables (lib!spec_t.os.OSVariables./OSVariables/?hw lib!spec_t.hardware.HWVariables.))) ((lib!spec_t.os.OSStep./HW (lib!spec_t.os.OSStep./HW/?step lib!spec_t.hardware.HWStep.)) (lib!spec_t.os.OSStep./Map (lib!spec_t.os.OSStep./Map/?vaddr Int) (lib!spec_t.os.OSStep./Map/?pte lib!definitions_t.PageTableEntry.) (lib!spec_t.os.OSStep./Map/?result core!result.Result.)) (lib!spec_t.os.OSStep./Unmap (lib!spec_t.os.OSStep./Unmap/?vaddr Int) (lib!spec_t.os.OSStep./Unmap/?result core!result.Result.)) (lib!spec_t.os.OSStep./Resolve (lib!spec_t.os.OSStep./Resolve/?vaddr Int) (lib!spec_t.os.OSStep./Resolve/?result core!result.Result.))) ((lib!definitions_t.LoadResult./Pagefault ) (lib!definitions_t.LoadResult./Value (lib!definitions_t.LoadResult./Value/?0 Int))) ((lib!definitions_t.StoreResult./Pagefault ) (lib!definitions_t.StoreResult./Ok )) ((lib!definitions_t.RWOp./Store (lib!definitions_t.RWOp./Store/?new_value Int) (lib!definitions_t.RWOp./Store/?result lib!definitions_t.StoreResult.)) (lib!definitions_t.RWOp./Load (lib!definitions_t.RWOp./Load/?is_exec Bool) (lib!definitions_t.RWOp./Load/?result lib!definitions_t.LoadResult.))) ((lib!definitions_t.MemRegion./MemRegion (lib!definitions_t.MemRegion./MemRegion/?base Int) (lib!definitions_t.MemRegion./MemRegion/?size Int))) ((lib!definitions_t.MemRegionExec./MemRegionExec (lib!definitions_t.MemRegionExec./MemRegionExec/?base Int) (lib!definitions_t.MemRegionExec./MemRegionExec/?size Int))) ((lib!definitions_t.Flags./Flags (lib!definitions_t.Flags./Flags/?is_writable Bool) (lib!definitions_t.Flags./Flags/?is_supervisor Bool) (lib!definitions_t.Flags./Flags/?disable_execute Bool))) ((lib!definitions_t.PageTableEntry./PageTableEntry (lib!definitions_t.PageTableEntry./PageTableEntry/?frame lib!definitions_t.MemRegion.) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags lib!definitions_t.Flags.))) ((lib!definitions_t.ArchLayer./ArchLayer (lib!definitions_t.ArchLayer./ArchLayer/?entry_size Int) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries Int))) ((lib!definitions_t.Arch./Arch (lib!definitions_t.Arch./Arch/?layers vstd!seq.Seq<lib!definitions_t.ArchLayer.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (lib!impl_u.spec_pt.PageTableVariables.) lib!spec_t.mem.PageTableMemory.)
(declare-fun lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (lib!spec_t.hlspec.AbstractConstants.) Int)
(declare-fun lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (lib!spec_t.hlspec.AbstractVariables.) vstd!map.Map<nat./nat.>.)
(declare-fun lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (lib!spec_t.hlspec.AbstractVariables.) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (lib!spec_t.hlspec.AbstractStep.) Int)
(declare-fun lib!spec_t.hlspec.AbstractStep./ReadWrite/op (lib!spec_t.hlspec.AbstractStep.) lib!definitions_t.RWOp.)
(declare-fun lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (lib!spec_t.hlspec.AbstractStep.) core!option.Option.)
(declare-fun lib!spec_t.hlspec.AbstractStep./Map/vaddr (lib!spec_t.hlspec.AbstractStep.) Int)
(declare-fun lib!spec_t.hlspec.AbstractStep./Map/pte (lib!spec_t.hlspec.AbstractStep.) lib!definitions_t.PageTableEntry.)
(declare-fun lib!spec_t.hlspec.AbstractStep./Map/result (lib!spec_t.hlspec.AbstractStep.) core!result.Result.)
(declare-fun lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (lib!spec_t.hlspec.AbstractStep.) Int)
(declare-fun lib!spec_t.hlspec.AbstractStep./Unmap/result (lib!spec_t.hlspec.AbstractStep.) core!result.Result.)
(declare-fun lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (lib!spec_t.hlspec.AbstractStep.) Int)
(declare-fun lib!spec_t.hlspec.AbstractStep./Resolve/result (lib!spec_t.hlspec.AbstractStep.) core!result.Result.)
(declare-fun lib!spec_t.hardware.HWVariables./HWVariables/mem (lib!spec_t.hardware.HWVariables.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (lib!spec_t.hardware.HWVariables.) lib!spec_t.mem.PageTableMemory.)
(declare-fun lib!spec_t.hardware.HWVariables./HWVariables/tlb (lib!spec_t.hardware.HWVariables.) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun lib!spec_t.hardware.HWStep./ReadWrite/vaddr (lib!spec_t.hardware.HWStep.) Int)
(declare-fun lib!spec_t.hardware.HWStep./ReadWrite/paddr (lib!spec_t.hardware.HWStep.) Int)
(declare-fun lib!spec_t.hardware.HWStep./ReadWrite/op (lib!spec_t.hardware.HWStep.) lib!definitions_t.RWOp.)
(declare-fun lib!spec_t.hardware.HWStep./ReadWrite/pte (lib!spec_t.hardware.HWStep.) core!option.Option.)
(declare-fun lib!spec_t.hardware.HWStep./TLBFill/vaddr (lib!spec_t.hardware.HWStep.) Int)
(declare-fun lib!spec_t.hardware.HWStep./TLBFill/pte (lib!spec_t.hardware.HWStep.) lib!definitions_t.PageTableEntry.)
(declare-fun lib!spec_t.hardware.HWStep./TLBEvict/vaddr (lib!spec_t.hardware.HWStep.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (lib!spec_t.hardware.GhostPageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (lib!spec_t.hardware.GhostPageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (lib!spec_t.hardware.PageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (lib!spec_t.hardware.PageDirectoryEntry.) Int)
(declare-fun lib!spec_t.os.OSVariables./OSVariables/hw (lib!spec_t.os.OSVariables.) lib!spec_t.hardware.HWVariables.)
(declare-fun lib!spec_t.os.OSStep./HW/step (lib!spec_t.os.OSStep.) lib!spec_t.hardware.HWStep.)
(declare-fun lib!spec_t.os.OSStep./Map/vaddr (lib!spec_t.os.OSStep.) Int)
(declare-fun lib!spec_t.os.OSStep./Map/pte (lib!spec_t.os.OSStep.) lib!definitions_t.PageTableEntry.)
(declare-fun lib!spec_t.os.OSStep./Map/result (lib!spec_t.os.OSStep.) core!result.Result.)
(declare-fun lib!spec_t.os.OSStep./Unmap/vaddr (lib!spec_t.os.OSStep.) Int)
(declare-fun lib!spec_t.os.OSStep./Unmap/result (lib!spec_t.os.OSStep.) core!result.Result.)
(declare-fun lib!spec_t.os.OSStep./Resolve/vaddr (lib!spec_t.os.OSStep.) Int)
(declare-fun lib!spec_t.os.OSStep./Resolve/result (lib!spec_t.os.OSStep.) core!result.Result.)
(declare-fun lib!definitions_t.LoadResult./Value/0 (lib!definitions_t.LoadResult.) Int)
(declare-fun lib!definitions_t.RWOp./Store/new_value (lib!definitions_t.RWOp.) Int)
(declare-fun lib!definitions_t.RWOp./Store/result (lib!definitions_t.RWOp.) lib!definitions_t.StoreResult.)
(declare-fun lib!definitions_t.RWOp./Load/is_exec (lib!definitions_t.RWOp.) Bool)
(declare-fun lib!definitions_t.RWOp./Load/result (lib!definitions_t.RWOp.) lib!definitions_t.LoadResult.)
(declare-fun lib!definitions_t.MemRegion./MemRegion/base (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/size (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/base (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/size (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.Flags./Flags/is_writable (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/is_supervisor (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/disable_execute (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/frame (lib!definitions_t.PageTableEntry.) lib!definitions_t.MemRegion.)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/flags (lib!definitions_t.PageTableEntry.) lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/entry_size (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/num_entries (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.Arch./Arch/layers (lib!definitions_t.Arch.) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!impl_u.spec_pt.PageTableVariables. Type)
(declare-const TYPE%lib!spec_t.hlspec.AbstractConstants. Type)
(declare-const TYPE%lib!spec_t.hlspec.AbstractVariables. Type)
(declare-const TYPE%lib!spec_t.hlspec.AbstractStep. Type)
(declare-const TYPE%lib!spec_t.hardware.HWVariables. Type)
(declare-const TYPE%lib!spec_t.hardware.HWStep. Type)
(declare-const TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry. Type)
(declare-const TYPE%lib!spec_t.hardware.PageDirectoryEntry. Type)
(declare-const TYPE%lib!spec_t.os.OSVariables. Type)
(declare-const TYPE%lib!spec_t.os.OSStep. Type)
(declare-const TYPE%lib!spec_t.mem.PageTableMemory. Type)
(declare-const TYPE%lib!definitions_t.LoadResult. Type)
(declare-const TYPE%lib!definitions_t.StoreResult. Type)
(declare-const TYPE%lib!definitions_t.RWOp. Type)
(declare-const TYPE%lib!definitions_t.MemRegion. Type)
(declare-const TYPE%lib!definitions_t.MemRegionExec. Type)
(declare-const TYPE%lib!definitions_t.Flags. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntry. Type)
(declare-const TYPE%lib!definitions_t.ArchLayer. Type)
(declare-const TYPE%lib!definitions_t.Arch. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.mem.PageTableMemory.) Poly)
(declare-fun %Poly%lib!spec_t.mem.PageTableMemory. (Poly) lib!spec_t.mem.PageTableMemory.)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!seq.Seq<lib!definitions_t.ArchLayer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.Set<lib!definitions_t.MemRegion.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (Poly) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!impl_u.spec_pt.PageTableVariables.) Poly)
(declare-fun %Poly%lib!impl_u.spec_pt.PageTableVariables. (Poly) lib!impl_u.spec_pt.PageTableVariables.)
(declare-fun Poly%lib!spec_t.hlspec.AbstractConstants. (lib!spec_t.hlspec.AbstractConstants.) Poly)
(declare-fun %Poly%lib!spec_t.hlspec.AbstractConstants. (Poly) lib!spec_t.hlspec.AbstractConstants.)
(declare-fun Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.hlspec.AbstractVariables.) Poly)
(declare-fun %Poly%lib!spec_t.hlspec.AbstractVariables. (Poly) lib!spec_t.hlspec.AbstractVariables.)
(declare-fun Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep.) Poly)
(declare-fun %Poly%lib!spec_t.hlspec.AbstractStep. (Poly) lib!spec_t.hlspec.AbstractStep.)
(declare-fun Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.hardware.HWVariables.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.HWVariables. (Poly) lib!spec_t.hardware.HWVariables.)
(declare-fun Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.HWStep. (Poly) lib!spec_t.hardware.HWStep.)
(declare-fun Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-fun Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly) lib!spec_t.hardware.PageDirectoryEntry.)
(declare-fun Poly%lib!spec_t.os.OSVariables. (lib!spec_t.os.OSVariables.) Poly)
(declare-fun %Poly%lib!spec_t.os.OSVariables. (Poly) lib!spec_t.os.OSVariables.)
(declare-fun Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep.) Poly)
(declare-fun %Poly%lib!spec_t.os.OSStep. (Poly) lib!spec_t.os.OSStep.)
(declare-fun Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult.) Poly)
(declare-fun %Poly%lib!definitions_t.LoadResult. (Poly) lib!definitions_t.LoadResult.)
(declare-fun Poly%lib!definitions_t.StoreResult. (lib!definitions_t.StoreResult.) Poly)
(declare-fun %Poly%lib!definitions_t.StoreResult. (Poly) lib!definitions_t.StoreResult.)
(declare-fun Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp.) Poly)
(declare-fun %Poly%lib!definitions_t.RWOp. (Poly) lib!definitions_t.RWOp.)
(declare-fun Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegion. (Poly) lib!definitions_t.MemRegion.)
(declare-fun Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegionExec. (Poly) lib!definitions_t.MemRegionExec.)
(declare-fun Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags.) Poly)
(declare-fun %Poly%lib!definitions_t.Flags. (Poly) lib!definitions_t.Flags.)
(declare-fun Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntry. (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayer. (Poly) lib!definitions_t.ArchLayer.)
(declare-fun Poly%lib!definitions_t.Arch. (lib!definitions_t.Arch.) Poly)
(declare-fun %Poly%lib!definitions_t.Arch. (Poly) lib!definitions_t.Arch.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (= x (%Poly%lib!spec_t.mem.PageTableMemory. (Poly%lib!spec_t.mem.PageTableMemory. x))) :pattern ((Poly%lib!spec_t.mem.PageTableMemory. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.mem.PageTableMemory.) (= x (Poly%lib!spec_t.mem.PageTableMemory. (%Poly%lib!spec_t.mem.PageTableMemory. x)))) :pattern ((has_type x TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.) :pattern ((has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (= x (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (= x (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x))) :pattern ((Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) (= x (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.))))))
(assert (forall ((x vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (has_type (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!impl_u.spec_pt.PageTableVariables.)) (! (= x (%Poly%lib!impl_u.spec_pt.PageTableVariables. (Poly%lib!impl_u.spec_pt.PageTableVariables. x))) :pattern ((Poly%lib!impl_u.spec_pt.PageTableVariables. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.spec_pt.PageTableVariables.) (= x (Poly%lib!impl_u.spec_pt.PageTableVariables. (%Poly%lib!impl_u.spec_pt.PageTableVariables. x)))) :pattern ((has_type x TYPE%lib!impl_u.spec_pt.PageTableVariables.)))))
(assert (forall ((x lib!impl_u.spec_pt.PageTableVariables.)) (! (= (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem x) (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/?pt_mem x)) :pattern ((lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem x)))))
(assert (forall ((x lib!impl_u.spec_pt.PageTableVariables.)) (! (has_type (Poly%lib!impl_u.spec_pt.PageTableVariables. x) TYPE%lib!impl_u.spec_pt.PageTableVariables.) :pattern ((has_type (Poly%lib!impl_u.spec_pt.PageTableVariables. x) TYPE%lib!impl_u.spec_pt.PageTableVariables.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractConstants.)) (! (= x (%Poly%lib!spec_t.hlspec.AbstractConstants. (Poly%lib!spec_t.hlspec.AbstractConstants. x))) :pattern ((Poly%lib!spec_t.hlspec.AbstractConstants. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractConstants.) (= x (Poly%lib!spec_t.hlspec.AbstractConstants. (%Poly%lib!spec_t.hlspec.AbstractConstants. x)))) :pattern ((has_type x TYPE%lib!spec_t.hlspec.AbstractConstants.)))))
(assert (forall ((_phys_mem_size! Int)) (! (=> (<= 0 _phys_mem_size!) (has_type (Poly%lib!spec_t.hlspec.AbstractConstants. (lib!spec_t.hlspec.AbstractConstants./AbstractConstants _phys_mem_size!)) TYPE%lib!spec_t.hlspec.AbstractConstants.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractConstants. (lib!spec_t.hlspec.AbstractConstants./AbstractConstants _phys_mem_size!)) TYPE%lib!spec_t.hlspec.AbstractConstants.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractConstants.)) (! (= (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size x) (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/?phys_mem_size x)) :pattern ((lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractConstants.) (<= 0 (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. x)))) :pattern ((lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractConstants.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractVariables.)) (! (= x (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. x))) :pattern ((Poly%lib!spec_t.hlspec.AbstractVariables. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractVariables.) (= x (Poly%lib!spec_t.hlspec.AbstractVariables. (%Poly%lib!spec_t.hlspec.AbstractVariables. x)))) :pattern ((has_type x TYPE%lib!spec_t.hlspec.AbstractVariables.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractVariables.)) (! (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem x) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/?mem x)) :pattern ((lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem x)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractVariables.)) (! (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings x) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/?mappings x)) :pattern ((lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings x)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractVariables.)) (! (has_type (Poly%lib!spec_t.hlspec.AbstractVariables. x) TYPE%lib!spec_t.hlspec.AbstractVariables.) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractVariables. x) TYPE%lib!spec_t.hlspec.AbstractVariables.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= x (%Poly%lib!spec_t.hlspec.AbstractStep. (Poly%lib!spec_t.hlspec.AbstractStep. x))) :pattern ((Poly%lib!spec_t.hlspec.AbstractStep. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (= x (Poly%lib!spec_t.hlspec.AbstractStep. (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((_vaddr! Int) (_op! lib!definitions_t.RWOp.) (_pte! core!option.Option.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%lib!definitions_t.RWOp. _op!) TYPE%lib!definitions_t.RWOp.) (has_type (Poly%core!option.Option. _pte!) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./ReadWrite _vaddr! _op! _pte!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./ReadWrite _vaddr! _op! _pte!)) TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr x) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?vaddr x)) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./ReadWrite/op x) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?op x)) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/op x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%lib!definitions_t.RWOp. (lib!spec_t.hlspec.AbstractStep./ReadWrite/op (%Poly%lib!spec_t.hlspec.AbstractStep. x))) TYPE%lib!definitions_t.RWOp.)) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/op (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./ReadWrite/pte x) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?pte x)) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!option.Option. (lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (%Poly%lib!spec_t.hlspec.AbstractStep. x))) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((_vaddr! Int) (_pte! lib!definitions_t.PageTableEntry.) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%lib!definitions_t.PageTableEntry. _pte!) TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Map _vaddr! _pte! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Map _vaddr! _pte! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Map/vaddr x) (lib!spec_t.hlspec.AbstractStep./Map/?vaddr x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.AbstractStep./Map/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Map/pte x) (lib!spec_t.hlspec.AbstractStep./Map/?pte x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!spec_t.hlspec.AbstractStep./Map/pte (%Poly%lib!spec_t.hlspec.AbstractStep. x))) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/pte (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Map/result x) (lib!spec_t.hlspec.AbstractStep./Map/?result x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.AbstractStep./Map/result (%Poly%lib!spec_t.hlspec.AbstractStep. x))) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/result (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((_vaddr! Int) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Unmap _vaddr! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Unmap _vaddr! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Unmap/vaddr x) (lib!spec_t.hlspec.AbstractStep./Unmap/?vaddr x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Unmap/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Unmap/result x) (lib!spec_t.hlspec.AbstractStep./Unmap/?result x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Unmap/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.AbstractStep./Unmap/result (%Poly%lib!spec_t.hlspec.AbstractStep. x))) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.AbstractStep./Unmap/result (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((_vaddr! Int) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Resolve _vaddr! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Resolve _vaddr! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Resolve/vaddr x) (lib!spec_t.hlspec.AbstractStep./Resolve/?vaddr x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Resolve/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Resolve/result x) (lib!spec_t.hlspec.AbstractStep./Resolve/?result x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Resolve/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.AbstractStep./Resolve/result (%Poly%lib!spec_t.hlspec.AbstractStep. x))) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.AbstractStep./Resolve/result (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (has_type (Poly%lib!spec_t.hlspec.AbstractStep. lib!spec_t.hlspec.AbstractStep./Stutter) TYPE%lib!spec_t.hlspec.AbstractStep.))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (= x (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. x))) :pattern ((Poly%lib!spec_t.hardware.HWVariables. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWVariables.) (= x (Poly%lib!spec_t.hardware.HWVariables. (%Poly%lib!spec_t.hardware.HWVariables. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.HWVariables.)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (= (lib!spec_t.hardware.HWVariables./HWVariables/mem x) (lib!spec_t.hardware.HWVariables./HWVariables/?mem x)) :pattern ((lib!spec_t.hardware.HWVariables./HWVariables/mem x)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (= (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem x) (lib!spec_t.hardware.HWVariables./HWVariables/?pt_mem x)) :pattern ((lib!spec_t.hardware.HWVariables./HWVariables/pt_mem x)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (= (lib!spec_t.hardware.HWVariables./HWVariables/tlb x) (lib!spec_t.hardware.HWVariables./HWVariables/?tlb x)) :pattern ((lib!spec_t.hardware.HWVariables./HWVariables/tlb x)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (has_type (Poly%lib!spec_t.hardware.HWVariables. x) TYPE%lib!spec_t.hardware.HWVariables.) :pattern ((has_type (Poly%lib!spec_t.hardware.HWVariables. x) TYPE%lib!spec_t.hardware.HWVariables.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= x (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. x))) :pattern ((Poly%lib!spec_t.hardware.HWStep. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (= x (Poly%lib!spec_t.hardware.HWStep. (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((_vaddr! Int) (_paddr! Int) (_op! lib!definitions_t.RWOp.) (_pte! core!option.Option.)) (! (=> (and (<= 0 _vaddr!) (<= 0 _paddr!) (has_type (Poly%lib!definitions_t.RWOp. _op!) TYPE%lib!definitions_t.RWOp.) (has_type (Poly%core!option.Option. _pte!) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) (has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./ReadWrite _vaddr! _paddr! _op! _pte!)) TYPE%lib!spec_t.hardware.HWStep.)) :pattern ((has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./ReadWrite _vaddr! _paddr! _op! _pte!)) TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./ReadWrite/vaddr x) (lib!spec_t.hardware.HWStep./ReadWrite/?vaddr x)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (<= 0 (lib!spec_t.hardware.HWStep./ReadWrite/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./ReadWrite/paddr x) (lib!spec_t.hardware.HWStep./ReadWrite/?paddr x)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/paddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (<= 0 (lib!spec_t.hardware.HWStep./ReadWrite/paddr (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/paddr (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./ReadWrite/op x) (lib!spec_t.hardware.HWStep./ReadWrite/?op x)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/op x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (has_type (Poly%lib!definitions_t.RWOp. (lib!spec_t.hardware.HWStep./ReadWrite/op (%Poly%lib!spec_t.hardware.HWStep. x))) TYPE%lib!definitions_t.RWOp.)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/op (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./ReadWrite/pte x) (lib!spec_t.hardware.HWStep./ReadWrite/?pte x)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (has_type (Poly%core!option.Option. (lib!spec_t.hardware.HWStep./ReadWrite/pte (%Poly%lib!spec_t.hardware.HWStep. x))) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/pte (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (has_type (Poly%lib!spec_t.hardware.HWStep. lib!spec_t.hardware.HWStep./PTMemOp) TYPE%lib!spec_t.hardware.HWStep.))
(assert (forall ((_vaddr! Int) (_pte! lib!definitions_t.PageTableEntry.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%lib!definitions_t.PageTableEntry. _pte!) TYPE%lib!definitions_t.PageTableEntry.)) (has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./TLBFill _vaddr! _pte!)) TYPE%lib!spec_t.hardware.HWStep.)) :pattern ((has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./TLBFill _vaddr! _pte!)) TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./TLBFill/vaddr x) (lib!spec_t.hardware.HWStep./TLBFill/?vaddr x)) :pattern ((lib!spec_t.hardware.HWStep./TLBFill/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (<= 0 (lib!spec_t.hardware.HWStep./TLBFill/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((lib!spec_t.hardware.HWStep./TLBFill/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./TLBFill/pte x) (lib!spec_t.hardware.HWStep./TLBFill/?pte x)) :pattern ((lib!spec_t.hardware.HWStep./TLBFill/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!spec_t.hardware.HWStep./TLBFill/pte (%Poly%lib!spec_t.hardware.HWStep. x))) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!spec_t.hardware.HWStep./TLBFill/pte (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((_vaddr! Int)) (! (=> (<= 0 _vaddr!) (has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./TLBEvict _vaddr!)) TYPE%lib!spec_t.hardware.HWStep.)) :pattern ((has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./TLBEvict _vaddr!)) TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./TLBEvict/vaddr x) (lib!spec_t.hardware.HWStep./TLBEvict/?vaddr x)) :pattern ((lib!spec_t.hardware.HWStep./TLBEvict/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (<= 0 (lib!spec_t.hardware.HWStep./TLBEvict/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((lib!spec_t.hardware.HWStep./TLBEvict/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= x (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x))) :pattern ((Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (= x (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((_addr! Int) (_flag_P! Bool) (_flag_RW! Bool) (_flag_US! Bool) (_flag_PWT! Bool) (_flag_PCD! Bool) (_flag_A! Bool) (_flag_XD! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?addr x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_P x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_RW x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_US x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PWT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PCD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_A x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_XD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD x)))))
(assert (forall ((_addr! Int) (_flag_P! Bool) (_flag_RW! Bool) (_flag_US! Bool) (_flag_PWT! Bool) (_flag_PCD! Bool) (_flag_A! Bool) (_flag_D! Bool) (_flag_G! Bool) (_flag_PAT! Bool) (_flag_XD! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Page _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_D! _flag_G! _flag_PAT! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Page _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_D! _flag_G! _flag_PAT! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?addr x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_P x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_RW x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_US x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PWT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PCD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_A x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_D x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_G x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PAT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_XD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD x)))))
(assert (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. lib!spec_t.hardware.GhostPageDirectoryEntry./Empty) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= x (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. x))) :pattern ((Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (= x (Poly%lib!spec_t.hardware.PageDirectoryEntry. (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((_entry! Int) (_layer! Int)) (! (=> (and (uInv 64 _entry!) (<= 0 _layer!)) (has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry _entry! _layer!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry _entry! _layer!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry x) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?entry x)) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (uInv 64 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer x) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?layer x)) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (<= 0 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.os.OSVariables.)) (! (= x (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. x))) :pattern ((Poly%lib!spec_t.os.OSVariables. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSVariables.) (= x (Poly%lib!spec_t.os.OSVariables. (%Poly%lib!spec_t.os.OSVariables. x)))) :pattern ((has_type x TYPE%lib!spec_t.os.OSVariables.)))))
(assert (forall ((x lib!spec_t.os.OSVariables.)) (! (= (lib!spec_t.os.OSVariables./OSVariables/hw x) (lib!spec_t.os.OSVariables./OSVariables/?hw x)) :pattern ((lib!spec_t.os.OSVariables./OSVariables/hw x)))))
(assert (forall ((x lib!spec_t.os.OSVariables.)) (! (has_type (Poly%lib!spec_t.os.OSVariables. x) TYPE%lib!spec_t.os.OSVariables.) :pattern ((has_type (Poly%lib!spec_t.os.OSVariables. x) TYPE%lib!spec_t.os.OSVariables.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= x (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. x))) :pattern ((Poly%lib!spec_t.os.OSStep. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (= x (Poly%lib!spec_t.os.OSStep. (%Poly%lib!spec_t.os.OSStep. x)))) :pattern ((has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((_step! lib!spec_t.hardware.HWStep.)) (! (=> (has_type (Poly%lib!spec_t.hardware.HWStep. _step!) TYPE%lib!spec_t.hardware.HWStep.) (has_type (Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep./HW _step!)) TYPE%lib!spec_t.os.OSStep.)) :pattern ((has_type (Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep./HW _step!)) TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= (lib!spec_t.os.OSStep./HW/step x) (lib!spec_t.os.OSStep./HW/?step x)) :pattern ((lib!spec_t.os.OSStep./HW/step x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.os.OSStep./HW/step (%Poly%lib!spec_t.os.OSStep. x))) TYPE%lib!spec_t.hardware.HWStep.)) :pattern ((lib!spec_t.os.OSStep./HW/step (%Poly%lib!spec_t.os.OSStep. x)) (has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((_vaddr! Int) (_pte! lib!definitions_t.PageTableEntry.) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%lib!definitions_t.PageTableEntry. _pte!) TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep./Map _vaddr! _pte! _result!)) TYPE%lib!spec_t.os.OSStep.)) :pattern ((has_type (Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep./Map _vaddr! _pte! _result!)) TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= (lib!spec_t.os.OSStep./Map/vaddr x) (lib!spec_t.os.OSStep./Map/?vaddr x)) :pattern ((lib!spec_t.os.OSStep./Map/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (<= 0 (lib!spec_t.os.OSStep./Map/vaddr (%Poly%lib!spec_t.os.OSStep. x)))) :pattern ((lib!spec_t.os.OSStep./Map/vaddr (%Poly%lib!spec_t.os.OSStep. x)) (has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= (lib!spec_t.os.OSStep./Map/pte x) (lib!spec_t.os.OSStep./Map/?pte x)) :pattern ((lib!spec_t.os.OSStep./Map/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!spec_t.os.OSStep./Map/pte (%Poly%lib!spec_t.os.OSStep. x))) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!spec_t.os.OSStep./Map/pte (%Poly%lib!spec_t.os.OSStep. x)) (has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= (lib!spec_t.os.OSStep./Map/result x) (lib!spec_t.os.OSStep./Map/?result x)) :pattern ((lib!spec_t.os.OSStep./Map/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (has_type (Poly%core!result.Result. (lib!spec_t.os.OSStep./Map/result (%Poly%lib!spec_t.os.OSStep. x))) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) :pattern ((lib!spec_t.os.OSStep./Map/result (%Poly%lib!spec_t.os.OSStep. x)) (has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((_vaddr! Int) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep./Unmap _vaddr! _result!)) TYPE%lib!spec_t.os.OSStep.)) :pattern ((has_type (Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep./Unmap _vaddr! _result!)) TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= (lib!spec_t.os.OSStep./Unmap/vaddr x) (lib!spec_t.os.OSStep./Unmap/?vaddr x)) :pattern ((lib!spec_t.os.OSStep./Unmap/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (<= 0 (lib!spec_t.os.OSStep./Unmap/vaddr (%Poly%lib!spec_t.os.OSStep. x)))) :pattern ((lib!spec_t.os.OSStep./Unmap/vaddr (%Poly%lib!spec_t.os.OSStep. x)) (has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= (lib!spec_t.os.OSStep./Unmap/result x) (lib!spec_t.os.OSStep./Unmap/?result x)) :pattern ((lib!spec_t.os.OSStep./Unmap/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (has_type (Poly%core!result.Result. (lib!spec_t.os.OSStep./Unmap/result (%Poly%lib!spec_t.os.OSStep. x))) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) :pattern ((lib!spec_t.os.OSStep./Unmap/result (%Poly%lib!spec_t.os.OSStep. x)) (has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((_vaddr! Int) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep./Resolve _vaddr! _result!)) TYPE%lib!spec_t.os.OSStep.)) :pattern ((has_type (Poly%lib!spec_t.os.OSStep. (lib!spec_t.os.OSStep./Resolve _vaddr! _result!)) TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= (lib!spec_t.os.OSStep./Resolve/vaddr x) (lib!spec_t.os.OSStep./Resolve/?vaddr x)) :pattern ((lib!spec_t.os.OSStep./Resolve/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (<= 0 (lib!spec_t.os.OSStep./Resolve/vaddr (%Poly%lib!spec_t.os.OSStep. x)))) :pattern ((lib!spec_t.os.OSStep./Resolve/vaddr (%Poly%lib!spec_t.os.OSStep. x)) (has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!spec_t.os.OSStep.)) (! (= (lib!spec_t.os.OSStep./Resolve/result x) (lib!spec_t.os.OSStep./Resolve/?result x)) :pattern ((lib!spec_t.os.OSStep./Resolve/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.os.OSStep.) (has_type (Poly%core!result.Result. (lib!spec_t.os.OSStep./Resolve/result (%Poly%lib!spec_t.os.OSStep. x))) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) :pattern ((lib!spec_t.os.OSStep./Resolve/result (%Poly%lib!spec_t.os.OSStep. x)) (has_type x TYPE%lib!spec_t.os.OSStep.)))))
(assert (forall ((x lib!definitions_t.LoadResult.)) (! (= x (%Poly%lib!definitions_t.LoadResult. (Poly%lib!definitions_t.LoadResult. x))) :pattern ((Poly%lib!definitions_t.LoadResult. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.LoadResult.) (= x (Poly%lib!definitions_t.LoadResult. (%Poly%lib!definitions_t.LoadResult. x)))) :pattern ((has_type x TYPE%lib!definitions_t.LoadResult.)))))
(assert (has_type (Poly%lib!definitions_t.LoadResult. lib!definitions_t.LoadResult./Pagefault) TYPE%lib!definitions_t.LoadResult.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult./Value _0!)) TYPE%lib!definitions_t.LoadResult.)) :pattern ((has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult./Value _0!)) TYPE%lib!definitions_t.LoadResult.)))))
(assert (forall ((x lib!definitions_t.LoadResult.)) (! (= (lib!definitions_t.LoadResult./Value/0 x) (lib!definitions_t.LoadResult./Value/?0 x)) :pattern ((lib!definitions_t.LoadResult./Value/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.LoadResult.) (<= 0 (lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. x)))) :pattern ((lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. x)) (has_type x TYPE%lib!definitions_t.LoadResult.)))))
(assert (forall ((x lib!definitions_t.StoreResult.)) (! (= x (%Poly%lib!definitions_t.StoreResult. (Poly%lib!definitions_t.StoreResult. x))) :pattern ((Poly%lib!definitions_t.StoreResult. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.StoreResult.) (= x (Poly%lib!definitions_t.StoreResult. (%Poly%lib!definitions_t.StoreResult. x)))) :pattern ((has_type x TYPE%lib!definitions_t.StoreResult.)))))
(assert (forall ((x lib!definitions_t.StoreResult.)) (! (has_type (Poly%lib!definitions_t.StoreResult. x) TYPE%lib!definitions_t.StoreResult.) :pattern ((has_type (Poly%lib!definitions_t.StoreResult. x) TYPE%lib!definitions_t.StoreResult.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= x (%Poly%lib!definitions_t.RWOp. (Poly%lib!definitions_t.RWOp. x))) :pattern ((Poly%lib!definitions_t.RWOp. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (= x (Poly%lib!definitions_t.RWOp. (%Poly%lib!definitions_t.RWOp. x)))) :pattern ((has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((_new_value! Int) (_result! lib!definitions_t.StoreResult.)) (! (=> (<= 0 _new_value!) (has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Store _new_value! _result!)) TYPE%lib!definitions_t.RWOp.)) :pattern ((has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Store _new_value! _result!)) TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Store/new_value x) (lib!definitions_t.RWOp./Store/?new_value x)) :pattern ((lib!definitions_t.RWOp./Store/new_value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (<= 0 (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. x)))) :pattern ((lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. x)) (has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Store/result x) (lib!definitions_t.RWOp./Store/?result x)) :pattern ((lib!definitions_t.RWOp./Store/result x)))))
(assert (forall ((_is_exec! Bool) (_result! lib!definitions_t.LoadResult.)) (! (=> (has_type (Poly%lib!definitions_t.LoadResult. _result!) TYPE%lib!definitions_t.LoadResult.) (has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Load _is_exec! _result!)) TYPE%lib!definitions_t.RWOp.)) :pattern ((has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Load _is_exec! _result!)) TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Load/is_exec x) (lib!definitions_t.RWOp./Load/?is_exec x)) :pattern ((lib!definitions_t.RWOp./Load/is_exec x)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Load/result x) (lib!definitions_t.RWOp./Load/?result x)) :pattern ((lib!definitions_t.RWOp./Load/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. x))) TYPE%lib!definitions_t.LoadResult.)) :pattern ((lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. x)) (has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= x (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. x))) :pattern ((Poly%lib!definitions_t.MemRegion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (= x (Poly%lib!definitions_t.MemRegion. (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (<= 0 _base!) (<= 0 _size!)) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/base x) (lib!definitions_t.MemRegion./MemRegion/?base x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/size x) (lib!definitions_t.MemRegion./MemRegion/?size x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= x (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. x))) :pattern ((Poly%lib!definitions_t.MemRegionExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (= x (Poly%lib!definitions_t.MemRegionExec. (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (uInv SZ _base!) (uInv SZ _size!)) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/base x) (lib!definitions_t.MemRegionExec./MemRegionExec/?base x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/size x) (lib!definitions_t.MemRegionExec./MemRegionExec/?size x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= x (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. x))) :pattern ((Poly%lib!definitions_t.Flags. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Flags.) (= x (Poly%lib!definitions_t.Flags. (%Poly%lib!definitions_t.Flags. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_writable x) (lib!definitions_t.Flags./Flags/?is_writable x)) :pattern ((lib!definitions_t.Flags./Flags/is_writable x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_supervisor x) (lib!definitions_t.Flags./Flags/?is_supervisor x)) :pattern ((lib!definitions_t.Flags./Flags/is_supervisor x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/disable_execute x) (lib!definitions_t.Flags./Flags/?disable_execute x)) :pattern ((lib!definitions_t.Flags./Flags/disable_execute x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.) :pattern ((has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= x (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. x))) :pattern ((Poly%lib!definitions_t.PageTableEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (= x (Poly%lib!definitions_t.PageTableEntry. (%Poly%lib!definitions_t.PageTableEntry. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegion.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _frame!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/frame x) (lib!definitions_t.PageTableEntry./PageTableEntry/?frame x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x)) (has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/flags x) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/flags x)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= x (%Poly%lib!definitions_t.ArchLayer. (Poly%lib!definitions_t.ArchLayer. x))) :pattern ((Poly%lib!definitions_t.ArchLayer. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (= x (Poly%lib!definitions_t.ArchLayer. (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (<= 0 _entry_size!) (<= 0 _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/entry_size x) (lib!definitions_t.ArchLayer./ArchLayer/?entry_size x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/num_entries x) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= x (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. x))) :pattern ((Poly%lib!definitions_t.Arch. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Arch.) (= x (Poly%lib!definitions_t.Arch. (%Poly%lib!definitions_t.Arch. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= (lib!definitions_t.Arch./Arch/layers x) (lib!definitions_t.Arch./Arch/?layers x)) :pattern ((lib!definitions_t.Arch./Arch/layers x)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.) :pattern ((has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize_spec")
(declare-fun lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::regions")
(declare-fun lib!spec_t.mem.impl&%1.regions.? (Poly) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::overlap")
(declare-fun lib!definitions_t.overlap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::aligned")
(declare-fun lib!definitions_t.aligned.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::cr3_spec")
(declare-fun lib!spec_t.mem.impl&%1.cr3_spec.? (Poly) lib!definitions_t.MemRegionExec.)
(set-info :comment ";; Function-Decl lib::definitions_t::PAGE_SIZE")
(declare-fun lib!definitions_t.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::inv")
(declare-fun lib!spec_t.mem.impl&%1.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::MemRegionExec::view")
(declare-fun lib!definitions_t.impl&%4.view.? (Poly) lib!definitions_t.MemRegion.)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::region_view")
(declare-fun lib!spec_t.mem.impl&%1.region_view.? (Poly Poly) vstd!seq.Seq<u64.>.)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::init")
(declare-fun lib!impl_u.spec_pt.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_WIDTH")
(declare-fun lib!definitions_t.MAX_PHYADDR_WIDTH.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_SPEC")
(declare-fun lib!definitions_t.MAX_PHYADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_LAYERS")
(declare-fun lib!definitions_t.X86_NUM_LAYERS.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_size")
(declare-fun lib!definitions_t.impl&%8.entry_size.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::num_entries")
(declare-fun lib!definitions_t.impl&%8.num_entries.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_MAX_ENTRY_SIZE")
(declare-fun lib!definitions_t.X86_MAX_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_ENTRIES")
(declare-fun lib!definitions_t.X86_NUM_ENTRIES.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::inv")
(declare-fun lib!definitions_t.impl&%8.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::entry_base_from_index")
(declare-fun lib!definitions_t.entry_base_from_index.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_base")
(declare-fun lib!definitions_t.impl&%8.entry_base.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::upper_vaddr")
(declare-fun lib!definitions_t.impl&%8.upper_vaddr.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L3_ENTRY_SIZE")
(declare-fun lib!definitions_t.L3_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L2_ENTRY_SIZE")
(declare-fun lib!definitions_t.L2_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L1_ENTRY_SIZE")
(declare-fun lib!definitions_t.L1_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L0_ENTRY_SIZE")
(declare-fun lib!definitions_t.L0_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::x86_arch_spec")
(declare-fun lib!definitions_t.x86_arch_spec.? () lib!definitions_t.Arch.)
(set-info :comment ";; Function-Decl lib::definitions_t::candidate_mapping_in_bounds")
(declare-fun lib!definitions_t.candidate_mapping_in_bounds.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::candidate_mapping_overlaps_existing_pmem")
(declare-fun lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_BASE")
(declare-fun lib!definitions_t.MAX_BASE.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_P")
(declare-fun lib!spec_t.hardware.MASK_FLAG_P.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_RW")
(declare-fun lib!spec_t.hardware.MASK_FLAG_RW.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_US")
(declare-fun lib!spec_t.hardware.MASK_FLAG_US.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_PWT")
(declare-fun lib!spec_t.hardware.MASK_FLAG_PWT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_PCD")
(declare-fun lib!spec_t.hardware.MASK_FLAG_PCD.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_A")
(declare-fun lib!spec_t.hardware.MASK_FLAG_A.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_XD")
(declare-fun lib!spec_t.hardware.MASK_FLAG_XD.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_D")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_D.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_G")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_G.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L1_PG_FLAG_PS")
(declare-fun lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L2_PG_FLAG_PS")
(declare-fun lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::all_mb0_bits_are_zero")
(declare-fun lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L1_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_PAT")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_PAT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L2_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L3_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L3_PG_FLAG_PAT")
(declare-fun lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::view")
(declare-fun lib!spec_t.hardware.impl&%3.view.? (Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::spec_read")
(declare-fun lib!spec_t.mem.impl&%1.spec_read.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::read_entry")
(declare-fun lib!spec_t.hardware.read_entry.? (Poly Poly Poly Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::valid_pt_walk")
(declare-fun lib!spec_t.hardware.valid_pt_walk.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::nat_to_u64")
(declare-fun lib!spec_t.hardware.nat_to_u64.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::interp_pt_mem")
(declare-fun lib!spec_t.hardware.interp_pt_mem.? (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::PageTableVariables::interp")
(declare-fun lib!impl_u.spec_pt.impl&%0.interp.? (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::alloc_available_pages")
(declare-fun lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::step_Map_enabled")
(declare-fun lib!impl_u.spec_pt.step_Map_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::candidate_mapping_overlaps_existing_vmem")
(declare-fun lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::step_Map")
(declare-fun lib!impl_u.spec_pt.step_Map.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::between")
(declare-fun lib!definitions_t.between.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::PT_BOUND_LOW")
(declare-fun lib!definitions_t.PT_BOUND_LOW.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::PT_BOUND_HIGH")
(declare-fun lib!definitions_t.PT_BOUND_HIGH.? () Int)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::step_Unmap_enabled")
(declare-fun lib!impl_u.spec_pt.step_Unmap_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::step_Unmap")
(declare-fun lib!impl_u.spec_pt.step_Unmap.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::step_Resolve_enabled")
(declare-fun lib!impl_u.spec_pt.step_Resolve_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::step_Resolve")
(declare-fun lib!impl_u.spec_pt.step_Resolve.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::WORD_SIZE")
(declare-fun lib!definitions_t.WORD_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::impl_u::spec_pt::step_Stutter")
(declare-fun lib!impl_u.spec_pt.step_Stutter.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::init")
(declare-fun lib!spec_t.hlspec.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::mem::word_index_spec")
(declare-fun lib!spec_t.mem.word_index_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::mem_domain_from_mappings_contains")
(declare-fun lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::mem_domain_from_mappings")
(declare-fun lib!spec_t.hlspec.mem_domain_from_mappings.? (Poly Poly) vstd!set.Set<nat.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::LoadResult::arrow_0")
(declare-fun lib!definitions_t.impl&%0.arrow_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_ReadWrite")
(declare-fun lib!spec_t.hlspec.step_ReadWrite.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Map_enabled")
(declare-fun lib!spec_t.hlspec.step_Map_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Map")
(declare-fun lib!spec_t.hlspec.step_Map.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Unmap_enabled")
(declare-fun lib!spec_t.hlspec.step_Unmap_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Unmap")
(declare-fun lib!spec_t.hlspec.step_Unmap.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Resolve_enabled")
(declare-fun lib!spec_t.hlspec.step_Resolve_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Resolve")
(declare-fun lib!spec_t.hlspec.step_Resolve.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Stutter")
(declare-fun lib!spec_t.hlspec.step_Stutter.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::next_step")
(declare-fun lib!spec_t.hlspec.next_step.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::init")
(declare-fun lib!spec_t.hardware.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::step_ReadWrite")
(declare-fun lib!spec_t.hardware.step_ReadWrite.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::step_PTMemOp")
(declare-fun lib!spec_t.hardware.step_PTMemOp.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::step_TLBFill")
(declare-fun lib!spec_t.hardware.step_TLBFill.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::step_TLBEvict")
(declare-fun lib!spec_t.hardware.step_TLBEvict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::next_step")
(declare-fun lib!spec_t.hardware.next_step.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::interp_pt_mem")
(declare-fun lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::pt_mappings_dont_overlap_in_vmem")
(declare-fun lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_vmem.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::pt_mappings_dont_overlap_in_pmem")
(declare-fun lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::tlb_is_submap_of_pt")
(declare-fun lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::pt_entry_sizes_are_valid")
(declare-fun lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::pt_entries_aligned")
(declare-fun lib!spec_t.os.impl&%0.pt_entries_aligned.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::inv")
(declare-fun lib!spec_t.os.impl&%0.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::pt_variables")
(declare-fun lib!spec_t.os.impl&%0.pt_variables.? (Poly) lib!impl_u.spec_pt.PageTableVariables.)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::effective_mappings")
(declare-fun lib!spec_t.os.impl&%0.effective_mappings.? (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::interp_constants")
(declare-fun lib!spec_t.os.impl&%0.interp_constants.? (Poly) lib!spec_t.hlspec.AbstractConstants.)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::interp_vmem")
(declare-fun lib!spec_t.os.impl&%0.interp_vmem.? (Poly) vstd!map.Map<nat./nat.>.)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSVariables::interp")
(declare-fun lib!spec_t.os.impl&%0.interp.? (Poly) lib!spec_t.hlspec.AbstractVariables.)
(set-info :comment ";; Function-Decl lib::spec_t::os::step_HW")
(declare-fun lib!spec_t.os.step_HW.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::step_Map")
(declare-fun lib!spec_t.os.step_Map.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::step_Unmap")
(declare-fun lib!spec_t.os.step_Unmap.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::step_Resolve")
(declare-fun lib!spec_t.os.step_Resolve.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::OSStep::interp")
(declare-fun lib!spec_t.os.impl&%2.interp.? (Poly) lib!spec_t.hlspec.AbstractStep.)
(set-info :comment ";; Function-Decl lib::spec_t::os::next_step")
(declare-fun lib!spec_t.os.next_step.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::os::init")
(declare-fun lib!spec_t.os.init.? (Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Specs vstd::arithmetic::div_mod::lemma_mod_multiples_basic")
(declare-fun req%vstd!arithmetic.div_mod.lemma_mod_multiples_basic. (Int Int) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((x! Int) (m! Int)) (! (= (req%vstd!arithmetic.div_mod.lemma_mod_multiples_basic. x! m!) (=> %%global_location_label%%1 (> m! 0))) :pattern ((req%vstd!arithmetic.div_mod.lemma_mod_multiples_basic. x! m!)))))
(declare-fun ens%vstd!arithmetic.div_mod.lemma_mod_multiples_basic. (Int Int) Bool)
(assert (forall ((x! Int) (m! Int)) (! (= (ens%vstd!arithmetic.div_mod.lemma_mod_multiples_basic. x! m!) (= (EucMod (Mul x! m!) m!) 0)) :pattern ((ens%vstd!arithmetic.div_mod.lemma_mod_multiples_basic. x! m!)))))
(set-info :comment ";; Broadcast vstd::arithmetic::div_mod::lemma_mod_multiples_basic")
(assert (=> (fuel_bool fuel%vstd!arithmetic.div_mod.lemma_mod_multiples_basic.) (forall ((x! Int) (m! Int)) (! (=> (> m! 0) (= (EucMod (Mul x! m!) m!) 0)) :pattern ((EucMod (Mul x! m!) m!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%6 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize_spec")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (uInv SZ (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!))) :pattern ((lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::overlap")
(assert (fuel_bool_default fuel%lib!definitions_t.overlap.))
(assert (=> (fuel_bool fuel%lib!definitions_t.overlap.) (forall ((region1! Poly) (region2! Poly)) (! (= (lib!definitions_t.overlap.? region1! region2!) (ite (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region1!))))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region2!))))))) :pattern ((lib!definitions_t.overlap.? region1! region2!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::aligned")
(assert (fuel_bool_default fuel%lib!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%lib!definitions_t.aligned.) (forall ((addr! Poly) (size! Poly)) (! (= (lib!definitions_t.aligned.? addr! size!) (= (nClip (EucMod (%I addr!) (%I size!))) 0)) :pattern ((lib!definitions_t.aligned.? addr! size!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::cr3_spec")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((lib!spec_t.mem.impl&%1.cr3_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PAGE_SIZE.) (= lib!definitions_t.PAGE_SIZE.? 4096)))
(assert (uInv SZ lib!definitions_t.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::inv")
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.inv.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.inv.) (forall ((self! Poly)) (! (= (lib!spec_t.mem.impl&%1.inv.? self!) (and (and (and (<= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!) 9214364837600034816) (forall ((s1$ Poly) (s2$ Poly)) (! (=> (and (has_type s1$ TYPE%lib!definitions_t.MemRegion.) (has_type s2$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? self!)) s1$) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? self!)) s2$)) (not (= s1$ s2$))) (not (lib!definitions_t.overlap.? s1$ s2$)))) :pattern ((lib!definitions_t.overlap.? s1$ s2$))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!))))) (I lib!definitions_t.PAGE_SIZE.?))) (= (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)))) lib!definitions_t.PAGE_SIZE.?))) :pattern ((lib!spec_t.mem.impl&%1.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MemRegionExec::view")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%4.view.? self!) (lib!definitions_t.MemRegion./MemRegion (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. self!)))) (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. self!)))))) :pattern ((lib!definitions_t.impl&%4.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.MemRegionExec.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? self!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::init")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.init.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.init.) (forall ((s! Poly)) (! (= (lib!impl_u.spec_pt.init.? s!) (and (and (and (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!)))) (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!)))) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!definitions_t.MemRegion. (vstd!set.impl&%0.empty.? $ TYPE%lib!definitions_t.MemRegion.) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!))))))))))) (= (vstd!seq.Seq.len.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!)))))))))) 512)) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) 512) (= (%I (vstd!seq.Seq.index.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!))))))))) i$)) 0))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!))))))))) i$)))))) :pattern ((lib!impl_u.spec_pt.init.? s!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_WIDTH")
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_WIDTH.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_SPEC")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_PHYADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_PHYADDR_SPEC.) (= lib!definitions_t.MAX_PHYADDR_SPEC.? (uClip 64 (Sub (uClip 64 (bitshl (I 1) (I lib!definitions_t.MAX_PHYADDR_WIDTH.?))) 1)))))
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_LAYERS")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_LAYERS.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_LAYERS.) (= lib!definitions_t.X86_NUM_LAYERS.? 4)))
(assert (uInv SZ lib!definitions_t.X86_NUM_LAYERS.?))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_size")
(declare-fun req%lib!definitions_t.impl&%8.entry_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size. self! layer!) (=> %%global_location_label%%7 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size. self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_size.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::num_entries")
(declare-fun req%lib!definitions_t.impl&%8.num_entries. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.num_entries. self! layer!) (=> %%global_location_label%%8 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.num_entries. self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::num_entries")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.num_entries.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.num_entries.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.num_entries.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.num_entries.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_MAX_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.) (= lib!definitions_t.X86_MAX_ENTRY_SIZE.? (nClip (Mul (nClip (Mul (nClip (Mul 512 512)) 512)) 4096)))))
(assert (<= 0 lib!definitions_t.X86_MAX_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_ENTRIES")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_ENTRIES.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_ENTRIES.) (= lib!definitions_t.X86_NUM_ENTRIES.? 512)))
(assert (uInv SZ lib!definitions_t.X86_NUM_ENTRIES.?))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!) (=> %%global_location_label%%9 (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_size_is_next_layer_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.) (forall ((self! Poly) (i! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!) (=> (< (nClip (Add (%I i!) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i!) (nClip (Mul (lib!definitions_t.impl&%8.entry_size.? self! (I (nClip (Add (%I i!) 1)))) (lib!definitions_t.impl&%8.num_entries.? self! (I (nClip (Add (%I i!) 1))))))))) :pattern ((lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::inv")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.inv.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.inv.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%8.inv.? self!) (and (<= (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))) lib!definitions_t.X86_NUM_LAYERS.?) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (and (and (let ((tmp%%$ (lib!definitions_t.impl&%8.entry_size.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_MAX_ENTRY_SIZE.?))) (let ((tmp%%$ (lib!definitions_t.impl&%8.num_entries.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_NUM_ENTRIES.?)))) (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i$)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$)) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! i$)))))) :pattern ((lib!definitions_t.impl&%8.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::entry_base_from_index")
(assert (fuel_bool_default fuel%lib!definitions_t.entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (%I idx!) (%I entry_size!)))))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_base")
(declare-fun req%lib!definitions_t.impl&%8.entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%10 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%11 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_base")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!) (lib!definitions_t.entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::upper_vaddr")
(declare-fun req%lib!definitions_t.impl&%8.upper_vaddr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!) (and (=> %%global_location_label%%12 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%13 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::upper_vaddr")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.upper_vaddr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.upper_vaddr.) (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!) (lib!definitions_t.entry_base_from_index.? base! (I (lib!definitions_t.impl&%8.num_entries.? self! layer!)) (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT)) (<= 0 (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::L3_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L3_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L3_ENTRY_SIZE.) (= lib!definitions_t.L3_ENTRY_SIZE.? lib!definitions_t.PAGE_SIZE.?)))
(assert (uInv SZ lib!definitions_t.L3_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L2_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L2_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L2_ENTRY_SIZE.) (= lib!definitions_t.L2_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L3_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L2_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L1_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L1_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L1_ENTRY_SIZE.) (= lib!definitions_t.L1_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L2_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L1_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L0_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L0_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L0_ENTRY_SIZE.) (= lib!definitions_t.L0_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L1_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L0_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::x86_arch_spec")
(assert (fuel_bool_default fuel%lib!definitions_t.x86_arch_spec.))
(declare-fun %%array%%0 (Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3))) (and (= (%%apply%%1 %%x%% 0) %%hole%%0) (= (%%apply%%1 %%x%% 1) %%hole%%1) (= (%%apply%%1 %%x%% 2) %%hole%%2) (= (%%apply%%1 %%x%% 3) %%hole%%3))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3)))))
(assert (=> (fuel_bool fuel%lib!definitions_t.x86_arch_spec.) (= lib!definitions_t.x86_arch_spec.? (lib!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!definitions_t.ArchLayer. $ (CONST_INT 4)) (array_new $ TYPE%lib!definitions_t.ArchLayer. 4 (%%array%%0 (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L0_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L1_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L2_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L3_ENTRY_SIZE.?)) (%I (I 512))))))))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::candidate_mapping_in_bounds")
(assert (fuel_bool_default fuel%lib!definitions_t.candidate_mapping_in_bounds.))
(assert (=> (fuel_bool fuel%lib!definitions_t.candidate_mapping_in_bounds.) (forall ((base! Poly) (pte! Poly)) (! (= (lib!definitions_t.candidate_mapping_in_bounds.? base! pte!) (< (nClip (Add (%I base!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.impl&%8.upper_vaddr.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I 0) (I 0)))) :pattern ((lib!definitions_t.candidate_mapping_in_bounds.? base! pte!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::candidate_mapping_overlaps_existing_pmem")
(assert (fuel_bool_default fuel%lib!definitions_t.candidate_mapping_overlaps_existing_pmem.))
(assert (=> (fuel_bool fuel%lib!definitions_t.candidate_mapping_overlaps_existing_pmem.) (forall ((mappings! Poly) (base! Poly) (pte! Poly)) (! (= (lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? mappings! base! pte!) (exists ((b$ Poly)) (! (and (has_type b$ NAT) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings!) b$) (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings! b$))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings!) b$))))) :pattern ((lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? mappings! base! pte!))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_BASE")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_BASE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_BASE.) (= lib!definitions_t.MAX_BASE.? (nClip (Mul lib!definitions_t.X86_MAX_ENTRY_SIZE.? lib!definitions_t.X86_NUM_ENTRIES.?)))))
(assert (<= 0 lib!definitions_t.MAX_BASE.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_P")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_P.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_P.) (= lib!spec_t.hardware.MASK_FLAG_P.? (uClip 64 (bitshl (I 1) (I 0))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_P.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_RW")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_RW.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_RW.) (= lib!spec_t.hardware.MASK_FLAG_RW.? (uClip 64 (bitshl (I 1) (I 1))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_RW.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_US")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_US.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_US.) (= lib!spec_t.hardware.MASK_FLAG_US.? (uClip 64 (bitshl (I 1) (I 2))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_US.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_PWT")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_PWT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_PWT.) (= lib!spec_t.hardware.MASK_FLAG_PWT.? (uClip 64 (bitshl (I 1) (I 3))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_PWT.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_PCD")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_PCD.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_PCD.) (= lib!spec_t.hardware.MASK_FLAG_PCD.? (uClip 64 (bitshl (I 1) (I 4))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_PCD.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_A")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_A.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_A.) (= lib!spec_t.hardware.MASK_FLAG_A.? (uClip 64 (bitshl (I 1) (I 5))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_A.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_XD")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_XD.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_XD.) (= lib!spec_t.hardware.MASK_FLAG_XD.? (uClip 64 (bitshl (I 1) (I 63))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_XD.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_PG_FLAG_D")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_D.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_D.) (= lib!spec_t.hardware.MASK_PG_FLAG_D.? (uClip 64 (bitshl (I 1) (I 6))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_D.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_PG_FLAG_G")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_G.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_G.) (= lib!spec_t.hardware.MASK_PG_FLAG_G.? (uClip 64 (bitshl (I 1) (I 8))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_G.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L1_PG_FLAG_PS")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.) (= lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L2_PG_FLAG_PS")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.) (= lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::PageDirectoryEntry::all_mb0_bits_are_zero")
(declare-fun req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. (Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. self!) (=> %%global_location_label%%14 (<= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 3))) :pattern ((req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 12))))))))) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L1_PG_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 30))))))))) (I 30))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_PG_FLAG_PAT")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT.) (= lib!spec_t.hardware.MASK_PG_FLAG_PAT.? (uClip 64 (bitshl (I 1) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L2_PG_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 21))))))))) (I 21))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L3_PG_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 12))))))))) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L3_PG_FLAG_PAT")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.) (= lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::PageDirectoryEntry::view")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%3.view.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%3.view.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%3.view.? self!) (let ((v$ (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)))) (let ((flag_P$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_P.?))) lib!spec_t.hardware.MASK_FLAG_P.?))) (let ((flag_RW$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_RW.?))) lib!spec_t.hardware.MASK_FLAG_RW.?))) (let ((flag_US$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_US.?))) lib!spec_t.hardware.MASK_FLAG_US.?))) (let ((flag_PWT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_PWT.?))) lib!spec_t.hardware.MASK_FLAG_PWT.?))) (let ((flag_PCD$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_PCD.?))) lib!spec_t.hardware.MASK_FLAG_PCD.?))) (let ((flag_A$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_A.?))) lib!spec_t.hardware.MASK_FLAG_A.?))) (let ((flag_XD$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_XD.?))) lib!spec_t.hardware.MASK_FLAG_XD.?))) (let ((flag_D$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_D.?))) lib!spec_t.hardware.MASK_PG_FLAG_D.?))) (let ((flag_G$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_G.?))) lib!spec_t.hardware.MASK_PG_FLAG_G.?))) (ite (<= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 3) (ite (and (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_P.?))) lib!spec_t.hardware.MASK_FLAG_P.?) (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? self!)) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 0) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$)))) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 1) (ite (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?))) lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$))))) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 2) (ite (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?))) lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$)))))))) lib!spec_t.hardware.GhostPageDirectoryEntry./Empty) (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))))))))))) :pattern ((lib!spec_t.hardware.impl&%3.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? self!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((lib!spec_t.hardware.impl&%3.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::spec_read")
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.spec_read.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.spec_read.) (forall ((self! Poly) (idx! Poly) (region! Poly)) (! (= (lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!) (%I (vstd!seq.Seq.index.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? self! region!)) idx!))) :pattern ((lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!))))))
(assert (forall ((self! Poly) (idx! Poly) (region! Poly)) (! (=> (and (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type idx! NAT) (has_type region! TYPE%lib!definitions_t.MemRegion.)) (uInv 64 (lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!))) :pattern ((lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::read_entry")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.read_entry.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.read_entry.) (forall ((pt_mem! Poly) (dir_addr! Poly) (layer! Poly) (idx! Poly)) (! (= (lib!spec_t.hardware.read_entry.? pt_mem! dir_addr! layer! idx!) (let ((region$ (lib!definitions_t.MemRegion./MemRegion (%I dir_addr!) (%I (I lib!definitions_t.PAGE_SIZE.?))))) (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry (%I (I (lib!spec_t.mem.impl&%1.spec_read.? pt_mem! idx! (Poly%lib!definitions_t.MemRegion. region$)))) (%I layer!)))))) :pattern ((lib!spec_t.hardware.read_entry.? pt_mem! dir_addr! layer! idx!))))))
(assert (forall ((pt_mem! Poly) (dir_addr! Poly) (layer! Poly) (idx! Poly)) (! (=> (and (has_type pt_mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type dir_addr! NAT) (has_type layer! NAT) (has_type idx! NAT)) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.read_entry.? pt_mem! dir_addr! layer! idx!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((lib!spec_t.hardware.read_entry.? pt_mem! dir_addr! layer! idx!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::valid_pt_walk")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.valid_pt_walk.))
(define-fun is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ ((c lib!spec_t.hardware.GhostPageDirectoryEntry.)) Bool ((_ is lib!spec_t.hardware.GhostPageDirectoryEntry./Directory) c))
(define-fun is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ ((c lib!spec_t.hardware.GhostPageDirectoryEntry.)) Bool ((_ is lib!spec_t.hardware.GhostPageDirectoryEntry./Page) c))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.valid_pt_walk.) (forall ((pt_mem! Poly) (addr! Poly) (pte! Poly)) (! (= (lib!spec_t.hardware.valid_pt_walk.? pt_mem! addr! pte!) (let ((l0_idx$ (uClip 64 (bitshr (I (uClip 64 (bitand (I (%I addr!)) (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add 47 1)) 39))))))))) (I 39))))))) (I 39))))) (let ((l1_idx$ (uClip 64 (bitshr (I (uClip 64 (bitand (I (%I addr!)) (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add 38 1)) 30))))))))) (I 30))))))) (I 30))))) (let ((l2_idx$ (uClip 64 (bitshr (I (uClip 64 (bitand (I (%I addr!)) (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add 29 1)) 21))))))))) (I 21))))))) (I 21))))) (let ((l3_idx$ (uClip 64 (bitshr (I (uClip 64 (bitand (I (%I addr!)) (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add 20 1)) 12))))))))) (I 12))))))) (I 12))))) (let ((tmp%%$ (lib!spec_t.hardware.read_entry.? pt_mem! (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? pt_mem!))))))) (I 0) (I l0_idx$)))) (and (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ tmp%%$) (let ((dir_addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (let ((l0_RW$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (let ((l0_US$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (let ((l0_XD$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (let ((tmp%%$1 (lib!spec_t.hardware.read_entry.? pt_mem! (I dir_addr$) (I 1) (I l1_idx$)))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ tmp%%$1) (let ((page_addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$1))))) (let ((l1_RW$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$1))))) (let ((l1_US$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$1))))) (let ((l1_XD$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$1))))) (and (lib!definitions_t.aligned.? addr! (I lib!definitions_t.L1_ENTRY_SIZE.?)) (= (%Poly%lib!definitions_t.PageTableEntry. pte!) (lib!definitions_t.PageTableEntry./PageTableEntry (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I (I page_addr$)) (%I (I lib!definitions_t.L1_ENTRY_SIZE.?))))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags./Flags (%B (B (and l0_RW$ l1_RW$))) (%B (B (or (not l0_US$) (not l1_US$)))) (%B (B (or l0_XD$ l1_XD$))))))))))))) (and (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ tmp%%$1) (let ((dir_addr$1 (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$1))))) (let ((l1_RW$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$1))))) (let ((l1_US$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$1))))) (let ((l1_XD$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$1))))) (let ((tmp%%$2 (lib!spec_t.hardware.read_entry.? pt_mem! (I dir_addr$1) (I 2) (I l2_idx$)))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ tmp%%$2) (let ((page_addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$2))))) (let ((l2_RW$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$2))))) (let ((l2_US$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$2))))) (let ((l2_XD$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$2))))) (and (lib!definitions_t.aligned.? addr! (I lib!definitions_t.L2_ENTRY_SIZE.?)) (= (%Poly%lib!definitions_t.PageTableEntry. pte!) (lib!definitions_t.PageTableEntry./PageTableEntry (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I (I page_addr$)) (%I (I lib!definitions_t.L2_ENTRY_SIZE.?))))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags./Flags (%B (B (and (and l0_RW$ l1_RW$) l2_RW$))) (%B (B (or (or (not l0_US$) (not l1_US$)) (not l2_US$)))) (%B (B (or (or l0_XD$ l1_XD$) l2_XD$))))))))))))) (and (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ tmp%%$2) (let ((dir_addr$2 (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$2))))) (let ((l2_RW$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$2))))) (let ((l2_US$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$2))))) (let ((l2_XD$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$2))))) (let ((tmp%%$3 (lib!spec_t.hardware.read_entry.? pt_mem! (I dir_addr$2) (I 3) (I l3_idx$)))) (and (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ tmp%%$3) (let ((page_addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$3))))) (let ((l3_RW$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$3))))) (let ((l3_US$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$3))))) (let ((l3_XD$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$3))))) (and (lib!definitions_t.aligned.? addr! (I lib!definitions_t.L3_ENTRY_SIZE.?)) (= (%Poly%lib!definitions_t.PageTableEntry. pte!) (lib!definitions_t.PageTableEntry./PageTableEntry (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I (I page_addr$)) (%I (I lib!definitions_t.L3_ENTRY_SIZE.?))))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags./Flags (%B (B (and (and (and l0_RW$ l1_RW$) l2_RW$) l3_RW$))) (%B (B (or (or (or (not l0_US$) (not l1_US$)) (not l2_US$)) (not l3_US$)))) (%B (B (or (or (or l0_XD$ l1_XD$) l2_XD$) l3_XD$)))))))))))))))))))))))))))))))))))))))) :pattern ((lib!spec_t.hardware.valid_pt_walk.? pt_mem! addr! pte!))))))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::nat_to_u64")
(declare-fun req%lib!spec_t.hardware.nat_to_u64. (Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((n! Poly)) (! (= (req%lib!spec_t.hardware.nat_to_u64. n!) (=> %%global_location_label%%15 (<= (%I n!) 18446744073709551615))) :pattern ((req%lib!spec_t.hardware.nat_to_u64. n!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::nat_to_u64")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.nat_to_u64.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.nat_to_u64.) (forall ((n! Poly)) (! (= (lib!spec_t.hardware.nat_to_u64.? n!) (uClip 64 (%I n!))) :pattern ((lib!spec_t.hardware.nat_to_u64.? n!))))))
(assert (forall ((n! Poly)) (! (=> (has_type n! NAT) (uInv 64 (lib!spec_t.hardware.nat_to_u64.? n!))) :pattern ((lib!spec_t.hardware.nat_to_u64.? n!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::interp_pt_mem")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.interp_pt_mem.))
(declare-fun %%lambda%%1 (Int Poly Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Poly) (%%hole%%2 Type) (%%hole%%3 Poly) (addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) addr$) (B (and (< (%I addr$) %%hole%%0) (exists ((pte$ Poly)) (! (and (has_type pte$ %%hole%%2) (lib!spec_t.hardware.valid_pt_walk.? %%hole%%3 (I (lib!spec_t.hardware.nat_to_u64.? addr$)) pte$)) :pattern ((lib!spec_t.hardware.valid_pt_walk.? %%hole%%1 (I (lib!spec_t.hardware.nat_to_u64.? addr$)) pte$))))))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) addr$)))))
(declare-fun %%choose%%0 (Type Poly Poly Poly Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Poly) (%%hole%%4 Poly)) (! (=> (exists ((pte$ Poly)) (! (and (has_type pte$ %%hole%%0) (lib!spec_t.hardware.valid_pt_walk.? %%hole%%1 %%hole%%2 pte$)) :pattern ((lib!spec_t.hardware.valid_pt_walk.? %%hole%%3 %%hole%%4 pte$)))) (exists ((pte$ Poly)) (! (and (and (has_type pte$ %%hole%%0) (lib!spec_t.hardware.valid_pt_walk.? %%hole%%1 %%hole%%2 pte$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) pte$)) :pattern ((lib!spec_t.hardware.valid_pt_walk.? %%hole%%3 %%hole%%4 pte$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4)))))
(declare-fun %%lambda%%2 (Type Poly Poly Type) %%Function%%)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Type) (addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) addr$) (as_type (%%choose%%0 %%hole%%0 %%hole%%1 (I (lib!spec_t.hardware.nat_to_u64.? addr$)) %%hole%%2 (I (lib!spec_t.hardware.nat_to_u64.? addr$))) %%hole%%3)) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) addr$)))))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.interp_pt_mem.) (forall ((pt_mem! Poly)) (! (= (lib!spec_t.hardware.interp_pt_mem.? pt_mem!) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) (Poly%fun%1. (mk_fun (%%lambda%%1 lib!definitions_t.MAX_BASE.? pt_mem! TYPE%lib!definitions_t.PageTableEntry. pt_mem!))) (Poly%fun%1. (mk_fun (%%lambda%%2 TYPE%lib!definitions_t.PageTableEntry. pt_mem! pt_mem! TYPE%lib!definitions_t.PageTableEntry.)))))) :pattern ((lib!spec_t.hardware.interp_pt_mem.? pt_mem!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::PageTableVariables::interp")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.impl&%0.interp.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.impl&%0.interp.) (forall ((self! Poly)) (! (= (lib!impl_u.spec_pt.impl&%0.interp.? self!) (lib!spec_t.hardware.interp_pt_mem.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. self!))))) :pattern ((lib!impl_u.spec_pt.impl&%0.interp.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::alloc_available_pages")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (<= 0 (lib!spec_t.mem.impl&%1.alloc_available_pages.? self!))) :pattern ((lib!spec_t.mem.impl&%1.alloc_available_pages.? self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::step_Map_enabled")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.step_Map_enabled.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.step_Map_enabled.) (forall ((s! Poly) (vaddr! Poly) (pte! Poly)) (! (= (lib!impl_u.spec_pt.step_Map_enabled.? s! vaddr! pte!) (and (and (and (and (and (and (lib!definitions_t.aligned.? vaddr! (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.MAX_PHYADDR_SPEC.?)) (lib!definitions_t.candidate_mapping_in_bounds.? vaddr! pte!)) (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L1_ENTRY_SIZE.?))) (not (lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? s!)) vaddr! pte!))) (>= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables/pt_mem (%Poly%lib!impl_u.spec_pt.PageTableVariables. s!)))) 3))) :pattern ((lib!impl_u.spec_pt.step_Map_enabled.? s! vaddr! pte!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::candidate_mapping_overlaps_existing_vmem")
(assert (fuel_bool_default fuel%lib!definitions_t.candidate_mapping_overlaps_existing_vmem.))
(assert (=> (fuel_bool fuel%lib!definitions_t.candidate_mapping_overlaps_existing_vmem.) (forall ((mappings! Poly) (base! Poly) (pte! Poly)) (! (= (lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? mappings! base! pte!) (exists ((b$ Poly)) (! (and (has_type b$ NAT) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings!) b$) (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I base!) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings! b$))))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings!) b$))))) :pattern ((lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? mappings! base! pte!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::step_Map")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.step_Map.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.step_Map.) (forall ((s1! Poly) (s2! Poly) (vaddr! Poly) (pte! Poly) (result! Poly)) (! (= (lib!impl_u.spec_pt.step_Map.? s1! s2! vaddr! pte! result!) (and (lib!impl_u.spec_pt.step_Map_enabled.? s1! vaddr! pte!) (ite (lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? s1!)) vaddr! pte!) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)) (= (lib!impl_u.spec_pt.impl&%0.interp.? s2!) (lib!impl_u.spec_pt.impl&%0.interp.? s1!))) (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (= (lib!impl_u.spec_pt.impl&%0.interp.? s2!) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? s1!)) vaddr! pte!))))))) :pattern ((lib!impl_u.spec_pt.step_Map.? s1! s2! vaddr! pte! result!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::between")
(assert (fuel_bool_default fuel%lib!definitions_t.between.))
(assert (=> (fuel_bool fuel%lib!definitions_t.between.) (forall ((x! Poly) (a! Poly) (b! Poly)) (! (= (lib!definitions_t.between.? x! a! b!) (and (<= (%I a!) (%I x!)) (< (%I x!) (%I b!)))) :pattern ((lib!definitions_t.between.? x! a! b!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PT_BOUND_LOW")
(assert (fuel_bool_default fuel%lib!definitions_t.PT_BOUND_LOW.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PT_BOUND_LOW.) (= lib!definitions_t.PT_BOUND_LOW.? 0)))
(assert (<= 0 lib!definitions_t.PT_BOUND_LOW.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::PT_BOUND_HIGH")
(assert (fuel_bool_default fuel%lib!definitions_t.PT_BOUND_HIGH.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PT_BOUND_HIGH.) (= lib!definitions_t.PT_BOUND_HIGH.? (uClip SZ (Mul (uClip SZ (Mul (uClip SZ (Mul (uClip SZ (Mul 512 512)) 1024)) 1024)) 1024)))))
(assert (uInv SZ lib!definitions_t.PT_BOUND_HIGH.?))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::step_Unmap_enabled")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.step_Unmap_enabled.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.step_Unmap_enabled.) (forall ((vaddr! Poly)) (! (= (lib!impl_u.spec_pt.step_Unmap_enabled.? vaddr!) (and (lib!definitions_t.between.? vaddr! (I lib!definitions_t.PT_BOUND_LOW.?) (I lib!definitions_t.PT_BOUND_HIGH.?)) (or (or (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L3_ENTRY_SIZE.?)) (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L2_ENTRY_SIZE.?))) (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L1_ENTRY_SIZE.?))))) :pattern ((lib!impl_u.spec_pt.step_Unmap_enabled.? vaddr!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::step_Unmap")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.step_Unmap.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.step_Unmap.) (forall ((s1! Poly) (s2! Poly) (vaddr! Poly) (result! Poly)) (! (= (lib!impl_u.spec_pt.step_Unmap.? s1! s2! vaddr! result!) (and (lib!impl_u.spec_pt.step_Unmap_enabled.? vaddr!) (ite (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? s1!))) vaddr!) (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (= (lib!impl_u.spec_pt.impl&%0.interp.? s2!) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? s1!)) vaddr!)))) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)) (= (lib!impl_u.spec_pt.impl&%0.interp.? s2!) (lib!impl_u.spec_pt.impl&%0.interp.? s1!)))))) :pattern ((lib!impl_u.spec_pt.step_Unmap.? s1! s2! vaddr! result!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::step_Resolve_enabled")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.step_Resolve_enabled.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.step_Resolve_enabled.) (forall ((vaddr! Poly)) (! (= (lib!impl_u.spec_pt.step_Resolve_enabled.? vaddr!) (and (lib!definitions_t.aligned.? vaddr! (I 8)) (< (%I vaddr!) lib!definitions_t.MAX_BASE.?))) :pattern ((lib!impl_u.spec_pt.step_Resolve_enabled.? vaddr!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::step_Resolve")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.step_Resolve.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.step_Resolve.) (forall ((s1! Poly) (s2! Poly) (vaddr! Poly) (result! Poly)) (! (= (lib!impl_u.spec_pt.step_Resolve.? s1! s2! vaddr! result!) (and (and (lib!impl_u.spec_pt.step_Resolve_enabled.? vaddr!) (= s2! s1!)) (ite (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? s1!)) (I base$) (Poly%lib!definitions_t.PageTableEntry. pte$)) (lib!definitions_t.between.? vaddr! (I base$) (I (nClip (Add base$ (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))))))) (not (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? s1!)) base$ pte$) (lib!definitions_t.between.? vaddr! base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? s1!)) base$ pte$)))))))) :pattern ((lib!impl_u.spec_pt.step_Resolve.? s1! s2! vaddr! result!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::WORD_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.WORD_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.WORD_SIZE.) (= lib!definitions_t.WORD_SIZE.? 8)))
(assert (uInv SZ lib!definitions_t.WORD_SIZE.?))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Specs lib::extra::aligned_transitive")
(declare-fun req%lib!extra.aligned_transitive. (Int Int Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (req%lib!extra.aligned_transitive. a! b! c!) (and (=> %%global_location_label%%16 (< 0 b!)) (=> %%global_location_label%%17 (< 0 c!)) (=> %%global_location_label%%18 (lib!definitions_t.aligned.? (I a!) (I b!))) (=> %%global_location_label%%19 (lib!definitions_t.aligned.? (I b!) (I c!))))) :pattern ((req%lib!extra.aligned_transitive. a! b! c!)))))
(declare-fun ens%lib!extra.aligned_transitive. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (ens%lib!extra.aligned_transitive. a! b! c!) (lib!definitions_t.aligned.? (I a!) (I c!))) :pattern ((ens%lib!extra.aligned_transitive. a! b! c!)))))
(set-info :comment ";; Function-Specs lib::extra::mod_add_zero")
(declare-fun req%lib!extra.mod_add_zero. (Int Int Int) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (req%lib!extra.mod_add_zero. a! b! c!) (and (=> %%global_location_label%%20 (lib!definitions_t.aligned.? (I a!) (I c!))) (=> %%global_location_label%%21 (lib!definitions_t.aligned.? (I b!) (I c!))) (=> %%global_location_label%%22 (> c! 0)))) :pattern ((req%lib!extra.mod_add_zero. a! b! c!)))))
(declare-fun ens%lib!extra.mod_add_zero. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (ens%lib!extra.mod_add_zero. a! b! c!) (lib!definitions_t.aligned.? (I (nClip (Add a! b!))) (I c!))) :pattern ((ens%lib!extra.mod_add_zero. a! b! c!)))))
(set-info :comment ";; Function-Specs lib::extra::subtract_mod_eq_zero")
(declare-fun req%lib!extra.subtract_mod_eq_zero. (Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (req%lib!extra.subtract_mod_eq_zero. a! b! c!) (and (=> %%global_location_label%%23 (lib!definitions_t.aligned.? (I a!) (I c!))) (=> %%global_location_label%%24 (lib!definitions_t.aligned.? (I b!) (I c!))) (=> %%global_location_label%%25 (<= a! b!)) (=> %%global_location_label%%26 (> c! 0)))) :pattern ((req%lib!extra.subtract_mod_eq_zero. a! b! c!)))))
(declare-fun ens%lib!extra.subtract_mod_eq_zero. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (ens%lib!extra.subtract_mod_eq_zero. a! b! c!) (lib!definitions_t.aligned.? (I (nClip (Sub b! a!))) (I c!))) :pattern ((ens%lib!extra.subtract_mod_eq_zero. a! b! c!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::spec_pt::step_Stutter")
(assert (fuel_bool_default fuel%lib!impl_u.spec_pt.step_Stutter.))
(assert (=> (fuel_bool fuel%lib!impl_u.spec_pt.step_Stutter.) (forall ((s1! Poly) (s2! Poly)) (! (= (lib!impl_u.spec_pt.step_Stutter.? s1! s2!) (= s1! s2!)) :pattern ((lib!impl_u.spec_pt.step_Stutter.? s1! s2!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::init")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.init.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.init.) (forall ((s! Poly)) (! (= (lib!spec_t.hlspec.init.? s!) (and (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s!)) (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.empty.? $ NAT $ NAT))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))) :pattern ((lib!spec_t.hlspec.init.? s!))))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::word_index_spec")
(declare-fun req%lib!spec_t.mem.word_index_spec. (Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((addr! Poly)) (! (= (req%lib!spec_t.mem.word_index_spec. addr!) (=> %%global_location_label%%27 (lib!definitions_t.aligned.? addr! (I 8)))) :pattern ((req%lib!spec_t.mem.word_index_spec. addr!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::word_index_spec")
(assert (fuel_bool_default fuel%lib!spec_t.mem.word_index_spec.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.word_index_spec.) (forall ((addr! Poly)) (! (= (lib!spec_t.mem.word_index_spec.? addr!) (nClip (EucDiv (%I addr!) lib!definitions_t.WORD_SIZE.?))) :pattern ((lib!spec_t.mem.word_index_spec.? addr!))))))
(assert (forall ((addr! Poly)) (! (=> (has_type addr! NAT) (<= 0 (lib!spec_t.mem.word_index_spec.? addr!))) :pattern ((lib!spec_t.mem.word_index_spec.? addr!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::mem_domain_from_mappings_contains")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.mem_domain_from_mappings_contains.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.mem_domain_from_mappings_contains.) (forall ((phys_mem_size! Poly) (word_idx! Poly) (mappings! Poly)) (! (= (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? phys_mem_size! word_idx! mappings!) (let ((vaddr$ (nClip (Mul (%I word_idx!) lib!definitions_t.WORD_SIZE.?)))) (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (let ((paddr$ (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))) (Sub vaddr$ (%I base$)))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? (I paddr$)))) (and (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings! base$ pte$) (lib!definitions_t.between.? (I vaddr$) base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$)))))))))) (< pmem_idx$ (%I phys_mem_size!)))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings! base$ pte$)))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings_contains.? phys_mem_size! word_idx! mappings!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::mem_domain_from_mappings")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.mem_domain_from_mappings.))
(declare-fun %%lambda%%3 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (word_idx$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1) word_idx$) (B (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? %%hole%%0 word_idx$ %%hole%%1))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1) word_idx$)))))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.mem_domain_from_mappings.) (forall ((phys_mem_size! Poly) (mappings! Poly)) (! (= (lib!spec_t.hlspec.mem_domain_from_mappings.? phys_mem_size! mappings!) (%Poly%vstd!set.Set<nat.>. (vstd!set.impl&%0.new.? $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%3 phys_mem_size! mappings!)))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings.? phys_mem_size! mappings!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::LoadResult::arrow_0")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%0.arrow_0.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%0.arrow_0.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%0.arrow_0.? self!) (lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. self!))) :pattern ((lib!definitions_t.impl&%0.arrow_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.LoadResult.) (<= 0 (lib!definitions_t.impl&%0.arrow_0.? self!))) :pattern ((lib!definitions_t.impl&%0.arrow_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_ReadWrite")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_ReadWrite.))
(define-fun is-lib!definitions_t.RWOp./Store_ ((c lib!definitions_t.RWOp.)) Bool ((_ is lib!definitions_t.RWOp./Store) c))
(define-fun is-lib!definitions_t.StoreResult./Ok_ ((c lib!definitions_t.StoreResult.)) Bool ((_ is lib!definitions_t.StoreResult./Ok) c))
(define-fun is-lib!definitions_t.StoreResult./Pagefault_ ((c lib!definitions_t.StoreResult.)) Bool ((_ is lib!definitions_t.StoreResult./Pagefault) c))
(define-fun is-lib!definitions_t.LoadResult./Value_ ((c lib!definitions_t.LoadResult.)) Bool ((_ is lib!definitions_t.LoadResult./Value) c))
(define-fun is-lib!definitions_t.LoadResult./Pagefault_ ((c lib!definitions_t.LoadResult.)) Bool ((_ is lib!definitions_t.LoadResult./Pagefault) c))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_ReadWrite.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (vaddr! Poly) (op! Poly) (pte! Poly)) (! (= (lib!spec_t.hlspec.step_ReadWrite.? c! s1! s2! vaddr! op! pte!) (let ((vmem_idx$ (lib!spec_t.mem.word_index_spec.? vaddr!))) (and (and (lib!definitions_t.aligned.? vaddr! (I 8)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (ite (and (is-core!option.Option./Some_ (%Poly%core!option.Option. pte!)) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))))) (let ((paddr$ (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))) (Sub (%I vaddr!) base$))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? (I paddr$)))) (and (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (I base$) (Poly%lib!definitions_t.PageTableEntry. pte$)) (lib!definitions_t.between.? vaddr! (I base$) (I (nClip (Add base$ (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) (ite (is-lib!definitions_t.RWOp./Store_ (%Poly%lib!definitions_t.RWOp. op!)) (let ((new_value$ (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Store/result (%Poly%lib!definitions_t.RWOp. op!)))) (ite (and (and (< pmem_idx$ (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (not (lib!definitions_t.Flags./Flags/is_supervisor (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))))) (lib!definitions_t.Flags./Flags/is_writable (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))) (and (is-lib!definitions_t.StoreResult./Ok_ result$) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (I vmem_idx$) (I new_value$))))) (and (is-lib!definitions_t.StoreResult./Pagefault_ result$) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))))))) (let ((is_exec$ (lib!definitions_t.RWOp./Load/is_exec (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. op!)))) (and (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (ite (and (and (< pmem_idx$ (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (not (lib!definitions_t.Flags./Flags/is_supervisor (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))))) (=> is_exec$ (not (lib!definitions_t.Flags./Flags/disable_execute (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))) (and (is-lib!definitions_t.LoadResult./Value_ result$) (= (lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. (Poly%lib!definitions_t.LoadResult. result$))) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (I vmem_idx$))))) (is-lib!definitions_t.LoadResult./Pagefault_ result$))))))))))) (and (and (not (vstd!set.impl&%0.contains.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!spec_t.hlspec.mem_domain_from_mappings.? (I (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))))) (I vmem_idx$))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (ite (is-lib!definitions_t.RWOp./Store_ (%Poly%lib!definitions_t.RWOp. op!)) (let ((new_value$ (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Store/result (%Poly%lib!definitions_t.RWOp. op!)))) (is-lib!definitions_t.StoreResult./Pagefault_ result$))) (let ((is_exec$ (lib!definitions_t.RWOp./Load/is_exec (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. op!)))) (is-lib!definitions_t.LoadResult./Pagefault_ result$))))))))) :pattern ((lib!spec_t.hlspec.step_ReadWrite.? c! s1! s2! vaddr! op! pte!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Map_enabled")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Map_enabled.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Map_enabled.) (forall ((map! Poly) (vaddr! Poly) (pte! Poly)) (! (= (lib!spec_t.hlspec.step_Map_enabled.? map! vaddr! pte!) (and (and (and (and (and (lib!definitions_t.aligned.? vaddr! (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.MAX_PHYADDR_SPEC.?)) (lib!definitions_t.candidate_mapping_in_bounds.? vaddr! pte!)) (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L1_ENTRY_SIZE.?))) (not (lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? map! vaddr! pte!)))) :pattern ((lib!spec_t.hlspec.step_Map_enabled.? map! vaddr! pte!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Map")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Map.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Map.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (vaddr! Poly) (pte! Poly) (result! Poly)) (! (= (lib!spec_t.hlspec.step_Map.? c! s1! s2! vaddr! pte! result!) (and (lib!spec_t.hlspec.step_Map_enabled.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) vaddr! pte!) (ite (lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) vaddr! pte!) (and (and (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (and (and (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) vaddr! pte!)))) (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) idx$) (= (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))) idx$) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) idx$)))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))) idx$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) idx$))))) (= (%Poly%vstd!set.Set<nat.>. (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))))) (lib!spec_t.hlspec.mem_domain_from_mappings.? (I (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))))))))) :pattern ((lib!spec_t.hlspec.step_Map.? c! s1! s2! vaddr! pte! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Unmap_enabled")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Unmap_enabled.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Unmap_enabled.) (forall ((vaddr! Poly)) (! (= (lib!spec_t.hlspec.step_Unmap_enabled.? vaddr!) (and (lib!definitions_t.between.? vaddr! (I lib!definitions_t.PT_BOUND_LOW.?) (I lib!definitions_t.PT_BOUND_HIGH.?)) (or (or (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L3_ENTRY_SIZE.?)) (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L2_ENTRY_SIZE.?))) (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L1_ENTRY_SIZE.?))))) :pattern ((lib!spec_t.hlspec.step_Unmap_enabled.? vaddr!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Unmap")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Unmap.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Unmap.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (vaddr! Poly) (result! Poly)) (! (= (lib!spec_t.hlspec.step_Unmap.? c! s1! s2! vaddr! result!) (and (lib!spec_t.hlspec.step_Unmap_enabled.? vaddr!) (ite (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) vaddr!) (and (and (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) vaddr!)))) (= (%Poly%vstd!set.Set<nat.>. (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))))) (lib!spec_t.hlspec.mem_domain_from_mappings.? (I (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)))))) (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)))) idx$) (= (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))) idx$) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) idx$)))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))) idx$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) idx$))))) (and (and (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))))))) :pattern ((lib!spec_t.hlspec.step_Unmap.? c! s1! s2! vaddr! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Resolve_enabled")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Resolve_enabled.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Resolve_enabled.) (forall ((vaddr! Poly)) (! (= (lib!spec_t.hlspec.step_Resolve_enabled.? vaddr!) (lib!definitions_t.aligned.? vaddr! (I 8))) :pattern ((lib!spec_t.hlspec.step_Resolve_enabled.? vaddr!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Resolve")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Resolve.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Resolve.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (vaddr! Poly) (result! Poly)) (! (= (lib!spec_t.hlspec.step_Resolve.? c! s1! s2! vaddr! result!) (and (and (lib!spec_t.hlspec.step_Resolve_enabled.? vaddr!) (= s2! s1!)) (ite (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (I base$) (Poly%lib!definitions_t.PageTableEntry. pte$)) (lib!definitions_t.between.? vaddr! (I base$) (I (nClip (Add base$ (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))))))) (let ((vmem_idx$ (lib!spec_t.mem.word_index_spec.? vaddr!))) (not (vstd!set.impl&%0.contains.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!spec_t.hlspec.mem_domain_from_mappings.? (I (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))))) (I vmem_idx$))))))) :pattern ((lib!spec_t.hlspec.step_Resolve.? c! s1! s2! vaddr! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Stutter")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Stutter.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Stutter.) (forall ((c! Poly) (s1! Poly) (s2! Poly)) (! (= (lib!spec_t.hlspec.step_Stutter.? c! s1! s2!) (= s1! s2!)) :pattern ((lib!spec_t.hlspec.step_Stutter.? c! s1! s2!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::next_step")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.next_step.))
(define-fun is-lib!spec_t.hlspec.AbstractStep./ReadWrite_ ((c lib!spec_t.hlspec.AbstractStep.)) Bool ((_ is lib!spec_t.hlspec.AbstractStep./ReadWrite) c))
(define-fun is-lib!spec_t.hlspec.AbstractStep./Map_ ((c lib!spec_t.hlspec.AbstractStep.)) Bool ((_ is lib!spec_t.hlspec.AbstractStep./Map) c))
(define-fun is-lib!spec_t.hlspec.AbstractStep./Unmap_ ((c lib!spec_t.hlspec.AbstractStep.)) Bool ((_ is lib!spec_t.hlspec.AbstractStep./Unmap) c))
(define-fun is-lib!spec_t.hlspec.AbstractStep./Resolve_ ((c lib!spec_t.hlspec.AbstractStep.)) Bool ((_ is lib!spec_t.hlspec.AbstractStep./Resolve) c))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.next_step.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (step! Poly)) (! (= (lib!spec_t.hlspec.next_step.? c! s1! s2! step!) (ite (is-lib!spec_t.hlspec.AbstractStep./ReadWrite_ (%Poly%lib!spec_t.hlspec.AbstractStep. step!)) (let ((vaddr$ (lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((op$ (lib!spec_t.hlspec.AbstractStep./ReadWrite/op (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((pte$ (lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (lib!spec_t.hlspec.step_ReadWrite.? c! s1! s2! (I vaddr$) (Poly%lib!definitions_t.RWOp. op$) (Poly%core!option.Option. pte$))))) (ite (is-lib!spec_t.hlspec.AbstractStep./Map_ (%Poly%lib!spec_t.hlspec.AbstractStep. step!)) (let ((vaddr$ (lib!spec_t.hlspec.AbstractStep./Map/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((pte$ (lib!spec_t.hlspec.AbstractStep./Map/pte (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((result$ (lib!spec_t.hlspec.AbstractStep./Map/result (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (lib!spec_t.hlspec.step_Map.? c! s1! s2! (I vaddr$) (Poly%lib!definitions_t.PageTableEntry. pte$) (Poly%core!result.Result. result$))))) (ite (is-lib!spec_t.hlspec.AbstractStep./Unmap_ (%Poly%lib!spec_t.hlspec.AbstractStep. step!)) (let ((vaddr$ (lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((result$ (lib!spec_t.hlspec.AbstractStep./Unmap/result (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (lib!spec_t.hlspec.step_Unmap.? c! s1! s2! (I vaddr$) (Poly%core!result.Result. result$)))) (ite (is-lib!spec_t.hlspec.AbstractStep./Resolve_ (%Poly%lib!spec_t.hlspec.AbstractStep. step!)) (let ((vaddr$ (lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((result$ (lib!spec_t.hlspec.AbstractStep./Resolve/result (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (lib!spec_t.hlspec.step_Resolve.? c! s1! s2! (I vaddr$) (Poly%core!result.Result. result$)))) (lib!spec_t.hlspec.step_Stutter.? c! s1! s2!)))))) :pattern ((lib!spec_t.hlspec.next_step.? c! s1! s2! step!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::init")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.init.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.init.) (forall ((s! Poly)) (! (= (lib!spec_t.hardware.init.? s!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s!)))) (vstd!set.impl&%0.empty.? $ NAT)) (= (lib!spec_t.hardware.interp_pt_mem.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s!)))) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))) :pattern ((lib!spec_t.hardware.init.? s!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::step_ReadWrite")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.step_ReadWrite.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.step_ReadWrite.) (forall ((s1! Poly) (s2! Poly) (vaddr! Poly) (paddr! Poly) (op! Poly) (pte! Poly)) (! (= (lib!spec_t.hardware.step_ReadWrite.? s1! s2! vaddr! paddr! op! pte!) (and (and (and (lib!definitions_t.aligned.? vaddr! (I 8)) (= (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s1!)))) (= (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s1!)))) (ite (and (is-core!option.Option./Some_ (%Poly%core!option.Option. pte!)) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? paddr!))) (and (and (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s1!))) (I base$) (Poly%lib!definitions_t.PageTableEntry. pte$)) (lib!definitions_t.between.? vaddr! (I base$) (I (nClip (Add base$ (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) (= (%I paddr!) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))) (Sub (%I vaddr!) base$))))) (ite (is-lib!definitions_t.RWOp./Store_ (%Poly%lib!definitions_t.RWOp. op!)) (let ((new_value$ (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Store/result (%Poly%lib!definitions_t.RWOp. op!)))) (ite (and (and (< pmem_idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))))) (not (lib!definitions_t.Flags./Flags/is_supervisor (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))))) (lib!definitions_t.Flags./Flags/is_writable (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))) (and (is-lib!definitions_t.StoreResult./Ok_ result$) (= (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.update.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))) (I pmem_idx$) (I new_value$))))) (and (is-lib!definitions_t.StoreResult./Pagefault_ result$) (= (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))))))) (let ((is_exec$ (lib!definitions_t.RWOp./Load/is_exec (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. op!)))) (and (= (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))) (ite (and (and (< pmem_idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))))) (not (lib!definitions_t.Flags./Flags/is_supervisor (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))))) (=> is_exec$ (not (lib!definitions_t.Flags./Flags/disable_execute (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))) (and (is-lib!definitions_t.LoadResult./Value_ result$) (= (lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. (Poly%lib!definitions_t.LoadResult. result$))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))) (I pmem_idx$))))) (is-lib!definitions_t.LoadResult./Pagefault_ result$)))))))))) (and (and (not (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.interp_pt_mem.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))))) base$ pte$) (lib!definitions_t.between.? vaddr! base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.interp_pt_mem.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))))) base$ pte$))))) (= (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!)))) (ite (is-lib!definitions_t.RWOp./Store_ (%Poly%lib!definitions_t.RWOp. op!)) (let ((new_value$ (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Store/result (%Poly%lib!definitions_t.RWOp. op!)))) (is-lib!definitions_t.StoreResult./Pagefault_ result$))) (let ((is_exec$ (lib!definitions_t.RWOp./Load/is_exec (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. op!)))) (is-lib!definitions_t.LoadResult./Pagefault_ result$)))))))) :pattern ((lib!spec_t.hardware.step_ReadWrite.? s1! s2! vaddr! paddr! op! pte!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::step_PTMemOp")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.step_PTMemOp.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.step_PTMemOp.) (forall ((s1! Poly) (s2! Poly)) (! (= (lib!spec_t.hardware.step_PTMemOp.? s1! s2!) (and (= (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))) (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s2!))) base$ pte$) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s1!))) base$ pte$))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s2!))) base$ pte$)) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s1!))) base$ pte$)))))) :pattern ((lib!spec_t.hardware.step_PTMemOp.? s1! s2!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::step_TLBFill")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.step_TLBFill.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.step_TLBFill.) (forall ((s1! Poly) (s2! Poly) (vaddr! Poly) (pte! Poly)) (! (= (lib!spec_t.hardware.step_TLBFill.? s1! s2! vaddr! pte!) (and (and (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.interp_pt_mem.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))))) vaddr! pte!) (= (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s1!))) vaddr! pte!)))) (= (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s1!)))) (= (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))))) :pattern ((lib!spec_t.hardware.step_TLBFill.? s1! s2! vaddr! pte!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::step_TLBEvict")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.step_TLBEvict.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.step_TLBEvict.) (forall ((s1! Poly) (s2! Poly) (vaddr! Poly)) (! (= (lib!spec_t.hardware.step_TLBEvict.? s1! s2! vaddr!) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s1!)))) vaddr!) (= (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. s1!))) vaddr!)))) (= (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. s1!)))) (= (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s2!)) (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. s1!))))) :pattern ((lib!spec_t.hardware.step_TLBEvict.? s1! s2! vaddr!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::next_step")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.next_step.))
(define-fun is-lib!spec_t.hardware.HWStep./ReadWrite_ ((c lib!spec_t.hardware.HWStep.)) Bool ((_ is lib!spec_t.hardware.HWStep./ReadWrite) c))
(define-fun is-lib!spec_t.hardware.HWStep./PTMemOp_ ((c lib!spec_t.hardware.HWStep.)) Bool ((_ is lib!spec_t.hardware.HWStep./PTMemOp) c))
(define-fun is-lib!spec_t.hardware.HWStep./TLBFill_ ((c lib!spec_t.hardware.HWStep.)) Bool ((_ is lib!spec_t.hardware.HWStep./TLBFill) c))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.next_step.) (forall ((s1! Poly) (s2! Poly) (step! Poly)) (! (= (lib!spec_t.hardware.next_step.? s1! s2! step!) (ite (is-lib!spec_t.hardware.HWStep./ReadWrite_ (%Poly%lib!spec_t.hardware.HWStep. step!)) (let ((vaddr$ (lib!spec_t.hardware.HWStep./ReadWrite/vaddr (%Poly%lib!spec_t.hardware.HWStep. step!)))) (let ((paddr$ (lib!spec_t.hardware.HWStep./ReadWrite/paddr (%Poly%lib!spec_t.hardware.HWStep. step!)))) (let ((op$ (lib!spec_t.hardware.HWStep./ReadWrite/op (%Poly%lib!spec_t.hardware.HWStep. step!)))) (let ((pte$ (lib!spec_t.hardware.HWStep./ReadWrite/pte (%Poly%lib!spec_t.hardware.HWStep. step!)))) (lib!spec_t.hardware.step_ReadWrite.? s1! s2! (I vaddr$) (I paddr$) (Poly%lib!definitions_t.RWOp. op$) (Poly%core!option.Option. pte$)))))) (ite (is-lib!spec_t.hardware.HWStep./PTMemOp_ (%Poly%lib!spec_t.hardware.HWStep. step!)) (lib!spec_t.hardware.step_PTMemOp.? s1! s2!) (ite (is-lib!spec_t.hardware.HWStep./TLBFill_ (%Poly%lib!spec_t.hardware.HWStep. step!)) (let ((vaddr$ (lib!spec_t.hardware.HWStep./TLBFill/vaddr (%Poly%lib!spec_t.hardware.HWStep. step!)))) (let ((pte$ (lib!spec_t.hardware.HWStep./TLBFill/pte (%Poly%lib!spec_t.hardware.HWStep. step!)))) (lib!spec_t.hardware.step_TLBFill.? s1! s2! (I vaddr$) (Poly%lib!definitions_t.PageTableEntry. pte$)))) (let ((vaddr$ (lib!spec_t.hardware.HWStep./TLBEvict/vaddr (%Poly%lib!spec_t.hardware.HWStep. step!)))) (lib!spec_t.hardware.step_TLBEvict.? s1! s2! (I vaddr$))))))) :pattern ((lib!spec_t.hardware.next_step.? s1! s2! step!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::interp_pt_mem")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.interp_pt_mem.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.interp_pt_mem.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.interp_pt_mem.? self!) (lib!spec_t.hardware.interp_pt_mem.? (Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. self!)))))))) :pattern ((lib!spec_t.os.impl&%0.interp_pt_mem.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::pt_mappings_dont_overlap_in_vmem")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_vmem.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_vmem.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_vmem.? self!) (forall ((b1$ Poly) (pte1$ Poly) (b2$ Poly) (pte2$ Poly)) (! (=> (and (has_type b1$ NAT) (has_type pte1$ TYPE%lib!definitions_t.PageTableEntry.) (has_type b2$ NAT) (has_type pte2$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) b1$ pte1$) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) b2$ pte2$)) (or (= b1$ b2$) (not (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b1$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte1$))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b2$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte2$)))))))))))))) :pattern ((lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b1$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte1$))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b2$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte2$)))))))))))))) :pattern ((lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_vmem.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::pt_mappings_dont_overlap_in_pmem")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.? self!) (forall ((b1$ Poly) (pte1$ Poly) (b2$ Poly) (pte2$ Poly)) (! (=> (and (has_type b1$ NAT) (has_type pte1$ TYPE%lib!definitions_t.PageTableEntry.) (has_type b2$ NAT) (has_type pte2$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) b1$ pte1$) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) b2$ pte2$)) (or (= b1$ b2$) (not (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte1$))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte2$)))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) b1$ pte1$) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) b2$ pte2$))))) :pattern ((lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::tlb_is_submap_of_pt")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? self!) (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. self!)))))) base$ pte$) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) base$ pte$))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) base$ pte$))))) :pattern ((lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::pt_entry_sizes_are_valid")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? self!) (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) base$ pte$) (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))) lib!definitions_t.L1_ENTRY_SIZE.?)))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) base$ pte$))))) :pattern ((lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::pt_entries_aligned")
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.pt_entries_aligned.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.pt_entries_aligned.? self!) (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) base$ pte$) (and (lib!definitions_t.aligned.? base$ (I 8)) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$)))))) (I 8))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)) base$ pte$))))) :pattern ((lib!spec_t.os.impl&%0.pt_entries_aligned.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::inv")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.inv.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.inv.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.inv.? self!) (and (and (and (and (lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_vmem.? self!) (lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.? self!)) (lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? self!)) (lib!spec_t.os.impl&%0.pt_entries_aligned.? self!)) (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? self!))) :pattern ((lib!spec_t.os.impl&%0.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::pt_variables")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.pt_variables.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.pt_variables.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.pt_variables.? self!) (lib!impl_u.spec_pt.PageTableVariables./PageTableVariables (%Poly%lib!spec_t.mem.PageTableMemory. (Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. self!))))))))) :pattern ((lib!spec_t.os.impl&%0.pt_variables.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::effective_mappings")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.effective_mappings.))
(declare-fun %%lambda%%4 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (base$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) base$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 base$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 base$)))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) base$)))))
(declare-fun %%lambda%%5 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (base$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) base$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 base$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 base$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base$))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) base$)))))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.effective_mappings.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.effective_mappings.? self!) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. self!))))))) $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)))))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. self!))))))) $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. self!)))))) $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? self!)))))))) :pattern ((lib!spec_t.os.impl&%0.effective_mappings.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::interp_constants")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.interp_constants.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.interp_constants.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.interp_constants.? self!) (lib!spec_t.hlspec.AbstractConstants./AbstractConstants (%I (I (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. self!))))))))))) :pattern ((lib!spec_t.os.impl&%0.interp_constants.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.os.OSVariables.) (has_type (Poly%lib!spec_t.hlspec.AbstractConstants. (lib!spec_t.os.impl&%0.interp_constants.? self!)) TYPE%lib!spec_t.hlspec.AbstractConstants.)) :pattern ((lib!spec_t.os.impl&%0.interp_constants.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::interp_vmem")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.interp_vmem.))
(declare-fun %%choose%%1 (Type Type Dcr Type Dcr Type Poly Poly Dcr Type Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly)) (! (=> (exists ((base$ Poly) (pte$ Poly)) (! (and (has_type base$ %%hole%%0) (has_type pte$ %%hole%%1) (and (vstd!map_lib.impl&%0.contains_pair.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 base$ pte$) (lib!definitions_t.between.? %%hole%%7 base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base$ pte$)))) (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ %%hole%%0) (has_type pte$ %%hole%%1) (and (vstd!map_lib.impl&%0.contains_pair.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 base$ pte$) (lib!definitions_t.between.? %%hole%%7 base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) (Poly%tuple%2. (tuple%2./tuple%2 base$ pte$)))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base$ pte$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12)))))
(declare-fun %%lambda%%6 (Int Type Type Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Type) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (%%hole%%13 Type) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Poly) (vmem_idx$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16) vmem_idx$) (let ((vaddr$ (nClip (Mul (%I vmem_idx$) %%hole%%0)))) (let ((tmp%%$ (%Poly%tuple%2. (as_type (%%choose%%1 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 (I vaddr$) %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) %%hole%%13)))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((paddr$ (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))) (Sub vaddr$ base$))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? (I paddr$)))) (vstd!seq.Seq.index.? %%hole%%14 %%hole%%15 %%hole%%16 (I pmem_idx$))))))))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16) vmem_idx$)))))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.interp_vmem.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.interp_vmem.? self!) (%Poly%vstd!map.Map<nat./nat.>. (let ((phys_mem_size$ (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. (Poly%lib!spec_t.hlspec.AbstractConstants. (lib!spec_t.os.impl&%0.interp_constants.? self!)))))) (let ((mappings$ (lib!spec_t.os.impl&%0.effective_mappings.? self!))) (vstd!map.impl&%0.new.? $ NAT $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%3 (I phys_mem_size$) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings$)))) (Poly%fun%1. (mk_fun (%%lambda%%6 lib!definitions_t.WORD_SIZE.? NAT TYPE%lib!definitions_t.PageTableEntry. $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings$) $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings$) (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. self!)))))))))))))) :pattern ((lib!spec_t.os.impl&%0.interp_vmem.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSVariables::interp")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%0.interp.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.interp.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%0.interp.? self!) (let ((mappings$ (lib!spec_t.os.impl&%0.effective_mappings.? self!))) (let ((mem$ (lib!spec_t.os.impl&%0.interp_vmem.? self!))) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. mem$)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings$)))))) :pattern ((lib!spec_t.os.impl&%0.interp.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::step_HW")
(assert (fuel_bool_default fuel%lib!spec_t.os.step_HW.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.step_HW.) (forall ((s1! Poly) (s2! Poly) (system_step! Poly)) (! (= (lib!spec_t.os.step_HW.? s1! s2! system_step!) (and (and (not (is-lib!spec_t.hardware.HWStep./PTMemOp_ (%Poly%lib!spec_t.hardware.HWStep. system_step!))) (lib!spec_t.hardware.next_step.? (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s1!))) (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s2!))) system_step!)) (lib!impl_u.spec_pt.step_Stutter.? (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s1!)) (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s2!))))) :pattern ((lib!spec_t.os.step_HW.? s1! s2! system_step!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::step_Map")
(assert (fuel_bool_default fuel%lib!spec_t.os.step_Map.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.step_Map.) (forall ((s1! Poly) (s2! Poly) (base! Poly) (pte! Poly) (result! Poly)) (! (= (lib!spec_t.os.step_Map.? s1! s2! base! pte! result!) (and (lib!spec_t.hardware.step_PTMemOp.? (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s1!))) (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s2!)))) (lib!impl_u.spec_pt.step_Map.? (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s1!)) (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s2!)) base! pte! result!))) :pattern ((lib!spec_t.os.step_Map.? s1! s2! base! pte! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::step_Unmap")
(assert (fuel_bool_default fuel%lib!spec_t.os.step_Unmap.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.step_Unmap.) (forall ((s1! Poly) (s2! Poly) (base! Poly) (result! Poly)) (! (= (lib!spec_t.os.step_Unmap.? s1! s2! base! result!) (and (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s2!))))))) base!)) (lib!spec_t.hardware.step_PTMemOp.? (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s1!))) (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s2!))))) (lib!impl_u.spec_pt.step_Unmap.? (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s1!)) (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s2!)) base! result!))) :pattern ((lib!spec_t.os.step_Unmap.? s1! s2! base! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::step_Resolve")
(assert (fuel_bool_default fuel%lib!spec_t.os.step_Resolve.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.step_Resolve.) (forall ((s1! Poly) (s2! Poly) (base! Poly) (result! Poly)) (! (= (lib!spec_t.os.step_Resolve.? s1! s2! base! result!) (and (lib!spec_t.hardware.step_PTMemOp.? (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s1!))) (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s2!)))) (lib!impl_u.spec_pt.step_Resolve.? (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s1!)) (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s2!)) base! result!))) :pattern ((lib!spec_t.os.step_Resolve.? s1! s2! base! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::OSStep::interp")
(assert (fuel_bool_default fuel%lib!spec_t.os.impl&%2.interp.))
(define-fun is-lib!spec_t.os.OSStep./HW_ ((c lib!spec_t.os.OSStep.)) Bool ((_ is lib!spec_t.os.OSStep./HW) c))
(define-fun is-lib!spec_t.os.OSStep./Map_ ((c lib!spec_t.os.OSStep.)) Bool ((_ is lib!spec_t.os.OSStep./Map) c))
(define-fun is-lib!spec_t.os.OSStep./Unmap_ ((c lib!spec_t.os.OSStep.)) Bool ((_ is lib!spec_t.os.OSStep./Unmap) c))
(assert (=> (fuel_bool fuel%lib!spec_t.os.impl&%2.interp.) (forall ((self! Poly)) (! (= (lib!spec_t.os.impl&%2.interp.? self!) (ite (is-lib!spec_t.os.OSStep./HW_ (%Poly%lib!spec_t.os.OSStep. self!)) (let ((step$ (lib!spec_t.os.OSStep./HW/step (%Poly%lib!spec_t.os.OSStep. self!)))) (ite (is-lib!spec_t.hardware.HWStep./ReadWrite_ step$) (let ((vaddr$ (lib!spec_t.hardware.HWStep./ReadWrite/vaddr (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. step$))))) (let ((paddr$ (lib!spec_t.hardware.HWStep./ReadWrite/paddr (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. step$))))) (let ((op$ (lib!spec_t.hardware.HWStep./ReadWrite/op (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. step$))))) (let ((pte$ (lib!spec_t.hardware.HWStep./ReadWrite/pte (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. step$))))) (lib!spec_t.hlspec.AbstractStep./ReadWrite (%I (I vaddr$)) (%Poly%lib!definitions_t.RWOp. (Poly%lib!definitions_t.RWOp. op$)) (%Poly%core!option.Option. (Poly%core!option.Option. pte$))))))) (ite (is-lib!spec_t.hardware.HWStep./PTMemOp_ step$) (%Poly%lib!spec_t.hlspec.AbstractStep. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec_t.hlspec.AbstractStep.)) (ite (is-lib!spec_t.hardware.HWStep./TLBFill_ step$) (let ((vaddr$ (lib!spec_t.hardware.HWStep./TLBFill/vaddr (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. step$))))) (let ((pte$ (lib!spec_t.hardware.HWStep./TLBFill/pte (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. step$))))) lib!spec_t.hlspec.AbstractStep./Stutter)) (let ((vaddr$ (lib!spec_t.hardware.HWStep./TLBEvict/vaddr (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. step$))))) lib!spec_t.hlspec.AbstractStep./Stutter))))) (ite (is-lib!spec_t.os.OSStep./Map_ (%Poly%lib!spec_t.os.OSStep. self!)) (let ((vaddr$ (lib!spec_t.os.OSStep./Map/vaddr (%Poly%lib!spec_t.os.OSStep. self!)))) (let ((pte$ (lib!spec_t.os.OSStep./Map/pte (%Poly%lib!spec_t.os.OSStep. self!)))) (let ((result$ (lib!spec_t.os.OSStep./Map/result (%Poly%lib!spec_t.os.OSStep. self!)))) (lib!spec_t.hlspec.AbstractStep./Map (%I (I vaddr$)) (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)) (%Poly%core!result.Result. (Poly%core!result.Result. result$)))))) (ite (is-lib!spec_t.os.OSStep./Unmap_ (%Poly%lib!spec_t.os.OSStep. self!)) (let ((vaddr$ (lib!spec_t.os.OSStep./Unmap/vaddr (%Poly%lib!spec_t.os.OSStep. self!)))) (let ((result$ (lib!spec_t.os.OSStep./Unmap/result (%Poly%lib!spec_t.os.OSStep. self!)))) (lib!spec_t.hlspec.AbstractStep./Unmap (%I (I vaddr$)) (%Poly%core!result.Result. (Poly%core!result.Result. result$))))) (let ((vaddr$ (lib!spec_t.os.OSStep./Resolve/vaddr (%Poly%lib!spec_t.os.OSStep. self!)))) (let ((result$ (lib!spec_t.os.OSStep./Resolve/result (%Poly%lib!spec_t.os.OSStep. self!)))) (lib!spec_t.hlspec.AbstractStep./Resolve (%I (I vaddr$)) (%Poly%core!result.Result. (Poly%core!result.Result. result$))))))))) :pattern ((lib!spec_t.os.impl&%2.interp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.os.OSStep.) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.os.impl&%2.interp.? self!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((lib!spec_t.os.impl&%2.interp.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::next_step")
(assert (fuel_bool_default fuel%lib!spec_t.os.next_step.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.next_step.) (forall ((s1! Poly) (s2! Poly) (step! Poly)) (! (= (lib!spec_t.os.next_step.? s1! s2! step!) (ite (is-lib!spec_t.os.OSStep./HW_ (%Poly%lib!spec_t.os.OSStep. step!)) (let ((step$ (lib!spec_t.os.OSStep./HW/step (%Poly%lib!spec_t.os.OSStep. step!)))) (lib!spec_t.os.step_HW.? s1! s2! (Poly%lib!spec_t.hardware.HWStep. step$))) (ite (is-lib!spec_t.os.OSStep./Map_ (%Poly%lib!spec_t.os.OSStep. step!)) (let ((vaddr$ (lib!spec_t.os.OSStep./Map/vaddr (%Poly%lib!spec_t.os.OSStep. step!)))) (let ((pte$ (lib!spec_t.os.OSStep./Map/pte (%Poly%lib!spec_t.os.OSStep. step!)))) (let ((result$ (lib!spec_t.os.OSStep./Map/result (%Poly%lib!spec_t.os.OSStep. step!)))) (lib!spec_t.os.step_Map.? s1! s2! (I vaddr$) (Poly%lib!definitions_t.PageTableEntry. pte$) (Poly%core!result.Result. result$))))) (ite (is-lib!spec_t.os.OSStep./Unmap_ (%Poly%lib!spec_t.os.OSStep. step!)) (let ((vaddr$ (lib!spec_t.os.OSStep./Unmap/vaddr (%Poly%lib!spec_t.os.OSStep. step!)))) (let ((result$ (lib!spec_t.os.OSStep./Unmap/result (%Poly%lib!spec_t.os.OSStep. step!)))) (lib!spec_t.os.step_Unmap.? s1! s2! (I vaddr$) (Poly%core!result.Result. result$)))) (let ((vaddr$ (lib!spec_t.os.OSStep./Resolve/vaddr (%Poly%lib!spec_t.os.OSStep. step!)))) (let ((result$ (lib!spec_t.os.OSStep./Resolve/result (%Poly%lib!spec_t.os.OSStep. step!)))) (lib!spec_t.os.step_Resolve.? s1! s2! (I vaddr$) (Poly%core!result.Result. result$)))))))) :pattern ((lib!spec_t.os.next_step.? s1! s2! step!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::os::init")
(assert (fuel_bool_default fuel%lib!spec_t.os.init.))
(assert (=> (fuel_bool fuel%lib!spec_t.os.init.) (forall ((s! Poly)) (! (= (lib!spec_t.os.init.? s!) (and (lib!impl_u.spec_pt.init.? (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? s!))) (lib!spec_t.hardware.init.? (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. s!)))))) :pattern ((lib!spec_t.os.init.? s!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Function-Specs lib::extra::assert_maps_equal_contains_pair")
(declare-fun req%lib!extra.assert_maps_equal_contains_pair. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (req%lib!extra.assert_maps_equal_contains_pair. K&. K& V&. V& m1! m2!) (and (=> %%global_location_label%%28 (forall ((k$ Poly) (v$ Poly)) (! (=> (and (has_type k$ K&) (has_type v$ V&)) (=> (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& m1! k$ v$) (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& m2! k$ v$))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& m1! k$ v$)) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& m2! k$ v$))))) (=> %%global_location_label%%29 (forall ((k$ Poly) (v$ Poly)) (! (=> (and (has_type k$ K&) (has_type v$ V&)) (=> (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& m2! k$ v$) (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& m1! k$ v$))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& m2! k$ v$)) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& m1! k$ v$))))))) :pattern ((req%lib!extra.assert_maps_equal_contains_pair. K&. K& V&. V& m1! m2!)))))
(declare-fun ens%lib!extra.assert_maps_equal_contains_pair. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%lib!extra.assert_maps_equal_contains_pair. K&. K& V&. V& m1! m2!) (= m1! m2!)) :pattern ((ens%lib!extra.assert_maps_equal_contains_pair. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Function-Specs lib::impl_u::os_refinement::lemma_effective_mappings_equal_interp_pt_mem")
(declare-fun req%lib!impl_u.os_refinement.lemma_effective_mappings_equal_interp_pt_mem. (lib!spec_t.os.OSVariables.) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.)) (! (= (req%lib!impl_u.os_refinement.lemma_effective_mappings_equal_interp_pt_mem. this!) (=> %%global_location_label%%30 (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? (Poly%lib!spec_t.os.OSVariables. this!)))) :pattern ((req%lib!impl_u.os_refinement.lemma_effective_mappings_equal_interp_pt_mem. this!)))))
(declare-fun ens%lib!impl_u.os_refinement.lemma_effective_mappings_equal_interp_pt_mem. (lib!spec_t.os.OSVariables.) Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.)) (! (= (ens%lib!impl_u.os_refinement.lemma_effective_mappings_equal_interp_pt_mem. this!) (= (lib!spec_t.os.impl&%0.effective_mappings.? (Poly%lib!spec_t.os.OSVariables. this!)) (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!)))) :pattern ((ens%lib!impl_u.os_refinement.lemma_effective_mappings_equal_interp_pt_mem. this!)))))
(set-info :comment ";; Function-Def lib::impl_u::os_refinement::lemma_effective_mappings_equal_interp_pt_mem")
(set-info :comment ";; page-table/impl_u/os_refinement.rs:104:1: 104:77 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::os_refinement::lemma_pt_mappings_dont_overlap_in_pmem")
(declare-fun req%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. (lib!spec_t.os.OSVariables. lib!spec_t.os.OSVariables.) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.) (other! lib!spec_t.os.OSVariables.)) (! (= (req%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. this! other!) (and (=> %%global_location_label%%31 (lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.? (Poly%lib!spec_t.os.OSVariables. this!))) (=> %%global_location_label%%32 (lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? (Poly%lib!spec_t.os.OSVariables. this!))) (=> %%global_location_label%%33 (lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? (Poly%lib!spec_t.os.OSVariables. other!))) (=> %%global_location_label%%34 (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? (Poly%lib!spec_t.os.OSVariables. this!))) (=> %%global_location_label%%35 (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? (Poly%lib!spec_t.os.OSVariables. other!))))) :pattern ((req%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. this! other!)))))
(declare-fun ens%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. (lib!spec_t.os.OSVariables. lib!spec_t.os.OSVariables.) Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.) (other! lib!spec_t.os.OSVariables.)) (! (= (ens%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. this! other!) (and (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (and (not (lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) base$ pte$)) (= (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. other!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) base$ pte$)))) (lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.? (Poly%lib!spec_t.os.OSVariables. other!)))) :pattern ((lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) base$ pte$)) :pattern ((vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) base$ pte$)))) (forall ((base$ Poly)) (! (=> (has_type base$ NAT) (=> (= (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. other!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) base$))) (lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.? (Poly%lib!spec_t.os.OSVariables. other!)))) :pattern ((vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) base$)))))) :pattern ((ens%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. this! other!)))))
(set-info :comment ";; Function-Def lib::impl_u::os_refinement::lemma_pt_mappings_dont_overlap_in_pmem")
(set-info :comment ";; page-table/impl_u/os_refinement.rs:17:1: 17:91 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::os_refinement::lemma_effective_mappings_other")
(declare-fun req%lib!impl_u.os_refinement.lemma_effective_mappings_other. (lib!spec_t.os.OSVariables. lib!spec_t.os.OSVariables.) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.) (other! lib!spec_t.os.OSVariables.)) (! (= (req%lib!impl_u.os_refinement.lemma_effective_mappings_other. this! other!) (and (=> %%global_location_label%%36 (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? (Poly%lib!spec_t.os.OSVariables. this!))) (=> %%global_location_label%%37 (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? (Poly%lib!spec_t.os.OSVariables. other!))) (=> %%global_location_label%%38 (= (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. this!)))))) (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. other!)))))))))) :pattern ((req%lib!impl_u.os_refinement.lemma_effective_mappings_other. this! other!)))))
(declare-fun ens%lib!impl_u.os_refinement.lemma_effective_mappings_other. (lib!spec_t.os.OSVariables. lib!spec_t.os.OSVariables.) Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.) (other! lib!spec_t.os.OSVariables.)) (! (= (ens%lib!impl_u.os_refinement.lemma_effective_mappings_other. this! other!) (= (lib!spec_t.os.impl&%0.effective_mappings.? (Poly%lib!spec_t.os.OSVariables. this!)) (lib!spec_t.os.impl&%0.effective_mappings.? (Poly%lib!spec_t.os.OSVariables. other!)))) :pattern ((ens%lib!impl_u.os_refinement.lemma_effective_mappings_other. this! other!)))))
(set-info :comment ";; Function-Def lib::impl_u::os_refinement::lemma_effective_mappings_other")
(set-info :comment ";; page-table/impl_u/os_refinement.rs:143:1: 143:83 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::os_refinement::lemma_interp")
(declare-fun req%lib!impl_u.os_refinement.lemma_interp. (lib!spec_t.os.OSVariables.) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.)) (! (= (req%lib!impl_u.os_refinement.lemma_interp. this!) (=> %%global_location_label%%39 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. this!)))) :pattern ((req%lib!impl_u.os_refinement.lemma_interp. this!)))))
(declare-fun ens%lib!impl_u.os_refinement.lemma_interp. (lib!spec_t.os.OSVariables.) Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.)) (! (= (ens%lib!impl_u.os_refinement.lemma_interp. this!) (and (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. this!))))) (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. this!))))) (lib!spec_t.os.impl&%0.effective_mappings.? (Poly%lib!spec_t.os.OSVariables. this!))) (forall ((base$ Poly) (pte$ Poly) (vmem_idx$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.) (has_type vmem_idx$ NAT)) (let ((vaddr$ (nClip (Mul (%I vmem_idx$) lib!definitions_t.WORD_SIZE.?)))) (let ((paddr$ (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))) (Sub vaddr$ (%I base$)))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? (I paddr$)))) (=> (and (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) base$ pte$) (lib!definitions_t.between.? (I vaddr$) base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$)))))))))) (< pmem_idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. this!)))))))))) (= (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. this!))))))) (I pmem_idx$)) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. this!)))))) vmem_idx$))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. this!))) base$ pte$) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. this!)))))) vmem_idx$)))))) :pattern ((ens%lib!impl_u.os_refinement.lemma_interp. this!)))))
(set-info :comment ";; Function-Def lib::impl_u::os_refinement::lemma_interp")
(set-info :comment ";; page-table/impl_u/os_refinement.rs:198:7: 198:41 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::os_refinement::lemma_interp_other")
(declare-fun req%lib!impl_u.os_refinement.lemma_interp_other. (lib!spec_t.os.OSVariables. lib!spec_t.os.OSVariables.) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.) (other! lib!spec_t.os.OSVariables.)) (! (= (req%lib!impl_u.os_refinement.lemma_interp_other. this! other!) (and (=> %%global_location_label%%40 (= (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. other!)))))) (lib!spec_t.hardware.HWVariables./HWVariables/mem (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. this!)))))))) (=> %%global_location_label%%41 (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.effective_mappings.? (Poly%lib!spec_t.os.OSVariables. this!))) base$ pte$) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.effective_mappings.? (Poly%lib!spec_t.os.OSVariables. other!))) base$ pte$))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.effective_mappings.? (Poly%lib!spec_t.os.OSVariables. this!))) base$ pte$)) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.effective_mappings.? (Poly%lib!spec_t.os.OSVariables. other!))) base$ pte$))))) (=> %%global_location_label%%42 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. this!))) (=> %%global_location_label%%43 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. other!))))) :pattern ((req%lib!impl_u.os_refinement.lemma_interp_other. this! other!)))))
(declare-fun ens%lib!impl_u.os_refinement.lemma_interp_other. (lib!spec_t.os.OSVariables. lib!spec_t.os.OSVariables.) Bool)
(assert (forall ((this! lib!spec_t.os.OSVariables.) (other! lib!spec_t.os.OSVariables.)) (! (= (ens%lib!impl_u.os_refinement.lemma_interp_other. this! other!) (forall ((word_idx$ Poly)) (! (=> (has_type word_idx$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. this!))))))) word_idx$) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. other!))))))) word_idx$) (= (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. other!)))))) word_idx$) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. this!)))))) word_idx$))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. other!)))))) word_idx$) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.os.impl&%0.interp.? (Poly%lib!spec_t.os.OSVariables. this!)))))) word_idx$))))) :pattern ((ens%lib!impl_u.os_refinement.lemma_interp_other. this! other!)))))
(set-info :comment ";; Function-Def lib::impl_u::os_refinement::lemma_interp_other")
(set-info :comment ";; page-table/impl_u/os_refinement.rs:241:7: 241:67 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::os_refinement::init_implies_pt_init")
(declare-fun req%lib!impl_u.os_refinement.init_implies_pt_init. (lib!spec_t.os.OSVariables.) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((s! lib!spec_t.os.OSVariables.)) (! (= (req%lib!impl_u.os_refinement.init_implies_pt_init. s!) (=> %%global_location_label%%44 (lib!spec_t.os.init.? (Poly%lib!spec_t.os.OSVariables. s!)))) :pattern ((req%lib!impl_u.os_refinement.init_implies_pt_init. s!)))))
(declare-fun ens%lib!impl_u.os_refinement.init_implies_pt_init. (lib!spec_t.os.OSVariables.) Bool)
(assert (forall ((s! lib!spec_t.os.OSVariables.)) (! (= (ens%lib!impl_u.os_refinement.init_implies_pt_init. s!) (lib!impl_u.spec_pt.init.? (Poly%lib!impl_u.spec_pt.PageTableVariables. (lib!spec_t.os.impl&%0.pt_variables.? (Poly%lib!spec_t.os.OSVariables. s!))))) :pattern ((ens%lib!impl_u.os_refinement.init_implies_pt_init. s!)))))
(set-info :comment ";; Function-Def lib::impl_u::os_refinement::init_implies_pt_init")
(set-info :comment ";; page-table/impl_u/os_refinement.rs:292:7: 292:46 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::os_refinement::init_implies_inv")
(declare-fun req%lib!impl_u.os_refinement.init_implies_inv. (lib!spec_t.os.OSVariables.) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((s! lib!spec_t.os.OSVariables.)) (! (= (req%lib!impl_u.os_refinement.init_implies_inv. s!) (=> %%global_location_label%%45 (lib!spec_t.os.init.? (Poly%lib!spec_t.os.OSVariables. s!)))) :pattern ((req%lib!impl_u.os_refinement.init_implies_inv. s!)))))
(declare-fun ens%lib!impl_u.os_refinement.init_implies_inv. (lib!spec_t.os.OSVariables.) Bool)
(assert (forall ((s! lib!spec_t.os.OSVariables.)) (! (= (ens%lib!impl_u.os_refinement.init_implies_inv. s!) (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s!))) :pattern ((ens%lib!impl_u.os_refinement.init_implies_inv. s!)))))
(set-info :comment ";; Function-Def lib::impl_u::os_refinement::init_implies_inv")
(set-info :comment ";; page-table/impl_u/os_refinement.rs:298:7: 298:42 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::os_refinement::next_step_preserves_inv")
(declare-fun req%lib!impl_u.os_refinement.next_step_preserves_inv. (lib!spec_t.os.OSVariables. lib!spec_t.os.OSVariables. lib!spec_t.os.OSStep.) Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((s1! lib!spec_t.os.OSVariables.) (s2! lib!spec_t.os.OSVariables.) (step! lib!spec_t.os.OSStep.)) (! (= (req%lib!impl_u.os_refinement.next_step_preserves_inv. s1! s2! step!) (and (=> %%global_location_label%%46 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s1!))) (=> %%global_location_label%%47 (lib!spec_t.os.next_step.? (Poly%lib!spec_t.os.OSVariables. s1!) (Poly%lib!spec_t.os.OSVariables. s2!) (Poly%lib!spec_t.os.OSStep. step!))))) :pattern ((req%lib!impl_u.os_refinement.next_step_preserves_inv. s1! s2! step!)))))
(declare-fun ens%lib!impl_u.os_refinement.next_step_preserves_inv. (lib!spec_t.os.OSVariables. lib!spec_t.os.OSVariables. lib!spec_t.os.OSStep.) Bool)
(assert (forall ((s1! lib!spec_t.os.OSVariables.) (s2! lib!spec_t.os.OSVariables.) (step! lib!spec_t.os.OSStep.)) (! (= (ens%lib!impl_u.os_refinement.next_step_preserves_inv. s1! s2! step!) (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s2!))) :pattern ((ens%lib!impl_u.os_refinement.next_step_preserves_inv. s1! s2! step!)))))
(set-info :comment ";; Function-Def lib::impl_u::os_refinement::next_step_preserves_inv")
(set-info :comment ";; page-table/impl_u/os_refinement.rs:307:7: 307:81 (#0)")
(declare-const s1! lib!spec_t.os.OSVariables.)
(declare-const s2! lib!spec_t.os.OSVariables.)
(declare-const step! lib!spec_t.os.OSStep.)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%3 Bool)
(declare-const system_step@ lib!spec_t.hardware.HWStep.)
(declare-const tmp%4 Bool)
(declare-const tmp%5 Bool)
(declare-const tmp%6 Bool)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Bool)
(declare-const base@ Poly)
(declare-const pteprime@ Poly)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Bool)
(declare-const base2@ Poly)
(declare-const pte2@ Poly)
(declare-const tmp%17 Bool)
(declare-const tmp%18 Bool)
(declare-const tmp%19 Bool)
(declare-const tmp%20 Int)
(declare-const tmp%21 Int)
(declare-const tmp%22 Int)
(declare-const tmp%23 Bool)
(declare-const tmp%24 Bool)
(declare-const tmp%25 Int)
(declare-const tmp%26 Int)
(declare-const tmp%27 Int)
(declare-const tmp%28 Bool)
(declare-const tmp%29 Bool)
(declare-const tmp%30 Bool)
(declare-const tmp%31 Bool)
(declare-const tmp%32 Int)
(declare-const tmp%33 Int)
(declare-const tmp%34 Int)
(declare-const tmp%35 Bool)
(declare-const tmp%36 Bool)
(declare-const tmp%37 Bool)
(declare-const tmp%38 Bool)
(declare-const pt_s1@ lib!impl_u.spec_pt.PageTableVariables.)
(declare-const pt_s2@ lib!impl_u.spec_pt.PageTableVariables.)
(declare-const vaddr@ Int)
(declare-const pte@ lib!definitions_t.PageTableEntry.)
(declare-const result@ core!result.Result.)
(declare-const tmp%39 Bool)
(declare-const tmp%40 Bool)
(declare-const tmp%41 Bool)
(declare-const tmp%42 Bool)
(declare-const base2$1@ Poly)
(declare-const pte2$1@ Poly)
(declare-const tmp%43 Bool)
(declare-const tmp%44 Bool)
(declare-const tmp%45 Bool)
(declare-const tmp%46 Bool)
(declare-const baseprime@ Poly)
(declare-const pteprime$1@ Poly)
(declare-const tmp%47 Bool)
(declare-const tmp%48 Bool)
(declare-const tmp%49 Bool)
(declare-const tmp%50 Bool)
(declare-const tmp%51 Bool)
(declare-const base$1@ Poly)
(declare-const pte$2@ Poly)
(declare-const tmp%52 Bool)
(declare-const tmp%53 Bool)
(declare-const tmp%54 Bool)
(declare-const tmp%55 Bool)
(declare-const tmp%56 Bool)
(declare-const pt_s1$1@ lib!impl_u.spec_pt.PageTableVariables.)
(declare-const pt_s2$1@ lib!impl_u.spec_pt.PageTableVariables.)
(declare-const vaddr$1@ Int)
(declare-const result$1@ core!result.Result.)
(declare-const tmp%57 Bool)
(declare-const tmp%58 Bool)
(declare-const vaddr$2@ Int)
(declare-const result$2@ core!result.Result.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!spec_t.os.OSStep. step!) TYPE%lib!spec_t.os.OSStep.))
(assert (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s1!)))
(assert (lib!spec_t.os.next_step.? (Poly%lib!spec_t.os.OSVariables. s1!) (Poly%lib!spec_t.os.OSVariables. s2!) (Poly%lib!spec_t.os.OSStep. step!)))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(declare-const %%switch_label%%5 Bool)
(declare-const %%switch_label%%6 Bool)
(declare-const %%switch_label%%7 Bool)
(declare-const %%switch_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%42 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%43 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%44 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%45 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%46 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%47 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%48 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%49 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%50 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%51 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%52 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%53 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%54 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%55 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%56 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%57 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%58 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%59 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%60 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%61 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%62 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%63 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%64 Bool)
(assert (not (=> (fuel_bool fuel%lib!spec_t.os.impl&%0.pt_entries_aligned.) (or (and (=> (is-lib!spec_t.os.OSStep./HW_ step!) (=> (= system_step@ (lib!spec_t.os.OSStep./HW/step (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. step!)))) (=> (= tmp%1 (lib!spec_t.os.step_HW.? (Poly%lib!spec_t.os.OSVariables. s1!) (Poly%lib!spec_t.os.OSVariables. s2!) (Poly%lib!spec_t.hardware.HWStep. system_step@))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (=> (= tmp%2 (ext_eq false (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))))) (and (=> %%location_label%%1 tmp%2) (=> tmp%2 (=> (= tmp%3 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%2 tmp%3) (=> tmp%3 %%switch_label%%0))))))))))) (=> (not (is-lib!spec_t.os.OSStep./HW_ step!)) (or (and (=> (is-lib!spec_t.os.OSStep./Map_ step!) (=> (= vaddr@ (lib!spec_t.os.OSStep./Map/vaddr (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. step!)))) (=> (= pte@ (lib!spec_t.os.OSStep./Map/pte (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. step!)))) (=> (= result@ (lib!spec_t.os.OSStep./Map/result (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. step!)))) (=> (= pt_s1@ (lib!spec_t.os.impl&%0.pt_variables.? (Poly%lib!spec_t.os.OSVariables. s1!))) (=> (= pt_s2@ (lib!spec_t.os.impl&%0.pt_variables.? (Poly%lib!spec_t.os.OSVariables. s2!))) (=> (= tmp%4 (lib!spec_t.os.step_Map.? (Poly%lib!spec_t.os.OSVariables. s1!) (Poly%lib!spec_t.os.OSVariables. s2!) (I vaddr@) (Poly%lib!definitions_t.PageTableEntry. pte@) (Poly%core!result.Result. result@))) (and (=> %%location_label%%3 tmp%4) (=> tmp%4 (=> (= tmp%5 (lib!impl_u.spec_pt.step_Map.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s1@) (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s2@) (I vaddr@) (Poly%lib!definitions_t.PageTableEntry. pte@) (Poly%core!result.Result. result@))) (and (=> %%location_label%%4 tmp%5) (=> tmp%5 (=> (= tmp%6 (not (lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s1@))) (I vaddr@) (Poly%lib!definitions_t.PageTableEntry. pte@)))) (and (=> %%location_label%%5 tmp%6) (=> tmp%6 (or (and (=> (lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s1@))) (I vaddr@) (Poly%lib!definitions_t.PageTableEntry. pte@)) (=> (= tmp%7 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%6 tmp%7) (=> tmp%7 %%switch_label%%2)))) (=> (not (lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s1@))) (I vaddr@) (Poly%lib!definitions_t.PageTableEntry. pte@))) (=> (= tmp%8 (forall ((base$ Poly) (pte$1 Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$1 TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))) base$ pte$1) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base$ pte$1))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))) base$ pte$1)) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base$ pte$1))))) (and (=> %%location_label%%7 tmp%8) (=> tmp%8 (and (=> (has_type base@ NAT) (=> (has_type pteprime@ TYPE%lib!definitions_t.PageTableEntry.) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base@ pteprime@) (or (and (=> (= vaddr@ (%I base@)) (=> (= tmp%9 (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L1_ENTRY_SIZE.?))) (and (=> %%location_label%%8 tmp%9) (=> tmp%9 %%switch_label%%6)))) (=> (not (= vaddr@ (%I base@))) (=> (= tmp%10 (lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? (Poly%lib!spec_t.os.OSVariables. s1!))) (and (=> %%location_label%%9 tmp%10) (=> tmp%10 (=> (= tmp%11 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!)))) base@)) (and (=> %%location_label%%10 tmp%11) (=> tmp%11 (=> (= tmp%12 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))) base@ pteprime@)) (and (=> %%location_label%%11 tmp%12) (=> tmp%12 (=> (= tmp%13 (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L1_ENTRY_SIZE.?))) (and (=> %%location_label%%12 tmp%13) (=> tmp%13 %%switch_label%%6)))))))))))))) (and (not %%switch_label%%6) (=> %%location_label%%13 (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime@))))) lib!definitions_t.L1_ENTRY_SIZE.?)))))))) (=> (forall ((base$ Poly) (pteprime$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pteprime$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base$ pteprime$) (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$))))) lib!definitions_t.L1_ENTRY_SIZE.?)))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base$ pteprime$)))) (=> (= tmp%14 (lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%14 tmp%14) (=> tmp%14 (=> (= tmp%15 (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%15 tmp%15) (=> tmp%15 (and (=> %%location_label%%16 (req%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. s1! s2!)) (=> (ens%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. s1! s2!) (=> (= tmp%16 (lib!spec_t.os.impl&%0.pt_mappings_dont_overlap_in_pmem.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%17 tmp%16) (=> tmp%16 (and (and (=> (has_type base2@ NAT) (=> (has_type pte2@ TYPE%lib!definitions_t.PageTableEntry.) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base2@ pte2@) (or (and (=> (= (%I base2@) vaddr@) (=> (= tmp%17 (= (%Poly%lib!definitions_t.PageTableEntry. pte2@) pte@)) (and (=> %%location_label%%18 tmp%17) (=> tmp%17 (=> (= tmp%18 (lib!definitions_t.aligned.? (I vaddr@) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))))) (and (=> %%location_label%%19 tmp%18) (=> tmp%18 (=> (= tmp%19 (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))))) (and (=> %%location_label%%20 tmp%19) (=> tmp%19 (or (and (=> (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@)))))) lib!definitions_t.L3_ENTRY_SIZE.?) (=> (= tmp%20 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))) (=> (= tmp%21 lib!definitions_t.L3_ENTRY_SIZE.?) (and (=> %%location_label%%21 (req%lib!extra.aligned_transitive. tmp%20 tmp%21 8)) (=> (ens%lib!extra.aligned_transitive. tmp%20 tmp%21 8) (=> (= tmp%22 lib!definitions_t.L3_ENTRY_SIZE.?) (and (=> %%location_label%%22 (req%lib!extra.aligned_transitive. vaddr@ tmp%22 8)) (=> (ens%lib!extra.aligned_transitive. vaddr@ tmp%22 8) (=> (= tmp%23 (lib!definitions_t.aligned.? (I vaddr@) (I 8))) (and (=> %%location_label%%23 tmp%23) (=> tmp%23 (=> (= tmp%24 (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))) (I 8))) (and (=> %%location_label%%24 tmp%24) (=> tmp%24 %%switch_label%%4)))))))))))))) (=> (not (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@)))))) lib!definitions_t.L3_ENTRY_SIZE.?)) (or (and (=> (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@)))))) lib!definitions_t.L2_ENTRY_SIZE.?) (=> (= tmp%25 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))) (=> (= tmp%26 lib!definitions_t.L2_ENTRY_SIZE.?) (and (=> %%location_label%%25 (req%lib!extra.aligned_transitive. tmp%25 tmp%26 8)) (=> (ens%lib!extra.aligned_transitive. tmp%25 tmp%26 8) (=> (= tmp%27 lib!definitions_t.L2_ENTRY_SIZE.?) (and (=> %%location_label%%26 (req%lib!extra.aligned_transitive. vaddr@ tmp%27 8)) (=> (ens%lib!extra.aligned_transitive. vaddr@ tmp%27 8) (=> (= tmp%28 (lib!definitions_t.aligned.? (I vaddr@) (I 8))) (and (=> %%location_label%%27 tmp%28) (=> tmp%28 (=> (= tmp%29 (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))) (I 8))) (and (=> %%location_label%%28 tmp%29) (=> tmp%29 %%switch_label%%5)))))))))))))) (=> (not (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@)))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (=> (= tmp%30 (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@)))))) lib!definitions_t.L1_ENTRY_SIZE.?)) (and (=> %%location_label%%29 tmp%30) (=> tmp%30 (=> (= tmp%31 (lib!definitions_t.aligned.? (I lib!definitions_t.L1_ENTRY_SIZE.?) (I 8))) (and (=> %%location_label%%30 tmp%31) (=> tmp%31 (=> (= tmp%32 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))) (=> (= tmp%33 lib!definitions_t.L1_ENTRY_SIZE.?) (and (=> %%location_label%%31 (req%lib!extra.aligned_transitive. tmp%32 tmp%33 8)) (=> (ens%lib!extra.aligned_transitive. tmp%32 tmp%33 8) (=> (= tmp%34 lib!definitions_t.L1_ENTRY_SIZE.?) (and (=> %%location_label%%32 (req%lib!extra.aligned_transitive. vaddr@ tmp%34 8)) (=> (ens%lib!extra.aligned_transitive. vaddr@ tmp%34 8) (=> (= tmp%35 (lib!definitions_t.aligned.? (I vaddr@) (I 8))) (and (=> %%location_label%%33 tmp%35) (=> tmp%35 (=> (= tmp%36 (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte@))))))) (I 8))) (and (=> %%location_label%%34 tmp%36) (=> tmp%36 %%switch_label%%5))))))))))))))))))))) (and (not %%switch_label%%5) %%switch_label%%4)))) (and (not %%switch_label%%4) %%switch_label%%3)))))))))))) (=> (not (= (%I base2@) vaddr@)) (=> (= tmp%37 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))) base2@ pte2@)) (and (=> %%location_label%%35 tmp%37) (=> tmp%37 %%switch_label%%3))))) (and (not %%switch_label%%3) (=> %%location_label%%36 (and (lib!definitions_t.aligned.? base2@ (I 8)) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte2@)))))) (I 8))))))))) (=> (forall ((base2$ Poly) (pte2$ Poly)) (! (=> (and (has_type base2$ NAT) (has_type pte2$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base2$ pte2$) (and (lib!definitions_t.aligned.? base2$ (I 8)) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte2$)))))) (I 8))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base2$ pte2$)))) (=> %%location_label%%37 (lib!spec_t.os.impl&%0.pt_entries_aligned.? (Poly%lib!spec_t.os.OSVariables. s2!))))) (=> (lib!spec_t.os.impl&%0.pt_entries_aligned.? (Poly%lib!spec_t.os.OSVariables. s2!)) (=> (= tmp%38 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%38 tmp%38) (=> tmp%38 %%switch_label%%2))))))))))))))))))))))) (and (not %%switch_label%%2) %%switch_label%%1))))))))))))))))) (=> (not (is-lib!spec_t.os.OSStep./Map_ step!)) (or (and (=> (is-lib!spec_t.os.OSStep./Unmap_ step!) (=> (= vaddr$1@ (lib!spec_t.os.OSStep./Unmap/vaddr (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. step!)))) (=> (= result$1@ (lib!spec_t.os.OSStep./Unmap/result (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. step!)))) (=> (= pt_s1$1@ (lib!spec_t.os.impl&%0.pt_variables.? (Poly%lib!spec_t.os.OSVariables. s1!))) (=> (= pt_s2$1@ (lib!spec_t.os.impl&%0.pt_variables.? (Poly%lib!spec_t.os.OSVariables. s2!))) (=> (= tmp%39 (lib!spec_t.os.step_Unmap.? (Poly%lib!spec_t.os.OSVariables. s1!) (Poly%lib!spec_t.os.OSVariables. s2!) (I vaddr$1@) (Poly%core!result.Result. result$1@))) (and (=> %%location_label%%39 tmp%39) (=> tmp%39 (=> (= tmp%40 (lib!impl_u.spec_pt.step_Unmap.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s1$1@) (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s2$1@) (I vaddr$1@) (Poly%core!result.Result. result$1@))) (and (=> %%location_label%%40 tmp%40) (=> tmp%40 (or (and (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s1$1@)))) (I vaddr$1@)) (=> (= tmp%41 (is-core!result.Result./Ok_ result$1@)) (and (=> %%location_label%%41 tmp%41) (=> tmp%41 (=> (= tmp%42 (ext_eq false (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s2$1@))) (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s1$1@))) (I vaddr$1@)))) (and (=> %%location_label%%42 tmp%42) (=> tmp%42 (and (=> (has_type base2$1@ NAT) (=> (has_type pte2$1@ TYPE%lib!definitions_t.PageTableEntry.) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. s2!))))))) base2$1@ pte2$1@) (=> (= tmp%43 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. s1!))))))) base2$1@ pte2$1@)) (and (=> %%location_label%%43 tmp%43) (=> tmp%43 (=> (= tmp%44 (lib!spec_t.os.impl&%0.tlb_is_submap_of_pt.? (Poly%lib!spec_t.os.OSVariables. s1!))) (and (=> %%location_label%%44 tmp%44) (=> tmp%44 (=> (= tmp%45 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))) base2$1@ pte2$1@)) (and (=> %%location_label%%45 tmp%45) (=> tmp%45 (=> (= tmp%46 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base2$1@ pte2$1@)) (and (=> %%location_label%%46 tmp%46) (=> tmp%46 (=> %%location_label%%47 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base2$1@ pte2$1@))))))))))))))))) (=> (forall ((base2$ Poly) (pte2$ Poly)) (! (=> (and (has_type base2$ NAT) (has_type pte2$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hardware.HWVariables./HWVariables/tlb (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.os.OSVariables./OSVariables/hw (%Poly%lib!spec_t.os.OSVariables. (Poly%lib!spec_t.os.OSVariables. s2!))))))) base2$ pte2$) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base2$ pte2$))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base2$ pte2$)))) (and (=> (has_type baseprime@ NAT) (=> (has_type pteprime$1@ TYPE%lib!definitions_t.PageTableEntry.) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) baseprime@ pteprime$1@) (=> (= tmp%47 (lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? (Poly%lib!spec_t.os.OSVariables. s1!))) (and (=> %%location_label%%48 tmp%47) (=> tmp%47 (=> (= tmp%48 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!)))) baseprime@)) (and (=> %%location_label%%49 tmp%48) (=> tmp%48 (=> (= tmp%49 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))) baseprime@ pteprime$1@)) (and (=> %%location_label%%50 tmp%49) (=> tmp%49 (=> (= tmp%50 (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$1@))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$1@))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$1@))))) lib!definitions_t.L1_ENTRY_SIZE.?))) (and (=> %%location_label%%51 tmp%50) (=> tmp%50 (=> %%location_label%%52 (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$1@))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$1@))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$1@))))) lib!definitions_t.L1_ENTRY_SIZE.?)))))))))))))))))) (=> (forall ((baseprime$ Poly) (pteprime$ Poly)) (! (=> (and (has_type baseprime$ NAT) (has_type pteprime$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) baseprime$ pteprime$) (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pteprime$))))) lib!definitions_t.L1_ENTRY_SIZE.?)))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) baseprime$ pteprime$)))) (=> (= tmp%51 (lib!spec_t.os.impl&%0.pt_entry_sizes_are_valid.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%53 tmp%51) (=> tmp%51 (and (=> %%location_label%%54 (req%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. s1! s2!)) (=> (ens%lib!impl_u.os_refinement.lemma_pt_mappings_dont_overlap_in_pmem. s1! s2!) (and (and (=> (has_type base$1@ NAT) (=> (has_type pte$2@ TYPE%lib!definitions_t.PageTableEntry.) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base$1@ pte$2@) (=> (= tmp%52 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))) base$1@ pte$2@)) (and (=> %%location_label%%55 tmp%52) (=> tmp%52 (=> %%location_label%%56 (and (lib!definitions_t.aligned.? base$1@ (I 8)) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$2@)))))) (I 8)))))))))) (=> (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base$ pte$) (and (lib!definitions_t.aligned.? base$ (I 8)) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$)))))) (I 8))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) base$ pte$)))) (=> %%location_label%%57 (lib!spec_t.os.impl&%0.pt_entries_aligned.? (Poly%lib!spec_t.os.OSVariables. s2!))))) (=> (lib!spec_t.os.impl&%0.pt_entries_aligned.? (Poly%lib!spec_t.os.OSVariables. s2!)) (=> (= tmp%53 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%58 tmp%53) (=> tmp%53 %%switch_label%%8))))))))))))))))))))) (=> (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.spec_pt.impl&%0.interp.? (Poly%lib!impl_u.spec_pt.PageTableVariables. pt_s1$1@)))) (I vaddr$1@))) (=> (= tmp%54 (is-core!result.Result./Err_ result$1@)) (and (=> %%location_label%%59 tmp%54) (=> tmp%54 (=> (= tmp%55 (ext_eq false (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))))) (and (=> %%location_label%%60 tmp%55) (=> tmp%55 (=> (= tmp%56 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%61 tmp%56) (=> tmp%56 %%switch_label%%8))))))))))) (and (not %%switch_label%%8) %%switch_label%%7))))))))))))) (=> (not (is-lib!spec_t.os.OSStep./Unmap_ step!)) (=> (= vaddr$2@ (lib!spec_t.os.OSStep./Resolve/vaddr (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. step!)))) (=> (= result$2@ (lib!spec_t.os.OSStep./Resolve/result (%Poly%lib!spec_t.os.OSStep. (Poly%lib!spec_t.os.OSStep. step!)))) (=> (= tmp%57 (ext_eq false (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s2!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.os.impl&%0.interp_pt_mem.? (Poly%lib!spec_t.os.OSVariables. s1!))))) (and (=> %%location_label%%62 tmp%57) (=> tmp%57 (=> (= tmp%58 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s2!))) (and (=> %%location_label%%63 tmp%58) (=> tmp%58 %%switch_label%%7)))))))))) (and (not %%switch_label%%7) %%switch_label%%1)))) (and (not %%switch_label%%1) %%switch_label%%0)))) (and (not %%switch_label%%0) (=> %%location_label%%64 (lib!spec_t.os.impl&%0.inv.? (Poly%lib!spec_t.os.OSVariables. s2!))))))))
(check-sat)
(exit)
