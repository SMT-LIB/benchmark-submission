(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'root module'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Err. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Err_0. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.constant. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%21.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%21.constant. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%8.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%38.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.invariant. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.wf2. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.thread_id_spec. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.replica_id_spec. FuelId)
(declare-const fuel%lib!exec.context.impl&%3.wf. FuelId)
(declare-const fuel%lib!exec.log.impl&%1.wf. FuelId)
(declare-const fuel%lib!exec.log.impl&%6.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.id_spec. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.view. FuelId)
(declare-const fuel%lib!exec.replica.impl&%1.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%3.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%4.spec_id. FuelId)
(declare-const fuel%lib!spec.utils.seq_unique. FuelId)
(declare-const fuel%lib!spec.utils.seq_disjoint. FuelId)
(declare-const fuel%lib!spec.utils.rangeincl. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%0.arrow_version. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Placed. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Applied. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_Ready. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%7.queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogNoEntriesFromHere. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogRangeNoNodeId. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogRangeMatchesQueue. FuelId)
(declare-const fuel%lib!spec.unbounded_log.QueueRidsUpdateDone. FuelId)
(declare-const fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced. FuelId)
(declare-const fuel%lib!spec.unbounded_log.compute_nrstate_at_version. FuelId)
(declare-const fuel%lib!spec.unbounded_log_refines_simplelog.impl&%0.get_fresh_rid. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%0.is_Idle. FuelId)
(declare-const fuel%lib!constants.MAX_REPLICAS. FuelId)
(declare-const fuel%lib!constants.LOG_SIZE. FuelId)
(declare-const fuel%lib!constants.MAX_THREADS_PER_REPLICA. FuelId)
(declare-const fuel%lib!exec.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.impl&%0.replica_id_spec. FuelId)
(declare-const fuel%lib!exec.impl&%1.wf. FuelId)
(declare-const fuel%lib!exec.impl&%1.replicas. FuelId)
(declare-const fuel%lib!exec.impl&%1.unbounded_log_instance. FuelId)
(declare-const fuel%lib!implements_NodeReplicated. FuelId)
(declare-const fuel%lib!is_readonly_ticket. FuelId)
(declare-const fuel%lib!is_readonly_stub. FuelId)
(declare-const fuel%lib!is_update_ticket. FuelId)
(declare-const fuel%lib!is_update_stub. FuelId)
(declare-const fuel%lib!add_ticket. FuelId)
(declare-const fuel%lib!consume_stub. FuelId)
(declare-const fuel%lib!implements_UnboundedLogRefinesSimpleLog. FuelId)
(declare-const fuel%lib!impl&%1.is_Read. FuelId)
(declare-const fuel%lib!impl&%1.get_Read_0. FuelId)
(declare-const fuel%lib!impl&%1.is_Write. FuelId)
(declare-const fuel%lib!impl&%1.get_Write_0. FuelId)
(declare-const fuel%lib!impl&%2.arrow_Read_0. FuelId)
(declare-const fuel%lib!impl&%2.arrow_Write_0. FuelId)
(declare-const fuel%lib!impl&%3.is_Read. FuelId)
(declare-const fuel%lib!impl&%3.get_Read_0. FuelId)
(declare-const fuel%lib!impl&%3.is_Write. FuelId)
(declare-const fuel%lib!impl&%3.get_Write_0. FuelId)
(declare-const fuel%lib!impl&%4.arrow_Read_0. FuelId)
(declare-const fuel%lib!impl&%4.arrow_Write_0. FuelId)
(declare-const fuel%lib!impl&%5.is_Internal. FuelId)
(declare-const fuel%lib!impl&%5.is_Start. FuelId)
(declare-const fuel%lib!impl&%5.get_Start_0. FuelId)
(declare-const fuel%lib!impl&%5.get_Start_1. FuelId)
(declare-const fuel%lib!impl&%5.is_End. FuelId)
(declare-const fuel%lib!impl&%5.get_End_0. FuelId)
(declare-const fuel%lib!impl&%5.get_End_1. FuelId)
(declare-const fuel%lib!impl&%6.arrow_Start_0. FuelId)
(declare-const fuel%lib!impl&%6.arrow_Start_1. FuelId)
(declare-const fuel%lib!impl&%6.arrow_End_0. FuelId)
(declare-const fuel%lib!impl&%6.arrow_End_1. FuelId)
(declare-const fuel%lib!impl&%7.is_Stepped. FuelId)
(declare-const fuel%lib!impl&%7.get_Stepped_0. FuelId)
(declare-const fuel%lib!impl&%7.get_Stepped_1. FuelId)
(declare-const fuel%lib!impl&%7.get_Stepped_2. FuelId)
(declare-const fuel%lib!impl&%7.is_Inited. FuelId)
(declare-const fuel%lib!impl&%7.get_Inited_0. FuelId)
(declare-const fuel%lib!impl&%8.arrow_1. FuelId)
(declare-const fuel%lib!impl&%8.arrow_2. FuelId)
(declare-const fuel%lib!impl&%8.arrow_Stepped_0. FuelId)
(declare-const fuel%lib!impl&%8.arrow_Stepped_1. FuelId)
(declare-const fuel%lib!impl&%8.arrow_Stepped_2. FuelId)
(declare-const fuel%lib!impl&%8.arrow_Inited_0. FuelId)
(declare-const fuel%lib!impl&%9.get_last. FuelId)
(declare-const fuel%lib!impl&%9.wf. FuelId)
(declare-const fuel%lib!impl&%10.is_Stepped. FuelId)
(declare-const fuel%lib!impl&%10.get_Stepped_0. FuelId)
(declare-const fuel%lib!impl&%10.get_Stepped_1. FuelId)
(declare-const fuel%lib!impl&%10.get_Stepped_2. FuelId)
(declare-const fuel%lib!impl&%10.is_Inited. FuelId)
(declare-const fuel%lib!impl&%10.get_Inited_0. FuelId)
(declare-const fuel%lib!impl&%11.arrow_1. FuelId)
(declare-const fuel%lib!impl&%11.arrow_2. FuelId)
(declare-const fuel%lib!impl&%11.arrow_Stepped_0. FuelId)
(declare-const fuel%lib!impl&%11.arrow_Stepped_1. FuelId)
(declare-const fuel%lib!impl&%11.arrow_Stepped_2. FuelId)
(declare-const fuel%lib!impl&%11.arrow_Inited_0. FuelId)
(declare-const fuel%lib!impl&%12.get_last. FuelId)
(declare-const fuel%lib!impl&%12.wf. FuelId)
(declare-const fuel%lib!behavior_equiv. FuelId)
(declare-const fuel%lib!implements_SimpleLogRefinesAsynchronousSingleton. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.impl&%0.is_Err. fuel%vstd!std_specs.result.impl&%0.get_Err_0. fuel%vstd!std_specs.vec.impl&%2.spec_len. fuel%vstd!std_specs.vec.impl&%2.spec_index. fuel%vstd!atomic_ghost.impl&%1.well_formed. fuel%vstd!atomic_ghost.impl&%1.constant. fuel%vstd!atomic_ghost.impl&%21.well_formed. fuel%vstd!atomic_ghost.impl&%21.constant. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.choose. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%8.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%38.view. fuel%vstd!view.impl&%40.view. fuel%vstd!view.impl&%42.view. fuel%lib!spec.simple_log.SimpleLog.impl&%4.invariant. fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. fuel%lib!exec.context.impl&%0.wf2. fuel%lib!exec.context.impl&%0.wf. fuel%lib!exec.context.impl&%0.thread_id_spec. fuel%lib!exec.context.impl&%0.replica_id_spec. fuel%lib!exec.context.impl&%3.wf. fuel%lib!exec.log.impl&%1.wf. fuel%lib!exec.log.impl&%6.wf. fuel%lib!exec.replica.impl&%0.wf. fuel%lib!exec.replica.impl&%0.id_spec. fuel%lib!exec.replica.impl&%0.view. fuel%lib!exec.replica.impl&%1.wf. fuel%lib!exec.replica.impl&%3.wf. fuel%lib!exec.replica.impl&%4.spec_id. fuel%lib!spec.utils.seq_unique. fuel%lib!spec.utils.seq_disjoint. fuel%lib!spec.utils.rangeincl. fuel%lib!spec.simple_log.impl&%0.arrow_version. fuel%lib!spec.unbounded_log.impl&%0.is_Init. fuel%lib!spec.unbounded_log.impl&%0.get_Init_op. fuel%lib!spec.unbounded_log.impl&%0.is_Done. fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%3.is_Init. fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. fuel%lib!spec.unbounded_log.impl&%3.is_Placed. fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx. fuel%lib!spec.unbounded_log.impl&%3.is_Applied. fuel%lib!spec.unbounded_log.impl&%3.is_Done. fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%5.is_Ready. fuel%lib!spec.unbounded_log.impl&%7.queued_ops. fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere. fuel%lib!spec.unbounded_log.LogNoEntriesFromHere. fuel%lib!spec.unbounded_log.LogRangeNoNodeId. fuel%lib!spec.unbounded_log.LogRangeMatchesQueue. fuel%lib!spec.unbounded_log.QueueRidsUpdateDone. fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced. fuel%lib!spec.unbounded_log.compute_nrstate_at_version. fuel%lib!spec.unbounded_log_refines_simplelog.impl&%0.get_fresh_rid. fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle. fuel%lib!spec.flat_combiner.impl&%0.is_Idle. fuel%lib!constants.MAX_REPLICAS. fuel%lib!constants.LOG_SIZE. fuel%lib!constants.MAX_THREADS_PER_REPLICA. fuel%lib!exec.impl&%0.wf. fuel%lib!exec.impl&%0.replica_id_spec. fuel%lib!exec.impl&%1.wf. fuel%lib!exec.impl&%1.replicas. fuel%lib!exec.impl&%1.unbounded_log_instance. fuel%lib!implements_NodeReplicated. fuel%lib!is_readonly_ticket. fuel%lib!is_readonly_stub. fuel%lib!is_update_ticket. fuel%lib!is_update_stub. fuel%lib!add_ticket. fuel%lib!consume_stub. fuel%lib!implements_UnboundedLogRefinesSimpleLog. fuel%lib!impl&%1.is_Read. fuel%lib!impl&%1.get_Read_0. fuel%lib!impl&%1.is_Write. fuel%lib!impl&%1.get_Write_0. fuel%lib!impl&%2.arrow_Read_0. fuel%lib!impl&%2.arrow_Write_0. fuel%lib!impl&%3.is_Read. fuel%lib!impl&%3.get_Read_0. fuel%lib!impl&%3.is_Write. fuel%lib!impl&%3.get_Write_0. fuel%lib!impl&%4.arrow_Read_0. fuel%lib!impl&%4.arrow_Write_0. fuel%lib!impl&%5.is_Internal. fuel%lib!impl&%5.is_Start. fuel%lib!impl&%5.get_Start_0. fuel%lib!impl&%5.get_Start_1. fuel%lib!impl&%5.is_End. fuel%lib!impl&%5.get_End_0. fuel%lib!impl&%5.get_End_1. fuel%lib!impl&%6.arrow_Start_0. fuel%lib!impl&%6.arrow_Start_1. fuel%lib!impl&%6.arrow_End_0. fuel%lib!impl&%6.arrow_End_1. fuel%lib!impl&%7.is_Stepped. fuel%lib!impl&%7.get_Stepped_0. fuel%lib!impl&%7.get_Stepped_1. fuel%lib!impl&%7.get_Stepped_2. fuel%lib!impl&%7.is_Inited. fuel%lib!impl&%7.get_Inited_0. fuel%lib!impl&%8.arrow_1. fuel%lib!impl&%8.arrow_2. fuel%lib!impl&%8.arrow_Stepped_0. fuel%lib!impl&%8.arrow_Stepped_1. fuel%lib!impl&%8.arrow_Stepped_2. fuel%lib!impl&%8.arrow_Inited_0. fuel%lib!impl&%9.get_last. fuel%lib!impl&%9.wf. fuel%lib!impl&%10.is_Stepped. fuel%lib!impl&%10.get_Stepped_0. fuel%lib!impl&%10.get_Stepped_1. fuel%lib!impl&%10.get_Stepped_2. fuel%lib!impl&%10.is_Inited. fuel%lib!impl&%10.get_Inited_0. fuel%lib!impl&%11.arrow_1. fuel%lib!impl&%11.arrow_2. fuel%lib!impl&%11.arrow_Stepped_0. fuel%lib!impl&%11.arrow_Stepped_1. fuel%lib!impl&%11.arrow_Stepped_2. fuel%lib!impl&%11.arrow_Inited_0. fuel%lib!impl&%12.get_last. fuel%lib!impl&%12.wf. fuel%lib!behavior_equiv. fuel%lib!implements_SimpleLogRefinesAsynchronousSingleton.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./ReadOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./ReadOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./View (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./View (Dcr Type) Type)
(declare-fun proj%%lib!NodeReplicatedT./Replica (Dcr Type Dcr Type) Dcr)
(declare-fun proj%lib!NodeReplicatedT./Replica (Dcr Type Dcr Type) Type)
(declare-fun proj%%lib!NodeReplicatedT./TT (Dcr Type Dcr Type) Dcr)
(declare-fun proj%lib!NodeReplicatedT./TT (Dcr Type Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<usize./alloc!alloc.Global.>. 0)
(declare-sort lib!AffinityFn. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.Instance. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.clients. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.combiner. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.slots. 0)
(declare-sort vstd!atomic.PAtomicBool. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionBool. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!cell.CellId. 0)
(declare-sort vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. 0)
(declare-sort vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. 0)
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<vstd!cell.CellId.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!atomic_ghost.AtomicBool. 0) (vstd!cell.PointsToData. 0) (lib!spec.simple_log.SimpleLog.State. 0) (lib!spec.unbounded_log.UnboundedLog.State. 0) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. 0) (lib!spec.flat_combiner.FlatCombiner.clients_token_data. 0) (lib!exec.context.ThreadToken. 0) (lib!exec.context.PendingOperation. 0) (lib!exec.context.Context. 0) (lib!exec.context.InvariantPredicate_auto_Context_atomic. 0) (lib!exec.context.ContextGhost. 0) (lib!exec.log.BufferEntry. 0) (lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. 0) (lib!exec.log.NrLog. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_head. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_tail. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. 0) (lib!exec.replica.ReplicaToken. 0) (lib!exec.replica.ReplicatedDataStructure. 0) (lib!exec.replica.Replica. 0) (lib!exec.replica.InvariantPredicate_auto_Replica_combiner. 0) (lib!exec.replica.CombinerLockStateGhost. 0) (lib!spec.types.LogEntry. 0) (lib!spec.types.ConcreteLogEntry. 0) (lib!spec.linearization.RefinementProof. 0) (lib!spec.simple_log.ReadReq. 0) (lib!spec.simple_log.UpdateResp. 0) (lib!spec.unbounded_log.ReadonlyState. 0) (lib!spec.unbounded_log.UpdateState. 0) (lib!spec.unbounded_log.CombinerState. 0) (lib!spec.cyclicbuffer.StoredType. 0) (lib!spec.cyclicbuffer.ReaderState. 0) (lib!spec.cyclicbuffer.CombinerState. 0) (lib!spec.flat_combiner.ClientState. 0) (lib!exec.CachePadded. 0) (lib!exec.NodeReplicated. 0) (lib!AsynchronousSingleton.State. 0) (lib!InputOperation. 0) (lib!OutputOperation. 0) (lib!AsyncLabel. 0) (lib!SimpleLogBehavior. 0) (lib!AsynchronousSingletonBehavior. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!atomic_ghost.AtomicBool./AtomicBool (vstd!atomic_ghost.AtomicBool./AtomicBool/?patomic vstd!atomic.PAtomicBool.) (vstd!atomic_ghost.AtomicBool./AtomicBool/?atomic_inv Poly))) ((vstd!cell.PointsToData./PointsToData (vstd!cell.PointsToData./PointsToData/?pcell vstd!cell.CellId.) (vstd!cell.PointsToData./PointsToData/?value core!option.Option.))) ((lib!spec.simple_log.SimpleLog.State./State (lib!spec.simple_log.SimpleLog.State./State/?log Poly) (lib!spec.simple_log.SimpleLog.State./State/?version Int) (lib!spec.simple_log.SimpleLog.State./State/?readonly_reqs Poly) (lib!spec.simple_log.SimpleLog.State./State/?update_reqs Poly) (lib!spec.simple_log.SimpleLog.State./State/?update_resps vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.))) ((lib!spec.unbounded_log.UnboundedLog.State./State (lib!spec.unbounded_log.UnboundedLog.State./State/?num_replicas Int) (lib!spec.unbounded_log.UnboundedLog.State./State/?log Poly) (lib!spec.unbounded_log.UnboundedLog.State./State/?tail Int) (lib!spec.unbounded_log.UnboundedLog.State./State/?replicas Poly) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_versions vstd!map.Map<nat./nat.>.) (lib!spec.unbounded_log.UnboundedLog.State./State/?version_upper_bound Int) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_reads Poly) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_updates Poly) (lib!spec.unbounded_log.UnboundedLog.State./State/?combiner vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.))) ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?value Poly))) ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?value lib!spec.unbounded_log.ReadonlyState.))) ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value lib!spec.unbounded_log.UpdateState.))) ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?value lib!spec.unbounded_log.CombinerState.))) ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?instance Poly) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?key Int) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?value lib!spec.cyclicbuffer.CombinerState.))) ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?key Int) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?value lib!spec.flat_combiner.ClientState.))) ((lib!exec.context.ThreadToken./ThreadToken (lib!exec.context.ThreadToken./ThreadToken/?rid lib!exec.replica.ReplicaToken.) (lib!exec.context.ThreadToken./ThreadToken/?tid Int) (lib!exec.context.ThreadToken./ThreadToken/?fc_client lib!spec.flat_combiner.FlatCombiner.clients.) (lib!exec.context.ThreadToken./ThreadToken/?batch_perm Poly))) ((lib!exec.context.PendingOperation./PendingOperation (lib!exec.context.PendingOperation./PendingOperation/?op Poly) (lib!exec.context.PendingOperation./PendingOperation/?resp core!option.Option.))) ((lib!exec.context.Context./Context (lib!exec.context.Context./Context/?batch lib!exec.CachePadded.) (lib!exec.context.Context./Context/?atomic lib!exec.CachePadded.) (lib!exec.context.Context./Context/?thread_id_g Int) (lib!exec.context.Context./Context/?flat_combiner_instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!exec.context.Context./Context/?unbounded_log_instance Poly))) ((lib!exec.context.InvariantPredicate_auto_Context_atomic./InvariantPredicate_auto_Context_atomic )) ((lib!exec.context.ContextGhost./ContextGhost (lib!exec.context.ContextGhost./ContextGhost/?batch_perms core!option.Option.) (lib!exec.context.ContextGhost./ContextGhost/?slots lib!spec.flat_combiner.FlatCombiner.slots.) (lib!exec.context.ContextGhost./ContextGhost/?update core!option.Option.))) ((lib!exec.log.BufferEntry./BufferEntry (lib!exec.log.BufferEntry./BufferEntry/?log_entry Poly) (lib!exec.log.BufferEntry./BufferEntry/?alive vstd!atomic_ghost.AtomicBool.) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_idx Int) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_instance Poly))) ((lib!exec.log.InvariantPredicate_auto_BufferEntry_alive./InvariantPredicate_auto_BufferEntry_alive )) ((lib!exec.log.NrLog./NrLog (lib!exec.log.NrLog./NrLog/?slog Poly) (lib!exec.log.NrLog./NrLog/?version_upper_bound lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?head lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?tail lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?local_versions Poly) (lib!exec.log.NrLog./NrLog/?num_replicas Int) (lib!exec.log.NrLog./NrLog/?unbounded_log_instance Poly) (lib!exec.log.NrLog./NrLog/?cyclic_buffer_instance Poly))) ((lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound./InvariantPredicate_auto_NrLog_version_upper_bound )) ((lib!exec.log.InvariantPredicate_auto_NrLog_head./InvariantPredicate_auto_NrLog_head )) ((lib!exec.log.InvariantPredicate_auto_NrLog_tail./InvariantPredicate_auto_NrLog_tail )) ((lib!exec.log.InvariantPredicate_auto_NrLog_local_versions./InvariantPredicate_auto_NrLog_local_versions )) ((lib!exec.replica.ReplicaToken./ReplicaToken (lib!exec.replica.ReplicaToken./ReplicaToken/?rid Int))) ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?data Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?replica Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?combiner Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?cb_combiner Poly))) ((lib!exec.replica.Replica./Replica (lib!exec.replica.Replica./Replica/?replica_token lib!exec.replica.ReplicaToken.) (lib!exec.replica.Replica./Replica/?combiner lib!exec.CachePadded.) (lib!exec.replica.Replica./Replica/?contexts Poly) (lib!exec.replica.Replica./Replica/?collected_operations Poly) (lib!exec.replica.Replica./Replica/?collected_operations_per_thread vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (lib!exec.replica.Replica./Replica/?responses Poly) (lib!exec.replica.Replica./Replica/?data lib!exec.CachePadded.) (lib!exec.replica.Replica./Replica/?num_threads Int) (lib!exec.replica.Replica./Replica/?thread_tokens Poly) (lib!exec.replica.Replica./Replica/?unbounded_log_instance Poly) (lib!exec.replica.Replica./Replica/?cyclic_buffer_instance Poly) (lib!exec.replica.Replica./Replica/?flat_combiner_instance lib!spec.flat_combiner.FlatCombiner.Instance.))) ((lib!exec.replica.InvariantPredicate_auto_Replica_combiner./InvariantPredicate_auto_Replica_combiner )) ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?flat_combiner lib!spec.flat_combiner.FlatCombiner.combiner.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_perm Poly) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_per_thread_perm vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?responses_token Poly))) ((lib!spec.types.LogEntry./LogEntry (lib!spec.types.LogEntry./LogEntry/?op Poly) (lib!spec.types.LogEntry./LogEntry/?node_id Int))) ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op Poly) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id Int))) ((lib!spec.linearization.RefinementProof./RefinementProof )) ((lib!spec.simple_log.ReadReq./Init (lib!spec.simple_log.ReadReq./Init/?op Poly)) (lib!spec.simple_log.ReadReq./Req (lib!spec.simple_log.ReadReq./Req/?version Int) (lib!spec.simple_log.ReadReq./Req/?op Poly))) ((lib!spec.simple_log.UpdateResp./UpdateResp (lib!spec.simple_log.UpdateResp./UpdateResp/?0 Int))) ((lib!spec.unbounded_log.ReadonlyState./Init (lib!spec.unbounded_log.ReadonlyState./Init/?op Poly)) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op Poly) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound Int)) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op Poly) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id Int)) (lib!spec.unbounded_log.ReadonlyState./Done (lib!spec.unbounded_log.ReadonlyState./Done/?op Poly) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id Int) (lib!spec.unbounded_log.ReadonlyState./Done/?ret Poly))) ((lib!spec.unbounded_log.UpdateState./Init (lib!spec.unbounded_log.UpdateState./Init/?op Poly)) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.unbounded_log.UpdateState./Placed/?op Poly) (lib!spec.unbounded_log.UpdateState./Placed/?idx Int)) (lib!spec.unbounded_log.UpdateState./Applied (lib!spec.unbounded_log.UpdateState./Applied/?ret Poly) (lib!spec.unbounded_log.UpdateState./Applied/?idx Int)) (lib!spec.unbounded_log.UpdateState./Done (lib!spec.unbounded_log.UpdateState./Done/?ret Poly) (lib!spec.unbounded_log.UpdateState./Done/?idx Int))) ((lib!spec.unbounded_log.CombinerState./Ready ) (lib!spec.unbounded_log.CombinerState./Placed (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops vstd!seq.Seq<nat.>.)) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion Int)) (lib!spec.unbounded_log.CombinerState./Loop (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./Loop/?lversion Int) (lib!spec.unbounded_log.CombinerState./Loop/?idx Int) (lib!spec.unbounded_log.CombinerState./Loop/?tail Int)) (lib!spec.unbounded_log.CombinerState./UpdatedVersion (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail Int))) ((lib!spec.cyclicbuffer.StoredType./StoredType (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms Poly) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry core!option.Option.))) ((lib!spec.cyclicbuffer.ReaderState./Starting (lib!spec.cyclicbuffer.ReaderState./Starting/?start Int)) (lib!spec.cyclicbuffer.ReaderState./Range (lib!spec.cyclicbuffer.ReaderState./Range/?start Int) (lib!spec.cyclicbuffer.ReaderState./Range/?end Int) (lib!spec.cyclicbuffer.ReaderState./Range/?cur Int)) (lib!spec.cyclicbuffer.ReaderState./Guard (lib!spec.cyclicbuffer.ReaderState./Guard/?start Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?end Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?val lib!spec.cyclicbuffer.StoredType.))) ((lib!spec.cyclicbuffer.CombinerState./Idle ) (lib!spec.cyclicbuffer.CombinerState./Reading (lib!spec.cyclicbuffer.CombinerState./Reading/?0 lib!spec.cyclicbuffer.ReaderState.)) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx Int) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version Int)) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head Int)) (lib!spec.cyclicbuffer.CombinerState./Appending (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx Int) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail Int))) ((lib!spec.flat_combiner.ClientState./Idle ) (lib!spec.flat_combiner.ClientState./Waiting (lib!spec.flat_combiner.ClientState./Waiting/?0 Int))) ((lib!exec.CachePadded./CachePadded (lib!exec.CachePadded./CachePadded/?0 Poly))) ((lib!exec.NodeReplicated./NodeReplicated (lib!exec.NodeReplicated./NodeReplicated/?log lib!exec.log.NrLog.) (lib!exec.NodeReplicated./NodeReplicated/?replicas Poly) (lib!exec.NodeReplicated./NodeReplicated/?unbounded_log_instance Poly) (lib!exec.NodeReplicated./NodeReplicated/?cyclic_buffer_instance Poly))) ((lib!AsynchronousSingleton.State./State (lib!AsynchronousSingleton.State./State/?state Poly) (lib!AsynchronousSingleton.State./State/?reqs Poly) (lib!AsynchronousSingleton.State./State/?resps Poly))) ((lib!InputOperation./Read (lib!InputOperation./Read/?0 Poly)) (lib!InputOperation./Write (lib!InputOperation./Write/?0 Poly))) ((lib!OutputOperation./Read (lib!OutputOperation./Read/?0 Poly)) (lib!OutputOperation./Write (lib!OutputOperation./Write/?0 Poly))) ((lib!AsyncLabel./Internal ) (lib!AsyncLabel./Start (lib!AsyncLabel./Start/?0 Int) (lib!AsyncLabel./Start/?1 lib!InputOperation.)) (lib!AsyncLabel./End (lib!AsyncLabel./End/?0 Int) (lib!AsyncLabel./End/?1 lib!OutputOperation.))) ((lib!SimpleLogBehavior./Stepped (lib!SimpleLogBehavior./Stepped/?0 lib!spec.simple_log.SimpleLog.State.) (lib!SimpleLogBehavior./Stepped/?1 lib!AsyncLabel.) (lib!SimpleLogBehavior./Stepped/?2 lib!SimpleLogBehavior.)) (lib!SimpleLogBehavior./Inited (lib!SimpleLogBehavior./Inited/?0 lib!spec.simple_log.SimpleLog.State.))) ((lib!AsynchronousSingletonBehavior./Stepped (lib!AsynchronousSingletonBehavior./Stepped/?0 lib!AsynchronousSingleton.State.) (lib!AsynchronousSingletonBehavior./Stepped/?1 lib!AsyncLabel.) (lib!AsynchronousSingletonBehavior./Stepped/?2 lib!AsynchronousSingletonBehavior.)) (lib!AsynchronousSingletonBehavior./Inited (lib!AsynchronousSingletonBehavior./Inited/?0 lib!AsynchronousSingleton.State.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!atomic_ghost.AtomicBool./AtomicBool/patomic (vstd!atomic_ghost.AtomicBool.) vstd!atomic.PAtomicBool.)
(declare-fun vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (vstd!atomic_ghost.AtomicBool.) Poly)
(declare-fun vstd!cell.PointsToData./PointsToData/pcell (vstd!cell.PointsToData.) vstd!cell.CellId.)
(declare-fun vstd!cell.PointsToData./PointsToData/value (vstd!cell.PointsToData.) core!option.Option.)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/log (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/version (lib!spec.simple_log.SimpleLog.State.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/update_reqs (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/update_resps (lib!spec.simple_log.SimpleLog.State.) vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (lib!spec.unbounded_log.UnboundedLog.State.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/log (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/tail (lib!spec.unbounded_log.UnboundedLog.State.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/replicas (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (lib!spec.unbounded_log.UnboundedLog.State.) vstd!map.Map<nat./nat.>.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (lib!spec.unbounded_log.UnboundedLog.State.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/combiner (lib!spec.unbounded_log.UnboundedLog.State.) vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) lib!spec.unbounded_log.UpdateState.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) lib!spec.unbounded_log.CombinerState.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) lib!spec.flat_combiner.ClientState.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/rid (lib!exec.context.ThreadToken.) lib!exec.replica.ReplicaToken.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/tid (lib!exec.context.ThreadToken.) Int)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/fc_client (lib!exec.context.ThreadToken.) lib!spec.flat_combiner.FlatCombiner.clients.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/batch_perm (lib!exec.context.ThreadToken.) Poly)
(declare-fun lib!exec.context.PendingOperation./PendingOperation/op (lib!exec.context.PendingOperation.) Poly)
(declare-fun lib!exec.context.PendingOperation./PendingOperation/resp (lib!exec.context.PendingOperation.) core!option.Option.)
(declare-fun lib!exec.context.Context./Context/batch (lib!exec.context.Context.) lib!exec.CachePadded.)
(declare-fun lib!exec.context.Context./Context/atomic (lib!exec.context.Context.) lib!exec.CachePadded.)
(declare-fun lib!exec.context.Context./Context/thread_id_g (lib!exec.context.Context.) Int)
(declare-fun lib!exec.context.Context./Context/flat_combiner_instance (lib!exec.context.Context.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!exec.context.Context./Context/unbounded_log_instance (lib!exec.context.Context.) Poly)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/batch_perms (lib!exec.context.ContextGhost.) core!option.Option.)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/slots (lib!exec.context.ContextGhost.) lib!spec.flat_combiner.FlatCombiner.slots.)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/update (lib!exec.context.ContextGhost.) core!option.Option.)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/log_entry (lib!exec.log.BufferEntry.) Poly)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/alive (lib!exec.log.BufferEntry.) vstd!atomic_ghost.AtomicBool.)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (lib!exec.log.BufferEntry.) Int)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (lib!exec.log.BufferEntry.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/slog (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/version_upper_bound (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/head (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/tail (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/local_versions (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/num_replicas (lib!exec.log.NrLog.) Int)
(declare-fun lib!exec.log.NrLog./NrLog/unbounded_log_instance (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.replica.ReplicaToken./ReplicaToken/rid (lib!exec.replica.ReplicaToken.) Int)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/replica_token (lib!exec.replica.Replica.) lib!exec.replica.ReplicaToken.)
(declare-fun lib!exec.replica.Replica./Replica/combiner (lib!exec.replica.Replica.) lib!exec.CachePadded.)
(declare-fun lib!exec.replica.Replica./Replica/contexts (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/collected_operations (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/collected_operations_per_thread (lib!exec.replica.Replica.) vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun lib!exec.replica.Replica./Replica/responses (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/data (lib!exec.replica.Replica.) lib!exec.CachePadded.)
(declare-fun lib!exec.replica.Replica./Replica/num_threads (lib!exec.replica.Replica.) Int)
(declare-fun lib!exec.replica.Replica./Replica/thread_tokens (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/unbounded_log_instance (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/cyclic_buffer_instance (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/flat_combiner_instance (lib!exec.replica.Replica.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner (lib!exec.replica.CombinerLockStateGhost.) lib!spec.flat_combiner.FlatCombiner.combiner.)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm (lib!exec.replica.CombinerLockStateGhost.) vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun lib!spec.types.LogEntry./LogEntry/op (lib!spec.types.LogEntry.) Poly)
(declare-fun lib!spec.types.LogEntry./LogEntry/node_id (lib!spec.types.LogEntry.) Int)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (lib!spec.types.ConcreteLogEntry.) Int)
(declare-fun lib!spec.simple_log.ReadReq./Init/op (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun lib!spec.simple_log.ReadReq./Req/version (lib!spec.simple_log.ReadReq.) Int)
(declare-fun lib!spec.simple_log.ReadReq./Req/op (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun lib!spec.simple_log.UpdateResp./UpdateResp/0 (lib!spec.simple_log.UpdateResp.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Init/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/ret (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Init/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Placed/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/idx (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (lib!spec.cyclicbuffer.StoredType.) core!option.Option.)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Starting/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/val (lib!spec.cyclicbuffer.ReaderState.) lib!spec.cyclicbuffer.StoredType.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Reading/0 (lib!spec.cyclicbuffer.CombinerState.) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/tail (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.flat_combiner.ClientState./Waiting/0 (lib!spec.flat_combiner.ClientState.) Int)
(declare-fun lib!exec.CachePadded./CachePadded/0 (lib!exec.CachePadded.) Poly)
(declare-fun lib!exec.NodeReplicated./NodeReplicated/log (lib!exec.NodeReplicated.) lib!exec.log.NrLog.)
(declare-fun lib!exec.NodeReplicated./NodeReplicated/replicas (lib!exec.NodeReplicated.) Poly)
(declare-fun lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (lib!exec.NodeReplicated.) Poly)
(declare-fun lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (lib!exec.NodeReplicated.) Poly)
(declare-fun lib!AsynchronousSingleton.State./State/state (lib!AsynchronousSingleton.State.) Poly)
(declare-fun lib!AsynchronousSingleton.State./State/reqs (lib!AsynchronousSingleton.State.) Poly)
(declare-fun lib!AsynchronousSingleton.State./State/resps (lib!AsynchronousSingleton.State.) Poly)
(declare-fun lib!InputOperation./Read/0 (lib!InputOperation.) Poly)
(declare-fun lib!InputOperation./Write/0 (lib!InputOperation.) Poly)
(declare-fun lib!OutputOperation./Read/0 (lib!OutputOperation.) Poly)
(declare-fun lib!OutputOperation./Write/0 (lib!OutputOperation.) Poly)
(declare-fun lib!AsyncLabel./Start/0 (lib!AsyncLabel.) Int)
(declare-fun lib!AsyncLabel./Start/1 (lib!AsyncLabel.) lib!InputOperation.)
(declare-fun lib!AsyncLabel./End/0 (lib!AsyncLabel.) Int)
(declare-fun lib!AsyncLabel./End/1 (lib!AsyncLabel.) lib!OutputOperation.)
(declare-fun lib!SimpleLogBehavior./Stepped/0 (lib!SimpleLogBehavior.) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!SimpleLogBehavior./Stepped/1 (lib!SimpleLogBehavior.) lib!AsyncLabel.)
(declare-fun lib!SimpleLogBehavior./Stepped/2 (lib!SimpleLogBehavior.) lib!SimpleLogBehavior.)
(declare-fun lib!SimpleLogBehavior./Inited/0 (lib!SimpleLogBehavior.) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!AsynchronousSingletonBehavior./Stepped/0 (lib!AsynchronousSingletonBehavior.) lib!AsynchronousSingleton.State.)
(declare-fun lib!AsynchronousSingletonBehavior./Stepped/1 (lib!AsynchronousSingletonBehavior.) lib!AsyncLabel.)
(declare-fun lib!AsynchronousSingletonBehavior./Stepped/2 (lib!AsynchronousSingletonBehavior.) lib!AsynchronousSingletonBehavior.)
(declare-fun lib!AsynchronousSingletonBehavior./Inited/0 (lib!AsynchronousSingletonBehavior.) lib!AsynchronousSingleton.State.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-const TYPE%vstd!atomic.PAtomicBool. Type)
(declare-const TYPE%vstd!atomic.PermissionBool. Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredBool. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicBool. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!cell.CellId. Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.SimpleLog.State. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.State. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.tail. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Dcr Type) Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.clients. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.slots. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.combiner. Type)
(declare-fun TYPE%lib!exec.context.ThreadToken. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.context.PendingOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.context.Context. (Dcr Type) Type)
(declare-const TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. Type)
(declare-fun TYPE%lib!exec.context.ContextGhost. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.log.BufferEntry. (Dcr Type) Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. Type)
(declare-fun TYPE%lib!exec.log.NrLog. (Dcr Type) Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. Type)
(declare-const TYPE%lib!exec.replica.ReplicaToken. Type)
(declare-fun TYPE%lib!exec.replica.ReplicatedDataStructure. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.replica.Replica. (Dcr Type) Type)
(declare-const TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. Type)
(declare-fun TYPE%lib!exec.replica.CombinerLockStateGhost. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.rwlock.RwLock. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.LogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.ConcreteLogEntry. (Dcr Type) Type)
(declare-const TYPE%lib!spec.linearization.RefinementProof. Type)
(declare-fun TYPE%lib!spec.simple_log.ReadReq. (Dcr Type) Type)
(declare-const TYPE%lib!spec.simple_log.UpdateResp. Type)
(declare-fun TYPE%lib!spec.unbounded_log.ReadonlyState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UpdateState. (Dcr Type) Type)
(declare-const TYPE%lib!spec.unbounded_log.CombinerState. Type)
(declare-fun TYPE%lib!spec.unbounded_log_refines_simplelog.RefinementProof. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.StoredType. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.ReaderState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CombinerState. (Dcr Type) Type)
(declare-const TYPE%lib!spec.flat_combiner.ClientState. Type)
(declare-fun TYPE%lib!exec.CachePadded. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.NodeReplicated. (Dcr Type) Type)
(declare-fun TYPE%lib!AsynchronousSingleton.State. (Dcr Type) Type)
(declare-const TYPE%lib!AffinityFn. Type)
(declare-fun TYPE%lib!InputOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!OutputOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!AsyncLabel. (Dcr Type) Type)
(declare-fun TYPE%lib!SimpleLogBehavior. (Dcr Type) Type)
(declare-fun TYPE%lib!AsynchronousSingletonBehavior. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (alloc!vec.Vec<usize./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<usize./alloc!alloc.Global.>.)
(declare-fun Poly%lib!AffinityFn. (lib!AffinityFn.) Poly)
(declare-fun %Poly%lib!AffinityFn. (Poly) lib!AffinityFn.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.Instance.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (Poly) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!spec.flat_combiner.FlatCombiner.clients.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.clients. (Poly) lib!spec.flat_combiner.FlatCombiner.clients.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!spec.flat_combiner.FlatCombiner.combiner.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (Poly) lib!spec.flat_combiner.FlatCombiner.combiner.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!spec.flat_combiner.FlatCombiner.slots.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.slots. (Poly) lib!spec.flat_combiner.FlatCombiner.slots.)
(declare-fun Poly%vstd!atomic.PAtomicBool. (vstd!atomic.PAtomicBool.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicBool. (Poly) vstd!atomic.PAtomicBool.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionBool. (vstd!atomic.PermissionBool.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionBool. (Poly) vstd!atomic.PermissionBool.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!cell.CellId. (vstd!cell.CellId.) Poly)
(declare-fun %Poly%vstd!cell.CellId. (Poly) vstd!cell.CellId.)
(declare-fun Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly) vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly) vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (Poly) vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly) vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!cell.CellId.>. (vstd!seq.Seq<vstd!cell.CellId.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!cell.CellId.>. (Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicBool. (Poly) vstd!atomic_ghost.AtomicBool.)
(declare-fun Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData.) Poly)
(declare-fun %Poly%vstd!cell.PointsToData. (Poly) vstd!cell.PointsToData.)
(declare-fun Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun %Poly%lib!spec.simple_log.SimpleLog.State. (Poly) lib!spec.simple_log.SimpleLog.State.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly) lib!spec.unbounded_log.UnboundedLog.State.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly) lib!spec.flat_combiner.FlatCombiner.clients_token_data.)
(declare-fun Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken.) Poly)
(declare-fun %Poly%lib!exec.context.ThreadToken. (Poly) lib!exec.context.ThreadToken.)
(declare-fun Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation.) Poly)
(declare-fun %Poly%lib!exec.context.PendingOperation. (Poly) lib!exec.context.PendingOperation.)
(declare-fun Poly%lib!exec.context.Context. (lib!exec.context.Context.) Poly)
(declare-fun %Poly%lib!exec.context.Context. (Poly) lib!exec.context.Context.)
(declare-fun Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.context.InvariantPredicate_auto_Context_atomic.) Poly)
(declare-fun %Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (Poly) lib!exec.context.InvariantPredicate_auto_Context_atomic.)
(declare-fun Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost.) Poly)
(declare-fun %Poly%lib!exec.context.ContextGhost. (Poly) lib!exec.context.ContextGhost.)
(declare-fun Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry.) Poly)
(declare-fun %Poly%lib!exec.log.BufferEntry. (Poly) lib!exec.log.BufferEntry.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly) lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)
(declare-fun Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog.) Poly)
(declare-fun %Poly%lib!exec.log.NrLog. (Poly) lib!exec.log.NrLog.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.log.InvariantPredicate_auto_NrLog_head.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_head.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.log.InvariantPredicate_auto_NrLog_tail.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_tail.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)
(declare-fun Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken.) Poly)
(declare-fun %Poly%lib!exec.replica.ReplicaToken. (Poly) lib!exec.replica.ReplicaToken.)
(declare-fun Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun %Poly%lib!exec.replica.ReplicatedDataStructure. (Poly) lib!exec.replica.ReplicatedDataStructure.)
(declare-fun Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica.) Poly)
(declare-fun %Poly%lib!exec.replica.Replica. (Poly) lib!exec.replica.Replica.)
(declare-fun Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) Poly)
(declare-fun %Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (Poly) lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)
(declare-fun Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun %Poly%lib!exec.replica.CombinerLockStateGhost. (Poly) lib!exec.replica.CombinerLockStateGhost.)
(declare-fun Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.LogEntry. (Poly) lib!spec.types.LogEntry.)
(declare-fun Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.ConcreteLogEntry. (Poly) lib!spec.types.ConcreteLogEntry.)
(declare-fun Poly%lib!spec.linearization.RefinementProof. (lib!spec.linearization.RefinementProof.) Poly)
(declare-fun %Poly%lib!spec.linearization.RefinementProof. (Poly) lib!spec.linearization.RefinementProof.)
(declare-fun Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun %Poly%lib!spec.simple_log.ReadReq. (Poly) lib!spec.simple_log.ReadReq.)
(declare-fun Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp.) Poly)
(declare-fun %Poly%lib!spec.simple_log.UpdateResp. (Poly) lib!spec.simple_log.UpdateResp.)
(declare-fun Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.ReadonlyState. (Poly) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UpdateState. (Poly) lib!spec.unbounded_log.UpdateState.)
(declare-fun Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.CombinerState. (Poly) lib!spec.unbounded_log.CombinerState.)
(declare-fun Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.StoredType. (Poly) lib!spec.cyclicbuffer.StoredType.)
(declare-fun Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.ReaderState. (Poly) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CombinerState. (Poly) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.ClientState. (Poly) lib!spec.flat_combiner.ClientState.)
(declare-fun Poly%lib!exec.CachePadded. (lib!exec.CachePadded.) Poly)
(declare-fun %Poly%lib!exec.CachePadded. (Poly) lib!exec.CachePadded.)
(declare-fun Poly%lib!exec.NodeReplicated. (lib!exec.NodeReplicated.) Poly)
(declare-fun %Poly%lib!exec.NodeReplicated. (Poly) lib!exec.NodeReplicated.)
(declare-fun Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.State.) Poly)
(declare-fun %Poly%lib!AsynchronousSingleton.State. (Poly) lib!AsynchronousSingleton.State.)
(declare-fun Poly%lib!InputOperation. (lib!InputOperation.) Poly)
(declare-fun %Poly%lib!InputOperation. (Poly) lib!InputOperation.)
(declare-fun Poly%lib!OutputOperation. (lib!OutputOperation.) Poly)
(declare-fun %Poly%lib!OutputOperation. (Poly) lib!OutputOperation.)
(declare-fun Poly%lib!AsyncLabel. (lib!AsyncLabel.) Poly)
(declare-fun %Poly%lib!AsyncLabel. (Poly) lib!AsyncLabel.)
(declare-fun Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior.) Poly)
(declare-fun %Poly%lib!SimpleLogBehavior. (Poly) lib!SimpleLogBehavior.)
(declare-fun Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior.) Poly)
(declare-fun %Poly%lib!AsynchronousSingletonBehavior. (Poly) lib!AsynchronousSingletonBehavior.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)))))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)))))
(assert (forall ((x alloc!vec.Vec<usize./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x alloc!vec.Vec<usize./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x lib!AffinityFn.)) (! (= x (%Poly%lib!AffinityFn. (Poly%lib!AffinityFn. x))) :pattern ((Poly%lib!AffinityFn. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!AffinityFn.) (= x (Poly%lib!AffinityFn. (%Poly%lib!AffinityFn. x)))) :pattern ((has_type x TYPE%lib!AffinityFn.)))))
(assert (forall ((x lib!AffinityFn.)) (! (has_type (Poly%lib!AffinityFn. x) TYPE%lib!AffinityFn.) :pattern ((has_type (Poly%lib!AffinityFn. x) TYPE%lib!AffinityFn.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)))))
(assert (forall ((x vstd!atomic.PAtomicBool.)) (! (= x (%Poly%vstd!atomic.PAtomicBool. (Poly%vstd!atomic.PAtomicBool. x))) :pattern ((Poly%vstd!atomic.PAtomicBool. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicBool.) (= x (Poly%vstd!atomic.PAtomicBool. (%Poly%vstd!atomic.PAtomicBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicBool.)))))
(assert (forall ((x vstd!atomic.PAtomicBool.)) (! (has_type (Poly%vstd!atomic.PAtomicBool. x) TYPE%vstd!atomic.PAtomicBool.) :pattern ((has_type (Poly%vstd!atomic.PAtomicBool. x) TYPE%vstd!atomic.PAtomicBool.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PermissionBool.)) (! (= x (%Poly%vstd!atomic.PermissionBool. (Poly%vstd!atomic.PermissionBool. x))) :pattern ((Poly%vstd!atomic.PermissionBool. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionBool.) (= x (Poly%vstd!atomic.PermissionBool. (%Poly%vstd!atomic.PermissionBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionBool.)))))
(assert (forall ((x vstd!atomic.PermissionBool.)) (! (has_type (Poly%vstd!atomic.PermissionBool. x) TYPE%vstd!atomic.PermissionBool.) :pattern ((has_type (Poly%vstd!atomic.PermissionBool. x) TYPE%vstd!atomic.PermissionBool.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (= x (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. x))) :pattern ((Poly%vstd!cell.CellId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!cell.CellId.) (= x (Poly%vstd!cell.CellId. (%Poly%vstd!cell.CellId. x)))) :pattern ((has_type x TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.) :pattern ((has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (= x (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x))) :pattern ((Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) (= x (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (has_type (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) :pattern ((has_type (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (= x (%Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x))) :pattern ((Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) (= x (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (%Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (has_type (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) :pattern ((has_type (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.)) (= x (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.))))))
(assert (forall ((x vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.))))))
(assert (forall ((x vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) (= x (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))))))
(assert (forall ((x vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<vstd!cell.CellId.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!cell.CellId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.)) (= x (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.))))))
(assert (forall ((x vstd!seq.Seq<vstd!cell.CellId.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.)) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicBool. (Poly%vstd!atomic_ghost.AtomicBool. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicBool. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicBool. (%Poly%vstd!atomic_ghost.AtomicBool. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicBool.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= (vstd!atomic_ghost.AtomicBool./AtomicBool/patomic x) (vstd!atomic_ghost.AtomicBool./AtomicBool/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x) (vstd!atomic_ghost.AtomicBool./AtomicBool/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicBool./AtomicBool_ ((c vstd!atomic_ghost.AtomicBool.)) Bool ((_ is vstd!atomic_ghost.AtomicBool./AtomicBool) c))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (=> (is-vstd!atomic_ghost.AtomicBool./AtomicBool_ x) (height_lt (height (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicBool. x)))) :pattern ((height (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= x (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. x))) :pattern ((Poly%vstd!cell.PointsToData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (= x (Poly%vstd!cell.PointsToData. (%Poly%vstd!cell.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_pcell! vstd!cell.CellId.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/pcell x) (vstd!cell.PointsToData./PointsToData/?pcell x)) :pattern ((vstd!cell.PointsToData./PointsToData/pcell x)))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/value x) (vstd!cell.PointsToData./PointsToData/?value x)) :pattern ((vstd!cell.PointsToData./PointsToData/value x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (has_type (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x)) (has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(define-fun is-vstd!cell.PointsToData./PointsToData_ ((c vstd!cell.PointsToData.)) Bool ((_ is vstd!cell.PointsToData./PointsToData) c))
(assert (forall ((x vstd!cell.PointsToData.)) (! (=> (is-vstd!cell.PointsToData./PointsToData_ x) (height_lt (height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x))) (height (Poly%vstd!cell.PointsToData. x)))) :pattern ((height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x)))))))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= x (%Poly%lib!spec.simple_log.SimpleLog.State. (Poly%lib!spec.simple_log.SimpleLog.State. x))) :pattern ((Poly%lib!spec.simple_log.SimpleLog.State. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (= x (Poly%lib!spec.simple_log.SimpleLog.State. (%Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_log! Poly) (_version! Int) (_readonly_reqs! Poly) (_update_reqs! Poly) (_update_resps! vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (=> (and (has_type _log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (<= 0 _version!) (has_type _readonly_reqs! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)))) (has_type _update_reqs! (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State./State _log! _version! _readonly_reqs! _update_reqs! _update_resps!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State./State _log! _version! _readonly_reqs! _update_reqs! _update_resps!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/log x) (lib!spec.simple_log.SimpleLog.State./State/?log x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/log x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/version x) (lib!spec.simple_log.SimpleLog.State./State/?version x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/version x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x) (lib!spec.simple_log.SimpleLog.State./State/?readonly_reqs x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&))))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs x) (lib!spec.simple_log.SimpleLog.State./State/?update_reqs x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_reqs x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/update_resps x) (lib!spec.simple_log.SimpleLog.State./State/?update_resps x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_resps x)))))
(define-fun is-lib!spec.simple_log.SimpleLog.State./State_ ((c lib!spec.simple_log.SimpleLog.State.)) Bool ((_ is lib!spec.simple_log.SimpleLog.State./State) c))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/log x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/log x))))))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x))))))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/update_reqs x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/update_reqs x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly%lib!spec.unbounded_log.UnboundedLog.State. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.State. (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_num_replicas! Int) (_log! Poly) (_tail! Int) (_replicas! Poly) (_local_versions! vstd!map.Map<nat./nat.>.) (_version_upper_bound! Int) (_local_reads! Poly) (_local_updates! Poly) (_combiner! vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (=> (and (<= 0 _num_replicas!) (has_type _log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (<= 0 _tail!) (has_type _replicas! (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&))) (<= 0 _version_upper_bound!) (has_type _local_reads! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) (has_type _local_updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.State./State _num_replicas! _log! _tail! _replicas! _local_versions! _version_upper_bound! _local_reads! _local_updates! _combiner!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.State./State _num_replicas! _log! _tail! _replicas! _local_versions! _version_upper_bound! _local_reads! _local_updates! _combiner!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas x) (lib!spec.unbounded_log.UnboundedLog.State./State/?num_replicas x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/log x) (lib!spec.unbounded_log.UnboundedLog.State./State/?log x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/log x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail x) (lib!spec.unbounded_log.UnboundedLog.State./State/?tail x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas x) (lib!spec.unbounded_log.UnboundedLog.State./State/?replicas x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions x) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_versions x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_versions x)))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound x) (lib!spec.unbounded_log.UnboundedLog.State./State/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads x) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_reads x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_reads x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates x) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_updates x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_updates x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner x) (lib!spec.unbounded_log.UnboundedLog.State./State/?combiner x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/combiner x)))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.State./State_ ((c lib!spec.unbounded_log.UnboundedLog.State.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.State./State) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.State./State_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.State./State/log x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.State./State/log x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.State./State_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.State./State/replicas x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.State./State/replicas x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.State./State_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.State./State_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! Poly)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type _value! (proj%lib!Dispatch./View DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.ReadonlyState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. _value!) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.UpdateState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.UpdateState. _value!) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.CombinerState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. _value!) TYPE%lib!spec.unbounded_log.CombinerState.)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.cyclicbuffer.CombinerState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. _value!) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?key x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x)))))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)))))
(assert (forall ((_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_key! Int) (_value! lib!spec.flat_combiner.ClientState.)) (! (=> (and (<= 0 _key!) (has_type (Poly%lib!spec.flat_combiner.ClientState. _value!) TYPE%lib!spec.flat_combiner.ClientState.)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance x)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?key x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?value x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= x (%Poly%lib!exec.context.ThreadToken. (Poly%lib!exec.context.ThreadToken. x))) :pattern ((Poly%lib!exec.context.ThreadToken. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (= x (Poly%lib!exec.context.ThreadToken. (%Poly%lib!exec.context.ThreadToken. x)))) :pattern ((has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_rid! lib!exec.replica.ReplicaToken.) (_tid! Int) (_fc_client! lib!spec.flat_combiner.FlatCombiner.clients.) (_batch_perm! Poly)) (! (=> (and (has_type (Poly%lib!exec.replica.ReplicaToken. _rid!) TYPE%lib!exec.replica.ReplicaToken.) (uInv 32 _tid!) (has_type _batch_perm! (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken./ThreadToken _rid! _tid! _fc_client! _batch_perm!)) (TYPE%lib!exec.context.ThreadToken. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken./ThreadToken _rid! _tid! _fc_client! _batch_perm!)) (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/rid x) (lib!exec.context.ThreadToken./ThreadToken/?rid x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/rid x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. x))) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/tid x) (lib!exec.context.ThreadToken./ThreadToken/?tid x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/tid x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (uInv 32 (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. x)))) :pattern ((lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/fc_client x) (lib!exec.context.ThreadToken./ThreadToken/?fc_client x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/fc_client x)))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/batch_perm x) (lib!exec.context.ThreadToken./ThreadToken/?batch_perm x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/batch_perm x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (has_type (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) :pattern ((lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(define-fun is-lib!exec.context.ThreadToken./ThreadToken_ ((c lib!exec.context.ThreadToken.)) Bool ((_ is lib!exec.context.ThreadToken./ThreadToken) c))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (=> (is-lib!exec.context.ThreadToken./ThreadToken_ x) (height_lt (height (lib!exec.context.ThreadToken./ThreadToken/batch_perm x)) (height (Poly%lib!exec.context.ThreadToken. x)))) :pattern ((height (lib!exec.context.ThreadToken./ThreadToken/batch_perm x))))))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= x (%Poly%lib!exec.context.PendingOperation. (Poly%lib!exec.context.PendingOperation. x))) :pattern ((Poly%lib!exec.context.PendingOperation. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (= x (Poly%lib!exec.context.PendingOperation. (%Poly%lib!exec.context.PendingOperation. x)))) :pattern ((has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_resp! core!option.Option.)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%core!option.Option. _resp!) (TYPE%core!option.Option. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&)))) (has_type (Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation./PendingOperation _op! _resp!)) (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation./PendingOperation _op! _resp!)) (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= (lib!exec.context.PendingOperation./PendingOperation/op x) (lib!exec.context.PendingOperation./PendingOperation/?op x)) :pattern ((lib!exec.context.PendingOperation./PendingOperation/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (has_type (lib!exec.context.PendingOperation./PendingOperation/op (%Poly%lib!exec.context.PendingOperation. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!exec.context.PendingOperation./PendingOperation/op (%Poly%lib!exec.context.PendingOperation. x)) (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= (lib!exec.context.PendingOperation./PendingOperation/resp x) (lib!exec.context.PendingOperation./PendingOperation/?resp x)) :pattern ((lib!exec.context.PendingOperation./PendingOperation/resp x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp (%Poly%lib!exec.context.PendingOperation. x))) (TYPE%core!option.Option. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&)))) :pattern ((lib!exec.context.PendingOperation./PendingOperation/resp (%Poly%lib!exec.context.PendingOperation. x)) (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))))
(define-fun is-lib!exec.context.PendingOperation./PendingOperation_ ((c lib!exec.context.PendingOperation.)) Bool ((_ is lib!exec.context.PendingOperation./PendingOperation) c))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (=> (is-lib!exec.context.PendingOperation./PendingOperation_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp x))) (height (Poly%lib!exec.context.PendingOperation. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp x)))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= x (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. x))) :pattern ((Poly%lib!exec.context.Context. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (= x (Poly%lib!exec.context.Context. (%Poly%lib!exec.context.Context. x)))) :pattern ((has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_batch! lib!exec.CachePadded.) (_atomic! lib!exec.CachePadded.) (_thread_id_g! Int) (_flat_combiner_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_unbounded_log_instance! Poly)) (! (=> (and (has_type (Poly%lib!exec.CachePadded. _batch!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%lib!exec.CachePadded. _atomic!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.))) (<= 0 _thread_id_g!) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) (has_type (Poly%lib!exec.context.Context. (lib!exec.context.Context./Context _batch! _atomic! _thread_id_g! _flat_combiner_instance! _unbounded_log_instance!)) (TYPE%lib!exec.context.Context. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.Context. (lib!exec.context.Context./Context _batch! _atomic! _thread_id_g! _flat_combiner_instance! _unbounded_log_instance!)) (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/batch x) (lib!exec.context.Context./Context/?batch x)) :pattern ((lib!exec.context.Context./Context/batch x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))) :pattern ((lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/atomic x) (lib!exec.context.Context./Context/?atomic x)) :pattern ((lib!exec.context.Context./Context/atomic x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)))) :pattern ((lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/thread_id_g x) (lib!exec.context.Context./Context/?thread_id_g x)) :pattern ((lib!exec.context.Context./Context/thread_id_g x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (<= 0 (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. x)))) :pattern ((lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/flat_combiner_instance x) (lib!exec.context.Context./Context/?flat_combiner_instance x)) :pattern ((lib!exec.context.Context./Context/flat_combiner_instance x)))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/unbounded_log_instance x) (lib!exec.context.Context./Context/?unbounded_log_instance x)) :pattern ((lib!exec.context.Context./Context/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(define-fun is-lib!exec.context.Context./Context_ ((c lib!exec.context.Context.)) Bool ((_ is lib!exec.context.Context./Context) c))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch x))) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch x)))))))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic x))) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic x)))))))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (lib!exec.context.Context./Context/unbounded_log_instance x)) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (lib!exec.context.Context./Context/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.context.InvariantPredicate_auto_Context_atomic.)) (! (= x (%Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x))) :pattern ((Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.) (= x (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (%Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x)))) :pattern ((has_type x TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)))))
(assert (forall ((x lib!exec.context.InvariantPredicate_auto_Context_atomic.)) (! (has_type (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x) TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.) :pattern ((has_type (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x) TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= x (%Poly%lib!exec.context.ContextGhost. (Poly%lib!exec.context.ContextGhost. x))) :pattern ((Poly%lib!exec.context.ContextGhost. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (= x (Poly%lib!exec.context.ContextGhost. (%Poly%lib!exec.context.ContextGhost. x)))) :pattern ((has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_batch_perms! core!option.Option.) (_slots! lib!spec.flat_combiner.FlatCombiner.slots.) (_update! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _batch_perms!) (TYPE%core!option.Option. $ (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%core!option.Option. _update!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) (has_type (Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost./ContextGhost _batch_perms! _slots! _update!)) (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost./ContextGhost _batch_perms! _slots! _update!)) (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/batch_perms x) (lib!exec.context.ContextGhost./ContextGhost/?batch_perms x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/batch_perms x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. x))) (TYPE%core!option.Option. $ (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))) :pattern ((lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. x)) (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/slots x) (lib!exec.context.ContextGhost./ContextGhost/?slots x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/slots x)))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/update x) (lib!exec.context.ContextGhost./ContextGhost/?update x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/update x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) :pattern ((lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. x)) (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(define-fun is-lib!exec.context.ContextGhost./ContextGhost_ ((c lib!exec.context.ContextGhost.)) Bool ((_ is lib!exec.context.ContextGhost./ContextGhost) c))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (=> (is-lib!exec.context.ContextGhost./ContextGhost_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms x))) (height (Poly%lib!exec.context.ContextGhost. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms x)))))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (=> (is-lib!exec.context.ContextGhost./ContextGhost_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update x))) (height (Poly%lib!exec.context.ContextGhost. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update x)))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= x (%Poly%lib!exec.log.BufferEntry. (Poly%lib!exec.log.BufferEntry. x))) :pattern ((Poly%lib!exec.log.BufferEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (= x (Poly%lib!exec.log.BufferEntry. (%Poly%lib!exec.log.BufferEntry. x)))) :pattern ((has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_log_entry! Poly) (_alive! vstd!atomic_ghost.AtomicBool.) (_cyclic_buffer_idx! Int) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type _log_entry! (TYPE%vstd!cell.PCell. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)))) (has_type (Poly%vstd!atomic_ghost.AtomicBool. _alive!) (TYPE%vstd!atomic_ghost.AtomicBool. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (<= 0 _cyclic_buffer_idx!) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry./BufferEntry _log_entry! _alive! _cyclic_buffer_idx! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.BufferEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry./BufferEntry _log_entry! _alive! _cyclic_buffer_idx! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/log_entry x) (lib!exec.log.BufferEntry./BufferEntry/?log_entry x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/log_entry x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. x)) (TYPE%vstd!cell.PCell. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/alive x) (lib!exec.log.BufferEntry./BufferEntry/?alive x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/alive x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. x))) (TYPE%vstd!atomic_ghost.AtomicBool. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx x) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_idx x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (<= 0 (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. x)))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_instance x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(define-fun is-lib!exec.log.BufferEntry./BufferEntry_ ((c lib!exec.log.BufferEntry.)) Bool ((_ is lib!exec.log.BufferEntry./BufferEntry) c))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (lib!exec.log.BufferEntry./BufferEntry/log_entry x)) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (lib!exec.log.BufferEntry./BufferEntry/log_entry x))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive x))) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive x)))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x)) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (%Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x) TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x) TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= x (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. x))) :pattern ((Poly%lib!exec.log.NrLog. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (= x (Poly%lib!exec.log.NrLog. (%Poly%lib!exec.log.NrLog. x)))) :pattern ((has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_slog! Poly) (_version_upper_bound! lib!exec.CachePadded.) (_head! lib!exec.CachePadded.) (_tail! lib!exec.CachePadded.) (_local_versions! Poly) (_num_replicas! Int) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type _slog! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type (Poly%lib!exec.CachePadded. _version_upper_bound!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.))) (has_type (Poly%lib!exec.CachePadded. _head!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.))) (has_type (Poly%lib!exec.CachePadded. _tail!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.))) (has_type _local_versions! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.)) (<= 0 _num_replicas!) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog./NrLog _slog! _version_upper_bound! _head! _tail! _local_versions! _num_replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLog. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog./NrLog _slog! _version_upper_bound! _head! _tail! _local_versions! _num_replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/slog x) (lib!exec.log.NrLog./NrLog/?slog x)) :pattern ((lib!exec.log.NrLog./NrLog/slog x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/version_upper_bound x) (lib!exec.log.NrLog./NrLog/?version_upper_bound x)) :pattern ((lib!exec.log.NrLog./NrLog/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))) :pattern ((lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/head x) (lib!exec.log.NrLog./NrLog/?head x)) :pattern ((lib!exec.log.NrLog./NrLog/head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))) :pattern ((lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/tail x) (lib!exec.log.NrLog./NrLog/?tail x)) :pattern ((lib!exec.log.NrLog./NrLog/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))) :pattern ((lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/local_versions x) (lib!exec.log.NrLog./NrLog/?local_versions x)) :pattern ((lib!exec.log.NrLog./NrLog/local_versions x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/num_replicas x) (lib!exec.log.NrLog./NrLog/?num_replicas x)) :pattern ((lib!exec.log.NrLog./NrLog/num_replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (<= 0 (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. x)))) :pattern ((lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/unbounded_log_instance x) (lib!exec.log.NrLog./NrLog/?unbounded_log_instance x)) :pattern ((lib!exec.log.NrLog./NrLog/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x) (lib!exec.log.NrLog./NrLog/?cyclic_buffer_instance x)) :pattern ((lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(define-fun is-lib!exec.log.NrLog./NrLog_ ((c lib!exec.log.NrLog.)) Bool ((_ is lib!exec.log.NrLog./NrLog) c))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/slog x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/slog x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/local_versions x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/local_versions x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/unbounded_log_instance x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_head.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_head.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_tail.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_tail.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)))))
(assert (forall ((x lib!exec.replica.ReplicaToken.)) (! (= x (%Poly%lib!exec.replica.ReplicaToken. (Poly%lib!exec.replica.ReplicaToken. x))) :pattern ((Poly%lib!exec.replica.ReplicaToken. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.ReplicaToken.) (= x (Poly%lib!exec.replica.ReplicaToken. (%Poly%lib!exec.replica.ReplicaToken. x)))) :pattern ((has_type x TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((_rid! Int)) (! (=> (uInv SZ _rid!) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken./ReplicaToken _rid!)) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken./ReplicaToken _rid!)) TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((x lib!exec.replica.ReplicaToken.)) (! (= (lib!exec.replica.ReplicaToken./ReplicaToken/rid x) (lib!exec.replica.ReplicaToken./ReplicaToken/?rid x)) :pattern ((lib!exec.replica.ReplicaToken./ReplicaToken/rid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.ReplicaToken.) (uInv SZ (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. x)))) :pattern ((lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. x)) (has_type x TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= x (%Poly%lib!exec.replica.ReplicatedDataStructure. (Poly%lib!exec.replica.ReplicatedDataStructure. x))) :pattern ((Poly%lib!exec.replica.ReplicatedDataStructure. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (= x (Poly%lib!exec.replica.ReplicatedDataStructure. (%Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_data! Poly) (_replica! Poly) (_combiner! Poly) (_cb_combiner! Poly)) (! (=> (and (has_type _data! DT&) (has_type _replica! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type _combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type _cb_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) (has_type (Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure _data! _replica! _combiner! _cb_combiner!)) (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure _data! _replica! _combiner! _cb_combiner!)) (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?data x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) DT&)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?replica x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?combiner x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?cb_combiner x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(define-fun is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ ((c lib!exec.replica.ReplicatedDataStructure.)) Bool ((_ is lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure) c))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= x (%Poly%lib!exec.replica.Replica. (Poly%lib!exec.replica.Replica. x))) :pattern ((Poly%lib!exec.replica.Replica. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (= x (Poly%lib!exec.replica.Replica. (%Poly%lib!exec.replica.Replica. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_replica_token! lib!exec.replica.ReplicaToken.) (_combiner! lib!exec.CachePadded.) (_contexts! Poly) (_collected_operations! Poly) (_collected_operations_per_thread! vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (_responses! Poly) (_data! lib!exec.CachePadded.) (_num_threads! Int) (_thread_tokens! Poly) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly) (_flat_combiner_instance! lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (=> (and (has_type (Poly%lib!exec.replica.ReplicaToken. _replica_token!) TYPE%lib!exec.replica.ReplicaToken.) (has_type (Poly%lib!exec.CachePadded. _combiner!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.))) (has_type _contexts! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type _collected_operations! (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type _responses! (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type (Poly%lib!exec.CachePadded. _data!) (TYPE%lib!exec.CachePadded. $ (TYPE%lib!exec.rwlock.RwLock. $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)))) (uInv 64 _num_threads!) (has_type _thread_tokens! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica./Replica _replica_token! _combiner! _contexts! _collected_operations! _collected_operations_per_thread! _responses! _data! _num_threads! _thread_tokens! _unbounded_log_instance! _cyclic_buffer_instance! _flat_combiner_instance!)) (TYPE%lib!exec.replica.Replica. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica./Replica _replica_token! _combiner! _contexts! _collected_operations! _collected_operations_per_thread! _responses! _data! _num_threads! _thread_tokens! _unbounded_log_instance! _cyclic_buffer_instance! _flat_combiner_instance!)) (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/replica_token x) (lib!exec.replica.Replica./Replica/?replica_token x)) :pattern ((lib!exec.replica.Replica./Replica/replica_token x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. x))) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/combiner x) (lib!exec.replica.Replica./Replica/?combiner x)) :pattern ((lib!exec.replica.Replica./Replica/combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)))) :pattern ((lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/contexts x) (lib!exec.replica.Replica./Replica/?contexts x)) :pattern ((lib!exec.replica.Replica./Replica/contexts x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/collected_operations x) (lib!exec.replica.Replica./Replica/?collected_operations x)) :pattern ((lib!exec.replica.Replica./Replica/collected_operations x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/collected_operations (%Poly%lib!exec.replica.Replica. x)) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.Replica./Replica/collected_operations (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/collected_operations_per_thread x) (lib!exec.replica.Replica./Replica/?collected_operations_per_thread x)) :pattern ((lib!exec.replica.Replica./Replica/collected_operations_per_thread x)))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/responses x) (lib!exec.replica.Replica./Replica/?responses x)) :pattern ((lib!exec.replica.Replica./Replica/responses x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/responses (%Poly%lib!exec.replica.Replica. x)) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.Replica./Replica/responses (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/data x) (lib!exec.replica.Replica./Replica/?data x)) :pattern ((lib!exec.replica.Replica./Replica/data x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%lib!exec.rwlock.RwLock. $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))) :pattern ((lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/num_threads x) (lib!exec.replica.Replica./Replica/?num_threads x)) :pattern ((lib!exec.replica.Replica./Replica/num_threads x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (uInv 64 (lib!exec.replica.Replica./Replica/num_threads (%Poly%lib!exec.replica.Replica. x)))) :pattern ((lib!exec.replica.Replica./Replica/num_threads (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/thread_tokens x) (lib!exec.replica.Replica./Replica/?thread_tokens x)) :pattern ((lib!exec.replica.Replica./Replica/thread_tokens x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/unbounded_log_instance x) (lib!exec.replica.Replica./Replica/?unbounded_log_instance x)) :pattern ((lib!exec.replica.Replica./Replica/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x) (lib!exec.replica.Replica./Replica/?cyclic_buffer_instance x)) :pattern ((lib!exec.replica.Replica./Replica/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/flat_combiner_instance x) (lib!exec.replica.Replica./Replica/?flat_combiner_instance x)) :pattern ((lib!exec.replica.Replica./Replica/flat_combiner_instance x)))))
(define-fun is-lib!exec.replica.Replica./Replica_ ((c lib!exec.replica.Replica.)) Bool ((_ is lib!exec.replica.Replica./Replica) c))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner x))) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner x)))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/contexts x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/contexts x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/collected_operations x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/collected_operations x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/responses x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/responses x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data x))) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data x)))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/thread_tokens x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/thread_tokens x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/unbounded_log_instance x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)) (! (= x (%Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x))) :pattern ((Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) (= x (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (%Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x)))) :pattern ((has_type x TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)))))
(assert (forall ((x lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)) (! (has_type (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x) TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) :pattern ((has_type (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x) TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= x (%Poly%lib!exec.replica.CombinerLockStateGhost. (Poly%lib!exec.replica.CombinerLockStateGhost. x))) :pattern ((Poly%lib!exec.replica.CombinerLockStateGhost. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (= x (Poly%lib!exec.replica.CombinerLockStateGhost. (%Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_flat_combiner! lib!spec.flat_combiner.FlatCombiner.combiner.) (_collected_operations_perm! Poly) (_collected_operations_per_thread_perm! vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (_responses_token! Poly)) (! (=> (and (has_type _collected_operations_perm! (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type _responses_token! (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) (has_type (Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost _flat_combiner! _collected_operations_perm! _collected_operations_per_thread_perm! _responses_token!)) (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost _flat_combiner! _collected_operations_perm! _collected_operations_per_thread_perm! _responses_token!)) (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?flat_combiner x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner x)))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_perm x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (has_type (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_per_thread_perm x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm x)))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?responses_token x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (has_type (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))))))
(define-fun is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ ((c lib!exec.replica.CombinerLockStateGhost.)) Bool ((_ is lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost) c))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (=> (is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ x) (height_lt (height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x)) (height (Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x))))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (=> (is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ x) (height_lt (height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x)) (height (Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= x (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. x))) :pattern ((Poly%lib!spec.types.LogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.LogEntry. (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _node_id!)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/op x) (lib!spec.types.LogEntry./LogEntry/?op x)) :pattern ((lib!spec.types.LogEntry./LogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (has_type (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/node_id x) (lib!spec.types.LogEntry./LogEntry/?node_id x)) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (<= 0 (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= x (%Poly%lib!spec.types.ConcreteLogEntry. (Poly%lib!spec.types.ConcreteLogEntry. x))) :pattern ((Poly%lib!spec.types.ConcreteLogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.ConcreteLogEntry. (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (uInv 64 _node_id!)) (has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (has_type (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (uInv 64 (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.linearization.RefinementProof.)) (! (= x (%Poly%lib!spec.linearization.RefinementProof. (Poly%lib!spec.linearization.RefinementProof. x))) :pattern ((Poly%lib!spec.linearization.RefinementProof. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.linearization.RefinementProof.) (= x (Poly%lib!spec.linearization.RefinementProof. (%Poly%lib!spec.linearization.RefinementProof. x)))) :pattern ((has_type x TYPE%lib!spec.linearization.RefinementProof.)))))
(assert (forall ((x lib!spec.linearization.RefinementProof.)) (! (has_type (Poly%lib!spec.linearization.RefinementProof. x) TYPE%lib!spec.linearization.RefinementProof.) :pattern ((has_type (Poly%lib!spec.linearization.RefinementProof. x) TYPE%lib!spec.linearization.RefinementProof.)))))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= x (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. x))) :pattern ((Poly%lib!spec.simple_log.ReadReq. x)))))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (= x (Poly%lib!spec.simple_log.ReadReq. (%Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))))))
(assert (forall ((R&. Dcr) (R& Type) (_op! Poly)) (! (=> (has_type _op! R&) (has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) :pattern ((has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))))))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Init/op x) (lib!spec.simple_log.ReadReq./Init/?op x)) :pattern ((lib!spec.simple_log.ReadReq./Init/op x)))))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. x)) R&)) :pattern ((lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))))))
(assert (forall ((R&. Dcr) (R& Type) (_version! Int) (_op! Poly)) (! (=> (and (<= 0 _version!) (has_type _op! R&)) (has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req _version! _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) :pattern ((has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req _version! _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))))))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Req/version x) (lib!spec.simple_log.ReadReq./Req/?version x)) :pattern ((lib!spec.simple_log.ReadReq./Req/version x)))))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (<= 0 (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))))))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Req/op x) (lib!spec.simple_log.ReadReq./Req/?op x)) :pattern ((lib!spec.simple_log.ReadReq./Req/op x)))))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. x)) R&)) :pattern ((lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))))))
(define-fun is-lib!spec.simple_log.ReadReq./Init_ ((c lib!spec.simple_log.ReadReq.)) Bool ((_ is lib!spec.simple_log.ReadReq./Init) c))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (=> (is-lib!spec.simple_log.ReadReq./Init_ x) (height_lt (height (lib!spec.simple_log.ReadReq./Init/op x)) (height (Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((height (lib!spec.simple_log.ReadReq./Init/op x))))))
(define-fun is-lib!spec.simple_log.ReadReq./Req_ ((c lib!spec.simple_log.ReadReq.)) Bool ((_ is lib!spec.simple_log.ReadReq./Req) c))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (=> (is-lib!spec.simple_log.ReadReq./Req_ x) (height_lt (height (lib!spec.simple_log.ReadReq./Req/op x)) (height (Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((height (lib!spec.simple_log.ReadReq./Req/op x))))))
(assert (forall ((x lib!spec.simple_log.UpdateResp.)) (! (= x (%Poly%lib!spec.simple_log.UpdateResp. (Poly%lib!spec.simple_log.UpdateResp. x))) :pattern ((Poly%lib!spec.simple_log.UpdateResp. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.simple_log.UpdateResp.) (= x (Poly%lib!spec.simple_log.UpdateResp. (%Poly%lib!spec.simple_log.UpdateResp. x)))) :pattern ((has_type x TYPE%lib!spec.simple_log.UpdateResp.)))))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp _0!)) TYPE%lib!spec.simple_log.UpdateResp.)) :pattern ((has_type (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp _0!)) TYPE%lib!spec.simple_log.UpdateResp.)))))
(assert (forall ((x lib!spec.simple_log.UpdateResp.)) (! (= (lib!spec.simple_log.UpdateResp./UpdateResp/0 x) (lib!spec.simple_log.UpdateResp./UpdateResp/?0 x)) :pattern ((lib!spec.simple_log.UpdateResp./UpdateResp/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.simple_log.UpdateResp.) (<= 0 (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. x)))) :pattern ((lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. x)) (has_type x TYPE%lib!spec.simple_log.UpdateResp.)))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= x (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. x))) :pattern ((Poly%lib!spec.unbounded_log.ReadonlyState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.ReadonlyState. (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Init/op x) (lib!spec.unbounded_log.ReadonlyState./Init/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int) (_ret! Poly)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!) (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/op x) (lib!spec.unbounded_log.ReadonlyState./Done/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/node_id x) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/ret x) (lib!spec.unbounded_log.ReadonlyState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= x (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. x))) :pattern ((Poly%lib!spec.unbounded_log.UpdateState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UpdateState. (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Init/op x) (lib!spec.unbounded_log.UpdateState./Init/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_idx! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/op x) (lib!spec.unbounded_log.UpdateState./Placed/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/idx x) (lib!spec.unbounded_log.UpdateState./Placed/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/ret x) (lib!spec.unbounded_log.UpdateState./Applied/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/idx x) (lib!spec.unbounded_log.UpdateState./Applied/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/ret x) (lib!spec.unbounded_log.UpdateState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/idx x) (lib!spec.unbounded_log.UpdateState./Done/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= x (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. x))) :pattern ((Poly%lib!spec.unbounded_log.CombinerState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (= x (Poly%lib!spec.unbounded_log.CombinerState. (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (has_type (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready) TYPE%lib!spec.unbounded_log.CombinerState.))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.)) (! (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Placed/queued_ops x) (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Placed/queued_ops x)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int)) (! (=> (<= 0 _lversion!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int) (_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _lversion!) (<= 0 _idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/queued_ops x) (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/lversion x) (lib!spec.unbounded_log.CombinerState./Loop/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/idx x) (lib!spec.unbounded_log.CombinerState./Loop/?idx x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/tail x) (lib!spec.unbounded_log.CombinerState./Loop/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_tail! Int)) (! (=> (<= 0 _tail!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= x (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. x))) :pattern ((Poly%lib!spec.cyclicbuffer.StoredType. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.StoredType. (%Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cell_perms! Poly) (_log_entry! core!option.Option.)) (! (=> (and (has_type _cell_perms! (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)))) (has_type (Poly%core!option.Option. _log_entry!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x) (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.StoredType./StoredType_ ((c lib!spec.cyclicbuffer.StoredType.)) Bool ((_ is lib!spec.cyclicbuffer.StoredType./StoredType) c))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x))) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.ReaderState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.ReaderState. (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int)) (! (=> (<= 0 _start!) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Starting/start x) (lib!spec.cyclicbuffer.ReaderState./Starting/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/start x) (lib!spec.cyclicbuffer.ReaderState./Range/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/end x) (lib!spec.cyclicbuffer.ReaderState./Range/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/cur x) (lib!spec.cyclicbuffer.ReaderState./Range/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int) (_val! lib!spec.cyclicbuffer.StoredType.)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. _val!) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/start x) (lib!spec.cyclicbuffer.ReaderState./Guard/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/end x) (lib!spec.cyclicbuffer.ReaderState./Guard/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/cur x) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/val x) (lib!spec.cyclicbuffer.ReaderState./Guard/?val x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x))) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Guard_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Guard) c))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (=> (is-lib!spec.cyclicbuffer.ReaderState./Guard_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x))) (height (Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CombinerState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CombinerState. (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.cyclicbuffer.ReaderState.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. _0!) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Reading/0 x) (lib!spec.cyclicbuffer.CombinerState./Reading/?0 x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x))) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_idx! Int) (_min_local_version! Int)) (! (=> (and (<= 0 _idx!) (<= 0 _min_local_version!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_observed_head! Int)) (! (=> (<= 0 _observed_head!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cur_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _cur_idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x) (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/tail x) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Reading_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Reading) c))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (=> (is-lib!spec.cyclicbuffer.CombinerState./Reading_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x))) (height (Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))))
(assert (forall ((x lib!spec.flat_combiner.ClientState.)) (! (= x (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. x))) :pattern ((Poly%lib!spec.flat_combiner.ClientState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.ClientState.) (= x (Poly%lib!spec.flat_combiner.ClientState. (%Poly%lib!spec.flat_combiner.ClientState. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.ClientState.)))))
(assert (has_type (Poly%lib!spec.flat_combiner.ClientState. lib!spec.flat_combiner.ClientState./Idle) TYPE%lib!spec.flat_combiner.ClientState.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting _0!)) TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting _0!)) TYPE%lib!spec.flat_combiner.ClientState.)))))
(assert (forall ((x lib!spec.flat_combiner.ClientState.)) (! (= (lib!spec.flat_combiner.ClientState./Waiting/0 x) (lib!spec.flat_combiner.ClientState./Waiting/?0 x)) :pattern ((lib!spec.flat_combiner.ClientState./Waiting/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.ClientState.) (<= 0 (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. x)))) :pattern ((lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. x)) (has_type x TYPE%lib!spec.flat_combiner.ClientState.)))))
(assert (forall ((x lib!exec.CachePadded.)) (! (= x (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. x))) :pattern ((Poly%lib!exec.CachePadded. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (= x (Poly%lib!exec.CachePadded. (%Poly%lib!exec.CachePadded. x)))) :pattern ((has_type x (TYPE%lib!exec.CachePadded. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))) :pattern ((has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))))))
(assert (forall ((x lib!exec.CachePadded.)) (! (= (lib!exec.CachePadded./CachePadded/0 x) (lib!exec.CachePadded./CachePadded/?0 x)) :pattern ((lib!exec.CachePadded./CachePadded/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (has_type (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) T&)) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) (has_type x (TYPE%lib!exec.CachePadded. T&. T&))))))
(define-fun is-lib!exec.CachePadded./CachePadded_ ((c lib!exec.CachePadded.)) Bool ((_ is lib!exec.CachePadded./CachePadded) c))
(assert (forall ((x lib!exec.CachePadded.)) (! (=> (is-lib!exec.CachePadded./CachePadded_ x) (height_lt (height (lib!exec.CachePadded./CachePadded/0 x)) (height (Poly%lib!exec.CachePadded. x)))) :pattern ((height (lib!exec.CachePadded./CachePadded/0 x))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= x (%Poly%lib!exec.NodeReplicated. (Poly%lib!exec.NodeReplicated. x))) :pattern ((Poly%lib!exec.NodeReplicated. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (= x (Poly%lib!exec.NodeReplicated. (%Poly%lib!exec.NodeReplicated. x)))) :pattern ((has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_log! lib!exec.log.NrLog.) (_replicas! Poly) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type (Poly%lib!exec.log.NrLog. _log!) (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type _replicas! (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.NodeReplicated. (lib!exec.NodeReplicated./NodeReplicated _log! _replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.NodeReplicated. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.NodeReplicated. (lib!exec.NodeReplicated./NodeReplicated _log! _replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= (lib!exec.NodeReplicated./NodeReplicated/log x) (lib!exec.NodeReplicated./NodeReplicated/?log x)) :pattern ((lib!exec.NodeReplicated./NodeReplicated/log x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (has_type (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. x))) (TYPE%lib!exec.log.NrLog. DT&. DT&))) :pattern ((lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. x)) (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= (lib!exec.NodeReplicated./NodeReplicated/replicas x) (lib!exec.NodeReplicated./NodeReplicated/?replicas x)) :pattern ((lib!exec.NodeReplicated./NodeReplicated/replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (has_type (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. x)) (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. x)) (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance x) (lib!exec.NodeReplicated./NodeReplicated/?unbounded_log_instance x)) :pattern ((lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (has_type (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (%Poly%lib!exec.NodeReplicated. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (%Poly%lib!exec.NodeReplicated. x)) (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance x) (lib!exec.NodeReplicated./NodeReplicated/?cyclic_buffer_instance x)) :pattern ((lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (has_type (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (%Poly%lib!exec.NodeReplicated. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (%Poly%lib!exec.NodeReplicated. x)) (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(define-fun is-lib!exec.NodeReplicated./NodeReplicated_ ((c lib!exec.NodeReplicated.)) Bool ((_ is lib!exec.NodeReplicated./NodeReplicated) c))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (=> (is-lib!exec.NodeReplicated./NodeReplicated_ x) (height_lt (height (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log x))) (height (Poly%lib!exec.NodeReplicated. x)))) :pattern ((height (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log x)))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (=> (is-lib!exec.NodeReplicated./NodeReplicated_ x) (height_lt (height (lib!exec.NodeReplicated./NodeReplicated/replicas x)) (height (Poly%lib!exec.NodeReplicated. x)))) :pattern ((height (lib!exec.NodeReplicated./NodeReplicated/replicas x))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (=> (is-lib!exec.NodeReplicated./NodeReplicated_ x) (height_lt (height (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance x)) (height (Poly%lib!exec.NodeReplicated. x)))) :pattern ((height (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (=> (is-lib!exec.NodeReplicated./NodeReplicated_ x) (height_lt (height (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance x)) (height (Poly%lib!exec.NodeReplicated. x)))) :pattern ((height (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance x))))))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (= x (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. x))) :pattern ((Poly%lib!AsynchronousSingleton.State. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (= x (Poly%lib!AsynchronousSingleton.State. (%Poly%lib!AsynchronousSingleton.State. x)))) :pattern ((has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_state! Poly) (_reqs! Poly) (_resps! Poly)) (! (=> (and (has_type _state! (proj%lib!Dispatch./View DT&. DT&)) (has_type _reqs! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!InputOperation. DT&. DT&))) (has_type _resps! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&)))) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.State./State _state! _reqs! _resps!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.State./State _state! _reqs! _resps!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))))))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (= (lib!AsynchronousSingleton.State./State/state x) (lib!AsynchronousSingleton.State./State/?state x)) :pattern ((lib!AsynchronousSingleton.State./State/state x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. x)) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. x)) (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))))))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (= (lib!AsynchronousSingleton.State./State/reqs x) (lib!AsynchronousSingleton.State./State/?reqs x)) :pattern ((lib!AsynchronousSingleton.State./State/reqs x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!InputOperation. DT&. DT&)))) :pattern ((lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. x)) (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))))))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (= (lib!AsynchronousSingleton.State./State/resps x) (lib!AsynchronousSingleton.State./State/?resps x)) :pattern ((lib!AsynchronousSingleton.State./State/resps x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&)))) :pattern ((lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. x)) (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))))))
(define-fun is-lib!AsynchronousSingleton.State./State_ ((c lib!AsynchronousSingleton.State.)) Bool ((_ is lib!AsynchronousSingleton.State./State) c))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (=> (is-lib!AsynchronousSingleton.State./State_ x) (height_lt (height (lib!AsynchronousSingleton.State./State/reqs x)) (height (Poly%lib!AsynchronousSingleton.State. x)))) :pattern ((height (lib!AsynchronousSingleton.State./State/reqs x))))))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (=> (is-lib!AsynchronousSingleton.State./State_ x) (height_lt (height (lib!AsynchronousSingleton.State./State/resps x)) (height (Poly%lib!AsynchronousSingleton.State. x)))) :pattern ((height (lib!AsynchronousSingleton.State./State/resps x))))))
(assert (forall ((x lib!InputOperation.)) (! (= x (%Poly%lib!InputOperation. (Poly%lib!InputOperation. x))) :pattern ((Poly%lib!InputOperation. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (= x (Poly%lib!InputOperation. (%Poly%lib!InputOperation. x)))) :pattern ((has_type x (TYPE%lib!InputOperation. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!InputOperation./Read _0!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!InputOperation. (lib!InputOperation./Read _0!)) (TYPE%lib!InputOperation. DT&. DT&))))))
(assert (forall ((x lib!InputOperation.)) (! (= (lib!InputOperation./Read/0 x) (lib!InputOperation./Read/?0 x)) :pattern ((lib!InputOperation./Read/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!InputOperation./Read/0 (%Poly%lib!InputOperation. x)) (has_type x (TYPE%lib!InputOperation. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!InputOperation./Write _0!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!InputOperation. (lib!InputOperation./Write _0!)) (TYPE%lib!InputOperation. DT&. DT&))))))
(assert (forall ((x lib!InputOperation.)) (! (= (lib!InputOperation./Write/0 x) (lib!InputOperation./Write/?0 x)) :pattern ((lib!InputOperation./Write/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!InputOperation./Write/0 (%Poly%lib!InputOperation. x)) (has_type x (TYPE%lib!InputOperation. DT&. DT&))))))
(assert (forall ((x lib!OutputOperation.)) (! (= x (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. x))) :pattern ((Poly%lib!OutputOperation. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (= x (Poly%lib!OutputOperation. (%Poly%lib!OutputOperation. x)))) :pattern ((has_type x (TYPE%lib!OutputOperation. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./Response DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Read _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Read _0!)) (TYPE%lib!OutputOperation. DT&. DT&))))))
(assert (forall ((x lib!OutputOperation.)) (! (= (lib!OutputOperation./Read/0 x) (lib!OutputOperation./Read/?0 x)) :pattern ((lib!OutputOperation./Read/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. x)) (has_type x (TYPE%lib!OutputOperation. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./Response DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Write _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Write _0!)) (TYPE%lib!OutputOperation. DT&. DT&))))))
(assert (forall ((x lib!OutputOperation.)) (! (= (lib!OutputOperation./Write/0 x) (lib!OutputOperation./Write/?0 x)) :pattern ((lib!OutputOperation./Write/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. x)) (has_type x (TYPE%lib!OutputOperation. DT&. DT&))))))
(assert (forall ((x lib!AsyncLabel.)) (! (= x (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. x))) :pattern ((Poly%lib!AsyncLabel. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (= x (Poly%lib!AsyncLabel. (%Poly%lib!AsyncLabel. x)))) :pattern ((has_type x (TYPE%lib!AsyncLabel. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!AsyncLabel. lib!AsyncLabel./Internal) (TYPE%lib!AsyncLabel. DT&. DT&)) :pattern ((has_type (Poly%lib!AsyncLabel. lib!AsyncLabel./Internal) (TYPE%lib!AsyncLabel. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!InputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!InputOperation. _1!) (TYPE%lib!InputOperation. DT&. DT&))) (has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./Start _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./Start _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))))))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./Start/0 x) (lib!AsyncLabel./Start/?0 x)) :pattern ((lib!AsyncLabel./Start/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!AsyncLabel./Start/0 (%Poly%lib!AsyncLabel. x)))) :pattern ((lib!AsyncLabel./Start/0 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))))))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./Start/1 x) (lib!AsyncLabel./Start/?1 x)) :pattern ((lib!AsyncLabel./Start/1 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 (%Poly%lib!AsyncLabel. x))) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((lib!AsyncLabel./Start/1 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!OutputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!OutputOperation. _1!) (TYPE%lib!OutputOperation. DT&. DT&))) (has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./End _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./End _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))))))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./End/0 x) (lib!AsyncLabel./End/?0 x)) :pattern ((lib!AsyncLabel./End/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!AsyncLabel./End/0 (%Poly%lib!AsyncLabel. x)))) :pattern ((lib!AsyncLabel./End/0 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))))))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./End/1 x) (lib!AsyncLabel./End/?1 x)) :pattern ((lib!AsyncLabel./End/1 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 (%Poly%lib!AsyncLabel. x))) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((lib!AsyncLabel./End/1 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))))))
(define-fun is-lib!AsyncLabel./Start_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./Start) c))
(assert (forall ((x lib!AsyncLabel.)) (! (=> (is-lib!AsyncLabel./Start_ x) (height_lt (height (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 x))) (height (Poly%lib!AsyncLabel. x)))) :pattern ((height (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 x)))))))
(define-fun is-lib!AsyncLabel./End_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./End) c))
(assert (forall ((x lib!AsyncLabel.)) (! (=> (is-lib!AsyncLabel./End_ x) (height_lt (height (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 x))) (height (Poly%lib!AsyncLabel. x)))) :pattern ((height (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 x)))))))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= x (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. x))) :pattern ((Poly%lib!SimpleLogBehavior. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (= x (Poly%lib!SimpleLogBehavior. (%Poly%lib!SimpleLogBehavior. x)))) :pattern ((has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.simple_log.SimpleLog.State.) (_1! lib!AsyncLabel.) (_2! lib!SimpleLogBehavior.)) (! (=> (and (has_type (Poly%lib!spec.simple_log.SimpleLog.State. _0!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. _1!) (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. _2!) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) (has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped _0! _1! _2!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped _0! _1! _2!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))))))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= (lib!SimpleLogBehavior./Stepped/0 x) (lib!SimpleLogBehavior./Stepped/?0 x)) :pattern ((lib!SimpleLogBehavior./Stepped/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. x))) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. x)) (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))))))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= (lib!SimpleLogBehavior./Stepped/1 x) (lib!SimpleLogBehavior./Stepped/?1 x)) :pattern ((lib!SimpleLogBehavior./Stepped/1 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. x))) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. x)) (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))))))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= (lib!SimpleLogBehavior./Stepped/2 x) (lib!SimpleLogBehavior./Stepped/?2 x)) :pattern ((lib!SimpleLogBehavior./Stepped/2 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. x))) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. x)) (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.simple_log.SimpleLog.State.)) (! (=> (has_type (Poly%lib!spec.simple_log.SimpleLog.State. _0!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Inited _0!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Inited _0!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))))))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= (lib!SimpleLogBehavior./Inited/0 x) (lib!SimpleLogBehavior./Inited/?0 x)) :pattern ((lib!SimpleLogBehavior./Inited/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. x))) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. x)) (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))))))
(define-fun is-lib!SimpleLogBehavior./Stepped_ ((c lib!SimpleLogBehavior.)) Bool ((_ is lib!SimpleLogBehavior./Stepped) c))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (=> (is-lib!SimpleLogBehavior./Stepped_ x) (height_lt (height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Stepped/0 x))) (height (Poly%lib!SimpleLogBehavior. x)))) :pattern ((height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Stepped/0 x)))))))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (=> (is-lib!SimpleLogBehavior./Stepped_ x) (height_lt (height (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 x))) (height (Poly%lib!SimpleLogBehavior. x)))) :pattern ((height (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 x)))))))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (=> (is-lib!SimpleLogBehavior./Stepped_ x) (height_lt (height (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 x))) (height (Poly%lib!SimpleLogBehavior. x)))) :pattern ((height (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 x)))))))
(define-fun is-lib!SimpleLogBehavior./Inited_ ((c lib!SimpleLogBehavior.)) Bool ((_ is lib!SimpleLogBehavior./Inited) c))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (=> (is-lib!SimpleLogBehavior./Inited_ x) (height_lt (height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Inited/0 x))) (height (Poly%lib!SimpleLogBehavior. x)))) :pattern ((height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Inited/0 x)))))))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= x (%Poly%lib!AsynchronousSingletonBehavior. (Poly%lib!AsynchronousSingletonBehavior. x))) :pattern ((Poly%lib!AsynchronousSingletonBehavior. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (= x (Poly%lib!AsynchronousSingletonBehavior. (%Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!AsynchronousSingleton.State.) (_1! lib!AsyncLabel.) (_2! lib!AsynchronousSingletonBehavior.)) (! (=> (and (has_type (Poly%lib!AsynchronousSingleton.State. _0!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. _1!) (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. _2!) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped _0! _1! _2!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped _0! _1! _2!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))))))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= (lib!AsynchronousSingletonBehavior./Stepped/0 x) (lib!AsynchronousSingletonBehavior./Stepped/?0 x)) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. x))) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. x)) (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))))))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= (lib!AsynchronousSingletonBehavior./Stepped/1 x) (lib!AsynchronousSingletonBehavior./Stepped/?1 x)) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/1 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. x))) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. x)) (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))))))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= (lib!AsynchronousSingletonBehavior./Stepped/2 x) (lib!AsynchronousSingletonBehavior./Stepped/?2 x)) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/2 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. x))) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. x)) (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!AsynchronousSingleton.State.)) (! (=> (has_type (Poly%lib!AsynchronousSingleton.State. _0!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Inited _0!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Inited _0!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))))))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= (lib!AsynchronousSingletonBehavior./Inited/0 x) (lib!AsynchronousSingletonBehavior./Inited/?0 x)) :pattern ((lib!AsynchronousSingletonBehavior./Inited/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. x))) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. x)) (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))))))
(define-fun is-lib!AsynchronousSingletonBehavior./Stepped_ ((c lib!AsynchronousSingletonBehavior.)) Bool ((_ is lib!AsynchronousSingletonBehavior./Stepped) c))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (=> (is-lib!AsynchronousSingletonBehavior./Stepped_ x) (height_lt (height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Stepped/0 x))) (height (Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Stepped/0 x)))))))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (=> (is-lib!AsynchronousSingletonBehavior./Stepped_ x) (height_lt (height (Poly%lib!AsyncLabel. (lib!AsynchronousSingletonBehavior./Stepped/1 x))) (height (Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((height (Poly%lib!AsyncLabel. (lib!AsynchronousSingletonBehavior./Stepped/1 x)))))))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (=> (is-lib!AsynchronousSingletonBehavior./Stepped_ x) (height_lt (height (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 x))) (height (Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((height (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 x)))))))
(define-fun is-lib!AsynchronousSingletonBehavior./Inited_ ((c lib!AsynchronousSingletonBehavior.)) Bool ((_ is lib!AsynchronousSingletonBehavior./Inited) c))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (=> (is-lib!AsynchronousSingletonBehavior./Inited_ x) (height_lt (height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Inited/0 x))) (height (Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Inited/0 x)))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!invariant.InvariantPredicate. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!ThreadTokenT. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(declare-fun tr_bound%lib!NodeReplicatedT. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!UnboundedLogRefinesSimpleLog. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!SimpleLogRefinesAsynchronousSingleton. (Dcr Type Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (proj%%lib!NodeReplicatedT./Replica $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&) $) :pattern ((proj%%lib!NodeReplicatedT./Replica $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (proj%lib!NodeReplicatedT./Replica $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&) (TYPE%lib!exec.replica.Replica. DT&. DT&)) :pattern ((proj%lib!NodeReplicatedT./Replica $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (proj%%lib!NodeReplicatedT./TT $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&) $) :pattern ((proj%%lib!NodeReplicatedT./TT $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (proj%lib!NodeReplicatedT./TT $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&) (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) :pattern ((proj%lib!NodeReplicatedT./TT $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Err")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Err_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_len")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%1::id")
(declare-fun vstd!atomic.impl&%1.id.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%9::id")
(declare-fun vstd!atomic.impl&%9.id.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::well_formed")
(declare-fun vstd!atomic_ghost.impl&%1.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::constant")
(declare-fun vstd!atomic_ghost.impl&%1.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%21::well_formed")
(declare-fun vstd!atomic_ghost.impl&%21.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%21::constant")
(declare-fun vstd!atomic_ghost.impl&%21.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::cell::impl&%2::view")
(declare-fun vstd!cell.impl&%2.view.? (Dcr Type Poly) vstd!cell.PointsToData.)
(set-info :comment ";; Function-Decl vstd::cell::impl&%3::id")
(declare-fun vstd!cell.impl&%3.id.? (Dcr Type Poly) vstd!cell.CellId.)
(set-info :comment ";; Function-Decl vstd::invariant::impl&%0::constant")
(declare-fun vstd!invariant.impl&%0.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::next")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.next.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::init")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::invariant")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.invariant.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::inv_version")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::inv_update_resp_version")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::inv_readonly_req_version")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::replicas::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_reads::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_updates::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::combiner::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Instance::num_replicas")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::next_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::init")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::invariant")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_request_ids_finite")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_local_combiner_complete")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::combiner_local_versions_domains")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::combiner_replicas_domains")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_version_in_range")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_local_version_upper_bound_heads")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_readonly_requests_wf")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::combiner_states_wf")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_log_complete")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_local_updates")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_read_results")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_update_results")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_combiner_rids_distinct")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::replica_state")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::wf_node_id")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::wf_readstate")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::wf_combiner_for_node_id")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_local_updates_wf")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::read_results_match")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::update_results_match")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::current_local_version")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::combiner::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::unbounded_log_instance")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::cell_ids")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? (Dcr Type Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::buffer_size")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::num_replicas")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::FlatCombiner::clients::view")
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly) lib!spec.flat_combiner.FlatCombiner.clients_token_data.)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::FlatCombiner::Instance::num_threads")
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::wf2")
(declare-fun lib!exec.context.impl&%0.wf2.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::wf")
(declare-fun lib!exec.context.impl&%0.wf.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::thread_id_spec")
(declare-fun lib!exec.context.impl&%0.thread_id_spec.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::replica_id_spec")
(declare-fun lib!exec.context.impl&%0.replica_id_spec.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::context::Context::wf")
(declare-fun lib!exec.context.impl&%3.wf.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::BufferEntry::wf")
(declare-fun lib!exec.log.impl&%1.wf.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLog::wf")
(declare-fun lib!exec.log.impl&%6.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::wf")
(declare-fun lib!exec.replica.impl&%0.wf.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::id_spec")
(declare-fun lib!exec.replica.impl&%0.id_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::view")
(declare-fun lib!exec.replica.impl&%0.view.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicatedDataStructure::wf")
(declare-fun lib!exec.replica.impl&%1.wf.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::replica::Replica::wf")
(declare-fun lib!exec.replica.impl&%3.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::replica::Replica::spec_id")
(declare-fun lib!exec.replica.impl&%4.spec_id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::wf")
(declare-fun lib!exec.rwlock.impl&%3.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::inv")
(declare-fun lib!exec.rwlock.impl&%4.inv.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::max_threads")
(declare-fun lib!exec.rwlock.impl&%4.max_threads.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::utils::seq_unique")
(declare-fun lib!spec.utils.seq_unique.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::utils::seq_disjoint")
(declare-fun lib!spec.utils.seq_disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::utils::rangeincl")
(declare-fun lib!spec.utils.rangeincl.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::ReadReq::arrow_version")
(declare-fun lib!spec.simple_log.impl&%0.arrow_version.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_Init")
(declare-fun lib!spec.unbounded_log.impl&%0.is_Init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_Done")
(declare-fun lib!spec.unbounded_log.impl&%0.is_Done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Init")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Placed")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Placed.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Placed_idx")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Placed_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Applied")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Applied.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Done")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_Ready")
(declare-fun lib!spec.unbounded_log.impl&%5.is_Ready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%7.queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::get_fresh_nat")
(declare-fun lib!spec.unbounded_log.get_fresh_nat.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogContainsEntriesUpToHere")
(declare-fun lib!spec.unbounded_log.LogContainsEntriesUpToHere.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogNoEntriesFromHere")
(declare-fun lib!spec.unbounded_log.LogNoEntriesFromHere.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogRangeNoNodeId")
(declare-fun lib!spec.unbounded_log.LogRangeNoNodeId.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.unbounded_log.rec%LogRangeNoNodeId.? (Dcr Type Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogRangeMatchesQueue")
(declare-fun lib!spec.unbounded_log.LogRangeMatchesQueue.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::QueueRidsUpdateDone")
(declare-fun lib!spec.unbounded_log.QueueRidsUpdateDone.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(declare-fun lib!spec.unbounded_log.QueueRidsUpdatePlaced.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::compute_nrstate_at_version")
(declare-fun lib!spec.unbounded_log.compute_nrstate_at_version.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.unbounded_log.rec%compute_nrstate_at_version.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Idle")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Idle.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::ClientState::is_Idle")
(declare-fun lib!spec.flat_combiner.impl&%0.is_Idle.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::constants::MAX_REPLICAS")
(declare-fun lib!constants.MAX_REPLICAS.? () Int)
(set-info :comment ";; Function-Decl lib::constants::LOG_SIZE")
(declare-fun lib!constants.LOG_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::constants::MAX_THREADS_PER_REPLICA")
(declare-fun lib!constants.MAX_THREADS_PER_REPLICA.? () Int)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::next")
(declare-fun lib!AsynchronousSingleton.impl&%4.next.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::init")
(declare-fun lib!AsynchronousSingleton.impl&%4.init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::ThreadTokenT::wf")
(declare-fun lib!ThreadTokenT.wf.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!ThreadTokenT.wf%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::ThreadTokenT::replica_id_spec")
(declare-fun lib!ThreadTokenT.replica_id_spec.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!ThreadTokenT.replica_id_spec%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::view")
(declare-fun lib!Dispatch.view.? (Dcr Type Poly) Poly)
(declare-fun lib!Dispatch.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::init_spec")
(declare-fun lib!Dispatch.init_spec.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.init_spec%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_spec")
(declare-fun lib!Dispatch.dispatch_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_mut_spec")
(declare-fun lib!Dispatch.dispatch_mut_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_mut_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::NodeReplicatedT::wf")
(declare-fun lib!NodeReplicatedT.wf.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!NodeReplicatedT.wf%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::NodeReplicatedT::replicas")
(declare-fun lib!NodeReplicatedT.replicas.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!NodeReplicatedT.replicas%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::NodeReplicatedT::unbounded_log_instance")
(declare-fun lib!NodeReplicatedT.unbounded_log_instance.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!NodeReplicatedT.unbounded_log_instance%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::implements_NodeReplicated")
(declare-fun lib!implements_NodeReplicated.? (Dcr Type Dcr Type) Bool)
(set-info :comment ";; Function-Decl lib::is_readonly_ticket")
(declare-fun lib!is_readonly_ticket.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::is_readonly_stub")
(declare-fun lib!is_readonly_stub.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::is_update_ticket")
(declare-fun lib!is_update_ticket.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::is_update_stub")
(declare-fun lib!is_update_stub.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::add_ticket")
(declare-fun lib!add_ticket.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::consume_stub")
(declare-fun lib!consume_stub.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::UnboundedLogRefinesSimpleLog::interp")
(declare-fun lib!UnboundedLogRefinesSimpleLog.interp.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!UnboundedLogRefinesSimpleLog.interp%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::UnboundedLogRefinesSimpleLog::get_fresh_rid")
(declare-fun lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!UnboundedLogRefinesSimpleLog.get_fresh_rid%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::implements_UnboundedLogRefinesSimpleLog")
(declare-fun lib!implements_UnboundedLogRefinesSimpleLog.? (Dcr Type Dcr Type) Bool)
(set-info :comment ";; Function-Decl lib::InputOperation::is_Read")
(declare-fun lib!impl&%1.is_Read.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::InputOperation::get_Read_0")
(declare-fun lib!impl&%1.get_Read_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::InputOperation::is_Write")
(declare-fun lib!impl&%1.is_Write.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::InputOperation::get_Write_0")
(declare-fun lib!impl&%1.get_Write_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::InputOperation::arrow_Read_0")
(declare-fun lib!impl&%2.arrow_Read_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::InputOperation::arrow_Write_0")
(declare-fun lib!impl&%2.arrow_Write_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::OutputOperation::is_Read")
(declare-fun lib!impl&%3.is_Read.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::OutputOperation::get_Read_0")
(declare-fun lib!impl&%3.get_Read_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::OutputOperation::is_Write")
(declare-fun lib!impl&%3.is_Write.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::OutputOperation::get_Write_0")
(declare-fun lib!impl&%3.get_Write_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::OutputOperation::arrow_Read_0")
(declare-fun lib!impl&%4.arrow_Read_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::OutputOperation::arrow_Write_0")
(declare-fun lib!impl&%4.arrow_Write_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::AsyncLabel::is_Internal")
(declare-fun lib!impl&%5.is_Internal.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsyncLabel::is_Start")
(declare-fun lib!impl&%5.is_Start.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsyncLabel::get_Start_0")
(declare-fun lib!impl&%5.get_Start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::AsyncLabel::get_Start_1")
(declare-fun lib!impl&%5.get_Start_1.? (Dcr Type Poly) lib!InputOperation.)
(set-info :comment ";; Function-Decl lib::AsyncLabel::is_End")
(declare-fun lib!impl&%5.is_End.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsyncLabel::get_End_0")
(declare-fun lib!impl&%5.get_End_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::AsyncLabel::get_End_1")
(declare-fun lib!impl&%5.get_End_1.? (Dcr Type Poly) lib!OutputOperation.)
(set-info :comment ";; Function-Decl lib::AsyncLabel::arrow_Start_0")
(declare-fun lib!impl&%6.arrow_Start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::AsyncLabel::arrow_Start_1")
(declare-fun lib!impl&%6.arrow_Start_1.? (Dcr Type Poly) lib!InputOperation.)
(set-info :comment ";; Function-Decl lib::AsyncLabel::arrow_End_0")
(declare-fun lib!impl&%6.arrow_End_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::AsyncLabel::arrow_End_1")
(declare-fun lib!impl&%6.arrow_End_1.? (Dcr Type Poly) lib!OutputOperation.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::is_Stepped")
(declare-fun lib!impl&%7.is_Stepped.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_Stepped_0")
(declare-fun lib!impl&%7.get_Stepped_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_Stepped_1")
(declare-fun lib!impl&%7.get_Stepped_1.? (Dcr Type Poly) lib!AsyncLabel.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_Stepped_2")
(declare-fun lib!impl&%7.get_Stepped_2.? (Dcr Type Poly) lib!SimpleLogBehavior.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::is_Inited")
(declare-fun lib!impl&%7.is_Inited.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_Inited_0")
(declare-fun lib!impl&%7.get_Inited_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::arrow_1")
(declare-fun lib!impl&%8.arrow_1.? (Dcr Type Poly) lib!AsyncLabel.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::arrow_2")
(declare-fun lib!impl&%8.arrow_2.? (Dcr Type Poly) lib!SimpleLogBehavior.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::arrow_Stepped_0")
(declare-fun lib!impl&%8.arrow_Stepped_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::arrow_Stepped_1")
(declare-fun lib!impl&%8.arrow_Stepped_1.? (Dcr Type Poly) lib!AsyncLabel.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::arrow_Stepped_2")
(declare-fun lib!impl&%8.arrow_Stepped_2.? (Dcr Type Poly) lib!SimpleLogBehavior.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::arrow_Inited_0")
(declare-fun lib!impl&%8.arrow_Inited_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_last")
(declare-fun lib!impl&%9.get_last.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::wf")
(declare-fun lib!impl&%9.wf.? (Dcr Type Poly) Bool)
(declare-fun lib!impl&%9.rec%wf.? (Dcr Type Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::is_Stepped")
(declare-fun lib!impl&%10.is_Stepped.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::get_Stepped_0")
(declare-fun lib!impl&%10.get_Stepped_0.? (Dcr Type Poly) lib!AsynchronousSingleton.State.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::get_Stepped_1")
(declare-fun lib!impl&%10.get_Stepped_1.? (Dcr Type Poly) lib!AsyncLabel.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::get_Stepped_2")
(declare-fun lib!impl&%10.get_Stepped_2.? (Dcr Type Poly) lib!AsynchronousSingletonBehavior.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::is_Inited")
(declare-fun lib!impl&%10.is_Inited.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::get_Inited_0")
(declare-fun lib!impl&%10.get_Inited_0.? (Dcr Type Poly) lib!AsynchronousSingleton.State.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::arrow_1")
(declare-fun lib!impl&%11.arrow_1.? (Dcr Type Poly) lib!AsyncLabel.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::arrow_2")
(declare-fun lib!impl&%11.arrow_2.? (Dcr Type Poly) lib!AsynchronousSingletonBehavior.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::arrow_Stepped_0")
(declare-fun lib!impl&%11.arrow_Stepped_0.? (Dcr Type Poly) lib!AsynchronousSingleton.State.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::arrow_Stepped_1")
(declare-fun lib!impl&%11.arrow_Stepped_1.? (Dcr Type Poly) lib!AsyncLabel.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::arrow_Stepped_2")
(declare-fun lib!impl&%11.arrow_Stepped_2.? (Dcr Type Poly) lib!AsynchronousSingletonBehavior.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::arrow_Inited_0")
(declare-fun lib!impl&%11.arrow_Inited_0.? (Dcr Type Poly) lib!AsynchronousSingleton.State.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::get_last")
(declare-fun lib!impl&%12.get_last.? (Dcr Type Poly) lib!AsynchronousSingleton.State.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::wf")
(declare-fun lib!impl&%12.wf.? (Dcr Type Poly) Bool)
(declare-fun lib!impl&%12.rec%wf.? (Dcr Type Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::behavior_equiv")
(declare-fun lib!behavior_equiv.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!rec%behavior_equiv.? (Dcr Type Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::implements_SimpleLogRefinesAsynchronousSingleton")
(declare-fun lib!implements_SimpleLogRefinesAsynchronousSingleton.? (Dcr Type Dcr Type) Bool)
(set-info :comment ";; Function-Axioms lib::Dispatch::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!Dispatch.view.? Self%&. Self%& self!) (proj%lib!Dispatch./View Self%&. Self%&))) :pattern ((lib!Dispatch.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::Dispatch::init_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!Dispatch.init_spec.? Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&)) :pattern ((lib!Dispatch.init_spec.? Self%&. Self%&)))))
(set-info :comment ";; Function-Specs lib::Dispatch::init")
(declare-fun ens%lib!Dispatch.init. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (res! Poly)) (! (= (ens%lib!Dispatch.init. Self%&. Self%& res!) (and (has_type res! Self%&) (= (lib!Dispatch.view.? Self%&. Self%& res!) (lib!Dispatch.init_spec.? Self%&. Self%&)))) :pattern ((ens%lib!Dispatch.init. Self%&. Self%& res!)))))
(set-info :comment ";; Function-Specs lib::Dispatch::clone_write_op")
(declare-fun ens%lib!Dispatch.clone_write_op. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (op! Poly) (res! Poly)) (! (= (ens%lib!Dispatch.clone_write_op. Self%&. Self%& op! res!) (and (has_type res! (proj%lib!Dispatch./WriteOperation Self%&. Self%&)) (= op! res!))) :pattern ((ens%lib!Dispatch.clone_write_op. Self%&. Self%& op! res!)))))
(set-info :comment ";; Function-Specs lib::Dispatch::clone_response")
(declare-fun ens%lib!Dispatch.clone_response. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (op! Poly) (res! Poly)) (! (= (ens%lib!Dispatch.clone_response. Self%&. Self%& op! res!) (and (has_type res! (proj%lib!Dispatch./Response Self%&. Self%&)) (= op! res!))) :pattern ((ens%lib!Dispatch.clone_response. Self%&. Self%& op! res!)))))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./ReadOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_spec.? Self%&. Self%& ds! op!) (proj%lib!Dispatch./Response Self%&. Self%&))) :pattern ((lib!Dispatch.dispatch_spec.? Self%&. Self%& ds! op!)))))
(set-info :comment ";; Function-Specs lib::Dispatch::dispatch")
(declare-fun ens%lib!Dispatch.dispatch. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (op! Poly) (result! Poly)) (! (= (ens%lib!Dispatch.dispatch. Self%&. Self%& self! op! result!) (and (has_type result! (proj%lib!Dispatch./Response Self%&. Self%&)) (= (lib!Dispatch.dispatch_spec.? Self%&. Self%& (lib!Dispatch.view.? Self%&. Self%& self!) op!) result!))) :pattern ((ens%lib!Dispatch.dispatch. Self%&. Self%& self! op! result!)))))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_mut_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./WriteOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!) (TYPE%tuple%2. (proj%%lib!Dispatch./View Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&) (proj%%lib!Dispatch./Response Self%&. Self%&) (proj%lib!Dispatch./Response Self%&. Self%&)))) :pattern ((lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!)))))
(set-info :comment ";; Function-Specs lib::Dispatch::dispatch_mut")
(declare-fun ens%lib!Dispatch.dispatch_mut. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly) (op! Poly) (result! Poly)) (! (= (ens%lib!Dispatch.dispatch_mut. Self%&. Self%& pre%self! self! op! result!) (and (has_type result! (proj%lib!Dispatch./Response Self%&. Self%&)) (has_type self! Self%&) (= (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& (lib!Dispatch.view.? Self%&. Self%& pre%self!) op!)) (tuple%2./tuple%2 (lib!Dispatch.view.? Self%&. Self%& self!) result!)))) :pattern ((ens%lib!Dispatch.dispatch_mut. Self%&. Self%& pre%self! self! op! result!)))))
(set-info :comment ";; Function-Axioms lib::ThreadTokenT::wf")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (Replica&. Dcr) (Replica& Type) (self! Poly) (replica! Poly)) (! (=> (and (has_type self! Self%&) (has_type replica! Replica&)) (has_type (lib!ThreadTokenT.wf.? Self%&. Self%& DT&. DT& Replica&. Replica& self! replica!) BOOL)) :pattern ((lib!ThreadTokenT.wf.? Self%&. Self%& DT&. DT& Replica&. Replica& self! replica!)))))
(set-info :comment ";; Function-Axioms lib::ThreadTokenT::replica_id_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (Replica&. Dcr) (Replica& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!ThreadTokenT.replica_id_spec.? Self%&. Self%& DT&. DT& Replica&. Replica& self!) NAT)) :pattern ((lib!ThreadTokenT.replica_id_spec.? Self%&. Self%& DT&. DT& Replica&. Replica& self!)))))
(set-info :comment ";; Function-Axioms lib::NodeReplicatedT::wf")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!) BOOL)) :pattern ((lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::NodeReplicatedT::replicas")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!) (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::NodeReplicatedT::unbounded_log_instance")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::constants::MAX_REPLICAS")
(assert (fuel_bool_default fuel%lib!constants.MAX_REPLICAS.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_REPLICAS.) (= lib!constants.MAX_REPLICAS.? 16)))
(assert (uInv SZ lib!constants.MAX_REPLICAS.?))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)))))
(set-info :comment ";; Function-Specs lib::NodeReplicatedT::new")
(declare-fun req%lib!NodeReplicatedT.new. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (num_replicas! Poly) (chg_mem_affinity! Poly)) (! (= (req%lib!NodeReplicatedT.new. Self%&. Self%& DT&. DT& num_replicas! chg_mem_affinity!) (=> %%global_location_label%%0 (and (< 0 (%I num_replicas!)) (<= (%I num_replicas!) lib!constants.MAX_REPLICAS.?)))) :pattern ((req%lib!NodeReplicatedT.new. Self%&. Self%& DT&. DT& num_replicas! chg_mem_affinity!)))))
(declare-fun ens%lib!NodeReplicatedT.new. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (num_replicas! Poly) (chg_mem_affinity! Poly) (res! Poly)) (! (= (ens%lib!NodeReplicatedT.new. Self%&. Self%& DT&. DT& num_replicas! chg_mem_affinity! res!) (and (has_type res! Self%&) (and (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& res!)) (= (vstd!std_specs.vec.spec_vec_len.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& res!)) (%I num_replicas!))))) :pattern ((ens%lib!NodeReplicatedT.new. Self%&. Self%& DT&. DT& num_replicas! chg_mem_affinity! res!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_len")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!) NAT)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (%I (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs lib::NodeReplicatedT::register")
(declare-fun req%lib!NodeReplicatedT.register. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre%self! Poly) (replica_id! Poly)) (! (= (req%lib!NodeReplicatedT.register. Self%&. Self%& DT&. DT& pre%self! replica_id!) (=> %%global_location_label%%3 (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& pre%self!)))) :pattern ((req%lib!NodeReplicatedT.register. Self%&. Self%& DT&. DT& pre%self! replica_id!)))))
(declare-fun ens%lib!NodeReplicatedT.register. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre%self! Poly) (self! Poly) (replica_id! Poly) (result! Poly)) (! (= (ens%lib!NodeReplicatedT.register. Self%&. Self%& DT&. DT& pre%self! self! replica_id! result!) (and (has_type result! (TYPE%core!option.Option. (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&))) (has_type self! Self%&) (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!)) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. result!)))) (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. result!)) (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) replica_id!)))))) :pattern ((ens%lib!NodeReplicatedT.register. Self%&. Self%& DT&. DT& pre%self! self! replica_id! result!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Init")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Init.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Init_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_updates::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::is_update_ticket")
(assert (fuel_bool_default fuel%lib!is_update_ticket.))
(assert (=> (fuel_bool fuel%lib!is_update_ticket.) (forall ((DT&. Dcr) (DT& Type) (ticket! Poly) (op! Poly) (log! Poly)) (! (= (lib!is_update_ticket.? DT&. DT& ticket! op! log!) (and (and (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& ticket!))))))) (= (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& ticket!))))))) op!)) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& ticket!)))) log!))) :pattern ((lib!is_update_ticket.? DT&. DT& ticket! op! log!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Err")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Err_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!) E&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Done.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Done_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::is_update_stub")
(assert (fuel_bool_default fuel%lib!is_update_stub.))
(assert (=> (fuel_bool fuel%lib!is_update_stub.) (forall ((DT&. Dcr) (DT& Type) (stub! Poly) (rid! Poly) (result! Poly) (log! Poly)) (! (= (lib!is_update_stub.? DT&. DT& stub! rid! result! log!) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& stub!)))) log!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& stub!)))) (%I rid!))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& stub!)))))))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& stub!))))))) result!))) :pattern ((lib!is_update_stub.? DT&. DT& stub! rid! result! log!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Ok_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Err")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Err.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Err.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Err_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Err_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Err_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Err_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Err/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Specs lib::NodeReplicatedT::execute_mut")
(declare-fun req%lib!NodeReplicatedT.execute_mut. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly) (op! Poly) (tkn! Poly) (ticket! Poly)) (! (= (req%lib!NodeReplicatedT.execute_mut. Self%&. Self%& DT&. DT& self! op! tkn! ticket!) (and (=> %%global_location_label%%4 (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!))) (=> %%global_location_label%%5 (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn! (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) (lib!ThreadTokenT.replica_id_spec.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn!))))) (=> %%global_location_label%%6 (lib!is_update_ticket.? DT&. DT& ticket! op! (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!))))) :pattern ((req%lib!NodeReplicatedT.execute_mut. Self%&. Self%& DT&. DT& self! op! tkn! ticket!)))))
(declare-fun ens%lib!NodeReplicatedT.execute_mut. (Dcr Type Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly) (op! Poly) (tkn! Poly) (ticket! Poly) (result! Poly)) (! (= (ens%lib!NodeReplicatedT.execute_mut. Self%&. Self%& DT&. DT& self! op! tkn! ticket! result!) (and (has_type result! (TYPE%core!result.Result. $ (TYPE%tuple%3. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) $ (TYPE%tuple%2. (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)))) (and (lib!is_update_stub.? DT&. DT& (tuple%3./tuple%3/2 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (I (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& ticket!))))) (tuple%3./tuple%3/0 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!)) (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (tuple%3./tuple%3/1 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) (lib!ThreadTokenT.replica_id_spec.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn!)))))) (=> (%B (B (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)))) (and (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Err/0 (%Poly%core!result.Result. result!)))) ticket!) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Err/0 (%Poly%core!result.Result. result!)))) tkn!))))) :pattern ((ens%lib!NodeReplicatedT.execute_mut. Self%&. Self%& DT&. DT& self! op! tkn! ticket! result!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_Init")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_Init.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Init_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_Init.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_reads::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::is_readonly_ticket")
(assert (fuel_bool_default fuel%lib!is_readonly_ticket.))
(assert (=> (fuel_bool fuel%lib!is_readonly_ticket.) (forall ((DT&. Dcr) (DT& Type) (ticket! Poly) (op! Poly) (log! Poly)) (! (= (lib!is_readonly_ticket.? DT&. DT& ticket! op! log!) (and (and (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& ticket!))))))) (= (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& ticket!))))))) op!)) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& ticket!)))) log!))) :pattern ((lib!is_readonly_ticket.? DT&. DT& ticket! op! log!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_Done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_Done.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Done_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_Done.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::is_readonly_stub")
(assert (fuel_bool_default fuel%lib!is_readonly_stub.))
(assert (=> (fuel_bool fuel%lib!is_readonly_stub.) (forall ((DT&. Dcr) (DT& Type) (stub! Poly) (rid! Poly) (result! Poly) (log! Poly)) (! (= (lib!is_readonly_stub.? DT&. DT& stub! rid! result! log!) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& stub!)))) log!) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& stub!)))) (%I rid!))) (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& stub!)))))))) (= (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& stub!))))))) result!))) :pattern ((lib!is_readonly_stub.? DT&. DT& stub! rid! result! log!))))))
(set-info :comment ";; Function-Specs lib::NodeReplicatedT::execute")
(declare-fun req%lib!NodeReplicatedT.execute. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly) (op! Poly) (tkn! Poly) (ticket! Poly)) (! (= (req%lib!NodeReplicatedT.execute. Self%&. Self%& DT&. DT& self! op! tkn! ticket!) (and (=> %%global_location_label%%7 (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!))) (=> %%global_location_label%%8 (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn! (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) (lib!ThreadTokenT.replica_id_spec.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn!))))) (=> %%global_location_label%%9 (lib!is_readonly_ticket.? DT&. DT& ticket! op! (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!))))) :pattern ((req%lib!NodeReplicatedT.execute. Self%&. Self%& DT&. DT& self! op! tkn! ticket!)))))
(declare-fun ens%lib!NodeReplicatedT.execute. (Dcr Type Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly) (op! Poly) (tkn! Poly) (ticket! Poly) (result! Poly)) (! (= (ens%lib!NodeReplicatedT.execute. Self%&. Self%& DT&. DT& self! op! tkn! ticket! result!) (and (has_type result! (TYPE%core!result.Result. $ (TYPE%tuple%3. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) $ (TYPE%tuple%2. (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)))) (and (lib!is_readonly_stub.? DT&. DT& (tuple%3./tuple%3/2 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (I (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& ticket!))))) (tuple%3./tuple%3/0 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!)) (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (tuple%3./tuple%3/1 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) (lib!ThreadTokenT.replica_id_spec.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn!)))))) (=> (%B (B (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)))) (and (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Err/0 (%Poly%core!result.Result. result!)))) ticket!) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Err/0 (%Poly%core!result.Result. result!)))) tkn!))))) :pattern ((ens%lib!NodeReplicatedT.execute. Self%&. Self%& DT&. DT& self! op! tkn! ticket! result!)))))
(set-info :comment ";; Function-Axioms lib::UnboundedLogRefinesSimpleLog::interp")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (s! Poly)) (! (=> (has_type s! (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& s!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::UnboundedLogRefinesSimpleLog::get_fresh_rid")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly)) (! (=> (has_type pre! (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? Self%&. Self%& DT&. DT& pre!) NAT)) :pattern ((lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? Self%&. Self%& DT&. DT& pre!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_request_ids_finite")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? DT&. DT& self!) (and (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_local_combiner_complete")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (= (and (<= 0 (%I node_id$)) (< (%I node_id$) (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::combiner_local_versions_domains")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? DT&. DT& self!) (forall ((k$ Poly)) (! (=> (has_type k$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$)) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::combiner_replicas_domains")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? DT&. DT& self!) (forall ((k$ Poly)) (! (=> (has_type k$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) k$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_version_in_range")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? DT&. DT& self!) (<= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_local_version_upper_bound_heads")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$) (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id$)) (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::wf_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! node_id!) (and (and (and (and (<= 0 (%I node_id!)) (< (%I node_id!) (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! node_id!))))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::current_local_version")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. DT&. DT& self! node_id!) (=> %%global_location_label%%12 (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id!) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id!)))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. DT&. DT& self! node_id!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::current_local_version")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.))
(define-fun is-lib!spec.unbounded_log.CombinerState./Ready_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Ready) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./Placed_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Placed) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./LoadedLocalVersion) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./Loop_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Loop) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Ready_ tmp%%$) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) lversion$) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) lversion$) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) tail$))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (=> (and (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type node_id! NAT)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::wf_readstate")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./VersionUpperBound) c))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./ReadyToRead) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (rs! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.? DT&. DT& self! rs!) (ite (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) true) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) (ite (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (and (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! (I node_id$)) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! (I node_id$))))))) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((ret$ (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (and (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! (I node_id$)) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! (I node_id$)))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.? DT&. DT& self! rs!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_readonly_requests_wf")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.? DT&. DT& self! (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeNoNodeId")
(declare-fun req%lib!spec.unbounded_log.LogRangeNoNodeId. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeNoNodeId. DT&. DT& log! start! end! node_id!) (=> %%global_location_label%%13 (<= (%I start!) (%I end!)))) :pattern ((req%lib!spec.unbounded_log.LogRangeNoNodeId. DT&. DT& log! start! end! node_id!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogRangeNoNodeId")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogRangeNoNodeId.))
(declare-const fuel_nat%lib!spec.unbounded_log.LogRangeNoNodeId. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! fuel%) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! zero)) :pattern ((lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! fuel%)))))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type start! NAT) (has_type end! NAT) (has_type node_id! NAT) (<= (%I start!) (%I end!))) (= (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel%)) (=> (< (%I start!) (%I end!)) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) start!) (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! start!))) (%I node_id!)))) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! (I (nClip (Add (%I start!) 1))) end! node_id! fuel%))))) :pattern ((lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogRangeNoNodeId.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type start! NAT) (has_type end! NAT) (has_type node_id! NAT) (<= (%I start!) (%I end!))) (= (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! start! end! node_id!) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel_nat%lib!spec.unbounded_log.LogRangeNoNodeId.)))) :pattern ((lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! start! end! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogContainsEntriesUpToHere")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (end! Poly)) (! (= (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! end!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I end!))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$))))) :pattern ((lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! end!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Placed")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Placed.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Placed_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Placed) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Placed.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Placed.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Placed.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Placed_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue. (Dcr Type Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!) (and (=> %%global_location_label%%14 (and (<= 0 (%I queueIndex!)) (<= (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!)))) (=> %%global_location_label%%15 (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! logIndexUpper!)) (=> %%global_location_label%%16 (<= (%I logIndexLower!) (%I logIndexUpper!))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogRangeMatchesQueue")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogRangeMatchesQueue.))
(declare-const fuel_nat%lib!spec.unbounded_log.LogRangeMatchesQueue. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! fuel%) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! zero)) :pattern ((lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! fuel%)))))
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type queue! (TYPE%vstd!seq.Seq. $ NAT)) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type queueIndex! NAT) (has_type logIndexLower! NAT) (has_type logIndexUpper! NAT) (has_type nodeId! NAT) (has_type updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (<= (%I logIndexLower!) (%I logIndexUpper!))) (= (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel%)) (and (=> (= logIndexLower! logIndexUpper!) (= (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!))) (=> (< (%I logIndexLower!) (%I logIndexUpper!)) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) logIndexLower!) (=> (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! logIndexLower!))) (%I nodeId!)) (and (and (and (and (< (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) (vstd!seq.Seq.index.? $ NAT queue! queueIndex!))) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! (vstd!seq.Seq.index.? $ NAT queue! queueIndex!))))) (= (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! (vstd!seq.Seq.index.? $ NAT queue! queueIndex!)))) (%I logIndexLower!))) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! (I (nClip (Add (%I queueIndex!) 1))) (I (nClip (Add (%I logIndexLower!) 1))) logIndexUpper! nodeId! updates! fuel%)))) (=> (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! logIndexLower!))) (%I nodeId!))) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! (I (nClip (Add (%I logIndexLower!) 1))) logIndexUpper! nodeId! updates! fuel%))))))) :pattern ((lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogRangeMatchesQueue.) (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type queue! (TYPE%vstd!seq.Seq. $ NAT)) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type queueIndex! NAT) (has_type logIndexLower! NAT) (has_type logIndexUpper! NAT) (has_type nodeId! NAT) (has_type updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (<= (%I logIndexLower!) (%I logIndexUpper!))) (= (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel_nat%lib!spec.unbounded_log.LogRangeMatchesQueue.)))) :pattern ((lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%17 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(declare-fun req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. DT&. DT& queued_ops! localUpdates! bound!) (=> %%global_location_label%%18 (and (<= 0 (%I bound!)) (<= (%I bound!) (vstd!seq.Seq.len.? $ NAT queued_ops!))))) :pattern ((req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. DT&. DT& queued_ops! localUpdates! bound!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced.) (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& queued_ops! localUpdates! bound!) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= (%I bound!) (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ NAT queued_ops!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates!) (vstd!seq.Seq.index.? $ NAT queued_ops! j$)) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$))))))) :pattern ((vstd!seq.Seq.index.? $ NAT queued_ops! j$))))) :pattern ((lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& queued_ops! localUpdates! bound!))))))
(set-info :comment ";; Function-Axioms lib::spec::utils::seq_unique")
(assert (fuel_bool_default fuel%lib!spec.utils.seq_unique.))
(assert (=> (fuel_bool fuel%lib!spec.utils.seq_unique.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (lib!spec.utils.seq_unique.? A&. A& seq!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& seq!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& seq!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& seq! i$) (vstd!seq.Seq.index.? A&. A& seq! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& seq! i$) (vstd!seq.Seq.index.? A&. A& seq! j$))))) :pattern ((lib!spec.utils.seq_unique.? A&. A& seq!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Applied")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Applied.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Applied_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Applied) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Applied.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Applied.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Applied.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::QueueRidsUpdateDone")
(declare-fun req%lib!spec.unbounded_log.QueueRidsUpdateDone. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (req%lib!spec.unbounded_log.QueueRidsUpdateDone. DT&. DT& queued_ops! localUpdates! bound!) (=> %%global_location_label%%19 (and (<= 0 (%I bound!)) (<= (%I bound!) (vstd!seq.Seq.len.? $ NAT queued_ops!))))) :pattern ((req%lib!spec.unbounded_log.QueueRidsUpdateDone. DT&. DT& queued_ops! localUpdates! bound!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::QueueRidsUpdateDone")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.QueueRidsUpdateDone.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.QueueRidsUpdateDone.) (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& queued_ops! localUpdates! bound!) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (%I bound!))) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates!) (vstd!seq.Seq.index.? $ NAT queued_ops! j$)) (or (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$)))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$)))))))) :pattern ((vstd!seq.Seq.index.? $ NAT queued_ops! j$))))) :pattern ((lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& queued_ops! localUpdates! bound!))))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::wf_combiner_for_node_id")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. DT&. DT& self! node_id!) (=> %%global_location_label%%20 (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! node_id!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. DT&. DT& self! node_id!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::wf_combiner_for_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.? DT&. DT& self! node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Ready_ tmp%%$) (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (and (and (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I 0) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id! (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I 0))) (lib!spec.utils.seq_unique.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (and (and (and (= lversion$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!))) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I 0) (I lversion$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id! (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I 0))) (lib!spec.utils.seq_unique.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (and (and (and (and (and (and (and (and (and (<= tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (>= lversion$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)))) (<= lversion$ tail$)) (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I lversion$))) (and (<= 0 idx$) (<= idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$) (I lversion$) (I tail$) node_id! (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I tail$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$))) (lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$))) (lib!spec.utils.seq_unique.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))))) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (and (and (and (and (and (<= tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) tail$)) (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I tail$))) (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I tail$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) (lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))) (lib!spec.utils.seq_unique.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.? DT&. DT& self! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::combiner_states_wf")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.? DT&. DT& self! node_id$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogNoEntriesFromHere")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogNoEntriesFromHere.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogNoEntriesFromHere.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly)) (! (= (lib!spec.unbounded_log.LogNoEntriesFromHere.? DT&. DT& log! start!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (<= (%I start!) (%I i$)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$))))) :pattern ((lib!spec.unbounded_log.LogNoEntriesFromHere.? DT&. DT& log! start!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_log_complete")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? DT&. DT& self!) (and (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (lib!spec.unbounded_log.LogNoEntriesFromHere.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_local_updates_wf")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (update! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.? DT&. DT& self! update!) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((op$ (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) true) (ite (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (I idx$)) (< idx$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (I idx$)) (< idx$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))))) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (I idx$)) (< idx$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.? DT&. DT& self! update!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_local_updates")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.? DT&. DT& self! (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::utils::rangeincl")
(assert (fuel_bool_default fuel%lib!spec.utils.rangeincl.))
(assert (=> (fuel_bool fuel%lib!spec.utils.rangeincl.) (forall ((low! Poly) (mid! Poly) (high! Poly)) (! (= (lib!spec.utils.rangeincl.? low! mid! high!) (and (<= (%I low!) (%I mid!)) (<= (%I mid!) (%I high!)))) :pattern ((lib!spec.utils.rangeincl.? low! mid! high!))))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::compute_nrstate_at_version")
(declare-fun req%lib!spec.unbounded_log.compute_nrstate_at_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (= (req%lib!spec.unbounded_log.compute_nrstate_at_version. DT&. DT& log! version!) (=> %%global_location_label%%21 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I version!))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)))))) :pattern ((req%lib!spec.unbounded_log.compute_nrstate_at_version. DT&. DT& log! version!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::compute_nrstate_at_version")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.compute_nrstate_at_version.))
(declare-const fuel_nat%lib!spec.unbounded_log.compute_nrstate_at_version. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%) (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! zero)) :pattern ((lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%)))))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (= (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%)) (ite (= (%I version!) 0) (lib!Dispatch.init_spec.? DT&. DT&) (let ((ver$ (nClip (Sub (%I version!) 1)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! (I ver$) fuel%) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I ver$))))))))))) :pattern ((lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.compute_nrstate_at_version.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (= (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!) (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel_nat%lib!spec.unbounded_log.compute_nrstate_at_version.)))) :pattern ((lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (has_type (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::read_results_match")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (read! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.? DT&. DT& self! read!) (=> (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. read!)) (let ((ret$ (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. read!)))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. read!)))) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. read!)))) (exists ((v$ Poly)) (! (and (has_type v$ NAT) (and (lib!spec.utils.rangeincl.? (I version_upper_bound$) v$ (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (= ret$ (lib!Dispatch.dispatch_spec.? DT&. DT& (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) v$) op$)))) :pattern ((lib!spec.utils.rangeincl.? (I version_upper_bound$) v$ (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.? DT&. DT& self! read!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_read_results")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.? DT&. DT& self! (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::update_results_match")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (update! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.? DT&. DT& self! update!) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (= ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$)) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$)))))))))) (=> (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (= ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$)) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.? DT&. DT& self! update!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_update_results")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.? DT&. DT& self! (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::utils::seq_disjoint")
(assert (fuel_bool_default fuel%lib!spec.utils.seq_disjoint.))
(assert (=> (fuel_bool fuel%lib!spec.utils.seq_disjoint.) (forall ((A&. Dcr) (A& Type) (s! Poly) (t! Poly)) (! (= (lib!spec.utils.seq_disjoint.? A&. A& s! t!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& t!)))) (not (= (vstd!seq.Seq.index.? A&. A& s! i$) (vstd!seq.Seq.index.? A&. A& t! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& s! i$) (vstd!seq.Seq.index.? A&. A& t! j$))))) :pattern ((lib!spec.utils.seq_disjoint.? A&. A& s! t!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%7.queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%7.queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%7.queued_ops.? self!) (ite (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.empty.? $ NAT)) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$)))))) :pattern ((lib!spec.unbounded_log.impl&%7.queued_ops.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_combiner_rids_distinct")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? DT&. DT& self!) (forall ((node_id1$ Poly) (node_id2$ Poly)) (! (=> (and (has_type node_id1$ NAT) (has_type node_id2$ NAT)) (=> (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id2$)) (not (= node_id1$ node_id2$))) (lib!spec.utils.seq_disjoint.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id1$))) (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id2$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id2$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::replica_state")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id$) (= (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) node_id$) (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::invariant")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::UnboundedLogRefinesSimpleLog::fresh_rid_is_ok")
(declare-fun req%lib!UnboundedLogRefinesSimpleLog.fresh_rid_is_ok. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly)) (! (= (req%lib!UnboundedLogRefinesSimpleLog.fresh_rid_is_ok. Self%&. Self%& DT&. DT& pre!) (=> %%global_location_label%%22 (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& pre!))) :pattern ((req%lib!UnboundedLogRefinesSimpleLog.fresh_rid_is_ok. Self%&. Self%& DT&. DT& pre!)))))
(declare-fun ens%lib!UnboundedLogRefinesSimpleLog.fresh_rid_is_ok. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly)) (! (= (ens%lib!UnboundedLogRefinesSimpleLog.fresh_rid_is_ok. Self%&. Self%& DT&. DT& pre!) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) (lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? Self%&. Self%& DT&. DT& pre!))) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) (lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? Self%&. Self%& DT&. DT& pre!))))) :pattern ((ens%lib!UnboundedLogRefinesSimpleLog.fresh_rid_is_ok. Self%&. Self%& DT&. DT& pre!)))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::inv_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? DT&. DT& self!) (let ((tmp%%$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. self!))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::inv_update_resp_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. self!)))) rid$) (< (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. self!))) rid$))) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. self!)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. self!)))) rid$))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::ReadReq::arrow_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.impl&%0.arrow_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.impl&%0.arrow_version.) (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (= (lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!) (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. self!))) :pattern ((lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!))))))
(assert (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (<= 0 (lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!))) :pattern ((lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::inv_readonly_req_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. self!))) rid$) (is-lib!spec.simple_log.ReadReq./Req_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. self!)) rid$)))) (<= (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. self!)) rid$))) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. self!))) rid$))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::invariant")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.invariant.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.invariant.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& self!) (and (and (lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? DT&. DT& self!)) (lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::UnboundedLogRefinesSimpleLog::refinement_inv")
(declare-fun req%lib!UnboundedLogRefinesSimpleLog.refinement_inv. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (vars! Poly)) (! (= (req%lib!UnboundedLogRefinesSimpleLog.refinement_inv. Self%&. Self%& DT&. DT& vars!) (=> %%global_location_label%%23 (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& vars!))) :pattern ((req%lib!UnboundedLogRefinesSimpleLog.refinement_inv. Self%&. Self%& DT&. DT& vars!)))))
(declare-fun ens%lib!UnboundedLogRefinesSimpleLog.refinement_inv. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (vars! Poly)) (! (= (ens%lib!UnboundedLogRefinesSimpleLog.refinement_inv. Self%&. Self%& DT&. DT& vars!) (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& vars!))) :pattern ((ens%lib!UnboundedLogRefinesSimpleLog.refinement_inv. Self%&. Self%& DT&. DT& vars!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Specs lib::UnboundedLogRefinesSimpleLog::refinement_init")
(declare-fun req%lib!UnboundedLogRefinesSimpleLog.refinement_init. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (post! Poly)) (! (= (req%lib!UnboundedLogRefinesSimpleLog.refinement_init. Self%&. Self%& DT&. DT& post!) (and (=> %%global_location_label%%24 (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& post!)) (=> %%global_location_label%%25 (lib!spec.unbounded_log.UnboundedLog.impl&%13.init.? DT&. DT& post!)))) :pattern ((req%lib!UnboundedLogRefinesSimpleLog.refinement_init. Self%&. Self%& DT&. DT& post!)))))
(declare-fun ens%lib!UnboundedLogRefinesSimpleLog.refinement_init. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (post! Poly)) (! (= (ens%lib!UnboundedLogRefinesSimpleLog.refinement_init. Self%&. Self%& DT&. DT& post!) (lib!spec.simple_log.SimpleLog.impl&%4.init.? DT&. DT& (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& post!))) :pattern ((ens%lib!UnboundedLogRefinesSimpleLog.refinement_init. Self%&. Self%& DT&. DT& post!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::is_Internal")
(assert (fuel_bool_default fuel%lib!impl&%5.is_Internal.))
(define-fun is-lib!AsyncLabel./Internal_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./Internal) c))
(assert (=> (fuel_bool fuel%lib!impl&%5.is_Internal.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.is_Internal.? DT&. DT& self!) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.is_Internal.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::UnboundedLogRefinesSimpleLog::refinement_next")
(declare-fun req%lib!UnboundedLogRefinesSimpleLog.refinement_next. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly)) (! (= (req%lib!UnboundedLogRefinesSimpleLog.refinement_next. Self%&. Self%& DT&. DT& pre! post!) (and (=> %%global_location_label%%26 (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& pre!)) (=> %%global_location_label%%27 (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& post!)) (=> %%global_location_label%%28 (lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong.? DT&. DT& pre! post!)))) :pattern ((req%lib!UnboundedLogRefinesSimpleLog.refinement_next. Self%&. Self%& DT&. DT& pre! post!)))))
(declare-fun ens%lib!UnboundedLogRefinesSimpleLog.refinement_next. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly)) (! (= (ens%lib!UnboundedLogRefinesSimpleLog.refinement_next. Self%&. Self%& DT&. DT& pre! post!) (lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& pre!) (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& post!) (Poly%lib!AsyncLabel. lib!AsyncLabel./Internal))) :pattern ((ens%lib!UnboundedLogRefinesSimpleLog.refinement_next. Self%&. Self%& DT&. DT& pre! post!)))))
(set-info :comment ";; Function-Axioms lib::add_ticket")
(assert (fuel_bool_default fuel%lib!add_ticket.))
(define-fun is-lib!InputOperation./Read_ ((c lib!InputOperation.)) Bool ((_ is lib!InputOperation./Read) c))
(assert (=> (fuel_bool fuel%lib!add_ticket.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (input! Poly) (rid! Poly)) (! (= (lib!add_ticket.? DT&. DT& pre! post! input! rid!) (and (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) rid!)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) rid!))) (ite (is-lib!InputOperation./Read_ (%Poly%lib!InputOperation. input!)) (let ((read_op$ (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. input!)))) (= (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (lib!spec.unbounded_log.UnboundedLog.State./State (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init read_op$))) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))) (let ((write_op$ (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. input!)))) (= (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (lib!spec.unbounded_log.UnboundedLog.State./State (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid! (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init write_op$))) (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))))) :pattern ((lib!add_ticket.? DT&. DT& pre! post! input! rid!))))))
(set-info :comment ";; Function-Specs lib::UnboundedLogRefinesSimpleLog::refinement_add_ticket")
(declare-fun req%lib!UnboundedLogRefinesSimpleLog.refinement_add_ticket. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (input! Poly)) (! (= (req%lib!UnboundedLogRefinesSimpleLog.refinement_add_ticket. Self%&. Self%& DT&. DT& pre! post! input!) (and (=> %%global_location_label%%29 (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& pre!)) (=> %%global_location_label%%30 (lib!add_ticket.? DT&. DT& pre! post! input! (lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? Self%&. Self%& DT&. DT& pre!))))) :pattern ((req%lib!UnboundedLogRefinesSimpleLog.refinement_add_ticket. Self%&. Self%& DT&. DT& pre! post! input!)))))
(declare-fun ens%lib!UnboundedLogRefinesSimpleLog.refinement_add_ticket. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (input! Poly)) (! (= (ens%lib!UnboundedLogRefinesSimpleLog.refinement_add_ticket. Self%&. Self%& DT&. DT& pre! post! input!) (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& post!) (lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& pre!) (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& post!) (Poly%lib!AsyncLabel. (lib!AsyncLabel./Start (%I (lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? Self%&. Self%& DT&. DT& pre!)) (%Poly%lib!InputOperation. input!)))))) :pattern ((ens%lib!UnboundedLogRefinesSimpleLog.refinement_add_ticket. Self%&. Self%& DT&. DT& pre! post! input!)))))
(set-info :comment ";; Function-Axioms lib::consume_stub")
(assert (fuel_bool_default fuel%lib!consume_stub.))
(define-fun is-lib!OutputOperation./Read_ ((c lib!OutputOperation.)) Bool ((_ is lib!OutputOperation./Read) c))
(assert (=> (fuel_bool fuel%lib!consume_stub.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (output! Poly) (rid! Poly)) (! (= (lib!consume_stub.? DT&. DT& pre! post! output! rid!) (ite (is-lib!OutputOperation./Read_ (%Poly%lib!OutputOperation. output!)) (let ((response$ (lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. output!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) rid!) (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!)))) (= (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!))) response$)) (= (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (lib!spec.unbounded_log.UnboundedLog.State./State (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))) (let ((response$ (lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. output!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) rid!) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!)))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!))) response$)) (= (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (lib!spec.unbounded_log.UnboundedLog.State./State (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!) (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))))) :pattern ((lib!consume_stub.? DT&. DT& pre! post! output! rid!))))))
(set-info :comment ";; Function-Specs lib::UnboundedLogRefinesSimpleLog::refinement_consume_stub")
(declare-fun req%lib!UnboundedLogRefinesSimpleLog.refinement_consume_stub. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (output! Poly) (rid! Poly)) (! (= (req%lib!UnboundedLogRefinesSimpleLog.refinement_consume_stub. Self%&. Self%& DT&. DT& pre! post! output! rid!) (and (=> %%global_location_label%%31 (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& pre!)) (=> %%global_location_label%%32 (lib!consume_stub.? DT&. DT& pre! post! output! rid!)))) :pattern ((req%lib!UnboundedLogRefinesSimpleLog.refinement_consume_stub. Self%&. Self%& DT&. DT& pre! post! output! rid!)))))
(declare-fun ens%lib!UnboundedLogRefinesSimpleLog.refinement_consume_stub. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (output! Poly) (rid! Poly)) (! (= (ens%lib!UnboundedLogRefinesSimpleLog.refinement_consume_stub. Self%&. Self%& DT&. DT& pre! post! output! rid!) (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& post!) (lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& pre!) (lib!UnboundedLogRefinesSimpleLog.interp.? Self%&. Self%& DT&. DT& post!) (Poly%lib!AsyncLabel. (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. output!)))))) :pattern ((ens%lib!UnboundedLogRefinesSimpleLog.refinement_consume_stub. Self%&. Self%& DT&. DT& pre! post! output! rid!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_last")
(assert (fuel_bool_default fuel%lib!impl&%9.get_last.))
(assert (=> (fuel_bool fuel%lib!impl&%9.get_last.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%9.get_last.? DT&. DT& self!) (ite (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. self!)) (let ((post$ (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. self!)))) (let ((op$ (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. self!)))) (let ((tail$ (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. self!)))) post$))) (let ((post$ (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. self!)))) post$))) :pattern ((lib!impl&%9.get_last.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!impl&%9.get_last.? DT&. DT& self!)))))
(set-info :comment ";; Spec-Termination lib::SimpleLogBehavior::wf")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/lib.rs:631:5: 631:38 (#0)")
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::wf")
(assert (fuel_bool_default fuel%lib!impl&%9.wf.))
(declare-const fuel_nat%lib!impl&%9.wf. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (fuel% Fuel)) (! (= (lib!impl&%9.rec%wf.? DT&. DT& self! fuel%) (lib!impl&%9.rec%wf.? DT&. DT& self! zero)) :pattern ((lib!impl&%9.rec%wf.? DT&. DT& self! fuel%)))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&))) (= (lib!impl&%9.rec%wf.? DT&. DT& self! (succ fuel%)) (ite (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. self!)) (let ((post$ (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. self!)))) (let ((op$ (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. self!)))) (let ((tail$ (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. self!)))) (and (lib!impl&%9.rec%wf.? DT&. DT& (Poly%lib!SimpleLogBehavior. tail$) fuel%) (lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. tail$))) (Poly%lib!spec.simple_log.SimpleLog.State. post$) (Poly%lib!AsyncLabel. op$)))))) (let ((post$ (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. self!)))) (lib!spec.simple_log.SimpleLog.impl&%4.init.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post$)))))) :pattern ((lib!impl&%9.rec%wf.? DT&. DT& self! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl&%9.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&))) (= (lib!impl&%9.wf.? DT&. DT& self!) (lib!impl&%9.rec%wf.? DT&. DT& self! (succ fuel_nat%lib!impl&%9.wf.)))) :pattern ((lib!impl&%9.wf.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::get_last")
(assert (fuel_bool_default fuel%lib!impl&%12.get_last.))
(assert (=> (fuel_bool fuel%lib!impl&%12.get_last.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%12.get_last.? DT&. DT& self!) (ite (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. self!)) (let ((post$ (lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (let ((op$ (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (let ((tail$ (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) post$))) (let ((post$ (lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) post$))) :pattern ((lib!impl&%12.get_last.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!impl&%12.get_last.? DT&. DT& self!)))))
(set-info :comment ";; Spec-Termination lib::AsynchronousSingletonBehavior::wf")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/lib.rs:663:5: 663:38 (#0)")
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::wf")
(assert (fuel_bool_default fuel%lib!impl&%12.wf.))
(declare-const fuel_nat%lib!impl&%12.wf. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (fuel% Fuel)) (! (= (lib!impl&%12.rec%wf.? DT&. DT& self! fuel%) (lib!impl&%12.rec%wf.? DT&. DT& self! zero)) :pattern ((lib!impl&%12.rec%wf.? DT&. DT& self! fuel%)))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (= (lib!impl&%12.rec%wf.? DT&. DT& self! (succ fuel%)) (ite (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. self!)) (let ((post$ (lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (let ((op$ (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (let ((tail$ (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (and (lib!impl&%12.rec%wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. tail$) fuel%) (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. tail$))) (Poly%lib!AsynchronousSingleton.State. post$) (Poly%lib!AsyncLabel. op$)))))) (let ((post$ (lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (lib!AsynchronousSingleton.impl&%4.init.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. post$)))))) :pattern ((lib!impl&%12.rec%wf.? DT&. DT& self! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl&%12.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (= (lib!impl&%12.wf.? DT&. DT& self!) (lib!impl&%12.rec%wf.? DT&. DT& self! (succ fuel_nat%lib!impl&%12.wf.)))) :pattern ((lib!impl&%12.wf.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::is_Inited")
(assert (fuel_bool_default fuel%lib!impl&%7.is_Inited.))
(assert (=> (fuel_bool fuel%lib!impl&%7.is_Inited.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.is_Inited.? DT&. DT& self!) (is-lib!SimpleLogBehavior./Inited_ (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.is_Inited.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::is_Inited")
(assert (fuel_bool_default fuel%lib!impl&%10.is_Inited.))
(assert (=> (fuel_bool fuel%lib!impl&%10.is_Inited.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.is_Inited.? DT&. DT& self!) (is-lib!AsynchronousSingletonBehavior./Inited_ (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.is_Inited.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::is_Stepped")
(assert (fuel_bool_default fuel%lib!impl&%7.is_Stepped.))
(assert (=> (fuel_bool fuel%lib!impl&%7.is_Stepped.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.is_Stepped.? DT&. DT& self!) (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.is_Stepped.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_Stepped_1")
(assert (fuel_bool_default fuel%lib!impl&%7.get_Stepped_1.))
(assert (=> (fuel_bool fuel%lib!impl&%7.get_Stepped_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.get_Stepped_1.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.get_Stepped_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!impl&%7.get_Stepped_1.? DT&. DT& self!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!impl&%7.get_Stepped_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_Stepped_2")
(assert (fuel_bool_default fuel%lib!impl&%7.get_Stepped_2.))
(assert (=> (fuel_bool fuel%lib!impl&%7.get_Stepped_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.get_Stepped_2.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.get_Stepped_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. (lib!impl&%7.get_Stepped_2.? DT&. DT& self!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((lib!impl&%7.get_Stepped_2.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::is_Stepped")
(assert (fuel_bool_default fuel%lib!impl&%10.is_Stepped.))
(assert (=> (fuel_bool fuel%lib!impl&%10.is_Stepped.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.is_Stepped.? DT&. DT& self!) (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.is_Stepped.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::get_Stepped_1")
(assert (fuel_bool_default fuel%lib!impl&%10.get_Stepped_1.))
(assert (=> (fuel_bool fuel%lib!impl&%10.get_Stepped_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.get_Stepped_1.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.get_Stepped_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!impl&%10.get_Stepped_1.? DT&. DT& self!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!impl&%10.get_Stepped_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::get_Stepped_2")
(assert (fuel_bool_default fuel%lib!impl&%10.get_Stepped_2.))
(assert (=> (fuel_bool fuel%lib!impl&%10.get_Stepped_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.get_Stepped_2.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.get_Stepped_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!impl&%10.get_Stepped_2.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((lib!impl&%10.get_Stepped_2.? DT&. DT& self!)))))
(set-info :comment ";; Spec-Termination lib::behavior_equiv")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/lib.rs:678:1: 681:10 (#0)")
(set-info :comment ";; Function-Axioms lib::behavior_equiv")
(assert (fuel_bool_default fuel%lib!behavior_equiv.))
(declare-const fuel_nat%lib!behavior_equiv. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (fuel% Fuel)) (! (= (lib!rec%behavior_equiv.? DT&. DT& a! b! fuel%) (lib!rec%behavior_equiv.? DT&. DT& a! b! zero)) :pattern ((lib!rec%behavior_equiv.? DT&. DT& a! b! fuel%)))))
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type a! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type b! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (= (lib!rec%behavior_equiv.? DT&. DT& a! b! (succ fuel%)) (or (or (or (and (is-lib!SimpleLogBehavior./Inited_ (%Poly%lib!SimpleLogBehavior. a!)) (is-lib!AsynchronousSingletonBehavior./Inited_ (%Poly%lib!AsynchronousSingletonBehavior. b!))) (and (and (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. a!)) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. a!)))))) (lib!rec%behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. a!))) b! fuel%))) (and (and (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. b!)) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. b!)))))) (lib!rec%behavior_equiv.? DT&. DT& a! (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. b!))) fuel%))) (and (and (and (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. a!)) (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. b!))) (= (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. a!)) (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. b!)))) (lib!rec%behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. b!))) fuel%))))) :pattern ((lib!rec%behavior_equiv.? DT&. DT& a! b! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!behavior_equiv.) (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type a! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type b! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (= (lib!behavior_equiv.? DT&. DT& a! b!) (lib!rec%behavior_equiv.? DT&. DT& a! b! (succ fuel_nat%lib!behavior_equiv.)))) :pattern ((lib!behavior_equiv.? DT&. DT& a! b!))))))
(set-info :comment ";; Function-Specs lib::SimpleLogRefinesAsynchronousSingleton::exists_equiv_behavior")
(declare-fun req%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (a! Poly)) (! (= (req%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. Self%&. Self%& DT&. DT& a!) (=> %%global_location_label%%33 (lib!impl&%9.wf.? DT&. DT& a!))) :pattern ((req%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. Self%&. Self%& DT&. DT& a!)))))
(declare-fun ens%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (a! Poly) (b! Poly)) (! (= (ens%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. Self%&. Self%& DT&. DT& a! b!) (and (has_type b! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (and (lib!impl&%12.wf.? DT&. DT& b!) (lib!behavior_equiv.? DT&. DT& a! b!)))) :pattern ((ens%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. Self%&. Self%& DT&. DT& a! b!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::axiom_spec_len")
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)))))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%34 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%35 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::cell::impl&%2::view")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!cell.PointsTo. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& self!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((vstd!cell.impl&%2.view.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::invariant::impl&%0::constant")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!invariant.AtomicInvariant. K&. K& V&. V& Pred&. Pred&)) (has_type (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) K&)) :pattern ((vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%37 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%38 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%39 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%40 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%41 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%42 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%43 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%44 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%45 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%46 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%47 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%48 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%49 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%50 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%51 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%52 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%53 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%54 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%55 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%56 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%57 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%58 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%59 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%60 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%61 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%62 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%63 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%64 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%65 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%66 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%67 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%67 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%68 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%69 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%70 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%71 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%72 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%73 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms lib::constants::LOG_SIZE")
(assert (fuel_bool_default fuel%lib!constants.LOG_SIZE.))
(assert (=> (fuel_bool fuel%lib!constants.LOG_SIZE.) (= lib!constants.LOG_SIZE.? (uClip SZ (Mul 512 1024)))))
(assert (uInv SZ lib!constants.LOG_SIZE.?))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::replicas::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::combiner::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Instance::num_replicas")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::combiner::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::unbounded_log_instance")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::buffer_size")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::num_replicas")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::FlatCombiner::clients::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::FlatCombiner::Instance::num_threads")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::ClientState::is_Idle")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%0.is_Idle.))
(define-fun is-lib!spec.flat_combiner.ClientState./Idle_ ((c lib!spec.flat_combiner.ClientState.)) Bool ((_ is lib!spec.flat_combiner.ClientState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%0.is_Idle.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%0.is_Idle.? self!) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. self!))) :pattern ((lib!spec.flat_combiner.impl&%0.is_Idle.? self!))))))
(set-info :comment ";; Function-Specs lib::VERUS_layout_of_usize")
(declare-fun ens%lib!VERUS_layout_of_usize. () Bool)
(assert (= ens%lib!VERUS_layout_of_usize. (= (vstd!layout.size_of.? $ (UINT SZ)) 8)))
(set-info :comment ";; Broadcast lib::VERUS_layout_of_usize")
(assert (= (vstd!layout.size_of.? $ (UINT SZ)) 8))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%2::spec_len")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_len.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_len.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!) (I (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!)))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (UINT 64) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ BOOL G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%21::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%21.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%21.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool/patomic (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) :pattern ((vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& self!))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%21::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%21.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%21.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) :pattern ((vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%8::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%8.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%8.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%16::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%22::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%38::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%38.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%38.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%40::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::wf")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.wf.) (forall ((self! Poly) (max_replicas! Poly)) (! (= (lib!exec.replica.impl&%0.wf.? self! max_replicas!) (< (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!)) (%I max_replicas!))) :pattern ((lib!exec.replica.impl&%0.wf.? self! max_replicas!))))))
(set-info :comment ";; Function-Axioms lib::constants::MAX_THREADS_PER_REPLICA")
(assert (fuel_bool_default fuel%lib!constants.MAX_THREADS_PER_REPLICA.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_THREADS_PER_REPLICA.) (= lib!constants.MAX_THREADS_PER_REPLICA.? 128)))
(assert (uInv SZ lib!constants.MAX_THREADS_PER_REPLICA.?))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::wf2")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.wf2.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.wf2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (num_replicas! Poly)) (! (= (lib!exec.context.impl&%0.wf2.? DT&. DT& self! num_replicas!) (and (and (and (and (lib!exec.replica.impl&%0.wf.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!))) num_replicas!) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))))))) (< (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!)) lib!constants.MAX_THREADS_PER_REPLICA.?)) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. self!)))))))))))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))) (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!))))) :pattern ((lib!exec.context.impl&%0.wf2.? DT&. DT& self! num_replicas!))))))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::id_spec")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.id_spec.) (forall ((self! Poly)) (! (= (lib!exec.replica.impl&%0.id_spec.? self!) (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!))) :pattern ((lib!exec.replica.impl&%0.id_spec.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.replica.ReplicaToken.) (<= 0 (lib!exec.replica.impl&%0.id_spec.? self!))) :pattern ((lib!exec.replica.impl&%0.id_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::exec::replica::Replica::spec_id")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%4.spec_id.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%4.spec_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!) (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.replica.Replica. DT&. DT&)) (<= 0 (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!))) :pattern ((lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::view")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!exec.replica.impl&%0.view.? self!) (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!))) :pattern ((lib!exec.replica.impl&%0.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.replica.ReplicaToken.) (<= 0 (lib!exec.replica.impl&%0.view.? self!))) :pattern ((lib!exec.replica.impl&%0.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::thread_id_spec")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.thread_id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.thread_id_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!) (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!))) :pattern ((lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (<= 0 (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!))) :pattern ((lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::wf")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (replica! Poly)) (! (= (lib!exec.context.impl&%0.wf.? DT&. DT& self! replica!) (and (and (and (lib!exec.context.impl&%0.wf2.? DT&. DT& self! (I (nClip (Add (lib!exec.replica.impl&%4.spec_id.? DT&. DT& replica!) 1)))) (= (lib!exec.replica.impl&%0.view.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!)))) (lib!exec.replica.impl&%4.spec_id.? DT&. DT& replica!))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))) (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. replica!)))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. self!)))))) (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. replica!))) (I (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!)))))))))))) :pattern ((lib!exec.context.impl&%0.wf.? DT&. DT& self! replica!))))))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::replica_id_spec")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.replica_id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.replica_id_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!) (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!))))) :pattern ((lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (<= 0 (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!))) :pattern ((lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (UINT 64) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (UINT 64) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(set-info :comment ";; Function-Axioms lib::exec::context::Context::wf")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%3.wf.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%3.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (thread_idx! Poly)) (! (= (lib!exec.context.impl&%3.wf.? DT&. DT& self! thread_idx!) (and (and (and (and (and (= (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. self!)) (%I thread_idx!)) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))) (= (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/flat_combiner_instance (%Poly%lib!exec.context.Context. self!)))) (= (tuple%4./tuple%4/1 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!)))))))) (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. self!)))) (= (%Poly%lib!exec.CachePadded. (tuple%4./tuple%4/2 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. self!)))) (= (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. self!))))) :pattern ((lib!exec.context.impl&%3.wf.? DT&. DT& self! thread_idx!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ BOOL $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ BOOL $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))))))
(set-info :comment ";; Function-Axioms lib::exec::log::BufferEntry::wf")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%1.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (idx! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%1.wf.? DT&. DT& self! idx! cb_inst!) (and (and (and (and (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. self!)) cb_inst!) (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. self!)) (%I idx!))) (vstd!atomic_ghost.impl&%21.well_formed.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!))))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%21.constant.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!))))))) (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. self!)))) (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%21.constant.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!)))))) (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. self!))))) :pattern ((lib!exec.log.impl&%1.wf.? DT&. DT& self! idx! cb_inst!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLog::wf")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%6.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%6.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.log.impl&%6.wf.? DT&. DT& self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (let ((tmp%%$ (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (and (< 0 tmp%%$) (<= tmp%%$ lib!constants.MAX_REPLICAS.?))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) lib!constants.LOG_SIZE.?)) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) (vstd!seq.Seq.len.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))))) (= (vstd!cell.impl&%3.id.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$)))) (%Poly%vstd!cell.CellId. (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!constants.LOG_SIZE.?) (lib!exec.log.impl&%1.wf.? DT&. DT& (vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$) i$ (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$))))) (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. self!))))))) (= (vstd!atomic_ghost.impl&%1.constant.? (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. self!)))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. self!))))))) (= (vstd!atomic_ghost.impl&%1.constant.? (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. self!)))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!))))))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!)))))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!)))))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!)))))) (and (and (and (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))) (= (tuple%3./tuple%3/0 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%3./tuple%3/1 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%3./tuple%3/2 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) i$)))) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))))) :pattern ((lib!exec.log.impl&%6.wf.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_Ready")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_Ready.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_Ready.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_Ready.? self!) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_Ready.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Idle")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Idle_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Idle.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Idle.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicatedDataStructure::wf")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%1.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (nid! Poly) (inst! Poly) (cb! Poly)) (! (= (lib!exec.replica.impl&%1.wf.? DT&. DT& self! nid! inst! cb!) (and (and (and (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) inst!) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) inst!)) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) (lib!Dispatch.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (%Poly%lib!exec.replica.ReplicatedDataStructure. self!))))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) (%I nid!))) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))))))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) (%I nid!))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) (%I nid!))) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) cb!))) :pattern ((lib!exec.replica.impl&%1.wf.? DT&. DT& self! nid! inst! cb!))))))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::RwLock::max_threads")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (<= 0 (lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!))) :pattern ((lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (UINT 64) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (UINT 64) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)))))))
(set-info :comment ";; Function-Axioms lib::exec::replica::Replica::wf")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%3.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%3.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.replica.impl&%3.wf.? DT&. DT& self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))))) (lib!exec.context.impl&%3.wf.? DT&. DT& (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$) (I (nClip (%I i$)))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))))) (= (lib!exec.context.Context./Context/flat_combiner_instance (%Poly%lib!exec.context.Context. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$))) (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))))) (= (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$))) (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$))))) (< (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. self!))))) (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. self!))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) lib!constants.MAX_THREADS_PER_REPLICA.?)) (= (lib!exec.rwlock.impl&%4.max_threads.? $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. self!)))))) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))))) (let ((tmp%%$ (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!))) (and (<= 0 tmp%%$) (< tmp%%$ lib!constants.MAX_REPLICAS.?)))) (lib!exec.rwlock.impl&%3.wf.? $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. self!))))))) (forall ((v$ Poly)) (! (=> (has_type v$ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (= (lib!exec.rwlock.impl&%4.inv.? $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. self!))))) v$) (lib!exec.replica.impl&%1.wf.? DT&. DT& v$ (I (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!)) (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. self!)) (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((lib!exec.rwlock.impl&%4.inv.? $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. self!))))) v$))))) (= (lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. self!)))) lib!constants.MAX_THREADS_PER_REPLICA.?)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. self!))))) (lib!exec.context.impl&%0.wf.? DT&. DT& (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. self!))) i$) self!))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. self!))) i$))))) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!))))))) (= (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!))))))))) (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. self!)))) (= (tuple%4./tuple%4/1 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!)))))))) (lib!exec.replica.Replica./Replica/responses (%Poly%lib!exec.replica.Replica. self!)))) (= (tuple%4./tuple%4/2 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!)))))))) (lib!exec.replica.Replica./Replica/collected_operations (%Poly%lib!exec.replica.Replica. self!)))) (= (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!))))))))) (lib!exec.replica.Replica./Replica/collected_operations_per_thread (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((lib!exec.replica.impl&%3.wf.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::InputOperation::is_Read")
(assert (fuel_bool_default fuel%lib!impl&%1.is_Read.))
(assert (=> (fuel_bool fuel%lib!impl&%1.is_Read.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%1.is_Read.? DT&. DT& self!) (is-lib!InputOperation./Read_ (%Poly%lib!InputOperation. self!))) :pattern ((lib!impl&%1.is_Read.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::InputOperation::is_Write")
(assert (fuel_bool_default fuel%lib!impl&%1.is_Write.))
(define-fun is-lib!InputOperation./Write_ ((c lib!InputOperation.)) Bool ((_ is lib!InputOperation./Write) c))
(assert (=> (fuel_bool fuel%lib!impl&%1.is_Write.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%1.is_Write.? DT&. DT& self!) (is-lib!InputOperation./Write_ (%Poly%lib!InputOperation. self!))) :pattern ((lib!impl&%1.is_Write.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::get_fresh_nat")
(declare-fun req%lib!spec.unbounded_log.get_fresh_nat. (Poly Poly) Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((reqs! Poly) (combiner! Poly)) (! (= (req%lib!spec.unbounded_log.get_fresh_nat. reqs! combiner!) (=> %%global_location_label%%74 (and (vstd!set.impl&%0.finite.? $ NAT reqs!) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiner!))))) :pattern ((req%lib!spec.unbounded_log.get_fresh_nat. reqs! combiner!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::get_fresh_nat")
(assert (forall ((reqs! Poly) (combiner! Poly)) (! (=> (and (has_type reqs! (TYPE%vstd!set.Set. $ NAT)) (has_type combiner! (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))) (<= 0 (lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!))) :pattern ((lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log_refines_simplelog::RefinementProof::get_fresh_rid")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log_refines_simplelog.impl&%0.get_fresh_rid.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log_refines_simplelog.impl&%0.get_fresh_rid.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly)) (! (= (lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? $ (TYPE%lib!spec.unbounded_log_refines_simplelog.RefinementProof. DT&. DT&) DT&. DT& pre!) (I (lib!spec.unbounded_log.get_fresh_nat.? (vstd!set.impl&%0.union.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))) :pattern ((lib!UnboundedLogRefinesSimpleLog.get_fresh_rid.? $ (TYPE%lib!spec.unbounded_log_refines_simplelog.RefinementProof. DT&. DT&) DT&. DT& pre!))))))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::wf")
(assert (fuel_bool_default fuel%lib!exec.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%0.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (replica! Poly)) (! (= (lib!ThreadTokenT.wf.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&) self! replica!) (B (lib!exec.context.impl&%0.wf.? DT&. DT& self! replica!))) :pattern ((lib!ThreadTokenT.wf.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&) self! replica!))))))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::replica_id_spec")
(assert (fuel_bool_default fuel%lib!exec.impl&%0.replica_id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%0.replica_id_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!ThreadTokenT.replica_id_spec.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&) self!) (I (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!))) :pattern ((lib!ThreadTokenT.replica_id_spec.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&) self!))))))
(set-info :comment ";; Function-Axioms lib::exec::NodeReplicated::wf")
(assert (fuel_bool_default fuel%lib!exec.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%1.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!NodeReplicatedT.wf.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!) (B (and (and (and (and (lib!exec.log.impl&%6.wf.? DT&. DT& (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. self!)))) (= (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (%Poly%lib!exec.NodeReplicated. self!)) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. self!))))))) (= (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (%Poly%lib!exec.NodeReplicated. self!)) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. self!))))))) (<= (vstd!std_specs.vec.spec_vec_len.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) lib!constants.MAX_REPLICAS.?)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))))) (and (and (and (and (lib!exec.replica.impl&%3.wf.? DT&. DT& (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$)) (= (lib!exec.replica.impl&%4.spec_id.? DT&. DT& (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$)) (%I i$))) (= (lib!exec.replica.impl&%0.view.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$))))) (%I i$))) (= (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$))) (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (%Poly%lib!exec.NodeReplicated. self!)))) (= (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$))) (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (%Poly%lib!exec.NodeReplicated. self!)))))) :pattern ((vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$))))))) :pattern ((lib!NodeReplicatedT.wf.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::exec::NodeReplicated::replicas")
(assert (fuel_bool_default fuel%lib!exec.impl&%1.replicas.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%1.replicas.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!NodeReplicatedT.replicas.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) :pattern ((lib!NodeReplicatedT.replicas.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::exec::NodeReplicated::unbounded_log_instance")
(assert (fuel_bool_default fuel%lib!exec.impl&%1.unbounded_log_instance.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%1.unbounded_log_instance.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!NodeReplicatedT.unbounded_log_instance.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. self!)))))) :pattern ((lib!NodeReplicatedT.unbounded_log_instance.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::implements_NodeReplicated")
(assert (fuel_bool_default fuel%lib!implements_NodeReplicated.))
(assert (=> (fuel_bool fuel%lib!implements_NodeReplicated.) (forall ((DT&. Dcr) (DT& Type) (N&. Dcr) (N& Type)) (! (= (lib!implements_NodeReplicated.? DT&. DT& N&. N&) true) :pattern ((lib!implements_NodeReplicated.? DT&. DT& N&. N&))))))
(set-info :comment ";; Function-Axioms lib::implements_UnboundedLogRefinesSimpleLog")
(assert (fuel_bool_default fuel%lib!implements_UnboundedLogRefinesSimpleLog.))
(assert (=> (fuel_bool fuel%lib!implements_UnboundedLogRefinesSimpleLog.) (forall ((DT&. Dcr) (DT& Type) (RP&. Dcr) (RP& Type)) (! (= (lib!implements_UnboundedLogRefinesSimpleLog.? DT&. DT& RP&. RP&) true) :pattern ((lib!implements_UnboundedLogRefinesSimpleLog.? DT&. DT& RP&. RP&))))))
(set-info :comment ";; Function-Axioms lib::InputOperation::get_Read_0")
(assert (fuel_bool_default fuel%lib!impl&%1.get_Read_0.))
(assert (=> (fuel_bool fuel%lib!impl&%1.get_Read_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%1.get_Read_0.? DT&. DT& self!) (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. self!))) :pattern ((lib!impl&%1.get_Read_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!impl&%1.get_Read_0.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!impl&%1.get_Read_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::InputOperation::get_Write_0")
(assert (fuel_bool_default fuel%lib!impl&%1.get_Write_0.))
(assert (=> (fuel_bool fuel%lib!impl&%1.get_Write_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%1.get_Write_0.? DT&. DT& self!) (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. self!))) :pattern ((lib!impl&%1.get_Write_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!impl&%1.get_Write_0.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!impl&%1.get_Write_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::InputOperation::arrow_Read_0")
(assert (fuel_bool_default fuel%lib!impl&%2.arrow_Read_0.))
(assert (=> (fuel_bool fuel%lib!impl&%2.arrow_Read_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%2.arrow_Read_0.? DT&. DT& self!) (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. self!))) :pattern ((lib!impl&%2.arrow_Read_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!impl&%2.arrow_Read_0.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!impl&%2.arrow_Read_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::InputOperation::arrow_Write_0")
(assert (fuel_bool_default fuel%lib!impl&%2.arrow_Write_0.))
(assert (=> (fuel_bool fuel%lib!impl&%2.arrow_Write_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%2.arrow_Write_0.? DT&. DT& self!) (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. self!))) :pattern ((lib!impl&%2.arrow_Write_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!impl&%2.arrow_Write_0.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!impl&%2.arrow_Write_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::OutputOperation::is_Read")
(assert (fuel_bool_default fuel%lib!impl&%3.is_Read.))
(assert (=> (fuel_bool fuel%lib!impl&%3.is_Read.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%3.is_Read.? DT&. DT& self!) (is-lib!OutputOperation./Read_ (%Poly%lib!OutputOperation. self!))) :pattern ((lib!impl&%3.is_Read.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::OutputOperation::get_Read_0")
(assert (fuel_bool_default fuel%lib!impl&%3.get_Read_0.))
(assert (=> (fuel_bool fuel%lib!impl&%3.get_Read_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%3.get_Read_0.? DT&. DT& self!) (lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. self!))) :pattern ((lib!impl&%3.get_Read_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!impl&%3.get_Read_0.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!impl&%3.get_Read_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::OutputOperation::is_Write")
(assert (fuel_bool_default fuel%lib!impl&%3.is_Write.))
(define-fun is-lib!OutputOperation./Write_ ((c lib!OutputOperation.)) Bool ((_ is lib!OutputOperation./Write) c))
(assert (=> (fuel_bool fuel%lib!impl&%3.is_Write.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%3.is_Write.? DT&. DT& self!) (is-lib!OutputOperation./Write_ (%Poly%lib!OutputOperation. self!))) :pattern ((lib!impl&%3.is_Write.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::OutputOperation::get_Write_0")
(assert (fuel_bool_default fuel%lib!impl&%3.get_Write_0.))
(assert (=> (fuel_bool fuel%lib!impl&%3.get_Write_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%3.get_Write_0.? DT&. DT& self!) (lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. self!))) :pattern ((lib!impl&%3.get_Write_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!impl&%3.get_Write_0.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!impl&%3.get_Write_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::OutputOperation::arrow_Read_0")
(assert (fuel_bool_default fuel%lib!impl&%4.arrow_Read_0.))
(assert (=> (fuel_bool fuel%lib!impl&%4.arrow_Read_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%4.arrow_Read_0.? DT&. DT& self!) (lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. self!))) :pattern ((lib!impl&%4.arrow_Read_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!impl&%4.arrow_Read_0.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!impl&%4.arrow_Read_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::OutputOperation::arrow_Write_0")
(assert (fuel_bool_default fuel%lib!impl&%4.arrow_Write_0.))
(assert (=> (fuel_bool fuel%lib!impl&%4.arrow_Write_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%4.arrow_Write_0.? DT&. DT& self!) (lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. self!))) :pattern ((lib!impl&%4.arrow_Write_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!impl&%4.arrow_Write_0.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!impl&%4.arrow_Write_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::is_Start")
(assert (fuel_bool_default fuel%lib!impl&%5.is_Start.))
(assert (=> (fuel_bool fuel%lib!impl&%5.is_Start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.is_Start.? DT&. DT& self!) (is-lib!AsyncLabel./Start_ (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.is_Start.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::get_Start_0")
(assert (fuel_bool_default fuel%lib!impl&%5.get_Start_0.))
(assert (=> (fuel_bool fuel%lib!impl&%5.get_Start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.get_Start_0.? DT&. DT& self!) (lib!AsyncLabel./Start/0 (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.get_Start_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!impl&%5.get_Start_0.? DT&. DT& self!))) :pattern ((lib!impl&%5.get_Start_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::get_Start_1")
(assert (fuel_bool_default fuel%lib!impl&%5.get_Start_1.))
(assert (=> (fuel_bool fuel%lib!impl&%5.get_Start_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.get_Start_1.? DT&. DT& self!) (lib!AsyncLabel./Start/1 (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.get_Start_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!impl&%5.get_Start_1.? DT&. DT& self!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((lib!impl&%5.get_Start_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::is_End")
(assert (fuel_bool_default fuel%lib!impl&%5.is_End.))
(assert (=> (fuel_bool fuel%lib!impl&%5.is_End.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.is_End.? DT&. DT& self!) (is-lib!AsyncLabel./End_ (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.is_End.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::get_End_0")
(assert (fuel_bool_default fuel%lib!impl&%5.get_End_0.))
(assert (=> (fuel_bool fuel%lib!impl&%5.get_End_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.get_End_0.? DT&. DT& self!) (lib!AsyncLabel./End/0 (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.get_End_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!impl&%5.get_End_0.? DT&. DT& self!))) :pattern ((lib!impl&%5.get_End_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::get_End_1")
(assert (fuel_bool_default fuel%lib!impl&%5.get_End_1.))
(assert (=> (fuel_bool fuel%lib!impl&%5.get_End_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.get_End_1.? DT&. DT& self!) (lib!AsyncLabel./End/1 (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.get_End_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!impl&%5.get_End_1.? DT&. DT& self!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((lib!impl&%5.get_End_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::arrow_Start_0")
(assert (fuel_bool_default fuel%lib!impl&%6.arrow_Start_0.))
(assert (=> (fuel_bool fuel%lib!impl&%6.arrow_Start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%6.arrow_Start_0.? DT&. DT& self!) (lib!AsyncLabel./Start/0 (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%6.arrow_Start_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!impl&%6.arrow_Start_0.? DT&. DT& self!))) :pattern ((lib!impl&%6.arrow_Start_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::arrow_Start_1")
(assert (fuel_bool_default fuel%lib!impl&%6.arrow_Start_1.))
(assert (=> (fuel_bool fuel%lib!impl&%6.arrow_Start_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%6.arrow_Start_1.? DT&. DT& self!) (lib!AsyncLabel./Start/1 (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%6.arrow_Start_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!impl&%6.arrow_Start_1.? DT&. DT& self!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((lib!impl&%6.arrow_Start_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::arrow_End_0")
(assert (fuel_bool_default fuel%lib!impl&%6.arrow_End_0.))
(assert (=> (fuel_bool fuel%lib!impl&%6.arrow_End_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%6.arrow_End_0.? DT&. DT& self!) (lib!AsyncLabel./End/0 (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%6.arrow_End_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!impl&%6.arrow_End_0.? DT&. DT& self!))) :pattern ((lib!impl&%6.arrow_End_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::arrow_End_1")
(assert (fuel_bool_default fuel%lib!impl&%6.arrow_End_1.))
(assert (=> (fuel_bool fuel%lib!impl&%6.arrow_End_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%6.arrow_End_1.? DT&. DT& self!) (lib!AsyncLabel./End/1 (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%6.arrow_End_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!impl&%6.arrow_End_1.? DT&. DT& self!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((lib!impl&%6.arrow_End_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_Stepped_0")
(assert (fuel_bool_default fuel%lib!impl&%7.get_Stepped_0.))
(assert (=> (fuel_bool fuel%lib!impl&%7.get_Stepped_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.get_Stepped_0.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.get_Stepped_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%7.get_Stepped_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!impl&%7.get_Stepped_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_Inited_0")
(assert (fuel_bool_default fuel%lib!impl&%7.get_Inited_0.))
(assert (=> (fuel_bool fuel%lib!impl&%7.get_Inited_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.get_Inited_0.? DT&. DT& self!) (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.get_Inited_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%7.get_Inited_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!impl&%7.get_Inited_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::arrow_1")
(assert (fuel_bool_default fuel%lib!impl&%8.arrow_1.))
(assert (=> (fuel_bool fuel%lib!impl&%8.arrow_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%8.arrow_1.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%8.arrow_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!impl&%8.arrow_1.? DT&. DT& self!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!impl&%8.arrow_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::arrow_2")
(assert (fuel_bool_default fuel%lib!impl&%8.arrow_2.))
(assert (=> (fuel_bool fuel%lib!impl&%8.arrow_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%8.arrow_2.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%8.arrow_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. (lib!impl&%8.arrow_2.? DT&. DT& self!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((lib!impl&%8.arrow_2.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::arrow_Stepped_0")
(assert (fuel_bool_default fuel%lib!impl&%8.arrow_Stepped_0.))
(assert (=> (fuel_bool fuel%lib!impl&%8.arrow_Stepped_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%8.arrow_Stepped_0.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%8.arrow_Stepped_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%8.arrow_Stepped_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!impl&%8.arrow_Stepped_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::arrow_Stepped_1")
(assert (fuel_bool_default fuel%lib!impl&%8.arrow_Stepped_1.))
(assert (=> (fuel_bool fuel%lib!impl&%8.arrow_Stepped_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%8.arrow_Stepped_1.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%8.arrow_Stepped_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!impl&%8.arrow_Stepped_1.? DT&. DT& self!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!impl&%8.arrow_Stepped_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::arrow_Stepped_2")
(assert (fuel_bool_default fuel%lib!impl&%8.arrow_Stepped_2.))
(assert (=> (fuel_bool fuel%lib!impl&%8.arrow_Stepped_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%8.arrow_Stepped_2.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%8.arrow_Stepped_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. (lib!impl&%8.arrow_Stepped_2.? DT&. DT& self!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((lib!impl&%8.arrow_Stepped_2.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::arrow_Inited_0")
(assert (fuel_bool_default fuel%lib!impl&%8.arrow_Inited_0.))
(assert (=> (fuel_bool fuel%lib!impl&%8.arrow_Inited_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%8.arrow_Inited_0.? DT&. DT& self!) (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%8.arrow_Inited_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%8.arrow_Inited_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!impl&%8.arrow_Inited_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::get_Stepped_0")
(assert (fuel_bool_default fuel%lib!impl&%10.get_Stepped_0.))
(assert (=> (fuel_bool fuel%lib!impl&%10.get_Stepped_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.get_Stepped_0.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.get_Stepped_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!impl&%10.get_Stepped_0.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!impl&%10.get_Stepped_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::get_Inited_0")
(assert (fuel_bool_default fuel%lib!impl&%10.get_Inited_0.))
(assert (=> (fuel_bool fuel%lib!impl&%10.get_Inited_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.get_Inited_0.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.get_Inited_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!impl&%10.get_Inited_0.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!impl&%10.get_Inited_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::arrow_1")
(assert (fuel_bool_default fuel%lib!impl&%11.arrow_1.))
(assert (=> (fuel_bool fuel%lib!impl&%11.arrow_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%11.arrow_1.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%11.arrow_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!impl&%11.arrow_1.? DT&. DT& self!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!impl&%11.arrow_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::arrow_2")
(assert (fuel_bool_default fuel%lib!impl&%11.arrow_2.))
(assert (=> (fuel_bool fuel%lib!impl&%11.arrow_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%11.arrow_2.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%11.arrow_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!impl&%11.arrow_2.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((lib!impl&%11.arrow_2.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::arrow_Stepped_0")
(assert (fuel_bool_default fuel%lib!impl&%11.arrow_Stepped_0.))
(assert (=> (fuel_bool fuel%lib!impl&%11.arrow_Stepped_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%11.arrow_Stepped_0.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%11.arrow_Stepped_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!impl&%11.arrow_Stepped_0.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!impl&%11.arrow_Stepped_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::arrow_Stepped_1")
(assert (fuel_bool_default fuel%lib!impl&%11.arrow_Stepped_1.))
(assert (=> (fuel_bool fuel%lib!impl&%11.arrow_Stepped_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%11.arrow_Stepped_1.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%11.arrow_Stepped_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!impl&%11.arrow_Stepped_1.? DT&. DT& self!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!impl&%11.arrow_Stepped_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::arrow_Stepped_2")
(assert (fuel_bool_default fuel%lib!impl&%11.arrow_Stepped_2.))
(assert (=> (fuel_bool fuel%lib!impl&%11.arrow_Stepped_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%11.arrow_Stepped_2.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%11.arrow_Stepped_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!impl&%11.arrow_Stepped_2.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((lib!impl&%11.arrow_Stepped_2.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::arrow_Inited_0")
(assert (fuel_bool_default fuel%lib!impl&%11.arrow_Inited_0.))
(assert (=> (fuel_bool fuel%lib!impl&%11.arrow_Inited_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%11.arrow_Inited_0.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%11.arrow_Inited_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!impl&%11.arrow_Inited_0.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!impl&%11.arrow_Inited_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::implements_SimpleLogRefinesAsynchronousSingleton")
(assert (fuel_bool_default fuel%lib!implements_SimpleLogRefinesAsynchronousSingleton.))
(assert (=> (fuel_bool fuel%lib!implements_SimpleLogRefinesAsynchronousSingleton.) (forall ((DT&. Dcr) (DT& Type) (RP&. Dcr) (RP& Type)) (! (= (lib!implements_SimpleLogRefinesAsynchronousSingleton.? DT&. DT& RP&. RP&) true) :pattern ((lib!implements_SimpleLogRefinesAsynchronousSingleton.? DT&. DT& RP&. RP&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%lib!ThreadTokenT. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&))) :pattern ((tr_bound%lib!ThreadTokenT. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%lib!NodeReplicatedT. $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)) :pattern ((tr_bound%lib!NodeReplicatedT. $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%lib!SimpleLogRefinesAsynchronousSingleton. $ TYPE%lib!spec.linearization.RefinementProof. DT&. DT&)) :pattern ((tr_bound%lib!SimpleLogRefinesAsynchronousSingleton. $ TYPE%lib!spec.linearization.RefinementProof. DT&. DT&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%lib!UnboundedLogRefinesSimpleLog. $ (TYPE%lib!spec.unbounded_log_refines_simplelog.RefinementProof. DT&. DT&) DT&. DT&)) :pattern ((tr_bound%lib!UnboundedLogRefinesSimpleLog. $ (TYPE%lib!spec.unbounded_log_refines_simplelog.RefinementProof. DT&. DT&) DT&. DT&)))))
(set-info :comment ";; Function-Specs lib::theorem_1")
(declare-fun ens%lib!theorem_1. (Dcr Type) Bool)
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (ens%lib!theorem_1. DT&. DT&) (lib!implements_SimpleLogRefinesAsynchronousSingleton.? DT&. DT& $ TYPE%lib!spec.linearization.RefinementProof.)) :pattern ((ens%lib!theorem_1. DT&. DT&)))))
(set-info :comment ";; Function-Def lib::theorem_1")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/lib.rs:67:7: 67:42 (#0)")
(declare-const DT&. Dcr)
(declare-const DT& Type)
(assert fuel_defaults)
(assert (tr_bound%lib!Dispatch. DT&. DT&))
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> %%location_label%%0 (lib!implements_SimpleLogRefinesAsynchronousSingleton.? DT&. DT& $ TYPE%lib!spec.linearization.RefinementProof.))))
(check-sat)
(exit)
