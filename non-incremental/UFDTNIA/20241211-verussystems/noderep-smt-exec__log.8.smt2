(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module exec::log'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%0.inv. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.constant. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%20.inv. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%21.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%21.constant. FuelId)
(declare-const fuel%vstd!invariant.AtomicInvariant.inv. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%8.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%38.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict. FuelId)
(declare-const fuel%lib!exec.log.impl&%0.atomic_inv. FuelId)
(declare-const fuel%lib!exec.log.impl&%1.wf. FuelId)
(declare-const fuel%lib!exec.log.impl&%2.atomic_inv. FuelId)
(declare-const fuel%lib!exec.log.impl&%3.atomic_inv. FuelId)
(declare-const fuel%lib!exec.log.impl&%4.atomic_inv. FuelId)
(declare-const fuel%lib!exec.log.impl&%5.atomic_inv. FuelId)
(declare-const fuel%lib!exec.log.impl&%6.wf. FuelId)
(declare-const fuel%lib!exec.log.impl&%7.index_spec. FuelId)
(declare-const fuel%lib!exec.log.impl&%7.is_alive_value_spec. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.common_pred. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.append_pre. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.append_post. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.execute_pre. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.execute_post. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.advance_head_pre. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.advance_head_post. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.pre_exec. FuelId)
(declare-const fuel%lib!exec.log.impl&%8.post_exec. FuelId)
(declare-const fuel%lib!exec.log.impl&%9.wf. FuelId)
(declare-const fuel%lib!exec.log.impl&%10.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.id_spec. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.view. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_VersionUpperBound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_ReadyToRead. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Placed. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Placed_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Applied. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Applied_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Applied_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_Ready. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_Placed. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_Loop. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%7.queued_ops. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.stored_type_inv. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.is_Range. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_end. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_cur. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.is_Guard. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_end. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.min. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.log_entry_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.log_entry_alive_value. FuelId)
(declare-const fuel%lib!constants.MAX_REPLICAS. FuelId)
(declare-const fuel%lib!constants.LOG_SIZE. FuelId)
(declare-const fuel%lib!constants.MAX_THREADS_PER_REPLICA. FuelId)
(declare-const fuel%lib!constants.MAX_PENDING_OPS. FuelId)
(declare-const fuel%lib!constants.MAX_REQUESTS. FuelId)
(declare-const fuel%lib!constants.GC_FROM_HEAD. FuelId)
(declare-const fuel%lib!constants.WARN_THRESHOLD. FuelId)
(declare-const fuel%lib!constants.MAX_IDX. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.vec.impl&%2.spec_len. fuel%vstd!std_specs.vec.impl&%2.spec_index. fuel%vstd!atomic_ghost.impl&%0.inv. fuel%vstd!atomic_ghost.impl&%1.well_formed. fuel%vstd!atomic_ghost.impl&%1.constant. fuel%vstd!atomic_ghost.impl&%20.inv. fuel%vstd!atomic_ghost.impl&%21.well_formed. fuel%vstd!atomic_ghost.impl&%21.constant. fuel%vstd!invariant.AtomicInvariant.inv. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.Seq.last. fuel%vstd!set.impl&%0.choose. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%8.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%38.view. fuel%vstd!view.impl&%40.view. fuel%vstd!view.impl&%42.view. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict. fuel%lib!exec.log.impl&%0.atomic_inv. fuel%lib!exec.log.impl&%1.wf. fuel%lib!exec.log.impl&%2.atomic_inv. fuel%lib!exec.log.impl&%3.atomic_inv. fuel%lib!exec.log.impl&%4.atomic_inv. fuel%lib!exec.log.impl&%5.atomic_inv. fuel%lib!exec.log.impl&%6.wf. fuel%lib!exec.log.impl&%7.index_spec. fuel%lib!exec.log.impl&%7.is_alive_value_spec. fuel%lib!exec.log.impl&%8.common_pred. fuel%lib!exec.log.impl&%8.append_pre. fuel%lib!exec.log.impl&%8.append_post. fuel%lib!exec.log.impl&%8.execute_pre. fuel%lib!exec.log.impl&%8.execute_post. fuel%lib!exec.log.impl&%8.advance_head_pre. fuel%lib!exec.log.impl&%8.advance_head_post. fuel%lib!exec.log.impl&%8.pre_exec. fuel%lib!exec.log.impl&%8.post_exec. fuel%lib!exec.log.impl&%9.wf. fuel%lib!exec.log.impl&%10.wf. fuel%lib!exec.replica.impl&%0.wf. fuel%lib!exec.replica.impl&%0.id_spec. fuel%lib!exec.replica.impl&%0.view. fuel%lib!spec.unbounded_log.impl&%0.is_Init. fuel%lib!spec.unbounded_log.impl&%0.get_Init_op. fuel%lib!spec.unbounded_log.impl&%0.is_VersionUpperBound. fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op. fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound. fuel%lib!spec.unbounded_log.impl&%0.is_ReadyToRead. fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op. fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id. fuel%lib!spec.unbounded_log.impl&%3.is_Init. fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. fuel%lib!spec.unbounded_log.impl&%3.is_Placed. fuel%lib!spec.unbounded_log.impl&%3.get_Placed_op. fuel%lib!spec.unbounded_log.impl&%3.is_Applied. fuel%lib!spec.unbounded_log.impl&%3.get_Applied_ret. fuel%lib!spec.unbounded_log.impl&%3.get_Applied_idx. fuel%lib!spec.unbounded_log.impl&%3.is_Done. fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%5.is_Ready. fuel%lib!spec.unbounded_log.impl&%5.is_Placed. fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops. fuel%lib!spec.unbounded_log.impl&%5.is_Loop. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail. fuel%lib!spec.unbounded_log.impl&%7.queued_ops. fuel%lib!spec.cyclicbuffer.stored_type_inv. fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting. fuel%lib!spec.cyclicbuffer.impl&%0.is_Range. fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_end. fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_cur. fuel%lib!spec.cyclicbuffer.impl&%0.is_Guard. fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_end. fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur. fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle. fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading. fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0. fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead. fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx. fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version. fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending. fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx. fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail. fuel%lib!spec.cyclicbuffer.min. fuel%lib!spec.cyclicbuffer.log_entry_idx. fuel%lib!spec.cyclicbuffer.log_entry_alive_value. fuel%lib!constants.MAX_REPLICAS. fuel%lib!constants.LOG_SIZE. fuel%lib!constants.MAX_THREADS_PER_REPLICA. fuel%lib!constants.MAX_PENDING_OPS. fuel%lib!constants.MAX_REQUESTS. fuel%lib!constants.GC_FROM_HEAD. fuel%lib!constants.WARN_THRESHOLD. fuel%lib!constants.MAX_IDX.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./ReadOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./ReadOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./View (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./View (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. 0)
(declare-sort vstd!atomic.PAtomicBool. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionBool. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. 0)
(declare-sort vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. 0)
(declare-sort vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. 0)
(declare-sort vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. 0)
(declare-sort vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. 0)
(declare-sort vstd!cell.CellId. 0)
(declare-sort vstd!invariant.OpenInvariantCredit. 0)
(declare-sort vstd!map.Map<nat./bool.>. 0)
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<vstd!cell.CellId.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!atomic.PermissionDataBool. 0) (vstd!atomic.PermissionDataU64. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!atomic_ghost.AtomicBool. 0) (vstd!cell.PointsToData. 0) (lib!spec.unbounded_log.UnboundedLog.log_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.tail_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. 0) (lib!exec.log.BufferEntry. 0) (lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. 0) (lib!exec.log.NrLog. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_head. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_tail. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. 0) (lib!exec.log.NrLogAppendExecDataGhost. 0) (lib!exec.log.AppendEntriesGhostState. 0) (lib!exec.log.NrLogTokens. 0) (lib!exec.replica.ReplicaToken. 0) (lib!spec.types.LogEntry. 0) (lib!spec.types.ConcreteLogEntry. 0) (lib!spec.unbounded_log.ReadonlyState. 0) (lib!spec.unbounded_log.UpdateState. 0) (lib!spec.unbounded_log.CombinerState. 0) (lib!spec.cyclicbuffer.StoredType. 0) (lib!spec.cyclicbuffer.ReaderState. 0) (lib!spec.cyclicbuffer.CombinerState. 0) (lib!exec.CachePadded. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0) (tuple%6. 0) (tuple%9. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!atomic.PermissionDataBool./PermissionDataBool (vstd!atomic.PermissionDataBool./PermissionDataBool/?patomic Int) (vstd!atomic.PermissionDataBool./PermissionDataBool/?value Bool))) ((vstd!atomic.PermissionDataU64./PermissionDataU64 (vstd!atomic.PermissionDataU64./PermissionDataU64/?patomic Int) (vstd!atomic.PermissionDataU64./PermissionDataU64/?value Int))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!atomic_ghost.AtomicBool./AtomicBool (vstd!atomic_ghost.AtomicBool./AtomicBool/?patomic vstd!atomic.PAtomicBool.) (vstd!atomic_ghost.AtomicBool./AtomicBool/?atomic_inv Poly))) ((vstd!cell.PointsToData./PointsToData (vstd!cell.PointsToData./PointsToData/?pcell vstd!cell.CellId.) (vstd!cell.PointsToData./PointsToData/?value core!option.Option.))) ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?value lib!spec.types.LogEntry.))) ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/?value Int))) ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?value Poly))) ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?value Int))) ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/?value Int))) ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?value lib!spec.unbounded_log.ReadonlyState.))) ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value lib!spec.unbounded_log.UpdateState.))) ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?value lib!spec.unbounded_log.CombinerState.))) ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/?instance Poly) (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/?value Int))) ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/?instance Poly) (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/?value Int))) ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?instance Poly) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?key Int) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?value Int))) ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?instance Poly) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?key Int) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?value Bool))) ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?instance Poly) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?key Int) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?value lib!spec.cyclicbuffer.CombinerState.))) ((lib!exec.log.BufferEntry./BufferEntry (lib!exec.log.BufferEntry./BufferEntry/?log_entry Poly) (lib!exec.log.BufferEntry./BufferEntry/?alive vstd!atomic_ghost.AtomicBool.) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_idx Int) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_instance Poly))) ((lib!exec.log.InvariantPredicate_auto_BufferEntry_alive./InvariantPredicate_auto_BufferEntry_alive )) ((lib!exec.log.NrLog./NrLog (lib!exec.log.NrLog./NrLog/?slog Poly) (lib!exec.log.NrLog./NrLog/?version_upper_bound lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?head lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?tail lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?local_versions Poly) (lib!exec.log.NrLog./NrLog/?num_replicas Int) (lib!exec.log.NrLog./NrLog/?unbounded_log_instance Poly) (lib!exec.log.NrLog./NrLog/?cyclic_buffer_instance Poly))) ((lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound./InvariantPredicate_auto_NrLog_version_upper_bound )) ((lib!exec.log.InvariantPredicate_auto_NrLog_head./InvariantPredicate_auto_NrLog_head )) ((lib!exec.log.InvariantPredicate_auto_NrLog_tail./InvariantPredicate_auto_NrLog_tail )) ((lib!exec.log.InvariantPredicate_auto_NrLog_local_versions./InvariantPredicate_auto_NrLog_local_versions )) ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?local_updates Poly) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?ghost_replica Poly) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?combiner Poly) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?cb_combiner Poly) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?request_ids vstd!seq.Seq<nat.>.))) ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?idx Int) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?old_tail Int) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?log_entries Poly) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?local_updates Poly) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?combiner Poly) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?tail Poly) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?request_ids vstd!seq.Seq<nat.>.) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?operations Poly))) ((lib!exec.log.NrLogTokens./NrLogTokens (lib!exec.log.NrLogTokens./NrLogTokens/?num_replicas Int) (lib!exec.log.NrLogTokens./NrLogTokens/?replicas Poly) (lib!exec.log.NrLogTokens./NrLogTokens/?combiners Poly) (lib!exec.log.NrLogTokens./NrLogTokens/?cb_combiners Poly) (lib!exec.log.NrLogTokens./NrLogTokens/?unbounded_log_instance Poly) (lib!exec.log.NrLogTokens./NrLogTokens/?cyclic_buffer_instance Poly))) ((lib!exec.replica.ReplicaToken./ReplicaToken (lib!exec.replica.ReplicaToken./ReplicaToken/?rid Int))) ((lib!spec.types.LogEntry./LogEntry (lib!spec.types.LogEntry./LogEntry/?op Poly) (lib!spec.types.LogEntry./LogEntry/?node_id Int))) ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op Poly) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id Int))) ((lib!spec.unbounded_log.ReadonlyState./Init (lib!spec.unbounded_log.ReadonlyState./Init/?op Poly)) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op Poly) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound Int)) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op Poly) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id Int)) (lib!spec.unbounded_log.ReadonlyState./Done (lib!spec.unbounded_log.ReadonlyState./Done/?op Poly) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id Int) (lib!spec.unbounded_log.ReadonlyState./Done/?ret Poly))) ((lib!spec.unbounded_log.UpdateState./Init (lib!spec.unbounded_log.UpdateState./Init/?op Poly)) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.unbounded_log.UpdateState./Placed/?op Poly) (lib!spec.unbounded_log.UpdateState./Placed/?idx Int)) (lib!spec.unbounded_log.UpdateState./Applied (lib!spec.unbounded_log.UpdateState./Applied/?ret Poly) (lib!spec.unbounded_log.UpdateState./Applied/?idx Int)) (lib!spec.unbounded_log.UpdateState./Done (lib!spec.unbounded_log.UpdateState./Done/?ret Poly) (lib!spec.unbounded_log.UpdateState./Done/?idx Int))) ((lib!spec.unbounded_log.CombinerState./Ready ) (lib!spec.unbounded_log.CombinerState./Placed (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops vstd!seq.Seq<nat.>.)) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion Int)) (lib!spec.unbounded_log.CombinerState./Loop (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./Loop/?lversion Int) (lib!spec.unbounded_log.CombinerState./Loop/?idx Int) (lib!spec.unbounded_log.CombinerState./Loop/?tail Int)) (lib!spec.unbounded_log.CombinerState./UpdatedVersion (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail Int))) ((lib!spec.cyclicbuffer.StoredType./StoredType (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms Poly) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry core!option.Option.))) ((lib!spec.cyclicbuffer.ReaderState./Starting (lib!spec.cyclicbuffer.ReaderState./Starting/?start Int)) (lib!spec.cyclicbuffer.ReaderState./Range (lib!spec.cyclicbuffer.ReaderState./Range/?start Int) (lib!spec.cyclicbuffer.ReaderState./Range/?end Int) (lib!spec.cyclicbuffer.ReaderState./Range/?cur Int)) (lib!spec.cyclicbuffer.ReaderState./Guard (lib!spec.cyclicbuffer.ReaderState./Guard/?start Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?end Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?val lib!spec.cyclicbuffer.StoredType.))) ((lib!spec.cyclicbuffer.CombinerState./Idle ) (lib!spec.cyclicbuffer.CombinerState./Reading (lib!spec.cyclicbuffer.CombinerState./Reading/?0 lib!spec.cyclicbuffer.ReaderState.)) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx Int) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version Int)) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head Int)) (lib!spec.cyclicbuffer.CombinerState./Appending (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx Int) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail Int))) ((lib!exec.CachePadded./CachePadded (lib!exec.CachePadded./CachePadded/?0 Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly))) ((tuple%6./tuple%6 (tuple%6./tuple%6/?0 Poly) (tuple%6./tuple%6/?1 Poly) (tuple%6./tuple%6/?2 Poly) (tuple%6./tuple%6/?3 Poly) (tuple%6./tuple%6/?4 Poly) (tuple%6./tuple%6/?5 Poly))) ((tuple%9./tuple%9 (tuple%9./tuple%9/?0 Poly) (tuple%9./tuple%9/?1 Poly) (tuple%9./tuple%9/?2 Poly) (tuple%9./tuple%9/?3 Poly) (tuple%9./tuple%9/?4 Poly) (tuple%9./tuple%9/?5 Poly) (tuple%9./tuple%9/?6 Poly) (tuple%9./tuple%9/?7 Poly) (tuple%9./tuple%9/?8 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (vstd!atomic.PermissionDataBool.) Int)
(declare-fun vstd!atomic.PermissionDataBool./PermissionDataBool/value (vstd!atomic.PermissionDataBool.) Bool)
(declare-fun vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (vstd!atomic.PermissionDataU64.) Int)
(declare-fun vstd!atomic.PermissionDataU64./PermissionDataU64/value (vstd!atomic.PermissionDataU64.) Int)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!atomic_ghost.AtomicBool./AtomicBool/patomic (vstd!atomic_ghost.AtomicBool.) vstd!atomic.PAtomicBool.)
(declare-fun vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (vstd!atomic_ghost.AtomicBool.) Poly)
(declare-fun vstd!cell.PointsToData./PointsToData/pcell (vstd!cell.PointsToData.) vstd!cell.CellId.)
(declare-fun vstd!cell.PointsToData./PointsToData/value (vstd!cell.PointsToData.) core!option.Option.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (lib!spec.unbounded_log.UnboundedLog.log_token_data.) lib!spec.types.LogEntry.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (lib!spec.unbounded_log.UnboundedLog.tail_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (lib!spec.unbounded_log.UnboundedLog.tail_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) lib!spec.unbounded_log.UpdateState.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) lib!spec.unbounded_log.CombinerState.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.) Bool)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/log_entry (lib!exec.log.BufferEntry.) Poly)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/alive (lib!exec.log.BufferEntry.) vstd!atomic_ghost.AtomicBool.)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (lib!exec.log.BufferEntry.) Int)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (lib!exec.log.BufferEntry.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/slog (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/version_upper_bound (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/head (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/tail (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/local_versions (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/num_replicas (lib!exec.log.NrLog.) Int)
(declare-fun lib!exec.log.NrLog./NrLog/unbounded_log_instance (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (lib!exec.log.NrLogAppendExecDataGhost.) Poly)
(declare-fun lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica (lib!exec.log.NrLogAppendExecDataGhost.) Poly)
(declare-fun lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (lib!exec.log.NrLogAppendExecDataGhost.) Poly)
(declare-fun lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (lib!exec.log.NrLogAppendExecDataGhost.) Poly)
(declare-fun lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (lib!exec.log.NrLogAppendExecDataGhost.) vstd!seq.Seq<nat.>.)
(declare-fun lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (lib!exec.log.AppendEntriesGhostState.) Int)
(declare-fun lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/old_tail (lib!exec.log.AppendEntriesGhostState.) Int)
(declare-fun lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (lib!exec.log.AppendEntriesGhostState.) Poly)
(declare-fun lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (lib!exec.log.AppendEntriesGhostState.) Poly)
(declare-fun lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner (lib!exec.log.AppendEntriesGhostState.) Poly)
(declare-fun lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail (lib!exec.log.AppendEntriesGhostState.) Poly)
(declare-fun lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (lib!exec.log.AppendEntriesGhostState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations (lib!exec.log.AppendEntriesGhostState.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (lib!exec.log.NrLogTokens.) Int)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/replicas (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/combiners (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.replica.ReplicaToken./ReplicaToken/rid (lib!exec.replica.ReplicaToken.) Int)
(declare-fun lib!spec.types.LogEntry./LogEntry/op (lib!spec.types.LogEntry.) Poly)
(declare-fun lib!spec.types.LogEntry./LogEntry/node_id (lib!spec.types.LogEntry.) Int)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (lib!spec.types.ConcreteLogEntry.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Init/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/ret (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Init/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Placed/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/idx (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (lib!spec.cyclicbuffer.StoredType.) core!option.Option.)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Starting/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/val (lib!spec.cyclicbuffer.ReaderState.) lib!spec.cyclicbuffer.StoredType.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Reading/0 (lib!spec.cyclicbuffer.CombinerState.) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/tail (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!exec.CachePadded./CachePadded/0 (lib!exec.CachePadded.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun tuple%6./tuple%6/0 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/1 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/2 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/3 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/4 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/5 (tuple%6.) Poly)
(declare-fun tuple%9./tuple%9/0 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/1 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/2 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/3 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/4 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/5 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/6 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/7 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/8 (tuple%9.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-const TYPE%vstd!atomic.PAtomicBool. Type)
(declare-const TYPE%vstd!atomic.PermissionBool. Type)
(declare-const TYPE%vstd!atomic.PermissionDataBool. Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-const TYPE%vstd!atomic.PermissionDataU64. Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredBool. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicBool. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!cell.CellId. Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!invariant.OpenInvariantCredit. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.tail. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.log.BufferEntry. (Dcr Type) Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. Type)
(declare-fun TYPE%lib!exec.log.NrLog. (Dcr Type) Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. Type)
(declare-fun TYPE%lib!exec.log.NrLogAppendExecDataGhost. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.log.AppendEntriesGhostState. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.log.NrLogTokens. (Dcr Type) Type)
(declare-const TYPE%lib!exec.replica.ReplicaToken. Type)
(declare-fun TYPE%lib!spec.types.LogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.ConcreteLogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.ReadonlyState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UpdateState. (Dcr Type) Type)
(declare-const TYPE%lib!spec.unbounded_log.CombinerState. Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.StoredType. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.ReaderState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CombinerState. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.CachePadded. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%6. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%9. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. (alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.)
(declare-fun Poly%vstd!atomic.PAtomicBool. (vstd!atomic.PAtomicBool.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicBool. (Poly) vstd!atomic.PAtomicBool.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionBool. (vstd!atomic.PermissionBool.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionBool. (Poly) vstd!atomic.PermissionBool.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. (vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. (Poly) vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. (vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. (Poly) vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. (vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. (Poly) vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. (vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. (Poly) vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. (vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. (Poly) vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>.)
(declare-fun Poly%vstd!cell.CellId. (vstd!cell.CellId.) Poly)
(declare-fun %Poly%vstd!cell.CellId. (Poly) vstd!cell.CellId.)
(declare-fun Poly%vstd!invariant.OpenInvariantCredit. (vstd!invariant.OpenInvariantCredit.) Poly)
(declare-fun %Poly%vstd!invariant.OpenInvariantCredit. (Poly) vstd!invariant.OpenInvariantCredit.)
(declare-fun Poly%vstd!map.Map<nat./bool.>. (vstd!map.Map<nat./bool.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./bool.>. (Poly) vstd!map.Map<nat./bool.>.)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly) vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!cell.CellId.>. (vstd!seq.Seq<vstd!cell.CellId.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!cell.CellId.>. (Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.PermissionDataBool.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionDataBool. (Poly) vstd!atomic.PermissionDataBool.)
(declare-fun Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionDataU64. (Poly) vstd!atomic.PermissionDataU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicBool. (Poly) vstd!atomic_ghost.AtomicBool.)
(declare-fun Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData.) Poly)
(declare-fun %Poly%vstd!cell.PointsToData. (Poly) vstd!cell.PointsToData.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.log_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.tail_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.tail_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)
(declare-fun Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry.) Poly)
(declare-fun %Poly%lib!exec.log.BufferEntry. (Poly) lib!exec.log.BufferEntry.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly) lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)
(declare-fun Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog.) Poly)
(declare-fun %Poly%lib!exec.log.NrLog. (Poly) lib!exec.log.NrLog.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.log.InvariantPredicate_auto_NrLog_head.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_head.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.log.InvariantPredicate_auto_NrLog_tail.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_tail.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)
(declare-fun Poly%lib!exec.log.NrLogAppendExecDataGhost. (lib!exec.log.NrLogAppendExecDataGhost.) Poly)
(declare-fun %Poly%lib!exec.log.NrLogAppendExecDataGhost. (Poly) lib!exec.log.NrLogAppendExecDataGhost.)
(declare-fun Poly%lib!exec.log.AppendEntriesGhostState. (lib!exec.log.AppendEntriesGhostState.) Poly)
(declare-fun %Poly%lib!exec.log.AppendEntriesGhostState. (Poly) lib!exec.log.AppendEntriesGhostState.)
(declare-fun Poly%lib!exec.log.NrLogTokens. (lib!exec.log.NrLogTokens.) Poly)
(declare-fun %Poly%lib!exec.log.NrLogTokens. (Poly) lib!exec.log.NrLogTokens.)
(declare-fun Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken.) Poly)
(declare-fun %Poly%lib!exec.replica.ReplicaToken. (Poly) lib!exec.replica.ReplicaToken.)
(declare-fun Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.LogEntry. (Poly) lib!spec.types.LogEntry.)
(declare-fun Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.ConcreteLogEntry. (Poly) lib!spec.types.ConcreteLogEntry.)
(declare-fun Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.ReadonlyState. (Poly) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UpdateState. (Poly) lib!spec.unbounded_log.UpdateState.)
(declare-fun Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.CombinerState. (Poly) lib!spec.unbounded_log.CombinerState.)
(declare-fun Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.StoredType. (Poly) lib!spec.cyclicbuffer.StoredType.)
(declare-fun Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.ReaderState. (Poly) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CombinerState. (Poly) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun Poly%lib!exec.CachePadded. (lib!exec.CachePadded.) Poly)
(declare-fun %Poly%lib!exec.CachePadded. (Poly) lib!exec.CachePadded.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(declare-fun Poly%tuple%6. (tuple%6.) Poly)
(declare-fun %Poly%tuple%6. (Poly) tuple%6.)
(declare-fun Poly%tuple%9. (tuple%9.) Poly)
(declare-fun %Poly%tuple%9. (Poly) tuple%9.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)))))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)))))
(assert (forall ((x alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x vstd!atomic.PAtomicBool.)) (! (= x (%Poly%vstd!atomic.PAtomicBool. (Poly%vstd!atomic.PAtomicBool. x))) :pattern ((Poly%vstd!atomic.PAtomicBool. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicBool.) (= x (Poly%vstd!atomic.PAtomicBool. (%Poly%vstd!atomic.PAtomicBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicBool.)))))
(assert (forall ((x vstd!atomic.PAtomicBool.)) (! (has_type (Poly%vstd!atomic.PAtomicBool. x) TYPE%vstd!atomic.PAtomicBool.) :pattern ((has_type (Poly%vstd!atomic.PAtomicBool. x) TYPE%vstd!atomic.PAtomicBool.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PermissionBool.)) (! (= x (%Poly%vstd!atomic.PermissionBool. (Poly%vstd!atomic.PermissionBool. x))) :pattern ((Poly%vstd!atomic.PermissionBool. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionBool.) (= x (Poly%vstd!atomic.PermissionBool. (%Poly%vstd!atomic.PermissionBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionBool.)))))
(assert (forall ((x vstd!atomic.PermissionBool.)) (! (has_type (Poly%vstd!atomic.PermissionBool. x) TYPE%vstd!atomic.PermissionBool.) :pattern ((has_type (Poly%vstd!atomic.PermissionBool. x) TYPE%vstd!atomic.PermissionBool.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. (Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredBool. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (= x (Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. (%Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredBool. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. x) (TYPE%vstd!atomic_ghost.AtomicPredBool. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.>. x) (TYPE%vstd!atomic_ghost.AtomicPredBool. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)) (= x (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_head.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (= x (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)) (= x (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_tail.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)) (= x (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.))))))
(assert (forall ((x vstd!cell.CellId.)) (! (= x (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. x))) :pattern ((Poly%vstd!cell.CellId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!cell.CellId.) (= x (Poly%vstd!cell.CellId. (%Poly%vstd!cell.CellId. x)))) :pattern ((has_type x TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.) :pattern ((has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!invariant.OpenInvariantCredit.)) (! (= x (%Poly%vstd!invariant.OpenInvariantCredit. (Poly%vstd!invariant.OpenInvariantCredit. x))) :pattern ((Poly%vstd!invariant.OpenInvariantCredit. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!invariant.OpenInvariantCredit.) (= x (Poly%vstd!invariant.OpenInvariantCredit. (%Poly%vstd!invariant.OpenInvariantCredit. x)))) :pattern ((has_type x TYPE%vstd!invariant.OpenInvariantCredit.)))))
(assert (forall ((x vstd!invariant.OpenInvariantCredit.)) (! (has_type (Poly%vstd!invariant.OpenInvariantCredit. x) TYPE%vstd!invariant.OpenInvariantCredit.) :pattern ((has_type (Poly%vstd!invariant.OpenInvariantCredit. x) TYPE%vstd!invariant.OpenInvariantCredit.)))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (= x (%Poly%vstd!map.Map<nat./bool.>. (Poly%vstd!map.Map<nat./bool.>. x))) :pattern ((Poly%vstd!map.Map<nat./bool.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL)) (= x (Poly%vstd!map.Map<nat./bool.>. (%Poly%vstd!map.Map<nat./bool.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL)) :pattern ((has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) (= x (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))))))
(assert (forall ((x vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<vstd!cell.CellId.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!cell.CellId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.)) (= x (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.))))))
(assert (forall ((x vstd!seq.Seq<vstd!cell.CellId.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.)) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!atomic.PermissionDataBool.)) (! (= x (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. x))) :pattern ((Poly%vstd!atomic.PermissionDataBool. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataBool.) (= x (Poly%vstd!atomic.PermissionDataBool. (%Poly%vstd!atomic.PermissionDataBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionDataBool.)))))
(assert (forall ((x vstd!atomic.PermissionDataBool.)) (! (= (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic x) (vstd!atomic.PermissionDataBool./PermissionDataBool/?patomic x)) :pattern ((vstd!atomic.PermissionDataBool./PermissionDataBool/patomic x)))))
(assert (forall ((x vstd!atomic.PermissionDataBool.)) (! (= (vstd!atomic.PermissionDataBool./PermissionDataBool/value x) (vstd!atomic.PermissionDataBool./PermissionDataBool/?value x)) :pattern ((vstd!atomic.PermissionDataBool./PermissionDataBool/value x)))))
(assert (forall ((x vstd!atomic.PermissionDataBool.)) (! (has_type (Poly%vstd!atomic.PermissionDataBool. x) TYPE%vstd!atomic.PermissionDataBool.) :pattern ((has_type (Poly%vstd!atomic.PermissionDataBool. x) TYPE%vstd!atomic.PermissionDataBool.)))))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= x (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. x))) :pattern ((Poly%vstd!atomic.PermissionDataU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataU64.) (= x (Poly%vstd!atomic.PermissionDataU64. (%Poly%vstd!atomic.PermissionDataU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionDataU64.)))))
(assert (forall ((_patomic! Int) (_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64./PermissionDataU64 _patomic! _value!)) TYPE%vstd!atomic.PermissionDataU64.)) :pattern ((has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64./PermissionDataU64 _patomic! _value!)) TYPE%vstd!atomic.PermissionDataU64.)))))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic x) (vstd!atomic.PermissionDataU64./PermissionDataU64/?patomic x)) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/patomic x)))))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value x) (vstd!atomic.PermissionDataU64./PermissionDataU64/?value x)) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataU64.) (uInv 64 (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. x)))) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. x)) (has_type x TYPE%vstd!atomic.PermissionDataU64.)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicBool. (Poly%vstd!atomic_ghost.AtomicBool. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicBool. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicBool. (%Poly%vstd!atomic_ghost.AtomicBool. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicBool.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= (vstd!atomic_ghost.AtomicBool./AtomicBool/patomic x) (vstd!atomic_ghost.AtomicBool./AtomicBool/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x) (vstd!atomic_ghost.AtomicBool./AtomicBool/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicBool./AtomicBool_ ((c vstd!atomic_ghost.AtomicBool.)) Bool ((_ is vstd!atomic_ghost.AtomicBool./AtomicBool) c))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (=> (is-vstd!atomic_ghost.AtomicBool./AtomicBool_ x) (height_lt (height (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicBool. x)))) :pattern ((height (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= x (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. x))) :pattern ((Poly%vstd!cell.PointsToData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (= x (Poly%vstd!cell.PointsToData. (%Poly%vstd!cell.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_pcell! vstd!cell.CellId.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/pcell x) (vstd!cell.PointsToData./PointsToData/?pcell x)) :pattern ((vstd!cell.PointsToData./PointsToData/pcell x)))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/value x) (vstd!cell.PointsToData./PointsToData/?value x)) :pattern ((vstd!cell.PointsToData./PointsToData/value x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (has_type (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x)) (has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(define-fun is-vstd!cell.PointsToData./PointsToData_ ((c vstd!cell.PointsToData.)) Bool ((_ is vstd!cell.PointsToData./PointsToData) c))
(assert (forall ((x vstd!cell.PointsToData.)) (! (=> (is-vstd!cell.PointsToData./PointsToData_ x) (height_lt (height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x))) (height (Poly%vstd!cell.PointsToData. x)))) :pattern ((height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.types.LogEntry.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.types.LogEntry. _value!) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.log_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ x) (height_lt (height (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((height (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_value! Int)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _value!)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data _instance! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data _instance! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! Poly)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type _value! (proj%lib!Dispatch./View DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! Int)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (<= 0 _value!)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_value! Int)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _value!)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data _instance! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data _instance! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.ReadonlyState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. _value!) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.UpdateState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.UpdateState. _value!) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.CombinerState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. _value!) TYPE%lib!spec.unbounded_log.CombinerState.)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_value! Int)) (! (=> (and (has_type _instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _value!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data _instance! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data _instance! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_value! Int)) (! (=> (and (has_type _instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _value!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data _instance! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data _instance! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! Int)) (! (=> (and (has_type _instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _key!) (<= 0 _value!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key x) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?key x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! Bool)) (! (=> (and (has_type _instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _key!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key x) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?key x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value x)))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.cyclicbuffer.CombinerState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. _value!) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?key x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x)))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= x (%Poly%lib!exec.log.BufferEntry. (Poly%lib!exec.log.BufferEntry. x))) :pattern ((Poly%lib!exec.log.BufferEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (= x (Poly%lib!exec.log.BufferEntry. (%Poly%lib!exec.log.BufferEntry. x)))) :pattern ((has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_log_entry! Poly) (_alive! vstd!atomic_ghost.AtomicBool.) (_cyclic_buffer_idx! Int) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type _log_entry! (TYPE%vstd!cell.PCell. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)))) (has_type (Poly%vstd!atomic_ghost.AtomicBool. _alive!) (TYPE%vstd!atomic_ghost.AtomicBool. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (<= 0 _cyclic_buffer_idx!) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry./BufferEntry _log_entry! _alive! _cyclic_buffer_idx! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.BufferEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry./BufferEntry _log_entry! _alive! _cyclic_buffer_idx! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/log_entry x) (lib!exec.log.BufferEntry./BufferEntry/?log_entry x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/log_entry x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. x)) (TYPE%vstd!cell.PCell. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/alive x) (lib!exec.log.BufferEntry./BufferEntry/?alive x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/alive x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. x))) (TYPE%vstd!atomic_ghost.AtomicBool. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx x) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_idx x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (<= 0 (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. x)))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_instance x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(define-fun is-lib!exec.log.BufferEntry./BufferEntry_ ((c lib!exec.log.BufferEntry.)) Bool ((_ is lib!exec.log.BufferEntry./BufferEntry) c))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (lib!exec.log.BufferEntry./BufferEntry/log_entry x)) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (lib!exec.log.BufferEntry./BufferEntry/log_entry x))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive x))) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive x)))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x)) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (%Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x) TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x) TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= x (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. x))) :pattern ((Poly%lib!exec.log.NrLog. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (= x (Poly%lib!exec.log.NrLog. (%Poly%lib!exec.log.NrLog. x)))) :pattern ((has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_slog! Poly) (_version_upper_bound! lib!exec.CachePadded.) (_head! lib!exec.CachePadded.) (_tail! lib!exec.CachePadded.) (_local_versions! Poly) (_num_replicas! Int) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type _slog! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type (Poly%lib!exec.CachePadded. _version_upper_bound!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.))) (has_type (Poly%lib!exec.CachePadded. _head!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.))) (has_type (Poly%lib!exec.CachePadded. _tail!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.))) (has_type _local_versions! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.)) (<= 0 _num_replicas!) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog./NrLog _slog! _version_upper_bound! _head! _tail! _local_versions! _num_replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLog. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog./NrLog _slog! _version_upper_bound! _head! _tail! _local_versions! _num_replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/slog x) (lib!exec.log.NrLog./NrLog/?slog x)) :pattern ((lib!exec.log.NrLog./NrLog/slog x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/version_upper_bound x) (lib!exec.log.NrLog./NrLog/?version_upper_bound x)) :pattern ((lib!exec.log.NrLog./NrLog/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))) :pattern ((lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/head x) (lib!exec.log.NrLog./NrLog/?head x)) :pattern ((lib!exec.log.NrLog./NrLog/head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))) :pattern ((lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/tail x) (lib!exec.log.NrLog./NrLog/?tail x)) :pattern ((lib!exec.log.NrLog./NrLog/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))) :pattern ((lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/local_versions x) (lib!exec.log.NrLog./NrLog/?local_versions x)) :pattern ((lib!exec.log.NrLog./NrLog/local_versions x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/num_replicas x) (lib!exec.log.NrLog./NrLog/?num_replicas x)) :pattern ((lib!exec.log.NrLog./NrLog/num_replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (<= 0 (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. x)))) :pattern ((lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/unbounded_log_instance x) (lib!exec.log.NrLog./NrLog/?unbounded_log_instance x)) :pattern ((lib!exec.log.NrLog./NrLog/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x) (lib!exec.log.NrLog./NrLog/?cyclic_buffer_instance x)) :pattern ((lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(define-fun is-lib!exec.log.NrLog./NrLog_ ((c lib!exec.log.NrLog.)) Bool ((_ is lib!exec.log.NrLog./NrLog) c))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/slog x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/slog x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/local_versions x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/local_versions x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/unbounded_log_instance x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_head.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_head.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_tail.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_tail.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (= x (%Poly%lib!exec.log.NrLogAppendExecDataGhost. (Poly%lib!exec.log.NrLogAppendExecDataGhost. x))) :pattern ((Poly%lib!exec.log.NrLogAppendExecDataGhost. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&)) (= x (Poly%lib!exec.log.NrLogAppendExecDataGhost. (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)))) :pattern ((has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_local_updates! Poly) (_ghost_replica! Poly) (_combiner! Poly) (_cb_combiner! Poly) (_request_ids! vstd!seq.Seq<nat.>.)) (! (=> (and (has_type _local_updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) (has_type _ghost_replica! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type _combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type _cb_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) (has_type (Poly%lib!exec.log.NrLogAppendExecDataGhost. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost _local_updates! _ghost_replica! _combiner! _cb_combiner! _request_ids!)) (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.NrLogAppendExecDataGhost. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost _local_updates! _ghost_replica! _combiner! _cb_combiner! _request_ids!)) (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates x) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?local_updates x)) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&)) (has_type (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)) (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica x) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?ghost_replica x)) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&)) (has_type (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)) (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner x) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?combiner x)) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&)) (has_type (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)) (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner x) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?cb_combiner x)) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&)) (has_type (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. x)) (has_type x (TYPE%lib!exec.log.NrLogAppendExecDataGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids x) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/?request_ids x)) :pattern ((lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids x)))))
(define-fun is-lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost_ ((c lib!exec.log.NrLogAppendExecDataGhost.)) Bool ((_ is lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost) c))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (=> (is-lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost_ x) (height_lt (height (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates x)) (height (Poly%lib!exec.log.NrLogAppendExecDataGhost. x)))) :pattern ((height (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates x))))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (=> (is-lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost_ x) (height_lt (height (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica x)) (height (Poly%lib!exec.log.NrLogAppendExecDataGhost. x)))) :pattern ((height (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica x))))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (=> (is-lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost_ x) (height_lt (height (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner x)) (height (Poly%lib!exec.log.NrLogAppendExecDataGhost. x)))) :pattern ((height (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner x))))))
(assert (forall ((x lib!exec.log.NrLogAppendExecDataGhost.)) (! (=> (is-lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost_ x) (height_lt (height (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner x)) (height (Poly%lib!exec.log.NrLogAppendExecDataGhost. x)))) :pattern ((height (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner x))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= x (%Poly%lib!exec.log.AppendEntriesGhostState. (Poly%lib!exec.log.AppendEntriesGhostState. x))) :pattern ((Poly%lib!exec.log.AppendEntriesGhostState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&)) (= x (Poly%lib!exec.log.AppendEntriesGhostState. (%Poly%lib!exec.log.AppendEntriesGhostState. x)))) :pattern ((has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_idx! Int) (_old_tail! Int) (_log_entries! Poly) (_local_updates! Poly) (_combiner! Poly) (_tail! Poly) (_request_ids! vstd!seq.Seq<nat.>.) (_operations! Poly)) (! (=> (and (<= 0 _idx!) (<= 0 _old_tail!) (has_type _log_entries! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&))) (has_type _local_updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) (has_type _combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type _tail! (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&)) (has_type _operations! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) (has_type (Poly%lib!exec.log.AppendEntriesGhostState. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState _idx! _old_tail! _log_entries! _local_updates! _combiner! _tail! _request_ids! _operations!)) (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.AppendEntriesGhostState. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState _idx! _old_tail! _log_entries! _local_updates! _combiner! _tail! _request_ids! _operations!)) (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx x) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?idx x)) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&)) (<= 0 (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. x)))) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/old_tail x) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?old_tail x)) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/old_tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&)) (<= 0 (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/old_tail (%Poly%lib!exec.log.AppendEntriesGhostState. x)))) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/old_tail (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries x) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?log_entries x)) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&)) (has_type (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates x) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?local_updates x)) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&)) (has_type (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner x) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?combiner x)) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&)) (has_type (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail x) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?tail x)) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&)) (has_type (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&))) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids x) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?request_ids x)) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids x)))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations x) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/?operations x)) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&)) (has_type (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) :pattern ((lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations (%Poly%lib!exec.log.AppendEntriesGhostState. x)) (has_type x (TYPE%lib!exec.log.AppendEntriesGhostState. DT&. DT&))))))
(define-fun is-lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState_ ((c lib!exec.log.AppendEntriesGhostState.)) Bool ((_ is lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState) c))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (=> (is-lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState_ x) (height_lt (height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries x)) (height (Poly%lib!exec.log.AppendEntriesGhostState. x)))) :pattern ((height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries x))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (=> (is-lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState_ x) (height_lt (height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates x)) (height (Poly%lib!exec.log.AppendEntriesGhostState. x)))) :pattern ((height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates x))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (=> (is-lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState_ x) (height_lt (height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner x)) (height (Poly%lib!exec.log.AppendEntriesGhostState. x)))) :pattern ((height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner x))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (=> (is-lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState_ x) (height_lt (height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail x)) (height (Poly%lib!exec.log.AppendEntriesGhostState. x)))) :pattern ((height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail x))))))
(assert (forall ((x lib!exec.log.AppendEntriesGhostState.)) (! (=> (is-lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState_ x) (height_lt (height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations x)) (height (Poly%lib!exec.log.AppendEntriesGhostState. x)))) :pattern ((height (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= x (%Poly%lib!exec.log.NrLogTokens. (Poly%lib!exec.log.NrLogTokens. x))) :pattern ((Poly%lib!exec.log.NrLogTokens. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (= x (Poly%lib!exec.log.NrLogTokens. (%Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_num_replicas! Int) (_replicas! Poly) (_combiners! Poly) (_cb_combiners! Poly) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly)) (! (=> (and (<= 0 _num_replicas!) (has_type _replicas! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) (has_type _combiners! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (has_type _cb_combiners! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.log.NrLogTokens. (lib!exec.log.NrLogTokens./NrLogTokens _num_replicas! _replicas! _combiners! _cb_combiners! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.NrLogTokens. (lib!exec.log.NrLogTokens./NrLogTokens _num_replicas! _replicas! _combiners! _cb_combiners! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas x) (lib!exec.log.NrLogTokens./NrLogTokens/?num_replicas x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/num_replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (<= 0 (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/replicas x) (lib!exec.log.NrLogTokens./NrLogTokens/?replicas x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/combiners x) (lib!exec.log.NrLogTokens./NrLogTokens/?combiners x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/combiners x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners x) (lib!exec.log.NrLogTokens./NrLogTokens/?cb_combiners x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance x) (lib!exec.log.NrLogTokens./NrLogTokens/?unbounded_log_instance x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance x) (lib!exec.log.NrLogTokens./NrLogTokens/?cyclic_buffer_instance x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(define-fun is-lib!exec.log.NrLogTokens./NrLogTokens_ ((c lib!exec.log.NrLogTokens.)) Bool ((_ is lib!exec.log.NrLogTokens./NrLogTokens) c))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/replicas x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/replicas x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/combiners x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/combiners x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.replica.ReplicaToken.)) (! (= x (%Poly%lib!exec.replica.ReplicaToken. (Poly%lib!exec.replica.ReplicaToken. x))) :pattern ((Poly%lib!exec.replica.ReplicaToken. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.ReplicaToken.) (= x (Poly%lib!exec.replica.ReplicaToken. (%Poly%lib!exec.replica.ReplicaToken. x)))) :pattern ((has_type x TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((_rid! Int)) (! (=> (uInv SZ _rid!) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken./ReplicaToken _rid!)) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken./ReplicaToken _rid!)) TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((x lib!exec.replica.ReplicaToken.)) (! (= (lib!exec.replica.ReplicaToken./ReplicaToken/rid x) (lib!exec.replica.ReplicaToken./ReplicaToken/?rid x)) :pattern ((lib!exec.replica.ReplicaToken./ReplicaToken/rid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.ReplicaToken.) (uInv SZ (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. x)))) :pattern ((lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. x)) (has_type x TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= x (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. x))) :pattern ((Poly%lib!spec.types.LogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.LogEntry. (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _node_id!)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/op x) (lib!spec.types.LogEntry./LogEntry/?op x)) :pattern ((lib!spec.types.LogEntry./LogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (has_type (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/node_id x) (lib!spec.types.LogEntry./LogEntry/?node_id x)) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (<= 0 (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= x (%Poly%lib!spec.types.ConcreteLogEntry. (Poly%lib!spec.types.ConcreteLogEntry. x))) :pattern ((Poly%lib!spec.types.ConcreteLogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.ConcreteLogEntry. (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (uInv 64 _node_id!)) (has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (has_type (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (uInv 64 (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= x (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. x))) :pattern ((Poly%lib!spec.unbounded_log.ReadonlyState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.ReadonlyState. (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Init/op x) (lib!spec.unbounded_log.ReadonlyState./Init/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int) (_ret! Poly)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!) (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/op x) (lib!spec.unbounded_log.ReadonlyState./Done/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/node_id x) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/ret x) (lib!spec.unbounded_log.ReadonlyState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= x (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. x))) :pattern ((Poly%lib!spec.unbounded_log.UpdateState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UpdateState. (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Init/op x) (lib!spec.unbounded_log.UpdateState./Init/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_idx! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/op x) (lib!spec.unbounded_log.UpdateState./Placed/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/idx x) (lib!spec.unbounded_log.UpdateState./Placed/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/ret x) (lib!spec.unbounded_log.UpdateState./Applied/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/idx x) (lib!spec.unbounded_log.UpdateState./Applied/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/ret x) (lib!spec.unbounded_log.UpdateState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/idx x) (lib!spec.unbounded_log.UpdateState./Done/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= x (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. x))) :pattern ((Poly%lib!spec.unbounded_log.CombinerState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (= x (Poly%lib!spec.unbounded_log.CombinerState. (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (has_type (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready) TYPE%lib!spec.unbounded_log.CombinerState.))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.)) (! (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Placed/queued_ops x) (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Placed/queued_ops x)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int)) (! (=> (<= 0 _lversion!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int) (_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _lversion!) (<= 0 _idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/queued_ops x) (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/lversion x) (lib!spec.unbounded_log.CombinerState./Loop/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/idx x) (lib!spec.unbounded_log.CombinerState./Loop/?idx x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/tail x) (lib!spec.unbounded_log.CombinerState./Loop/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_tail! Int)) (! (=> (<= 0 _tail!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= x (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. x))) :pattern ((Poly%lib!spec.cyclicbuffer.StoredType. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.StoredType. (%Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cell_perms! Poly) (_log_entry! core!option.Option.)) (! (=> (and (has_type _cell_perms! (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)))) (has_type (Poly%core!option.Option. _log_entry!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x) (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.StoredType./StoredType_ ((c lib!spec.cyclicbuffer.StoredType.)) Bool ((_ is lib!spec.cyclicbuffer.StoredType./StoredType) c))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x))) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.ReaderState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.ReaderState. (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int)) (! (=> (<= 0 _start!) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Starting/start x) (lib!spec.cyclicbuffer.ReaderState./Starting/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/start x) (lib!spec.cyclicbuffer.ReaderState./Range/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/end x) (lib!spec.cyclicbuffer.ReaderState./Range/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/cur x) (lib!spec.cyclicbuffer.ReaderState./Range/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int) (_val! lib!spec.cyclicbuffer.StoredType.)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. _val!) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/start x) (lib!spec.cyclicbuffer.ReaderState./Guard/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/end x) (lib!spec.cyclicbuffer.ReaderState./Guard/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/cur x) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/val x) (lib!spec.cyclicbuffer.ReaderState./Guard/?val x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x))) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Guard_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Guard) c))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (=> (is-lib!spec.cyclicbuffer.ReaderState./Guard_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x))) (height (Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CombinerState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CombinerState. (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.cyclicbuffer.ReaderState.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. _0!) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Reading/0 x) (lib!spec.cyclicbuffer.CombinerState./Reading/?0 x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x))) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_idx! Int) (_min_local_version! Int)) (! (=> (and (<= 0 _idx!) (<= 0 _min_local_version!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_observed_head! Int)) (! (=> (<= 0 _observed_head!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cur_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _cur_idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x) (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/tail x) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Reading_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Reading) c))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (=> (is-lib!spec.cyclicbuffer.CombinerState./Reading_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x))) (height (Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))))
(assert (forall ((x lib!exec.CachePadded.)) (! (= x (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. x))) :pattern ((Poly%lib!exec.CachePadded. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (= x (Poly%lib!exec.CachePadded. (%Poly%lib!exec.CachePadded. x)))) :pattern ((has_type x (TYPE%lib!exec.CachePadded. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))) :pattern ((has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))))))
(assert (forall ((x lib!exec.CachePadded.)) (! (= (lib!exec.CachePadded./CachePadded/0 x) (lib!exec.CachePadded./CachePadded/?0 x)) :pattern ((lib!exec.CachePadded./CachePadded/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (has_type (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) T&)) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) (has_type x (TYPE%lib!exec.CachePadded. T&. T&))))))
(define-fun is-lib!exec.CachePadded./CachePadded_ ((c lib!exec.CachePadded.)) Bool ((_ is lib!exec.CachePadded./CachePadded) c))
(assert (forall ((x lib!exec.CachePadded.)) (! (=> (is-lib!exec.CachePadded./CachePadded_ x) (height_lt (height (lib!exec.CachePadded./CachePadded/0 x)) (height (Poly%lib!exec.CachePadded. x)))) :pattern ((height (lib!exec.CachePadded./CachePadded/0 x))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(assert (forall ((x tuple%6.)) (! (= x (%Poly%tuple%6. (Poly%tuple%6. x))) :pattern ((Poly%tuple%6. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (= x (Poly%tuple%6. (%Poly%tuple%6. x)))) :pattern ((has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&)) (has_type (Poly%tuple%6. (tuple%6./tuple%6 _0! _1! _2! _3! _4! _5!)) (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) :pattern ((has_type (Poly%tuple%6. (tuple%6./tuple%6 _0! _1! _2! _3! _4! _5!)) (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/0 x) (tuple%6./tuple%6/?0 x)) :pattern ((tuple%6./tuple%6/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/0 (%Poly%tuple%6. x)) T%0&)) :pattern ((tuple%6./tuple%6/0 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/1 x) (tuple%6./tuple%6/?1 x)) :pattern ((tuple%6./tuple%6/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/1 (%Poly%tuple%6. x)) T%1&)) :pattern ((tuple%6./tuple%6/1 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/2 x) (tuple%6./tuple%6/?2 x)) :pattern ((tuple%6./tuple%6/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/2 (%Poly%tuple%6. x)) T%2&)) :pattern ((tuple%6./tuple%6/2 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/3 x) (tuple%6./tuple%6/?3 x)) :pattern ((tuple%6./tuple%6/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/3 (%Poly%tuple%6. x)) T%3&)) :pattern ((tuple%6./tuple%6/3 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/4 x) (tuple%6./tuple%6/?4 x)) :pattern ((tuple%6./tuple%6/4 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/4 (%Poly%tuple%6. x)) T%4&)) :pattern ((tuple%6./tuple%6/4 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/5 x) (tuple%6./tuple%6/?5 x)) :pattern ((tuple%6./tuple%6/5 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/5 (%Poly%tuple%6. x)) T%5&)) :pattern ((tuple%6./tuple%6/5 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(define-fun is-tuple%6./tuple%6_ ((c tuple%6.)) Bool ((_ is tuple%6./tuple%6) c))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/0 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/0 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/1 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/1 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/2 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/2 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/3 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/3 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/4 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/4 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/5 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/5 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type y (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (ext_eq deep T%0& (tuple%6./tuple%6/0 (%Poly%tuple%6. x)) (tuple%6./tuple%6/0 (%Poly%tuple%6. y))) (ext_eq deep T%1& (tuple%6./tuple%6/1 (%Poly%tuple%6. x)) (tuple%6./tuple%6/1 (%Poly%tuple%6. y))) (ext_eq deep T%2& (tuple%6./tuple%6/2 (%Poly%tuple%6. x)) (tuple%6./tuple%6/2 (%Poly%tuple%6. y))) (ext_eq deep T%3& (tuple%6./tuple%6/3 (%Poly%tuple%6. x)) (tuple%6./tuple%6/3 (%Poly%tuple%6. y))) (ext_eq deep T%4& (tuple%6./tuple%6/4 (%Poly%tuple%6. x)) (tuple%6./tuple%6/4 (%Poly%tuple%6. y))) (ext_eq deep T%5& (tuple%6./tuple%6/5 (%Poly%tuple%6. x)) (tuple%6./tuple%6/5 (%Poly%tuple%6. y)))) (ext_eq deep (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&) x y)) :pattern ((ext_eq deep (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&) x y)))))
(assert (forall ((x tuple%9.)) (! (= x (%Poly%tuple%9. (Poly%tuple%9. x))) :pattern ((Poly%tuple%9. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (= x (Poly%tuple%9. (%Poly%tuple%9. x)))) :pattern ((has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly) (_6! Poly) (_7! Poly) (_8! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&) (has_type _6! T%6&) (has_type _7! T%7&) (has_type _8! T%8&)) (has_type (Poly%tuple%9. (tuple%9./tuple%9 _0! _1! _2! _3! _4! _5! _6! _7! _8!)) (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) :pattern ((has_type (Poly%tuple%9. (tuple%9./tuple%9 _0! _1! _2! _3! _4! _5! _6! _7! _8!)) (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/0 x) (tuple%9./tuple%9/?0 x)) :pattern ((tuple%9./tuple%9/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/0 (%Poly%tuple%9. x)) T%0&)) :pattern ((tuple%9./tuple%9/0 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/1 x) (tuple%9./tuple%9/?1 x)) :pattern ((tuple%9./tuple%9/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/1 (%Poly%tuple%9. x)) T%1&)) :pattern ((tuple%9./tuple%9/1 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/2 x) (tuple%9./tuple%9/?2 x)) :pattern ((tuple%9./tuple%9/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/2 (%Poly%tuple%9. x)) T%2&)) :pattern ((tuple%9./tuple%9/2 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/3 x) (tuple%9./tuple%9/?3 x)) :pattern ((tuple%9./tuple%9/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/3 (%Poly%tuple%9. x)) T%3&)) :pattern ((tuple%9./tuple%9/3 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/4 x) (tuple%9./tuple%9/?4 x)) :pattern ((tuple%9./tuple%9/4 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/4 (%Poly%tuple%9. x)) T%4&)) :pattern ((tuple%9./tuple%9/4 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/5 x) (tuple%9./tuple%9/?5 x)) :pattern ((tuple%9./tuple%9/5 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/5 (%Poly%tuple%9. x)) T%5&)) :pattern ((tuple%9./tuple%9/5 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/6 x) (tuple%9./tuple%9/?6 x)) :pattern ((tuple%9./tuple%9/6 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/6 (%Poly%tuple%9. x)) T%6&)) :pattern ((tuple%9./tuple%9/6 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/7 x) (tuple%9./tuple%9/?7 x)) :pattern ((tuple%9./tuple%9/7 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/7 (%Poly%tuple%9. x)) T%7&)) :pattern ((tuple%9./tuple%9/7 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/8 x) (tuple%9./tuple%9/?8 x)) :pattern ((tuple%9./tuple%9/8 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/8 (%Poly%tuple%9. x)) T%8&)) :pattern ((tuple%9./tuple%9/8 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))))))
(define-fun is-tuple%9./tuple%9_ ((c tuple%9.)) Bool ((_ is tuple%9./tuple%9) c))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/0 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/0 x))))))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/1 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/1 x))))))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/2 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/2 x))))))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/3 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/3 x))))))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/4 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/4 x))))))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/5 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/5 x))))))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/6 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/6 x))))))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/7 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/7 x))))))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/8 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/8 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type y (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (ext_eq deep T%0& (tuple%9./tuple%9/0 (%Poly%tuple%9. x)) (tuple%9./tuple%9/0 (%Poly%tuple%9. y))) (ext_eq deep T%1& (tuple%9./tuple%9/1 (%Poly%tuple%9. x)) (tuple%9./tuple%9/1 (%Poly%tuple%9. y))) (ext_eq deep T%2& (tuple%9./tuple%9/2 (%Poly%tuple%9. x)) (tuple%9./tuple%9/2 (%Poly%tuple%9. y))) (ext_eq deep T%3& (tuple%9./tuple%9/3 (%Poly%tuple%9. x)) (tuple%9./tuple%9/3 (%Poly%tuple%9. y))) (ext_eq deep T%4& (tuple%9./tuple%9/4 (%Poly%tuple%9. x)) (tuple%9./tuple%9/4 (%Poly%tuple%9. y))) (ext_eq deep T%5& (tuple%9./tuple%9/5 (%Poly%tuple%9. x)) (tuple%9./tuple%9/5 (%Poly%tuple%9. y))) (ext_eq deep T%6& (tuple%9./tuple%9/6 (%Poly%tuple%9. x)) (tuple%9./tuple%9/6 (%Poly%tuple%9. y))) (ext_eq deep T%7& (tuple%9./tuple%9/7 (%Poly%tuple%9. x)) (tuple%9./tuple%9/7 (%Poly%tuple%9. y))) (ext_eq deep T%8& (tuple%9./tuple%9/8 (%Poly%tuple%9. x)) (tuple%9./tuple%9/8 (%Poly%tuple%9. y)))) (ext_eq deep (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&) x y)) :pattern ((ext_eq deep (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!invariant.InvariantPredicate. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_len")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%0::view")
(declare-fun vstd!atomic.impl&%0.view.? (Poly) vstd!atomic.PermissionDataBool.)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%1::id")
(declare-fun vstd!atomic.impl&%1.id.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%8::view")
(declare-fun vstd!atomic.impl&%8.view.? (Poly) vstd!atomic.PermissionDataU64.)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%9::id")
(declare-fun vstd!atomic.impl&%9.id.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::AtomicInvariantPredicate::atomic_inv")
(declare-fun vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::well_formed")
(declare-fun vstd!atomic_ghost.impl&%1.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::constant")
(declare-fun vstd!atomic_ghost.impl&%1.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%21::well_formed")
(declare-fun vstd!atomic_ghost.impl&%21.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%21::constant")
(declare-fun vstd!atomic_ghost.impl&%21.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::cell::impl&%2::view")
(declare-fun vstd!cell.impl&%2.view.? (Dcr Type Poly) vstd!cell.PointsToData.)
(set-info :comment ";; Function-Decl vstd::cell::impl&%3::id")
(declare-fun vstd!cell.impl&%3.id.? (Dcr Type Poly) vstd!cell.CellId.)
(set-info :comment ";; Function-Decl vstd::invariant::InvariantPredicate::inv")
(declare-fun vstd!invariant.InvariantPredicate.inv.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!invariant.InvariantPredicate.inv%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::impl&%0::constant")
(declare-fun vstd!invariant.impl&%0.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::AtomicInvariant::namespace")
(declare-fun vstd!invariant.AtomicInvariant.namespace.? (Dcr Type Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::invariant::AtomicInvariant::inv")
(declare-fun vstd!invariant.AtomicInvariant.inv.? (Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::log::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.log_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::log::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::log::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::tail::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.tail_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::replicas::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::replicas::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::replicas::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_versions::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_versions::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_versions::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::version_upper_bound::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_reads::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_reads::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_reads::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_updates::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_updates::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_updates::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::combiner::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::combiner::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::combiner::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Instance::num_replicas")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::head::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::tail::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::local_versions::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::local_versions::map_agree")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::local_versions::map_agree_strict")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::map_agree")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::map_agree_strict")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::combiner::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::combiner::map_agree")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::combiner::map_agree_strict")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::unbounded_log_instance")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::cell_ids")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? (Dcr Type Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::buffer_size")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::num_replicas")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::log::BufferEntry::wf")
(declare-fun lib!exec.log.impl&%1.wf.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLog::wf")
(declare-fun lib!exec.log.impl&%6.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLog::index_spec")
(declare-fun lib!exec.log.impl&%7.index_spec.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::log::NrLog::is_alive_value_spec")
(declare-fun lib!exec.log.impl&%7.is_alive_value_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::common_pred")
(declare-fun lib!exec.log.impl&%8.common_pred.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::append_pre")
(declare-fun lib!exec.log.impl&%8.append_pre.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::append_post")
(declare-fun lib!exec.log.impl&%8.append_post.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::execute_pre")
(declare-fun lib!exec.log.impl&%8.execute_pre.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::execute_post")
(declare-fun lib!exec.log.impl&%8.execute_post.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::advance_head_pre")
(declare-fun lib!exec.log.impl&%8.advance_head_pre.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::advance_head_post")
(declare-fun lib!exec.log.impl&%8.advance_head_post.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::pre_exec")
(declare-fun lib!exec.log.impl&%8.pre_exec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogAppendExecDataGhost::post_exec")
(declare-fun lib!exec.log.impl&%8.post_exec.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::AppendEntriesGhostState::wf")
(declare-fun lib!exec.log.impl&%9.wf.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::log::NrLogTokens::wf")
(declare-fun lib!exec.log.impl&%10.wf.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::wf")
(declare-fun lib!exec.replica.impl&%0.wf.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::id_spec")
(declare-fun lib!exec.replica.impl&%0.id_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::view")
(declare-fun lib!exec.replica.impl&%0.view.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_Init")
(declare-fun lib!spec.unbounded_log.impl&%0.is_Init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_VersionUpperBound")
(declare-fun lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_VersionUpperBound_op")
(declare-fun lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_VersionUpperBound_version_upper_bound")
(declare-fun lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_ReadyToRead")
(declare-fun lib!spec.unbounded_log.impl&%0.is_ReadyToRead.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_op")
(declare-fun lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_node_id")
(declare-fun lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Init")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Placed")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Placed.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Placed_op")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Placed_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Applied")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Applied.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Applied_ret")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Applied_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Applied_idx")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Applied_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Done")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_Ready")
(declare-fun lib!spec.unbounded_log.impl&%5.is_Ready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_Placed")
(declare-fun lib!spec.unbounded_log.impl&%5.is_Placed.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Placed_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_Loop")
(declare-fun lib!spec.unbounded_log.impl&%5.is_Loop.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_lversion")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_idx")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_tail")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_tail.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%7.queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::stored_type_inv")
(declare-fun lib!spec.cyclicbuffer.stored_type_inv.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::is_Starting")
(declare-fun lib!spec.cyclicbuffer.impl&%0.is_Starting.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::is_Range")
(declare-fun lib!spec.cyclicbuffer.impl&%0.is_Range.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Range_end")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Range_end.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Range_cur")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::is_Guard")
(declare-fun lib!spec.cyclicbuffer.impl&%0.is_Guard.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Guard_end")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Guard_cur")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Idle")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Idle.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Reading")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Reading.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Reading_0")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.ReaderState.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_AdvancingHead")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_AdvancingHead_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_AdvancingHead_min_local_version")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Appending")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Appending.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Appending_cur_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Appending_tail")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::min")
(declare-fun lib!spec.cyclicbuffer.min.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::log_entry_idx")
(declare-fun lib!spec.cyclicbuffer.log_entry_idx.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::log_entry_alive_value")
(declare-fun lib!spec.cyclicbuffer.log_entry_alive_value.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::constants::MAX_REPLICAS")
(declare-fun lib!constants.MAX_REPLICAS.? () Int)
(set-info :comment ";; Function-Decl lib::constants::LOG_SIZE")
(declare-fun lib!constants.LOG_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::constants::MAX_THREADS_PER_REPLICA")
(declare-fun lib!constants.MAX_THREADS_PER_REPLICA.? () Int)
(set-info :comment ";; Function-Decl lib::constants::MAX_PENDING_OPS")
(declare-fun lib!constants.MAX_PENDING_OPS.? () Int)
(set-info :comment ";; Function-Decl lib::constants::MAX_REQUESTS")
(declare-fun lib!constants.MAX_REQUESTS.? () Int)
(set-info :comment ";; Function-Decl lib::constants::GC_FROM_HEAD")
(declare-fun lib!constants.GC_FROM_HEAD.? () Int)
(set-info :comment ";; Function-Decl lib::constants::WARN_THRESHOLD")
(declare-fun lib!constants.WARN_THRESHOLD.? () Int)
(set-info :comment ";; Function-Decl lib::constants::MAX_IDX")
(declare-fun lib!constants.MAX_IDX.? () Int)
(set-info :comment ";; Function-Decl lib::Dispatch::view")
(declare-fun lib!Dispatch.view.? (Dcr Type Poly) Poly)
(declare-fun lib!Dispatch.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::init_spec")
(declare-fun lib!Dispatch.init_spec.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.init_spec%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_mut_spec")
(declare-fun lib!Dispatch.dispatch_mut_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_mut_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Axioms lib::Dispatch::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!Dispatch.view.? Self%&. Self%& self!) (proj%lib!Dispatch./View Self%&. Self%&))) :pattern ((lib!Dispatch.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::Dispatch::init_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!Dispatch.init_spec.? Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&)) :pattern ((lib!Dispatch.init_spec.? Self%&. Self%&)))))
(set-info :comment ";; Function-Specs lib::Dispatch::clone_write_op")
(declare-fun ens%lib!Dispatch.clone_write_op. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (op! Poly) (res! Poly)) (! (= (ens%lib!Dispatch.clone_write_op. Self%&. Self%& op! res!) (and (has_type res! (proj%lib!Dispatch./WriteOperation Self%&. Self%&)) (= op! res!))) :pattern ((ens%lib!Dispatch.clone_write_op. Self%&. Self%& op! res!)))))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_mut_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./WriteOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!) (TYPE%tuple%2. (proj%%lib!Dispatch./View Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&) (proj%%lib!Dispatch./Response Self%&. Self%&) (proj%lib!Dispatch./Response Self%&. Self%&)))) :pattern ((lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!)))))
(set-info :comment ";; Function-Specs lib::Dispatch::dispatch_mut")
(declare-fun ens%lib!Dispatch.dispatch_mut. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly) (op! Poly) (result! Poly)) (! (= (ens%lib!Dispatch.dispatch_mut. Self%&. Self%& pre%self! self! op! result!) (and (has_type result! (proj%lib!Dispatch./Response Self%&. Self%&)) (has_type self! Self%&) (= (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& (lib!Dispatch.view.? Self%&. Self%& pre%self!) op!)) (tuple%2./tuple%2 (lib!Dispatch.view.? Self%&. Self%& self!) result!)))) :pattern ((ens%lib!Dispatch.dispatch_mut. Self%&. Self%& pre%self! self! op! result!)))))
(set-info :comment ";; Function-Axioms lib::constants::MAX_REPLICAS")
(assert (fuel_bool_default fuel%lib!constants.MAX_REPLICAS.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_REPLICAS.) (= lib!constants.MAX_REPLICAS.? 16)))
(assert (uInv SZ lib!constants.MAX_REPLICAS.?))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_len")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!) NAT)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (%I (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Init")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Init.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Init_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_updates::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Done.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Done_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_Init")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_Init.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Init_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_Init.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_reads::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Placed")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Placed.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Placed_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Placed) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Placed.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Placed.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Placed.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Applied")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Applied.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Applied_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Applied) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Applied.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Applied.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Applied.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%7.queued_ops.))
(define-fun is-lib!spec.unbounded_log.CombinerState./Ready_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Ready) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./Placed_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Placed) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./LoadedLocalVersion) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./Loop_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Loop) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%7.queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%7.queued_ops.? self!) (ite (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.empty.? $ NAT)) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$)))))) :pattern ((lib!spec.unbounded_log.impl&%7.queued_ops.? self!))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs core::option::impl&%0::as_ref")
(declare-fun ens%core!option.impl&%0.as_ref. (Dcr Type core!option.Option. core!option.Option.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (a! core!option.Option.)) (! (= (ens%core!option.impl&%0.as_ref. T&. T& option! a!) (and (has_type (Poly%core!option.Option. a!) (TYPE%core!option.Option. (REF T&.) T&)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. a!)))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. option!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. a!))))) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. a!))))))) :pattern ((ens%core!option.impl&%0.as_ref. T&. T& option! a!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%5 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%6 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. option!))))))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)))))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::vec_index")
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%7 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)))))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::axiom_spec_len")
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)))))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::with_capacity")
(declare-fun ens%alloc!vec.impl&%0.with_capacity. (Dcr Type Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (capacity! Int) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.with_capacity. T&. T& capacity! v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.with_capacity. T&. T& capacity! v!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::push")
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%8 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%9 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%1::load")
(declare-fun req%vstd!atomic.impl&%1.load. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool.) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (perm! vstd!atomic.PermissionBool.)) (! (= (req%vstd!atomic.impl&%1.load. self! perm!) (=> %%global_location_label%%10 (= (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. self!)) (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!)))))))) :pattern ((req%vstd!atomic.impl&%1.load. self! perm!)))))
(declare-fun ens%vstd!atomic.impl&%1.load. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool. Bool) Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (perm! vstd!atomic.PermissionBool.) (ret! Bool)) (! (= (ens%vstd!atomic.impl&%1.load. self! perm! ret!) (= (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!))))) ret!)) :pattern ((ens%vstd!atomic.impl&%1.load. self! perm! ret!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%1::store")
(declare-fun req%vstd!atomic.impl&%1.store. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool. Bool) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (pre%perm! vstd!atomic.PermissionBool.) (v! Bool)) (! (= (req%vstd!atomic.impl&%1.store. self! pre%perm! v!) (=> %%global_location_label%%11 (= (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. self!)) (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. pre%perm!)))))))) :pattern ((req%vstd!atomic.impl&%1.store. self! pre%perm! v!)))))
(declare-fun ens%vstd!atomic.impl&%1.store. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool. vstd!atomic.PermissionBool. Bool) Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (pre%perm! vstd!atomic.PermissionBool.) (perm! vstd!atomic.PermissionBool.) (v! Bool)) (! (= (ens%vstd!atomic.impl&%1.store. self! pre%perm! perm! v!) (and (= (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!))))) v!) (= (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. self!)) (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!)))))))) :pattern ((ens%vstd!atomic.impl&%1.store. self! pre%perm! perm! v!)))))
(set-info :comment ";; Function-Axioms vstd::atomic::impl&%8::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%vstd!atomic.PermissionU64.) (has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? self!)) TYPE%vstd!atomic.PermissionDataU64.)) :pattern ((vstd!atomic.impl&%8.view.? self!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%9::load")
(declare-fun req%vstd!atomic.impl&%9.load. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64.) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (perm! vstd!atomic.PermissionU64.)) (! (= (req%vstd!atomic.impl&%9.load. self! perm!) (=> %%global_location_label%%12 (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!)))))))) :pattern ((req%vstd!atomic.impl&%9.load. self! perm!)))))
(declare-fun ens%vstd!atomic.impl&%9.load. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. Int) Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (perm! vstd!atomic.PermissionU64.) (ret! Int)) (! (= (ens%vstd!atomic.impl&%9.load. self! perm! ret!) (and (uInv 64 ret!) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) ret!))) :pattern ((ens%vstd!atomic.impl&%9.load. self! perm! ret!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%9::store")
(declare-fun req%vstd!atomic.impl&%9.store. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (v! Int)) (! (= (req%vstd!atomic.impl&%9.store. self! pre%perm! v!) (=> %%global_location_label%%13 (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))) :pattern ((req%vstd!atomic.impl&%9.store. self! pre%perm! v!)))))
(declare-fun ens%vstd!atomic.impl&%9.store. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. vstd!atomic.PermissionU64. Int) Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (perm! vstd!atomic.PermissionU64.) (v! Int)) (! (= (ens%vstd!atomic.impl&%9.store. self! pre%perm! perm! v!) (and (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) v!) (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!)))))))) :pattern ((ens%vstd!atomic.impl&%9.store. self! pre%perm! perm! v!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%9::compare_exchange_weak")
(declare-fun req%vstd!atomic.impl&%9.compare_exchange_weak. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. Int Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (current! Int) (new! Int)) (! (= (req%vstd!atomic.impl&%9.compare_exchange_weak. self! pre%perm! current! new!) (=> %%global_location_label%%14 (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))) :pattern ((req%vstd!atomic.impl&%9.compare_exchange_weak. self! pre%perm! current! new!)))))
(declare-fun ens%vstd!atomic.impl&%9.compare_exchange_weak. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. vstd!atomic.PermissionU64. Int Int core!result.Result.) Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (perm! vstd!atomic.PermissionU64.) (current! Int) (new! Int) (ret! core!result.Result.)) (! (= (ens%vstd!atomic.impl&%9.compare_exchange_weak. self! pre%perm! perm! current! new! ret!) (and (has_type (Poly%core!result.Result. ret!) (TYPE%core!result.Result. $ (UINT 64) $ (UINT 64))) (and (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!)))))) (ite (is-core!result.Result./Ok_ ret!) (let ((r$ (%I (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. ret!)))))) (and (and (= current! (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) new!)) (= r$ (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))) (let ((r$ (%I (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. ret!)))))) (and (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))) (= r$ (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))))))) :pattern ((ens%vstd!atomic.impl&%9.compare_exchange_weak. self! pre%perm! perm! current! new! ret!)))))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%9::fetch_max")
(declare-fun req%vstd!atomic.impl&%9.fetch_max. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (n! Int)) (! (= (req%vstd!atomic.impl&%9.fetch_max. self! pre%perm! n!) (=> %%global_location_label%%15 (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))) :pattern ((req%vstd!atomic.impl&%9.fetch_max. self! pre%perm! n!)))))
(declare-fun ens%vstd!atomic.impl&%9.fetch_max. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. vstd!atomic.PermissionU64. Int Int) Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (perm! vstd!atomic.PermissionU64.) (n! Int) (ret! Int)) (! (= (ens%vstd!atomic.impl&%9.fetch_max. self! pre%perm! perm! n! ret!) (and (uInv 64 ret!) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!))))) ret!) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) (ite (> (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!))))) n!) (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!))))) n!)))) :pattern ((ens%vstd!atomic.impl&%9.fetch_max. self! pre%perm! perm! n! ret!)))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::AtomicInvariantPredicate::atomic_inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (G&. Dcr) (G& Type) (k! Poly) (v! Poly) (g! Poly)) (! (=> (and (has_type k! K&) (has_type v! V&) (has_type g! G&)) (has_type (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Self%&. Self%& K&. K& V&. V& G&. G& k! v! g!) BOOL)) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Self%&. Self%& K&. K& V&. V& G&. G& k! v! g!)))))
(set-info :comment ";; Function-Axioms vstd::cell::impl&%2::view")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!cell.PointsTo. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& self!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((vstd!cell.impl&%2.view.? V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::new")
(declare-fun ens%vstd!cell.impl&%3.new. (Dcr Type Poly tuple%2.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly) (pt! tuple%2.)) (! (= (ens%vstd!cell.impl&%3.new. V&. V& v! pt!) (and (has_type (Poly%tuple%2. pt!) (TYPE%tuple%2. $ (TYPE%vstd!cell.PCell. V&. V&) (TRACKED $) (TYPE%vstd!cell.PointsTo. V&. V&))) (= (vstd!cell.impl&%2.view.? V&. V& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. pt!)))) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. pt!)))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some v!))))))) :pattern ((ens%vstd!cell.impl&%3.new. V&. V& v! pt!)))))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::replace")
(declare-fun req%vstd!cell.impl&%3.replace. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (in_v! Poly)) (! (= (req%vstd!cell.impl&%3.replace. V&. V& self! pre%perm! in_v!) (and (=> %%global_location_label%%16 (= (vstd!cell.impl&%3.id.? V&. V& self!) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))) (=> %%global_location_label%%17 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))))))))) :pattern ((req%vstd!cell.impl&%3.replace. V&. V& self! pre%perm! in_v!)))))
(declare-fun ens%vstd!cell.impl&%3.replace. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (in_v! Poly) (out_v! Poly)) (! (= (ens%vstd!cell.impl&%3.replace. V&. V& self! pre%perm! perm! in_v! out_v!) (and (has_type out_v! V&) (has_type perm! (TYPE%vstd!cell.PointsTo. V&. V&)) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!))))) (= (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))) (core!option.Option./Some in_v!)) (= out_v! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))))))) :pattern ((ens%vstd!cell.impl&%3.replace. V&. V& self! pre%perm! perm! in_v! out_v!)))))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::borrow")
(declare-fun req%vstd!cell.impl&%3.borrow. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (perm! Poly)) (! (= (req%vstd!cell.impl&%3.borrow. V&. V& self! perm!) (and (=> %%global_location_label%%18 (= (vstd!cell.impl&%3.id.? V&. V& self!) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))))) (=> %%global_location_label%%19 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))))))))))) :pattern ((req%vstd!cell.impl&%3.borrow. V&. V& self! perm!)))))
(declare-fun ens%vstd!cell.impl&%3.borrow. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!cell.impl&%3.borrow. V&. V& self! perm! v!) (and (has_type v! V&) (= v! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))))))))) :pattern ((ens%vstd!cell.impl&%3.borrow. V&. V& self! perm! v!)))))
(set-info :comment ";; Function-Axioms vstd::invariant::InvariantPredicate::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (k! Poly) (v! Poly)) (! (=> (and (has_type k! K&) (has_type v! V&)) (has_type (vstd!invariant.InvariantPredicate.inv.? Self%&. Self%& K&. K& V&. V& k! v!) BOOL)) :pattern ((vstd!invariant.InvariantPredicate.inv.? Self%&. Self%& K&. K& V&. V& k! v!)))))
(set-info :comment ";; Function-Axioms vstd::invariant::impl&%0::constant")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!invariant.AtomicInvariant. K&. K& V&. V& Pred&. Pred&)) (has_type (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) K&)) :pattern ((vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Axioms vstd::invariant::AtomicInvariant::inv")
(assert (fuel_bool_default fuel%vstd!invariant.AtomicInvariant.inv.))
(assert (=> (fuel_bool fuel%vstd!invariant.AtomicInvariant.inv.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly) (v! Poly)) (! (= (vstd!invariant.AtomicInvariant.inv.? K&. K& V&. V& Pred&. Pred& self! v!) (%B (vstd!invariant.InvariantPredicate.inv.? Pred&. Pred& K&. K& V&. V& (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) v!))) :pattern ((vstd!invariant.AtomicInvariant.inv.? K&. K& V&. V& Pred&. Pred& self! v!))))))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_empty")
(declare-fun ens%vstd!map.impl&%0.tracked_empty. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (out_v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!) (and (has_type out_v! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= out_v! (vstd!map.impl&%0.empty.? K&. K& V&. V&)))) :pattern ((ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_insert")
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_remove")
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%20 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%21 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%22 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%23 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%24 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%25 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%26 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%27 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::pervasive::impl&%1::set_and_swap")
(declare-fun req%vstd!pervasive.impl&%1.set_and_swap. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%self! Poly) (i! Int) (pre%value! Poly)) (! (= (req%vstd!pervasive.impl&%1.set_and_swap. T&. T& pre%self! i! pre%value!) (=> %%global_location_label%%28 (< i! (vstd!std_specs.vec.spec_vec_len.? T&. T& $ TYPE%alloc!alloc.Global. pre%self!)))) :pattern ((req%vstd!pervasive.impl&%1.set_and_swap. T&. T& pre%self! i! pre%value!)))))
(declare-fun ens%vstd!pervasive.impl&%1.set_and_swap. (Dcr Type Poly Poly Int Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%self! Poly) (self! Poly) (i! Int) (pre%value! Poly) (value! Poly)) (! (= (ens%vstd!pervasive.impl&%1.set_and_swap. T&. T& pre%self! self! i! pre%value! value!) (and (has_type self! (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.)) (has_type value! T&) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!) (vstd!seq.Seq.update.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) pre%self!) (I i!) pre%value!)) (= value! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) pre%self!) (I i!))))) :pattern ((ens%vstd!pervasive.impl&%1.set_and_swap. T&. T& pre%self! self! i! pre%value! value!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%29 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%30 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%31 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%32 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%33 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%34 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%35 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%36 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%37 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%38 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%39 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%40 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%41 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%42 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%43 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%44 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%45 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%46 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%47 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%48 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%49 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%50 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%51 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%52 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%53 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%54 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%55 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%56 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%57 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%58 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%59 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%60 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms lib::constants::LOG_SIZE")
(assert (fuel_bool_default fuel%lib!constants.LOG_SIZE.))
(assert (=> (fuel_bool fuel%lib!constants.LOG_SIZE.) (= lib!constants.LOG_SIZE.? (uClip SZ (Mul 512 1024)))))
(assert (uInv SZ lib!constants.LOG_SIZE.?))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_idx")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_idx. (Poly Poly) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (= (req%lib!spec.cyclicbuffer.log_entry_idx. logical! buffer_size!) (=> %%global_location_label%%61 (= (%I buffer_size!) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_idx. logical! buffer_size!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::log_entry_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.log_entry_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.log_entry_idx.) (forall ((logical! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!) (nClip (EucMod (%I logical!) (%I buffer_size!)))) :pattern ((lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!))))))
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (=> (and (has_type logical! INT) (has_type buffer_size! NAT)) (<= 0 (lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!))) :pattern ((lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_alive_value")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_alive_value. (Poly Poly) Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (= (req%lib!spec.cyclicbuffer.log_entry_alive_value. logical! buffer_size!) (=> %%global_location_label%%62 (= (%I buffer_size!) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_alive_value. logical! buffer_size!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::log_entry_alive_value")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.log_entry_alive_value.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.log_entry_alive_value.) (forall ((logical! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.log_entry_alive_value.? logical! buffer_size!) (= (EucMod (EucDiv (%I logical!) (%I buffer_size!)) 2) 0)) :pattern ((lib!spec.cyclicbuffer.log_entry_alive_value.? logical! buffer_size!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::is_Starting")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting.))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Starting_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Starting) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.is_Starting.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.is_Starting.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::is_Range")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.is_Range.))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Range_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Range) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.is_Range.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.is_Range.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.is_Range.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::min")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.min.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.min.) (forall ((x! Poly) (y! Poly)) (! (= (lib!spec.cyclicbuffer.min.? x! y!) (%I (ite (< (%I x!) (%I y!)) x! y!))) :pattern ((lib!spec.cyclicbuffer.min.? x! y!))))))
(assert (forall ((x! Poly) (y! Poly)) (! (=> (and (has_type x! NAT) (has_type y! NAT)) (<= 0 (lib!spec.cyclicbuffer.min.? x! y!))) :pattern ((lib!spec.cyclicbuffer.min.? x! y!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::log::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::stored_type_inv")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.stored_type_inv.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.stored_type_inv.) (forall ((DT&. Dcr) (DT& Type) (st! Poly) (idx! Poly) (cell_id! Poly) (unbounded_log_instance! Poly)) (! (= (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& st! idx! cell_id! unbounded_log_instance!) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))) (%Poly%vstd!cell.CellId. cell_id!))) (=> (>= (%I idx!) 0) (and (and (and (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))) (%I idx!))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))) unbounded_log_instance!)) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))))))))))) (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))) (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))))))))))) (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& st! idx! cell_id! unbounded_log_instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::tail::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::replicas::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_versions::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::version_upper_bound::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::combiner::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::clone")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (s! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. DT&. DT& self! s!) (and (has_type s! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (= self! s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. DT&. DT& self! s!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Instance::num_replicas")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::head::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::tail::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::local_versions::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::combiner::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::clone")
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (s! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. DT&. DT& self! s!) (and (has_type s! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (= self! s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. DT&. DT& self! s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::unbounded_log_instance")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::buffer_size")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::num_replicas")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Reading")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Reading.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Reading_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Reading.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Reading_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::VERUS_layout_of_usize")
(declare-fun ens%lib!VERUS_layout_of_usize. () Bool)
(assert (= ens%lib!VERUS_layout_of_usize. (= (vstd!layout.size_of.? $ (UINT SZ)) 8)))
(set-info :comment ";; Broadcast lib::VERUS_layout_of_usize")
(assert (= (vstd!layout.size_of.? $ (UINT SZ)) 8))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%2::spec_len")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_len.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_len.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!) (I (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!)))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%0::inv")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%0.inv.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%0.inv.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k_loc! Poly) (perm_g! Poly)) (! (= (vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) k_loc! perm_g!) (B (let ((k$ (tuple%2./tuple%2/0 (%Poly%tuple%2. k_loc!)))) (let ((loc$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k_loc!))))) (let ((perm$ (%Poly%vstd!atomic.PermissionU64. (tuple%2./tuple%2/0 (%Poly%tuple%2. perm_g!))))) (let ((g$ (tuple%2./tuple%2/1 (%Poly%tuple%2. perm_g!)))) (and (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm$))))) loc$) (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (UINT 64) G&. G& k$ (I (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm$)))))) g$))))))))) :pattern ((vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) k_loc! perm_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (UINT 64) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%20::inv")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%20.inv.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%20.inv.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k_loc! Poly) (perm_g! Poly)) (! (= (vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) k_loc! perm_g!) (B (let ((k$ (tuple%2./tuple%2/0 (%Poly%tuple%2. k_loc!)))) (let ((loc$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k_loc!))))) (let ((perm$ (%Poly%vstd!atomic.PermissionBool. (tuple%2./tuple%2/0 (%Poly%tuple%2. perm_g!))))) (let ((g$ (tuple%2./tuple%2/1 (%Poly%tuple%2. perm_g!)))) (and (= (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm$))))) loc$) (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ BOOL G&. G& k$ (B (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm$)))))) g$))))))))) :pattern ((vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) k_loc! perm_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ BOOL G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%21::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%21.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%21.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool/patomic (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) :pattern ((vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& self!))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%21::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%21.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%21.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) :pattern ((vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%8::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%8.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%8.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%16::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%22::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%38::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%38.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%38.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%40::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::log::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::log::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::replicas::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map! key$))))) (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) m! key$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::replicas::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_versions::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map! key$))))) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_versions::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ NAT m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_reads::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_reads::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_updates::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_updates::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::combiner::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::combiner::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::local_versions::map_agree")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map! key$))))) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::local_versions::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ NAT m!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::map_agree")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map! key$))))) (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ BOOL m!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::combiner::map_agree")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map! key$))))) instance!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::combiner::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) m!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::wf")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.wf.) (forall ((self! Poly) (max_replicas! Poly)) (! (= (lib!exec.replica.impl&%0.wf.? self! max_replicas!) (< (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!)) (%I max_replicas!))) :pattern ((lib!exec.replica.impl&%0.wf.? self! max_replicas!))))))
(set-info :comment ";; Function-Axioms lib::constants::MAX_THREADS_PER_REPLICA")
(assert (fuel_bool_default fuel%lib!constants.MAX_THREADS_PER_REPLICA.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_THREADS_PER_REPLICA.) (= lib!constants.MAX_THREADS_PER_REPLICA.? 128)))
(assert (uInv SZ lib!constants.MAX_THREADS_PER_REPLICA.?))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::id_spec")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.id_spec.) (forall ((self! Poly)) (! (= (lib!exec.replica.impl&%0.id_spec.? self!) (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!))) :pattern ((lib!exec.replica.impl&%0.id_spec.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.replica.ReplicaToken.) (<= 0 (lib!exec.replica.impl&%0.id_spec.? self!))) :pattern ((lib!exec.replica.impl&%0.id_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::view")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!exec.replica.impl&%0.view.? self!) (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!))) :pattern ((lib!exec.replica.impl&%0.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.replica.ReplicaToken.) (<= 0 (lib!exec.replica.impl&%0.view.? self!))) :pattern ((lib!exec.replica.impl&%0.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::exec::log::InvariantPredicate_auto_BufferEntry_alive::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%0.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%0.atomic_inv.) (forall ((DT&. Dcr) (DT& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ BOOL $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((cyclic_buffer_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!))))) (let ((cyclic_buffer_instance$ (tuple%2./tuple%2/1 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!)))) (let ((v$ (%B declare_struct_with_invariants_tmp_v!))) (let ((g$ declare_struct_with_invariants_tmp_g!)) (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& g$)))) cyclic_buffer_instance$) (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& g$)))) cyclic_buffer_idx$)) (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& g$)))) v$)))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ BOOL $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ BOOL $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ BOOL $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))))))
(set-info :comment ";; Function-Axioms lib::exec::log::BufferEntry::wf")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%1.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (idx! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%1.wf.? DT&. DT& self! idx! cb_inst!) (and (and (and (and (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. self!)) cb_inst!) (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. self!)) (%I idx!))) (vstd!atomic_ghost.impl&%21.well_formed.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!))))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%21.constant.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!))))))) (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. self!)))) (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%21.constant.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!)))))) (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. self!))))) :pattern ((lib!exec.log.impl&%1.wf.? DT&. DT& self! idx! cb_inst!))))))
(set-info :comment ";; Function-Axioms lib::constants::MAX_IDX")
(assert (fuel_bool_default fuel%lib!constants.MAX_IDX.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_IDX.) (= lib!constants.MAX_IDX.? 18446744073441116160)))
(assert (uInv 64 lib!constants.MAX_IDX.?))
(set-info :comment ";; Function-Axioms lib::exec::log::InvariantPredicate_auto_NrLog_version_upper_bound::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%2.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%2.atomic_inv.) (forall ((DT&. Dcr) (DT& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((unbounded_log_instance$ declare_struct_with_invariants_tmp_k!)) (let ((v$ (%I declare_struct_with_invariants_tmp_v!))) (let ((g$ declare_struct_with_invariants_tmp_g!)) (and (and (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& g$)))) unbounded_log_instance$) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& g$)))) v$)) (and (<= 0 v$) (<= v$ lib!constants.MAX_IDX.?)))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::InvariantPredicate_auto_NrLog_head::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%3.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%3.atomic_inv.) (forall ((DT&. Dcr) (DT& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((cyclic_buffer_instance$ declare_struct_with_invariants_tmp_k!)) (let ((v$ (%I declare_struct_with_invariants_tmp_v!))) (let ((g$ declare_struct_with_invariants_tmp_g!)) (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& g$)))) cyclic_buffer_instance$) (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& g$)))) v$)) (and (<= 0 v$) (<= v$ lib!constants.MAX_IDX.?)))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::InvariantPredicate_auto_NrLog_tail::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%4.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%4.atomic_inv.) (forall ((DT&. Dcr) (DT& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((cyclic_buffer_instance$ (tuple%2./tuple%2/0 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!)))) (let ((unbounded_log_instance$ (tuple%2./tuple%2/1 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!)))) (let ((v$ (%I declare_struct_with_invariants_tmp_v!))) (let ((g$ (%Poly%tuple%2. declare_struct_with_invariants_tmp_g!))) (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) unbounded_log_instance$) (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) v$)) (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) cyclic_buffer_instance$)) (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) v$)) (and (<= 0 v$) (<= v$ lib!constants.MAX_IDX.?))))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::InvariantPredicate_auto_NrLog_local_versions::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%5.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%5.atomic_inv.) (forall ((DT&. Dcr) (DT& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((unbounded_log_instance$ (tuple%3./tuple%3/0 (%Poly%tuple%3. declare_struct_with_invariants_tmp_k!)))) (let ((cyclic_buffer_instance$ (tuple%3./tuple%3/1 (%Poly%tuple%3. declare_struct_with_invariants_tmp_k!)))) (let ((i$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. declare_struct_with_invariants_tmp_k!))))) (let ((v$ (%I declare_struct_with_invariants_tmp_v!))) (let ((g$ (%Poly%tuple%2. declare_struct_with_invariants_tmp_g!))) (and (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) unbounded_log_instance$) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) i$)) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) v$)) (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) cyclic_buffer_instance$)) (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) i$)) (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. g$))))))) v$)) (and (<= 0 v$) (<= v$ lib!constants.MAX_IDX.?)))))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLog::wf")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%6.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%6.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.log.impl&%6.wf.? DT&. DT& self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (let ((tmp%%$ (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (and (< 0 tmp%%$) (<= tmp%%$ lib!constants.MAX_REPLICAS.?))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) lib!constants.LOG_SIZE.?)) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) (vstd!seq.Seq.len.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))))) (= (vstd!cell.impl&%3.id.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$)))) (%Poly%vstd!cell.CellId. (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!constants.LOG_SIZE.?) (lib!exec.log.impl&%1.wf.? DT&. DT& (vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$) i$ (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$))))) (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. self!))))))) (= (vstd!atomic_ghost.impl&%1.constant.? (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. self!)))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. self!))))))) (= (vstd!atomic_ghost.impl&%1.constant.? (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. self!)))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!))))))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!)))))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!)))))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!)))))) (and (and (and (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))) (= (tuple%3./tuple%3/0 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%3./tuple%3/1 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%3./tuple%3/2 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) i$)))) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))))) :pattern ((lib!exec.log.impl&%6.wf.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::exec::log::NrLog::index_spec")
(declare-fun req%lib!exec.log.impl&%7.index_spec. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (logical! Poly)) (! (= (req%lib!exec.log.impl&%7.index_spec. DT&. DT& self! logical!) (=> %%global_location_label%%63 (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!exec.log.impl&%7.index_spec. DT&. DT& self! logical!)))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLog::index_spec")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%7.index_spec.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%7.index_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (logical! Poly)) (! (= (lib!exec.log.impl&%7.index_spec.? DT&. DT& self! logical!) (nClip (EucMod (%I logical!) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!)))))) :pattern ((lib!exec.log.impl&%7.index_spec.? DT&. DT& self! logical!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (logical! Poly)) (! (=> (and (has_type self! (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type logical! NAT)) (<= 0 (lib!exec.log.impl&%7.index_spec.? DT&. DT& self! logical!))) :pattern ((lib!exec.log.impl&%7.index_spec.? DT&. DT& self! logical!)))))
(set-info :comment ";; Function-Specs lib::exec::log::NrLog::is_alive_value_spec")
(declare-fun req%lib!exec.log.impl&%7.is_alive_value_spec. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (logical! Poly)) (! (= (req%lib!exec.log.impl&%7.is_alive_value_spec. DT&. DT& self! logical!) (=> %%global_location_label%%64 (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!exec.log.impl&%7.is_alive_value_spec. DT&. DT& self! logical!)))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLog::is_alive_value_spec")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%7.is_alive_value_spec.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%7.is_alive_value_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (logical! Poly)) (! (= (lib!exec.log.impl&%7.is_alive_value_spec.? DT&. DT& self! logical!) (= (EucMod (EucDiv (%I logical!) lib!constants.LOG_SIZE.?) 2) 0)) :pattern ((lib!exec.log.impl&%7.is_alive_value_spec.? DT&. DT& self! logical!))))))
(set-info :comment ";; Function-Axioms lib::constants::MAX_PENDING_OPS")
(assert (fuel_bool_default fuel%lib!constants.MAX_PENDING_OPS.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_PENDING_OPS.) (= lib!constants.MAX_PENDING_OPS.? 1)))
(assert (uInv SZ lib!constants.MAX_PENDING_OPS.?))
(set-info :comment ";; Function-Axioms lib::constants::MAX_REQUESTS")
(assert (fuel_bool_default fuel%lib!constants.MAX_REQUESTS.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_REQUESTS.) (= lib!constants.MAX_REQUESTS.? (uClip SZ (Mul lib!constants.MAX_THREADS_PER_REPLICA.? lib!constants.MAX_PENDING_OPS.?)))))
(assert (uInv SZ lib!constants.MAX_REQUESTS.?))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::common_pred")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.common_pred.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.common_pred.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (nid! Poly) (data! Poly) (inst! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%8.common_pred.? DT&. DT& self! nid! data! inst! cb_inst!) (and (and (and (and (and (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) i$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$))))) inst!)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) i$)))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (%I nid!))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) inst!)) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) data!)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (%I nid!))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) inst!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (%I nid!))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) cb_inst!)) (<= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))) lib!constants.MAX_REQUESTS.?))) :pattern ((lib!exec.log.impl&%8.common_pred.? DT&. DT& self! nid! data! inst! cb_inst!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_Ready")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_Ready.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_Ready.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_Ready.? self!) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_Ready.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Idle")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Idle_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Idle.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Idle.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::append_pre")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.append_pre.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.append_pre.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (nid! Poly) (data! Poly) (ops! Poly) (inst! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%8.append_pre.? DT&. DT& self! nid! data! ops! inst! cb_inst!) (and (and (and (and (lib!exec.log.impl&%8.common_pred.? DT&. DT& self! nid! data! inst! cb_inst!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) i$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) i$)))) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$))))))))) (= (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$)))))))) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) ops! i$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$))))) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))))))) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))))))) (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) ops!)))) :pattern ((lib!exec.log.impl&%8.append_pre.? DT&. DT& self! nid! data! ops! inst! cb_inst!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_Placed")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_Placed.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_Placed.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_Placed.? self!) (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_Placed.? self!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::post_exec")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.post_exec.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.post_exec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (request_ids! Poly) (responses! Poly)) (! (= (lib!exec.log.impl&%8.post_exec.? DT&. DT& self! request_ids! responses!) (and (and (= (vstd!seq.Seq.len.? $ NAT request_ids!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) responses!)) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT request_ids!))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) i$) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$))))))))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$)))))))) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) responses! i$))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$))))) (%I (vstd!seq.Seq.index.? $ NAT request_ids! i$)))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$)))))) :pattern ((lib!exec.log.impl&%8.post_exec.? DT&. DT& self! request_ids! responses!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Placed_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? self!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::pre_exec")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.pre_exec.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.pre_exec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (responses! Poly)) (! (= (lib!exec.log.impl&%8.pre_exec.? DT&. DT& self! responses!) (and (and (and (= (vstd!seq.Seq.len.? (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) responses!) 0) (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))))))) (= (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) i$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) i$)))) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$))))))))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) i$)))))) :pattern ((lib!exec.log.impl&%8.pre_exec.? DT&. DT& self! responses!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::append_post")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.append_post.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.append_post.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (pre! Poly) (nid! Poly) (data! Poly) (operations! Poly) (responses! Poly) (inst! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%8.append_post.? DT&. DT& self! pre! nid! data! operations! responses! inst! cb_inst!) (and (and (and (and (and (lib!exec.log.impl&%8.common_pred.? DT&. DT& self! nid! data! inst! cb_inst!) (or (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))))) (=> (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (lib!exec.log.impl&%8.post_exec.? DT&. DT& self! (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!))) responses!))) (=> (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (lib!exec.log.impl&%8.pre_exec.? DT&. DT& self! responses!))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!)))))))) (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!))))) :pattern ((lib!exec.log.impl&%8.append_post.? DT&. DT& self! pre! nid! data! operations! responses! inst! cb_inst!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::execute_pre")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.execute_pre.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.execute_pre.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (nid! Poly) (data! Poly) (responses! Poly) (inst! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%8.execute_pre.? DT&. DT& self! nid! data! responses! inst! cb_inst!) (and (and (and (and (lib!exec.log.impl&%8.common_pred.? DT&. DT& self! nid! data! inst! cb_inst!) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))))))) (or (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))))) (=> (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (lib!exec.log.impl&%8.pre_exec.? DT&. DT& self! responses!))) (=> (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) responses!))))) :pattern ((lib!exec.log.impl&%8.execute_pre.? DT&. DT& self! nid! data! responses! inst! cb_inst!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::execute_post")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.execute_post.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.execute_post.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (pre! Poly) (nid! Poly) (data! Poly) (responses_old! Poly) (responses! Poly) (inst! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%8.execute_post.? DT&. DT& self! pre! nid! data! responses_old! responses! inst! cb_inst!) (and (and (and (and (lib!exec.log.impl&%8.common_pred.? DT&. DT& self! nid! data! inst! cb_inst!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!)))))))) (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!)))) (=> (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!))))))))) (lib!exec.log.impl&%8.post_exec.? DT&. DT& self! (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!))) responses!))) (=> (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!))))))))) (and (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!))))))) (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!)))) (= responses! responses_old!))))) :pattern ((lib!exec.log.impl&%8.execute_post.? DT&. DT& self! pre! nid! data! responses_old! responses! inst! cb_inst!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::advance_head_pre")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.advance_head_pre.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.advance_head_pre.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (nid! Poly) (data! Poly) (responses! Poly) (inst! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%8.advance_head_pre.? DT&. DT& self! nid! data! responses! inst! cb_inst!) (and (and (and (lib!exec.log.impl&%8.common_pred.? DT&. DT& self! nid! data! inst! cb_inst!) (lib!exec.log.impl&%8.pre_exec.? DT&. DT& self! responses!)) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))))))) (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))))) :pattern ((lib!exec.log.impl&%8.advance_head_pre.? DT&. DT& self! nid! data! responses! inst! cb_inst!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogAppendExecDataGhost::advance_head_post")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%8.advance_head_post.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%8.advance_head_post.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (pre! Poly) (nid! Poly) (data! Poly) (responses! Poly) (inst! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%8.advance_head_post.? DT&. DT& self! pre! nid! data! responses! inst! cb_inst!) (and (and (and (and (and (lib!exec.log.impl&%8.common_pred.? DT&. DT& self! nid! data! inst! cb_inst!) (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/cb_combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!)))))))) (or (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))))) (=> (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (lib!exec.log.impl&%8.post_exec.? DT&. DT& self! (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/request_ids (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))) responses!))) (=> (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!))))))))) (and (and (and (= (vstd!seq.Seq.len.? (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) responses!) 0) (= (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)) (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/local_updates (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!)))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/combiner (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!)))))))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica (%Poly%lib!exec.log.NrLogAppendExecDataGhost. self!)))))) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.log.NrLogAppendExecDataGhost./NrLogAppendExecDataGhost/ghost_replica (%Poly%lib!exec.log.NrLogAppendExecDataGhost. pre!))))))))))) :pattern ((lib!exec.log.impl&%8.advance_head_post.? DT&. DT& self! pre! nid! data! responses! inst! cb_inst!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Placed_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Placed_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Placed_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Placed_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Placed_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_op.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::exec::log::AppendEntriesGhostState::wf")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%9.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%9.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (nid! Poly) (ridx! Poly) (inst! Poly)) (! (= (lib!exec.log.impl&%9.wf.? DT&. DT& self! nid! ridx! inst!) (and (and (and (and (and (and (and (and (and (and (and (and (and (let ((tmp%%$ (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (%Poly%lib!exec.log.AppendEntriesGhostState. self!))))))) (< (%I ridx!) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))) (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))) (nClip (Add (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/old_tail (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))) (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/tail (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))) inst!)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))) inst!)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))) (%I nid!))) (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))))))) (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner (%Poly%lib!exec.log.AppendEntriesGhostState. self!))))))))))) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))) (= (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (%Poly%lib!exec.log.AppendEntriesGhostState. self!))) i$) (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/combiner (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (%Poly%lib!exec.log.AppendEntriesGhostState. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. self!))) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!))) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) inst!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (%Poly%lib!exec.log.AppendEntriesGhostState. self!))) i$)))) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))))))) (= (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$)))))))) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))))) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) inst!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/request_ids (%Poly%lib!exec.log.AppendEntriesGhostState. self!))) i$)))) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))))))) (= (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$)))))))) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/local_updates (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/idx (%Poly%lib!exec.log.AppendEntriesGhostState. self!)))) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) inst!) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) (nClip (Add (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/old_tail (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) (%I i$))))) (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$)))))))) (%I nid!))) (= (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$)))))))) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/operations (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) (lib!exec.log.AppendEntriesGhostState./AppendEntriesGhostState/log_entries (%Poly%lib!exec.log.AppendEntriesGhostState. self!)) i$)))))) :pattern ((lib!exec.log.impl&%9.wf.? DT&. DT& self! nid! ridx! inst!))))))
(set-info :comment ";; Function-Axioms lib::exec::log::NrLogTokens::wf")
(assert (fuel_bool_default fuel%lib!exec.log.impl&%10.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%10.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (num_replicas! Poly)) (! (= (lib!exec.log.impl&%10.wf.? DT&. DT& self! num_replicas!) (and (and (and (and (and (= (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)) (%I num_replicas!)) (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. self!))) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. self!))) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!))) i$) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. self!)))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (%I i$))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (lib!Dispatch.init_spec.? DT&. DT&))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!))) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!))) i$) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. self!)))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (%I i$))) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!))) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!))) i$) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (%I i$))) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!))) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$)))))) :pattern ((lib!exec.log.impl&%10.wf.? DT&. DT& self! num_replicas!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_VersionUpperBound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./VersionUpperBound) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_VersionUpperBound_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_VersionUpperBound_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_ReadyToRead")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_ReadyToRead.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./ReadyToRead) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_ReadyToRead.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_ReadyToRead.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_ReadyToRead.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Applied_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Applied_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Applied_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Applied_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Applied_ret.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Applied_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Applied_ret.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Applied_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Applied_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Applied_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Applied_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Applied_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%3.get_Applied_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Applied_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_Loop")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_Loop.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_Loop.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_Loop.? self!) (is-lib!spec.unbounded_log.CombinerState./Loop_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_Loop.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_lversion")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!) (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!) (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_tail")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!) (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Range_end")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_end.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_end.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Range_end.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_end.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Range_end.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_end.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Range_cur")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_cur.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_cur.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::is_Guard")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.is_Guard.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.is_Guard.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.is_Guard.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.is_Guard.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Guard_end")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_end.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_end.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Guard_cur")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_AdvancingHead")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./AdvancingHead) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_AdvancingHead_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_AdvancingHead_min_local_version")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Appending")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Appending_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Appending) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Appending.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Appending_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Appending.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Appending_cur_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Appending_tail")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::constants::GC_FROM_HEAD")
(assert (fuel_bool_default fuel%lib!constants.GC_FROM_HEAD.))
(assert (=> (fuel_bool fuel%lib!constants.GC_FROM_HEAD.) (= lib!constants.GC_FROM_HEAD.? (uClip SZ (Mul lib!constants.MAX_PENDING_OPS.? lib!constants.MAX_THREADS_PER_REPLICA.?)))))
(assert (uInv SZ lib!constants.GC_FROM_HEAD.?))
(set-info :comment ";; Function-Axioms lib::constants::WARN_THRESHOLD")
(assert (fuel_bool_default fuel%lib!constants.WARN_THRESHOLD.))
(assert (=> (fuel_bool fuel%lib!constants.WARN_THRESHOLD.) (= lib!constants.WARN_THRESHOLD.? 268435456)))
(assert (uInv SZ lib!constants.WARN_THRESHOLD.?))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::initialize")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (number_of_nodes! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. DT&. DT& number_of_nodes!) (=> %%global_location_label%%65 (> number_of_nodes! 0))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. DT&. DT& number_of_nodes!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. (Dcr Type Int tuple%9.) Bool)
(declare-fun %%lambda%%0 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (n$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0) n$) (B (< (%I n$) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0) n$)))))
(declare-fun %%lambda%%1 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (n$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0) n$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0) n$)))))
(assert (forall ((DT&. Dcr) (DT& Type) (number_of_nodes! Int) (tmp_tuple! tuple%9.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. DT&. DT& number_of_nodes! tmp_tuple!) (and (has_type (Poly%tuple%9. tmp_tuple!) (TYPE%tuple%9. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&)) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)))) (let ((instance$ (tuple%9./tuple%9/0 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_log$ (tuple%9./tuple%9/1 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_tail$ (tuple%9./tuple%9/2 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_replicas$ (tuple%9./tuple%9/3 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_local_versions$ (tuple%9./tuple%9/4 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_version_upper_bound$ (tuple%9./tuple%9/5 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_local_reads$ (tuple%9./tuple%9/6 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_local_updates$ (tuple%9./tuple%9/7 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_combiner$ (tuple%9./tuple%9/8 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((instance$1 instance$)) (let ((param_token_log$1 param_token_log$)) (let ((param_token_tail$1 param_token_tail$)) (let ((param_token_replicas$1 param_token_replicas$)) (let ((param_token_local_versions$1 param_token_local_versions$)) (let ((param_token_version_upper_bound$1 param_token_version_upper_bound$)) (let ((param_token_local_reads$1 param_token_local_reads$)) (let ((param_token_local_updates$1 param_token_local_updates$)) (let ((param_token_combiner$1 param_token_combiner$)) (and (and (and (and (and (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& param_token_tail$1)))) instance$1) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& param_token_version_upper_bound$1)))) instance$1)) (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& instance$1) number_of_nodes!)) (lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.? DT&. DT& param_token_log$1 (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&)) instance$1)) (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& param_token_tail$1)))) 0)) (lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.? DT&. DT& param_token_replicas$1 (vstd!map.impl&%0.new.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%0 number_of_nodes!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (lib!Dispatch.init_spec.? DT&. DT&))))) instance$1)) (lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.? DT&. DT& param_token_local_versions$1 (vstd!map.impl&%0.new.? $ NAT $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%0 number_of_nodes!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (I 0))))) instance$1)) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& param_token_version_upper_bound$1)))) 0)) (lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.? DT&. DT& param_token_local_reads$1 (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) instance$1)) (lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.? DT&. DT& param_token_local_updates$1 (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) instance$1)) (lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.? DT&. DT& param_token_combiner$1 (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.) (Poly%fun%1. (mk_fun (%%lambda%%0 number_of_nodes!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))))) instance$1)))))))))))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. DT&. DT& number_of_nodes! tmp_tuple!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::initialize")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. (Dcr Type Int Int Poly vstd!seq.Seq<vstd!cell.CellId.>. Poly Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (buffer_size! Int) (num_replicas! Int) (contents! Poly) (cell_ids! vstd!seq.Seq<vstd!cell.CellId.>.) (unbounded_log_instance! Poly) (param_token_contents! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance! param_token_contents!) (and (=> %%global_location_label%%66 (> num_replicas! 0)) (=> %%global_location_label%%67 (= buffer_size! lib!constants.LOG_SIZE.?)) (=> %%global_location_label%%68 (= (vstd!seq.Seq.len.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. cell_ids!)) buffer_size!)) (=> %%global_location_label%%69 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (= (and (<= (Sub 0 buffer_size!) (%I i$)) (< (%I i$) 0)) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))))) (=> %%global_location_label%%70 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents! i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. cell_ids!) (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ (I buffer_size!)))) unbounded_log_instance!))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))))) (=> %%global_location_label%%71 (= param_token_contents! contents!)))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance! param_token_contents!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. (Dcr Type Int Int Poly vstd!seq.Seq<vstd!cell.CellId.>. Poly Poly tuple%6.) Bool)
(declare-fun %%lambda%%2 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) i$) (B (and (<= %%hole%%0 (%I i$)) (< (%I i$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) i$)))))
(declare-fun %%lambda%%3 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0) i$) (B (not (lib!spec.cyclicbuffer.log_entry_alive_value.? i$ %%hole%%0)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0) i$)))))
(assert (forall ((DT&. Dcr) (DT& Type) (buffer_size! Int) (num_replicas! Int) (contents! Poly) (cell_ids! vstd!seq.Seq<vstd!cell.CellId.>.) (unbounded_log_instance! Poly) (param_token_contents! Poly) (tmp_tuple! tuple%6.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance! param_token_contents! tmp_tuple!) (and (has_type (Poly%tuple%6. tmp_tuple!) (TYPE%tuple%6. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)))) (let ((instance$ (tuple%6./tuple%6/0 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((param_token_head$ (tuple%6./tuple%6/1 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((param_token_tail$ (tuple%6./tuple%6/2 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((param_token_local_versions$ (tuple%6./tuple%6/3 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((param_token_alive_bits$ (tuple%6./tuple%6/4 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((param_token_combiner$ (tuple%6./tuple%6/5 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((instance$1 instance$)) (let ((param_token_head$1 param_token_head$)) (let ((param_token_tail$1 param_token_tail$)) (let ((param_token_local_versions$1 param_token_local_versions$)) (let ((param_token_alive_bits$1 param_token_alive_bits$)) (let ((param_token_combiner$1 param_token_combiner$)) (and (and (and (and (and (and (and (and (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& param_token_head$1)))) instance$1) (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& param_token_tail$1)))) instance$1)) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& instance$1) unbounded_log_instance!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& instance$1) cell_ids!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& instance$1) buffer_size!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& instance$1) num_replicas!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& param_token_head$1)))) 0)) (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& param_token_tail$1)))) 0)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.? DT&. DT& param_token_local_versions$1 (vstd!map.impl&%0.new.? $ NAT $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%2 0 num_replicas!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (I 0))))) instance$1)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.? DT&. DT& param_token_alive_bits$1 (vstd!map.impl&%0.new.? $ NAT $ BOOL $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 0 buffer_size!))) (Poly%fun%1. (mk_fun (%%lambda%%3 (I buffer_size!))))) instance$1)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.? DT&. DT& param_token_combiner$1 (vstd!map.impl&%0.new.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%2 0 num_replicas!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle))))) instance$1)))))))))))))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance! param_token_contents! tmp_tuple!)))))
(set-info :comment ";; Function-Specs vstd::atomic_ghost::impl&%21::new")
(declare-fun req%vstd!atomic_ghost.impl&%21.new. (Dcr Type Dcr Type Dcr Type Poly Bool Poly) Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Bool) (g! Poly)) (! (= (req%vstd!atomic_ghost.impl&%21.new. K&. K& G&. G& Pred&. Pred& k! u! g!) (=> %%global_location_label%%72 (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ BOOL G&. G& k! (B u!) g!)))) :pattern ((req%vstd!atomic_ghost.impl&%21.new. K&. K& G&. G& Pred&. Pred& k! u! g!)))))
(declare-fun ens%vstd!atomic_ghost.impl&%21.new. (Dcr Type Dcr Type Dcr Type Poly Bool Poly vstd!atomic_ghost.AtomicBool.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Bool) (g! Poly) (t! vstd!atomic_ghost.AtomicBool.)) (! (= (ens%vstd!atomic_ghost.impl&%21.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!) (and (has_type (Poly%vstd!atomic_ghost.AtomicBool. t!) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (and (vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicBool. t!)) (= (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicBool. t!)) k!)))) :pattern ((ens%vstd!atomic_ghost.impl&%21.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!)))))
(set-info :comment ";; Function-Specs vstd::atomic_ghost::impl&%1::new")
(declare-fun req%vstd!atomic_ghost.impl&%1.new. (Dcr Type Dcr Type Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Int) (g! Poly)) (! (= (req%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g!) (=> %%global_location_label%%73 (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (UINT 64) G&. G& k! (I u!) g!)))) :pattern ((req%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g!)))))
(declare-fun ens%vstd!atomic_ghost.impl&%1.new. (Dcr Type Dcr Type Dcr Type Poly Int Poly vstd!atomic_ghost.AtomicU64.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Int) (g! Poly) (t! vstd!atomic_ghost.AtomicU64.)) (! (= (ens%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!) (and (has_type (Poly%vstd!atomic_ghost.AtomicU64. t!) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (and (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicU64. t!)) (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicU64. t!)) k!)))) :pattern ((ens%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!)))))
(set-info :comment ";; Function-Specs lib::exec::replica::ReplicaToken::new")
(declare-fun ens%lib!exec.replica.impl&%0.new. (Int lib!exec.replica.ReplicaToken.) Bool)
(assert (forall ((rid! Int) (res! lib!exec.replica.ReplicaToken.)) (! (= (ens%lib!exec.replica.impl&%0.new. rid! res!) (and (has_type (Poly%lib!exec.replica.ReplicaToken. res!) TYPE%lib!exec.replica.ReplicaToken.) (= (lib!exec.replica.impl&%0.view.? (Poly%lib!exec.replica.ReplicaToken. res!)) rid!))) :pattern ((ens%lib!exec.replica.impl&%0.new. rid! res!)))))
(set-info :comment ";; Function-Specs lib::exec::log::NrLog::new")
(declare-fun req%lib!exec.log.impl&%7.new. (Dcr Type Int Int) Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (num_replicas! Int) (log_size! Int)) (! (= (req%lib!exec.log.impl&%7.new. DT&. DT& num_replicas! log_size!) (and (=> %%global_location_label%%74 (= log_size! lib!constants.LOG_SIZE.?)) (=> %%global_location_label%%75 (and (< 0 num_replicas!) (<= num_replicas! lib!constants.MAX_REPLICAS.?))))) :pattern ((req%lib!exec.log.impl&%7.new. DT&. DT& num_replicas! log_size!)))))
(declare-fun ens%lib!exec.log.impl&%7.new. (Dcr Type Int Int tuple%3.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (num_replicas! Int) (log_size! Int) (res! tuple%3.)) (! (= (ens%lib!exec.log.impl&%7.new. DT&. DT& num_replicas! log_size! res!) (and (has_type (Poly%tuple%3. res!) (TYPE%tuple%3. $ (TYPE%lib!exec.log.NrLog. DT&. DT&) $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (TRACKED $) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))) (lib!exec.log.impl&%6.wf.? DT&. DT& (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!)))) (= (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))))) (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. res!)))))) (= (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))))) (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. res!)))))) (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!)))) num_replicas!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) num_replicas!)) (= (lib!exec.replica.impl&%0.id_spec.? (vstd!seq.Seq.index.? $ TYPE%lib!exec.replica.ReplicaToken. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!)))) i$)) (%I i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!exec.replica.ReplicaToken. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!)))) i$)))) (lib!exec.log.impl&%10.wf.? DT&. DT& (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. res!))) (I num_replicas!)))) :pattern ((ens%lib!exec.log.impl&%7.new. DT&. DT& num_replicas! log_size! res!)))))
(set-info :comment ";; Function-Def lib::exec::log::NrLog::new")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/log.rs:270:9: 312:10 (#0)")
(set-info :comment ";; Function-Def lib::exec::log::NrLog::new")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/log.rs:351:9: 400:10 (#0)")
(set-info :comment ";; Function-Def lib::exec::log::NrLog::new")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/log.rs:422:9: 471:10 (#0)")
(set-info :comment ";; Function-Def lib::exec::log::NrLog::new")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/log.rs:478:9: 489:10 (#0)")
(set-info :comment ";; Function-Def lib::exec::log::NrLog::new")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/log.rs:211:5: 215:6 (#0)")
(set-info :comment ";; Function-Specs lib::exec::replica::ReplicaToken::id")
(declare-fun ens%lib!exec.replica.impl&%0.id. (lib!exec.replica.ReplicaToken. Int) Bool)
(assert (forall ((self! lib!exec.replica.ReplicaToken.) (result! Int)) (! (= (ens%lib!exec.replica.impl&%0.id. self! result!) (and (uInv SZ result!) (= result! (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. self!))))) :pattern ((ens%lib!exec.replica.impl&%0.id. self! result!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::advance_tail_start")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_start. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_head! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_start. DT&. DT& self! node_id! param_token_head! param_token_0_combiner!) (and (=> %%global_location_label%%76 (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& param_token_head!)))) self!)) (=> %%global_location_label%%77 (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%78 (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) lib!spec.cyclicbuffer.CombinerState./Idle))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_start. DT&. DT& self! node_id! param_token_head! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_start. (Dcr Type Poly Int Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_head! Poly) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_start. DT&. DT& self! node_id! param_token_head! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) self!) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& param_token_head!))))))))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_start. DT&. DT& self! node_id! param_token_head! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::advance_tail_abort")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_abort. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(define-fun is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./AdvancingTail) c))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_abort. DT&. DT& self! node_id! param_token_0_combiner!) (and (=> %%global_location_label%%79 (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%80 (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$)))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_abort. DT&. DT& self! node_id! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_abort. (Dcr Type Poly Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_abort. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) self!) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) lib!spec.cyclicbuffer.CombinerState./Idle)))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.advance_tail_abort. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_trivial_start")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. DT&. DT& self! node_id! param_token_0_combiner!) (and (=> %%global_location_label%%81 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%82 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) lib!spec.unbounded_log.CombinerState./Ready))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. DT&. DT& self! node_id! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. (Dcr Type Poly Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) self!) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) (lib!spec.unbounded_log.CombinerState./Placed (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.empty.? $ NAT))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_load_local_version")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_1_local_versions! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner!) (and (=> %%global_location_label%%83 (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& param_token_1_local_versions!)))) self!)) (=> %%global_location_label%%84 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%85 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (=> %%global_location_label%%86 (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$1 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$1) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& param_token_1_local_versions!)))) node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. (Dcr Type Poly Int Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_1_local_versions! Poly) (param_token_0_combiner! Poly) (param_token_2_combiner! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner! param_token_2_combiner!) (and (has_type param_token_2_combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_2_combiner!)))) self!) (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$1 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$1) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((lversion$ (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& param_token_1_local_versions!)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_2_combiner!)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_2_combiner!)))) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner! param_token_2_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::reader_start")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_start. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_local_versions! Poly) (param_token_1_combiner! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_start. DT&. DT& self! node_id! param_token_0_local_versions! param_token_1_combiner!) (and (=> %%global_location_label%%87 (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& param_token_0_local_versions!)))) self!)) (=> %%global_location_label%%88 (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) self!)) (=> %%global_location_label%%89 (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& param_token_0_local_versions!)))) node_id!)) (=> %%global_location_label%%90 (let ((local_head$ (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& param_token_0_local_versions!)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) lib!spec.cyclicbuffer.CombinerState./Idle)))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_start. DT&. DT& self! node_id! param_token_0_local_versions! param_token_1_combiner!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_start. (Dcr Type Poly Int Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_local_versions! Poly) (param_token_1_combiner! Poly) (param_token_2_combiner! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_start. DT&. DT& self! node_id! param_token_0_local_versions! param_token_1_combiner! param_token_2_combiner!) (and (has_type param_token_2_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_2_combiner!)))) self!) (let ((local_head$ (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& param_token_0_local_versions!)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_2_combiner!)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_2_combiner!)))) (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting (%I (I local_head$))))))))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_start. DT&. DT& self! node_id! param_token_0_local_versions! param_token_1_combiner! param_token_2_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_finish_no_change")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(declare-const %%global_location_label%%94 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_tail! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!) (and (=> %%global_location_label%%91 (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& param_token_tail!)))) self!)) (=> %%global_location_label%%92 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%93 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))) (=> %%global_location_label%%94 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (= lversion$ (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& param_token_tail!))))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. (Dcr Type Poly Int Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_tail! Poly) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)) 0)))) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) lib!spec.unbounded_log.CombinerState./Ready))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::reader_abort")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_abort. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%95 Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_abort. DT&. DT& self! node_id! param_token_0_combiner!) (and (=> %%global_location_label%%95 (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%96 (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (=> %%global_location_label%%97 (let ((r$ (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$1 (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) r$1) (%Poly%lib!spec.cyclicbuffer.ReaderState. (vstd!pervasive.arbitrary.? $ (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))) (or (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. r$))) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. r$)))))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_abort. DT&. DT& self! node_id! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_abort. (Dcr Type Poly Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_abort. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) self!) (let ((r$ (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$1 (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) r$1) (%Poly%lib!spec.cyclicbuffer.ReaderState. (vstd!pervasive.arbitrary.? $ (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) lib!spec.cyclicbuffer.CombinerState./Idle))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_abort. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_load_global_head")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%98 Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_tail! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!) (and (=> %%global_location_label%%98 (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& param_token_tail!)))) self!)) (=> %%global_location_label%%99 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%100 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. (Dcr Type Poly Int Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_tail! Poly) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$)) (%I (I 0)) (%I (I (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& param_token_tail!)))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::reader_enter")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_enter. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(declare-const %%global_location_label%%103 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_tail! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_enter. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!) (and (=> %%global_location_label%%101 (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& param_token_tail!)))) self!)) (=> %%global_location_label%%102 (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%103 (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true))))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_enter. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_enter. (Dcr Type Poly Int Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_tail! Poly) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_enter. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) self!) (let ((start$ (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$1 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) start$1) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range (%I (I start$)) (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& param_token_tail!)))))) (%I (I start$))))))))) (let ((start$ (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$1 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) start$1) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (<= start$ (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& param_token_tail!)))))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_enter. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::exec::log::NrLog::index")
(declare-fun req%lib!exec.log.impl&%7.index. (Dcr Type lib!exec.log.NrLog. Int) Bool)
(declare-const %%global_location_label%%104 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.log.NrLog.) (logical! Int)) (! (= (req%lib!exec.log.impl&%7.index. DT&. DT& self! logical!) (=> %%global_location_label%%104 (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!)))) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!exec.log.impl&%7.index. DT&. DT& self! logical!)))))
(declare-fun ens%lib!exec.log.impl&%7.index. (Dcr Type lib!exec.log.NrLog. Int Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.log.NrLog.) (logical! Int) (result! Int)) (! (= (ens%lib!exec.log.impl&%7.index. DT&. DT& self! logical! result!) (and (uInv SZ result!) (= result! (lib!exec.log.impl&%7.index_spec.? DT&. DT& (Poly%lib!exec.log.NrLog. self!) (I logical!))) (= result! (lib!spec.cyclicbuffer.log_entry_idx.? (I logical!) (I (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))))) (< result! (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))))) :pattern ((ens%lib!exec.log.impl&%7.index. DT&. DT& self! logical! result!)))))
(set-info :comment ";; Function-Def lib::exec::log::NrLog::index")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/log.rs:516:5: 516:63 (#0)")
(set-info :comment ";; Function-Specs lib::exec::log::NrLog::is_alive_value")
(declare-fun req%lib!exec.log.impl&%7.is_alive_value. (Dcr Type lib!exec.log.NrLog. Int) Bool)
(declare-const %%global_location_label%%105 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.log.NrLog.) (logical! Int)) (! (= (req%lib!exec.log.impl&%7.is_alive_value. DT&. DT& self! logical!) (=> %%global_location_label%%105 (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!)))) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!exec.log.impl&%7.is_alive_value. DT&. DT& self! logical!)))))
(declare-fun ens%lib!exec.log.impl&%7.is_alive_value. (Dcr Type lib!exec.log.NrLog. Int Bool) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.log.NrLog.) (logical! Int) (result! Bool)) (! (= (ens%lib!exec.log.impl&%7.is_alive_value. DT&. DT& self! logical! result!) (and (= result! (lib!exec.log.impl&%7.is_alive_value_spec.? DT&. DT& (Poly%lib!exec.log.NrLog. self!) (I logical!))) (= result! (lib!spec.cyclicbuffer.log_entry_alive_value.? (I logical!) (I (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))))))) :pattern ((ens%lib!exec.log.impl&%7.is_alive_value. DT&. DT& self! logical! result!)))))
(set-info :comment ";; Function-Def lib::exec::log::NrLog::is_alive_value")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/log.rs:536:5: 536:71 (#0)")
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::reader_guard")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_guard. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(declare-const %%global_location_label%%110 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_1_alive_bits! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_guard. DT&. DT& self! node_id! param_token_1_alive_bits! param_token_0_combiner!) (and (=> %%global_location_label%%106 (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& param_token_1_alive_bits!)))) self!)) (=> %%global_location_label%%107 (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%108 (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true))))))) (=> %%global_location_label%%109 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$1) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (< cur$ end$)))))) (=> %%global_location_label%%110 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$1) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& param_token_1_alive_bits!)))) (lib!spec.cyclicbuffer.log_entry_idx.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& param_token_1_alive_bits!)))) (lib!spec.cyclicbuffer.log_entry_alive_value.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!)))))))))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_guard. DT&. DT& self! node_id! param_token_1_alive_bits! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_guard. (Dcr Type Poly Int Poly Poly tuple%2.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_1_alive_bits! Poly) (param_token_0_combiner! Poly) (tmp_tuple! tuple%2.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_guard. DT&. DT& self! node_id! param_token_1_alive_bits! param_token_0_combiner! tmp_tuple!) (and (has_type (Poly%tuple%2. tmp_tuple!) (TYPE%tuple%2. (GHOST $) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) (let ((original_field_contents$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!))))) (let ((param_token_2_combiner$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!))))) (let ((original_field_contents$1 original_field_contents$)) (let ((param_token_2_combiner$1 param_token_2_combiner$)) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_2_combiner$1)))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$1) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) original_field_contents$1 (I cur$))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_2_combiner$1)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_2_combiner$1)))) (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard (%I (I start$)) (%I (I end$)) (%I (I cur$)) (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))))))))))))))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_guard. DT&. DT& self! node_id! param_token_1_alive_bits! param_token_0_combiner! tmp_tuple!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::guard_guards")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.guard_guards. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%111 Bool)
(declare-const %%global_location_label%%112 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.guard_guards. DT&. DT& self! node_id! param_token_0_combiner!) (and (=> %%global_location_label%%111 (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%112 (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.guard_guards. DT&. DT& self! node_id! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.guard_guards. (Dcr Type Poly Int Poly lib!spec.cyclicbuffer.StoredType.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly) (param_token_1_contents! lib!spec.cyclicbuffer.StoredType.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.guard_guards. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_contents!) (and (has_type (Poly%lib!spec.cyclicbuffer.StoredType. param_token_1_contents!) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$1) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (tuple%4./tuple%4 (I start$) (I end$) (I cur$) (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ NAT $ NAT $ NAT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))))))) (let ((start$ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((end$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= param_token_1_contents! val$)))))) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$1) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (tuple%4./tuple%4 (I start$) (I end$) (I cur$) (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ NAT $ NAT $ NAT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))))))) (let ((start$ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((end$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (Poly%lib!spec.cyclicbuffer.StoredType. val$) (I cur$) (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& self!)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!))))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!))))))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.guard_guards. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_contents!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::pre_exec_dispatch_local")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%113 Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_1_log! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. DT&. DT& self! node_id! param_token_1_log! param_token_0_combiner!) (and (=> %%global_location_label%%113 (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_1_log!)))) self!)) (=> %%global_location_label%%114 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%115 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%116 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_1_log!)))) lversion$))))))) (=> %%global_location_label%%117 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_1_log!)))))) (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) node_id!)))))))) (=> %%global_location_label%%118 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_1_log!)))))) (< lversion$ tail$)))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. DT&. DT& self! node_id! param_token_1_log! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. (Dcr Type Poly Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_1_log! Poly) (param_token_0_combiner! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. DT&. DT& self! node_id! param_token_1_log! param_token_0_combiner!) (and (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_1_log!)))))) (< idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))))))) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_1_log!)))))) (> (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)) 0))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. DT&. DT& self! node_id! param_token_1_log! param_token_0_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_dispatch_local")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. (Dcr Type Poly Int Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%119 Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(declare-const %%global_location_label%%126 Bool)
(declare-const %%global_location_label%%127 Bool)
(declare-const %%global_location_label%%128 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_3_log! Poly) (param_token_1_replicas! Poly) (param_token_2_local_updates! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. DT&. DT& self! node_id! param_token_3_log! param_token_1_replicas! param_token_2_local_updates! param_token_0_combiner!) (and (=> %%global_location_label%%119 (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_3_log!)))) self!)) (=> %%global_location_label%%120 (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))) self!)) (=> %%global_location_label%%121 (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_2_local_updates!)))) self!)) (=> %%global_location_label%%122 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%123 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%124 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))) node_id!))))))) (=> %%global_location_label%%125 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_2_local_updates!)))) rid$))))))))) (=> %%global_location_label%%126 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_2_local_updates!)))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_3_log!)))) lversion$)))))))))) (=> %%global_location_label%%127 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_2_local_updates!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_3_log!)))))) (< lversion$ tail$))))))))))) (=> %%global_location_label%%128 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_2_local_updates!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_3_log!)))))) (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) node_id!))))))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. DT&. DT& self! node_id! param_token_3_log! param_token_1_replicas! param_token_2_local_updates! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. (Dcr Type Poly Int Poly Poly Poly Poly tuple%3.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_3_log! Poly) (param_token_1_replicas! Poly) (param_token_2_local_updates! Poly) (param_token_0_combiner! Poly) (tmp_tuple! tuple%3.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. DT&. DT& self! node_id! param_token_3_log! param_token_1_replicas! param_token_2_local_updates! param_token_0_combiner! tmp_tuple!) (and (has_type (Poly%tuple%3. tmp_tuple!) (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (let ((param_token_5_replicas$ (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!))))) (let ((param_token_4_local_updates$ (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!))))) (let ((param_token_6_combiner$ (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!))))) (let ((param_token_5_replicas$1 param_token_5_replicas$)) (let ((param_token_4_local_updates$1 param_token_4_local_updates$)) (let ((param_token_6_combiner$1 param_token_6_combiner$)) (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_5_replicas$1)))) self!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_4_local_updates$1)))) self!)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_6_combiner$1)))) self!)) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_2_local_updates!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_3_log!)))))) (let ((tmp%%$2 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_4_local_updates$1)))) rid$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_4_local_updates$1)))) (lib!spec.unbounded_log.UpdateState./Applied ret$ (%I (I lversion$)))))))))))))))))) (let ((tmp%%$ (let ((tmp%%$4 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$4) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_2_local_updates!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_3_log!)))))) (let ((tmp%%$5 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5))))) (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_5_replicas$1)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_5_replicas$1)))) new_nr_state$))))))))))))))) (let ((tmp%%$ (let ((tmp%%$7 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$7) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$7))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$7))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$7))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$7))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_2_local_updates!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_3_log!)))))) (let ((tmp%%$8 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$8))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$8))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_6_combiner$1)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_6_combiner$1)))) (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I (nClip (Add idx$ 1)))) (%I (I tail$)))))))))))))))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. DT&. DT& self! node_id! param_token_3_log! param_token_1_replicas! param_token_2_local_updates! param_token_0_combiner! tmp_tuple!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_dispatch_remote")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. (Dcr Type Poly Int Poly Poly Poly) Bool)
(declare-const %%global_location_label%%129 Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(declare-const %%global_location_label%%132 Bool)
(declare-const %%global_location_label%%133 Bool)
(declare-const %%global_location_label%%134 Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_2_log! Poly) (param_token_1_replicas! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. DT&. DT& self! node_id! param_token_2_log! param_token_1_replicas! param_token_0_combiner!) (and (=> %%global_location_label%%129 (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_2_log!)))) self!)) (=> %%global_location_label%%130 (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))) self!)) (=> %%global_location_label%%131 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%132 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%133 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))) node_id!))))))) (=> %%global_location_label%%134 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_2_log!)))) lversion$)))))))) (=> %%global_location_label%%135 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_2_log!)))))) (< lversion$ tail$))))))))) (=> %%global_location_label%%136 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_2_log!)))))) (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) node_id!)))))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. DT&. DT& self! node_id! param_token_2_log! param_token_1_replicas! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. (Dcr Type Poly Int Poly Poly Poly tuple%2.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_2_log! Poly) (param_token_1_replicas! Poly) (param_token_0_combiner! Poly) (tmp_tuple! tuple%2.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. DT&. DT& self! node_id! param_token_2_log! param_token_1_replicas! param_token_0_combiner! tmp_tuple!) (and (has_type (Poly%tuple%2. tmp_tuple!) (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (let ((param_token_3_replicas$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!))))) (let ((param_token_4_combiner$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!))))) (let ((param_token_3_replicas$1 param_token_3_replicas$)) (let ((param_token_4_combiner$1 param_token_4_combiner$)) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_3_replicas$1)))) self!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_4_combiner$1)))) self!)) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_2_log!)))))) (let ((tmp%%$2 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2))))) (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_3_replicas$1)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_3_replicas$1)))) new_nr_state$))))))))))))) (let ((tmp%%$ (let ((tmp%%$4 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$4) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& param_token_1_replicas!)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& param_token_2_log!)))))) (let ((tmp%%$5 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_4_combiner$1)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_4_combiner$1)))) (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I idx$)) (%I (I tail$)))))))))))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. DT&. DT& self! node_id! param_token_2_log! param_token_1_replicas! param_token_0_combiner! tmp_tuple!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::reader_unguard")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_unguard. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%137 Bool)
(declare-const %%global_location_label%%138 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_unguard. DT&. DT& self! node_id! param_token_0_combiner!) (and (=> %%global_location_label%%137 (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%138 (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_unguard. DT&. DT& self! node_id! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_unguard. (Dcr Type Poly Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_unguard. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_0_combiner!)))))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$1) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$1)))))))) (tuple%4./tuple%4 (I start$) (I end$) (I cur$) (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ NAT $ NAT $ NAT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))))))) (let ((start$ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((end$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& param_token_1_combiner!)))) (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range (%I (I start$)) (%I (I end$)) (%I (I (nClip (Add cur$ 1))))))))))))))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.reader_unguard. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::pre_exec_update_version_upper_bound")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%139 Bool)
(declare-const %%global_location_label%%140 Bool)
(declare-const %%global_location_label%%141 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. DT&. DT& self! node_id! param_token_0_combiner!) (and (=> %%global_location_label%%139 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%140 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%141 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= lversion$ tail$))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. DT&. DT& self! node_id! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (param_token_0_combiner! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. DT&. DT& self! node_id! param_token_0_combiner!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. DT&. DT& self! node_id! param_token_0_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_update_version_upper_bound")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%142 Bool)
(declare-const %%global_location_label%%143 Bool)
(declare-const %%global_location_label%%144 Bool)
(declare-const %%global_location_label%%145 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (pre%param_token_version_upper_bound! Poly) (param_token_0_combiner! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. DT&. DT& self! node_id! pre%param_token_version_upper_bound! param_token_0_combiner!) (and (=> %%global_location_label%%142 (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& pre%param_token_version_upper_bound!)))) self!)) (=> %%global_location_label%%143 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) self!)) (=> %%global_location_label%%144 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%145 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= lversion$ tail$))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. DT&. DT& self! node_id! pre%param_token_version_upper_bound! param_token_0_combiner!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. (Dcr Type Poly Int Poly Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Int) (pre%param_token_version_upper_bound! Poly) (param_token_version_upper_bound! Poly) (param_token_0_combiner! Poly) (param_token_1_combiner! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. DT&. DT& self! node_id! pre%param_token_version_upper_bound! param_token_version_upper_bound! param_token_0_combiner! param_token_1_combiner!) (and (has_type param_token_1_combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type param_token_version_upper_bound! (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& param_token_version_upper_bound!)))) self!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_1_combiner!)))) (lib!spec.unbounded_log.CombinerState./UpdatedVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I tail$)))))))))) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& param_token_version_upper_bound!)))) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& param_token_0_combiner!)))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (ite (>= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& pre%param_token_version_upper_bound!)))) tail$) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& pre%param_token_version_upper_bound!)))) tail$))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. DT&. DT& self! node_id! pre%param_token_version_upper_bound! param_token_version_upper_bound! param_token_0_combiner! param_token_1_combiner!)))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::update_done")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. (Dcr Type Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%146 Bool)
(declare-const %%global_location_label%%147 Bool)
(declare-const %%global_location_label%%148 Bool)
(declare-const %%global_location_label%%149 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (rid! Int) (param_token_version_upper_bound! Poly) (param_token_0_local_updates! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_updates!) (and (=> %%global_location_label%%146 (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& param_token_version_upper_bound!)))) self!)) (=> %%global_location_label%%147 (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_0_local_updates!)))) self!)) (=> %%global_location_label%%148 (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_0_local_updates!)))) rid!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_0_local_updates!)))))) (and (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true)))))) (=> %%global_location_label%%149 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_0_local_updates!)))))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$1) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$1))))) (tuple%2./tuple%2 ret$ (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ NAT))))))) (let ((ret$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (> (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& param_token_version_upper_bound!)))) idx$))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_updates!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. (Dcr Type Poly Int Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (rid! Int) (param_token_version_upper_bound! Poly) (param_token_0_local_updates! Poly) (param_token_1_local_updates! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_updates! param_token_1_local_updates!) (and (has_type param_token_1_local_updates! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_1_local_updates!)))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_0_local_updates!)))))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$1) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$1))))) (tuple%2./tuple%2 ret$ (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ NAT))))))) (let ((ret$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_1_local_updates!)))) rid!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& param_token_1_local_updates!)))) (lib!spec.unbounded_log.UpdateState./Done ret$ (%I (I idx$)))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_updates! param_token_1_local_updates!)))))
(set-info :comment ";; Function-Specs lib::exec::log::NrLog::execute_update_done_multiple")
(declare-fun req%lib!exec.log.impl&%7.execute_update_done_multiple. (Dcr Type lib!exec.log.NrLog. vstd!seq.Seq<nat.>. Poly Poly) Bool)
(declare-const %%global_location_label%%150 Bool)
(declare-const %%global_location_label%%151 Bool)
(declare-const %%global_location_label%%152 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.log.NrLog.) (request_ids! vstd!seq.Seq<nat.>.) (local_updates! Poly) (version_upper_bound! Poly)) (! (= (req%lib!exec.log.impl&%7.execute_update_done_multiple. DT&. DT& self! request_ids! local_updates! version_upper_bound!) (and (=> %%global_location_label%%150 (lib!exec.log.impl&%6.wf.? DT&. DT& (Poly%lib!exec.log.NrLog. self!))) (=> %%global_location_label%%151 (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& version_upper_bound!)))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))) (=> %%global_location_label%%152 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)))) (and (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates!) i$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!) i$)))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))) (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$))))))))) (< (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$)))))))) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& version_upper_bound!)))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates!) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$))))))) :pattern ((req%lib!exec.log.impl&%7.execute_update_done_multiple. DT&. DT& self! request_ids! local_updates! version_upper_bound!)))))
(declare-fun ens%lib!exec.log.impl&%7.execute_update_done_multiple. (Dcr Type lib!exec.log.NrLog. vstd!seq.Seq<nat.>. Poly Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.log.NrLog.) (request_ids! vstd!seq.Seq<nat.>.) (local_updates! Poly) (version_upper_bound! Poly) (res! Poly)) (! (= (ens%lib!exec.log.impl&%7.execute_update_done_multiple. DT&. DT& self! request_ids! local_updates! version_upper_bound! res!) (and (has_type res! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)))) (and (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res!) i$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!) i$)))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))))))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$)))))))) (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res!) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$)))))) :pattern ((ens%lib!exec.log.impl&%7.execute_update_done_multiple. DT&. DT& self! request_ids! local_updates! version_upper_bound! res!)))))
(set-info :comment ";; Function-Def lib::exec::log::NrLog::execute_update_done_multiple")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/log.rs:1205:11: 1210:65 (#0)")
(declare-const DT&. Dcr)
(declare-const DT& Type)
(declare-const res! Poly)
(declare-const self! lib!exec.log.NrLog.)
(declare-const request_ids! vstd!seq.Seq<nat.>.)
(declare-const local_updates! Poly)
(declare-const version_upper_bound! Poly)
(declare-const tmp%1 vstd!seq.Seq<nat.>.)
(declare-const tmp%2 Poly)
(declare-const tmp%3 Int)
(declare-const local_updates_new@0 Poly)
(declare-const idx@ Int)
(declare-const local_update@ Poly)
(declare-const update_done_result@ Poly)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!exec.log.NrLog. self!) (TYPE%lib!exec.log.NrLog. DT&. DT&)))
(assert (has_type local_updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))))
(assert (has_type version_upper_bound! (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&)))
(assert (tr_bound%lib!Dispatch. DT&. DT&))
(assert (lib!exec.log.impl&%6.wf.? DT&. DT& (Poly%lib!exec.log.NrLog. self!)))
(assert (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& version_upper_bound!)))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!)))))
(assert (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)))) (and (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates!) i$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!) i$)))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))) (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$))))))))) (< (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$)))))))) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& version_upper_bound!)))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates!) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$)))))
(declare-const local_updates_new@1 Poly)
(declare-const local_updates_new@2 Poly)
(declare-const local_updates_new@3 Poly)
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%5 Bool)
(assert (not (=> (= decrease%init0 (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!))) (or (and (=> (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)) 0) (=> (= res! local_updates!) (=> %%location_label%%0 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)))) (and (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res!) i$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!) i$)))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))))))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$)))))))) (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res!) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))))) (=> (not (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)) 0)) %%switch_label%%0)) (and (not %%switch_label%%0) (=> (= local_updates_new@0 local_updates!) (=> (= idx@ (nClip (Sub (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)) 1))) (and (=> %%location_label%%1 (req%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates_new@0 (I idx@))) (=> (has_type local_updates_new@1 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) (=> (ens%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates_new@0 local_updates_new@1 (I idx@) local_update@) (=> (= tmp%1 (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.subrange.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!) (I 0) (I (Sub (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)) 1))))) (and (=> %%location_label%%2 (check_decrease_int (let ((self!$0 self!) (request_ids!$1 tmp%1) (local_updates!$2 local_updates_new@1) (version_upper_bound!$3 version_upper_bound!)) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!$1))) decrease%init0 false)) (and (=> %%location_label%%3 (req%lib!exec.log.impl&%7.execute_update_done_multiple. DT&. DT& self! tmp%1 local_updates_new@1 version_upper_bound!)) (=> (ens%lib!exec.log.impl&%7.execute_update_done_multiple. DT&. DT& self! tmp%1 local_updates_new@1 version_upper_bound! local_updates_new@2) (=> (= tmp%2 (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!)))) (=> (= tmp%3 (%I (vstd!seq.Seq.last.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)))) (and (=> %%location_label%%4 (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& tmp%2 tmp%3 version_upper_bound! local_update@)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& tmp%2 tmp%3 version_upper_bound! local_update@ update_done_result@) (=> (has_type local_updates_new@3 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) (=> (ens%vstd!map.impl&%0.tracked_insert. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates_new@2 local_updates_new@3 (I idx@) update_done_result@) (=> (= res! local_updates_new@3) (=> %%location_label%%5 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!)))) (and (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res!) i$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))) (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. request_ids!) i$)))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. self!))))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))))))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$)))))))) (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) local_updates! i$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res!) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) res! i$))))))))))))))))))))))))))
(check-sat)
(exit)
