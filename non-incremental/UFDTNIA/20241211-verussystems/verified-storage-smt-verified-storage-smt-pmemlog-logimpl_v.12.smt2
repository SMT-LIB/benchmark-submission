(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module logimpl_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%main!infinitelog_t.impl&%0.initialize. FuelId)
(declare-const fuel%main!infinitelog_t.impl&%0.append. FuelId)
(declare-const fuel%main!infinitelog_t.impl&%0.advance_head. FuelId)
(declare-const fuel%main!logimpl_v.incorruptible_bool_pos. FuelId)
(declare-const fuel%main!logimpl_v.header1_pos. FuelId)
(declare-const fuel%main!logimpl_v.header2_pos. FuelId)
(declare-const fuel%main!logimpl_v.header_crc_offset. FuelId)
(declare-const fuel%main!logimpl_v.header_head_offset. FuelId)
(declare-const fuel%main!logimpl_v.header_tail_offset. FuelId)
(declare-const fuel%main!logimpl_v.header_log_size_offset. FuelId)
(declare-const fuel%main!logimpl_v.header_size. FuelId)
(declare-const fuel%main!logimpl_v.pm_to_views. FuelId)
(declare-const fuel%main!logimpl_v.spec_get_live_header. FuelId)
(declare-const fuel%main!logimpl_v.permissions_depend_only_on_recovery_view. FuelId)
(declare-const fuel%main!logimpl_v.spec_bytes_to_metadata. FuelId)
(declare-const fuel%main!logimpl_v.spec_bytes_to_header. FuelId)
(declare-const fuel%main!logimpl_v.update_data_view_postcond. FuelId)
(declare-const fuel%main!logimpl_v.live_data_view_eq. FuelId)
(declare-const fuel%main!logimpl_v.spec_addr_logical_to_physical. FuelId)
(declare-const fuel%main!logimpl_v.contents_offset. FuelId)
(declare-const fuel%main!logimpl_v.impl&%0.log_state_is_valid. FuelId)
(declare-const fuel%main!logimpl_v.impl&%0.recover. FuelId)
(declare-const fuel%main!logimpl_v.impl&%0.inv_pm_contents. FuelId)
(declare-const fuel%main!logimpl_v.impl&%0.inv. FuelId)
(declare-const fuel%main!main_t.recovery_view. FuelId)
(declare-const fuel%main!main_t.read_correct_modulo_corruption. FuelId)
(declare-const fuel%main!pmemspec_t.all_elements_unique. FuelId)
(declare-const fuel%main!pmemspec_t.maybe_corrupted. FuelId)
(declare-const fuel%main!pmemspec_t.crc_size. FuelId)
(declare-const fuel%main!pmemspec_t.cdb0_val. FuelId)
(declare-const fuel%main!pmemspec_t.cdb1_val. FuelId)
(declare-const fuel%main!pmemspec_t.persistence_chunk_size. FuelId)
(declare-const fuel%main!pmemspec_t.update_byte_to_reflect_write. FuelId)
(declare-const fuel%main!pmemspec_t.update_contents_to_reflect_write. FuelId)
(declare-const fuel%main!pmemspec_t.update_byte_to_reflect_partially_flushed_write. FuelId)
(declare-const fuel%main!pmemspec_t.update_contents_to_reflect_partially_flushed_write. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%main!infinitelog_t.impl&%0.initialize. fuel%main!infinitelog_t.impl&%0.append. fuel%main!infinitelog_t.impl&%0.advance_head. fuel%main!logimpl_v.incorruptible_bool_pos. fuel%main!logimpl_v.header1_pos. fuel%main!logimpl_v.header2_pos. fuel%main!logimpl_v.header_crc_offset. fuel%main!logimpl_v.header_head_offset. fuel%main!logimpl_v.header_tail_offset. fuel%main!logimpl_v.header_log_size_offset. fuel%main!logimpl_v.header_size. fuel%main!logimpl_v.pm_to_views. fuel%main!logimpl_v.spec_get_live_header. fuel%main!logimpl_v.permissions_depend_only_on_recovery_view. fuel%main!logimpl_v.spec_bytes_to_metadata. fuel%main!logimpl_v.spec_bytes_to_header. fuel%main!logimpl_v.update_data_view_postcond. fuel%main!logimpl_v.live_data_view_eq. fuel%main!logimpl_v.spec_addr_logical_to_physical. fuel%main!logimpl_v.contents_offset. fuel%main!logimpl_v.impl&%0.log_state_is_valid. fuel%main!logimpl_v.impl&%0.recover. fuel%main!logimpl_v.impl&%0.inv_pm_contents. fuel%main!logimpl_v.impl&%0.inv. fuel%main!main_t.recovery_view. fuel%main!main_t.read_correct_modulo_corruption. fuel%main!pmemspec_t.all_elements_unique. fuel%main!pmemspec_t.maybe_corrupted. fuel%main!pmemspec_t.crc_size. fuel%main!pmemspec_t.cdb0_val. fuel%main!pmemspec_t.cdb1_val. fuel%main!pmemspec_t.persistence_chunk_size. fuel%main!pmemspec_t.update_byte_to_reflect_write. fuel%main!pmemspec_t.update_contents_to_reflect_write. fuel%main!pmemspec_t.update_byte_to_reflect_partially_flushed_write. fuel%main!pmemspec_t.update_contents_to_reflect_partially_flushed_write. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<int.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-sort slice%<u8.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (main!infinitelog_t.AbstractInfiniteLogState. 0) (main!logimpl_v.PersistentHeader. 0) (main!logimpl_v.PersistentHeaderMetadata. 0) (main!logimpl_v.HeaderView. 0) (main!logimpl_v.UntrustedLogImpl. 0) (main!main_t.InfiniteLogErr. 0) (main!pmemspec_t.PersistentMemoryConstants. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/?head Int) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/?log vstd!seq.Seq<u8.>.) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/?capacity Int))) ((main!logimpl_v.PersistentHeader./PersistentHeader (main!logimpl_v.PersistentHeader./PersistentHeader/?crc Int) (main!logimpl_v.PersistentHeader./PersistentHeader/?metadata main!logimpl_v.PersistentHeaderMetadata.))) ((main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/?head Int) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/?tail Int) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/?log_size Int))) ((main!logimpl_v.HeaderView./HeaderView (main!logimpl_v.HeaderView./HeaderView/?header1 main!logimpl_v.PersistentHeader.) (main!logimpl_v.HeaderView./HeaderView/?header2 main!logimpl_v.PersistentHeader.))) ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?incorruptible_bool Int) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?header_crc Int) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?head Int) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?tail Int) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?log_size Int))) ((main!main_t.InfiniteLogErr./InsufficientSpaceForSetup (main!main_t.InfiniteLogErr./InsufficientSpaceForSetup/?required_space Int)) (main!main_t.InfiniteLogErr./CantReadBeforeHead (main!main_t.InfiniteLogErr./CantReadBeforeHead/?head Int)) (main!main_t.InfiniteLogErr./CantReadPastTail (main!main_t.InfiniteLogErr./CantReadPastTail/?tail Int)) (main!main_t.InfiniteLogErr./InsufficientSpaceForAppend (main!main_t.InfiniteLogErr./InsufficientSpaceForAppend/?available_space Int)) (main!main_t.InfiniteLogErr./CRCMismatch ) (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead/?head Int)) (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail/?tail Int))) ((main!pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants (main!pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption Bool))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head (main!infinitelog_t.AbstractInfiniteLogState.) Int)
(declare-fun main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log (main!infinitelog_t.AbstractInfiniteLogState.) vstd!seq.Seq<u8.>.)
(declare-fun main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/capacity (main!infinitelog_t.AbstractInfiniteLogState.) Int)
(declare-fun main!logimpl_v.PersistentHeader./PersistentHeader/crc (main!logimpl_v.PersistentHeader.) Int)
(declare-fun main!logimpl_v.PersistentHeader./PersistentHeader/metadata (main!logimpl_v.PersistentHeader.) main!logimpl_v.PersistentHeaderMetadata.)
(declare-fun main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (main!logimpl_v.PersistentHeaderMetadata.) Int)
(declare-fun main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (main!logimpl_v.PersistentHeaderMetadata.) Int)
(declare-fun main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (main!logimpl_v.PersistentHeaderMetadata.) Int)
(declare-fun main!logimpl_v.HeaderView./HeaderView/header1 (main!logimpl_v.HeaderView.) main!logimpl_v.PersistentHeader.)
(declare-fun main!logimpl_v.HeaderView./HeaderView/header2 (main!logimpl_v.HeaderView.) main!logimpl_v.PersistentHeader.)
(declare-fun main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/incorruptible_bool (main!logimpl_v.UntrustedLogImpl.) Int)
(declare-fun main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/header_crc (main!logimpl_v.UntrustedLogImpl.) Int)
(declare-fun main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/head (main!logimpl_v.UntrustedLogImpl.) Int)
(declare-fun main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/tail (main!logimpl_v.UntrustedLogImpl.) Int)
(declare-fun main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/log_size (main!logimpl_v.UntrustedLogImpl.) Int)
(declare-fun main!main_t.InfiniteLogErr./InsufficientSpaceForSetup/required_space (main!main_t.InfiniteLogErr.) Int)
(declare-fun main!main_t.InfiniteLogErr./CantReadBeforeHead/head (main!main_t.InfiniteLogErr.) Int)
(declare-fun main!main_t.InfiniteLogErr./CantReadPastTail/tail (main!main_t.InfiniteLogErr.) Int)
(declare-fun main!main_t.InfiniteLogErr./InsufficientSpaceForAppend/available_space (main!main_t.InfiniteLogErr.) Int)
(declare-fun main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead/head (main!main_t.InfiniteLogErr.) Int)
(declare-fun main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail/tail (main!main_t.InfiniteLogErr.) Int)
(declare-fun main!pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (main!pmemspec_t.PersistentMemoryConstants.) Bool)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%main!infinitelog_t.AbstractInfiniteLogState. Type)
(declare-const TYPE%main!logimpl_v.PersistentHeader. Type)
(declare-const TYPE%main!logimpl_v.PersistentHeaderMetadata. Type)
(declare-const TYPE%main!logimpl_v.HeaderView. Type)
(declare-const TYPE%main!logimpl_v.UntrustedLogImpl. Type)
(declare-const TYPE%main!main_t.InfiniteLogErr. Type)
(declare-const TYPE%main!pmemspec_t.PersistentMemoryConstants. Type)
(declare-fun TYPE%main!pmemspec_t.WriteRestrictedPersistentMemory. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq<int.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<int.>. (Poly) vstd!seq.Seq<int.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%slice%<u8.>. (slice%<u8.>.) Poly)
(declare-fun %Poly%slice%<u8.>. (Poly) slice%<u8.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%main!infinitelog_t.AbstractInfiniteLogState. (main!infinitelog_t.AbstractInfiniteLogState.) Poly)
(declare-fun %Poly%main!infinitelog_t.AbstractInfiniteLogState. (Poly) main!infinitelog_t.AbstractInfiniteLogState.)
(declare-fun Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.PersistentHeader.) Poly)
(declare-fun %Poly%main!logimpl_v.PersistentHeader. (Poly) main!logimpl_v.PersistentHeader.)
(declare-fun Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeaderMetadata.) Poly)
(declare-fun %Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly) main!logimpl_v.PersistentHeaderMetadata.)
(declare-fun Poly%main!logimpl_v.HeaderView. (main!logimpl_v.HeaderView.) Poly)
(declare-fun %Poly%main!logimpl_v.HeaderView. (Poly) main!logimpl_v.HeaderView.)
(declare-fun Poly%main!logimpl_v.UntrustedLogImpl. (main!logimpl_v.UntrustedLogImpl.) Poly)
(declare-fun %Poly%main!logimpl_v.UntrustedLogImpl. (Poly) main!logimpl_v.UntrustedLogImpl.)
(declare-fun Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr.) Poly)
(declare-fun %Poly%main!main_t.InfiniteLogErr. (Poly) main!main_t.InfiniteLogErr.)
(declare-fun Poly%main!pmemspec_t.PersistentMemoryConstants. (main!pmemspec_t.PersistentMemoryConstants.) Poly)
(declare-fun %Poly%main!pmemspec_t.PersistentMemoryConstants. (Poly) main!pmemspec_t.PersistentMemoryConstants.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))))))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<int.>.)) (! (= x (%Poly%vstd!seq.Seq<int.>. (Poly%vstd!seq.Seq<int.>. x))) :pattern ((Poly%vstd!seq.Seq<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ INT)) (= x (Poly%vstd!seq.Seq<int.>. (%Poly%vstd!seq.Seq<int.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ INT))))))
(assert (forall ((x vstd!seq.Seq<int.>.)) (! (has_type (Poly%vstd!seq.Seq<int.>. x) (TYPE%vstd!seq.Seq. $ INT)) :pattern ((has_type (Poly%vstd!seq.Seq<int.>. x) (TYPE%vstd!seq.Seq. $ INT))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x slice%<u8.>.)) (! (= x (%Poly%slice%<u8.>. (Poly%slice%<u8.>. x))) :pattern ((Poly%slice%<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (SLICE $ (UINT 8))) (= x (Poly%slice%<u8.>. (%Poly%slice%<u8.>. x)))) :pattern ((has_type x (SLICE $ (UINT 8)))))))
(assert (forall ((x slice%<u8.>.)) (! (has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8))) :pattern ((has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8)))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x main!infinitelog_t.AbstractInfiniteLogState.)) (! (= x (%Poly%main!infinitelog_t.AbstractInfiniteLogState. (Poly%main!infinitelog_t.AbstractInfiniteLogState. x))) :pattern ((Poly%main!infinitelog_t.AbstractInfiniteLogState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!infinitelog_t.AbstractInfiniteLogState.) (= x (Poly%main!infinitelog_t.AbstractInfiniteLogState. (%Poly%main!infinitelog_t.AbstractInfiniteLogState. x)))) :pattern ((has_type x TYPE%main!infinitelog_t.AbstractInfiniteLogState.)))))
(assert (forall ((x main!infinitelog_t.AbstractInfiniteLogState.)) (! (= (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head x) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/?head x)) :pattern ((main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head x)))))
(assert (forall ((x main!infinitelog_t.AbstractInfiniteLogState.)) (! (= (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log x) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/?log x)) :pattern ((main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log x)))))
(assert (forall ((x main!infinitelog_t.AbstractInfiniteLogState.)) (! (= (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/capacity x) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/?capacity x)) :pattern ((main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/capacity x)))))
(assert (forall ((x main!infinitelog_t.AbstractInfiniteLogState.)) (! (has_type (Poly%main!infinitelog_t.AbstractInfiniteLogState. x) TYPE%main!infinitelog_t.AbstractInfiniteLogState.) :pattern ((has_type (Poly%main!infinitelog_t.AbstractInfiniteLogState. x) TYPE%main!infinitelog_t.AbstractInfiniteLogState.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%main!infinitelog_t.AbstractInfiniteLogState.) (has_type y TYPE%main!infinitelog_t.AbstractInfiniteLogState.) (= (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head (%Poly%main!infinitelog_t.AbstractInfiniteLogState. x)) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head (%Poly%main!infinitelog_t.AbstractInfiniteLogState. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log (%Poly%main!infinitelog_t.AbstractInfiniteLogState. x))) (Poly%vstd!seq.Seq<u8.>. (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log (%Poly%main!infinitelog_t.AbstractInfiniteLogState. y)))) (= (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/capacity (%Poly%main!infinitelog_t.AbstractInfiniteLogState. x)) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/capacity (%Poly%main!infinitelog_t.AbstractInfiniteLogState. y)))) (ext_eq deep TYPE%main!infinitelog_t.AbstractInfiniteLogState. x y)) :pattern ((ext_eq deep TYPE%main!infinitelog_t.AbstractInfiniteLogState. x y)))))
(assert (forall ((x main!logimpl_v.PersistentHeader.)) (! (= x (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. x))) :pattern ((Poly%main!logimpl_v.PersistentHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.PersistentHeader.) (= x (Poly%main!logimpl_v.PersistentHeader. (%Poly%main!logimpl_v.PersistentHeader. x)))) :pattern ((has_type x TYPE%main!logimpl_v.PersistentHeader.)))))
(assert (forall ((_crc! Int) (_metadata! main!logimpl_v.PersistentHeaderMetadata.)) (! (=> (and (uInv 64 _crc!) (has_type (Poly%main!logimpl_v.PersistentHeaderMetadata. _metadata!) TYPE%main!logimpl_v.PersistentHeaderMetadata.)) (has_type (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.PersistentHeader./PersistentHeader _crc! _metadata!)) TYPE%main!logimpl_v.PersistentHeader.)) :pattern ((has_type (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.PersistentHeader./PersistentHeader _crc! _metadata!)) TYPE%main!logimpl_v.PersistentHeader.)))))
(assert (forall ((x main!logimpl_v.PersistentHeader.)) (! (= (main!logimpl_v.PersistentHeader./PersistentHeader/crc x) (main!logimpl_v.PersistentHeader./PersistentHeader/?crc x)) :pattern ((main!logimpl_v.PersistentHeader./PersistentHeader/crc x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.PersistentHeader.) (uInv 64 (main!logimpl_v.PersistentHeader./PersistentHeader/crc (%Poly%main!logimpl_v.PersistentHeader. x)))) :pattern ((main!logimpl_v.PersistentHeader./PersistentHeader/crc (%Poly%main!logimpl_v.PersistentHeader. x)) (has_type x TYPE%main!logimpl_v.PersistentHeader.)))))
(assert (forall ((x main!logimpl_v.PersistentHeader.)) (! (= (main!logimpl_v.PersistentHeader./PersistentHeader/metadata x) (main!logimpl_v.PersistentHeader./PersistentHeader/?metadata x)) :pattern ((main!logimpl_v.PersistentHeader./PersistentHeader/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.PersistentHeader.) (has_type (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. x))) TYPE%main!logimpl_v.PersistentHeaderMetadata.)) :pattern ((main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. x)) (has_type x TYPE%main!logimpl_v.PersistentHeader.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%main!logimpl_v.PersistentHeader.) (has_type y TYPE%main!logimpl_v.PersistentHeader.) (= (main!logimpl_v.PersistentHeader./PersistentHeader/crc (%Poly%main!logimpl_v.PersistentHeader. x)) (main!logimpl_v.PersistentHeader./PersistentHeader/crc (%Poly%main!logimpl_v.PersistentHeader. y))) (ext_eq deep TYPE%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. x))) (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. y))))) (ext_eq deep TYPE%main!logimpl_v.PersistentHeader. x y)) :pattern ((ext_eq deep TYPE%main!logimpl_v.PersistentHeader. x y)))))
(assert (forall ((x main!logimpl_v.PersistentHeaderMetadata.)) (! (= x (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. x))) :pattern ((Poly%main!logimpl_v.PersistentHeaderMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.) (= x (Poly%main!logimpl_v.PersistentHeaderMetadata. (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)))) :pattern ((has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.)))))
(assert (forall ((_head! Int) (_tail! Int) (_log_size! Int)) (! (=> (and (uInv 64 _head!) (uInv 64 _tail!) (uInv 64 _log_size!)) (has_type (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata _head! _tail! _log_size!)) TYPE%main!logimpl_v.PersistentHeaderMetadata.)) :pattern ((has_type (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata _head! _tail! _log_size!)) TYPE%main!logimpl_v.PersistentHeaderMetadata.)))))
(assert (forall ((x main!logimpl_v.PersistentHeaderMetadata.)) (! (= (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head x) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/?head x)) :pattern ((main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.) (uInv 64 (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)))) :pattern ((main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)) (has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.)))))
(assert (forall ((x main!logimpl_v.PersistentHeaderMetadata.)) (! (= (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail x) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/?tail x)) :pattern ((main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.) (uInv 64 (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)))) :pattern ((main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)) (has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.)))))
(assert (forall ((x main!logimpl_v.PersistentHeaderMetadata.)) (! (= (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size x) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/?log_size x)) :pattern ((main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.) (uInv 64 (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)))) :pattern ((main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)) (has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%main!logimpl_v.PersistentHeaderMetadata.) (has_type y TYPE%main!logimpl_v.PersistentHeaderMetadata.) (= (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. y))) (= (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. y))) (= (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. x)) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. y)))) (ext_eq deep TYPE%main!logimpl_v.PersistentHeaderMetadata. x y)) :pattern ((ext_eq deep TYPE%main!logimpl_v.PersistentHeaderMetadata. x y)))))
(assert (forall ((x main!logimpl_v.HeaderView.)) (! (= x (%Poly%main!logimpl_v.HeaderView. (Poly%main!logimpl_v.HeaderView. x))) :pattern ((Poly%main!logimpl_v.HeaderView. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.HeaderView.) (= x (Poly%main!logimpl_v.HeaderView. (%Poly%main!logimpl_v.HeaderView. x)))) :pattern ((has_type x TYPE%main!logimpl_v.HeaderView.)))))
(assert (forall ((_header1! main!logimpl_v.PersistentHeader.) (_header2! main!logimpl_v.PersistentHeader.)) (! (=> (and (has_type (Poly%main!logimpl_v.PersistentHeader. _header1!) TYPE%main!logimpl_v.PersistentHeader.) (has_type (Poly%main!logimpl_v.PersistentHeader. _header2!) TYPE%main!logimpl_v.PersistentHeader.)) (has_type (Poly%main!logimpl_v.HeaderView. (main!logimpl_v.HeaderView./HeaderView _header1! _header2!)) TYPE%main!logimpl_v.HeaderView.)) :pattern ((has_type (Poly%main!logimpl_v.HeaderView. (main!logimpl_v.HeaderView./HeaderView _header1! _header2!)) TYPE%main!logimpl_v.HeaderView.)))))
(assert (forall ((x main!logimpl_v.HeaderView.)) (! (= (main!logimpl_v.HeaderView./HeaderView/header1 x) (main!logimpl_v.HeaderView./HeaderView/?header1 x)) :pattern ((main!logimpl_v.HeaderView./HeaderView/header1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.HeaderView.) (has_type (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.HeaderView./HeaderView/header1 (%Poly%main!logimpl_v.HeaderView. x))) TYPE%main!logimpl_v.PersistentHeader.)) :pattern ((main!logimpl_v.HeaderView./HeaderView/header1 (%Poly%main!logimpl_v.HeaderView. x)) (has_type x TYPE%main!logimpl_v.HeaderView.)))))
(assert (forall ((x main!logimpl_v.HeaderView.)) (! (= (main!logimpl_v.HeaderView./HeaderView/header2 x) (main!logimpl_v.HeaderView./HeaderView/?header2 x)) :pattern ((main!logimpl_v.HeaderView./HeaderView/header2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.HeaderView.) (has_type (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.HeaderView./HeaderView/header2 (%Poly%main!logimpl_v.HeaderView. x))) TYPE%main!logimpl_v.PersistentHeader.)) :pattern ((main!logimpl_v.HeaderView./HeaderView/header2 (%Poly%main!logimpl_v.HeaderView. x)) (has_type x TYPE%main!logimpl_v.HeaderView.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%main!logimpl_v.HeaderView.) (has_type y TYPE%main!logimpl_v.HeaderView.) (ext_eq deep TYPE%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.HeaderView./HeaderView/header1 (%Poly%main!logimpl_v.HeaderView. x))) (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.HeaderView./HeaderView/header1 (%Poly%main!logimpl_v.HeaderView. y)))) (ext_eq deep TYPE%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.HeaderView./HeaderView/header2 (%Poly%main!logimpl_v.HeaderView. x))) (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.HeaderView./HeaderView/header2 (%Poly%main!logimpl_v.HeaderView. y))))) (ext_eq deep TYPE%main!logimpl_v.HeaderView. x y)) :pattern ((ext_eq deep TYPE%main!logimpl_v.HeaderView. x y)))))
(assert (forall ((x main!logimpl_v.UntrustedLogImpl.)) (! (= x (%Poly%main!logimpl_v.UntrustedLogImpl. (Poly%main!logimpl_v.UntrustedLogImpl. x))) :pattern ((Poly%main!logimpl_v.UntrustedLogImpl. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.) (= x (Poly%main!logimpl_v.UntrustedLogImpl. (%Poly%main!logimpl_v.UntrustedLogImpl. x)))) :pattern ((has_type x TYPE%main!logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((_incorruptible_bool! Int) (_header_crc! Int) (_head! Int) (_tail! Int) (_log_size! Int)) (! (=> (and (uInv 64 _incorruptible_bool!) (uInv 64 _header_crc!) (uInv 64 _head!) (uInv 64 _tail!) (uInv 64 _log_size!)) (has_type (Poly%main!logimpl_v.UntrustedLogImpl. (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl _incorruptible_bool! _header_crc! _head! _tail! _log_size!)) TYPE%main!logimpl_v.UntrustedLogImpl.)) :pattern ((has_type (Poly%main!logimpl_v.UntrustedLogImpl. (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl _incorruptible_bool! _header_crc! _head! _tail! _log_size!)) TYPE%main!logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((x main!logimpl_v.UntrustedLogImpl.)) (! (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/incorruptible_bool x) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?incorruptible_bool x)) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/incorruptible_bool x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.) (uInv 64 (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/incorruptible_bool (%Poly%main!logimpl_v.UntrustedLogImpl. x)))) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/incorruptible_bool (%Poly%main!logimpl_v.UntrustedLogImpl. x)) (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((x main!logimpl_v.UntrustedLogImpl.)) (! (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/header_crc x) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?header_crc x)) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/header_crc x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.) (uInv 64 (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/header_crc (%Poly%main!logimpl_v.UntrustedLogImpl. x)))) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/header_crc (%Poly%main!logimpl_v.UntrustedLogImpl. x)) (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((x main!logimpl_v.UntrustedLogImpl.)) (! (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/head x) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?head x)) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.) (uInv 64 (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/head (%Poly%main!logimpl_v.UntrustedLogImpl. x)))) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/head (%Poly%main!logimpl_v.UntrustedLogImpl. x)) (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((x main!logimpl_v.UntrustedLogImpl.)) (! (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/tail x) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?tail x)) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.) (uInv 64 (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/tail (%Poly%main!logimpl_v.UntrustedLogImpl. x)))) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/tail (%Poly%main!logimpl_v.UntrustedLogImpl. x)) (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((x main!logimpl_v.UntrustedLogImpl.)) (! (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/log_size x) (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/?log_size x)) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/log_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.) (uInv 64 (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/log_size (%Poly%main!logimpl_v.UntrustedLogImpl. x)))) :pattern ((main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/log_size (%Poly%main!logimpl_v.UntrustedLogImpl. x)) (has_type x TYPE%main!logimpl_v.UntrustedLogImpl.)))))
(assert (forall ((x main!main_t.InfiniteLogErr.)) (! (= x (%Poly%main!main_t.InfiniteLogErr. (Poly%main!main_t.InfiniteLogErr. x))) :pattern ((Poly%main!main_t.InfiniteLogErr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!main_t.InfiniteLogErr.) (= x (Poly%main!main_t.InfiniteLogErr. (%Poly%main!main_t.InfiniteLogErr. x)))) :pattern ((has_type x TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((_required_space! Int)) (! (=> (uInv 64 _required_space!) (has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./InsufficientSpaceForSetup _required_space!)) TYPE%main!main_t.InfiniteLogErr.)) :pattern ((has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./InsufficientSpaceForSetup _required_space!)) TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((x main!main_t.InfiniteLogErr.)) (! (= (main!main_t.InfiniteLogErr./InsufficientSpaceForSetup/required_space x) (main!main_t.InfiniteLogErr./InsufficientSpaceForSetup/?required_space x)) :pattern ((main!main_t.InfiniteLogErr./InsufficientSpaceForSetup/required_space x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!main_t.InfiniteLogErr.) (uInv 64 (main!main_t.InfiniteLogErr./InsufficientSpaceForSetup/required_space (%Poly%main!main_t.InfiniteLogErr. x)))) :pattern ((main!main_t.InfiniteLogErr./InsufficientSpaceForSetup/required_space (%Poly%main!main_t.InfiniteLogErr. x)) (has_type x TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((_head! Int)) (! (=> (uInv 64 _head!) (has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./CantReadBeforeHead _head!)) TYPE%main!main_t.InfiniteLogErr.)) :pattern ((has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./CantReadBeforeHead _head!)) TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((x main!main_t.InfiniteLogErr.)) (! (= (main!main_t.InfiniteLogErr./CantReadBeforeHead/head x) (main!main_t.InfiniteLogErr./CantReadBeforeHead/?head x)) :pattern ((main!main_t.InfiniteLogErr./CantReadBeforeHead/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!main_t.InfiniteLogErr.) (uInv 64 (main!main_t.InfiniteLogErr./CantReadBeforeHead/head (%Poly%main!main_t.InfiniteLogErr. x)))) :pattern ((main!main_t.InfiniteLogErr./CantReadBeforeHead/head (%Poly%main!main_t.InfiniteLogErr. x)) (has_type x TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((_tail! Int)) (! (=> (uInv 64 _tail!) (has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./CantReadPastTail _tail!)) TYPE%main!main_t.InfiniteLogErr.)) :pattern ((has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./CantReadPastTail _tail!)) TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((x main!main_t.InfiniteLogErr.)) (! (= (main!main_t.InfiniteLogErr./CantReadPastTail/tail x) (main!main_t.InfiniteLogErr./CantReadPastTail/?tail x)) :pattern ((main!main_t.InfiniteLogErr./CantReadPastTail/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!main_t.InfiniteLogErr.) (uInv 64 (main!main_t.InfiniteLogErr./CantReadPastTail/tail (%Poly%main!main_t.InfiniteLogErr. x)))) :pattern ((main!main_t.InfiniteLogErr./CantReadPastTail/tail (%Poly%main!main_t.InfiniteLogErr. x)) (has_type x TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((_available_space! Int)) (! (=> (uInv 64 _available_space!) (has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./InsufficientSpaceForAppend _available_space!)) TYPE%main!main_t.InfiniteLogErr.)) :pattern ((has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./InsufficientSpaceForAppend _available_space!)) TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((x main!main_t.InfiniteLogErr.)) (! (= (main!main_t.InfiniteLogErr./InsufficientSpaceForAppend/available_space x) (main!main_t.InfiniteLogErr./InsufficientSpaceForAppend/?available_space x)) :pattern ((main!main_t.InfiniteLogErr./InsufficientSpaceForAppend/available_space x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!main_t.InfiniteLogErr.) (uInv 64 (main!main_t.InfiniteLogErr./InsufficientSpaceForAppend/available_space (%Poly%main!main_t.InfiniteLogErr. x)))) :pattern ((main!main_t.InfiniteLogErr./InsufficientSpaceForAppend/available_space (%Poly%main!main_t.InfiniteLogErr. x)) (has_type x TYPE%main!main_t.InfiniteLogErr.)))))
(assert (has_type (Poly%main!main_t.InfiniteLogErr. main!main_t.InfiniteLogErr./CRCMismatch) TYPE%main!main_t.InfiniteLogErr.))
(assert (forall ((_head! Int)) (! (=> (uInv 64 _head!) (has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead _head!)) TYPE%main!main_t.InfiniteLogErr.)) :pattern ((has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead _head!)) TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((x main!main_t.InfiniteLogErr.)) (! (= (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead/head x) (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead/?head x)) :pattern ((main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!main_t.InfiniteLogErr.) (uInv 64 (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead/head (%Poly%main!main_t.InfiniteLogErr. x)))) :pattern ((main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeforeHead/head (%Poly%main!main_t.InfiniteLogErr. x)) (has_type x TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((_tail! Int)) (! (=> (uInv 64 _tail!) (has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail _tail!)) TYPE%main!main_t.InfiniteLogErr.)) :pattern ((has_type (Poly%main!main_t.InfiniteLogErr. (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail _tail!)) TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((x main!main_t.InfiniteLogErr.)) (! (= (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail/tail x) (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail/?tail x)) :pattern ((main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!main_t.InfiniteLogErr.) (uInv 64 (main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail/tail (%Poly%main!main_t.InfiniteLogErr. x)))) :pattern ((main!main_t.InfiniteLogErr./CantAdvanceHeadPositionBeyondTail/tail (%Poly%main!main_t.InfiniteLogErr. x)) (has_type x TYPE%main!main_t.InfiniteLogErr.)))))
(assert (forall ((x main!pmemspec_t.PersistentMemoryConstants.)) (! (= x (%Poly%main!pmemspec_t.PersistentMemoryConstants. (Poly%main!pmemspec_t.PersistentMemoryConstants. x))) :pattern ((Poly%main!pmemspec_t.PersistentMemoryConstants. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%main!pmemspec_t.PersistentMemoryConstants.) (= x (Poly%main!pmemspec_t.PersistentMemoryConstants. (%Poly%main!pmemspec_t.PersistentMemoryConstants. x)))) :pattern ((has_type x TYPE%main!pmemspec_t.PersistentMemoryConstants.)))))
(assert (forall ((x main!pmemspec_t.PersistentMemoryConstants.)) (! (= (main!pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x) (main!pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption x)) :pattern ((main!pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x)))))
(assert (forall ((x main!pmemspec_t.PersistentMemoryConstants.)) (! (has_type (Poly%main!pmemspec_t.PersistentMemoryConstants. x) TYPE%main!pmemspec_t.PersistentMemoryConstants.) :pattern ((has_type (Poly%main!pmemspec_t.PersistentMemoryConstants. x) TYPE%main!pmemspec_t.PersistentMemoryConstants.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%main!pmemspec_t.PersistentMemory. (Dcr Type) Bool)
(declare-fun tr_bound%main!sccf.CheckPermission. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%main!pmemspec_t.PersistentMemory. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AbstractStorage&. Dcr) (AbstractStorage& Type)) (! true :pattern ((tr_bound%main!sccf.CheckPermission. Self%&. Self%& AbstractStorage&. AbstractStorage&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u64_to_le_bytes")
(declare-fun vstd!bytes.spec_u64_to_le_bytes.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u64_from_le_bytes")
(declare-fun vstd!bytes.spec_u64_from_le_bytes.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::pmemspec_t::PersistentMemory::view")
(declare-fun main!pmemspec_t.PersistentMemory.view.? (Dcr Type Poly) Poly)
(declare-fun main!pmemspec_t.PersistentMemory.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl main::pmemspec_t::PersistentMemory::inv")
(declare-fun main!pmemspec_t.PersistentMemory.inv.? (Dcr Type Poly) Poly)
(declare-fun main!pmemspec_t.PersistentMemory.inv%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl main::pmemspec_t::PersistentMemory::constants")
(declare-fun main!pmemspec_t.PersistentMemory.constants.? (Dcr Type Poly) Poly)
(declare-fun main!pmemspec_t.PersistentMemory.constants%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl main::pmemspec_t::maybe_corrupted_byte")
(declare-fun main!pmemspec_t.maybe_corrupted_byte.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::pmemspec_t::maybe_corrupted")
(declare-fun main!pmemspec_t.maybe_corrupted.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::pmemspec_t::update_byte_to_reflect_write")
(declare-fun main!pmemspec_t.update_byte_to_reflect_write.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::pmemspec_t::update_contents_to_reflect_write")
(declare-fun main!pmemspec_t.update_contents_to_reflect_write.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl main::pmemspec_t::spec_crc_bytes")
(declare-fun main!pmemspec_t.spec_crc_bytes.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl main::pmemspec_t::crc_size")
(declare-fun main!pmemspec_t.crc_size.? () Int)
(set-info :comment ";; Function-Decl main::pmemspec_t::all_elements_unique")
(declare-fun main!pmemspec_t.all_elements_unique.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::pmemspec_t::cdb0_val")
(declare-fun main!pmemspec_t.cdb0_val.? () Int)
(set-info :comment ";; Function-Decl main::pmemspec_t::cdb1_val")
(declare-fun main!pmemspec_t.cdb1_val.? () Int)
(set-info :comment ";; Function-Decl main::sccf::CheckPermission::check_permission")
(declare-fun main!sccf.CheckPermission.check_permission.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun main!sccf.CheckPermission.check_permission%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl main::infinitelog_t::AbstractInfiniteLogState::initialize")
(declare-fun main!infinitelog_t.impl&%0.initialize.? (Poly) main!infinitelog_t.AbstractInfiniteLogState.)
(set-info :comment ";; Function-Decl main::infinitelog_t::AbstractInfiniteLogState::append")
(declare-fun main!infinitelog_t.impl&%0.append.? (Poly Poly) main!infinitelog_t.AbstractInfiniteLogState.)
(set-info :comment ";; Function-Decl main::infinitelog_t::AbstractInfiniteLogState::advance_head")
(declare-fun main!infinitelog_t.impl&%0.advance_head.? (Poly Poly) main!infinitelog_t.AbstractInfiniteLogState.)
(set-info :comment ";; Function-Decl main::logimpl_v::incorruptible_bool_pos")
(declare-fun main!logimpl_v.incorruptible_bool_pos.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::header1_pos")
(declare-fun main!logimpl_v.header1_pos.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::header2_pos")
(declare-fun main!logimpl_v.header2_pos.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::header_crc_offset")
(declare-fun main!logimpl_v.header_crc_offset.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::header_head_offset")
(declare-fun main!logimpl_v.header_head_offset.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::header_tail_offset")
(declare-fun main!logimpl_v.header_tail_offset.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::header_log_size_offset")
(declare-fun main!logimpl_v.header_log_size_offset.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::header_size")
(declare-fun main!logimpl_v.header_size.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::spec_bytes_to_metadata")
(declare-fun main!logimpl_v.spec_bytes_to_metadata.? (Poly) main!logimpl_v.PersistentHeaderMetadata.)
(set-info :comment ";; Function-Decl main::logimpl_v::contents_offset")
(declare-fun main!logimpl_v.contents_offset.? () Int)
(set-info :comment ";; Function-Decl main::logimpl_v::pm_to_views")
(declare-fun main!logimpl_v.pm_to_views.? (Poly) tuple%3.)
(set-info :comment ";; Function-Decl main::logimpl_v::spec_get_live_header")
(declare-fun main!logimpl_v.spec_get_live_header.? (Poly) main!logimpl_v.PersistentHeader.)
(set-info :comment ";; Function-Decl main::logimpl_v::UntrustedLogImpl::log_state_is_valid")
(declare-fun main!logimpl_v.impl&%0.log_state_is_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::logimpl_v::spec_addr_logical_to_physical")
(declare-fun main!logimpl_v.spec_addr_logical_to_physical.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl main::logimpl_v::UntrustedLogImpl::recover")
(declare-fun main!logimpl_v.impl&%0.recover.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl main::main_t::recovery_view")
(declare-fun main!main_t.recovery_view.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl main::logimpl_v::permissions_depend_only_on_recovery_view")
(declare-fun main!logimpl_v.permissions_depend_only_on_recovery_view.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl main::logimpl_v::spec_bytes_to_header")
(declare-fun main!logimpl_v.spec_bytes_to_header.? (Poly) main!logimpl_v.PersistentHeader.)
(set-info :comment ";; Function-Decl main::logimpl_v::update_data_view_postcond")
(declare-fun main!logimpl_v.update_data_view_postcond.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::logimpl_v::live_data_view_eq")
(declare-fun main!logimpl_v.live_data_view_eq.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::logimpl_v::UntrustedLogImpl::inv_pm_contents")
(declare-fun main!logimpl_v.impl&%0.inv_pm_contents.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::pmemspec_t::WriteRestrictedPersistentMemory::inv")
(declare-fun main!pmemspec_t.impl&%0.inv.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl main::pmemspec_t::WriteRestrictedPersistentMemory::view")
(declare-fun main!pmemspec_t.impl&%0.view.? (Dcr Type Dcr Type Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl main::logimpl_v::UntrustedLogImpl::inv")
(declare-fun main!logimpl_v.impl&%0.inv.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::main_t::read_correct_modulo_corruption")
(declare-fun main!main_t.read_correct_modulo_corruption.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::pmemspec_t::WriteRestrictedPersistentMemory::constants")
(declare-fun main!pmemspec_t.impl&%0.constants.? (Dcr Type Dcr Type Poly) main!pmemspec_t.PersistentMemoryConstants.)
(set-info :comment ";; Function-Decl main::pmemspec_t::persistence_chunk_size")
(declare-fun main!pmemspec_t.persistence_chunk_size.? () Int)
(set-info :comment ";; Function-Decl main::pmemspec_t::update_byte_to_reflect_partially_flushed_write")
(declare-fun main!pmemspec_t.update_byte_to_reflect_partially_flushed_write.? (Poly Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::pmemspec_t::update_contents_to_reflect_partially_flushed_write")
(declare-fun main!pmemspec_t.update_contents_to_reflect_partially_flushed_write.? (Poly Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::new")
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::append")
(declare-fun ens%alloc!vec.impl&%1.append. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (pre%other! Poly) (other! Poly)) (! (= (ens%alloc!vec.impl&%1.append. T&. T& A&. A& pre%vec! vec! pre%other! other!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (has_type other! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.add.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%other!))) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) other!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%1.append. T&. T& A&. A& pre%vec! vec! pre%other! other!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::as_slice")
(declare-fun ens%alloc!vec.impl&%1.as_slice. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (slice! Poly)) (! (= (ens%alloc!vec.impl&%1.as_slice. T&. T& A&. A& vec! slice!) (and (has_type slice! (SLICE T&. T&)) (= (vstd!view.View.view.? $ (SLICE T&. T&) slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!)))) :pattern ((ens%alloc!vec.impl&%1.as_slice. T&. T& A&. A& vec! slice!)))))
(set-info :comment ";; Function-Specs vstd::bytes::spec_u64_from_le_bytes")
(declare-fun req%vstd!bytes.spec_u64_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u64_from_le_bytes. s!) (=> %%global_location_label%%1 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 8))) :pattern ((req%vstd!bytes.spec_u64_from_le_bytes. s!)))))
(set-info :comment ";; Function-Axioms vstd::bytes::spec_u64_from_le_bytes")
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (vstd!bytes.spec_u64_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u64_from_le_bytes.? s!)))))
(set-info :comment ";; Function-Specs vstd::bytes::lemma_auto_spec_u64_to_from_le_bytes")
(declare-fun ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. no%param) (and (forall ((x$ Poly)) (! (=> (has_type x$ (UINT 64)) (and (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x$))) 8) (= (vstd!bytes.spec_u64_from_le_bytes.? (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x$))) (%I x$)))) :pattern ((vstd!bytes.spec_u64_to_le_bytes.? x$)))) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (= (vstd!seq.Seq.len.? $ (UINT 8) s$) 8) (= (vstd!bytes.spec_u64_to_le_bytes.? (I (vstd!bytes.spec_u64_from_le_bytes.? s$))) (%Poly%vstd!seq.Seq<u8.>. s$)))) :pattern ((vstd!bytes.spec_u64_to_le_bytes.? (I (vstd!bytes.spec_u64_from_le_bytes.? s$)))))))) :pattern ((ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. no%param)))))
(set-info :comment ";; Function-Specs vstd::bytes::u64_from_le_bytes")
(declare-fun req%vstd!bytes.u64_from_le_bytes. (slice%<u8.>.) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((s! slice%<u8.>.)) (! (= (req%vstd!bytes.u64_from_le_bytes. s!) (=> %%global_location_label%%2 (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. s!))) 8))) :pattern ((req%vstd!bytes.u64_from_le_bytes. s!)))))
(declare-fun ens%vstd!bytes.u64_from_le_bytes. (slice%<u8.>. Int) Bool)
(assert (forall ((s! slice%<u8.>.) (x! Int)) (! (= (ens%vstd!bytes.u64_from_le_bytes. s! x!) (and (uInv 64 x!) (= x! (vstd!bytes.spec_u64_from_le_bytes.? (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. s!)))))) :pattern ((ens%vstd!bytes.u64_from_le_bytes. s! x!)))))
(set-info :comment ";; Function-Specs vstd::bytes::u64_to_le_bytes")
(declare-fun ens%vstd!bytes.u64_to_le_bytes. (Int alloc!vec.Vec<u8./allocator_global%.>.) Bool)
(assert (forall ((x! Int) (s! alloc!vec.Vec<u8./allocator_global%.>.)) (! (= (ens%vstd!bytes.u64_to_le_bytes. x! s!) (and (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. s!))) (vstd!bytes.spec_u64_to_le_bytes.? (I x!))) (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. s!))) 8))) :pattern ((ens%vstd!bytes.u64_to_le_bytes. x! s!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::slice::slice_subrange")
(declare-fun req%vstd!slice.slice_subrange. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (i! Int) (j! Int)) (! (= (req%vstd!slice.slice_subrange. T&. T& slice! i! j!) (=> %%global_location_label%%6 (and (and (<= 0 i!) (<= i! j!)) (<= j! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!)))))) :pattern ((req%vstd!slice.slice_subrange. T&. T& slice! i! j!)))))
(declare-fun ens%vstd!slice.slice_subrange. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (i! Int) (j! Int) (out! Poly)) (! (= (ens%vstd!slice.slice_subrange. T&. T& slice! i! j! out!) (and (has_type out! (SLICE T&. T&)) (= (vstd!view.View.view.? $ (SLICE T&. T&) out!) (vstd!seq.Seq.subrange.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!) (I i!) (I j!))))) :pattern ((ens%vstd!slice.slice_subrange. T&. T& slice! i! j! out!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::PersistentMemory::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (main!pmemspec_t.PersistentMemory.view.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((main!pmemspec_t.PersistentMemory.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::PersistentMemory::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (main!pmemspec_t.PersistentMemory.inv.? Self%&. Self%& self!) BOOL)) :pattern ((main!pmemspec_t.PersistentMemory.inv.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::PersistentMemory::constants")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (main!pmemspec_t.PersistentMemory.constants.? Self%&. Self%& self!) TYPE%main!pmemspec_t.PersistentMemoryConstants.)) :pattern ((main!pmemspec_t.PersistentMemory.constants.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::maybe_corrupted")
(assert (fuel_bool_default fuel%main!pmemspec_t.maybe_corrupted.))
(assert (=> (fuel_bool fuel%main!pmemspec_t.maybe_corrupted.) (forall ((bytes! Poly) (true_bytes! Poly) (addrs! Poly)) (! (= (main!pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs!) (and (let ((tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) true_bytes!))) (and (= (vstd!seq.Seq.len.? $ (UINT 8) bytes!) tmp%%$) (= tmp%%$ (vstd!seq.Seq.len.? $ INT addrs!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (UINT 8) bytes!))) (main!pmemspec_t.maybe_corrupted_byte.? (vstd!seq.Seq.index.? $ (UINT 8) bytes! i$) (vstd!seq.Seq.index.? $ (UINT 8) true_bytes! i$) (vstd!seq.Seq.index.? $ INT addrs! i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) bytes! i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) true_bytes! i$)) :pattern ((vstd!seq.Seq.index.? $ INT addrs! i$)))))) :pattern ((main!pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs!))))))
(set-info :comment ";; Function-Specs main::pmemspec_t::PersistentMemory::read")
(declare-fun req%main!pmemspec_t.PersistentMemory.read. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (addr! Poly) (num_bytes! Poly)) (! (= (req%main!pmemspec_t.PersistentMemory.read. Self%&. Self%& self! addr! num_bytes!) (and (=> %%global_location_label%%7 (%B (main!pmemspec_t.PersistentMemory.inv.? Self%&. Self%& self!))) (=> %%global_location_label%%8 (<= (Add (%I addr!) (%I num_bytes!)) (vstd!seq.Seq.len.? $ (UINT 8) (main!pmemspec_t.PersistentMemory.view.? Self%&. Self%& self!)))))) :pattern ((req%main!pmemspec_t.PersistentMemory.read. Self%&. Self%& self! addr! num_bytes!)))))
(declare-fun ens%main!pmemspec_t.PersistentMemory.read. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun %%lambda%%0 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0) i$) (I (Add (%I i$) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0) i$)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (addr! Poly) (num_bytes! Poly) (bytes! Poly)) (! (= (ens%main!pmemspec_t.PersistentMemory.read. Self%&. Self%& self! addr! num_bytes! bytes!) (and (has_type bytes! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (let ((true_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (main!pmemspec_t.PersistentMemory.view.? Self%&. Self%& self!) addr! (I (Add (%I addr!) (%I num_bytes!))))))) (let ((addrs$ (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) num_bytes! (Poly%fun%1. (mk_fun (%%lambda%%0 (%I addr!)))))))) (ite (main!pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%main!pmemspec_t.PersistentMemoryConstants. (main!pmemspec_t.PersistentMemory.constants.? Self%&. Self%& self!))) (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) bytes!)) true_bytes$) (main!pmemspec_t.maybe_corrupted.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) bytes!) (Poly%vstd!seq.Seq<u8.>. true_bytes$) (Poly%vstd!seq.Seq<int.>. addrs$))))))) :pattern ((ens%main!pmemspec_t.PersistentMemory.read. Self%&. Self%& self! addr! num_bytes! bytes!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::update_byte_to_reflect_write")
(assert (fuel_bool_default fuel%main!pmemspec_t.update_byte_to_reflect_write.))
(assert (=> (fuel_bool fuel%main!pmemspec_t.update_byte_to_reflect_write.) (forall ((addr! Poly) (prewrite_byte! Poly) (write_addr! Poly) (write_bytes! Poly)) (! (= (main!pmemspec_t.update_byte_to_reflect_write.? addr! prewrite_byte! write_addr! write_bytes!) (%I (ite (and (<= (%I write_addr!) (%I addr!)) (< (%I addr!) (Add (%I write_addr!) (vstd!seq.Seq.len.? $ (UINT 8) write_bytes!)))) (vstd!seq.Seq.index.? $ (UINT 8) write_bytes! (I (Sub (%I addr!) (%I write_addr!)))) prewrite_byte!))) :pattern ((main!pmemspec_t.update_byte_to_reflect_write.? addr! prewrite_byte! write_addr! write_bytes!))))))
(assert (forall ((addr! Poly) (prewrite_byte! Poly) (write_addr! Poly) (write_bytes! Poly)) (! (=> (and (has_type addr! INT) (has_type prewrite_byte! (UINT 8)) (has_type write_addr! INT) (has_type write_bytes! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (uInv 8 (main!pmemspec_t.update_byte_to_reflect_write.? addr! prewrite_byte! write_addr! write_bytes!))) :pattern ((main!pmemspec_t.update_byte_to_reflect_write.? addr! prewrite_byte! write_addr! write_bytes!)))))
(set-info :comment ";; Function-Specs main::pmemspec_t::update_contents_to_reflect_write")
(declare-fun req%main!pmemspec_t.update_contents_to_reflect_write. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((prewrite_contents! Poly) (write_addr! Poly) (write_bytes! Poly)) (! (= (req%main!pmemspec_t.update_contents_to_reflect_write. prewrite_contents! write_addr! write_bytes!) (and (=> %%global_location_label%%9 (<= 0 (%I write_addr!))) (=> %%global_location_label%%10 (<= (Add (%I write_addr!) (vstd!seq.Seq.len.? $ (UINT 8) write_bytes!)) (vstd!seq.Seq.len.? $ (UINT 8) prewrite_contents!))))) :pattern ((req%main!pmemspec_t.update_contents_to_reflect_write. prewrite_contents! write_addr! write_bytes!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::update_contents_to_reflect_write")
(assert (fuel_bool_default fuel%main!pmemspec_t.update_contents_to_reflect_write.))
(declare-fun %%lambda%%1 (Dcr Type Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Poly) (%%hole%%4 Poly) (addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) addr$) (I (main!pmemspec_t.update_byte_to_reflect_write.? addr$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 addr$) %%hole%%3 %%hole%%4))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) addr$)))))
(assert (=> (fuel_bool fuel%main!pmemspec_t.update_contents_to_reflect_write.) (forall ((prewrite_contents! Poly) (write_addr! Poly) (write_bytes! Poly)) (! (= (main!pmemspec_t.update_contents_to_reflect_write.? prewrite_contents! write_addr! write_bytes!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ (UINT 8) prewrite_contents!)) (Poly%fun%1. (mk_fun (%%lambda%%1 $ (UINT 8) prewrite_contents! write_addr! write_bytes!)))))) :pattern ((main!pmemspec_t.update_contents_to_reflect_write.? prewrite_contents! write_addr! write_bytes!))))))
(set-info :comment ";; Function-Specs main::pmemspec_t::PersistentMemory::write")
(declare-fun req%main!pmemspec_t.PersistentMemory.write. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (addr! Poly) (bytes! Poly)) (! (= (req%main!pmemspec_t.PersistentMemory.write. Self%&. Self%& pre%self! addr! bytes!) (and (=> %%global_location_label%%11 (%B (main!pmemspec_t.PersistentMemory.inv.? Self%&. Self%& pre%self!))) (=> %%global_location_label%%12 (<= (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!))) (vstd!seq.Seq.len.? $ (UINT 8) (main!pmemspec_t.PersistentMemory.view.? Self%&. Self%& pre%self!)))) (=> %%global_location_label%%13 (<= (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!))) 18446744073709551615)))) :pattern ((req%main!pmemspec_t.PersistentMemory.write. Self%&. Self%& pre%self! addr! bytes!)))))
(declare-fun ens%main!pmemspec_t.PersistentMemory.write. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly) (addr! Poly) (bytes! Poly)) (! (= (ens%main!pmemspec_t.PersistentMemory.write. Self%&. Self%& pre%self! self! addr! bytes!) (and (has_type self! Self%&) (%B (main!pmemspec_t.PersistentMemory.inv.? Self%&. Self%& self!)) (= (main!pmemspec_t.PersistentMemory.constants.? Self%&. Self%& self!) (main!pmemspec_t.PersistentMemory.constants.? Self%&. Self%& pre%self!)) (= (%Poly%vstd!seq.Seq<u8.>. (main!pmemspec_t.PersistentMemory.view.? Self%&. Self%& self!)) (main!pmemspec_t.update_contents_to_reflect_write.? (main!pmemspec_t.PersistentMemory.view.? Self%&. Self%& pre%self!) addr! (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!))))) :pattern ((ens%main!pmemspec_t.PersistentMemory.write. Self%&. Self%& pre%self! self! addr! bytes!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::crc_size")
(assert (fuel_bool_default fuel%main!pmemspec_t.crc_size.))
(assert (=> (fuel_bool fuel%main!pmemspec_t.crc_size.) (= main!pmemspec_t.crc_size.? 8)))
(assert (uInv 64 main!pmemspec_t.crc_size.?))
(set-info :comment ";; Function-Specs main::pmemspec_t::bytes_crc")
(declare-fun ens%main!pmemspec_t.bytes_crc. (alloc!vec.Vec<u8./allocator_global%.>. alloc!vec.Vec<u8./allocator_global%.>.) Bool)
(assert (forall ((header_bytes! alloc!vec.Vec<u8./allocator_global%.>.) (out! alloc!vec.Vec<u8./allocator_global%.>.)) (! (= (ens%main!pmemspec_t.bytes_crc. header_bytes! out!) (and (= (main!pmemspec_t.spec_crc_bytes.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. header_bytes!))) (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. out!)))) (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. out!))) main!pmemspec_t.crc_size.?))) :pattern ((ens%main!pmemspec_t.bytes_crc. header_bytes! out!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::all_elements_unique")
(assert (fuel_bool_default fuel%main!pmemspec_t.all_elements_unique.))
(assert (=> (fuel_bool fuel%main!pmemspec_t.all_elements_unique.) (forall ((seq! Poly)) (! (= (main!pmemspec_t.all_elements_unique.? seq!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ INT seq!))) (not (= (vstd!seq.Seq.index.? $ INT seq! i$) (vstd!seq.Seq.index.? $ INT seq! j$))))) :pattern ((vstd!seq.Seq.index.? $ INT seq! i$) (vstd!seq.Seq.index.? $ INT seq! j$))))) :pattern ((main!pmemspec_t.all_elements_unique.? seq!))))))
(set-info :comment ";; Function-Specs main::pmemspec_t::axiom_bytes_uncorrupted")
(declare-fun req%main!pmemspec_t.axiom_bytes_uncorrupted. (vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>. vstd!seq.Seq<int.>. vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>. vstd!seq.Seq<int.>.) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((x_c! vstd!seq.Seq<u8.>.) (x! vstd!seq.Seq<u8.>.) (x_addrs! vstd!seq.Seq<int.>.) (y_c! vstd!seq.Seq<u8.>.) (y! vstd!seq.Seq<u8.>.) (y_addrs! vstd!seq.Seq<int.>.)) (! (= (req%main!pmemspec_t.axiom_bytes_uncorrupted. x_c! x! x_addrs! y_c! y! y_addrs!) (and (=> %%global_location_label%%14 (main!pmemspec_t.maybe_corrupted.? (Poly%vstd!seq.Seq<u8.>. x_c!) (Poly%vstd!seq.Seq<u8.>. x!) (Poly%vstd!seq.Seq<int.>. x_addrs!))) (=> %%global_location_label%%15 (main!pmemspec_t.maybe_corrupted.? (Poly%vstd!seq.Seq<u8.>. y_c!) (Poly%vstd!seq.Seq<u8.>. y!) (Poly%vstd!seq.Seq<int.>. y_addrs!))) (=> %%global_location_label%%16 (= y! (main!pmemspec_t.spec_crc_bytes.? (Poly%vstd!seq.Seq<u8.>. x!)))) (=> %%global_location_label%%17 (= y_c! (main!pmemspec_t.spec_crc_bytes.? (Poly%vstd!seq.Seq<u8.>. x_c!)))) (=> %%global_location_label%%18 (main!pmemspec_t.all_elements_unique.? (Poly%vstd!seq.Seq<int.>. x_addrs!))) (=> %%global_location_label%%19 (main!pmemspec_t.all_elements_unique.? (Poly%vstd!seq.Seq<int.>. y_addrs!))))) :pattern ((req%main!pmemspec_t.axiom_bytes_uncorrupted. x_c! x! x_addrs! y_c! y! y_addrs!)))))
(declare-fun ens%main!pmemspec_t.axiom_bytes_uncorrupted. (vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>. vstd!seq.Seq<int.>. vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>. vstd!seq.Seq<int.>.) Bool)
(assert (forall ((x_c! vstd!seq.Seq<u8.>.) (x! vstd!seq.Seq<u8.>.) (x_addrs! vstd!seq.Seq<int.>.) (y_c! vstd!seq.Seq<u8.>.) (y! vstd!seq.Seq<u8.>.) (y_addrs! vstd!seq.Seq<int.>.)) (! (= (ens%main!pmemspec_t.axiom_bytes_uncorrupted. x_c! x! x_addrs! y_c! y! y_addrs!) (= x! x_c!)) :pattern ((ens%main!pmemspec_t.axiom_bytes_uncorrupted. x_c! x! x_addrs! y_c! y! y_addrs!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::cdb0_val")
(assert (fuel_bool_default fuel%main!pmemspec_t.cdb0_val.))
(assert (=> (fuel_bool fuel%main!pmemspec_t.cdb0_val.) (= main!pmemspec_t.cdb0_val.? 11756720295082287198)))
(assert (uInv 64 main!pmemspec_t.cdb0_val.?))
(set-info :comment ";; Function-Axioms main::pmemspec_t::cdb1_val")
(assert (fuel_bool_default fuel%main!pmemspec_t.cdb1_val.))
(assert (=> (fuel_bool fuel%main!pmemspec_t.cdb1_val.) (= main!pmemspec_t.cdb1_val.? 12331324665725530551)))
(assert (uInv 64 main!pmemspec_t.cdb1_val.?))
(set-info :comment ";; Function-Specs main::pmemspec_t::axiom_corruption_detecting_boolean")
(declare-fun req%main!pmemspec_t.axiom_corruption_detecting_boolean. (Int Int vstd!seq.Seq<int.>.) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((cdb_c! Int) (cdb! Int) (addrs! vstd!seq.Seq<int.>.)) (! (= (req%main!pmemspec_t.axiom_corruption_detecting_boolean. cdb_c! cdb! addrs!) (and (=> %%global_location_label%%20 (main!pmemspec_t.maybe_corrupted.? (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? (I cdb_c!))) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? (I cdb!))) (Poly%vstd!seq.Seq<int.>. addrs!))) (=> %%global_location_label%%21 (main!pmemspec_t.all_elements_unique.? (Poly%vstd!seq.Seq<int.>. addrs!))) (=> %%global_location_label%%22 (or (= cdb! main!pmemspec_t.cdb0_val.?) (= cdb! main!pmemspec_t.cdb1_val.?))) (=> %%global_location_label%%23 (or (= cdb_c! main!pmemspec_t.cdb0_val.?) (= cdb_c! main!pmemspec_t.cdb1_val.?))))) :pattern ((req%main!pmemspec_t.axiom_corruption_detecting_boolean. cdb_c! cdb! addrs!)))))
(declare-fun ens%main!pmemspec_t.axiom_corruption_detecting_boolean. (Int Int vstd!seq.Seq<int.>.) Bool)
(assert (forall ((cdb_c! Int) (cdb! Int) (addrs! vstd!seq.Seq<int.>.)) (! (= (ens%main!pmemspec_t.axiom_corruption_detecting_boolean. cdb_c! cdb! addrs!) (= cdb_c! cdb!)) :pattern ((ens%main!pmemspec_t.axiom_corruption_detecting_boolean. cdb_c! cdb! addrs!)))))
(set-info :comment ";; Function-Axioms main::sccf::CheckPermission::check_permission")
(assert (forall ((Self%&. Dcr) (Self%& Type) (AbstractStorage&. Dcr) (AbstractStorage& Type) (self! Poly) (state! Poly)) (! (=> (and (has_type self! Self%&) (has_type state! AbstractStorage&)) (has_type (main!sccf.CheckPermission.check_permission.? Self%&. Self%& AbstractStorage&. AbstractStorage& self! state!) BOOL)) :pattern ((main!sccf.CheckPermission.check_permission.? Self%&. Self%& AbstractStorage&. AbstractStorage& self! state!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms main::infinitelog_t::AbstractInfiniteLogState::initialize")
(assert (fuel_bool_default fuel%main!infinitelog_t.impl&%0.initialize.))
(assert (=> (fuel_bool fuel%main!infinitelog_t.impl&%0.initialize.) (forall ((capacity! Poly)) (! (= (main!infinitelog_t.impl&%0.initialize.? capacity!) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState (%I (I 0)) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%I capacity!))) :pattern ((main!infinitelog_t.impl&%0.initialize.? capacity!))))))
(set-info :comment ";; Function-Axioms main::infinitelog_t::AbstractInfiniteLogState::append")
(assert (fuel_bool_default fuel%main!infinitelog_t.impl&%0.append.))
(assert (=> (fuel_bool fuel%main!infinitelog_t.impl&%0.append.) (forall ((self! Poly) (bytes! Poly)) (! (= (main!infinitelog_t.impl&%0.append.? self! bytes!) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState (%I (I (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!)))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!))) bytes!)) (%I (I (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/capacity (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!)))))) :pattern ((main!infinitelog_t.impl&%0.append.? self! bytes!))))))
(set-info :comment ";; Function-Axioms main::infinitelog_t::AbstractInfiniteLogState::advance_head")
(assert (fuel_bool_default fuel%main!infinitelog_t.impl&%0.advance_head.))
(assert (=> (fuel_bool fuel%main!infinitelog_t.impl&%0.advance_head.) (forall ((self! Poly) (new_head! Poly)) (! (= (main!infinitelog_t.impl&%0.advance_head.? self! new_head!) (ite (and (<= (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!)) (%I new_head!)) (<= (%I new_head!) (Add (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!))))))) (let ((new_log$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!))) (I (Sub (%I new_head!) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/head (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!)))) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!))))))))) (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState (%I new_head!) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. new_log$)) (%I (I (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/capacity (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!)))))) (%Poly%main!infinitelog_t.AbstractInfiniteLogState. self!))) :pattern ((main!infinitelog_t.impl&%0.advance_head.? self! new_head!))))))
(set-info :comment ";; Function-Def main::logimpl_v::incorruptible_bool_pos")
(set-info :comment ";; src/logimpl_v.rs:30:5: 30:47 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::incorruptible_bool_pos")
(assert (fuel_bool_default fuel%main!logimpl_v.incorruptible_bool_pos.))
(assert (=> (fuel_bool fuel%main!logimpl_v.incorruptible_bool_pos.) (= main!logimpl_v.incorruptible_bool_pos.? 0)))
(assert (uInv 64 main!logimpl_v.incorruptible_bool_pos.?))
(set-info :comment ";; Function-Def main::logimpl_v::header1_pos")
(set-info :comment ";; src/logimpl_v.rs:31:5: 31:36 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::header1_pos")
(assert (fuel_bool_default fuel%main!logimpl_v.header1_pos.))
(assert (=> (fuel_bool fuel%main!logimpl_v.header1_pos.) (= main!logimpl_v.header1_pos.? 8)))
(assert (uInv 64 main!logimpl_v.header1_pos.?))
(set-info :comment ";; Function-Def main::logimpl_v::header2_pos")
(set-info :comment ";; src/logimpl_v.rs:32:5: 32:37 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::header2_pos")
(assert (fuel_bool_default fuel%main!logimpl_v.header2_pos.))
(assert (=> (fuel_bool fuel%main!logimpl_v.header2_pos.) (= main!logimpl_v.header2_pos.? 40)))
(assert (uInv 64 main!logimpl_v.header2_pos.?))
(set-info :comment ";; Function-Def main::logimpl_v::header_crc_offset")
(set-info :comment ";; src/logimpl_v.rs:35:5: 35:42 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::header_crc_offset")
(assert (fuel_bool_default fuel%main!logimpl_v.header_crc_offset.))
(assert (=> (fuel_bool fuel%main!logimpl_v.header_crc_offset.) (= main!logimpl_v.header_crc_offset.? 0)))
(assert (uInv 64 main!logimpl_v.header_crc_offset.?))
(set-info :comment ";; Function-Def main::logimpl_v::header_head_offset")
(set-info :comment ";; src/logimpl_v.rs:36:5: 36:43 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::header_head_offset")
(assert (fuel_bool_default fuel%main!logimpl_v.header_head_offset.))
(assert (=> (fuel_bool fuel%main!logimpl_v.header_head_offset.) (= main!logimpl_v.header_head_offset.? 8)))
(assert (uInv 64 main!logimpl_v.header_head_offset.?))
(set-info :comment ";; Function-Def main::logimpl_v::header_tail_offset")
(set-info :comment ";; src/logimpl_v.rs:37:5: 37:44 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::header_tail_offset")
(assert (fuel_bool_default fuel%main!logimpl_v.header_tail_offset.))
(assert (=> (fuel_bool fuel%main!logimpl_v.header_tail_offset.) (= main!logimpl_v.header_tail_offset.? 16)))
(assert (uInv 64 main!logimpl_v.header_tail_offset.?))
(set-info :comment ";; Function-Def main::logimpl_v::header_log_size_offset")
(set-info :comment ";; src/logimpl_v.rs:38:5: 38:48 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::header_log_size_offset")
(assert (fuel_bool_default fuel%main!logimpl_v.header_log_size_offset.))
(assert (=> (fuel_bool fuel%main!logimpl_v.header_log_size_offset.) (= main!logimpl_v.header_log_size_offset.? 24)))
(assert (uInv 64 main!logimpl_v.header_log_size_offset.?))
(set-info :comment ";; Function-Def main::logimpl_v::header_size")
(set-info :comment ";; src/logimpl_v.rs:40:5: 40:37 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::header_size")
(assert (fuel_bool_default fuel%main!logimpl_v.header_size.))
(assert (=> (fuel_bool fuel%main!logimpl_v.header_size.) (= main!logimpl_v.header_size.? 32)))
(assert (uInv 64 main!logimpl_v.header_size.?))
(set-info :comment ";; Function-Specs main::logimpl_v::spec_bytes_to_metadata")
(declare-fun req%main!logimpl_v.spec_bytes_to_metadata. (Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((header_seq! Poly)) (! (= (req%main!logimpl_v.spec_bytes_to_metadata. header_seq!) (=> %%global_location_label%%24 (= (vstd!seq.Seq.len.? $ (UINT 8) header_seq!) (nClip (Mul 3 8))))) :pattern ((req%main!logimpl_v.spec_bytes_to_metadata. header_seq!)))))
(set-info :comment ";; Function-Recommends main::logimpl_v::spec_bytes_to_metadata")
(set-info :comment ";; src/logimpl_v.rs:314:5: 314:102 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::spec_bytes_to_metadata")
(assert (fuel_bool_default fuel%main!logimpl_v.spec_bytes_to_metadata.))
(assert (=> (fuel_bool fuel%main!logimpl_v.spec_bytes_to_metadata.) (forall ((header_seq! Poly)) (! (= (main!logimpl_v.spec_bytes_to_metadata.? header_seq!) (let ((head$ (vstd!bytes.spec_u64_from_le_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) header_seq! (I (Sub main!logimpl_v.header_head_offset.? 8)) (I (Add (Sub main!logimpl_v.header_head_offset.? 8) 8)))))) (let ((tail$ (vstd!bytes.spec_u64_from_le_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) header_seq! (I (Sub main!logimpl_v.header_tail_offset.? 8)) (I (Add (Sub main!logimpl_v.header_tail_offset.? 8) 8)))))) (let ((log_size$ (vstd!bytes.spec_u64_from_le_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) header_seq! (I (Sub main!logimpl_v.header_log_size_offset.? 8)) (I (Add (Sub main!logimpl_v.header_log_size_offset.? 8) 8)))))) (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata (%I (I head$)) (%I (I tail$)) (%I (I log_size$))))))) :pattern ((main!logimpl_v.spec_bytes_to_metadata.? header_seq!))))))
(assert (forall ((header_seq! Poly)) (! (=> (has_type header_seq! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.spec_bytes_to_metadata.? header_seq!)) TYPE%main!logimpl_v.PersistentHeaderMetadata.)) :pattern ((main!logimpl_v.spec_bytes_to_metadata.? header_seq!)))))
(set-info :comment ";; Function-Def main::logimpl_v::contents_offset")
(set-info :comment ";; src/logimpl_v.rs:1086:5: 1086:79 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::contents_offset")
(assert (fuel_bool_default fuel%main!logimpl_v.contents_offset.))
(assert (=> (fuel_bool fuel%main!logimpl_v.contents_offset.) (= main!logimpl_v.contents_offset.? (uClip 64 (Add (uClip 64 (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_log_size_offset.?)) 8)))))
(assert (uInv 64 main!logimpl_v.contents_offset.?))
(set-info :comment ";; Function-Axioms main::logimpl_v::pm_to_views")
(assert (fuel_bool_default fuel%main!logimpl_v.pm_to_views.))
(assert (=> (fuel_bool fuel%main!logimpl_v.pm_to_views.) (forall ((pm! Poly)) (! (= (main!logimpl_v.pm_to_views.? pm!) (let ((incorruptible_bool$ (vstd!bytes.spec_u64_from_le_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I main!logimpl_v.incorruptible_bool_pos.?) (I (Add main!logimpl_v.incorruptible_bool_pos.? 8)))))) (let ((crc1$ (vstd!bytes.spec_u64_from_le_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_crc_offset.?)) (I (Add (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_crc_offset.?) 8)))))) (let ((crc2$ (vstd!bytes.spec_u64_from_le_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_crc_offset.?)) (I (Add (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_crc_offset.?) 8)))))) (let ((header1_metadata$ (main!logimpl_v.spec_bytes_to_metadata.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_head_offset.?)) (I (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_size.?)))))) (let ((header2_metadata$ (main!logimpl_v.spec_bytes_to_metadata.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_head_offset.?)) (I (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_size.?)))))) (let ((header_view$ (main!logimpl_v.HeaderView./HeaderView (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.PersistentHeader./PersistentHeader (%I (I crc1$)) (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. header1_metadata$))))) (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.PersistentHeader./PersistentHeader (%I (I crc2$)) (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. header2_metadata$)))))))) (let ((data_view$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I main!logimpl_v.contents_offset.?) (I (vstd!seq.Seq.len.? $ (UINT 8) pm!)))))) (tuple%3./tuple%3 (I incorruptible_bool$) (Poly%main!logimpl_v.HeaderView. header_view$) (Poly%vstd!seq.Seq<u8.>. data_view$)))))))))) :pattern ((main!logimpl_v.pm_to_views.? pm!))))))
(assert (forall ((pm! Poly)) (! (=> (has_type pm! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%tuple%3. (main!logimpl_v.pm_to_views.? pm!)) (TYPE%tuple%3. $ (UINT 64) $ TYPE%main!logimpl_v.HeaderView. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((main!logimpl_v.pm_to_views.? pm!)))))
(set-info :comment ";; Function-Axioms main::logimpl_v::spec_get_live_header")
(assert (fuel_bool_default fuel%main!logimpl_v.spec_get_live_header.))
(assert (=> (fuel_bool fuel%main!logimpl_v.spec_get_live_header.) (forall ((pm! Poly)) (! (= (main!logimpl_v.spec_get_live_header.? pm!) (let ((tmp%%$ (main!logimpl_v.pm_to_views.? pm!))) (let ((ib$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((headers$ (%Poly%main!logimpl_v.HeaderView. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (ite (= ib$ main!pmemspec_t.cdb0_val.?) (main!logimpl_v.HeaderView./HeaderView/header1 (%Poly%main!logimpl_v.HeaderView. (Poly%main!logimpl_v.HeaderView. headers$))) (main!logimpl_v.HeaderView./HeaderView/header2 (%Poly%main!logimpl_v.HeaderView. (Poly%main!logimpl_v.HeaderView. headers$)))))))) :pattern ((main!logimpl_v.spec_get_live_header.? pm!))))))
(assert (forall ((pm! Poly)) (! (=> (has_type pm! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.spec_get_live_header.? pm!)) TYPE%main!logimpl_v.PersistentHeader.)) :pattern ((main!logimpl_v.spec_get_live_header.? pm!)))))
(set-info :comment ";; Function-Axioms main::logimpl_v::UntrustedLogImpl::log_state_is_valid")
(assert (fuel_bool_default fuel%main!logimpl_v.impl&%0.log_state_is_valid.))
(assert (=> (fuel_bool fuel%main!logimpl_v.impl&%0.log_state_is_valid.) (forall ((pm! Poly)) (! (= (main!logimpl_v.impl&%0.log_state_is_valid.? pm!) (let ((tmp%%$ (main!logimpl_v.pm_to_views.? pm!))) (let ((ib$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((headers$ (%Poly%main!logimpl_v.HeaderView. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((data$ (%Poly%vstd!seq.Seq<u8.>. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((live_header$ (ite (= ib$ main!pmemspec_t.cdb0_val.?) (main!logimpl_v.HeaderView./HeaderView/header1 (%Poly%main!logimpl_v.HeaderView. (Poly%main!logimpl_v.HeaderView. headers$))) (main!logimpl_v.HeaderView./HeaderView/header2 (%Poly%main!logimpl_v.HeaderView. (Poly%main!logimpl_v.HeaderView. headers$)))))) (let ((head$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))) (let ((tail$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))) (let ((log_size$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))) (and (and (and (and (and (and (and (or (= ib$ main!pmemspec_t.cdb0_val.?) (= ib$ main!pmemspec_t.cdb1_val.?)) (<= (Add log_size$ main!logimpl_v.contents_offset.?) 18446744073709551615)) (> log_size$ 0)) (= (Add log_size$ main!logimpl_v.contents_offset.?) (vstd!seq.Seq.len.? $ (UINT 8) pm!))) (< (Sub tail$ head$) log_size$)) (=> (= ib$ main!pmemspec_t.cdb0_val.?) (and (= (main!logimpl_v.PersistentHeader./PersistentHeader/crc (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$))) (vstd!bytes.spec_u64_from_le_bytes.? (Poly%vstd!seq.Seq<u8.>. (main!pmemspec_t.spec_crc_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_head_offset.?)) (I (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_size.?))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_crc_offset.?)) (I (Add (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_crc_offset.?) 8))) (Poly%vstd!seq.Seq<u8.>. (main!pmemspec_t.spec_crc_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_head_offset.?)) (I (Add main!logimpl_v.header1_pos.? main!logimpl_v.header_size.?))))))))) (=> (= ib$ main!pmemspec_t.cdb1_val.?) (and (= (main!logimpl_v.PersistentHeader./PersistentHeader/crc (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$))) (vstd!bytes.spec_u64_from_le_bytes.? (Poly%vstd!seq.Seq<u8.>. (main!pmemspec_t.spec_crc_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_head_offset.?)) (I (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_size.?))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_crc_offset.?)) (I (Add (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_crc_offset.?) 8))) (Poly%vstd!seq.Seq<u8.>. (main!pmemspec_t.spec_crc_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_head_offset.?)) (I (Add main!logimpl_v.header2_pos.? main!logimpl_v.header_size.?))))))))) (<= head$ tail$))))))))))) :pattern ((main!logimpl_v.impl&%0.log_state_is_valid.? pm!))))))
(set-info :comment ";; Function-Axioms main::logimpl_v::spec_addr_logical_to_physical")
(assert (fuel_bool_default fuel%main!logimpl_v.spec_addr_logical_to_physical.))
(assert (=> (fuel_bool fuel%main!logimpl_v.spec_addr_logical_to_physical.) (forall ((addr! Poly) (log_size! Poly)) (! (= (main!logimpl_v.spec_addr_logical_to_physical.? addr! log_size!) (Add (EucMod (%I addr!) (%I log_size!)) main!logimpl_v.contents_offset.?)) :pattern ((main!logimpl_v.spec_addr_logical_to_physical.? addr! log_size!))))))
(set-info :comment ";; Function-Axioms main::logimpl_v::UntrustedLogImpl::recover")
(assert (fuel_bool_default fuel%main!logimpl_v.impl&%0.recover.))
(assert (=> (fuel_bool fuel%main!logimpl_v.impl&%0.recover.) (forall ((pm! Poly)) (! (= (main!logimpl_v.impl&%0.recover.? pm!) (let ((tmp%%$ (main!logimpl_v.pm_to_views.? pm!))) (let ((ib$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((headers$ (%Poly%main!logimpl_v.HeaderView. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((data$ (%Poly%vstd!seq.Seq<u8.>. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (ite (not (main!logimpl_v.impl&%0.log_state_is_valid.? pm!)) core!option.Option./None (let ((live_header$ (ite (= ib$ main!pmemspec_t.cdb0_val.?) (main!logimpl_v.HeaderView./HeaderView/header1 (%Poly%main!logimpl_v.HeaderView. (Poly%main!logimpl_v.HeaderView. headers$))) (main!logimpl_v.HeaderView./HeaderView/header2 (%Poly%main!logimpl_v.HeaderView. (Poly%main!logimpl_v.HeaderView. headers$)))))) (let ((head$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))) (let ((tail$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))) (let ((log_size$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))) (let ((contents_end$ (Add log_size$ main!logimpl_v.contents_offset.?))) (let ((physical_head$ (main!logimpl_v.spec_addr_logical_to_physical.? (I head$) (I log_size$)))) (let ((physical_tail$ (main!logimpl_v.spec_addr_logical_to_physical.? (I tail$) (I log_size$)))) (let ((abstract_log$ (%Poly%vstd!seq.Seq<u8.>. (ite (< physical_head$ physical_tail$) (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I physical_head$) (I physical_tail$)) (ite (< physical_tail$ physical_head$) (let ((range1$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I physical_head$) (I contents_end$))))) (let ((range2$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) pm! (I main!logimpl_v.contents_offset.?) (I physical_tail$))))) (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. range1$) (Poly%vstd!seq.Seq<u8.>. range2$)))) (vstd!seq.Seq.empty.? $ (UINT 8))))))) (core!option.Option./Some (Poly%main!infinitelog_t.AbstractInfiniteLogState. (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState (%I (I head$)) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. abstract_log$)) (%I (I (Sub log_size$ 1)))))))))))))))))))) :pattern ((main!logimpl_v.impl&%0.recover.? pm!))))))
(assert (forall ((pm! Poly)) (! (=> (has_type pm! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%core!option.Option. (main!logimpl_v.impl&%0.recover.? pm!)) (TYPE%core!option.Option. $ TYPE%main!infinitelog_t.AbstractInfiniteLogState.))) :pattern ((main!logimpl_v.impl&%0.recover.? pm!)))))
(set-info :comment ";; Function-Axioms main::main_t::recovery_view")
(assert (fuel_bool_default fuel%main!main_t.recovery_view.))
(declare-fun %%lambda%%2 () %%Function%%)
(assert (forall ((c$ Poly)) (! (= (%%apply%%0 %%lambda%%2 c$) (Poly%core!option.Option. (main!logimpl_v.impl&%0.recover.? c$))) :pattern ((%%apply%%0 %%lambda%%2 c$)))))
(assert (=> (fuel_bool fuel%main!main_t.recovery_view.) (forall ((no%param Poly)) (! (= (main!main_t.recovery_view.? no%param) (mk_fun %%lambda%%2)) :pattern ((main!main_t.recovery_view.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (main!main_t.recovery_view.? no%param)) (TYPE%fun%1. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%core!option.Option. $ TYPE%main!infinitelog_t.AbstractInfiniteLogState.)))) :pattern ((main!main_t.recovery_view.? no%param)))))
(set-info :comment ";; Function-Axioms main::logimpl_v::permissions_depend_only_on_recovery_view")
(assert (fuel_bool_default fuel%main!logimpl_v.permissions_depend_only_on_recovery_view.))
(assert (=> (fuel_bool fuel%main!logimpl_v.permissions_depend_only_on_recovery_view.) (forall ((Perm&. Dcr) (Perm& Type) (perm! Poly)) (! (= (main!logimpl_v.permissions_depend_only_on_recovery_view.? Perm&. Perm& perm!) (forall ((s1$ Poly) (s2$ Poly)) (! (=> (and (has_type s1$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type s2$ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (=> (= (%%apply%%0 (main!main_t.recovery_view.? (I 0)) s1$) (%%apply%%0 (main!main_t.recovery_view.? (I 0)) s2$)) (= (main!sccf.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! s1$) (main!sccf.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! s2$)))) :pattern ((main!sccf.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! s1$) (main!sccf.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! s2$))))) :pattern ((main!logimpl_v.permissions_depend_only_on_recovery_view.? Perm&. Perm& perm!))))))
(set-info :comment ";; Function-Specs main::logimpl_v::spec_bytes_to_header")
(declare-fun req%main!logimpl_v.spec_bytes_to_header. (Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((header_seq! Poly)) (! (= (req%main!logimpl_v.spec_bytes_to_header. header_seq!) (=> %%global_location_label%%25 (= (vstd!seq.Seq.len.? $ (UINT 8) header_seq!) main!logimpl_v.header_size.?))) :pattern ((req%main!logimpl_v.spec_bytes_to_header. header_seq!)))))
(set-info :comment ";; Function-Recommends main::logimpl_v::spec_bytes_to_header")
(set-info :comment ";; src/logimpl_v.rs:364:5: 364:92 (#0)")
(set-info :comment ";; Function-Axioms main::logimpl_v::spec_bytes_to_header")
(assert (fuel_bool_default fuel%main!logimpl_v.spec_bytes_to_header.))
(assert (=> (fuel_bool fuel%main!logimpl_v.spec_bytes_to_header.) (forall ((header_seq! Poly)) (! (= (main!logimpl_v.spec_bytes_to_header.? header_seq!) (let ((crc_val$ (vstd!bytes.spec_u64_from_le_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) header_seq! (I main!logimpl_v.header_crc_offset.?) (I (Add main!logimpl_v.header_crc_offset.? 8)))))) (let ((metadata$ (main!logimpl_v.spec_bytes_to_metadata.? (vstd!seq.Seq.subrange.? $ (UINT 8) header_seq! (I main!logimpl_v.header_head_offset.?) (I main!logimpl_v.header_size.?))))) (main!logimpl_v.PersistentHeader./PersistentHeader (%I (I crc_val$)) (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. metadata$)))))) :pattern ((main!logimpl_v.spec_bytes_to_header.? header_seq!))))))
(assert (forall ((header_seq! Poly)) (! (=> (has_type header_seq! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%main!logimpl_v.PersistentHeader. (main!logimpl_v.spec_bytes_to_header.? header_seq!)) TYPE%main!logimpl_v.PersistentHeader.)) :pattern ((main!logimpl_v.spec_bytes_to_header.? header_seq!)))))
(set-info :comment ";; Function-Axioms main::logimpl_v::update_data_view_postcond")
(assert (fuel_bool_default fuel%main!logimpl_v.update_data_view_postcond.))
(assert (=> (fuel_bool fuel%main!logimpl_v.update_data_view_postcond.) (forall ((pm! Poly) (new_bytes! Poly) (write_addr! Poly)) (! (= (main!logimpl_v.update_data_view_postcond.? pm! new_bytes! write_addr!) (let ((new_pm$ (main!pmemspec_t.update_contents_to_reflect_write.? pm! write_addr! new_bytes!))) (let ((tmp%%$ (main!logimpl_v.pm_to_views.? pm!))) (let ((old_ib$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((old_headers$ (%Poly%main!logimpl_v.HeaderView. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((old_data$ (%Poly%vstd!seq.Seq<u8.>. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((tmp%%$1 (main!logimpl_v.pm_to_views.? (Poly%vstd!seq.Seq<u8.>. new_pm$)))) (let ((new_ib$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((new_headers$ (%Poly%main!logimpl_v.HeaderView. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((new_data$ (%Poly%vstd!seq.Seq<u8.>. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((live_header$ (main!logimpl_v.spec_get_live_header.? pm!))) (let ((physical_head$ (main!logimpl_v.spec_addr_logical_to_physical.? (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$))))))) (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))))) (let ((physical_tail$ (main!logimpl_v.spec_addr_logical_to_physical.? (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$))))))) (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))))) (and (and (and (and (and (and (and (and (= old_ib$ new_ib$) (= old_headers$ new_headers$)) (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$)))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I (Sub (%I write_addr!) main!logimpl_v.contents_offset.?)) (I (Add (Sub (%I write_addr!) main!logimpl_v.contents_offset.?) (vstd!seq.Seq.len.? $ (UINT 8) new_bytes!)))) new_bytes!)) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I 0) (I (Sub (%I write_addr!) main!logimpl_v.contents_offset.?))) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$) (I 0) (I (Sub (%I write_addr!) main!logimpl_v.contents_offset.?))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I (Add (Sub (%I write_addr!) main!logimpl_v.contents_offset.?) (vstd!seq.Seq.len.? $ (UINT 8) new_bytes!))) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$)))) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$) (I (Add (Sub (%I write_addr!) main!logimpl_v.contents_offset.?) (vstd!seq.Seq.len.? $ (UINT 8) new_bytes!))) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$)))))) (is-core!option.Option./Some_ (main!logimpl_v.impl&%0.recover.? (Poly%vstd!seq.Seq<u8.>. new_pm$)))) (=> (< physical_head$ physical_tail$) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I (Sub physical_head$ main!logimpl_v.contents_offset.?)) (I (Sub physical_tail$ main!logimpl_v.contents_offset.?))) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$) (I (Sub physical_head$ main!logimpl_v.contents_offset.?)) (I (Sub physical_tail$ main!logimpl_v.contents_offset.?)))))) (=> (< physical_tail$ physical_head$) (and (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$) (I (Sub physical_head$ main!logimpl_v.contents_offset.?)) (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$)))))))) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I (Sub physical_head$ main!logimpl_v.contents_offset.?)) (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. live_header$))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$) (I 0) (I (Sub physical_tail$ main!logimpl_v.contents_offset.?))) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I 0) (I (Sub physical_tail$ main!logimpl_v.contents_offset.?)))))))))))))))))))) :pattern ((main!logimpl_v.update_data_view_postcond.? pm! new_bytes! write_addr!))))))
(set-info :comment ";; Function-Axioms main::logimpl_v::live_data_view_eq")
(assert (fuel_bool_default fuel%main!logimpl_v.live_data_view_eq.))
(assert (=> (fuel_bool fuel%main!logimpl_v.live_data_view_eq.) (forall ((old_pm! Poly) (new_pm! Poly)) (! (= (main!logimpl_v.live_data_view_eq.? old_pm! new_pm!) (let ((tmp%%$ (main!logimpl_v.pm_to_views.? old_pm!))) (let ((old_ib$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((old_headers$ (%Poly%main!logimpl_v.HeaderView. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((old_data$ (%Poly%vstd!seq.Seq<u8.>. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((tmp%%$1 (main!logimpl_v.pm_to_views.? new_pm!))) (let ((new_ib$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((new_headers$ (%Poly%main!logimpl_v.HeaderView. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((new_data$ (%Poly%vstd!seq.Seq<u8.>. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((old_live_header$ (main!logimpl_v.spec_get_live_header.? old_pm!))) (let ((new_live_header$ (main!logimpl_v.spec_get_live_header.? new_pm!))) (let ((physical_head$ (main!logimpl_v.spec_addr_logical_to_physical.? (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. old_live_header$))))))) (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. old_live_header$)))))))))) (let ((physical_tail$ (main!logimpl_v.spec_addr_logical_to_physical.? (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. old_live_header$))))))) (I (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. old_live_header$)))))))))) (let ((log_size$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. old_live_header$)))))))) (let ((physical_data_head$ (Sub physical_head$ main!logimpl_v.contents_offset.?))) (let ((physical_data_tail$ (Sub physical_tail$ main!logimpl_v.contents_offset.?))) (and (and (and (= new_live_header$ old_live_header$) (=> (< physical_head$ physical_tail$) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$) (I physical_data_head$) (I physical_data_tail$)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I physical_data_head$) (I physical_data_tail$))))) (=> (< physical_tail$ physical_head$) (and (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$) (I physical_data_head$) (I log_size$)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I physical_data_head$) (I log_size$))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. old_data$) (I 0) (I physical_data_tail$)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. new_data$) (I 0) (I physical_data_tail$)))))) (=> (= physical_tail$ physical_head$) (= physical_data_head$ physical_data_tail$))))))))))))))))))) :pattern ((main!logimpl_v.live_data_view_eq.? old_pm! new_pm!))))))
(set-info :comment ";; Function-Axioms main::logimpl_v::UntrustedLogImpl::inv_pm_contents")
(assert (fuel_bool_default fuel%main!logimpl_v.impl&%0.inv_pm_contents.))
(assert (=> (fuel_bool fuel%main!logimpl_v.impl&%0.inv_pm_contents.) (forall ((self! Poly) (contents! Poly)) (! (= (main!logimpl_v.impl&%0.inv_pm_contents.? self! contents!) (let ((tmp%%$ (main!logimpl_v.pm_to_views.? contents!))) (let ((ib$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((headers$ (%Poly%main!logimpl_v.HeaderView. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((data$ (%Poly%vstd!seq.Seq<u8.>. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((header_pos$ (ite (= ib$ main!pmemspec_t.cdb0_val.?) main!logimpl_v.header1_pos.? main!logimpl_v.header2_pos.?))) (let ((header$ (main!logimpl_v.spec_get_live_header.? contents!))) (let ((head$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/head (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. header$)))))))) (let ((tail$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/tail (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. header$)))))))) (let ((log_size$ (main!logimpl_v.PersistentHeaderMetadata./PersistentHeaderMetadata/log_size (%Poly%main!logimpl_v.PersistentHeaderMetadata. (Poly%main!logimpl_v.PersistentHeaderMetadata. (main!logimpl_v.PersistentHeader./PersistentHeader/metadata (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. header$)))))))) (and (and (and (and (and (and (and (and (and (and (or (= ib$ main!pmemspec_t.cdb0_val.?) (= ib$ main!pmemspec_t.cdb1_val.?)) (= (main!pmemspec_t.spec_crc_bytes.? (vstd!seq.Seq.subrange.? $ (UINT 8) contents! (I (Add header_pos$ main!logimpl_v.header_head_offset.?)) (I (Add header_pos$ main!logimpl_v.header_size.?)))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) contents! (I (Add header_pos$ main!logimpl_v.header_crc_offset.?)) (I (Add (Add header_pos$ main!logimpl_v.header_crc_offset.?) 8)))))) (<= (Add log_size$ main!logimpl_v.contents_offset.?) 18446744073709551615)) (< (Sub tail$ head$) log_size$)) (= (Add log_size$ main!logimpl_v.contents_offset.?) (vstd!seq.Seq.len.? $ (UINT 8) contents!))) (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/header_crc (%Poly%main!logimpl_v.UntrustedLogImpl. self!)) (main!logimpl_v.PersistentHeader./PersistentHeader/crc (%Poly%main!logimpl_v.PersistentHeader. (Poly%main!logimpl_v.PersistentHeader. header$))))) (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/head (%Poly%main!logimpl_v.UntrustedLogImpl. self!)) head$)) (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/tail (%Poly%main!logimpl_v.UntrustedLogImpl. self!)) tail$)) (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/log_size (%Poly%main!logimpl_v.UntrustedLogImpl. self!)) log_size$)) (= (main!logimpl_v.UntrustedLogImpl./UntrustedLogImpl/incorruptible_bool (%Poly%main!logimpl_v.UntrustedLogImpl. self!)) ib$)) (let ((tmp%%$1 (main!logimpl_v.impl&%0.recover.? contents!))) (and (is-core!option.Option./Some_ tmp%%$1) (let ((inf_log$ (%Poly%main!infinitelog_t.AbstractInfiniteLogState. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)))))) (= tail$ (Add head$ (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (main!infinitelog_t.AbstractInfiniteLogState./AbstractInfiniteLogState/log (%Poly%main!infinitelog_t.AbstractInfiniteLogState. (Poly%main!infinitelog_t.AbstractInfiniteLogState. inf_log$))))))))))))))))))))) :pattern ((main!logimpl_v.impl&%0.inv_pm_contents.? self! contents!))))))
(set-info :comment ";; Function-Axioms main::logimpl_v::UntrustedLogImpl::inv")
(assert (fuel_bool_default fuel%main!logimpl_v.impl&%0.inv.))
(assert (=> (fuel_bool fuel%main!logimpl_v.impl&%0.inv.) (forall ((Perm&. Dcr) (Perm& Type) (PM&. Dcr) (PM& Type) (self! Poly) (wrpm! Poly)) (! (= (main!logimpl_v.impl&%0.inv.? Perm&. Perm& PM&. PM& self! wrpm!) (and (main!pmemspec_t.impl&%0.inv.? Perm&. Perm& PM&. PM& wrpm!) (main!logimpl_v.impl&%0.inv_pm_contents.? self! (Poly%vstd!seq.Seq<u8.>. (main!pmemspec_t.impl&%0.view.? Perm&. Perm& PM&. PM& wrpm!))))) :pattern ((main!logimpl_v.impl&%0.inv.? Perm&. Perm& PM&. PM& self! wrpm!))))))
(set-info :comment ";; Function-Axioms main::main_t::read_correct_modulo_corruption")
(assert (fuel_bool_default fuel%main!main_t.read_correct_modulo_corruption.))
(assert (=> (fuel_bool fuel%main!main_t.read_correct_modulo_corruption.) (forall ((bytes! Poly) (true_bytes! Poly) (impervious_to_corruption! Poly)) (! (= (main!main_t.read_correct_modulo_corruption.? bytes! true_bytes! impervious_to_corruption!) (ite (%B impervious_to_corruption!) (= bytes! true_bytes!) (exists ((addrs$ Poly)) (! (and (has_type addrs$ (TYPE%vstd!seq.Seq. $ INT)) (and (main!pmemspec_t.all_elements_unique.? addrs$) (main!pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs$))) :pattern ((main!pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs$)))))) :pattern ((main!main_t.read_correct_modulo_corruption.? bytes! true_bytes! impervious_to_corruption!))))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::persistence_chunk_size")
(assert (fuel_bool_default fuel%main!pmemspec_t.persistence_chunk_size.))
(assert (=> (fuel_bool fuel%main!pmemspec_t.persistence_chunk_size.) (= main!pmemspec_t.persistence_chunk_size.? 8)))
(set-info :comment ";; Function-Axioms main::pmemspec_t::update_byte_to_reflect_partially_flushed_write")
(assert (fuel_bool_default fuel%main!pmemspec_t.update_byte_to_reflect_partially_flushed_write.))
(assert (=> (fuel_bool fuel%main!pmemspec_t.update_byte_to_reflect_partially_flushed_write.) (forall ((addr! Poly) (prewrite_byte! Poly) (write_addr! Poly) (write_bytes! Poly) (chunks_flushed! Poly)) (! (= (main!pmemspec_t.update_byte_to_reflect_partially_flushed_write.? addr! prewrite_byte! write_addr! write_bytes! chunks_flushed!) (ite (vstd!set.impl&%0.contains.? $ INT chunks_flushed! (I (EucDiv (%I addr!) main!pmemspec_t.persistence_chunk_size.?))) (main!pmemspec_t.update_byte_to_reflect_write.? addr! prewrite_byte! write_addr! write_bytes!) (%I prewrite_byte!))) :pattern ((main!pmemspec_t.update_byte_to_reflect_partially_flushed_write.? addr! prewrite_byte! write_addr! write_bytes! chunks_flushed!))))))
(assert (forall ((addr! Poly) (prewrite_byte! Poly) (write_addr! Poly) (write_bytes! Poly) (chunks_flushed! Poly)) (! (=> (and (has_type addr! INT) (has_type prewrite_byte! (UINT 8)) (has_type write_addr! INT) (has_type write_bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type chunks_flushed! (TYPE%vstd!set.Set. $ INT))) (uInv 8 (main!pmemspec_t.update_byte_to_reflect_partially_flushed_write.? addr! prewrite_byte! write_addr! write_bytes! chunks_flushed!))) :pattern ((main!pmemspec_t.update_byte_to_reflect_partially_flushed_write.? addr! prewrite_byte! write_addr! write_bytes! chunks_flushed!)))))
(set-info :comment ";; Function-Specs main::pmemspec_t::update_contents_to_reflect_partially_flushed_write")
(declare-fun req%main!pmemspec_t.update_contents_to_reflect_partially_flushed_write. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((contents! Poly) (write_addr! Poly) (write_bytes! Poly) (chunks_flushed! Poly)) (! (= (req%main!pmemspec_t.update_contents_to_reflect_partially_flushed_write. contents! write_addr! write_bytes! chunks_flushed!) (and (=> %%global_location_label%%26 (<= 0 (%I write_addr!))) (=> %%global_location_label%%27 (<= (Add (%I write_addr!) (vstd!seq.Seq.len.? $ (UINT 8) write_bytes!)) (vstd!seq.Seq.len.? $ (UINT 8) contents!))))) :pattern ((req%main!pmemspec_t.update_contents_to_reflect_partially_flushed_write. contents! write_addr! write_bytes! chunks_flushed!)))))
(set-info :comment ";; Function-Axioms main::pmemspec_t::update_contents_to_reflect_partially_flushed_write")
(assert (fuel_bool_default fuel%main!pmemspec_t.update_contents_to_reflect_partially_flushed_write.))
(declare-fun %%lambda%%3 (Dcr Type Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Poly) (%%hole%%4 Poly) (%%hole%%5 Poly) (addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) addr$) (I (main!pmemspec_t.update_byte_to_reflect_partially_flushed_write.? addr$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 addr$) %%hole%%3 %%hole%%4 %%hole%%5))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) addr$)))))
(assert (=> (fuel_bool fuel%main!pmemspec_t.update_contents_to_reflect_partially_flushed_write.) (forall ((contents! Poly) (write_addr! Poly) (write_bytes! Poly) (chunks_flushed! Poly)) (! (= (main!pmemspec_t.update_contents_to_reflect_partially_flushed_write.? contents! write_addr! write_bytes! chunks_flushed!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ (UINT 8) contents!)) (Poly%fun%1. (mk_fun (%%lambda%%3 $ (UINT 8) contents! write_addr! write_bytes! chunks_flushed!)))))) :pattern ((main!pmemspec_t.update_contents_to_reflect_partially_flushed_write.? contents! write_addr! write_bytes! chunks_flushed!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)))))
(set-info :comment ";; Function-Specs main::logimpl_v::lemma_same_permissions")
(declare-fun req%main!logimpl_v.lemma_same_permissions. (Dcr Type vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>. Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (pm1! vstd!seq.Seq<u8.>.) (pm2! vstd!seq.Seq<u8.>.) (perm! Poly)) (! (= (req%main!logimpl_v.lemma_same_permissions. Perm&. Perm& pm1! pm2! perm!) (and (=> %%global_location_label%%28 (ext_eq false (TYPE%core!option.Option. $ TYPE%main!infinitelog_t.AbstractInfiniteLogState.) (%%apply%%0 (main!main_t.recovery_view.? (I 0)) (Poly%vstd!seq.Seq<u8.>. pm1!)) (%%apply%%0 (main!main_t.recovery_view.? (I 0)) (Poly%vstd!seq.Seq<u8.>. pm2!)))) (=> %%global_location_label%%29 (%B (main!sccf.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! (Poly%vstd!seq.Seq<u8.>. pm1!)))) (=> %%global_location_label%%30 (main!logimpl_v.permissions_depend_only_on_recovery_view.? Perm&. Perm& perm!)))) :pattern ((req%main!logimpl_v.lemma_same_permissions. Perm&. Perm& pm1! pm2! perm!)))))
(declare-fun ens%main!logimpl_v.lemma_same_permissions. (Dcr Type vstd!seq.Seq<u8.>. vstd!seq.Seq<u8.>. Poly) Bool)
(assert (forall ((Perm&. Dcr) (Perm& Type) (pm1! vstd!seq.Seq<u8.>.) (pm2! vstd!seq.Seq<u8.>.) (perm! Poly)) (! (= (ens%main!logimpl_v.lemma_same_permissions. Perm&. Perm& pm1! pm2! perm!) (%B (main!sccf.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! (Poly%vstd!seq.Seq<u8.>. pm2!)))) :pattern ((ens%main!logimpl_v.lemma_same_permissions. Perm&. Perm& pm1! pm2! perm!)))))
(set-info :comment ";; Function-Def main::logimpl_v::lemma_same_permissions")
(set-info :comment ";; src/logimpl_v.rs:86:5: 86:113 (#0)")
(declare-const Perm&. Dcr)
(declare-const Perm& Type)
(declare-const pm1! vstd!seq.Seq<u8.>.)
(declare-const pm2! vstd!seq.Seq<u8.>.)
(declare-const perm! Poly)
(assert fuel_defaults)
(assert (has_type perm! Perm&))
(assert (tr_bound%main!sccf.CheckPermission. Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (ext_eq false (TYPE%core!option.Option. $ TYPE%main!infinitelog_t.AbstractInfiniteLogState.) (%%apply%%0 (main!main_t.recovery_view.? (I 0)) (Poly%vstd!seq.Seq<u8.>. pm1!)) (%%apply%%0 (main!main_t.recovery_view.? (I 0)) (Poly%vstd!seq.Seq<u8.>. pm2!))))
(assert (%B (main!sccf.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! (Poly%vstd!seq.Seq<u8.>. pm1!))))
(assert (main!logimpl_v.permissions_depend_only_on_recovery_view.? Perm&. Perm& perm!))
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> %%location_label%%0 (%B (main!sccf.CheckPermission.check_permission.? Perm&. Perm& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) perm! (Poly%vstd!seq.Seq<u8.>. pm2!))))))
(check-sat)
(exit)
