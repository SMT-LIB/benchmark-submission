(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module spec_t::hardware'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_paddr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_op. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_ReadWrite_vaddr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_ReadWrite_paddr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_ReadWrite_op. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_ReadWrite_pte. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_TLBFill_vaddr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_TLBFill_pte. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%0.arrow_TLBEvict_vaddr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.is_Directory. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_addr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_P. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_PWT. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_PCD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_A. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.is_Page. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_addr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_P. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_PWT. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_PCD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_A. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_D. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_G. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.is_Empty. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_flag_G. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_flag_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_flag_D. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_addr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_P. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_PWT. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_PCD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_A. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_addr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_P. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_PWT. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_PCD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_A. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_D. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_G. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_P. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_PWT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_PCD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_A. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_D. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_G. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_DIR_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%3.view. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%3.layer. FuelId)
(declare-const fuel%lib!spec_t.hardware.read_entry. FuelId)
(declare-const fuel%lib!spec_t.hardware.valid_pt_walk. FuelId)
(declare-const fuel%lib!spec_t.hardware.nat_to_u64. FuelId)
(declare-const fuel%lib!spec_t.hardware.interp_pt_mem. FuelId)
(declare-const fuel%lib!spec_t.hardware.init. FuelId)
(declare-const fuel%lib!spec_t.hardware.step_ReadWrite. FuelId)
(declare-const fuel%lib!spec_t.hardware.step_PTMemOp. FuelId)
(declare-const fuel%lib!spec_t.hardware.step_TLBFill. FuelId)
(declare-const fuel%lib!spec_t.hardware.step_TLBEvict. FuelId)
(declare-const fuel%lib!spec_t.hardware.next_step. FuelId)
(declare-const fuel%lib!spec_t.hardware.next. FuelId)
(declare-const fuel%lib!spec_t.mem.word_index_spec. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.spec_read. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_ENTRIES. FuelId)
(declare-const fuel%lib!definitions_t.WORD_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.PAGE_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.MAX_BASE. FuelId)
(declare-const fuel%lib!definitions_t.L3_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L2_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L1_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.aligned. FuelId)
(declare-const fuel%lib!definitions_t.between. FuelId)
(declare-const fuel%lib!definitions_t.impl&%0.arrow_0. FuelId)
(declare-const fuel%lib!definitions_t.impl&%4.view. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%lib!spec_t.hardware.impl&%0.arrow_paddr. fuel%lib!spec_t.hardware.impl&%0.arrow_op. fuel%lib!spec_t.hardware.impl&%0.arrow_ReadWrite_vaddr. fuel%lib!spec_t.hardware.impl&%0.arrow_ReadWrite_paddr. fuel%lib!spec_t.hardware.impl&%0.arrow_ReadWrite_op. fuel%lib!spec_t.hardware.impl&%0.arrow_ReadWrite_pte. fuel%lib!spec_t.hardware.impl&%0.arrow_TLBFill_vaddr. fuel%lib!spec_t.hardware.impl&%0.arrow_TLBFill_pte. fuel%lib!spec_t.hardware.impl&%0.arrow_TLBEvict_vaddr. fuel%lib!spec_t.hardware.impl&%1.is_Directory. fuel%lib!spec_t.hardware.impl&%1.get_Directory_addr. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_P. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_RW. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_US. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_PWT. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_PCD. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_A. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_XD. fuel%lib!spec_t.hardware.impl&%1.is_Page. fuel%lib!spec_t.hardware.impl&%1.get_Page_addr. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_P. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_RW. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_US. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_PWT. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_PCD. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_A. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_D. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_G. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_PAT. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_XD. fuel%lib!spec_t.hardware.impl&%1.is_Empty. fuel%lib!spec_t.hardware.impl&%2.arrow_flag_G. fuel%lib!spec_t.hardware.impl&%2.arrow_flag_PAT. fuel%lib!spec_t.hardware.impl&%2.arrow_flag_D. fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_addr. fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_P. fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_RW. fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_US. fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_PWT. fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_PCD. fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_A. fuel%lib!spec_t.hardware.impl&%2.arrow_Directory_flag_XD. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_addr. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_P. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_RW. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_US. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_PWT. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_PCD. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_A. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_D. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_G. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_PAT. fuel%lib!spec_t.hardware.impl&%2.arrow_Page_flag_XD. fuel%lib!spec_t.hardware.MASK_FLAG_P. fuel%lib!spec_t.hardware.MASK_FLAG_RW. fuel%lib!spec_t.hardware.MASK_FLAG_US. fuel%lib!spec_t.hardware.MASK_FLAG_PWT. fuel%lib!spec_t.hardware.MASK_FLAG_PCD. fuel%lib!spec_t.hardware.MASK_FLAG_A. fuel%lib!spec_t.hardware.MASK_FLAG_XD. fuel%lib!spec_t.hardware.MASK_PG_FLAG_D. fuel%lib!spec_t.hardware.MASK_PG_FLAG_G. fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT. fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS. fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS. fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT. fuel%lib!spec_t.hardware.MASK_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_DIR_ADDR_SPEC. fuel%lib!spec_t.hardware.impl&%3.view. fuel%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. fuel%lib!spec_t.hardware.impl&%3.layer. fuel%lib!spec_t.hardware.read_entry. fuel%lib!spec_t.hardware.valid_pt_walk. fuel%lib!spec_t.hardware.nat_to_u64. fuel%lib!spec_t.hardware.interp_pt_mem. fuel%lib!spec_t.hardware.init. fuel%lib!spec_t.hardware.step_ReadWrite. fuel%lib!spec_t.hardware.step_PTMemOp. fuel%lib!spec_t.hardware.step_TLBFill. fuel%lib!spec_t.hardware.step_TLBEvict. fuel%lib!spec_t.hardware.next_step. fuel%lib!spec_t.hardware.next. fuel%lib!spec_t.mem.word_index_spec. fuel%lib!spec_t.mem.impl&%1.spec_read. fuel%lib!definitions_t.X86_NUM_ENTRIES. fuel%lib!definitions_t.WORD_SIZE. fuel%lib!definitions_t.PAGE_SIZE. fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. fuel%lib!definitions_t.MAX_BASE. fuel%lib!definitions_t.L3_ENTRY_SIZE. fuel%lib!definitions_t.L2_ENTRY_SIZE. fuel%lib!definitions_t.L1_ENTRY_SIZE. fuel%lib!definitions_t.aligned. fuel%lib!definitions_t.between. fuel%lib!definitions_t.impl&%0.arrow_0. fuel%lib!definitions_t.impl&%4.view. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort lib!spec_t.mem.PageTableMemory. 0)
(declare-sort vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!spec_t.hardware.HWVariables. 0) (lib!spec_t.hardware.HWStep. 0) (lib!spec_t.hardware.GhostPageDirectoryEntry. 0) (lib!spec_t.hardware.PageDirectoryEntry. 0) (lib!definitions_t.LoadResult. 0) (lib!definitions_t.StoreResult. 0) (lib!definitions_t.RWOp. 0) (lib!definitions_t.MemRegion. 0) (lib!definitions_t.MemRegionExec. 0) (lib!definitions_t.Flags. 0) (lib!definitions_t.PageTableEntry. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!spec_t.hardware.HWVariables./HWVariables (lib!spec_t.hardware.HWVariables./HWVariables/?mem vstd!seq.Seq<nat.>.) (lib!spec_t.hardware.HWVariables./HWVariables/?pt_mem lib!spec_t.mem.PageTableMemory.) (lib!spec_t.hardware.HWVariables./HWVariables/?tlb vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.))) ((lib!spec_t.hardware.HWStep./ReadWrite (lib!spec_t.hardware.HWStep./ReadWrite/?vaddr Int) (lib!spec_t.hardware.HWStep./ReadWrite/?paddr Int) (lib!spec_t.hardware.HWStep./ReadWrite/?op lib!definitions_t.RWOp.) (lib!spec_t.hardware.HWStep./ReadWrite/?pte core!option.Option.)) (lib!spec_t.hardware.HWStep./PTMemOp ) (lib!spec_t.hardware.HWStep./TLBFill (lib!spec_t.hardware.HWStep./TLBFill/?vaddr Int) (lib!spec_t.hardware.HWStep./TLBFill/?pte lib!definitions_t.PageTableEntry.)) (lib!spec_t.hardware.HWStep./TLBEvict (lib!spec_t.hardware.HWStep./TLBEvict/?vaddr Int))) ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?addr Int) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_P Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_RW Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_US Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PWT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PCD Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_A Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_XD Bool)) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?addr Int) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_P Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_RW Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_US Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PWT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PCD Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_A Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_D Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_G Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PAT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_XD Bool)) (lib!spec_t.hardware.GhostPageDirectoryEntry./Empty )) ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?entry Int) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?layer Int))) ((lib!definitions_t.LoadResult./Pagefault ) (lib!definitions_t.LoadResult./Value (lib!definitions_t.LoadResult./Value/?0 Int))) ((lib!definitions_t.StoreResult./Pagefault ) (lib!definitions_t.StoreResult./Ok )) ((lib!definitions_t.RWOp./Store (lib!definitions_t.RWOp./Store/?new_value Int) (lib!definitions_t.RWOp./Store/?result lib!definitions_t.StoreResult.)) (lib!definitions_t.RWOp./Load (lib!definitions_t.RWOp./Load/?is_exec Bool) (lib!definitions_t.RWOp./Load/?result lib!definitions_t.LoadResult.))) ((lib!definitions_t.MemRegion./MemRegion (lib!definitions_t.MemRegion./MemRegion/?base Int) (lib!definitions_t.MemRegion./MemRegion/?size Int))) ((lib!definitions_t.MemRegionExec./MemRegionExec (lib!definitions_t.MemRegionExec./MemRegionExec/?base Int) (lib!definitions_t.MemRegionExec./MemRegionExec/?size Int))) ((lib!definitions_t.Flags./Flags (lib!definitions_t.Flags./Flags/?is_writable Bool) (lib!definitions_t.Flags./Flags/?is_supervisor Bool) (lib!definitions_t.Flags./Flags/?disable_execute Bool))) ((lib!definitions_t.PageTableEntry./PageTableEntry (lib!definitions_t.PageTableEntry./PageTableEntry/?frame lib!definitions_t.MemRegion.) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags lib!definitions_t.Flags.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!spec_t.hardware.HWVariables./HWVariables/mem (lib!spec_t.hardware.HWVariables.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec_t.hardware.HWVariables./HWVariables/pt_mem (lib!spec_t.hardware.HWVariables.) lib!spec_t.mem.PageTableMemory.)
(declare-fun lib!spec_t.hardware.HWVariables./HWVariables/tlb (lib!spec_t.hardware.HWVariables.) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun lib!spec_t.hardware.HWStep./ReadWrite/vaddr (lib!spec_t.hardware.HWStep.) Int)
(declare-fun lib!spec_t.hardware.HWStep./ReadWrite/paddr (lib!spec_t.hardware.HWStep.) Int)
(declare-fun lib!spec_t.hardware.HWStep./ReadWrite/op (lib!spec_t.hardware.HWStep.) lib!definitions_t.RWOp.)
(declare-fun lib!spec_t.hardware.HWStep./ReadWrite/pte (lib!spec_t.hardware.HWStep.) core!option.Option.)
(declare-fun lib!spec_t.hardware.HWStep./TLBFill/vaddr (lib!spec_t.hardware.HWStep.) Int)
(declare-fun lib!spec_t.hardware.HWStep./TLBFill/pte (lib!spec_t.hardware.HWStep.) lib!definitions_t.PageTableEntry.)
(declare-fun lib!spec_t.hardware.HWStep./TLBEvict/vaddr (lib!spec_t.hardware.HWStep.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (lib!spec_t.hardware.GhostPageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (lib!spec_t.hardware.GhostPageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (lib!spec_t.hardware.PageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (lib!spec_t.hardware.PageDirectoryEntry.) Int)
(declare-fun lib!definitions_t.LoadResult./Value/0 (lib!definitions_t.LoadResult.) Int)
(declare-fun lib!definitions_t.RWOp./Store/new_value (lib!definitions_t.RWOp.) Int)
(declare-fun lib!definitions_t.RWOp./Store/result (lib!definitions_t.RWOp.) lib!definitions_t.StoreResult.)
(declare-fun lib!definitions_t.RWOp./Load/is_exec (lib!definitions_t.RWOp.) Bool)
(declare-fun lib!definitions_t.RWOp./Load/result (lib!definitions_t.RWOp.) lib!definitions_t.LoadResult.)
(declare-fun lib!definitions_t.MemRegion./MemRegion/base (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/size (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/base (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/size (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.Flags./Flags/is_writable (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/is_supervisor (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/disable_execute (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/frame (lib!definitions_t.PageTableEntry.) lib!definitions_t.MemRegion.)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/flags (lib!definitions_t.PageTableEntry.) lib!definitions_t.Flags.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!spec_t.hardware.HWVariables. Type)
(declare-const TYPE%lib!spec_t.hardware.HWStep. Type)
(declare-const TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry. Type)
(declare-const TYPE%lib!spec_t.hardware.PageDirectoryEntry. Type)
(declare-const TYPE%lib!spec_t.mem.PageTableMemory. Type)
(declare-const TYPE%lib!definitions_t.LoadResult. Type)
(declare-const TYPE%lib!definitions_t.StoreResult. Type)
(declare-const TYPE%lib!definitions_t.RWOp. Type)
(declare-const TYPE%lib!definitions_t.MemRegion. Type)
(declare-const TYPE%lib!definitions_t.MemRegionExec. Type)
(declare-const TYPE%lib!definitions_t.Flags. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntry. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.mem.PageTableMemory.) Poly)
(declare-fun %Poly%lib!spec_t.mem.PageTableMemory. (Poly) lib!spec_t.mem.PageTableMemory.)
(declare-fun Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!spec_t.hardware.HWVariables. (lib!spec_t.hardware.HWVariables.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.HWVariables. (Poly) lib!spec_t.hardware.HWVariables.)
(declare-fun Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.HWStep. (Poly) lib!spec_t.hardware.HWStep.)
(declare-fun Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-fun Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly) lib!spec_t.hardware.PageDirectoryEntry.)
(declare-fun Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult.) Poly)
(declare-fun %Poly%lib!definitions_t.LoadResult. (Poly) lib!definitions_t.LoadResult.)
(declare-fun Poly%lib!definitions_t.StoreResult. (lib!definitions_t.StoreResult.) Poly)
(declare-fun %Poly%lib!definitions_t.StoreResult. (Poly) lib!definitions_t.StoreResult.)
(declare-fun Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp.) Poly)
(declare-fun %Poly%lib!definitions_t.RWOp. (Poly) lib!definitions_t.RWOp.)
(declare-fun Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegion. (Poly) lib!definitions_t.MemRegion.)
(declare-fun Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegionExec. (Poly) lib!definitions_t.MemRegionExec.)
(declare-fun Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags.) Poly)
(declare-fun %Poly%lib!definitions_t.Flags. (Poly) lib!definitions_t.Flags.)
(declare-fun Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntry. (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (= x (%Poly%lib!spec_t.mem.PageTableMemory. (Poly%lib!spec_t.mem.PageTableMemory. x))) :pattern ((Poly%lib!spec_t.mem.PageTableMemory. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.mem.PageTableMemory.) (= x (Poly%lib!spec_t.mem.PageTableMemory. (%Poly%lib!spec_t.mem.PageTableMemory. x)))) :pattern ((has_type x TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.) :pattern ((has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (= x (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (= x (%Poly%lib!spec_t.hardware.HWVariables. (Poly%lib!spec_t.hardware.HWVariables. x))) :pattern ((Poly%lib!spec_t.hardware.HWVariables. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWVariables.) (= x (Poly%lib!spec_t.hardware.HWVariables. (%Poly%lib!spec_t.hardware.HWVariables. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.HWVariables.)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (= (lib!spec_t.hardware.HWVariables./HWVariables/mem x) (lib!spec_t.hardware.HWVariables./HWVariables/?mem x)) :pattern ((lib!spec_t.hardware.HWVariables./HWVariables/mem x)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (= (lib!spec_t.hardware.HWVariables./HWVariables/pt_mem x) (lib!spec_t.hardware.HWVariables./HWVariables/?pt_mem x)) :pattern ((lib!spec_t.hardware.HWVariables./HWVariables/pt_mem x)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (= (lib!spec_t.hardware.HWVariables./HWVariables/tlb x) (lib!spec_t.hardware.HWVariables./HWVariables/?tlb x)) :pattern ((lib!spec_t.hardware.HWVariables./HWVariables/tlb x)))))
(assert (forall ((x lib!spec_t.hardware.HWVariables.)) (! (has_type (Poly%lib!spec_t.hardware.HWVariables. x) TYPE%lib!spec_t.hardware.HWVariables.) :pattern ((has_type (Poly%lib!spec_t.hardware.HWVariables. x) TYPE%lib!spec_t.hardware.HWVariables.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= x (%Poly%lib!spec_t.hardware.HWStep. (Poly%lib!spec_t.hardware.HWStep. x))) :pattern ((Poly%lib!spec_t.hardware.HWStep. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (= x (Poly%lib!spec_t.hardware.HWStep. (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((_vaddr! Int) (_paddr! Int) (_op! lib!definitions_t.RWOp.) (_pte! core!option.Option.)) (! (=> (and (<= 0 _vaddr!) (<= 0 _paddr!) (has_type (Poly%lib!definitions_t.RWOp. _op!) TYPE%lib!definitions_t.RWOp.) (has_type (Poly%core!option.Option. _pte!) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) (has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./ReadWrite _vaddr! _paddr! _op! _pte!)) TYPE%lib!spec_t.hardware.HWStep.)) :pattern ((has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./ReadWrite _vaddr! _paddr! _op! _pte!)) TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./ReadWrite/vaddr x) (lib!spec_t.hardware.HWStep./ReadWrite/?vaddr x)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (<= 0 (lib!spec_t.hardware.HWStep./ReadWrite/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./ReadWrite/paddr x) (lib!spec_t.hardware.HWStep./ReadWrite/?paddr x)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/paddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (<= 0 (lib!spec_t.hardware.HWStep./ReadWrite/paddr (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/paddr (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./ReadWrite/op x) (lib!spec_t.hardware.HWStep./ReadWrite/?op x)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/op x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (has_type (Poly%lib!definitions_t.RWOp. (lib!spec_t.hardware.HWStep./ReadWrite/op (%Poly%lib!spec_t.hardware.HWStep. x))) TYPE%lib!definitions_t.RWOp.)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/op (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./ReadWrite/pte x) (lib!spec_t.hardware.HWStep./ReadWrite/?pte x)) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (has_type (Poly%core!option.Option. (lib!spec_t.hardware.HWStep./ReadWrite/pte (%Poly%lib!spec_t.hardware.HWStep. x))) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) :pattern ((lib!spec_t.hardware.HWStep./ReadWrite/pte (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (has_type (Poly%lib!spec_t.hardware.HWStep. lib!spec_t.hardware.HWStep./PTMemOp) TYPE%lib!spec_t.hardware.HWStep.))
(assert (forall ((_vaddr! Int) (_pte! lib!definitions_t.PageTableEntry.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%lib!definitions_t.PageTableEntry. _pte!) TYPE%lib!definitions_t.PageTableEntry.)) (has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./TLBFill _vaddr! _pte!)) TYPE%lib!spec_t.hardware.HWStep.)) :pattern ((has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./TLBFill _vaddr! _pte!)) TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./TLBFill/vaddr x) (lib!spec_t.hardware.HWStep./TLBFill/?vaddr x)) :pattern ((lib!spec_t.hardware.HWStep./TLBFill/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (<= 0 (lib!spec_t.hardware.HWStep./TLBFill/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((lib!spec_t.hardware.HWStep./TLBFill/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./TLBFill/pte x) (lib!spec_t.hardware.HWStep./TLBFill/?pte x)) :pattern ((lib!spec_t.hardware.HWStep./TLBFill/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!spec_t.hardware.HWStep./TLBFill/pte (%Poly%lib!spec_t.hardware.HWStep. x))) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!spec_t.hardware.HWStep./TLBFill/pte (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((_vaddr! Int)) (! (=> (<= 0 _vaddr!) (has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./TLBEvict _vaddr!)) TYPE%lib!spec_t.hardware.HWStep.)) :pattern ((has_type (Poly%lib!spec_t.hardware.HWStep. (lib!spec_t.hardware.HWStep./TLBEvict _vaddr!)) TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.HWStep.)) (! (= (lib!spec_t.hardware.HWStep./TLBEvict/vaddr x) (lib!spec_t.hardware.HWStep./TLBEvict/?vaddr x)) :pattern ((lib!spec_t.hardware.HWStep./TLBEvict/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.HWStep.) (<= 0 (lib!spec_t.hardware.HWStep./TLBEvict/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)))) :pattern ((lib!spec_t.hardware.HWStep./TLBEvict/vaddr (%Poly%lib!spec_t.hardware.HWStep. x)) (has_type x TYPE%lib!spec_t.hardware.HWStep.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= x (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x))) :pattern ((Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (= x (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((_addr! Int) (_flag_P! Bool) (_flag_RW! Bool) (_flag_US! Bool) (_flag_PWT! Bool) (_flag_PCD! Bool) (_flag_A! Bool) (_flag_XD! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?addr x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_P x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_RW x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_US x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PWT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PCD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_A x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_XD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD x)))))
(assert (forall ((_addr! Int) (_flag_P! Bool) (_flag_RW! Bool) (_flag_US! Bool) (_flag_PWT! Bool) (_flag_PCD! Bool) (_flag_A! Bool) (_flag_D! Bool) (_flag_G! Bool) (_flag_PAT! Bool) (_flag_XD! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Page _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_D! _flag_G! _flag_PAT! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Page _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_D! _flag_G! _flag_PAT! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?addr x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_P x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_RW x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_US x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PWT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PCD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_A x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_D x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_G x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PAT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_XD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD x)))))
(assert (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. lib!spec_t.hardware.GhostPageDirectoryEntry./Empty) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= x (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. x))) :pattern ((Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (= x (Poly%lib!spec_t.hardware.PageDirectoryEntry. (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((_entry! Int) (_layer! Int)) (! (=> (and (uInv 64 _entry!) (<= 0 _layer!)) (has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry _entry! _layer!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry _entry! _layer!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry x) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?entry x)) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (uInv 64 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer x) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?layer x)) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (<= 0 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!definitions_t.LoadResult.)) (! (= x (%Poly%lib!definitions_t.LoadResult. (Poly%lib!definitions_t.LoadResult. x))) :pattern ((Poly%lib!definitions_t.LoadResult. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.LoadResult.) (= x (Poly%lib!definitions_t.LoadResult. (%Poly%lib!definitions_t.LoadResult. x)))) :pattern ((has_type x TYPE%lib!definitions_t.LoadResult.)))))
(assert (has_type (Poly%lib!definitions_t.LoadResult. lib!definitions_t.LoadResult./Pagefault) TYPE%lib!definitions_t.LoadResult.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult./Value _0!)) TYPE%lib!definitions_t.LoadResult.)) :pattern ((has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult./Value _0!)) TYPE%lib!definitions_t.LoadResult.)))))
(assert (forall ((x lib!definitions_t.LoadResult.)) (! (= (lib!definitions_t.LoadResult./Value/0 x) (lib!definitions_t.LoadResult./Value/?0 x)) :pattern ((lib!definitions_t.LoadResult./Value/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.LoadResult.) (<= 0 (lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. x)))) :pattern ((lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. x)) (has_type x TYPE%lib!definitions_t.LoadResult.)))))
(assert (forall ((x lib!definitions_t.StoreResult.)) (! (= x (%Poly%lib!definitions_t.StoreResult. (Poly%lib!definitions_t.StoreResult. x))) :pattern ((Poly%lib!definitions_t.StoreResult. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.StoreResult.) (= x (Poly%lib!definitions_t.StoreResult. (%Poly%lib!definitions_t.StoreResult. x)))) :pattern ((has_type x TYPE%lib!definitions_t.StoreResult.)))))
(assert (forall ((x lib!definitions_t.StoreResult.)) (! (has_type (Poly%lib!definitions_t.StoreResult. x) TYPE%lib!definitions_t.StoreResult.) :pattern ((has_type (Poly%lib!definitions_t.StoreResult. x) TYPE%lib!definitions_t.StoreResult.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= x (%Poly%lib!definitions_t.RWOp. (Poly%lib!definitions_t.RWOp. x))) :pattern ((Poly%lib!definitions_t.RWOp. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (= x (Poly%lib!definitions_t.RWOp. (%Poly%lib!definitions_t.RWOp. x)))) :pattern ((has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((_new_value! Int) (_result! lib!definitions_t.StoreResult.)) (! (=> (<= 0 _new_value!) (has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Store _new_value! _result!)) TYPE%lib!definitions_t.RWOp.)) :pattern ((has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Store _new_value! _result!)) TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Store/new_value x) (lib!definitions_t.RWOp./Store/?new_value x)) :pattern ((lib!definitions_t.RWOp./Store/new_value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (<= 0 (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. x)))) :pattern ((lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. x)) (has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Store/result x) (lib!definitions_t.RWOp./Store/?result x)) :pattern ((lib!definitions_t.RWOp./Store/result x)))))
(assert (forall ((_is_exec! Bool) (_result! lib!definitions_t.LoadResult.)) (! (=> (has_type (Poly%lib!definitions_t.LoadResult. _result!) TYPE%lib!definitions_t.LoadResult.) (has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Load _is_exec! _result!)) TYPE%lib!definitions_t.RWOp.)) :pattern ((has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Load _is_exec! _result!)) TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Load/is_exec x) (lib!definitions_t.RWOp./Load/?is_exec x)) :pattern ((lib!definitions_t.RWOp./Load/is_exec x)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Load/result x) (lib!definitions_t.RWOp./Load/?result x)) :pattern ((lib!definitions_t.RWOp./Load/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. x))) TYPE%lib!definitions_t.LoadResult.)) :pattern ((lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. x)) (has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= x (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. x))) :pattern ((Poly%lib!definitions_t.MemRegion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (= x (Poly%lib!definitions_t.MemRegion. (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (<= 0 _base!) (<= 0 _size!)) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/base x) (lib!definitions_t.MemRegion./MemRegion/?base x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/size x) (lib!definitions_t.MemRegion./MemRegion/?size x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= x (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. x))) :pattern ((Poly%lib!definitions_t.MemRegionExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (= x (Poly%lib!definitions_t.MemRegionExec. (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (uInv SZ _base!) (uInv SZ _size!)) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/base x) (lib!definitions_t.MemRegionExec./MemRegionExec/?base x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/size x) (lib!definitions_t.MemRegionExec./MemRegionExec/?size x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= x (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. x))) :pattern ((Poly%lib!definitions_t.Flags. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Flags.) (= x (Poly%lib!definitions_t.Flags. (%Poly%lib!definitions_t.Flags. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_writable x) (lib!definitions_t.Flags./Flags/?is_writable x)) :pattern ((lib!definitions_t.Flags./Flags/is_writable x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_supervisor x) (lib!definitions_t.Flags./Flags/?is_supervisor x)) :pattern ((lib!definitions_t.Flags./Flags/is_supervisor x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/disable_execute x) (lib!definitions_t.Flags./Flags/?disable_execute x)) :pattern ((lib!definitions_t.Flags./Flags/disable_execute x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.) :pattern ((has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= x (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. x))) :pattern ((Poly%lib!definitions_t.PageTableEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (= x (Poly%lib!definitions_t.PageTableEntry. (%Poly%lib!definitions_t.PageTableEntry. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegion.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _frame!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/frame x) (lib!definitions_t.PageTableEntry./PageTableEntry/?frame x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x)) (has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/flags x) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/flags x)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::definitions_t::aligned")
(declare-fun lib!definitions_t.aligned.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::cr3_spec")
(declare-fun lib!spec_t.mem.impl&%1.cr3_spec.? (Poly) lib!definitions_t.MemRegionExec.)
(set-info :comment ";; Function-Decl lib::definitions_t::PAGE_SIZE")
(declare-fun lib!definitions_t.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::MemRegionExec::view")
(declare-fun lib!definitions_t.impl&%4.view.? (Poly) lib!definitions_t.MemRegion.)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::region_view")
(declare-fun lib!spec_t.mem.impl&%1.region_view.? (Poly Poly) vstd!seq.Seq<u64.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_WIDTH")
(declare-fun lib!definitions_t.MAX_PHYADDR_WIDTH.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_MAX_ENTRY_SIZE")
(declare-fun lib!definitions_t.X86_MAX_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_ENTRIES")
(declare-fun lib!definitions_t.X86_NUM_ENTRIES.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L3_ENTRY_SIZE")
(declare-fun lib!definitions_t.L3_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L2_ENTRY_SIZE")
(declare-fun lib!definitions_t.L2_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L1_ENTRY_SIZE")
(declare-fun lib!definitions_t.L1_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_BASE")
(declare-fun lib!definitions_t.MAX_BASE.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_P")
(declare-fun lib!spec_t.hardware.MASK_FLAG_P.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_RW")
(declare-fun lib!spec_t.hardware.MASK_FLAG_RW.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_US")
(declare-fun lib!spec_t.hardware.MASK_FLAG_US.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_PWT")
(declare-fun lib!spec_t.hardware.MASK_FLAG_PWT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_PCD")
(declare-fun lib!spec_t.hardware.MASK_FLAG_PCD.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_A")
(declare-fun lib!spec_t.hardware.MASK_FLAG_A.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_XD")
(declare-fun lib!spec_t.hardware.MASK_FLAG_XD.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_D")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_D.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_G")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_G.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L1_PG_FLAG_PS")
(declare-fun lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L2_PG_FLAG_PS")
(declare-fun lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::all_mb0_bits_are_zero")
(declare-fun lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L1_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_PAT")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_PAT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L2_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L3_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L3_PG_FLAG_PAT")
(declare-fun lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::view")
(declare-fun lib!spec_t.hardware.impl&%3.view.? (Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::spec_read")
(declare-fun lib!spec_t.mem.impl&%1.spec_read.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::read_entry")
(declare-fun lib!spec_t.hardware.read_entry.? (Poly Poly Poly Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::valid_pt_walk")
(declare-fun lib!spec_t.hardware.valid_pt_walk.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::nat_to_u64")
(declare-fun lib!spec_t.hardware.nat_to_u64.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::interp_pt_mem")
(declare-fun lib!spec_t.hardware.interp_pt_mem.? (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::between")
(declare-fun lib!definitions_t.between.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::WORD_SIZE")
(declare-fun lib!definitions_t.WORD_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_addr")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_addr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_RW")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_RW.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_US")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_US.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_XD")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_XD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::mem::word_index_spec")
(declare-fun lib!spec_t.mem.word_index_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::LoadResult::arrow_0")
(declare-fun lib!definitions_t.impl&%0.arrow_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_paddr")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_paddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_op")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_op.? (Poly) lib!definitions_t.RWOp.)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_ReadWrite_vaddr")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_ReadWrite_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_ReadWrite_paddr")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_ReadWrite_paddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_ReadWrite_op")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_ReadWrite_op.? (Poly) lib!definitions_t.RWOp.)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_ReadWrite_pte")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_ReadWrite_pte.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_TLBFill_vaddr")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_TLBFill_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_TLBFill_pte")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_TLBFill_pte.? (Poly) lib!definitions_t.PageTableEntry.)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::HWStep::arrow_TLBEvict_vaddr")
(declare-fun lib!spec_t.hardware.impl&%0.arrow_TLBEvict_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::is_Directory")
(declare-fun lib!spec_t.hardware.impl&%1.is_Directory.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_P")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_P.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_PWT")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_PWT.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_PCD")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_PCD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_A")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_A.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::is_Page")
(declare-fun lib!spec_t.hardware.impl&%1.is_Page.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_addr")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_addr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_P")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_P.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_RW")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_RW.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_US")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_US.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_PWT")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_PWT.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_PCD")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_PCD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_A")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_A.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_D")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_D.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_G")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_G.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_PAT")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_PAT.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_XD")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_XD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::is_Empty")
(declare-fun lib!spec_t.hardware.impl&%1.is_Empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_flag_G")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_flag_G.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_flag_PAT")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_flag_PAT.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_flag_D")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_flag_D.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Directory_addr")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Directory_addr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Directory_flag_P")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Directory_flag_P.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Directory_flag_RW")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Directory_flag_RW.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Directory_flag_US")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Directory_flag_US.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Directory_flag_PWT")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Directory_flag_PWT.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Directory_flag_PCD")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Directory_flag_PCD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Directory_flag_A")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Directory_flag_A.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Directory_flag_XD")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Directory_flag_XD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_addr")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_addr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_P")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_P.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_RW")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_RW.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_US")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_US.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_PWT")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_PWT.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_PCD")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_PCD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_A")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_A.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_D")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_D.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_G")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_G.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_PAT")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_PAT.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::arrow_Page_flag_XD")
(declare-fun lib!spec_t.hardware.impl&%2.arrow_Page_flag_XD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_DIR_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::layer")
(declare-fun lib!spec_t.hardware.impl&%3.layer.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::init")
(declare-fun lib!spec_t.hardware.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::step_ReadWrite")
(declare-fun lib!spec_t.hardware.step_ReadWrite.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::step_PTMemOp")
(declare-fun lib!spec_t.hardware.step_PTMemOp.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::step_TLBFill")
(declare-fun lib!spec_t.hardware.step_TLBFill.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::step_TLBEvict")
(declare-fun lib!spec_t.hardware.step_TLBEvict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::next_step")
(declare-fun lib!spec_t.hardware.next_step.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::next")
(declare-fun lib!spec_t.hardware.next.? (Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::aligned")
(assert (fuel_bool_default fuel%lib!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%lib!definitions_t.aligned.) (forall ((addr! Poly) (size! Poly)) (! (= (lib!definitions_t.aligned.? addr! size!) (= (nClip (EucMod (%I addr!) (%I size!))) 0)) :pattern ((lib!definitions_t.aligned.? addr! size!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::cr3_spec")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((lib!spec_t.mem.impl&%1.cr3_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PAGE_SIZE.) (= lib!definitions_t.PAGE_SIZE.? 4096)))
(assert (uInv SZ lib!definitions_t.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::MemRegionExec::view")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%4.view.? self!) (lib!definitions_t.MemRegion./MemRegion (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. self!)))) (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. self!)))))) :pattern ((lib!definitions_t.impl&%4.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.MemRegionExec.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? self!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_WIDTH")
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_WIDTH.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_MAX_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.) (= lib!definitions_t.X86_MAX_ENTRY_SIZE.? (nClip (Mul (nClip (Mul (nClip (Mul 512 512)) 512)) 4096)))))
(assert (<= 0 lib!definitions_t.X86_MAX_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_ENTRIES")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_ENTRIES.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_ENTRIES.) (= lib!definitions_t.X86_NUM_ENTRIES.? 512)))
(assert (uInv SZ lib!definitions_t.X86_NUM_ENTRIES.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L3_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L3_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L3_ENTRY_SIZE.) (= lib!definitions_t.L3_ENTRY_SIZE.? lib!definitions_t.PAGE_SIZE.?)))
(assert (uInv SZ lib!definitions_t.L3_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L2_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L2_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L2_ENTRY_SIZE.) (= lib!definitions_t.L2_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L3_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L2_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L1_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L1_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L1_ENTRY_SIZE.) (= lib!definitions_t.L1_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L2_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L1_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_BASE")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_BASE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_BASE.) (= lib!definitions_t.MAX_BASE.? (nClip (Mul lib!definitions_t.X86_MAX_ENTRY_SIZE.? lib!definitions_t.X86_NUM_ENTRIES.?)))))
(assert (<= 0 lib!definitions_t.MAX_BASE.?))
(set-info :comment ";; Function-Def lib::spec_t::hardware::MASK_FLAG_P")
(set-info :comment ";; page-table/spec_t/hardware.rs:99:1: 99:44 (#0)")
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_P")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_P.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_P.) (= lib!spec_t.hardware.MASK_FLAG_P.? (uClip 64 (bitshl (I 1) (I 0))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_P.?))
(set-info :comment ";; Function-Def lib::spec_t::hardware::MASK_FLAG_RW")
(set-info :comment ";; page-table/spec_t/hardware.rs:100:1: 100:44 (#0)")
(declare-const %return! Int)
(assert fuel_defaults)
(set-info :comment ";; possible bit shift underflow/overflow")
(declare-const %%location_label%%0 Bool)
(assert (not (=> %%location_label%%0 (and (<= 0 1) (< 1 64)))))
(check-sat)
(exit)
