(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module spec::cyclicbuffer::CyclicBuffer'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_enter. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_guard. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_unguard. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_finish. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_abort. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_next. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_finish. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_abort. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_finish. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_abort. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_flip_bit. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_finish. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_3. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_3. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_3. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_enabled. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_by. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong_by. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init_by. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_state_valid. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.combiner_valid. FuelId)
(declare-const fuel%lib!spec.utils.map_contains_value. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.stored_type_inv. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.is_Range. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%4.no_overlap_with. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.min. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.map_min_value. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.log_entry_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.log_entry_is_alive. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.log_entry_alive_value. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.add_buffersize. FuelId)
(declare-const fuel%lib!constants.LOG_SIZE. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!set.impl&%0.choose. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_start. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_enter. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_guard. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_unguard. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_finish. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_abort. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_start. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_next. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_finish. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_abort. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_start. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_finish. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_abort. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_flip_bit. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_finish. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_dummy_to_use_type_params. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_3. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_3. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_initialize. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_3. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_dummy_to_use_type_params. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_enabled. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_by. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong_by. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init_by. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_state_valid. fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.combiner_valid. fuel%lib!spec.utils.map_contains_value. fuel%lib!spec.cyclicbuffer.stored_type_inv. fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting. fuel%lib!spec.cyclicbuffer.impl&%0.is_Range. fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur. fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading. fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0. fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending. fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx. fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail. fuel%lib!spec.cyclicbuffer.impl&%4.no_overlap_with. fuel%lib!spec.cyclicbuffer.min. fuel%lib!spec.cyclicbuffer.map_min_value. fuel%lib!spec.cyclicbuffer.log_entry_idx. fuel%lib!spec.cyclicbuffer.log_entry_is_alive. fuel%lib!spec.cyclicbuffer.log_entry_alive_value. fuel%lib!spec.cyclicbuffer.add_buffersize. fuel%lib!constants.LOG_SIZE.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!cell.CellId. 0)
(declare-sort vstd!map.Map<nat./bool.>. 0)
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!seq.Seq<vstd!cell.CellId.>. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!state_machine_internal.NoCopy. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!cell.PointsToData. 0) (lib!spec.unbounded_log.UnboundedLog.log_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.State. 0) (lib!spec.cyclicbuffer.CyclicBuffer.Step. 0) (lib!spec.cyclicbuffer.CyclicBuffer.Config. 0) (lib!spec.cyclicbuffer.CyclicBuffer.Instance. 0) (lib!spec.cyclicbuffer.CyclicBuffer.head. 0) (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.tail. 0) (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions. 0) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. 0) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.combiner. 0) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. 0) (lib!spec.types.LogEntry. 0) (lib!spec.types.ConcreteLogEntry. 0) (lib!spec.cyclicbuffer.StoredType. 0) (lib!spec.cyclicbuffer.ReaderState. 0) (lib!spec.cyclicbuffer.CombinerState. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0) (tuple%6. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!cell.PointsToData./PointsToData (vstd!cell.PointsToData./PointsToData/?pcell vstd!cell.CellId.) (vstd!cell.PointsToData./PointsToData/?value core!option.Option.))) ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?value lib!spec.types.LogEntry.))) ((lib!spec.cyclicbuffer.CyclicBuffer.State./State (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?unbounded_log_instance Poly) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?cell_ids vstd!seq.Seq<vstd!cell.CellId.>.) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?buffer_size Int) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?num_replicas Int) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?head Int) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?tail Int) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?local_versions vstd!map.Map<nat./nat.>.) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?contents Poly) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?alive_bits vstd!map.Map<nat./bool.>.) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?combiner Poly))) ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/?0 Int) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/?1 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/?0 Int) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/?1 lib!spec.cyclicbuffer.StoredType.)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/?0 Int)) (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/?0 lib!spec.cyclicbuffer.CyclicBuffer.State.))) ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?0 Int) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?1 Int) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?2 Poly) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?3 vstd!seq.Seq<vstd!cell.CellId.>.) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?4 Poly)) (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/?0 lib!spec.cyclicbuffer.CyclicBuffer.State.))) ((lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/?send_sync Poly) (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/?state lib!spec.cyclicbuffer.CyclicBuffer.State.) (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/?location Int))) ((lib!spec.cyclicbuffer.CyclicBuffer.head./head (lib!spec.cyclicbuffer.CyclicBuffer.head./head/?dummy_instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.head./head/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/?instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/?value Int))) ((lib!spec.cyclicbuffer.CyclicBuffer.tail./tail (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/?dummy_instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/?instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/?value Int))) ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/?dummy_instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?key Int) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?value Int))) ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/?dummy_instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?key Int) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?value Bool))) ((lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/?dummy_instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?instance lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?key Int) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?value lib!spec.cyclicbuffer.CombinerState.))) ((lib!spec.types.LogEntry./LogEntry (lib!spec.types.LogEntry./LogEntry/?op Poly) (lib!spec.types.LogEntry./LogEntry/?node_id Int))) ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op Poly) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id Int))) ((lib!spec.cyclicbuffer.StoredType./StoredType (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms Poly) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry core!option.Option.))) ((lib!spec.cyclicbuffer.ReaderState./Starting (lib!spec.cyclicbuffer.ReaderState./Starting/?start Int)) (lib!spec.cyclicbuffer.ReaderState./Range (lib!spec.cyclicbuffer.ReaderState./Range/?start Int) (lib!spec.cyclicbuffer.ReaderState./Range/?end Int) (lib!spec.cyclicbuffer.ReaderState./Range/?cur Int)) (lib!spec.cyclicbuffer.ReaderState./Guard (lib!spec.cyclicbuffer.ReaderState./Guard/?start Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?end Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?val lib!spec.cyclicbuffer.StoredType.))) ((lib!spec.cyclicbuffer.CombinerState./Idle ) (lib!spec.cyclicbuffer.CombinerState./Reading (lib!spec.cyclicbuffer.CombinerState./Reading/?0 lib!spec.cyclicbuffer.ReaderState.)) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx Int) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version Int)) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head Int)) (lib!spec.cyclicbuffer.CombinerState./Appending (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx Int) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly))) ((tuple%6./tuple%6 (tuple%6./tuple%6/?0 Poly) (tuple%6./tuple%6/?1 Poly) (tuple%6./tuple%6/?2 Poly) (tuple%6./tuple%6/?3 Poly) (tuple%6./tuple%6/?4 Poly) (tuple%6./tuple%6/?5 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!cell.PointsToData./PointsToData/pcell (vstd!cell.PointsToData.) vstd!cell.CellId.)
(declare-fun vstd!cell.PointsToData./PointsToData/value (vstd!cell.PointsToData.) core!option.Option.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (lib!spec.unbounded_log.UnboundedLog.log_token_data.) lib!spec.types.LogEntry.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (lib!spec.cyclicbuffer.CyclicBuffer.State.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (lib!spec.cyclicbuffer.CyclicBuffer.State.) vstd!seq.Seq<vstd!cell.CellId.>.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (lib!spec.cyclicbuffer.CyclicBuffer.State.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (lib!spec.cyclicbuffer.CyclicBuffer.State.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (lib!spec.cyclicbuffer.CyclicBuffer.State.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (lib!spec.cyclicbuffer.CyclicBuffer.State.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (lib!spec.cyclicbuffer.CyclicBuffer.State.) vstd!map.Map<nat./nat.>.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (lib!spec.cyclicbuffer.CyclicBuffer.State.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (lib!spec.cyclicbuffer.CyclicBuffer.State.) vstd!map.Map<nat./bool.>.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (lib!spec.cyclicbuffer.CyclicBuffer.State.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) lib!spec.cyclicbuffer.StoredType.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 (lib!spec.cyclicbuffer.CyclicBuffer.Step.) lib!spec.cyclicbuffer.CyclicBuffer.State.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/0 (lib!spec.cyclicbuffer.CyclicBuffer.Config.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 (lib!spec.cyclicbuffer.CyclicBuffer.Config.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 (lib!spec.cyclicbuffer.CyclicBuffer.Config.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/3 (lib!spec.cyclicbuffer.CyclicBuffer.Config.) vstd!seq.Seq<vstd!cell.CellId.>.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 (lib!spec.cyclicbuffer.CyclicBuffer.Config.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 (lib!spec.cyclicbuffer.CyclicBuffer.Config.) lib!spec.cyclicbuffer.CyclicBuffer.State.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/send_sync (lib!spec.cyclicbuffer.CyclicBuffer.Instance.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/state (lib!spec.cyclicbuffer.CyclicBuffer.Instance.) lib!spec.cyclicbuffer.CyclicBuffer.State.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/location (lib!spec.cyclicbuffer.CyclicBuffer.Instance.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.head./head/dummy_instance (lib!spec.cyclicbuffer.CyclicBuffer.head.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.head./head/no_copy (lib!spec.cyclicbuffer.CyclicBuffer.head.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/dummy_instance (lib!spec.cyclicbuffer.CyclicBuffer.tail.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/no_copy (lib!spec.cyclicbuffer.CyclicBuffer.tail.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/dummy_instance (lib!spec.cyclicbuffer.CyclicBuffer.local_versions.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/no_copy (lib!spec.cyclicbuffer.CyclicBuffer.local_versions.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/dummy_instance (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/no_copy (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.) Bool)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/dummy_instance (lib!spec.cyclicbuffer.CyclicBuffer.combiner.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/no_copy (lib!spec.cyclicbuffer.CyclicBuffer.combiner.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun lib!spec.types.LogEntry./LogEntry/op (lib!spec.types.LogEntry.) Poly)
(declare-fun lib!spec.types.LogEntry./LogEntry/node_id (lib!spec.types.LogEntry.) Int)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (lib!spec.types.ConcreteLogEntry.) Int)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (lib!spec.cyclicbuffer.StoredType.) core!option.Option.)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Starting/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/val (lib!spec.cyclicbuffer.ReaderState.) lib!spec.cyclicbuffer.StoredType.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Reading/0 (lib!spec.cyclicbuffer.CombinerState.) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/tail (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun tuple%6./tuple%6/0 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/1 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/2 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/3 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/4 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/5 (tuple%6.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!cell.CellId. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. (Dcr Type) Type)
(declare-const TYPE%vstd!state_machine_internal.NoCopy. Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.LogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.ConcreteLogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.StoredType. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.ReaderState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CombinerState. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%6. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!cell.CellId. (vstd!cell.CellId.) Poly)
(declare-fun %Poly%vstd!cell.CellId. (Poly) vstd!cell.CellId.)
(declare-fun Poly%vstd!map.Map<nat./bool.>. (vstd!map.Map<nat./bool.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./bool.>. (Poly) vstd!map.Map<nat./bool.>.)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!cell.CellId.>. (vstd!seq.Seq<vstd!cell.CellId.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!cell.CellId.>. (Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!state_machine_internal.NoCopy. (vstd!state_machine_internal.NoCopy.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.NoCopy. (Poly) vstd!state_machine_internal.NoCopy.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData.) Poly)
(declare-fun %Poly%vstd!cell.PointsToData. (Poly) vstd!cell.PointsToData.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.log_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.State.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.State.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.Step.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. (lib!spec.cyclicbuffer.CyclicBuffer.Config.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.Config.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.Instance.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.Instance.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. (lib!spec.cyclicbuffer.CyclicBuffer.head.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.head.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. (lib!spec.cyclicbuffer.CyclicBuffer.tail.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.tail.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.local_versions.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (lib!spec.cyclicbuffer.CyclicBuffer.combiner.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)
(declare-fun Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.LogEntry. (Poly) lib!spec.types.LogEntry.)
(declare-fun Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.ConcreteLogEntry. (Poly) lib!spec.types.ConcreteLogEntry.)
(declare-fun Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.StoredType. (Poly) lib!spec.cyclicbuffer.StoredType.)
(declare-fun Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.ReaderState. (Poly) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CombinerState. (Poly) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(declare-fun Poly%tuple%6. (tuple%6.) Poly)
(declare-fun %Poly%tuple%6. (Poly) tuple%6.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x vstd!cell.CellId.)) (! (= x (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. x))) :pattern ((Poly%vstd!cell.CellId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!cell.CellId.) (= x (Poly%vstd!cell.CellId. (%Poly%vstd!cell.CellId. x)))) :pattern ((has_type x TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.) :pattern ((has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (= x (%Poly%vstd!map.Map<nat./bool.>. (Poly%vstd!map.Map<nat./bool.>. x))) :pattern ((Poly%vstd!map.Map<nat./bool.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL)) (= x (Poly%vstd!map.Map<nat./bool.>. (%Poly%vstd!map.Map<nat./bool.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL)) :pattern ((has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!seq.Seq<vstd!cell.CellId.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!cell.CellId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.)) (= x (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.))))))
(assert (forall ((x vstd!seq.Seq<vstd!cell.CellId.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.)) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (= x (%Poly%vstd!state_machine_internal.NoCopy. (Poly%vstd!state_machine_internal.NoCopy. x))) :pattern ((Poly%vstd!state_machine_internal.NoCopy. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!state_machine_internal.NoCopy.) (= x (Poly%vstd!state_machine_internal.NoCopy. (%Poly%vstd!state_machine_internal.NoCopy. x)))) :pattern ((has_type x TYPE%vstd!state_machine_internal.NoCopy.)))))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.) :pattern ((has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= x (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. x))) :pattern ((Poly%vstd!cell.PointsToData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (= x (Poly%vstd!cell.PointsToData. (%Poly%vstd!cell.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_pcell! vstd!cell.CellId.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/pcell x) (vstd!cell.PointsToData./PointsToData/?pcell x)) :pattern ((vstd!cell.PointsToData./PointsToData/pcell x)))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/value x) (vstd!cell.PointsToData./PointsToData/?value x)) :pattern ((vstd!cell.PointsToData./PointsToData/value x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (has_type (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x)) (has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(define-fun is-vstd!cell.PointsToData./PointsToData_ ((c vstd!cell.PointsToData.)) Bool ((_ is vstd!cell.PointsToData./PointsToData) c))
(assert (forall ((x vstd!cell.PointsToData.)) (! (=> (is-vstd!cell.PointsToData./PointsToData_ x) (height_lt (height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x))) (height (Poly%vstd!cell.PointsToData. x)))) :pattern ((height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.types.LogEntry.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.types.LogEntry. _value!) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.log_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ x) (height_lt (height (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((height (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_unbounded_log_instance! Poly) (_cell_ids! vstd!seq.Seq<vstd!cell.CellId.>.) (_buffer_size! Int) (_num_replicas! Int) (_head! Int) (_tail! Int) (_local_versions! vstd!map.Map<nat./nat.>.) (_contents! Poly) (_alive_bits! vstd!map.Map<nat./bool.>.) (_combiner! Poly)) (! (=> (and (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _buffer_size!) (<= 0 _num_replicas!) (<= 0 _head!) (<= 0 _tail!) (has_type _contents! (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type _combiner! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.State./State _unbounded_log_instance! _cell_ids! _buffer_size! _num_replicas! _head! _tail! _local_versions! _contents! _alive_bits! _combiner!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.State./State _unbounded_log_instance! _cell_ids! _buffer_size! _num_replicas! _head! _tail! _local_versions! _contents! _alive_bits! _combiner!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?unbounded_log_instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?cell_ids x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids x)))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?buffer_size x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?num_replicas x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?head x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?tail x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?local_versions x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions x)))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?contents x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?alive_bits x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits x)))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner x) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/?combiner x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.State./State_ ((c lib!spec.cyclicbuffer.CyclicBuffer.State.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.State./State) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.State./State_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.State./State_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.State./State_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Int)) (! (=> (and (<= 0 _0!) (<= 0 _1!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish _0! _1!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish _0! _1!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/?1 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!spec.cyclicbuffer.StoredType.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. _1!) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit _0! _1!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit _0! _1!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/?1 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x))) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. _0!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 x)))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Step.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Int) (_2! Poly) (_3! vstd!seq.Seq<vstd!cell.CellId.>.) (_4! Poly)) (! (=> (and (<= 0 _0!) (<= 0 _1!) (has_type _2! (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type _4! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize _0! _1! _2! _3! _4!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize _0! _1! _2! _3! _4!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 x) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?1 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 x) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?2 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/3 x) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?3 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/3 x)))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 x) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/?4 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. _0!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 x) (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Config.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 x))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Config.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Config.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Instance.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_send_sync! Poly) (_state! lib!spec.cyclicbuffer.CyclicBuffer.State.) (_location! Int)) (! (=> (and (has_type _send_sync! (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. _state!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance _send_sync! _state! _location!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance _send_sync! _state! _location!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Instance.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/send_sync x) (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/?send_sync x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/send_sync x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/send_sync (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x)) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/send_sync (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Instance.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/state x) (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/?state x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/state x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/state (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/state (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Instance.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/location x) (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/?location x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/location x)))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Instance.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Instance.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/send_sync x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/send_sync x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.Instance.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/state x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.Instance./Instance/state x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _dummy_instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. (lib!spec.cyclicbuffer.CyclicBuffer.head./head _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. (lib!spec.cyclicbuffer.CyclicBuffer.head./head _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.head./head/dummy_instance x) (lib!spec.cyclicbuffer.CyclicBuffer.head./head/?dummy_instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head./head/dummy_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.head./head/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head./head/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.head./head/no_copy x) (lib!spec.cyclicbuffer.CyclicBuffer.head./head/?no_copy x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head./head/no_copy x)))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.head./head_ ((c lib!spec.cyclicbuffer.CyclicBuffer.head.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.head./head) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.head./head_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.head./head/dummy_instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.head./head/dummy_instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_value! Int)) (! (=> (and (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _value!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data _instance! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data _instance! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _dummy_instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/dummy_instance x) (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/?dummy_instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/dummy_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/no_copy x) (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/?no_copy x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/no_copy x)))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.tail./tail_ ((c lib!spec.cyclicbuffer.CyclicBuffer.tail.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.tail./tail) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.tail./tail_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/dummy_instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.tail./tail/dummy_instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_value! Int)) (! (=> (and (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _value!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data _instance! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data _instance! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _dummy_instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/dummy_instance x) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/?dummy_instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/dummy_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/no_copy x) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/?no_copy x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/no_copy x)))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions_ ((c lib!spec.cyclicbuffer.CyclicBuffer.local_versions.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/dummy_instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions./local_versions/dummy_instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_key! Int) (_value! Int)) (! (=> (and (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _key!) (<= 0 _value!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key x) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?key x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _dummy_instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/dummy_instance x) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/?dummy_instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/dummy_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/no_copy x) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/?no_copy x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/no_copy x)))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits_ ((c lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/dummy_instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits./alive_bits/dummy_instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_key! Int) (_value! Bool)) (! (=> (and (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _key!)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key x) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?key x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value x)))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _dummy_instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner _dummy_instance! _no_copy!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/dummy_instance x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/?dummy_instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/dummy_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/dummy_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/no_copy x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/?no_copy x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/no_copy x)))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner_ ((c lib!spec.cyclicbuffer.CyclicBuffer.combiner.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/dummy_instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.combiner./combiner/dummy_instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (_key! Int) (_value! lib!spec.cyclicbuffer.CombinerState.)) (! (=> (and (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. _instance!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. _value!) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?key x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x)))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= x (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. x))) :pattern ((Poly%lib!spec.types.LogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.LogEntry. (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _node_id!)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/op x) (lib!spec.types.LogEntry./LogEntry/?op x)) :pattern ((lib!spec.types.LogEntry./LogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (has_type (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/node_id x) (lib!spec.types.LogEntry./LogEntry/?node_id x)) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (<= 0 (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= x (%Poly%lib!spec.types.ConcreteLogEntry. (Poly%lib!spec.types.ConcreteLogEntry. x))) :pattern ((Poly%lib!spec.types.ConcreteLogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.ConcreteLogEntry. (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (uInv 64 _node_id!)) (has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (has_type (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (uInv 64 (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= x (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. x))) :pattern ((Poly%lib!spec.cyclicbuffer.StoredType. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.StoredType. (%Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cell_perms! Poly) (_log_entry! core!option.Option.)) (! (=> (and (has_type _cell_perms! (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)))) (has_type (Poly%core!option.Option. _log_entry!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x) (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.StoredType./StoredType_ ((c lib!spec.cyclicbuffer.StoredType.)) Bool ((_ is lib!spec.cyclicbuffer.StoredType./StoredType) c))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x))) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.ReaderState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.ReaderState. (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int)) (! (=> (<= 0 _start!) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Starting/start x) (lib!spec.cyclicbuffer.ReaderState./Starting/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/start x) (lib!spec.cyclicbuffer.ReaderState./Range/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/end x) (lib!spec.cyclicbuffer.ReaderState./Range/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/cur x) (lib!spec.cyclicbuffer.ReaderState./Range/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int) (_val! lib!spec.cyclicbuffer.StoredType.)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. _val!) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/start x) (lib!spec.cyclicbuffer.ReaderState./Guard/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/end x) (lib!spec.cyclicbuffer.ReaderState./Guard/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/cur x) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/val x) (lib!spec.cyclicbuffer.ReaderState./Guard/?val x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x))) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Guard_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Guard) c))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (=> (is-lib!spec.cyclicbuffer.ReaderState./Guard_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x))) (height (Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CombinerState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CombinerState. (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.cyclicbuffer.ReaderState.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. _0!) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Reading/0 x) (lib!spec.cyclicbuffer.CombinerState./Reading/?0 x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x))) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_idx! Int) (_min_local_version! Int)) (! (=> (and (<= 0 _idx!) (<= 0 _min_local_version!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_observed_head! Int)) (! (=> (<= 0 _observed_head!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cur_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _cur_idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x) (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/tail x) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Reading_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Reading) c))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (=> (is-lib!spec.cyclicbuffer.CombinerState./Reading_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x))) (height (Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(assert (forall ((x tuple%6.)) (! (= x (%Poly%tuple%6. (Poly%tuple%6. x))) :pattern ((Poly%tuple%6. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (= x (Poly%tuple%6. (%Poly%tuple%6. x)))) :pattern ((has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&)) (has_type (Poly%tuple%6. (tuple%6./tuple%6 _0! _1! _2! _3! _4! _5!)) (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) :pattern ((has_type (Poly%tuple%6. (tuple%6./tuple%6 _0! _1! _2! _3! _4! _5!)) (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/0 x) (tuple%6./tuple%6/?0 x)) :pattern ((tuple%6./tuple%6/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/0 (%Poly%tuple%6. x)) T%0&)) :pattern ((tuple%6./tuple%6/0 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/1 x) (tuple%6./tuple%6/?1 x)) :pattern ((tuple%6./tuple%6/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/1 (%Poly%tuple%6. x)) T%1&)) :pattern ((tuple%6./tuple%6/1 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/2 x) (tuple%6./tuple%6/?2 x)) :pattern ((tuple%6./tuple%6/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/2 (%Poly%tuple%6. x)) T%2&)) :pattern ((tuple%6./tuple%6/2 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/3 x) (tuple%6./tuple%6/?3 x)) :pattern ((tuple%6./tuple%6/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/3 (%Poly%tuple%6. x)) T%3&)) :pattern ((tuple%6./tuple%6/3 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/4 x) (tuple%6./tuple%6/?4 x)) :pattern ((tuple%6./tuple%6/4 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/4 (%Poly%tuple%6. x)) T%4&)) :pattern ((tuple%6./tuple%6/4 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/5 x) (tuple%6./tuple%6/?5 x)) :pattern ((tuple%6./tuple%6/5 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/5 (%Poly%tuple%6. x)) T%5&)) :pattern ((tuple%6./tuple%6/5 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(define-fun is-tuple%6./tuple%6_ ((c tuple%6.)) Bool ((_ is tuple%6./tuple%6) c))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/0 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/0 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/1 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/1 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/2 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/2 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/3 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/3 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/4 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/4 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/5 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/5 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type y (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (ext_eq deep T%0& (tuple%6./tuple%6/0 (%Poly%tuple%6. x)) (tuple%6./tuple%6/0 (%Poly%tuple%6. y))) (ext_eq deep T%1& (tuple%6./tuple%6/1 (%Poly%tuple%6. x)) (tuple%6./tuple%6/1 (%Poly%tuple%6. y))) (ext_eq deep T%2& (tuple%6./tuple%6/2 (%Poly%tuple%6. x)) (tuple%6./tuple%6/2 (%Poly%tuple%6. y))) (ext_eq deep T%3& (tuple%6./tuple%6/3 (%Poly%tuple%6. x)) (tuple%6./tuple%6/3 (%Poly%tuple%6. y))) (ext_eq deep T%4& (tuple%6./tuple%6/4 (%Poly%tuple%6. x)) (tuple%6./tuple%6/4 (%Poly%tuple%6. y))) (ext_eq deep T%5& (tuple%6./tuple%6/5 (%Poly%tuple%6. x)) (tuple%6./tuple%6/5 (%Poly%tuple%6. y)))) (ext_eq deep (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&) x y)) :pattern ((ext_eq deep (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::cell::impl&%2::view")
(declare-fun vstd!cell.impl&%2.view.? (Dcr Type Poly) vstd!cell.PointsToData.)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::remove_keys")
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::log::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.log_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_start_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_enter_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_guard_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_unguard_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_finish_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_abort_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_head_start_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_head_next_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_head_finish_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_head_abort_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_tail_start_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_tail_finish_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_tail_finish_1")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_tail_abort_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_append_flip_bit_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_append_flip_bit_1")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1.? (Dcr Type Poly) lib!spec.cyclicbuffer.StoredType.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_append_finish_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.State.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_start")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_start.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_start_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_enter")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_enter.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_enter_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_guard")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_guard.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_guard_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_unguard")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_unguard.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_unguard_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_finish")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_finish.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_finish_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_abort")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_abort.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_abort_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_head_start")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_start.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_head_start_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_head_next")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_next.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_head_next_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_head_finish")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_finish.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_head_finish_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_head_abort")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_abort.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_head_abort_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_tail_start")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_start.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_tail_start_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_tail_finish")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_finish.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_tail_finish_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_tail_finish_1")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_tail_abort")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_abort.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_tail_abort_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_append_flip_bit")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_flip_bit.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_append_flip_bit_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_append_flip_bit_1")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1.? (Dcr Type Poly) lib!spec.cyclicbuffer.StoredType.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_append_finish")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_finish.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_append_finish_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::is_dummy_to_use_type_params")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_dummy_to_use_type_params.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.State.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_1")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_2")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_4")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_3")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_3.? (Dcr Type Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_1")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_2")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_3")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_3.? (Dcr Type Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_4")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.State.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::is_initialize")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_initialize.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_1")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_2")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_3")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_3.? (Dcr Type Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_4")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::is_dummy_to_use_type_params")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_dummy_to_use_type_params.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.State.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::head::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.head_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::tail::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::local_versions::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::local_versions::map_agree")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::local_versions::map_agree_strict")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::map_agree")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::map_agree_strict")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::combiner::view")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::combiner::map_agree")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::combiner::map_agree_strict")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::unbounded_log_instance")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::cell_ids")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? (Dcr Type Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::buffer_size")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::Instance::num_replicas")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::initialize")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::initialize_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_enabled.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_start")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_start_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_start_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_enter")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_enter_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_enter_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_guard")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_guard_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_guard_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_unguard")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_unguard_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_unguard_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_finish")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_finish_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_finish_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_abort")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_abort_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_abort_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_start")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_start_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_start_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_next")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_next_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_next_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_finish")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_finish_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_finish_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_abort")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_abort_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_abort_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_finish")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_finish_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_strong.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_finish_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_enabled.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_abort")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_abort_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_abort_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::append_flip_bit")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::append_flip_bit_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_strong.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::append_flip_bit_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_enabled.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::append_finish")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::append_finish_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::append_finish_enabled")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::next_by")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_by.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::next")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::next_strong_by")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong_by.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::next_strong")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::init_by")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init_by.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::init")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::invariant")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::log_size")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::cell_ids")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::complete")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::pointer_ordering")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::pointer_differences")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::ranges_no_overlap")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::upcoming_bits_are_not_alive")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::inv_buffer_contents")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::contents_meet_inv")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::all_reader_state_valid")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::all_combiner_valid")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::reader_state_valid")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_state_valid.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CyclicBuffer::State::combiner_valid")
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.combiner_valid.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::utils::map_contains_value")
(declare-fun lib!spec.utils.map_contains_value.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::stored_type_inv")
(declare-fun lib!spec.cyclicbuffer.stored_type_inv.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::is_Starting")
(declare-fun lib!spec.cyclicbuffer.impl&%0.is_Starting.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::is_Range")
(declare-fun lib!spec.cyclicbuffer.impl&%0.is_Range.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Guard_cur")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Reading")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Reading.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Reading_0")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.ReaderState.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Appending")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Appending.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Appending_cur_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Appending_tail")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::no_overlap_with")
(declare-fun lib!spec.cyclicbuffer.impl&%4.no_overlap_with.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::min")
(declare-fun lib!spec.cyclicbuffer.min.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::map_min_value")
(declare-fun lib!spec.cyclicbuffer.map_min_value.? (Poly Poly) Int)
(declare-fun lib!spec.cyclicbuffer.rec%map_min_value.? (Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::log_entry_idx")
(declare-fun lib!spec.cyclicbuffer.log_entry_idx.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::log_entry_is_alive")
(declare-fun lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::log_entry_alive_value")
(declare-fun lib!spec.cyclicbuffer.log_entry_alive_value.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::add_buffersize")
(declare-fun lib!spec.cyclicbuffer.add_buffersize.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::constants::LOG_SIZE")
(declare-fun lib!constants.LOG_SIZE.? () Int)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::cell::impl&%2::view")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!cell.PointsTo. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& self!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((vstd!cell.impl&%2.view.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::remove_keys")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.remove_keys.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.remove_keys.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%10 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%13 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%14 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%15 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%19 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%20 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%21 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%22 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%23 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%26 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%27 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%28 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%29 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%30 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%31 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%32 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%35 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%37 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%38 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%41 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%43 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::submap_of")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$))))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!) (and (let ((local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (and (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting (%I (I local_head$)))))))))) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))) (let ((tmp_assert$2 (let ((local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting (%I (I local_head$)))))))))) tmp_assert$3)))))) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_enter")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter.))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Starting_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Starting) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))) (and (let ((start$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$2 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) start$2) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range (%I (I start$)) (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (%I (I start$)))))))))) (let ((tmp_assert$2 (and tmp_assert$1 (<= start$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))) (let ((tmp_assert$3 (let ((start$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$4 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) start$4) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$4 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range (%I (I start$)) (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (%I (I start$)))))))))) (let ((tmp_assert$5 (and tmp_assert$4 (<= start$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) tmp_assert$5))))))) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::constants::LOG_SIZE")
(assert (fuel_bool_default fuel%lib!constants.LOG_SIZE.))
(assert (=> (fuel_bool fuel%lib!constants.LOG_SIZE.) (= lib!constants.LOG_SIZE.? (uClip SZ (Mul 512 1024)))))
(assert (uInv SZ lib!constants.LOG_SIZE.?))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_idx")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_idx. (Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (= (req%lib!spec.cyclicbuffer.log_entry_idx. logical! buffer_size!) (=> %%global_location_label%%44 (= (%I buffer_size!) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_idx. logical! buffer_size!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::log_entry_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.log_entry_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.log_entry_idx.) (forall ((logical! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!) (nClip (EucMod (%I logical!) (%I buffer_size!)))) :pattern ((lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!))))))
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (=> (and (has_type logical! INT) (has_type buffer_size! NAT)) (<= 0 (lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!))) :pattern ((lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_alive_value")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_alive_value. (Poly Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (= (req%lib!spec.cyclicbuffer.log_entry_alive_value. logical! buffer_size!) (=> %%global_location_label%%45 (= (%I buffer_size!) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_alive_value. logical! buffer_size!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::log_entry_alive_value")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.log_entry_alive_value.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.log_entry_alive_value.) (forall ((logical! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.log_entry_alive_value.? logical! buffer_size!) (= (EucMod (EucDiv (%I logical!) (%I buffer_size!)) 2) 0)) :pattern ((lib!spec.cyclicbuffer.log_entry_alive_value.? logical! buffer_size!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_guard")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard.))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Range_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Range) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$2) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (=> tmp_assert$ (< cur$ end$)) (and (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (B (lib!spec.cyclicbuffer.log_entry_alive_value.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (I cur$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard (%I (I start$)) (%I (I end$)) (%I (I cur$)) (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))))))) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$4) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$3 (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (I cur$))))) (let ((tmp_assert$4 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard (%I (I start$)) (%I (I end$)) (%I (I cur$)) (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))))))) tmp_assert$4))))) tmp_assert$3)))))))) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_unguard")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true))))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$2) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (tuple%4./tuple%4 (I start$) (I end$) (I cur$) (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ NAT $ NAT $ NAT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))))))) (let ((start$ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((end$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range (%I (I start$)) (%I (I end$)) (%I (I (nClip (Add cur$ 1)))))))))))) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$4) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (tuple%4./tuple%4 (I start$) (I end$) (I cur$) (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ NAT $ NAT $ NAT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))))))) (let ((start$ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((end$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range (%I (I start$)) (%I (I end$)) (%I (I (nClip (Add cur$ 1)))))))))))) tmp_assert$3)))))))))) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_finish")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$2) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (=> tmp_assert$1 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!)) (let ((update_tmp_local_versions$1 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1)) node_id!))))) (let ((update_tmp_local_versions$2 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1) node_id! (I end$))))) (and (=> tmp_assert$2 (= cur$ end$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$2)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))))))))) (let ((tmp_assert$3 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$4) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$4 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (let ((update_tmp_local_versions$3 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((tmp_assert$5 (and tmp_assert$4 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$3)) node_id!))))) (let ((update_tmp_local_versions$4 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$3) node_id! (I end$))))) tmp_assert$5)))))))))))) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::is_Starting")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.is_Starting.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.is_Starting.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::is_Range")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.is_Range.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.is_Range.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.is_Range.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.is_Range.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_abort")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true)))) (and (let ((r$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$2 (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) r$2) (%Poly%lib!spec.cyclicbuffer.ReaderState. (vstd!pervasive.arbitrary.? $ (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (=> tmp_assert$1 (or (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. r$))) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. r$))))) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))) (let ((tmp_assert$2 (let ((r$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$4 (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) r$4) (%Poly%lib!spec.cyclicbuffer.ReaderState. (vstd!pervasive.arbitrary.? $ (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) tmp_assert$3)))))) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) (I 0)) (and (let ((local_head_0$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) (I 0))))) (and (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (%I (I 1)) (%I (I local_head_0$))))))) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))) (let ((tmp_assert$2 (let ((local_head_0$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) (I 0))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (%I (I 1)) (%I (I local_head_0$))))))) tmp_assert$3)))))) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::min")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.min.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.min.) (forall ((x! Poly) (y! Poly)) (! (= (lib!spec.cyclicbuffer.min.? x! y!) (%I (ite (< (%I x!) (%I y!)) x! y!))) :pattern ((lib!spec.cyclicbuffer.min.? x! y!))))))
(assert (forall ((x! Poly) (y! Poly)) (! (=> (and (has_type x! NAT) (has_type y! NAT)) (<= 0 (lib!spec.cyclicbuffer.min.? x! y!))) :pattern ((lib!spec.cyclicbuffer.min.? x! y!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_next")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./AdvancingHead) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$2) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I idx$) (I min_local_version$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((min_local_version$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) (I idx$))) (let ((local_head_at_idx$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) (I idx$))))) (and (=> tmp_assert$ (< idx$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((new_min$ (lib!spec.cyclicbuffer.min.? (I min_local_version$) (I local_head_at_idx$)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (%I (I (nClip (Add idx$ 1)))) (%I (I new_min$))))))) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$4) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (tuple%2./tuple%2 (I idx$) (I min_local_version$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((min_local_version$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$3 (let ((local_head_at_idx$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) (I idx$))))) (let ((tmp_assert$4 (let ((new_min$ (lib!spec.cyclicbuffer.min.? (I min_local_version$) (I local_head_at_idx$)))) (let ((tmp_assert$5 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (%I (I (nClip (Add idx$ 1)))) (%I (I new_min$))))))) tmp_assert$5))))) tmp_assert$4)))) tmp_assert$3))))))) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_finish")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$2) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I idx$) (I min_local_version$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((min_local_version$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (let ((update_tmp_head$ min_local_version$)) (and (=> tmp_assert$1 (= idx$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$4) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (tuple%2./tuple%2 (I idx$) (I min_local_version$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((min_local_version$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (let ((update_tmp_head$ min_local_version$)) tmp_assert$3))))))))) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_abort")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::log::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::stored_type_inv")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.stored_type_inv.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.stored_type_inv.) (forall ((DT&. Dcr) (DT& Type) (st! Poly) (idx! Poly) (cell_id! Poly) (unbounded_log_instance! Poly)) (! (= (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& st! idx! cell_id! unbounded_log_instance!) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))) (%Poly%vstd!cell.CellId. cell_id!))) (=> (>= (%I idx!) 0) (and (and (and (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))) (%I idx!))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))) unbounded_log_instance!)) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))))))))))) (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))) (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))))))))))) (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& st! idx! cell_id! unbounded_log_instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_finish")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish.))
(declare-fun %%lambda%%2 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) i$) (B (and (<= %%hole%%0 (%I i$)) (< (%I i$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) i$)))))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./AdvancingTail) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly) (new_tail! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish.? DT&. DT& pre! post! node_id! new_tail!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$) (let ((observed_head$ (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true)))) (and (let ((observed_head$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$) (let ((observed_head$2 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) observed_head$2) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (%I new_tail!)))))) (let ((update_tmp_tail$ (%I new_tail!))) (and (=> tmp_assert$1 (and (<= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (%I new_tail!)) (<= (%I new_tail!) (nClip (Add observed_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))) (and (let ((withdrawn$ (vstd!map.impl&%0.new.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%2 (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (Sub (%I new_tail!) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (Poly%fun%1. (mk_fun (%%lambda%%1 $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))) (let ((tmp_assert$2 (and tmp_assert$1 (vstd!map_lib.impl&%0.submap_of.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ update_tmp_contents$)))) (let ((update_tmp_contents$1 (vstd!map_lib.impl&%0.remove_keys.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$ (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$)))) (let ((tmp_assert$3 (and tmp_assert$2 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (%I i$)) (< (%I i$) (Sub (%I new_tail!) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ i$))))))) (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$1)))))) (let ((tmp_assert$4 (let ((withdrawn$ (vstd!map.impl&%0.new.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%2 (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (Sub (%I new_tail!) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (Poly%fun%1. (mk_fun (%%lambda%%1 $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))) (let ((tmp_assert$5 (and tmp_assert$1 (vstd!map_lib.impl&%0.submap_of.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ update_tmp_contents$)))) (let ((update_tmp_contents$2 (vstd!map_lib.impl&%0.remove_keys.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$ (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$)))) (let ((tmp_assert$6 (and tmp_assert$5 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (%I i$)) (< (%I i$) (Sub (%I new_tail!) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ i$))))))) tmp_assert$6)))))) (and (=> tmp_assert$4 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (=> tmp_assert$4 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))))) (let ((tmp_assert$7 (let ((observed_head$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$) (let ((observed_head$4 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) observed_head$4) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$8 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (%I new_tail!)))))) (let ((update_tmp_tail$ (%I new_tail!))) (let ((tmp_assert$9 (let ((withdrawn$ (vstd!map.impl&%0.new.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%2 (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (Sub (%I new_tail!) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (Poly%fun%1. (mk_fun (%%lambda%%1 $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))) (let ((tmp_assert$10 (and tmp_assert$8 (vstd!map_lib.impl&%0.submap_of.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ update_tmp_contents$)))) (let ((update_tmp_contents$3 (vstd!map_lib.impl&%0.remove_keys.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$ (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$)))) (let ((tmp_assert$11 (and tmp_assert$10 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (%I i$)) (< (%I i$) (Sub (%I new_tail!) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ i$))))))) tmp_assert$11)))))) tmp_assert$9)))))))) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish.? DT&. DT& pre! post! node_id! new_tail!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_abort")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::append_flip_bit")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Appending_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Appending) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly) (deposited! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit.? DT&. DT& pre! post! node_id! deposited!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$2) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I cur_idx$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((cur_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending (%I (I (nClip (Add cur_idx$ 1)))) (%I (I tail$))))))) (and (=> tmp_assert$1 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))) (and (let ((bit$ (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((update_tmp_alive_bits$1 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.remove.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$1)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))))) (let ((update_tmp_alive_bits$2 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.insert.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$1) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (B (lib!spec.cyclicbuffer.log_entry_alive_value.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (and (=> tmp_assert$2 (< cur_idx$ tail$)) (and (=> tmp_assert$2 (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& deposited! (I cur_idx$) (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((tmp_assert$3 (and tmp_assert$2 (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$) (I cur_idx$)))))) (let ((update_tmp_contents$1 (vstd!map.impl&%0.insert.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$ (I cur_idx$) deposited!))) (and (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$1)) (=> tmp_assert$3 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$2))))))))))) (let ((tmp_assert$4 (let ((bit$ (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((update_tmp_alive_bits$3 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.remove.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((tmp_assert$5 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$3)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))))) (let ((update_tmp_alive_bits$4 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.insert.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$3) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (B (lib!spec.cyclicbuffer.log_entry_alive_value.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((tmp_assert$6 (and tmp_assert$5 (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$) (I cur_idx$)))))) (let ((update_tmp_contents$2 (vstd!map.impl&%0.insert.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$ (I cur_idx$) deposited!))) tmp_assert$6)))))))) (=> tmp_assert$4 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))))) (let ((tmp_assert$7 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$4) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (tuple%2./tuple%2 (I cur_idx$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((cur_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$8 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending (%I (I (nClip (Add cur_idx$ 1)))) (%I (I tail$))))))) (let ((tmp_assert$9 (let ((bit$ (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((update_tmp_alive_bits$5 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.remove.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((tmp_assert$10 (and tmp_assert$8 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$5)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))))) (let ((update_tmp_alive_bits$6 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.insert.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$5) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (B (lib!spec.cyclicbuffer.log_entry_alive_value.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((tmp_assert$11 (and tmp_assert$10 (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$) (I cur_idx$)))))) (let ((update_tmp_contents$3 (vstd!map.impl&%0.insert.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$ (I cur_idx$) deposited!))) tmp_assert$11)))))))) tmp_assert$9))))))))) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$7 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit.? DT&. DT& pre! post! node_id! deposited!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::append_finish")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$2) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I cur_idx$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((cur_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (=> tmp_assert$1 (= cur_idx$ tail$)) (=> tmp_assert$1 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$4) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$4))))) (tuple%2./tuple%2 (I cur_idx$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((cur_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3) node_id!))))) (let ((update_tmp_combiner$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$3 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) tmp_assert$3)))))))) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$)) (and (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$)) (=> tmp_assert$2 (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::next_by")
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort) c))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish_ ((c lib!spec.cyclicbuffer.CyclicBuffer.Step.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_by.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_by.? DT&. DT& pre! post! step!) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (let ((new_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish.? DT&. DT& pre! post! (I node_id$) (I new_tail$)))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (let ((deposited$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit.? DT&. DT& pre! post! (I node_id$) (Poly%lib!spec.cyclicbuffer.StoredType. deposited$)))) (and (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish.? DT&. DT& pre! post! (I node_id$))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_by.? DT&. DT& pre! post! step!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::next")
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next.? DT&. DT& pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_by.? DT&. DT& pre! post! step$)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_by.? DT&. DT& pre! post! step$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next.? DT&. DT& pre! post!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::initialize")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize.))
(declare-fun %%lambda%%3 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0) i$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0) i$)))))
(declare-fun %%lambda%%4 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0) i$) (B (not (lib!spec.cyclicbuffer.log_entry_alive_value.? i$ %%hole%%0)))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0) i$)))))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize.) (forall ((DT&. Dcr) (DT& Type) (post! Poly) (buffer_size! Poly) (num_replicas! Poly) (contents! Poly) (cell_ids! Poly) (unbounded_log_instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize.? DT&. DT& post! buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance!) (and (> (%I num_replicas!) 0) (and (= (%I buffer_size!) lib!constants.LOG_SIZE.?) (and (= (vstd!seq.Seq.len.? $ TYPE%vstd!cell.CellId. cell_ids!) (%I buffer_size!)) (let ((update_tmp_unbounded_log_instance$ unbounded_log_instance!)) (let ((update_tmp_cell_ids$ (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. cell_ids!))) (let ((update_tmp_buffer_size$ (%I buffer_size!))) (let ((update_tmp_num_replicas$ (%I num_replicas!))) (let ((update_tmp_head$ 0)) (let ((update_tmp_tail$ 0)) (let ((update_tmp_local_versions$ (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.new.? $ NAT $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%2 0 (%I num_replicas!)))) (Poly%fun%1. (mk_fun (%%lambda%%3 (I 0)))))))) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (= (and (<= (Sub 0 (%I buffer_size!)) (%I i$)) (< (%I i$) 0)) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$)))) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents! i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. cell_ids! (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ buffer_size!))) unbounded_log_instance!))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$)))) (let ((update_tmp_contents$ contents!)) (let ((update_tmp_alive_bits$ (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.new.? $ NAT $ BOOL $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 0 (%I buffer_size!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 buffer_size!))))))) (let ((update_tmp_combiner$ (vstd!map.impl&%0.new.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%2 0 (%I num_replicas!)))) (Poly%fun%1. (mk_fun (%%lambda%%3 (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize.? DT&. DT& post! buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::init_by")
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init_by.) (forall ((DT&. Dcr) (DT& Type) (post! Poly) (step! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init_by.? DT&. DT& post! step!) (and (is-lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. step!)) (let ((buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. step!)))) (let ((num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. step!)))) (let ((contents$ (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. step!)))) (let ((cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/3 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. step!)))) (let ((unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize.? DT&. DT& post! (I buffer_size$) (I num_replicas$) contents$ (Poly%vstd!seq.Seq<vstd!cell.CellId.>. cell_ids$) unbounded_log_instance$)))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init_by.? DT&. DT& post! step!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::init")
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init.) (forall ((DT&. Dcr) (DT& Type) (post! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init.? DT&. DT& post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init_by.? DT&. DT& post! step$)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init_by.? DT&. DT& post! step$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.init.? DT&. DT& post!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::head::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::head::arbitrary")
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.arbitrary. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.head.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.cyclicbuffer.CyclicBuffer.head.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. %return!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.arbitrary. DT&. DT& %return!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::tail::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::tail::arbitrary")
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.arbitrary. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.tail.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.cyclicbuffer.CyclicBuffer.tail.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. %return!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.arbitrary. DT&. DT& %return!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::local_versions::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::local_versions::arbitrary")
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.arbitrary. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.local_versions.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.cyclicbuffer.CyclicBuffer.local_versions.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. %return!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.arbitrary. DT&. DT& %return!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::arbitrary")
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.arbitrary. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.cyclicbuffer.CyclicBuffer.alive_bits.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. %return!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.arbitrary. DT&. DT& %return!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::combiner::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::combiner::arbitrary")
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.arbitrary. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.cyclicbuffer.CyclicBuffer.combiner.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner. %return!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.arbitrary. DT&. DT& %return!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::clone")
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.Instance. lib!spec.cyclicbuffer.CyclicBuffer.Instance.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.cyclicbuffer.CyclicBuffer.Instance.) (s! lib!spec.cyclicbuffer.CyclicBuffer.Instance.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. DT&. DT& self! s!) (and (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. s!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (= self! s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. DT&. DT& self! s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::unbounded_log_instance")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::buffer_size")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Instance::num_replicas")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::log_size")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size.? DT&. DT& self!) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) lib!constants.LOG_SIZE.?)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_log_size")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_log_size. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_log_size. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_log_size. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_log_size. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_log_size. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_log_size. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::cell_ids")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids.? DT&. DT& self!) (= (vstd!seq.Seq.len.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_cell_ids")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_cell_ids. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_cell_ids. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_cell_ids. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_cell_ids. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_cell_ids. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_cell_ids. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::complete")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete.? DT&. DT& self!) (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (and (<= 0 (%I i$)) (< (%I i$) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (and (<= 0 (%I i$)) (< (%I i$) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (and (<= 0 (%I i$)) (< (%I i$) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$) (and (<= (Sub 0 (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) (%I i$)) (< (%I i$) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_complete")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_complete. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_complete. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_complete. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_complete. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_complete. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_complete. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::pointer_ordering")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering.? DT&. DT& self!) (and (and (<= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$) (let ((tmp%%$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)))) (and (<= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) tmp%%$) (<= tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$) (<= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (nClip (Add (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$)))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_pointer_ordering")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_ordering. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_ordering. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_ordering. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_ordering. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_ordering. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_ordering. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::pointer_differences")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences.? DT&. DT& self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$) (let ((tmp%%$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (and (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)) tmp%%$) (<= tmp%%$ (nClip (Add (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) i$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_pointer_differences")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_differences. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_differences. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_differences. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_differences. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_differences. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_pointer_differences. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::no_overlap_with")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%4.no_overlap_with.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%4.no_overlap_with.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (other! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%4.no_overlap_with.? DT&. DT& self! other!) (=> (is-lib!spec.cyclicbuffer.CombinerState./Appending_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!)) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!)))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. self!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!))))))) (or (> cur_idx$ cur$) (<= tail$ cur$)))))) (=> (is-lib!spec.cyclicbuffer.CombinerState./Appending_ (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)) (let ((cur_idx2$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)))) (let ((tail2$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)))) (or (>= cur_idx$ tail2$) (<= tail$ cur_idx2$)))))))))) :pattern ((lib!spec.cyclicbuffer.impl&%4.no_overlap_with.? DT&. DT& self! other!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::ranges_no_overlap")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap.? DT&. DT& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ NAT) (has_type j$ NAT)) (=> (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) j$)) (not (= i$ j$))) (lib!spec.cyclicbuffer.impl&%4.no_overlap_with.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) i$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) j$)))) :pattern ((lib!spec.cyclicbuffer.impl&%4.no_overlap_with.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) i$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) j$)))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_ranges_no_overlap")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_ranges_no_overlap. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_ranges_no_overlap. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_ranges_no_overlap. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_ranges_no_overlap. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_ranges_no_overlap. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_ranges_no_overlap. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::map_min_value")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.map_min_value.))
(declare-const fuel_nat%lib!spec.cyclicbuffer.map_min_value. Fuel)
(assert (forall ((m! Poly) (idx! Poly) (fuel% Fuel)) (! (= (lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! fuel%) (lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! zero)) :pattern ((lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! fuel%)))))
(assert (forall ((m! Poly) (idx! Poly) (fuel% Fuel)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. $ NAT $ NAT)) (has_type idx! NAT)) (= (lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! (succ fuel%)) (ite (= (%I idx!) 0) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT m! (I 0))) (lib!spec.cyclicbuffer.min.? (I (lib!spec.cyclicbuffer.rec%map_min_value.? m! (I (nClip (Sub (%I idx!) 1))) fuel%)) (vstd!map.impl&%0.index.? $ NAT $ NAT m! idx!))))) :pattern ((lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.map_min_value.) (forall ((m! Poly) (idx! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. $ NAT $ NAT)) (has_type idx! NAT)) (= (lib!spec.cyclicbuffer.map_min_value.? m! idx!) (lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! (succ fuel_nat%lib!spec.cyclicbuffer.map_min_value.)))) :pattern ((lib!spec.cyclicbuffer.map_min_value.? m! idx!))))))
(assert (forall ((m! Poly) (idx! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. $ NAT $ NAT)) (has_type idx! NAT)) (<= 0 (lib!spec.cyclicbuffer.map_min_value.? m! idx!))) :pattern ((lib!spec.cyclicbuffer.map_min_value.? m! idx!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_is_alive")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_is_alive. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((alive_bits! Poly) (logical! Poly) (buffer_size! Poly)) (! (= (req%lib!spec.cyclicbuffer.log_entry_is_alive. alive_bits! logical! buffer_size!) (=> %%global_location_label%%46 (= (%I buffer_size!) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_is_alive. alive_bits! logical! buffer_size!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::log_entry_is_alive")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.log_entry_is_alive.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.log_entry_is_alive.) (forall ((alive_bits! Poly) (logical! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.log_entry_is_alive.? alive_bits! logical! buffer_size!) (let ((phys_id$ (lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!))) (= (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL alive_bits! (I phys_id$))) (lib!spec.cyclicbuffer.log_entry_alive_value.? logical! buffer_size!)))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? alive_bits! logical! buffer_size!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::upcoming_bits_are_not_alive")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive.? DT&. DT& self!) (let ((min_local_head$ (lib!spec.cyclicbuffer.map_min_value.? (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) (I (nClip (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) 1)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (%I i$)) (< (%I i$) (nClip (Add min_local_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))))) (not (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_upcoming_bits_are_not_alive")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_upcoming_bits_are_not_alive. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_upcoming_bits_are_not_alive. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_upcoming_bits_are_not_alive. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_upcoming_bits_are_not_alive. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_upcoming_bits_are_not_alive. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_upcoming_bits_are_not_alive. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::inv_buffer_contents")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents.? DT&. DT& self!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) (%I i$)) (< (%I i$) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (= (or (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (< (%I i$) (lib!spec.cyclicbuffer.map_min_value.? (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) (I (nClip (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) 1)))))) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (<= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (%I i$)) (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_inv_buffer_contents")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_inv_buffer_contents. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_inv_buffer_contents. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_inv_buffer_contents. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_inv_buffer_contents. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_inv_buffer_contents. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_inv_buffer_contents. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::contents_meet_inv")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv.? DT&. DT& self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_contents_meet_inv")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_contents_meet_inv. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_contents_meet_inv. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_contents_meet_inv. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_contents_meet_inv. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_contents_meet_inv. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_contents_meet_inv. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Reading")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Reading.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Reading_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Reading.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_state_valid")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_state_valid.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_state_valid.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly) (rs! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_state_valid.? DT&. DT& self! node_id! rs!) (ite (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)))) (and (= start$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) node_id!))) (<= start$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))) (ite (is-lib!spec.cyclicbuffer.ReaderState./Range_ (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)))) (and (and (and (and (and (= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) node_id!)) start$) (<= start$ end$)) (and (<= (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) end$) (<= end$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))) (and (<= start$ cur$) (<= cur$ end$))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= start$ (%I i$)) (< (%I i$) cur$)) (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= start$ (%I i$)) (< (%I i$) cur$)) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$)))))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. rs!)))) (and (and (and (and (and (and (and (= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) node_id!)) start$) (<= start$ end$)) (and (<= (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) end$) (<= end$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))) (and (<= start$ cur$) (< cur$ end$))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= start$ (%I i$)) (<= (%I i$) cur$)) (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= start$ (%I i$)) (<= (%I i$) cur$)) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$))))) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) (I cur$))) (= (%Poly%lib!spec.cyclicbuffer.StoredType. (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (I cur$))) val$))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_state_valid.? DT&. DT& self! node_id! rs!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Reading_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::all_reader_state_valid")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) node_id$) (is-lib!spec.cyclicbuffer.CombinerState./Reading_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) node_id$)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_state_valid.? DT&. DT& self! node_id$ (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) node_id$))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) node_id$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) node_id$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_all_reader_state_valid")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_reader_state_valid. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_reader_state_valid. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_reader_state_valid. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_reader_state_valid. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_reader_state_valid. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_reader_state_valid. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::combiner_valid")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.combiner_valid.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Idle_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.combiner_valid.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly) (cs! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.combiner_valid.? DT&. DT& self! node_id! cs!) (=> (not (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!))) (=> (not (is-lib!spec.cyclicbuffer.CombinerState./Reading_ (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!)) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!)))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!)))) (and (<= idx$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (and (<= 0 (%I n$)) (< (%I n$) idx$)) (<= min_local_version$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) n$))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) n$))))))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!)) (let ((observed_head$ (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!)))) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (and (<= 0 (%I n$)) (< (%I n$) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (<= observed_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) n$))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) n$))))) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!)))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. cs!)))) (and (and (and (and (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) node_id!)) cur_idx$) (<= cur_idx$ tail$)) (<= tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)))) (and (<= (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) cur_idx$) (<= cur_idx$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= cur_idx$ (%I i$)) (< (%I i$) tail$)) (not (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.combiner_valid.? DT&. DT& self! node_id! cs!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::all_combiner_valid")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) node_id$) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.combiner_valid.? DT&. DT& self! node_id$ (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!)) node_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. self!))) node_id$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid.? DT&. DT& self!))))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::lemma_msg_all_combiner_valid")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_combiner_valid. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_combiner_valid. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_combiner_valid. DT&. DT& s!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_combiner_valid. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.cyclicbuffer.CyclicBuffer.State.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_combiner_valid. DT&. DT& s!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.lemma_msg_all_combiner_valid. DT&. DT& s!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_start_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_start_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_enter_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_enter_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_guard_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_guard_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_unguard_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_unguard_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_finish_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_finish_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_reader_abort_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_reader_abort_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_head_start_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_start_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_head_next_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_next_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_head_finish_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_finish_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_head_abort_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_head_abort_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_tail_start_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_start_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_tail_finish_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_tail_finish_1")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_finish_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_advance_tail_abort_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_advance_tail_abort_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_append_flip_bit_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_append_flip_bit_1")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_flip_bit_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_append_finish_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_append_finish_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_start.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_start.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_start_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_start_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_enter")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_enter.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_enter.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_enter.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_enter.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_enter_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_enter_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_guard")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_guard.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_guard.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_guard.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_guard.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_guard_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_guard_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_unguard")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_unguard.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_unguard.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_unguard.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_unguard.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_unguard_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_unguard_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_finish")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_finish.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_finish.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_finish.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_finish.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_finish_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_finish_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_reader_abort")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_abort.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_abort.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_abort.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_reader_abort.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_reader_abort_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_reader_abort_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_head_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_start.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_start.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_head_start_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_start_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_head_next")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_next.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_next.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_next.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_next.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_head_next_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_next_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_head_finish")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_finish.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_finish.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_finish.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_finish.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_head_finish_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_finish_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_head_abort")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_abort.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_abort.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_abort.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_head_abort.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_head_abort_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_head_abort_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_tail_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_start.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_start.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_tail_start_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_start_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_tail_finish")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_finish.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_finish.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_finish.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_finish.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_tail_finish_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_tail_finish_1")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_finish_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_advance_tail_abort")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_abort.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_abort.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_abort.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_advance_tail_abort.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_advance_tail_abort_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_advance_tail_abort_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_append_flip_bit")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_flip_bit.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_flip_bit.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_flip_bit.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_flip_bit.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_append_flip_bit_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_append_flip_bit_1")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_flip_bit_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_append_finish")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_finish.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_finish.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_finish.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_append_finish.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_append_finish_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_append_finish_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_dummy_to_use_type_params.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_dummy_to_use_type_params.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_dummy_to_use_type_params.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.is_dummy_to_use_type_params.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_1")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_2")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2.? DT&. DT& self!) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_2.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_4")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4.? DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_4.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_3")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_3.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_3.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_3.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/3 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_3.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_1")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_2")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2.? DT&. DT& self!) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_2.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_3")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_3.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_3.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_3.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/3 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_3.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_initialize_4")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4.? DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_initialize_4.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_initialize.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_initialize.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_initialize.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_1")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_1.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_2")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/2 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2.? DT&. DT& self!) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_2.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_3")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_3.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_3.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_3.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/3 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_3.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::get_initialize_4")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./initialize/4 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4.? DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_initialize_4.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_dummy_to_use_type_params.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_dummy_to_use_type_params.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_dummy_to_use_type_params.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.is_dummy_to_use_type_params.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Config. self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Config. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::local_versions::map_agree")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.local_versions_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map! key$))))) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::local_versions::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ NAT m!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::map_agree")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data./alive_bits_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map! key$))))) (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::alive_bits::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ BOOL m!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::combiner::map_agree")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map! key$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::combiner::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) m!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.? DT&. DT& token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_enabled.) (forall ((DT&. Dcr) (DT& Type) (buffer_size! Poly) (num_replicas! Poly) (contents! Poly) (cell_ids! Poly) (unbounded_log_instance! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_enabled.? DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance!) (and (> (%I num_replicas!) 0) (and (= (%I buffer_size!) lib!constants.LOG_SIZE.?) (and (= (vstd!seq.Seq.len.? $ TYPE%vstd!cell.CellId. cell_ids!) (%I buffer_size!)) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (= (and (<= (Sub 0 (%I buffer_size!)) (%I i$)) (< (%I i$) 0)) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents! i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. cell_ids! (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ buffer_size!))) unbounded_log_instance!))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_enabled.? DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_start_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!) (and (let ((local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting (%I (I local_head$)))))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_start_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!) (let ((local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_enter_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))) (and (let ((start$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$2 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) start$2) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range (%I (I start$)) (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (%I (I start$)))))))))) (and (<= start$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_enter_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_enabled.? DT&. DT& pre! node_id!) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_guard_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$2) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (< cur$ end$) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (B (lib!spec.cyclicbuffer.log_entry_alive_value.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (I cur$))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard (%I (I start$)) (%I (I end$)) (%I (I cur$)) (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_guard_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$2) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (and (=> tmp_assert$ (< cur$ end$)) (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (B (lib!spec.cyclicbuffer.log_entry_alive_value.? (I cur$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_unguard_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true))))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$2) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (tuple%4./tuple%4 (I start$) (I end$) (I cur$) (Poly%lib!spec.cyclicbuffer.StoredType. val$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ NAT $ NAT $ NAT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)))))))) (let ((start$ (%I (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((end$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((val$ (%Poly%lib!spec.cyclicbuffer.StoredType. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range (%I (I start$)) (%I (I end$)) (%I (I (nClip (Add cur$ 1)))))))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_unguard_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_enabled.? DT&. DT& pre! node_id!) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_finish_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$2) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!) (let ((update_tmp_local_versions$1 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1)) node_id!)) (let ((update_tmp_local_versions$2 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1) node_id! (I end$))))) (and (= cur$ end$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$2) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))))))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_finish_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$)))))))) true)))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$2) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2)))))))) (tuple%3./tuple%3 (I start$) (I end$) (I cur$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ NAT $ NAT))))))) (let ((start$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((end$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((cur$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (and (=> tmp_assert$1 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!)) (let ((update_tmp_local_versions$1 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1)) node_id!))))) (=> tmp_assert$2 (= cur$ end$)))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_abort_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true)))) (and (let ((r$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$2 (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) r$2) (%Poly%lib!spec.cyclicbuffer.ReaderState. (vstd!pervasive.arbitrary.? $ (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (or (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. r$))) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. r$)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::reader_abort_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true)))) (let ((r$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Reading_ tmp%%$) (let ((r$2 (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) r$2) (%Poly%lib!spec.cyclicbuffer.ReaderState. (vstd!pervasive.arbitrary.? $ (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (=> tmp_assert$1 (or (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. r$))) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. r$)))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_start_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) (I 0)) (and (let ((local_head_0$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) (I 0))))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (%I (I 1)) (%I (I local_head_0$))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_start_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) (I 0)) (let ((local_head_0$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) (I 0))))) (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_next_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$2) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I idx$) (I min_local_version$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((min_local_version$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) (I idx$)) (let ((local_head_at_idx$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) (I idx$))))) (and (< idx$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (let ((new_min$ (lib!spec.cyclicbuffer.min.? (I min_local_version$) (I local_head_at_idx$)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (%I (I (nClip (Add idx$ 1)))) (%I (I new_min$))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_next_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$2) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I idx$) (I min_local_version$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((min_local_version$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) (I idx$))) (let ((local_head_at_idx$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) (I idx$))))) (=> tmp_assert$ (< idx$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_finish_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$2) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I idx$) (I min_local_version$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((min_local_version$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (let ((update_tmp_head$ min_local_version$)) (and (= idx$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_finish_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$2) (let ((idx$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((min_local_version$ (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I idx$) (I min_local_version$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((min_local_version$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (=> tmp_assert$1 (= idx$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_abort_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_head_abort_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_enabled.? DT&. DT& pre! node_id!) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ tmp%%$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_enabled.? DT&. DT& pre! node_id!) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_finish_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly) (new_tail! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_strong.? DT&. DT& pre! post! node_id! new_tail!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$) (let ((observed_head$ (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true)))) (and (let ((observed_head$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$) (let ((observed_head$2 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) observed_head$2) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending (%I (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (%I new_tail!)))))) (let ((update_tmp_tail$ (%I new_tail!))) (and (and (<= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (%I new_tail!)) (<= (%I new_tail!) (nClip (Add observed_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (and (let ((withdrawn$ (vstd!map.impl&%0.new.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%2 (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (Sub (%I new_tail!) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (Poly%fun%1. (mk_fun (%%lambda%%1 $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))) (and (vstd!map_lib.impl&%0.submap_of.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ update_tmp_contents$) (let ((update_tmp_contents$1 (vstd!map_lib.impl&%0.remove_keys.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$ (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$)))) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (Sub (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (%I i$)) (< (%I i$) (Sub (%I new_tail!) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) withdrawn$ i$)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$1))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_strong.? DT&. DT& pre! post! node_id! new_tail!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_finish_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly) (new_tail! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_enabled.? DT&. DT& pre! node_id! new_tail!) (let ((tmp_assert$ true)) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$) (let ((observed_head$ (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true)))) (let ((observed_head$ (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$) (let ((observed_head$2 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) observed_head$2) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (=> tmp_assert$1 (and (<= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (%I new_tail!)) (<= (%I new_tail!) (nClip (Add observed_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_enabled.? DT&. DT& pre! node_id! new_tail!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_abort_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$))))))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_abort_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_enabled.? DT&. DT& pre! node_id!) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ tmp%%$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::append_flip_bit_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly) (deposited! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_strong.? DT&. DT& pre! post! node_id! deposited!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$2) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I cur_idx$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((cur_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending (%I (I (nClip (Add cur_idx$ 1)))) (%I (I tail$))))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (and (let ((bit$ (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((update_tmp_alive_bits$1 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.remove.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$1)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))) (let ((update_tmp_alive_bits$2 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.insert.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$1) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))) (B (lib!spec.cyclicbuffer.log_entry_alive_value.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (and (< cur_idx$ tail$) (and (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& deposited! (I cur_idx$) (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (and (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$) (I cur_idx$))) (let ((update_tmp_contents$1 (vstd!map.impl&%0.insert.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) update_tmp_contents$ (I cur_idx$) deposited!))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$1) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$2)))))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2))))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_strong.? DT&. DT& pre! post! node_id! deposited!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::append_flip_bit_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly) (deposited! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_enabled.? DT&. DT& pre! node_id! deposited!) (let ((tmp_assert$ true)) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$2) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I cur_idx$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((cur_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (and (=> tmp_assert$1 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))) (let ((bit$ (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((update_tmp_alive_bits$1 (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.remove.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. update_tmp_alive_bits$1)) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))))))) (and (=> tmp_assert$2 (< cur_idx$ tail$)) (=> tmp_assert$2 (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& deposited! (I cur_idx$) (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))) (I (lib!spec.cyclicbuffer.log_entry_idx.? (I cur_idx$) (I (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))))) (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_enabled.? DT&. DT& pre! node_id! deposited!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::append_finish_strong")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_strong.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_unbounded_log_instance$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_cell_ids$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_buffer_size$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_num_replicas$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_head$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_contents$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_alive_bits$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$2) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I cur_idx$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((cur_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!)) (let ((update_tmp_combiner$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1 node_id! (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)))) (and (= cur_idx$ tail$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_combiner$2)))))))) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_alive_bits$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_contents$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_tail$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_head$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_num_replicas$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_buffer_size$) (and (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_cell_ids$) (= (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!)) update_tmp_unbounded_log_instance$)))))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_strong.? DT&. DT& pre! post! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::append_finish_enabled")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_combiner$ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$) node_id!) (let ((tmp%%$ (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (and (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$))))) true))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.cyclicbuffer.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!)))) (ite (is-lib!spec.cyclicbuffer.CombinerState./Appending_ tmp%%$2) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (I cur_idx$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ NAT $ NAT))))))) (let ((cur_idx$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$ node_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1) node_id!))))) (=> tmp_assert$1 (= cur_idx$ tail$))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_enabled.? DT&. DT& pre! node_id!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::next_strong_by")
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong_by.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong_by.? DT&. DT& pre! post! step!) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_start_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_enter/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_enter_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_guard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_guard_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_unguard/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_unguard_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_finish_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./reader_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.reader_abort_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_start_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_next/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_next_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_finish_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_head_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_head_abort_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_start/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (let ((new_tail$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_finish/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_finish_strong.? DT&. DT& pre! post! (I node_id$) (I new_tail$)))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./advance_tail_abort/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_abort_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (let ((deposited$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_flip_bit/1 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_flip_bit_strong.? DT&. DT& pre! post! (I node_id$) (Poly%lib!spec.cyclicbuffer.StoredType. deposited$)))) (and (is-lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish_ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)) (let ((node_id$ (lib!spec.cyclicbuffer.CyclicBuffer.Step./append_finish/0 (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Step. step!)))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.append_finish_strong.? DT&. DT& pre! post! (I node_id$))))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong_by.? DT&. DT& pre! post! step!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::next_strong")
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong.? DT&. DT& pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Step. DT&. DT&)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong_by.? DT&. DT& pre! post! step$)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong_by.? DT&. DT& pre! post! step$))))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.next_strong.? DT&. DT& pre! post!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CyclicBuffer::State::invariant")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.? DT&. DT& self!) (and (and (and (and (and (and (and (and (and (and (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.log_size.? DT&. DT& self!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.cell_ids.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.complete.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_ordering.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.pointer_differences.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.ranges_no_overlap.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.upcoming_bits_are_not_alive.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.inv_buffer_contents.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.contents_meet_inv.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_reader_state_valid.? DT&. DT& self!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.all_combiner_valid.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::utils::map_contains_value")
(assert (fuel_bool_default fuel%lib!spec.utils.map_contains_value.))
(assert (=> (fuel_bool fuel%lib!spec.utils.map_contains_value.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly) (val! Poly)) (! (= (lib!spec.utils.map_contains_value.? K&. K& V&. V& map! val!) (exists ((i$ Poly)) (! (and (has_type i$ K&) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& map!) i$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& map! i$) val!))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& map!) i$))))) :pattern ((lib!spec.utils.map_contains_value.? K&. K& V&. V& map! val!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Guard_cur")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Appending")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Appending.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Appending_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Appending.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Appending_cur_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Appending_tail")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::add_buffersize")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.add_buffersize.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.add_buffersize.) (forall ((i! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.add_buffersize.? i! buffer_size!) (Add (%I i!) (%I buffer_size!))) :pattern ((lib!spec.cyclicbuffer.add_buffersize.? i! buffer_size!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Function-Specs lib::spec::utils::int_mod_less_than_same")
(declare-fun req%lib!spec.utils.int_mod_less_than_same. (Int Int) Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((i! Int) (len! Int)) (! (= (req%lib!spec.utils.int_mod_less_than_same. i! len!) (and (=> %%global_location_label%%47 (and (<= 0 i!) (< i! len!))) (=> %%global_location_label%%48 (> len! 0)))) :pattern ((req%lib!spec.utils.int_mod_less_than_same. i! len!)))))
(declare-fun ens%lib!spec.utils.int_mod_less_than_same. (Int Int) Bool)
(assert (forall ((i! Int) (len! Int)) (! (= (ens%lib!spec.utils.int_mod_less_than_same. i! len!) (= (EucMod i! len!) i!)) :pattern ((ens%lib!spec.utils.int_mod_less_than_same. i! len!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::initialize_inductive")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_inductive. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State. Int Int Poly vstd!seq.Seq<vstd!cell.CellId.>. Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (post! lib!spec.cyclicbuffer.CyclicBuffer.State.) (buffer_size! Int) (num_replicas! Int) (contents! Poly) (cell_ids! vstd!seq.Seq<vstd!cell.CellId.>.) (unbounded_log_instance! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_inductive. DT&. DT& post! buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance!) (=> %%global_location_label%%49 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!) (I buffer_size!) (I num_replicas!) contents! (Poly%vstd!seq.Seq<vstd!cell.CellId.>. cell_ids!) unbounded_log_instance!))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_inductive. DT&. DT& post! buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_inductive. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State. Int Int Poly vstd!seq.Seq<vstd!cell.CellId.>. Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (post! lib!spec.cyclicbuffer.CyclicBuffer.State.) (buffer_size! Int) (num_replicas! Int) (contents! Poly) (cell_ids! vstd!seq.Seq<vstd!cell.CellId.>.) (unbounded_log_instance! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_inductive. DT&. DT& post! buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.initialize_inductive. DT&. DT& post! buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance!)))))
(set-info :comment ";; Function-Def lib::spec::cyclicbuffer::CyclicBuffer::State::initialize_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/cyclicbuffer.rs:617:5: 617:191 (#0)")
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::Instance::initialize")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. (Dcr Type Int Int Poly vstd!seq.Seq<vstd!cell.CellId.>. Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (buffer_size! Int) (num_replicas! Int) (contents! Poly) (cell_ids! vstd!seq.Seq<vstd!cell.CellId.>.) (unbounded_log_instance! Poly) (param_token_contents! Poly)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance! param_token_contents!) (and (=> %%global_location_label%%50 (> num_replicas! 0)) (=> %%global_location_label%%51 (= buffer_size! lib!constants.LOG_SIZE.?)) (=> %%global_location_label%%52 (= (vstd!seq.Seq.len.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. cell_ids!)) buffer_size!)) (=> %%global_location_label%%53 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (= (and (<= (Sub 0 buffer_size!) (%I i$)) (< (%I i$) 0)) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))))) (=> %%global_location_label%%54 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$) (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents! i$) i$ (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. cell_ids!) (I (lib!spec.cyclicbuffer.log_entry_idx.? i$ (I buffer_size!)))) unbounded_log_instance!))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&) contents!) i$))))) (=> %%global_location_label%%55 (= param_token_contents! contents!)))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance! param_token_contents!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. (Dcr Type Int Int Poly vstd!seq.Seq<vstd!cell.CellId.>. Poly Poly tuple%6.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (buffer_size! Int) (num_replicas! Int) (contents! Poly) (cell_ids! vstd!seq.Seq<vstd!cell.CellId.>.) (unbounded_log_instance! Poly) (param_token_contents! Poly) (tmp_tuple! tuple%6.)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance! param_token_contents! tmp_tuple!) (and (has_type (Poly%tuple%6. tmp_tuple!) (TYPE%tuple%6. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)))) (let ((instance$ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (tuple%6./tuple%6/0 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!)))))) (let ((param_token_head$ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. (tuple%6./tuple%6/1 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!)))))) (let ((param_token_tail$ (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. (tuple%6./tuple%6/2 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!)))))) (let ((param_token_local_versions$ (tuple%6./tuple%6/3 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((param_token_alive_bits$ (tuple%6./tuple%6/4 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((param_token_combiner$ (tuple%6./tuple%6/5 (%Poly%tuple%6. (Poly%tuple%6. tmp_tuple!))))) (let ((instance$1 instance$)) (let ((param_token_head$1 param_token_head$)) (let ((param_token_tail$1 param_token_tail$)) (let ((param_token_local_versions$1 param_token_local_versions$)) (let ((param_token_alive_bits$1 param_token_alive_bits$)) (let ((param_token_combiner$1 param_token_combiner$)) (and (and (and (and (and (and (and (and (and (and (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. param_token_head$1))))) instance$1) (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. param_token_tail$1))))) instance$1)) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance$1)) unbounded_log_instance!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance$1)) cell_ids!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance$1)) buffer_size!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance$1)) num_replicas!)) (= (lib!spec.cyclicbuffer.CyclicBuffer.head_token_data./head_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%4.view.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.head. param_token_head$1))))) 0)) (= (lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data./tail_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%5.view.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.tail. param_token_tail$1))))) 0)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%6.map_agree_strict.? DT&. DT& param_token_local_versions$1 (vstd!map.impl&%0.new.? $ NAT $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%2 0 num_replicas!))) (Poly%fun%1. (mk_fun (%%lambda%%3 (I 0))))) (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance$1))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%7.map_agree_strict.? DT&. DT& param_token_alive_bits$1 (vstd!map.impl&%0.new.? $ NAT $ BOOL $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 0 buffer_size!))) (Poly%fun%1. (mk_fun (%%lambda%%4 (I buffer_size!))))) (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance$1))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.map_agree_strict.? DT&. DT& param_token_combiner$1 (vstd!map.impl&%0.new.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%2 0 num_replicas!))) (Poly%fun%1. (mk_fun (%%lambda%%3 (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle))))) (Poly%lib!spec.cyclicbuffer.CyclicBuffer.Instance. instance$1))))))))))))))))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.initialize. DT&. DT& buffer_size! num_replicas! contents! cell_ids! unbounded_log_instance! param_token_contents! tmp_tuple!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_safety")
(declare-fun req%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_safety. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_safety. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_add_map")
(declare-fun req%vstd!state_machine_internal.assert_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_add_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_add_map. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_add_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_add_map. b!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start_inductive")
(declare-fun req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_inductive. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State. lib!spec.cyclicbuffer.CyclicBuffer.State. Int) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.cyclicbuffer.CyclicBuffer.State.) (post! lib!spec.cyclicbuffer.CyclicBuffer.State.) (node_id! Int)) (! (= (req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%56 (and (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_strong.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!) (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!) (I node_id!))))) :pattern ((req%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_inductive. DT&. DT& pre! post! node_id!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_inductive. (Dcr Type lib!spec.cyclicbuffer.CyclicBuffer.State. lib!spec.cyclicbuffer.CyclicBuffer.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.cyclicbuffer.CyclicBuffer.State.) (post! lib!spec.cyclicbuffer.CyclicBuffer.State.) (node_id! Int)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_inductive. DT&. DT& pre! post! node_id!) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. post!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.advance_tail_start_inductive. DT&. DT& pre! post! node_id!)))))
(set-info :comment ";; Function-Def lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/cyclicbuffer.rs:638:5: 638:76 (#0)")
(set-info :comment ";; Function-Def lib::spec::cyclicbuffer::CyclicBuffer::State::advance_tail_start_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/cyclicbuffer.rs:129:1: 737:3 (#1870)")
(declare-const DT&. Dcr)
(declare-const DT& Type)
(declare-const pre! lib!spec.cyclicbuffer.CyclicBuffer.State.)
(declare-const node_id! Int)
(declare-const tmp%1 Bool)
(declare-const update_tmp_unbounded_log_instance@ Poly)
(declare-const update_tmp_cell_ids@ vstd!seq.Seq<vstd!cell.CellId.>.)
(declare-const update_tmp_buffer_size@ Int)
(declare-const update_tmp_num_replicas@ Int)
(declare-const update_tmp_head@ Int)
(declare-const update_tmp_tail@ Int)
(declare-const update_tmp_local_versions@ vstd!map.Map<nat./nat.>.)
(declare-const update_tmp_contents@ Poly)
(declare-const update_tmp_alive_bits@ vstd!map.Map<nat./bool.>.)
(declare-const update_tmp_combiner@ Poly)
(declare-const update_tmp_combiner$1@ Poly)
(declare-const update_tmp_combiner$2@ Poly)
(assert fuel_defaults)
(assert (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.State. DT&. DT&)))
(assert (<= 0 node_id!))
(assert (tr_bound%lib!Dispatch. DT&. DT&))
(set-info :comment ";; unable to prove inherent safety condition: the given key must be absent from the map before the update")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (lib!spec.cyclicbuffer.CyclicBuffer.impl&%10.invariant.? DT&. DT& (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)) (=> (= update_tmp_unbounded_log_instance@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/unbounded_log_instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_cell_ids@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/cell_ids (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_buffer_size@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/buffer_size (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_num_replicas@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/num_replicas (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_head@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/head (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_tail@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/tail (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_local_versions@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/local_versions (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_contents@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/contents (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_alive_bits@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/alive_bits (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (= update_tmp_combiner@ (lib!spec.cyclicbuffer.CyclicBuffer.State./State/combiner (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.State. pre!)))) (=> (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner@ (I node_id!) (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle)) (=> (= update_tmp_combiner$1@ (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner@ (I node_id!))) (=> (= tmp%1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&) update_tmp_combiner$1@) (I node_id!)))) (=> %%location_label%%0 (req%vstd!state_machine_internal.assert_add_map. tmp%1))))))))))))))))))
(check-sat)
(exit)
