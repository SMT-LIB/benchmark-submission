(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module spec_t::hlspec'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_op. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_pte. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_result. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_Unmap_result. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr. FuelId)
(declare-const fuel%lib!spec_t.hlspec.impl&%0.arrow_Resolve_result. FuelId)
(declare-const fuel%lib!spec_t.hlspec.init. FuelId)
(declare-const fuel%lib!spec_t.hlspec.mem_domain_from_mappings_contains. FuelId)
(declare-const fuel%lib!spec_t.hlspec.mem_domain_from_mappings. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_ReadWrite. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Map_enabled. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Map. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Unmap_enabled. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Unmap. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Resolve_enabled. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Resolve. FuelId)
(declare-const fuel%lib!spec_t.hlspec.step_Stutter. FuelId)
(declare-const fuel%lib!spec_t.hlspec.next_step. FuelId)
(declare-const fuel%lib!spec_t.hlspec.next. FuelId)
(declare-const fuel%lib!spec_t.mem.word_index_spec. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_LAYERS. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_ENTRIES. FuelId)
(declare-const fuel%lib!definitions_t.MAX_PHYADDR_SPEC. FuelId)
(declare-const fuel%lib!definitions_t.WORD_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.PAGE_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.PT_BOUND_LOW. FuelId)
(declare-const fuel%lib!definitions_t.PT_BOUND_HIGH. FuelId)
(declare-const fuel%lib!definitions_t.L3_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L2_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L1_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L0_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%lib!definitions_t.candidate_mapping_overlaps_existing_vmem. FuelId)
(declare-const fuel%lib!definitions_t.candidate_mapping_overlaps_existing_pmem. FuelId)
(declare-const fuel%lib!definitions_t.aligned. FuelId)
(declare-const fuel%lib!definitions_t.between. FuelId)
(declare-const fuel%lib!definitions_t.impl&%0.arrow_0. FuelId)
(declare-const fuel%lib!definitions_t.overlap. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.num_entries. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.upper_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.inv. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_base. FuelId)
(declare-const fuel%lib!definitions_t.x86_arch_spec. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%lib!spec_t.hlspec.impl&%0.arrow_op. fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr. fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op. fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte. fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr. fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_pte. fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_result. fuel%lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr. fuel%lib!spec_t.hlspec.impl&%0.arrow_Unmap_result. fuel%lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr. fuel%lib!spec_t.hlspec.impl&%0.arrow_Resolve_result. fuel%lib!spec_t.hlspec.init. fuel%lib!spec_t.hlspec.mem_domain_from_mappings_contains. fuel%lib!spec_t.hlspec.mem_domain_from_mappings. fuel%lib!spec_t.hlspec.step_ReadWrite. fuel%lib!spec_t.hlspec.step_Map_enabled. fuel%lib!spec_t.hlspec.step_Map. fuel%lib!spec_t.hlspec.step_Unmap_enabled. fuel%lib!spec_t.hlspec.step_Unmap. fuel%lib!spec_t.hlspec.step_Resolve_enabled. fuel%lib!spec_t.hlspec.step_Resolve. fuel%lib!spec_t.hlspec.step_Stutter. fuel%lib!spec_t.hlspec.next_step. fuel%lib!spec_t.hlspec.next. fuel%lib!spec_t.mem.word_index_spec. fuel%lib!definitions_t.X86_NUM_LAYERS. fuel%lib!definitions_t.X86_NUM_ENTRIES. fuel%lib!definitions_t.MAX_PHYADDR_SPEC. fuel%lib!definitions_t.WORD_SIZE. fuel%lib!definitions_t.PAGE_SIZE. fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. fuel%lib!definitions_t.PT_BOUND_LOW. fuel%lib!definitions_t.PT_BOUND_HIGH. fuel%lib!definitions_t.L3_ENTRY_SIZE. fuel%lib!definitions_t.L2_ENTRY_SIZE. fuel%lib!definitions_t.L1_ENTRY_SIZE. fuel%lib!definitions_t.L0_ENTRY_SIZE. fuel%lib!definitions_t.entry_base_from_index. fuel%lib!definitions_t.candidate_mapping_in_bounds. fuel%lib!definitions_t.candidate_mapping_overlaps_existing_vmem. fuel%lib!definitions_t.candidate_mapping_overlaps_existing_pmem. fuel%lib!definitions_t.aligned. fuel%lib!definitions_t.between. fuel%lib!definitions_t.impl&%0.arrow_0. fuel%lib!definitions_t.overlap. fuel%lib!definitions_t.impl&%8.entry_size. fuel%lib!definitions_t.impl&%8.num_entries. fuel%lib!definitions_t.impl&%8.upper_vaddr. fuel%lib!definitions_t.impl&%8.inv. fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. fuel%lib!definitions_t.impl&%8.entry_base. fuel%lib!definitions_t.x86_arch_spec. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayer.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!spec_t.hlspec.AbstractConstants. 0) (lib!spec_t.hlspec.AbstractVariables. 0) (lib!spec_t.hlspec.AbstractStep. 0) (lib!definitions_t.LoadResult. 0) (lib!definitions_t.StoreResult. 0) (lib!definitions_t.RWOp. 0) (lib!definitions_t.MemRegion. 0) (lib!definitions_t.Flags. 0) (lib!definitions_t.PageTableEntry. 0) (lib!definitions_t.ArchLayer. 0) (lib!definitions_t.Arch. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!spec_t.hlspec.AbstractConstants./AbstractConstants (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/?phys_mem_size Int))) ((lib!spec_t.hlspec.AbstractVariables./AbstractVariables (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/?mem vstd!map.Map<nat./nat.>.) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/?mappings vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.))) ((lib!spec_t.hlspec.AbstractStep./ReadWrite (lib!spec_t.hlspec.AbstractStep./ReadWrite/?vaddr Int) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?op lib!definitions_t.RWOp.) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?pte core!option.Option.)) (lib!spec_t.hlspec.AbstractStep./Map (lib!spec_t.hlspec.AbstractStep./Map/?vaddr Int) (lib!spec_t.hlspec.AbstractStep./Map/?pte lib!definitions_t.PageTableEntry.) (lib!spec_t.hlspec.AbstractStep./Map/?result core!result.Result.)) (lib!spec_t.hlspec.AbstractStep./Unmap (lib!spec_t.hlspec.AbstractStep./Unmap/?vaddr Int) (lib!spec_t.hlspec.AbstractStep./Unmap/?result core!result.Result.)) (lib!spec_t.hlspec.AbstractStep./Resolve (lib!spec_t.hlspec.AbstractStep./Resolve/?vaddr Int) (lib!spec_t.hlspec.AbstractStep./Resolve/?result core!result.Result.)) (lib!spec_t.hlspec.AbstractStep./Stutter )) ((lib!definitions_t.LoadResult./Pagefault ) (lib!definitions_t.LoadResult./Value (lib!definitions_t.LoadResult./Value/?0 Int))) ((lib!definitions_t.StoreResult./Pagefault ) (lib!definitions_t.StoreResult./Ok )) ((lib!definitions_t.RWOp./Store (lib!definitions_t.RWOp./Store/?new_value Int) (lib!definitions_t.RWOp./Store/?result lib!definitions_t.StoreResult.)) (lib!definitions_t.RWOp./Load (lib!definitions_t.RWOp./Load/?is_exec Bool) (lib!definitions_t.RWOp./Load/?result lib!definitions_t.LoadResult.))) ((lib!definitions_t.MemRegion./MemRegion (lib!definitions_t.MemRegion./MemRegion/?base Int) (lib!definitions_t.MemRegion./MemRegion/?size Int))) ((lib!definitions_t.Flags./Flags (lib!definitions_t.Flags./Flags/?is_writable Bool) (lib!definitions_t.Flags./Flags/?is_supervisor Bool) (lib!definitions_t.Flags./Flags/?disable_execute Bool))) ((lib!definitions_t.PageTableEntry./PageTableEntry (lib!definitions_t.PageTableEntry./PageTableEntry/?frame lib!definitions_t.MemRegion.) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags lib!definitions_t.Flags.))) ((lib!definitions_t.ArchLayer./ArchLayer (lib!definitions_t.ArchLayer./ArchLayer/?entry_size Int) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries Int))) ((lib!definitions_t.Arch./Arch (lib!definitions_t.Arch./Arch/?layers vstd!seq.Seq<lib!definitions_t.ArchLayer.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (lib!spec_t.hlspec.AbstractConstants.) Int)
(declare-fun lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (lib!spec_t.hlspec.AbstractVariables.) vstd!map.Map<nat./nat.>.)
(declare-fun lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (lib!spec_t.hlspec.AbstractVariables.) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (lib!spec_t.hlspec.AbstractStep.) Int)
(declare-fun lib!spec_t.hlspec.AbstractStep./ReadWrite/op (lib!spec_t.hlspec.AbstractStep.) lib!definitions_t.RWOp.)
(declare-fun lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (lib!spec_t.hlspec.AbstractStep.) core!option.Option.)
(declare-fun lib!spec_t.hlspec.AbstractStep./Map/vaddr (lib!spec_t.hlspec.AbstractStep.) Int)
(declare-fun lib!spec_t.hlspec.AbstractStep./Map/pte (lib!spec_t.hlspec.AbstractStep.) lib!definitions_t.PageTableEntry.)
(declare-fun lib!spec_t.hlspec.AbstractStep./Map/result (lib!spec_t.hlspec.AbstractStep.) core!result.Result.)
(declare-fun lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (lib!spec_t.hlspec.AbstractStep.) Int)
(declare-fun lib!spec_t.hlspec.AbstractStep./Unmap/result (lib!spec_t.hlspec.AbstractStep.) core!result.Result.)
(declare-fun lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (lib!spec_t.hlspec.AbstractStep.) Int)
(declare-fun lib!spec_t.hlspec.AbstractStep./Resolve/result (lib!spec_t.hlspec.AbstractStep.) core!result.Result.)
(declare-fun lib!definitions_t.LoadResult./Value/0 (lib!definitions_t.LoadResult.) Int)
(declare-fun lib!definitions_t.RWOp./Store/new_value (lib!definitions_t.RWOp.) Int)
(declare-fun lib!definitions_t.RWOp./Store/result (lib!definitions_t.RWOp.) lib!definitions_t.StoreResult.)
(declare-fun lib!definitions_t.RWOp./Load/is_exec (lib!definitions_t.RWOp.) Bool)
(declare-fun lib!definitions_t.RWOp./Load/result (lib!definitions_t.RWOp.) lib!definitions_t.LoadResult.)
(declare-fun lib!definitions_t.MemRegion./MemRegion/base (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/size (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.Flags./Flags/is_writable (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/is_supervisor (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/disable_execute (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/frame (lib!definitions_t.PageTableEntry.) lib!definitions_t.MemRegion.)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/flags (lib!definitions_t.PageTableEntry.) lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/entry_size (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/num_entries (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.Arch./Arch/layers (lib!definitions_t.Arch.) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!spec_t.hlspec.AbstractConstants. Type)
(declare-const TYPE%lib!spec_t.hlspec.AbstractVariables. Type)
(declare-const TYPE%lib!spec_t.hlspec.AbstractStep. Type)
(declare-const TYPE%lib!definitions_t.LoadResult. Type)
(declare-const TYPE%lib!definitions_t.StoreResult. Type)
(declare-const TYPE%lib!definitions_t.RWOp. Type)
(declare-const TYPE%lib!definitions_t.MemRegion. Type)
(declare-const TYPE%lib!definitions_t.Flags. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntry. Type)
(declare-const TYPE%lib!definitions_t.ArchLayer. Type)
(declare-const TYPE%lib!definitions_t.Arch. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!seq.Seq<lib!definitions_t.ArchLayer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!spec_t.hlspec.AbstractConstants. (lib!spec_t.hlspec.AbstractConstants.) Poly)
(declare-fun %Poly%lib!spec_t.hlspec.AbstractConstants. (Poly) lib!spec_t.hlspec.AbstractConstants.)
(declare-fun Poly%lib!spec_t.hlspec.AbstractVariables. (lib!spec_t.hlspec.AbstractVariables.) Poly)
(declare-fun %Poly%lib!spec_t.hlspec.AbstractVariables. (Poly) lib!spec_t.hlspec.AbstractVariables.)
(declare-fun Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep.) Poly)
(declare-fun %Poly%lib!spec_t.hlspec.AbstractStep. (Poly) lib!spec_t.hlspec.AbstractStep.)
(declare-fun Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult.) Poly)
(declare-fun %Poly%lib!definitions_t.LoadResult. (Poly) lib!definitions_t.LoadResult.)
(declare-fun Poly%lib!definitions_t.StoreResult. (lib!definitions_t.StoreResult.) Poly)
(declare-fun %Poly%lib!definitions_t.StoreResult. (Poly) lib!definitions_t.StoreResult.)
(declare-fun Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp.) Poly)
(declare-fun %Poly%lib!definitions_t.RWOp. (Poly) lib!definitions_t.RWOp.)
(declare-fun Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegion. (Poly) lib!definitions_t.MemRegion.)
(declare-fun Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags.) Poly)
(declare-fun %Poly%lib!definitions_t.Flags. (Poly) lib!definitions_t.Flags.)
(declare-fun Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntry. (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayer. (Poly) lib!definitions_t.ArchLayer.)
(declare-fun Poly%lib!definitions_t.Arch. (lib!definitions_t.Arch.) Poly)
(declare-fun %Poly%lib!definitions_t.Arch. (Poly) lib!definitions_t.Arch.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (= x (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractConstants.)) (! (= x (%Poly%lib!spec_t.hlspec.AbstractConstants. (Poly%lib!spec_t.hlspec.AbstractConstants. x))) :pattern ((Poly%lib!spec_t.hlspec.AbstractConstants. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractConstants.) (= x (Poly%lib!spec_t.hlspec.AbstractConstants. (%Poly%lib!spec_t.hlspec.AbstractConstants. x)))) :pattern ((has_type x TYPE%lib!spec_t.hlspec.AbstractConstants.)))))
(assert (forall ((_phys_mem_size! Int)) (! (=> (<= 0 _phys_mem_size!) (has_type (Poly%lib!spec_t.hlspec.AbstractConstants. (lib!spec_t.hlspec.AbstractConstants./AbstractConstants _phys_mem_size!)) TYPE%lib!spec_t.hlspec.AbstractConstants.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractConstants. (lib!spec_t.hlspec.AbstractConstants./AbstractConstants _phys_mem_size!)) TYPE%lib!spec_t.hlspec.AbstractConstants.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractConstants.)) (! (= (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size x) (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/?phys_mem_size x)) :pattern ((lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractConstants.) (<= 0 (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. x)))) :pattern ((lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractConstants.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractVariables.)) (! (= x (%Poly%lib!spec_t.hlspec.AbstractVariables. (Poly%lib!spec_t.hlspec.AbstractVariables. x))) :pattern ((Poly%lib!spec_t.hlspec.AbstractVariables. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractVariables.) (= x (Poly%lib!spec_t.hlspec.AbstractVariables. (%Poly%lib!spec_t.hlspec.AbstractVariables. x)))) :pattern ((has_type x TYPE%lib!spec_t.hlspec.AbstractVariables.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractVariables.)) (! (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem x) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/?mem x)) :pattern ((lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem x)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractVariables.)) (! (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings x) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/?mappings x)) :pattern ((lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings x)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractVariables.)) (! (has_type (Poly%lib!spec_t.hlspec.AbstractVariables. x) TYPE%lib!spec_t.hlspec.AbstractVariables.) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractVariables. x) TYPE%lib!spec_t.hlspec.AbstractVariables.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= x (%Poly%lib!spec_t.hlspec.AbstractStep. (Poly%lib!spec_t.hlspec.AbstractStep. x))) :pattern ((Poly%lib!spec_t.hlspec.AbstractStep. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (= x (Poly%lib!spec_t.hlspec.AbstractStep. (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((_vaddr! Int) (_op! lib!definitions_t.RWOp.) (_pte! core!option.Option.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%lib!definitions_t.RWOp. _op!) TYPE%lib!definitions_t.RWOp.) (has_type (Poly%core!option.Option. _pte!) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./ReadWrite _vaddr! _op! _pte!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./ReadWrite _vaddr! _op! _pte!)) TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr x) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?vaddr x)) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./ReadWrite/op x) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?op x)) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/op x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%lib!definitions_t.RWOp. (lib!spec_t.hlspec.AbstractStep./ReadWrite/op (%Poly%lib!spec_t.hlspec.AbstractStep. x))) TYPE%lib!definitions_t.RWOp.)) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/op (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./ReadWrite/pte x) (lib!spec_t.hlspec.AbstractStep./ReadWrite/?pte x)) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!option.Option. (lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (%Poly%lib!spec_t.hlspec.AbstractStep. x))) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) :pattern ((lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((_vaddr! Int) (_pte! lib!definitions_t.PageTableEntry.) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%lib!definitions_t.PageTableEntry. _pte!) TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Map _vaddr! _pte! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Map _vaddr! _pte! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Map/vaddr x) (lib!spec_t.hlspec.AbstractStep./Map/?vaddr x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.AbstractStep./Map/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Map/pte x) (lib!spec_t.hlspec.AbstractStep./Map/?pte x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/pte x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!spec_t.hlspec.AbstractStep./Map/pte (%Poly%lib!spec_t.hlspec.AbstractStep. x))) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/pte (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Map/result x) (lib!spec_t.hlspec.AbstractStep./Map/?result x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.AbstractStep./Map/result (%Poly%lib!spec_t.hlspec.AbstractStep. x))) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.AbstractStep./Map/result (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((_vaddr! Int) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Unmap _vaddr! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Unmap _vaddr! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Unmap/vaddr x) (lib!spec_t.hlspec.AbstractStep./Unmap/?vaddr x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Unmap/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Unmap/result x) (lib!spec_t.hlspec.AbstractStep./Unmap/?result x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Unmap/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.AbstractStep./Unmap/result (%Poly%lib!spec_t.hlspec.AbstractStep. x))) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.AbstractStep./Unmap/result (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((_vaddr! Int) (_result! core!result.Result.)) (! (=> (and (<= 0 _vaddr!) (has_type (Poly%core!result.Result. _result!) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) (has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Resolve _vaddr! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)) :pattern ((has_type (Poly%lib!spec_t.hlspec.AbstractStep. (lib!spec_t.hlspec.AbstractStep./Resolve _vaddr! _result!)) TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Resolve/vaddr x) (lib!spec_t.hlspec.AbstractStep./Resolve/?vaddr x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Resolve/vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)))) :pattern ((lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (forall ((x lib!spec_t.hlspec.AbstractStep.)) (! (= (lib!spec_t.hlspec.AbstractStep./Resolve/result x) (lib!spec_t.hlspec.AbstractStep./Resolve/?result x)) :pattern ((lib!spec_t.hlspec.AbstractStep./Resolve/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.AbstractStep./Resolve/result (%Poly%lib!spec_t.hlspec.AbstractStep. x))) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.AbstractStep./Resolve/result (%Poly%lib!spec_t.hlspec.AbstractStep. x)) (has_type x TYPE%lib!spec_t.hlspec.AbstractStep.)))))
(assert (has_type (Poly%lib!spec_t.hlspec.AbstractStep. lib!spec_t.hlspec.AbstractStep./Stutter) TYPE%lib!spec_t.hlspec.AbstractStep.))
(assert (forall ((x lib!definitions_t.LoadResult.)) (! (= x (%Poly%lib!definitions_t.LoadResult. (Poly%lib!definitions_t.LoadResult. x))) :pattern ((Poly%lib!definitions_t.LoadResult. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.LoadResult.) (= x (Poly%lib!definitions_t.LoadResult. (%Poly%lib!definitions_t.LoadResult. x)))) :pattern ((has_type x TYPE%lib!definitions_t.LoadResult.)))))
(assert (has_type (Poly%lib!definitions_t.LoadResult. lib!definitions_t.LoadResult./Pagefault) TYPE%lib!definitions_t.LoadResult.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult./Value _0!)) TYPE%lib!definitions_t.LoadResult.)) :pattern ((has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.LoadResult./Value _0!)) TYPE%lib!definitions_t.LoadResult.)))))
(assert (forall ((x lib!definitions_t.LoadResult.)) (! (= (lib!definitions_t.LoadResult./Value/0 x) (lib!definitions_t.LoadResult./Value/?0 x)) :pattern ((lib!definitions_t.LoadResult./Value/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.LoadResult.) (<= 0 (lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. x)))) :pattern ((lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. x)) (has_type x TYPE%lib!definitions_t.LoadResult.)))))
(assert (forall ((x lib!definitions_t.StoreResult.)) (! (= x (%Poly%lib!definitions_t.StoreResult. (Poly%lib!definitions_t.StoreResult. x))) :pattern ((Poly%lib!definitions_t.StoreResult. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.StoreResult.) (= x (Poly%lib!definitions_t.StoreResult. (%Poly%lib!definitions_t.StoreResult. x)))) :pattern ((has_type x TYPE%lib!definitions_t.StoreResult.)))))
(assert (forall ((x lib!definitions_t.StoreResult.)) (! (has_type (Poly%lib!definitions_t.StoreResult. x) TYPE%lib!definitions_t.StoreResult.) :pattern ((has_type (Poly%lib!definitions_t.StoreResult. x) TYPE%lib!definitions_t.StoreResult.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= x (%Poly%lib!definitions_t.RWOp. (Poly%lib!definitions_t.RWOp. x))) :pattern ((Poly%lib!definitions_t.RWOp. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (= x (Poly%lib!definitions_t.RWOp. (%Poly%lib!definitions_t.RWOp. x)))) :pattern ((has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((_new_value! Int) (_result! lib!definitions_t.StoreResult.)) (! (=> (<= 0 _new_value!) (has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Store _new_value! _result!)) TYPE%lib!definitions_t.RWOp.)) :pattern ((has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Store _new_value! _result!)) TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Store/new_value x) (lib!definitions_t.RWOp./Store/?new_value x)) :pattern ((lib!definitions_t.RWOp./Store/new_value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (<= 0 (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. x)))) :pattern ((lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. x)) (has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Store/result x) (lib!definitions_t.RWOp./Store/?result x)) :pattern ((lib!definitions_t.RWOp./Store/result x)))))
(assert (forall ((_is_exec! Bool) (_result! lib!definitions_t.LoadResult.)) (! (=> (has_type (Poly%lib!definitions_t.LoadResult. _result!) TYPE%lib!definitions_t.LoadResult.) (has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Load _is_exec! _result!)) TYPE%lib!definitions_t.RWOp.)) :pattern ((has_type (Poly%lib!definitions_t.RWOp. (lib!definitions_t.RWOp./Load _is_exec! _result!)) TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Load/is_exec x) (lib!definitions_t.RWOp./Load/?is_exec x)) :pattern ((lib!definitions_t.RWOp./Load/is_exec x)))))
(assert (forall ((x lib!definitions_t.RWOp.)) (! (= (lib!definitions_t.RWOp./Load/result x) (lib!definitions_t.RWOp./Load/?result x)) :pattern ((lib!definitions_t.RWOp./Load/result x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.RWOp.) (has_type (Poly%lib!definitions_t.LoadResult. (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. x))) TYPE%lib!definitions_t.LoadResult.)) :pattern ((lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. x)) (has_type x TYPE%lib!definitions_t.RWOp.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= x (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. x))) :pattern ((Poly%lib!definitions_t.MemRegion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (= x (Poly%lib!definitions_t.MemRegion. (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (<= 0 _base!) (<= 0 _size!)) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/base x) (lib!definitions_t.MemRegion./MemRegion/?base x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/size x) (lib!definitions_t.MemRegion./MemRegion/?size x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= x (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. x))) :pattern ((Poly%lib!definitions_t.Flags. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Flags.) (= x (Poly%lib!definitions_t.Flags. (%Poly%lib!definitions_t.Flags. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_writable x) (lib!definitions_t.Flags./Flags/?is_writable x)) :pattern ((lib!definitions_t.Flags./Flags/is_writable x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_supervisor x) (lib!definitions_t.Flags./Flags/?is_supervisor x)) :pattern ((lib!definitions_t.Flags./Flags/is_supervisor x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/disable_execute x) (lib!definitions_t.Flags./Flags/?disable_execute x)) :pattern ((lib!definitions_t.Flags./Flags/disable_execute x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.) :pattern ((has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= x (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. x))) :pattern ((Poly%lib!definitions_t.PageTableEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (= x (Poly%lib!definitions_t.PageTableEntry. (%Poly%lib!definitions_t.PageTableEntry. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegion.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _frame!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/frame x) (lib!definitions_t.PageTableEntry./PageTableEntry/?frame x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x)) (has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/flags x) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/flags x)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= x (%Poly%lib!definitions_t.ArchLayer. (Poly%lib!definitions_t.ArchLayer. x))) :pattern ((Poly%lib!definitions_t.ArchLayer. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (= x (Poly%lib!definitions_t.ArchLayer. (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (<= 0 _entry_size!) (<= 0 _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/entry_size x) (lib!definitions_t.ArchLayer./ArchLayer/?entry_size x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/num_entries x) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= x (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. x))) :pattern ((Poly%lib!definitions_t.Arch. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Arch.) (= x (Poly%lib!definitions_t.Arch. (%Poly%lib!definitions_t.Arch. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= (lib!definitions_t.Arch./Arch/layers x) (lib!definitions_t.Arch./Arch/?layers x)) :pattern ((lib!definitions_t.Arch./Arch/layers x)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.) :pattern ((has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::definitions_t::overlap")
(declare-fun lib!definitions_t.overlap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::aligned")
(declare-fun lib!definitions_t.aligned.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::PAGE_SIZE")
(declare-fun lib!definitions_t.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_WIDTH")
(declare-fun lib!definitions_t.MAX_PHYADDR_WIDTH.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_SPEC")
(declare-fun lib!definitions_t.MAX_PHYADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_LAYERS")
(declare-fun lib!definitions_t.X86_NUM_LAYERS.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_size")
(declare-fun lib!definitions_t.impl&%8.entry_size.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::num_entries")
(declare-fun lib!definitions_t.impl&%8.num_entries.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_MAX_ENTRY_SIZE")
(declare-fun lib!definitions_t.X86_MAX_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_ENTRIES")
(declare-fun lib!definitions_t.X86_NUM_ENTRIES.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::inv")
(declare-fun lib!definitions_t.impl&%8.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::entry_base_from_index")
(declare-fun lib!definitions_t.entry_base_from_index.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_base")
(declare-fun lib!definitions_t.impl&%8.entry_base.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::upper_vaddr")
(declare-fun lib!definitions_t.impl&%8.upper_vaddr.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L3_ENTRY_SIZE")
(declare-fun lib!definitions_t.L3_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L2_ENTRY_SIZE")
(declare-fun lib!definitions_t.L2_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L1_ENTRY_SIZE")
(declare-fun lib!definitions_t.L1_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L0_ENTRY_SIZE")
(declare-fun lib!definitions_t.L0_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::x86_arch_spec")
(declare-fun lib!definitions_t.x86_arch_spec.? () lib!definitions_t.Arch.)
(set-info :comment ";; Function-Decl lib::definitions_t::candidate_mapping_in_bounds")
(declare-fun lib!definitions_t.candidate_mapping_in_bounds.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::candidate_mapping_overlaps_existing_pmem")
(declare-fun lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::candidate_mapping_overlaps_existing_vmem")
(declare-fun lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::between")
(declare-fun lib!definitions_t.between.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::PT_BOUND_LOW")
(declare-fun lib!definitions_t.PT_BOUND_LOW.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::PT_BOUND_HIGH")
(declare-fun lib!definitions_t.PT_BOUND_HIGH.? () Int)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::WORD_SIZE")
(declare-fun lib!definitions_t.WORD_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_op")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_op.? (Poly) lib!definitions_t.RWOp.)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_ReadWrite_vaddr")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_ReadWrite_op")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op.? (Poly) lib!definitions_t.RWOp.)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_ReadWrite_pte")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_Map_vaddr")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_Map_pte")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_Map_pte.? (Poly) lib!definitions_t.PageTableEntry.)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_Map_result")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_Map_result.? (Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_Unmap_vaddr")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_Unmap_result")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_Unmap_result.? (Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_Resolve_vaddr")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::AbstractStep::arrow_Resolve_result")
(declare-fun lib!spec_t.hlspec.impl&%0.arrow_Resolve_result.? (Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::init")
(declare-fun lib!spec_t.hlspec.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::mem::word_index_spec")
(declare-fun lib!spec_t.mem.word_index_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::mem_domain_from_mappings_contains")
(declare-fun lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::mem_domain_from_mappings")
(declare-fun lib!spec_t.hlspec.mem_domain_from_mappings.? (Poly Poly) vstd!set.Set<nat.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::LoadResult::arrow_0")
(declare-fun lib!definitions_t.impl&%0.arrow_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_ReadWrite")
(declare-fun lib!spec_t.hlspec.step_ReadWrite.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Map_enabled")
(declare-fun lib!spec_t.hlspec.step_Map_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Map")
(declare-fun lib!spec_t.hlspec.step_Map.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Unmap_enabled")
(declare-fun lib!spec_t.hlspec.step_Unmap_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Unmap")
(declare-fun lib!spec_t.hlspec.step_Unmap.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Resolve_enabled")
(declare-fun lib!spec_t.hlspec.step_Resolve_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Resolve")
(declare-fun lib!spec_t.hlspec.step_Resolve.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::step_Stutter")
(declare-fun lib!spec_t.hlspec.step_Stutter.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::next_step")
(declare-fun lib!spec_t.hlspec.next_step.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hlspec::next")
(declare-fun lib!spec_t.hlspec.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::overlap")
(assert (fuel_bool_default fuel%lib!definitions_t.overlap.))
(assert (=> (fuel_bool fuel%lib!definitions_t.overlap.) (forall ((region1! Poly) (region2! Poly)) (! (= (lib!definitions_t.overlap.? region1! region2!) (ite (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region1!))))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region2!))))))) :pattern ((lib!definitions_t.overlap.? region1! region2!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::aligned")
(assert (fuel_bool_default fuel%lib!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%lib!definitions_t.aligned.) (forall ((addr! Poly) (size! Poly)) (! (= (lib!definitions_t.aligned.? addr! size!) (= (nClip (EucMod (%I addr!) (%I size!))) 0)) :pattern ((lib!definitions_t.aligned.? addr! size!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PAGE_SIZE.) (= lib!definitions_t.PAGE_SIZE.? 4096)))
(assert (uInv SZ lib!definitions_t.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_WIDTH")
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_WIDTH.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_SPEC")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_PHYADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_PHYADDR_SPEC.) (= lib!definitions_t.MAX_PHYADDR_SPEC.? (uClip 64 (Sub (uClip 64 (bitshl (I 1) (I lib!definitions_t.MAX_PHYADDR_WIDTH.?))) 1)))))
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_LAYERS")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_LAYERS.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_LAYERS.) (= lib!definitions_t.X86_NUM_LAYERS.? 4)))
(assert (uInv SZ lib!definitions_t.X86_NUM_LAYERS.?))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_size")
(declare-fun req%lib!definitions_t.impl&%8.entry_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size. self! layer!) (=> %%global_location_label%%5 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size. self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_size.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::num_entries")
(declare-fun req%lib!definitions_t.impl&%8.num_entries. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.num_entries. self! layer!) (=> %%global_location_label%%6 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.num_entries. self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::num_entries")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.num_entries.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.num_entries.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.num_entries.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.num_entries.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_MAX_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.) (= lib!definitions_t.X86_MAX_ENTRY_SIZE.? (nClip (Mul (nClip (Mul (nClip (Mul 512 512)) 512)) 4096)))))
(assert (<= 0 lib!definitions_t.X86_MAX_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_ENTRIES")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_ENTRIES.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_ENTRIES.) (= lib!definitions_t.X86_NUM_ENTRIES.? 512)))
(assert (uInv SZ lib!definitions_t.X86_NUM_ENTRIES.?))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!) (=> %%global_location_label%%7 (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_size_is_next_layer_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.) (forall ((self! Poly) (i! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!) (=> (< (nClip (Add (%I i!) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i!) (nClip (Mul (lib!definitions_t.impl&%8.entry_size.? self! (I (nClip (Add (%I i!) 1)))) (lib!definitions_t.impl&%8.num_entries.? self! (I (nClip (Add (%I i!) 1))))))))) :pattern ((lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::inv")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.inv.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.inv.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%8.inv.? self!) (and (<= (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))) lib!definitions_t.X86_NUM_LAYERS.?) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (and (and (let ((tmp%%$ (lib!definitions_t.impl&%8.entry_size.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_MAX_ENTRY_SIZE.?))) (let ((tmp%%$ (lib!definitions_t.impl&%8.num_entries.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_NUM_ENTRIES.?)))) (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i$)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$)) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! i$)))))) :pattern ((lib!definitions_t.impl&%8.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::entry_base_from_index")
(assert (fuel_bool_default fuel%lib!definitions_t.entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (%I idx!) (%I entry_size!)))))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_base")
(declare-fun req%lib!definitions_t.impl&%8.entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%8 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%9 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_base")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!) (lib!definitions_t.entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::upper_vaddr")
(declare-fun req%lib!definitions_t.impl&%8.upper_vaddr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!) (and (=> %%global_location_label%%10 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%11 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::upper_vaddr")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.upper_vaddr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.upper_vaddr.) (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!) (lib!definitions_t.entry_base_from_index.? base! (I (lib!definitions_t.impl&%8.num_entries.? self! layer!)) (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT)) (<= 0 (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::L3_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L3_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L3_ENTRY_SIZE.) (= lib!definitions_t.L3_ENTRY_SIZE.? lib!definitions_t.PAGE_SIZE.?)))
(assert (uInv SZ lib!definitions_t.L3_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L2_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L2_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L2_ENTRY_SIZE.) (= lib!definitions_t.L2_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L3_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L2_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L1_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L1_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L1_ENTRY_SIZE.) (= lib!definitions_t.L1_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L2_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L1_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L0_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L0_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L0_ENTRY_SIZE.) (= lib!definitions_t.L0_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L1_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L0_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::x86_arch_spec")
(assert (fuel_bool_default fuel%lib!definitions_t.x86_arch_spec.))
(declare-fun %%array%%0 (Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3))) (and (= (%%apply%%1 %%x%% 0) %%hole%%0) (= (%%apply%%1 %%x%% 1) %%hole%%1) (= (%%apply%%1 %%x%% 2) %%hole%%2) (= (%%apply%%1 %%x%% 3) %%hole%%3))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3)))))
(assert (=> (fuel_bool fuel%lib!definitions_t.x86_arch_spec.) (= lib!definitions_t.x86_arch_spec.? (lib!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!definitions_t.ArchLayer. $ (CONST_INT 4)) (array_new $ TYPE%lib!definitions_t.ArchLayer. 4 (%%array%%0 (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L0_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L1_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L2_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L3_ENTRY_SIZE.?)) (%I (I 512))))))))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::candidate_mapping_in_bounds")
(assert (fuel_bool_default fuel%lib!definitions_t.candidate_mapping_in_bounds.))
(assert (=> (fuel_bool fuel%lib!definitions_t.candidate_mapping_in_bounds.) (forall ((base! Poly) (pte! Poly)) (! (= (lib!definitions_t.candidate_mapping_in_bounds.? base! pte!) (< (nClip (Add (%I base!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.impl&%8.upper_vaddr.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I 0) (I 0)))) :pattern ((lib!definitions_t.candidate_mapping_in_bounds.? base! pte!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::candidate_mapping_overlaps_existing_pmem")
(assert (fuel_bool_default fuel%lib!definitions_t.candidate_mapping_overlaps_existing_pmem.))
(assert (=> (fuel_bool fuel%lib!definitions_t.candidate_mapping_overlaps_existing_pmem.) (forall ((mappings! Poly) (base! Poly) (pte! Poly)) (! (= (lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? mappings! base! pte!) (exists ((b$ Poly)) (! (and (has_type b$ NAT) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings!) b$) (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings! b$))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings!) b$))))) :pattern ((lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? mappings! base! pte!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::candidate_mapping_overlaps_existing_vmem")
(assert (fuel_bool_default fuel%lib!definitions_t.candidate_mapping_overlaps_existing_vmem.))
(assert (=> (fuel_bool fuel%lib!definitions_t.candidate_mapping_overlaps_existing_vmem.) (forall ((mappings! Poly) (base! Poly) (pte! Poly)) (! (= (lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? mappings! base! pte!) (exists ((b$ Poly)) (! (and (has_type b$ NAT) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings!) b$) (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I base!) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings! b$))))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings!) b$))))) :pattern ((lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? mappings! base! pte!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::between")
(assert (fuel_bool_default fuel%lib!definitions_t.between.))
(assert (=> (fuel_bool fuel%lib!definitions_t.between.) (forall ((x! Poly) (a! Poly) (b! Poly)) (! (= (lib!definitions_t.between.? x! a! b!) (and (<= (%I a!) (%I x!)) (< (%I x!) (%I b!)))) :pattern ((lib!definitions_t.between.? x! a! b!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PT_BOUND_LOW")
(assert (fuel_bool_default fuel%lib!definitions_t.PT_BOUND_LOW.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PT_BOUND_LOW.) (= lib!definitions_t.PT_BOUND_LOW.? 0)))
(assert (<= 0 lib!definitions_t.PT_BOUND_LOW.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::PT_BOUND_HIGH")
(assert (fuel_bool_default fuel%lib!definitions_t.PT_BOUND_HIGH.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PT_BOUND_HIGH.) (= lib!definitions_t.PT_BOUND_HIGH.? (uClip SZ (Mul (uClip SZ (Mul (uClip SZ (Mul (uClip SZ (Mul 512 512)) 1024)) 1024)) 1024)))))
(assert (uInv SZ lib!definitions_t.PT_BOUND_HIGH.?))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::WORD_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.WORD_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.WORD_SIZE.) (= lib!definitions_t.WORD_SIZE.? 8)))
(assert (uInv SZ lib!definitions_t.WORD_SIZE.?))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_op")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_op.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_op.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_op.? self!) (lib!spec_t.hlspec.AbstractStep./ReadWrite/op (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_op.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%lib!definitions_t.RWOp. (lib!spec_t.hlspec.impl&%0.arrow_op.? self!)) TYPE%lib!definitions_t.RWOp.)) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_op.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_ReadWrite_vaddr")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr.? self!) (lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr.? self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_vaddr.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_ReadWrite_op")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op.? self!) (lib!spec_t.hlspec.AbstractStep./ReadWrite/op (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%lib!definitions_t.RWOp. (lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op.? self!)) TYPE%lib!definitions_t.RWOp.)) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_op.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_ReadWrite_pte")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte.? self!) (lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!option.Option. (lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte.? self!)) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_ReadWrite_pte.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_Map_vaddr")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr.? self!) (lib!spec_t.hlspec.AbstractStep./Map/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr.? self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Map_vaddr.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_Map_pte")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_pte.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_pte.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_Map_pte.? self!) (lib!spec_t.hlspec.AbstractStep./Map/pte (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Map_pte.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!spec_t.hlspec.impl&%0.arrow_Map_pte.? self!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Map_pte.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_Map_result")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_result.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_Map_result.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_Map_result.? self!) (lib!spec_t.hlspec.AbstractStep./Map/result (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Map_result.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.impl&%0.arrow_Map_result.? self!)) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Map_result.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_Unmap_vaddr")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr.? self!) (lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr.? self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Unmap_vaddr.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_Unmap_result")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_Unmap_result.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_Unmap_result.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_Unmap_result.? self!) (lib!spec_t.hlspec.AbstractStep./Unmap/result (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Unmap_result.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.impl&%0.arrow_Unmap_result.? self!)) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Unmap_result.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_Resolve_vaddr")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr.? self!) (lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (<= 0 (lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr.? self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Resolve_vaddr.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::AbstractStep::arrow_Resolve_result")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.impl&%0.arrow_Resolve_result.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.impl&%0.arrow_Resolve_result.) (forall ((self! Poly)) (! (= (lib!spec_t.hlspec.impl&%0.arrow_Resolve_result.? self!) (lib!spec_t.hlspec.AbstractStep./Resolve/result (%Poly%lib!spec_t.hlspec.AbstractStep. self!))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Resolve_result.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hlspec.AbstractStep.) (has_type (Poly%core!result.Result. (lib!spec_t.hlspec.impl&%0.arrow_Resolve_result.? self!)) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) :pattern ((lib!spec_t.hlspec.impl&%0.arrow_Resolve_result.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::init")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.init.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.init.) (forall ((s! Poly)) (! (= (lib!spec_t.hlspec.init.? s!) (and (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s!)) (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.empty.? $ NAT $ NAT))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))) :pattern ((lib!spec_t.hlspec.init.? s!))))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::word_index_spec")
(declare-fun req%lib!spec_t.mem.word_index_spec. (Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((addr! Poly)) (! (= (req%lib!spec_t.mem.word_index_spec. addr!) (=> %%global_location_label%%12 (lib!definitions_t.aligned.? addr! (I 8)))) :pattern ((req%lib!spec_t.mem.word_index_spec. addr!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::word_index_spec")
(assert (fuel_bool_default fuel%lib!spec_t.mem.word_index_spec.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.word_index_spec.) (forall ((addr! Poly)) (! (= (lib!spec_t.mem.word_index_spec.? addr!) (nClip (EucDiv (%I addr!) lib!definitions_t.WORD_SIZE.?))) :pattern ((lib!spec_t.mem.word_index_spec.? addr!))))))
(assert (forall ((addr! Poly)) (! (=> (has_type addr! NAT) (<= 0 (lib!spec_t.mem.word_index_spec.? addr!))) :pattern ((lib!spec_t.mem.word_index_spec.? addr!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::mem_domain_from_mappings_contains")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.mem_domain_from_mappings_contains.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.mem_domain_from_mappings_contains.) (forall ((phys_mem_size! Poly) (word_idx! Poly) (mappings! Poly)) (! (= (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? phys_mem_size! word_idx! mappings!) (let ((vaddr$ (nClip (Mul (%I word_idx!) lib!definitions_t.WORD_SIZE.?)))) (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (let ((paddr$ (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))) (Sub vaddr$ (%I base$)))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? (I paddr$)))) (and (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings! base$ pte$) (lib!definitions_t.between.? (I vaddr$) base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$)))))))))) (< pmem_idx$ (%I phys_mem_size!)))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. mappings! base$ pte$)))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings_contains.? phys_mem_size! word_idx! mappings!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::mem_domain_from_mappings")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.mem_domain_from_mappings.))
(declare-fun %%lambda%%1 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (word_idx$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) word_idx$) (B (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? %%hole%%0 word_idx$ %%hole%%1))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) word_idx$)))))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.mem_domain_from_mappings.) (forall ((phys_mem_size! Poly) (mappings! Poly)) (! (= (lib!spec_t.hlspec.mem_domain_from_mappings.? phys_mem_size! mappings!) (%Poly%vstd!set.Set<nat.>. (vstd!set.impl&%0.new.? $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 phys_mem_size! mappings!)))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings.? phys_mem_size! mappings!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::LoadResult::arrow_0")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%0.arrow_0.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%0.arrow_0.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%0.arrow_0.? self!) (lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. self!))) :pattern ((lib!definitions_t.impl&%0.arrow_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.LoadResult.) (<= 0 (lib!definitions_t.impl&%0.arrow_0.? self!))) :pattern ((lib!definitions_t.impl&%0.arrow_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_ReadWrite")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_ReadWrite.))
(define-fun is-lib!definitions_t.RWOp./Store_ ((c lib!definitions_t.RWOp.)) Bool ((_ is lib!definitions_t.RWOp./Store) c))
(define-fun is-lib!definitions_t.StoreResult./Ok_ ((c lib!definitions_t.StoreResult.)) Bool ((_ is lib!definitions_t.StoreResult./Ok) c))
(define-fun is-lib!definitions_t.StoreResult./Pagefault_ ((c lib!definitions_t.StoreResult.)) Bool ((_ is lib!definitions_t.StoreResult./Pagefault) c))
(define-fun is-lib!definitions_t.LoadResult./Value_ ((c lib!definitions_t.LoadResult.)) Bool ((_ is lib!definitions_t.LoadResult./Value) c))
(define-fun is-lib!definitions_t.LoadResult./Pagefault_ ((c lib!definitions_t.LoadResult.)) Bool ((_ is lib!definitions_t.LoadResult./Pagefault) c))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_ReadWrite.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (vaddr! Poly) (op! Poly) (pte! Poly)) (! (= (lib!spec_t.hlspec.step_ReadWrite.? c! s1! s2! vaddr! op! pte!) (let ((vmem_idx$ (lib!spec_t.mem.word_index_spec.? vaddr!))) (and (and (lib!definitions_t.aligned.? vaddr! (I 8)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (ite (and (is-core!option.Option./Some_ (%Poly%core!option.Option. pte!)) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. pte!))))))) (let ((paddr$ (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))) (Sub (%I vaddr!) base$))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? (I paddr$)))) (and (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (I base$) (Poly%lib!definitions_t.PageTableEntry. pte$)) (lib!definitions_t.between.? vaddr! (I base$) (I (nClip (Add base$ (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) (ite (is-lib!definitions_t.RWOp./Store_ (%Poly%lib!definitions_t.RWOp. op!)) (let ((new_value$ (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Store/result (%Poly%lib!definitions_t.RWOp. op!)))) (ite (and (and (< pmem_idx$ (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (not (lib!definitions_t.Flags./Flags/is_supervisor (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))))) (lib!definitions_t.Flags./Flags/is_writable (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))) (and (is-lib!definitions_t.StoreResult./Ok_ result$) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (I vmem_idx$) (I new_value$))))) (and (is-lib!definitions_t.StoreResult./Pagefault_ result$) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))))))) (let ((is_exec$ (lib!definitions_t.RWOp./Load/is_exec (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. op!)))) (and (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (ite (and (and (< pmem_idx$ (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (not (lib!definitions_t.Flags./Flags/is_supervisor (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$)))))))) (=> is_exec$ (not (lib!definitions_t.Flags./Flags/disable_execute (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntry./PageTableEntry/flags (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))) (and (is-lib!definitions_t.LoadResult./Value_ result$) (= (lib!definitions_t.LoadResult./Value/0 (%Poly%lib!definitions_t.LoadResult. (Poly%lib!definitions_t.LoadResult. result$))) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (I vmem_idx$))))) (is-lib!definitions_t.LoadResult./Pagefault_ result$))))))))))) (and (and (not (vstd!set.impl&%0.contains.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!spec_t.hlspec.mem_domain_from_mappings.? (I (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))))) (I vmem_idx$))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (ite (is-lib!definitions_t.RWOp./Store_ (%Poly%lib!definitions_t.RWOp. op!)) (let ((new_value$ (lib!definitions_t.RWOp./Store/new_value (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Store/result (%Poly%lib!definitions_t.RWOp. op!)))) (is-lib!definitions_t.StoreResult./Pagefault_ result$))) (let ((is_exec$ (lib!definitions_t.RWOp./Load/is_exec (%Poly%lib!definitions_t.RWOp. op!)))) (let ((result$ (lib!definitions_t.RWOp./Load/result (%Poly%lib!definitions_t.RWOp. op!)))) (is-lib!definitions_t.LoadResult./Pagefault_ result$))))))))) :pattern ((lib!spec_t.hlspec.step_ReadWrite.? c! s1! s2! vaddr! op! pte!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Map_enabled")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Map_enabled.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Map_enabled.) (forall ((map! Poly) (vaddr! Poly) (pte! Poly)) (! (= (lib!spec_t.hlspec.step_Map_enabled.? map! vaddr! pte!) (and (and (and (and (and (lib!definitions_t.aligned.? vaddr! (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.MAX_PHYADDR_SPEC.?)) (lib!definitions_t.candidate_mapping_in_bounds.? vaddr! pte!)) (or (or (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L3_ENTRY_SIZE.?) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L2_ENTRY_SIZE.?)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.L1_ENTRY_SIZE.?))) (not (lib!definitions_t.candidate_mapping_overlaps_existing_pmem.? map! vaddr! pte!)))) :pattern ((lib!spec_t.hlspec.step_Map_enabled.? map! vaddr! pte!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Map")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Map.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Map.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (vaddr! Poly) (pte! Poly) (result! Poly)) (! (= (lib!spec_t.hlspec.step_Map.? c! s1! s2! vaddr! pte! result!) (and (lib!spec_t.hlspec.step_Map_enabled.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) vaddr! pte!) (ite (lib!definitions_t.candidate_mapping_overlaps_existing_vmem.? (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) vaddr! pte!) (and (and (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (and (and (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) vaddr! pte!)))) (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) idx$) (= (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))) idx$) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) idx$)))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))) idx$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) idx$))))) (= (%Poly%vstd!set.Set<nat.>. (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))))) (lib!spec_t.hlspec.mem_domain_from_mappings.? (I (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))))))))) :pattern ((lib!spec_t.hlspec.step_Map.? c! s1! s2! vaddr! pte! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Unmap_enabled")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Unmap_enabled.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Unmap_enabled.) (forall ((vaddr! Poly)) (! (= (lib!spec_t.hlspec.step_Unmap_enabled.? vaddr!) (and (lib!definitions_t.between.? vaddr! (I lib!definitions_t.PT_BOUND_LOW.?) (I lib!definitions_t.PT_BOUND_HIGH.?)) (or (or (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L3_ENTRY_SIZE.?)) (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L2_ENTRY_SIZE.?))) (lib!definitions_t.aligned.? vaddr! (I lib!definitions_t.L1_ENTRY_SIZE.?))))) :pattern ((lib!spec_t.hlspec.step_Unmap_enabled.? vaddr!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Unmap")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Unmap.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Unmap.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (vaddr! Poly) (result! Poly)) (! (= (lib!spec_t.hlspec.step_Unmap.? c! s1! s2! vaddr! result!) (and (lib!spec_t.hlspec.step_Unmap_enabled.? vaddr!) (ite (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) vaddr!) (and (and (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) vaddr!)))) (= (%Poly%vstd!set.Set<nat.>. (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))))) (lib!spec_t.hlspec.mem_domain_from_mappings.? (I (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)))))) (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)))) idx$) (= (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))) idx$) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) idx$)))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!))) idx$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) idx$))))) (and (and (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!)))) (= (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s2!)) (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mem (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))))))) :pattern ((lib!spec_t.hlspec.step_Unmap.? c! s1! s2! vaddr! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Resolve_enabled")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Resolve_enabled.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Resolve_enabled.) (forall ((vaddr! Poly)) (! (= (lib!spec_t.hlspec.step_Resolve_enabled.? vaddr!) (lib!definitions_t.aligned.? vaddr! (I 8))) :pattern ((lib!spec_t.hlspec.step_Resolve_enabled.? vaddr!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Resolve")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Resolve.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Resolve.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (vaddr! Poly) (result! Poly)) (! (= (lib!spec_t.hlspec.step_Resolve.? c! s1! s2! vaddr! result!) (and (and (lib!spec_t.hlspec.step_Resolve_enabled.? vaddr!) (= s2! s1!)) (ite (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))))))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))) (I base$) (Poly%lib!definitions_t.PageTableEntry. pte$)) (lib!definitions_t.between.? vaddr! (I base$) (I (nClip (Add base$ (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte$))))))))))))) (let ((vmem_idx$ (lib!spec_t.mem.word_index_spec.? vaddr!))) (not (vstd!set.impl&%0.contains.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!spec_t.hlspec.mem_domain_from_mappings.? (I (lib!spec_t.hlspec.AbstractConstants./AbstractConstants/phys_mem_size (%Poly%lib!spec_t.hlspec.AbstractConstants. c!))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!spec_t.hlspec.AbstractVariables./AbstractVariables/mappings (%Poly%lib!spec_t.hlspec.AbstractVariables. s1!))))) (I vmem_idx$))))))) :pattern ((lib!spec_t.hlspec.step_Resolve.? c! s1! s2! vaddr! result!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::step_Stutter")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.step_Stutter.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.step_Stutter.) (forall ((c! Poly) (s1! Poly) (s2! Poly)) (! (= (lib!spec_t.hlspec.step_Stutter.? c! s1! s2!) (= s1! s2!)) :pattern ((lib!spec_t.hlspec.step_Stutter.? c! s1! s2!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::next_step")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.next_step.))
(define-fun is-lib!spec_t.hlspec.AbstractStep./ReadWrite_ ((c lib!spec_t.hlspec.AbstractStep.)) Bool ((_ is lib!spec_t.hlspec.AbstractStep./ReadWrite) c))
(define-fun is-lib!spec_t.hlspec.AbstractStep./Map_ ((c lib!spec_t.hlspec.AbstractStep.)) Bool ((_ is lib!spec_t.hlspec.AbstractStep./Map) c))
(define-fun is-lib!spec_t.hlspec.AbstractStep./Unmap_ ((c lib!spec_t.hlspec.AbstractStep.)) Bool ((_ is lib!spec_t.hlspec.AbstractStep./Unmap) c))
(define-fun is-lib!spec_t.hlspec.AbstractStep./Resolve_ ((c lib!spec_t.hlspec.AbstractStep.)) Bool ((_ is lib!spec_t.hlspec.AbstractStep./Resolve) c))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.next_step.) (forall ((c! Poly) (s1! Poly) (s2! Poly) (step! Poly)) (! (= (lib!spec_t.hlspec.next_step.? c! s1! s2! step!) (ite (is-lib!spec_t.hlspec.AbstractStep./ReadWrite_ (%Poly%lib!spec_t.hlspec.AbstractStep. step!)) (let ((vaddr$ (lib!spec_t.hlspec.AbstractStep./ReadWrite/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((op$ (lib!spec_t.hlspec.AbstractStep./ReadWrite/op (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((pte$ (lib!spec_t.hlspec.AbstractStep./ReadWrite/pte (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (lib!spec_t.hlspec.step_ReadWrite.? c! s1! s2! (I vaddr$) (Poly%lib!definitions_t.RWOp. op$) (Poly%core!option.Option. pte$))))) (ite (is-lib!spec_t.hlspec.AbstractStep./Map_ (%Poly%lib!spec_t.hlspec.AbstractStep. step!)) (let ((vaddr$ (lib!spec_t.hlspec.AbstractStep./Map/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((pte$ (lib!spec_t.hlspec.AbstractStep./Map/pte (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((result$ (lib!spec_t.hlspec.AbstractStep./Map/result (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (lib!spec_t.hlspec.step_Map.? c! s1! s2! (I vaddr$) (Poly%lib!definitions_t.PageTableEntry. pte$) (Poly%core!result.Result. result$))))) (ite (is-lib!spec_t.hlspec.AbstractStep./Unmap_ (%Poly%lib!spec_t.hlspec.AbstractStep. step!)) (let ((vaddr$ (lib!spec_t.hlspec.AbstractStep./Unmap/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((result$ (lib!spec_t.hlspec.AbstractStep./Unmap/result (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (lib!spec_t.hlspec.step_Unmap.? c! s1! s2! (I vaddr$) (Poly%core!result.Result. result$)))) (ite (is-lib!spec_t.hlspec.AbstractStep./Resolve_ (%Poly%lib!spec_t.hlspec.AbstractStep. step!)) (let ((vaddr$ (lib!spec_t.hlspec.AbstractStep./Resolve/vaddr (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (let ((result$ (lib!spec_t.hlspec.AbstractStep./Resolve/result (%Poly%lib!spec_t.hlspec.AbstractStep. step!)))) (lib!spec_t.hlspec.step_Resolve.? c! s1! s2! (I vaddr$) (Poly%core!result.Result. result$)))) (lib!spec_t.hlspec.step_Stutter.? c! s1! s2!)))))) :pattern ((lib!spec_t.hlspec.next_step.? c! s1! s2! step!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hlspec::next")
(assert (fuel_bool_default fuel%lib!spec_t.hlspec.next.))
(assert (=> (fuel_bool fuel%lib!spec_t.hlspec.next.) (forall ((c! Poly) (s1! Poly) (s2! Poly)) (! (= (lib!spec_t.hlspec.next.? c! s1! s2!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!spec_t.hlspec.AbstractStep.) (lib!spec_t.hlspec.next_step.? c! s1! s2! step$)) :pattern ((lib!spec_t.hlspec.next_step.? c! s1! s2! step$))))) :pattern ((lib!spec_t.hlspec.next.? c! s1! s2!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Function-Specs lib::spec_t::hlspec::lemma_mem_domain_from_mappings")
(declare-fun req%lib!spec_t.hlspec.lemma_mem_domain_from_mappings. (Int vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. Int lib!definitions_t.PageTableEntry.) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((phys_mem_size! Int) (mappings! vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) (base! Int) (pte! lib!definitions_t.PageTableEntry.)) (! (= (req%lib!spec_t.hlspec.lemma_mem_domain_from_mappings. phys_mem_size! mappings! base! pte!) (=> %%global_location_label%%13 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!)) (I base!))))) :pattern ((req%lib!spec_t.hlspec.lemma_mem_domain_from_mappings. phys_mem_size! mappings! base! pte!)))))
(declare-fun ens%lib!spec_t.hlspec.lemma_mem_domain_from_mappings. (Int vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. Int lib!definitions_t.PageTableEntry.) Bool)
(assert (forall ((phys_mem_size! Int) (mappings! vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) (base! Int) (pte! lib!definitions_t.PageTableEntry.)) (! (= (ens%lib!spec_t.hlspec.lemma_mem_domain_from_mappings. phys_mem_size! mappings! base! pte!) (and (forall ((word_idx$ Poly)) (! (=> (has_type word_idx$ NAT) (=> (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!)) (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))))) (forall ((word_idx$ Poly)) (! (=> (has_type word_idx$ NAT) (=> (and (not (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!))) (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))) (lib!definitions_t.between.? (I (nClip (Mul (%I word_idx$) lib!definitions_t.WORD_SIZE.?))) (I base!) (I (nClip (Add base! (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte!)))))))))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))))))) :pattern ((ens%lib!spec_t.hlspec.lemma_mem_domain_from_mappings. phys_mem_size! mappings! base! pte!)))))
(set-info :comment ";; Function-Def lib::spec_t::hlspec::lemma_mem_domain_from_mappings")
(set-info :comment ";; page-table/spec_t/hlspec.rs:58:1: 58:132 (#0)")
(declare-const phys_mem_size! Int)
(declare-const mappings! vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-const base! Int)
(declare-const pte! lib!definitions_t.PageTableEntry.)
(declare-const word_idx@ Poly)
(declare-const tmp%1 Bool)
(declare-const vaddr@ Int)
(declare-const tmp%%@ tuple%2.)
(declare-const base2@ Int)
(declare-const pte2@ lib!definitions_t.PageTableEntry.)
(declare-const word_idx$1@ Poly)
(declare-const tmp%2 Bool)
(declare-const tmp%3 Bool)
(declare-const tmp%4 Bool)
(declare-const tmp%5 Bool)
(declare-const tmp%6 Bool)
(declare-const vaddr$1@ Int)
(declare-const tmp%%$1@ tuple%2.)
(declare-const base2$1@ Int)
(declare-const pte2$1@ lib!definitions_t.PageTableEntry.)
(assert fuel_defaults)
(assert (<= 0 phys_mem_size!))
(assert (<= 0 base!))
(assert (has_type (Poly%lib!definitions_t.PageTableEntry. pte!) TYPE%lib!definitions_t.PageTableEntry.))
(assert (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!)) (I base!))))
(declare-fun %%choose%%0 (Type Type Int Dcr Type Dcr Type Poly Poly Int Dcr Type Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Poly) (%%hole%%9 Int) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly)) (! (=> (exists ((base$ Poly) (pte$ Poly)) (! (and (has_type base$ %%hole%%0) (has_type pte$ %%hole%%1) (let ((paddr$ (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))) (Sub %%hole%%2 (%I base$)))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? (I paddr$)))) (and (and (vstd!map_lib.impl&%0.contains_pair.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 base$ pte$) (lib!definitions_t.between.? %%hole%%8 base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$)))))))))) (< pmem_idx$ %%hole%%9))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 base$ pte$)))) (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ %%hole%%0) (has_type pte$ %%hole%%1) (let ((paddr$ (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))) (Sub %%hole%%2 (%I base$)))))) (let ((pmem_idx$ (lib!spec_t.mem.word_index_spec.? (I paddr$)))) (and (and (vstd!map_lib.impl&%0.contains_pair.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 base$ pte$) (lib!definitions_t.between.? %%hole%%8 base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$)))))))))) (< pmem_idx$ %%hole%%9))))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) (Poly%tuple%2. (tuple%2./tuple%2 base$ pte$)))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 base$ pte$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14)))))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%10 Bool)
(assert (not (and (=> (has_type word_idx@ NAT) (=> (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx@ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!)) (=> (= vaddr@ (nClip (Mul (%I word_idx@) lib!definitions_t.WORD_SIZE.?))) (=> (= tmp%%@ (%Poly%tuple%2. (as_type (%%choose%%0 NAT TYPE%lib!definitions_t.PageTableEntry. vaddr@ $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I vaddr@) phys_mem_size! $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!)) (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) (=> (= base2@ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= pte2@ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= tmp%1 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)) (I base2@) (Poly%lib!definitions_t.PageTableEntry. pte2@))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (=> %%location_label%%1 (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx@ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))))))))))) (=> (forall ((word_idx$ Poly)) (! (=> (has_type word_idx$ NAT) (=> (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!)) (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))))) (and (=> (has_type word_idx$1@ NAT) (=> (and (not (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$1@ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!))) (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$1@ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))) (=> (= vaddr$1@ (nClip (Mul (%I word_idx$1@) lib!definitions_t.WORD_SIZE.?))) (=> (= tmp%%$1@ (%Poly%tuple%2. (as_type (%%choose%%0 NAT TYPE%lib!definitions_t.PageTableEntry. vaddr$1@ $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)) (I vaddr$1@) phys_mem_size! $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))) (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)))) (=> (= base2$1@ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1@))))) (=> (= pte2$1@ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1@))))) (=> (= tmp%2 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)) (I base2$1@) (Poly%lib!definitions_t.PageTableEntry. pte2$1@))) (and (=> %%location_label%%2 tmp%2) (=> tmp%2 (=> (= tmp%3 (lib!definitions_t.between.? (I vaddr$1@) (I base2$1@) (I (nClip (Add base2$1@ (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte2$1@))))))))))) (and (=> %%location_label%%3 tmp%3) (=> tmp%3 (or (and (=> (not (lib!definitions_t.between.? (I vaddr$1@) (I base!) (I (nClip (Add base! (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte!))))))))))) (=> (= tmp%4 (or (not (= base2$1@ base!)) (not (= pte2$1@ pte!)))) (and (=> %%location_label%%4 tmp%4) (=> tmp%4 (or (and (=> (not (= base2$1@ base!)) (=> (= tmp%5 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base2$1@) (Poly%lib!definitions_t.PageTableEntry. pte2$1@))) (and (=> %%location_label%%5 tmp%5) (=> tmp%5 (=> (= tmp%6 (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$1@ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!))) (and (=> %%location_label%%6 tmp%6) (=> tmp%6 %%switch_label%%1))))))) (=> (not (not (= base2$1@ base!))) %%switch_label%%1)) (and (not %%switch_label%%1) (=> %%location_label%%7 false))))))) (=> (not (not (lib!definitions_t.between.? (I vaddr$1@) (I base!) (I (nClip (Add base! (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte!)))))))))))) %%switch_label%%0)) (and (not %%switch_label%%0) (=> %%location_label%%8 (lib!definitions_t.between.? (I (nClip (Mul (%I word_idx$1@) lib!definitions_t.WORD_SIZE.?))) (I base!) (I (nClip (Add base! (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte!))))))))))))))))))))))))) (=> (forall ((word_idx$ Poly)) (! (=> (has_type word_idx$ NAT) (=> (and (not (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!))) (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))) (lib!definitions_t.between.? (I (nClip (Mul (%I word_idx$) lib!definitions_t.WORD_SIZE.?))) (I base!) (I (nClip (Add base! (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte!)))))))))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))))) (and (=> %%location_label%%9 (forall ((word_idx$ Poly)) (! (=> (has_type word_idx$ NAT) (=> (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!)) (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))))) (=> %%location_label%%10 (forall ((word_idx$ Poly)) (! (=> (has_type word_idx$ NAT) (=> (and (not (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!))) (lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))) (lib!definitions_t.between.? (I (nClip (Mul (%I word_idx$) lib!definitions_t.WORD_SIZE.?))) (I base!) (I (nClip (Add base! (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte!)))))))))))) :pattern ((lib!spec_t.hlspec.mem_domain_from_mappings_contains.? (I phys_mem_size!) word_idx$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. mappings!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))))))))))))
(check-sat)
(exit)
