(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module impl_u::l2_impl::PT'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Err. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Err_0. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference_finite. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.inv. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.entry_at_spec. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.view_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.ghost_pt_matches_structure. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.directories_obey_invariant_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.empty_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.layer_in_range. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.inv_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.directories_have_flags. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.hp_pat_is_zero. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.interp_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.interp_at_entry. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.interp_at_aux. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.interp. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.accepted_mapping. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.inv. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_mapping. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.valid_mapping. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.map_frame. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_resolve. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.resolve. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.remove. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_unmap. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.unmap. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%0.arrow_Page_0. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.well_formed. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_size. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.num_entries. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.empty. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_match_arch. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.frames_aligned. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.inv. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.upper_vaddr. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.index_for_vaddr. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_base. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_bounds. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp_of_entry. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp_aux. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.resolve. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.update. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.accepted_mapping. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.new_empty_dir. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.map_frame. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.accepted_unmap. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.unmap. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.addr_is_zero_padded. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_addr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_addr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_P. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_PWT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_PCD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_A. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_D. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_G. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_DIR_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%3.view. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%3.layer. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.inv. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.spec_read. FuelId)
(declare-const fuel%lib!definitions_u.permissive_flags. FuelId)
(declare-const fuel%lib!definitions_u.impl&%1.view. FuelId)
(declare-const fuel%lib!definitions_u.impl&%2.view. FuelId)
(declare-const fuel%lib!extra.result_map_ok. FuelId)
(declare-const fuel%lib!extra.result_map. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_LAYERS. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_ENTRIES. FuelId)
(declare-const fuel%lib!definitions_t.MAX_PHYADDR_SPEC. FuelId)
(declare-const fuel%lib!definitions_t.WORD_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.PAGE_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.MAX_BASE. FuelId)
(declare-const fuel%lib!definitions_t.L3_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L2_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L1_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L0_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.index_from_offset. FuelId)
(declare-const fuel%lib!definitions_t.index_from_base_and_addr. FuelId)
(declare-const fuel%lib!definitions_t.entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.next_entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.aligned. FuelId)
(declare-const fuel%lib!definitions_t.between. FuelId)
(declare-const fuel%lib!definitions_t.new_seq. FuelId)
(declare-const fuel%lib!definitions_t.impl&%2.contains. FuelId)
(declare-const fuel%lib!definitions_t.overlap. FuelId)
(declare-const fuel%lib!definitions_t.impl&%4.view. FuelId)
(declare-const fuel%lib!definitions_t.impl&%7.view. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.num_entries. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.upper_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.inv. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.contains_entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.index_for_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_base. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.next_entry_base. FuelId)
(declare-const fuel%lib!definitions_t.x86_arch_spec. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.impl&%0.is_Err. fuel%vstd!std_specs.result.impl&%0.get_Err_0. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_difference. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_difference_finite. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%lib!impl_u.l2_impl.PT.inv. fuel%lib!impl_u.l2_impl.PT.entry_at_spec. fuel%lib!impl_u.l2_impl.PT.view_at. fuel%lib!impl_u.l2_impl.PT.ghost_pt_matches_structure. fuel%lib!impl_u.l2_impl.PT.directories_obey_invariant_at. fuel%lib!impl_u.l2_impl.PT.empty_at. fuel%lib!impl_u.l2_impl.PT.layer_in_range. fuel%lib!impl_u.l2_impl.PT.inv_at. fuel%lib!impl_u.l2_impl.PT.directories_have_flags. fuel%lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero. fuel%lib!impl_u.l2_impl.PT.hp_pat_is_zero. fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint. fuel%lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions. fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl. fuel%lib!impl_u.l2_impl.PT.interp_at. fuel%lib!impl_u.l2_impl.PT.interp_at_entry. fuel%lib!impl_u.l2_impl.PT.interp_at_aux. fuel%lib!impl_u.l2_impl.PT.interp. fuel%lib!impl_u.l2_impl.PT.accepted_mapping. fuel%lib!impl_u.l0.impl&%0.inv. fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size. fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned. fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap. fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds. fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds. fuel%lib!impl_u.l0.impl&%0.accepted_mapping. fuel%lib!impl_u.l0.impl&%0.valid_mapping. fuel%lib!impl_u.l0.impl&%0.map_frame. fuel%lib!impl_u.l0.impl&%0.accepted_resolve. fuel%lib!impl_u.l0.impl&%0.resolve. fuel%lib!impl_u.l0.impl&%0.remove. fuel%lib!impl_u.l0.impl&%0.accepted_unmap. fuel%lib!impl_u.l0.impl&%0.unmap. fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0. fuel%lib!impl_u.l1.impl&%0.arrow_Page_0. fuel%lib!impl_u.l1.impl&%1.well_formed. fuel%lib!impl_u.l1.impl&%1.entry_size. fuel%lib!impl_u.l1.impl&%1.num_entries. fuel%lib!impl_u.l1.impl&%1.empty. fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size. fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant. fuel%lib!impl_u.l1.impl&%1.directories_match_arch. fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty. fuel%lib!impl_u.l1.impl&%1.frames_aligned. fuel%lib!impl_u.l1.impl&%1.inv. fuel%lib!impl_u.l1.impl&%1.interp. fuel%lib!impl_u.l1.impl&%1.upper_vaddr. fuel%lib!impl_u.l1.impl&%1.index_for_vaddr. fuel%lib!impl_u.l1.impl&%1.entry_base. fuel%lib!impl_u.l1.impl&%1.entry_bounds. fuel%lib!impl_u.l1.impl&%1.interp_of_entry. fuel%lib!impl_u.l1.impl&%1.interp_aux. fuel%lib!impl_u.l1.impl&%1.resolve. fuel%lib!impl_u.l1.impl&%1.update. fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. fuel%lib!impl_u.l1.impl&%1.accepted_mapping. fuel%lib!impl_u.l1.impl&%1.new_empty_dir. fuel%lib!impl_u.l1.impl&%1.map_frame. fuel%lib!impl_u.l1.impl&%1.accepted_unmap. fuel%lib!impl_u.l1.impl&%1.unmap. fuel%lib!impl_u.l2_impl.addr_is_zero_padded. fuel%lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero. fuel%lib!spec_t.hardware.impl&%1.get_Directory_addr. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_RW. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_US. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_XD. fuel%lib!spec_t.hardware.impl&%1.get_Page_addr. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_RW. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_US. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_XD. fuel%lib!spec_t.hardware.MASK_FLAG_P. fuel%lib!spec_t.hardware.MASK_FLAG_RW. fuel%lib!spec_t.hardware.MASK_FLAG_US. fuel%lib!spec_t.hardware.MASK_FLAG_PWT. fuel%lib!spec_t.hardware.MASK_FLAG_PCD. fuel%lib!spec_t.hardware.MASK_FLAG_A. fuel%lib!spec_t.hardware.MASK_FLAG_XD. fuel%lib!spec_t.hardware.MASK_PG_FLAG_D. fuel%lib!spec_t.hardware.MASK_PG_FLAG_G. fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT. fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS. fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS. fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT. fuel%lib!spec_t.hardware.MASK_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_DIR_ADDR_SPEC. fuel%lib!spec_t.hardware.impl&%3.view. fuel%lib!spec_t.hardware.impl&%3.layer. fuel%lib!spec_t.mem.impl&%1.inv. fuel%lib!spec_t.mem.impl&%1.spec_read. fuel%lib!definitions_u.permissive_flags. fuel%lib!definitions_u.impl&%1.view. fuel%lib!definitions_u.impl&%2.view. fuel%lib!extra.result_map_ok. fuel%lib!extra.result_map. fuel%lib!definitions_t.X86_NUM_LAYERS. fuel%lib!definitions_t.X86_NUM_ENTRIES. fuel%lib!definitions_t.MAX_PHYADDR_SPEC. fuel%lib!definitions_t.WORD_SIZE. fuel%lib!definitions_t.PAGE_SIZE. fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. fuel%lib!definitions_t.MAX_BASE. fuel%lib!definitions_t.L3_ENTRY_SIZE. fuel%lib!definitions_t.L2_ENTRY_SIZE. fuel%lib!definitions_t.L1_ENTRY_SIZE. fuel%lib!definitions_t.L0_ENTRY_SIZE. fuel%lib!definitions_t.index_from_offset. fuel%lib!definitions_t.index_from_base_and_addr. fuel%lib!definitions_t.entry_base_from_index. fuel%lib!definitions_t.next_entry_base_from_index. fuel%lib!definitions_t.aligned. fuel%lib!definitions_t.between. fuel%lib!definitions_t.new_seq. fuel%lib!definitions_t.impl&%2.contains. fuel%lib!definitions_t.overlap. fuel%lib!definitions_t.impl&%4.view. fuel%lib!definitions_t.impl&%7.view. fuel%lib!definitions_t.impl&%8.entry_size. fuel%lib!definitions_t.impl&%8.num_entries. fuel%lib!definitions_t.impl&%8.upper_vaddr. fuel%lib!definitions_t.impl&%8.inv. fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast. fuel%lib!definitions_t.impl&%8.contains_entry_size. fuel%lib!definitions_t.impl&%8.index_for_vaddr. fuel%lib!definitions_t.impl&%8.entry_base. fuel%lib!definitions_t.impl&%8.next_entry_base. fuel%lib!definitions_t.x86_arch_spec. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_difference.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_difference_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort lib!spec_t.mem.PageTableMemory. 0)
(declare-sort vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayer.>. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. 0)
(declare-sort vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!definitions_t.MemRegion.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!impl_u.l0.PageTableContents. 0) (lib!impl_u.l1.NodeEntry. 0) (lib!impl_u.l1.Directory. 0) (lib!impl_u.l2_impl.PTDir. 0) (lib!spec_t.hardware.GhostPageDirectoryEntry. 0) (lib!spec_t.hardware.PageDirectoryEntry. 0) (lib!definitions_t.MemRegion. 0) (lib!definitions_t.MemRegionExec. 0) (lib!definitions_t.Flags. 0) (lib!definitions_t.PageTableEntry. 0) (lib!definitions_t.PageTableEntryExec. 0) (lib!definitions_t.ArchLayer. 0) (lib!definitions_t.Arch. 0) (lib!definitions_t.ArchLayerExec. 0) (lib!definitions_t.ArchExec. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!impl_u.l0.PageTableContents./PageTableContents (lib!impl_u.l0.PageTableContents./PageTableContents/?map vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) (lib!impl_u.l0.PageTableContents./PageTableContents/?arch lib!definitions_t.Arch.) (lib!impl_u.l0.PageTableContents./PageTableContents/?lower Int) (lib!impl_u.l0.PageTableContents./PageTableContents/?upper Int))) ((lib!impl_u.l1.NodeEntry./Directory (lib!impl_u.l1.NodeEntry./Directory/?0 lib!impl_u.l1.Directory.)) (lib!impl_u.l1.NodeEntry./Page (lib!impl_u.l1.NodeEntry./Page/?0 lib!definitions_t.PageTableEntry.)) (lib!impl_u.l1.NodeEntry./Empty )) ((lib!impl_u.l1.Directory./Directory (lib!impl_u.l1.Directory./Directory/?entries vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) (lib!impl_u.l1.Directory./Directory/?layer Int) (lib!impl_u.l1.Directory./Directory/?base_vaddr Int) (lib!impl_u.l1.Directory./Directory/?arch lib!definitions_t.Arch.) (lib!impl_u.l1.Directory./Directory/?flags lib!definitions_t.Flags.))) ((lib!impl_u.l2_impl.PTDir./PTDir (lib!impl_u.l2_impl.PTDir./PTDir/?region lib!definitions_t.MemRegion.) (lib!impl_u.l2_impl.PTDir./PTDir/?entries vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.) (lib!impl_u.l2_impl.PTDir./PTDir/?used_regions vstd!set.Set<lib!definitions_t.MemRegion.>.))) ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?addr Int) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_P Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_RW Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_US Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PWT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PCD Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_A Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_XD Bool)) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?addr Int) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_P Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_RW Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_US Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PWT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PCD Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_A Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_D Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_G Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PAT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_XD Bool)) (lib!spec_t.hardware.GhostPageDirectoryEntry./Empty )) ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?entry Int) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?layer Int))) ((lib!definitions_t.MemRegion./MemRegion (lib!definitions_t.MemRegion./MemRegion/?base Int) (lib!definitions_t.MemRegion./MemRegion/?size Int))) ((lib!definitions_t.MemRegionExec./MemRegionExec (lib!definitions_t.MemRegionExec./MemRegionExec/?base Int) (lib!definitions_t.MemRegionExec./MemRegionExec/?size Int))) ((lib!definitions_t.Flags./Flags (lib!definitions_t.Flags./Flags/?is_writable Bool) (lib!definitions_t.Flags./Flags/?is_supervisor Bool) (lib!definitions_t.Flags./Flags/?disable_execute Bool))) ((lib!definitions_t.PageTableEntry./PageTableEntry (lib!definitions_t.PageTableEntry./PageTableEntry/?frame lib!definitions_t.MemRegion.) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags lib!definitions_t.Flags.))) ((lib!definitions_t.PageTableEntryExec./PageTableEntryExec (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/?frame lib!definitions_t.MemRegionExec.) (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/?flags lib!definitions_t.Flags.))) ((lib!definitions_t.ArchLayer./ArchLayer (lib!definitions_t.ArchLayer./ArchLayer/?entry_size Int) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries Int))) ((lib!definitions_t.Arch./Arch (lib!definitions_t.Arch./Arch/?layers vstd!seq.Seq<lib!definitions_t.ArchLayer.>.))) ((lib!definitions_t.ArchLayerExec./ArchLayerExec (lib!definitions_t.ArchLayerExec./ArchLayerExec/?entry_size Int) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?num_entries Int))) ((lib!definitions_t.ArchExec./ArchExec (lib!definitions_t.ArchExec./ArchExec/?layers %%Function%%))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/map (lib!impl_u.l0.PageTableContents.) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/arch (lib!impl_u.l0.PageTableContents.) lib!definitions_t.Arch.)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/lower (lib!impl_u.l0.PageTableContents.) Int)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/upper (lib!impl_u.l0.PageTableContents.) Int)
(declare-fun lib!impl_u.l1.NodeEntry./Directory/0 (lib!impl_u.l1.NodeEntry.) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.NodeEntry./Page/0 (lib!impl_u.l1.NodeEntry.) lib!definitions_t.PageTableEntry.)
(declare-fun lib!impl_u.l1.Directory./Directory/entries (lib!impl_u.l1.Directory.) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun lib!impl_u.l1.Directory./Directory/layer (lib!impl_u.l1.Directory.) Int)
(declare-fun lib!impl_u.l1.Directory./Directory/base_vaddr (lib!impl_u.l1.Directory.) Int)
(declare-fun lib!impl_u.l1.Directory./Directory/arch (lib!impl_u.l1.Directory.) lib!definitions_t.Arch.)
(declare-fun lib!impl_u.l1.Directory./Directory/flags (lib!impl_u.l1.Directory.) lib!definitions_t.Flags.)
(declare-fun lib!impl_u.l2_impl.PTDir./PTDir/region (lib!impl_u.l2_impl.PTDir.) lib!definitions_t.MemRegion.)
(declare-fun lib!impl_u.l2_impl.PTDir./PTDir/entries (lib!impl_u.l2_impl.PTDir.) vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.)
(declare-fun lib!impl_u.l2_impl.PTDir./PTDir/used_regions (lib!impl_u.l2_impl.PTDir.) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (lib!spec_t.hardware.GhostPageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (lib!spec_t.hardware.GhostPageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (lib!spec_t.hardware.PageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (lib!spec_t.hardware.PageDirectoryEntry.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/base (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/size (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/base (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/size (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.Flags./Flags/is_writable (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/is_supervisor (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/disable_execute (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/frame (lib!definitions_t.PageTableEntry.) lib!definitions_t.MemRegion.)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/flags (lib!definitions_t.PageTableEntry.) lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (lib!definitions_t.PageTableEntryExec.) lib!definitions_t.MemRegionExec.)
(declare-fun lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (lib!definitions_t.PageTableEntryExec.) lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/entry_size (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/num_entries (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.Arch./Arch/layers (lib!definitions_t.Arch.) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (lib!definitions_t.ArchLayerExec.) Int)
(declare-fun lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (lib!definitions_t.ArchLayerExec.) Int)
(declare-fun lib!definitions_t.ArchExec./ArchExec/layers (lib!definitions_t.ArchExec.) %%Function%%)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!impl_u.l0.PageTableContents. Type)
(declare-const TYPE%lib!impl_u.l1.NodeEntry. Type)
(declare-const TYPE%lib!impl_u.l1.Directory. Type)
(declare-const TYPE%lib!impl_u.l2_impl.PTDir. Type)
(declare-const TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry. Type)
(declare-const TYPE%lib!spec_t.hardware.PageDirectoryEntry. Type)
(declare-const TYPE%lib!spec_t.mem.PageTableMemory. Type)
(declare-const TYPE%lib!definitions_t.MemRegion. Type)
(declare-const TYPE%lib!definitions_t.MemRegionExec. Type)
(declare-const TYPE%lib!definitions_t.Flags. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntry. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntryExec. Type)
(declare-const TYPE%lib!definitions_t.ArchLayer. Type)
(declare-const TYPE%lib!definitions_t.Arch. Type)
(declare-const TYPE%lib!definitions_t.ArchLayerExec. Type)
(declare-const TYPE%lib!definitions_t.ArchExec. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.mem.PageTableMemory.) Poly)
(declare-fun %Poly%lib!spec_t.mem.PageTableMemory. (Poly) lib!spec_t.mem.PageTableMemory.)
(declare-fun Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (Poly) vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!seq.Seq<lib!definitions_t.ArchLayer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)
(declare-fun Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (Poly) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.Set<lib!definitions_t.MemRegion.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (Poly) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents.) Poly)
(declare-fun %Poly%lib!impl_u.l0.PageTableContents. (Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry.) Poly)
(declare-fun %Poly%lib!impl_u.l1.NodeEntry. (Poly) lib!impl_u.l1.NodeEntry.)
(declare-fun Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory.) Poly)
(declare-fun %Poly%lib!impl_u.l1.Directory. (Poly) lib!impl_u.l1.Directory.)
(declare-fun Poly%lib!impl_u.l2_impl.PTDir. (lib!impl_u.l2_impl.PTDir.) Poly)
(declare-fun %Poly%lib!impl_u.l2_impl.PTDir. (Poly) lib!impl_u.l2_impl.PTDir.)
(declare-fun Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-fun Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly) lib!spec_t.hardware.PageDirectoryEntry.)
(declare-fun Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegion. (Poly) lib!definitions_t.MemRegion.)
(declare-fun Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegionExec. (Poly) lib!definitions_t.MemRegionExec.)
(declare-fun Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags.) Poly)
(declare-fun %Poly%lib!definitions_t.Flags. (Poly) lib!definitions_t.Flags.)
(declare-fun Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntry. (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun Poly%lib!definitions_t.PageTableEntryExec. (lib!definitions_t.PageTableEntryExec.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntryExec. (Poly) lib!definitions_t.PageTableEntryExec.)
(declare-fun Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayer. (Poly) lib!definitions_t.ArchLayer.)
(declare-fun Poly%lib!definitions_t.Arch. (lib!definitions_t.Arch.) Poly)
(declare-fun %Poly%lib!definitions_t.Arch. (Poly) lib!definitions_t.Arch.)
(declare-fun Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayerExec. (Poly) lib!definitions_t.ArchLayerExec.)
(declare-fun Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchExec. (Poly) lib!definitions_t.ArchExec.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (= x (%Poly%lib!spec_t.mem.PageTableMemory. (Poly%lib!spec_t.mem.PageTableMemory. x))) :pattern ((Poly%lib!spec_t.mem.PageTableMemory. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.mem.PageTableMemory.) (= x (Poly%lib!spec_t.mem.PageTableMemory. (%Poly%lib!spec_t.mem.PageTableMemory. x)))) :pattern ((has_type x TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.) :pattern ((has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (= x (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.))) (= x (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (%Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.)))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.))))))
(assert (forall ((x vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.)) (= x (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.))))))
(assert (forall ((x vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (= x (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x))) :pattern ((Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) (= x (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.))))))
(assert (forall ((x vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (has_type (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= x (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. x))) :pattern ((Poly%lib!impl_u.l0.PageTableContents. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (= x (Poly%lib!impl_u.l0.PageTableContents. (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((_map! vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) (_arch! lib!definitions_t.Arch.) (_lower! Int) (_upper! Int)) (! (=> (and (<= 0 _lower!) (<= 0 _upper!)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents./PageTableContents _map! _arch! _lower! _upper!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents./PageTableContents _map! _arch! _lower! _upper!)) TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/map x) (lib!impl_u.l0.PageTableContents./PageTableContents/?map x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/map x)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/arch x) (lib!impl_u.l0.PageTableContents./PageTableContents/?arch x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/arch x)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower x) (lib!impl_u.l0.PageTableContents./PageTableContents/?lower x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/lower x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (<= 0 (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. x)) (has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper x) (lib!impl_u.l0.PageTableContents./PageTableContents/?upper x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/upper x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (<= 0 (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. x)) (has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= x (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. x))) :pattern ((Poly%lib!impl_u.l1.NodeEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (= x (Poly%lib!impl_u.l1.NodeEntry. (%Poly%lib!impl_u.l1.NodeEntry. x)))) :pattern ((has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((_0! lib!impl_u.l1.Directory.)) (! (=> (has_type (Poly%lib!impl_u.l1.Directory. _0!) TYPE%lib!impl_u.l1.Directory.) (has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory _0!)) TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory _0!)) TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= (lib!impl_u.l1.NodeEntry./Directory/0 x) (lib!impl_u.l1.NodeEntry./Directory/?0 x)) :pattern ((lib!impl_u.l1.NodeEntry./Directory/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. x))) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. x)) (has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((_0! lib!definitions_t.PageTableEntry.)) (! (=> (has_type (Poly%lib!definitions_t.PageTableEntry. _0!) TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Page _0!)) TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Page _0!)) TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= (lib!impl_u.l1.NodeEntry./Page/0 x) (lib!impl_u.l1.NodeEntry./Page/?0 x)) :pattern ((lib!impl_u.l1.NodeEntry./Page/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. x))) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. x)) (has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (has_type (Poly%lib!impl_u.l1.NodeEntry. lib!impl_u.l1.NodeEntry./Empty) TYPE%lib!impl_u.l1.NodeEntry.))
(define-fun is-lib!impl_u.l1.NodeEntry./Directory_ ((c lib!impl_u.l1.NodeEntry.)) Bool ((_ is lib!impl_u.l1.NodeEntry./Directory) c))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (=> (is-lib!impl_u.l1.NodeEntry./Directory_ x) (height_lt (height (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 x))) (height (Poly%lib!impl_u.l1.NodeEntry. x)))) :pattern ((height (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 x)))))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= x (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. x))) :pattern ((Poly%lib!impl_u.l1.Directory. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (= x (Poly%lib!impl_u.l1.Directory. (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((_entries! vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) (_layer! Int) (_base_vaddr! Int) (_arch! lib!definitions_t.Arch.) (_flags! lib!definitions_t.Flags.)) (! (=> (and (<= 0 _layer!) (<= 0 _base_vaddr!)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory./Directory _entries! _layer! _base_vaddr! _arch! _flags!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory./Directory _entries! _layer! _base_vaddr! _arch! _flags!)) TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/entries x) (lib!impl_u.l1.Directory./Directory/?entries x)) :pattern ((lib!impl_u.l1.Directory./Directory/entries x)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/layer x) (lib!impl_u.l1.Directory./Directory/?layer x)) :pattern ((lib!impl_u.l1.Directory./Directory/layer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. x)) (has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/base_vaddr x) (lib!impl_u.l1.Directory./Directory/?base_vaddr x)) :pattern ((lib!impl_u.l1.Directory./Directory/base_vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. x)) (has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/arch x) (lib!impl_u.l1.Directory./Directory/?arch x)) :pattern ((lib!impl_u.l1.Directory./Directory/arch x)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/flags x) (lib!impl_u.l1.Directory./Directory/?flags x)) :pattern ((lib!impl_u.l1.Directory./Directory/flags x)))))
(define-fun is-lib!impl_u.l1.Directory./Directory_ ((c lib!impl_u.l1.Directory.)) Bool ((_ is lib!impl_u.l1.Directory./Directory) c))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (=> (is-lib!impl_u.l1.Directory./Directory_ x) (height_lt (height (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries x))) (height (Poly%lib!impl_u.l1.Directory. x)))) :pattern ((height (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries x)))))))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (= x (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. x))) :pattern ((Poly%lib!impl_u.l2_impl.PTDir. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l2_impl.PTDir.) (= x (Poly%lib!impl_u.l2_impl.PTDir. (%Poly%lib!impl_u.l2_impl.PTDir. x)))) :pattern ((has_type x TYPE%lib!impl_u.l2_impl.PTDir.)))))
(assert (forall ((_region! lib!definitions_t.MemRegion.) (_entries! vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.) (_used_regions! vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _region!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!impl_u.l2_impl.PTDir. (lib!impl_u.l2_impl.PTDir./PTDir _region! _entries! _used_regions!)) TYPE%lib!impl_u.l2_impl.PTDir.)) :pattern ((has_type (Poly%lib!impl_u.l2_impl.PTDir. (lib!impl_u.l2_impl.PTDir./PTDir _region! _entries! _used_regions!)) TYPE%lib!impl_u.l2_impl.PTDir.)))))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (= (lib!impl_u.l2_impl.PTDir./PTDir/region x) (lib!impl_u.l2_impl.PTDir./PTDir/?region x)) :pattern ((lib!impl_u.l2_impl.PTDir./PTDir/region x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l2_impl.PTDir.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. x)) (has_type x TYPE%lib!impl_u.l2_impl.PTDir.)))))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (= (lib!impl_u.l2_impl.PTDir./PTDir/entries x) (lib!impl_u.l2_impl.PTDir./PTDir/?entries x)) :pattern ((lib!impl_u.l2_impl.PTDir./PTDir/entries x)))))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (= (lib!impl_u.l2_impl.PTDir./PTDir/used_regions x) (lib!impl_u.l2_impl.PTDir./PTDir/?used_regions x)) :pattern ((lib!impl_u.l2_impl.PTDir./PTDir/used_regions x)))))
(define-fun is-lib!impl_u.l2_impl.PTDir./PTDir_ ((c lib!impl_u.l2_impl.PTDir.)) Bool ((_ is lib!impl_u.l2_impl.PTDir./PTDir) c))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (=> (is-lib!impl_u.l2_impl.PTDir./PTDir_ x) (height_lt (height (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries x))) (height (Poly%lib!impl_u.l2_impl.PTDir. x)))) :pattern ((height (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries x)))))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= x (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x))) :pattern ((Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (= x (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((_addr! Int) (_flag_P! Bool) (_flag_RW! Bool) (_flag_US! Bool) (_flag_PWT! Bool) (_flag_PCD! Bool) (_flag_A! Bool) (_flag_XD! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?addr x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_P x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_RW x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_US x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PWT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PCD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_A x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_XD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD x)))))
(assert (forall ((_addr! Int) (_flag_P! Bool) (_flag_RW! Bool) (_flag_US! Bool) (_flag_PWT! Bool) (_flag_PCD! Bool) (_flag_A! Bool) (_flag_D! Bool) (_flag_G! Bool) (_flag_PAT! Bool) (_flag_XD! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Page _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_D! _flag_G! _flag_PAT! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Page _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_D! _flag_G! _flag_PAT! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?addr x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_P x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_RW x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_US x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PWT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PCD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_A x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_D x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_G x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PAT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_XD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD x)))))
(assert (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. lib!spec_t.hardware.GhostPageDirectoryEntry./Empty) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= x (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. x))) :pattern ((Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (= x (Poly%lib!spec_t.hardware.PageDirectoryEntry. (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((_entry! Int) (_layer! Int)) (! (=> (and (uInv 64 _entry!) (<= 0 _layer!)) (has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry _entry! _layer!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry _entry! _layer!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry x) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?entry x)) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (uInv 64 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer x) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?layer x)) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (<= 0 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= x (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. x))) :pattern ((Poly%lib!definitions_t.MemRegion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (= x (Poly%lib!definitions_t.MemRegion. (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (<= 0 _base!) (<= 0 _size!)) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/base x) (lib!definitions_t.MemRegion./MemRegion/?base x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/size x) (lib!definitions_t.MemRegion./MemRegion/?size x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= x (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. x))) :pattern ((Poly%lib!definitions_t.MemRegionExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (= x (Poly%lib!definitions_t.MemRegionExec. (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (uInv SZ _base!) (uInv SZ _size!)) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/base x) (lib!definitions_t.MemRegionExec./MemRegionExec/?base x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/size x) (lib!definitions_t.MemRegionExec./MemRegionExec/?size x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= x (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. x))) :pattern ((Poly%lib!definitions_t.Flags. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Flags.) (= x (Poly%lib!definitions_t.Flags. (%Poly%lib!definitions_t.Flags. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_writable x) (lib!definitions_t.Flags./Flags/?is_writable x)) :pattern ((lib!definitions_t.Flags./Flags/is_writable x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_supervisor x) (lib!definitions_t.Flags./Flags/?is_supervisor x)) :pattern ((lib!definitions_t.Flags./Flags/is_supervisor x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/disable_execute x) (lib!definitions_t.Flags./Flags/?disable_execute x)) :pattern ((lib!definitions_t.Flags./Flags/disable_execute x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.) :pattern ((has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= x (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. x))) :pattern ((Poly%lib!definitions_t.PageTableEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (= x (Poly%lib!definitions_t.PageTableEntry. (%Poly%lib!definitions_t.PageTableEntry. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegion.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _frame!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/frame x) (lib!definitions_t.PageTableEntry./PageTableEntry/?frame x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x)) (has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/flags x) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/flags x)))))
(assert (forall ((x lib!definitions_t.PageTableEntryExec.)) (! (= x (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. x))) :pattern ((Poly%lib!definitions_t.PageTableEntryExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntryExec.) (= x (Poly%lib!definitions_t.PageTableEntryExec. (%Poly%lib!definitions_t.PageTableEntryExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntryExec.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegionExec.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegionExec. _frame!) TYPE%lib!definitions_t.MemRegionExec.) (has_type (Poly%lib!definitions_t.PageTableEntryExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntryExec.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntryExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntryExec.)))))
(assert (forall ((x lib!definitions_t.PageTableEntryExec.)) (! (= (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame x) (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/?frame x)) :pattern ((lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntryExec.) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. x))) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. x)) (has_type x TYPE%lib!definitions_t.PageTableEntryExec.)))))
(assert (forall ((x lib!definitions_t.PageTableEntryExec.)) (! (= (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags x) (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/?flags x)) :pattern ((lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags x)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= x (%Poly%lib!definitions_t.ArchLayer. (Poly%lib!definitions_t.ArchLayer. x))) :pattern ((Poly%lib!definitions_t.ArchLayer. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (= x (Poly%lib!definitions_t.ArchLayer. (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (<= 0 _entry_size!) (<= 0 _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/entry_size x) (lib!definitions_t.ArchLayer./ArchLayer/?entry_size x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/num_entries x) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= x (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. x))) :pattern ((Poly%lib!definitions_t.Arch. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Arch.) (= x (Poly%lib!definitions_t.Arch. (%Poly%lib!definitions_t.Arch. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= (lib!definitions_t.Arch./Arch/layers x) (lib!definitions_t.Arch./Arch/?layers x)) :pattern ((lib!definitions_t.Arch./Arch/layers x)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.) :pattern ((has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= x (%Poly%lib!definitions_t.ArchLayerExec. (Poly%lib!definitions_t.ArchLayerExec. x))) :pattern ((Poly%lib!definitions_t.ArchLayerExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (= x (Poly%lib!definitions_t.ArchLayerExec. (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (uInv SZ _entry_size!) (uInv SZ _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec./ArchLayerExec _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayerExec.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec./ArchLayerExec _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= (lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size x) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?entry_size x)) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (uInv SZ (lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%lib!definitions_t.ArchLayerExec. x)) (has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= (lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries x) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?num_entries x)) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (uInv SZ (lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%lib!definitions_t.ArchLayerExec. x)) (has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchExec.)) (! (= x (%Poly%lib!definitions_t.ArchExec. (Poly%lib!definitions_t.ArchExec. x))) :pattern ((Poly%lib!definitions_t.ArchExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchExec.) (= x (Poly%lib!definitions_t.ArchExec. (%Poly%lib!definitions_t.ArchExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((_layers! %%Function%%)) (! (=> (has_type (Poly%array%. _layers!) (ARRAY $ TYPE%lib!definitions_t.ArchLayerExec. $ (CONST_INT 4))) (has_type (Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec./ArchExec _layers!)) TYPE%lib!definitions_t.ArchExec.)) :pattern ((has_type (Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec./ArchExec _layers!)) TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((x lib!definitions_t.ArchExec.)) (! (= (lib!definitions_t.ArchExec./ArchExec/layers x) (lib!definitions_t.ArchExec./ArchExec/?layers x)) :pattern ((lib!definitions_t.ArchExec./ArchExec/layers x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchExec.) (has_type (Poly%array%. (lib!definitions_t.ArchExec./ArchExec/layers (%Poly%lib!definitions_t.ArchExec. x))) (ARRAY $ TYPE%lib!definitions_t.ArchLayerExec. $ (CONST_INT 4)))) :pattern ((lib!definitions_t.ArchExec./ArchExec/layers (%Poly%lib!definitions_t.ArchExec. x)) (has_type x TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%2 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%2 Fn i) T)) :pattern ((has_type (%%apply%%2 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%2 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%2 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! true :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. Self%&. Self%& T&. T& E&. E&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Err")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Err_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize_spec")
(declare-fun lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::regions")
(declare-fun lib!spec_t.mem.impl&%1.regions.? (Poly) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::overlap")
(declare-fun lib!definitions_t.overlap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::aligned")
(declare-fun lib!definitions_t.aligned.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::cr3_spec")
(declare-fun lib!spec_t.mem.impl&%1.cr3_spec.? (Poly) lib!definitions_t.MemRegionExec.)
(set-info :comment ";; Function-Decl lib::definitions_t::PAGE_SIZE")
(declare-fun lib!definitions_t.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::inv")
(declare-fun lib!spec_t.mem.impl&%1.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::MemRegionExec::view")
(declare-fun lib!definitions_t.impl&%4.view.? (Poly) lib!definitions_t.MemRegion.)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::region_view")
(declare-fun lib!spec_t.mem.impl&%1.region_view.? (Poly Poly) vstd!seq.Seq<u64.>.)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_WIDTH")
(declare-fun lib!definitions_t.MAX_PHYADDR_WIDTH.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_PHYADDR_SPEC")
(declare-fun lib!definitions_t.MAX_PHYADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_LAYERS")
(declare-fun lib!definitions_t.X86_NUM_LAYERS.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_size")
(declare-fun lib!definitions_t.impl&%8.entry_size.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::num_entries")
(declare-fun lib!definitions_t.impl&%8.num_entries.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_MAX_ENTRY_SIZE")
(declare-fun lib!definitions_t.X86_MAX_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::X86_NUM_ENTRIES")
(declare-fun lib!definitions_t.X86_NUM_ENTRIES.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::inv")
(declare-fun lib!definitions_t.impl&%8.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::entry_base_from_index")
(declare-fun lib!definitions_t.entry_base_from_index.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::entry_base")
(declare-fun lib!definitions_t.impl&%8.entry_base.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::upper_vaddr")
(declare-fun lib!definitions_t.impl&%8.upper_vaddr.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L3_ENTRY_SIZE")
(declare-fun lib!definitions_t.L3_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L2_ENTRY_SIZE")
(declare-fun lib!definitions_t.L2_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L1_ENTRY_SIZE")
(declare-fun lib!definitions_t.L1_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::L0_ENTRY_SIZE")
(declare-fun lib!definitions_t.L0_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::definitions_t::x86_arch_spec")
(declare-fun lib!definitions_t.x86_arch_spec.? () lib!definitions_t.Arch.)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::definitions_t::MAX_BASE")
(declare-fun lib!definitions_t.MAX_BASE.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_P")
(declare-fun lib!spec_t.hardware.MASK_FLAG_P.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_RW")
(declare-fun lib!spec_t.hardware.MASK_FLAG_RW.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_US")
(declare-fun lib!spec_t.hardware.MASK_FLAG_US.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_PWT")
(declare-fun lib!spec_t.hardware.MASK_FLAG_PWT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_PCD")
(declare-fun lib!spec_t.hardware.MASK_FLAG_PCD.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_A")
(declare-fun lib!spec_t.hardware.MASK_FLAG_A.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_FLAG_XD")
(declare-fun lib!spec_t.hardware.MASK_FLAG_XD.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_D")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_D.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_G")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_G.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L1_PG_FLAG_PS")
(declare-fun lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L2_PG_FLAG_PS")
(declare-fun lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::all_mb0_bits_are_zero")
(declare-fun lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L1_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_PG_FLAG_PAT")
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_PAT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L2_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L3_PG_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_L3_PG_FLAG_PAT")
(declare-fun lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::view")
(declare-fun lib!spec_t.hardware.impl&%3.view.? (Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::spec_read")
(declare-fun lib!spec_t.mem.impl&%1.spec_read.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::mem::PageTableMemory::alloc_available_pages")
(declare-fun lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::PageTableEntryExec::view")
(declare-fun lib!definitions_t.impl&%7.view.? (Poly) lib!definitions_t.PageTableEntry.)
(set-info :comment ";; Function-Decl lib::definitions_t::between")
(declare-fun lib!definitions_t.between.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::extra::result_map_ok")
(declare-fun lib!extra.result_map_ok.? (Dcr Type Dcr Type Dcr Type Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::definitions_t::new_seq")
(declare-fun lib!definitions_t.new_seq.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_t.rec%new_seq.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::definitions_t::WORD_SIZE")
(declare-fun lib!definitions_t.WORD_SIZE.? () Int)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::disjoint")
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::layer_in_range")
(declare-fun lib!impl_u.l2_impl.PT.layer_in_range.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::view_at")
(declare-fun lib!impl_u.l2_impl.PT.view_at.? (Poly Poly Poly Poly Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_addr")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_addr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_RW")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_RW.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_US")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_US.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_XD")
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_XD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::directories_have_flags")
(declare-fun lib!impl_u.l2_impl.PT.directories_have_flags.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::ghost_pt_matches_structure")
(declare-fun lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::ghost_pt_used_regions_rtrancl")
(declare-fun lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::ghost_pt_used_regions_pairwise_disjoint")
(declare-fun lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::ghost_pt_region_notin_used_regions")
(declare-fun lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::hp_pat_is_zero")
(declare-fun lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::entry_at_spec")
(declare-fun lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly Poly Poly Poly Poly) lib!spec_t.hardware.PageDirectoryEntry.)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::hp_pat_is_zero")
(declare-fun lib!impl_u.l2_impl.PT.hp_pat_is_zero.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::entry_mb0_bits_are_zero")
(declare-fun lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::directories_obey_invariant_at")
(declare-fun lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? (Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::inv_at")
(declare-fun lib!impl_u.l2_impl.PT.inv_at.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.rec%inv_at.? (Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::inv")
(declare-fun lib!impl_u.l2_impl.PT.inv.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::empty_at")
(declare-fun lib!impl_u.l2_impl.PT.empty_at.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_u::permissive_flags")
(declare-fun lib!definitions_u.permissive_flags.? () lib!definitions_t.Flags.)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::interp_at_entry")
(declare-fun lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly Poly Poly Poly Poly Poly) lib!impl_u.l1.NodeEntry.)
(declare-fun lib!impl_u.l2_impl.PT.rec%interp_at_entry.? (Poly Poly Poly Poly Poly Poly Fuel) lib!impl_u.l1.NodeEntry.)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::interp_at_aux")
(declare-fun lib!impl_u.l2_impl.PT.interp_at_aux.? (Poly Poly Poly Poly Poly Poly) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun lib!impl_u.l2_impl.PT.rec%interp_at_aux.? (Poly Poly Poly Poly Poly Poly Fuel) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::interp_at")
(declare-fun lib!impl_u.l2_impl.PT.interp_at.? (Poly Poly Poly Poly Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l2_impl.PT.rec%interp_at.? (Poly Poly Poly Poly Poly Fuel) lib!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::interp")
(declare-fun lib!impl_u.l2_impl.PT.interp.? (Poly Poly) lib!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::contains_entry_size_at_index_atleast")
(declare-fun lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::PT::accepted_mapping")
(declare-fun lib!impl_u.l2_impl.PT.accepted_mapping.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::contains_entry_size")
(declare-fun lib!definitions_t.impl&%8.contains_entry_size.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::mappings_are_of_valid_size")
(declare-fun lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::mappings_are_aligned")
(declare-fun lib!impl_u.l0.impl&%0.mappings_are_aligned.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::mappings_dont_overlap")
(declare-fun lib!impl_u.l0.impl&%0.mappings_dont_overlap.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::candidate_mapping_in_bounds")
(declare-fun lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::mappings_in_bounds")
(declare-fun lib!impl_u.l0.impl&%0.mappings_in_bounds.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::inv")
(declare-fun lib!impl_u.l0.impl&%0.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::accepted_mapping")
(declare-fun lib!impl_u.l0.impl&%0.accepted_mapping.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::valid_mapping")
(declare-fun lib!impl_u.l0.impl&%0.valid_mapping.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::map_frame")
(declare-fun lib!impl_u.l0.impl&%0.map_frame.? (Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::accepted_resolve")
(declare-fun lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::resolve")
(declare-fun lib!impl_u.l0.impl&%0.resolve.? (Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::remove")
(declare-fun lib!impl_u.l0.impl&%0.remove.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::accepted_unmap")
(declare-fun lib!impl_u.l0.impl&%0.accepted_unmap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l0::PageTableContents::unmap")
(declare-fun lib!impl_u.l0.impl&%0.unmap.? (Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::NodeEntry::arrow_Directory_0")
(declare-fun lib!impl_u.l1.impl&%0.arrow_Directory_0.? (Poly) lib!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::NodeEntry::arrow_Page_0")
(declare-fun lib!impl_u.l1.impl&%0.arrow_Page_0.? (Poly) lib!definitions_t.PageTableEntry.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::entry_size")
(declare-fun lib!impl_u.l1.impl&%1.entry_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::num_entries")
(declare-fun lib!impl_u.l1.impl&%1.num_entries.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::well_formed")
(declare-fun lib!impl_u.l1.impl&%1.well_formed.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::empty")
(declare-fun lib!impl_u.l1.impl&%1.empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::pages_match_entry_size")
(declare-fun lib!impl_u.l1.impl&%1.pages_match_entry_size.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::directories_are_in_next_layer")
(declare-fun lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::directories_match_arch")
(declare-fun lib!impl_u.l1.impl&%1.directories_match_arch.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::directories_are_nonempty")
(declare-fun lib!impl_u.l1.impl&%1.directories_are_nonempty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::frames_aligned")
(declare-fun lib!impl_u.l1.impl&%1.frames_aligned.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::inv")
(declare-fun lib!impl_u.l1.impl&%1.inv.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.rec%inv.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::directories_obey_invariant")
(declare-fun lib!impl_u.l1.impl&%1.directories_obey_invariant.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::upper_vaddr")
(declare-fun lib!impl_u.l1.impl&%1.upper_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::entry_base")
(declare-fun lib!impl_u.l1.impl&%1.entry_base.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::entry_bounds")
(declare-fun lib!impl_u.l1.impl&%1.entry_bounds.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::interp_of_entry")
(declare-fun lib!impl_u.l1.impl&%1.interp_of_entry.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.rec%interp_of_entry.? (Poly Poly Fuel) lib!impl_u.l0.PageTableContents.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::interp_aux")
(declare-fun lib!impl_u.l1.impl&%1.interp_aux.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.rec%interp_aux.? (Poly Poly Fuel) lib!impl_u.l0.PageTableContents.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::interp")
(declare-fun lib!impl_u.l1.impl&%1.interp.? (Poly) lib!impl_u.l0.PageTableContents.)
(set-info :comment ";; Function-Decl lib::definitions_t::index_from_offset")
(declare-fun lib!definitions_t.index_from_offset.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::index_from_base_and_addr")
(declare-fun lib!definitions_t.index_from_base_and_addr.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::index_for_vaddr")
(declare-fun lib!definitions_t.impl&%8.index_for_vaddr.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::index_for_vaddr")
(declare-fun lib!impl_u.l1.impl&%1.index_for_vaddr.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::next_entry_base_from_index")
(declare-fun lib!definitions_t.next_entry_base_from_index.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::Arch::next_entry_base")
(declare-fun lib!definitions_t.impl&%8.next_entry_base.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::resolve")
(declare-fun lib!impl_u.l1.impl&%1.resolve.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%resolve.? (Poly Poly Fuel) core!result.Result.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::update")
(declare-fun lib!impl_u.l1.impl&%1.update.? (Poly Poly Poly) lib!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::candidate_mapping_in_bounds")
(declare-fun lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::accepted_mapping")
(declare-fun lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::new_empty_dir")
(declare-fun lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly Poly) lib!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::map_frame")
(declare-fun lib!impl_u.l1.impl&%1.map_frame.? (Poly Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%map_frame.? (Poly Poly Poly Fuel) core!result.Result.)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::accepted_unmap")
(declare-fun lib!impl_u.l1.impl&%1.accepted_unmap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::impl_u::l1::Directory::unmap")
(declare-fun lib!impl_u.l1.impl&%1.unmap.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%unmap.? (Poly Poly Fuel) core!result.Result.)
(set-info :comment ";; Function-Decl lib::impl_u::l2_impl::addr_is_zero_padded")
(declare-fun lib!impl_u.l2_impl.addr_is_zero_padded.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_addr")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_addr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_RW")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_RW.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_US")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_US.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_XD")
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_XD.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::MASK_DIR_ADDR_SPEC")
(declare-fun lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.? () Int)
(set-info :comment ";; Function-Decl lib::spec_t::hardware::PageDirectoryEntry::layer")
(declare-fun lib!spec_t.hardware.impl&%3.layer.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::definitions_t::ArchLayerExec::view")
(declare-fun lib!definitions_u.impl&%1.view.? (Poly) lib!definitions_t.ArchLayer.)
(set-info :comment ";; Function-Decl lib::definitions_t::ArchExec::view")
(declare-fun lib!definitions_u.impl&%2.view.? (Poly) lib!definitions_t.Arch.)
(set-info :comment ";; Function-Decl lib::extra::result_map")
(declare-fun lib!extra.result_map.? (Dcr Type Dcr Type Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::definitions_t::MemRegion::contains")
(declare-fun lib!definitions_t.impl&%2.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Err")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Err_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!) E&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize_spec")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (uInv SZ (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!))) :pattern ((lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::overlap")
(assert (fuel_bool_default fuel%lib!definitions_t.overlap.))
(assert (=> (fuel_bool fuel%lib!definitions_t.overlap.) (forall ((region1! Poly) (region2! Poly)) (! (= (lib!definitions_t.overlap.? region1! region2!) (ite (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region1!))))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region2!))))))) :pattern ((lib!definitions_t.overlap.? region1! region2!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::aligned")
(assert (fuel_bool_default fuel%lib!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%lib!definitions_t.aligned.) (forall ((addr! Poly) (size! Poly)) (! (= (lib!definitions_t.aligned.? addr! size!) (= (nClip (EucMod (%I addr!) (%I size!))) 0)) :pattern ((lib!definitions_t.aligned.? addr! size!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::cr3_spec")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((lib!spec_t.mem.impl&%1.cr3_spec.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PAGE_SIZE.) (= lib!definitions_t.PAGE_SIZE.? 4096)))
(assert (uInv SZ lib!definitions_t.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::inv")
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.inv.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.inv.) (forall ((self! Poly)) (! (= (lib!spec_t.mem.impl&%1.inv.? self!) (and (and (and (<= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!) 9214364837600034816) (forall ((s1$ Poly) (s2$ Poly)) (! (=> (and (has_type s1$ TYPE%lib!definitions_t.MemRegion.) (has_type s2$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? self!)) s1$) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? self!)) s2$)) (not (= s1$ s2$))) (not (lib!definitions_t.overlap.? s1$ s2$)))) :pattern ((lib!definitions_t.overlap.? s1$ s2$))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!))))) (I lib!definitions_t.PAGE_SIZE.?))) (= (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)))) lib!definitions_t.PAGE_SIZE.?))) :pattern ((lib!spec_t.mem.impl&%1.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MemRegionExec::view")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%4.view.? self!) (lib!definitions_t.MemRegion./MemRegion (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. self!)))) (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. self!)))))) :pattern ((lib!definitions_t.impl&%4.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.MemRegionExec.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? self!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_WIDTH")
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_WIDTH.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_PHYADDR_SPEC")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_PHYADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_PHYADDR_SPEC.) (= lib!definitions_t.MAX_PHYADDR_SPEC.? (uClip 64 (Sub (uClip 64 (bitshl (I 1) (I lib!definitions_t.MAX_PHYADDR_WIDTH.?))) 1)))))
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_LAYERS")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_LAYERS.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_LAYERS.) (= lib!definitions_t.X86_NUM_LAYERS.? 4)))
(assert (uInv SZ lib!definitions_t.X86_NUM_LAYERS.?))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_size")
(declare-fun req%lib!definitions_t.impl&%8.entry_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size. self! layer!) (=> %%global_location_label%%6 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size. self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_size.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::num_entries")
(declare-fun req%lib!definitions_t.impl&%8.num_entries. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.num_entries. self! layer!) (=> %%global_location_label%%7 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.num_entries. self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::num_entries")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.num_entries.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.num_entries.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.num_entries.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.num_entries.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_MAX_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.) (= lib!definitions_t.X86_MAX_ENTRY_SIZE.? (nClip (Mul (nClip (Mul (nClip (Mul 512 512)) 512)) 4096)))))
(assert (<= 0 lib!definitions_t.X86_MAX_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::X86_NUM_ENTRIES")
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_ENTRIES.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_ENTRIES.) (= lib!definitions_t.X86_NUM_ENTRIES.? 512)))
(assert (uInv SZ lib!definitions_t.X86_NUM_ENTRIES.?))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!) (=> %%global_location_label%%8 (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_size_is_next_layer_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.) (forall ((self! Poly) (i! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!) (=> (< (nClip (Add (%I i!) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i!) (nClip (Mul (lib!definitions_t.impl&%8.entry_size.? self! (I (nClip (Add (%I i!) 1)))) (lib!definitions_t.impl&%8.num_entries.? self! (I (nClip (Add (%I i!) 1))))))))) :pattern ((lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::inv")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.inv.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.inv.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%8.inv.? self!) (and (<= (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))) lib!definitions_t.X86_NUM_LAYERS.?) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (and (and (let ((tmp%%$ (lib!definitions_t.impl&%8.entry_size.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_MAX_ENTRY_SIZE.?))) (let ((tmp%%$ (lib!definitions_t.impl&%8.num_entries.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_NUM_ENTRIES.?)))) (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i$)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$)) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! i$)))))) :pattern ((lib!definitions_t.impl&%8.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::entry_base_from_index")
(assert (fuel_bool_default fuel%lib!definitions_t.entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (%I idx!) (%I entry_size!)))))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::entry_base")
(declare-fun req%lib!definitions_t.impl&%8.entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%9 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%10 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::entry_base")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!) (lib!definitions_t.entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::upper_vaddr")
(declare-fun req%lib!definitions_t.impl&%8.upper_vaddr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!) (and (=> %%global_location_label%%11 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%12 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::upper_vaddr")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.upper_vaddr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.upper_vaddr.) (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!) (lib!definitions_t.entry_base_from_index.? base! (I (lib!definitions_t.impl&%8.num_entries.? self! layer!)) (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT)) (<= 0 (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::L3_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L3_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L3_ENTRY_SIZE.) (= lib!definitions_t.L3_ENTRY_SIZE.? lib!definitions_t.PAGE_SIZE.?)))
(assert (uInv SZ lib!definitions_t.L3_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L2_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L2_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L2_ENTRY_SIZE.) (= lib!definitions_t.L2_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L3_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L2_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L1_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L1_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L1_ENTRY_SIZE.) (= lib!definitions_t.L1_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L2_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L1_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::L0_ENTRY_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.L0_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L0_ENTRY_SIZE.) (= lib!definitions_t.L0_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L1_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L0_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms lib::definitions_t::x86_arch_spec")
(assert (fuel_bool_default fuel%lib!definitions_t.x86_arch_spec.))
(declare-fun %%array%%0 (Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3))) (and (= (%%apply%%2 %%x%% 0) %%hole%%0) (= (%%apply%%2 %%x%% 1) %%hole%%1) (= (%%apply%%2 %%x%% 2) %%hole%%2) (= (%%apply%%2 %%x%% 3) %%hole%%3))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3)))))
(assert (=> (fuel_bool fuel%lib!definitions_t.x86_arch_spec.) (= lib!definitions_t.x86_arch_spec.? (lib!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!definitions_t.ArchLayer. $ (CONST_INT 4)) (array_new $ TYPE%lib!definitions_t.ArchLayer. 4 (%%array%%0 (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L0_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L1_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L2_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L3_ENTRY_SIZE.?)) (%I (I 512))))))))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MAX_BASE")
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_BASE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_BASE.) (= lib!definitions_t.MAX_BASE.? (nClip (Mul lib!definitions_t.X86_MAX_ENTRY_SIZE.? lib!definitions_t.X86_NUM_ENTRIES.?)))))
(assert (<= 0 lib!definitions_t.MAX_BASE.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_P")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_P.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_P.) (= lib!spec_t.hardware.MASK_FLAG_P.? (uClip 64 (bitshl (I 1) (I 0))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_P.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_RW")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_RW.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_RW.) (= lib!spec_t.hardware.MASK_FLAG_RW.? (uClip 64 (bitshl (I 1) (I 1))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_RW.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_US")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_US.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_US.) (= lib!spec_t.hardware.MASK_FLAG_US.? (uClip 64 (bitshl (I 1) (I 2))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_US.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_PWT")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_PWT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_PWT.) (= lib!spec_t.hardware.MASK_FLAG_PWT.? (uClip 64 (bitshl (I 1) (I 3))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_PWT.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_PCD")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_PCD.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_PCD.) (= lib!spec_t.hardware.MASK_FLAG_PCD.? (uClip 64 (bitshl (I 1) (I 4))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_PCD.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_A")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_A.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_A.) (= lib!spec_t.hardware.MASK_FLAG_A.? (uClip 64 (bitshl (I 1) (I 5))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_A.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_FLAG_XD")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_XD.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_XD.) (= lib!spec_t.hardware.MASK_FLAG_XD.? (uClip 64 (bitshl (I 1) (I 63))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_XD.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_PG_FLAG_D")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_D.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_D.) (= lib!spec_t.hardware.MASK_PG_FLAG_D.? (uClip 64 (bitshl (I 1) (I 6))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_D.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_PG_FLAG_G")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_G.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_G.) (= lib!spec_t.hardware.MASK_PG_FLAG_G.? (uClip 64 (bitshl (I 1) (I 8))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_G.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L1_PG_FLAG_PS")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.) (= lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L2_PG_FLAG_PS")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.) (= lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::PageDirectoryEntry::all_mb0_bits_are_zero")
(declare-fun req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. (Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. self!) (=> %%global_location_label%%13 (<= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 3))) :pattern ((req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 12))))))))) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L1_PG_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 30))))))))) (I 30))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_PG_FLAG_PAT")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT.) (= lib!spec_t.hardware.MASK_PG_FLAG_PAT.? (uClip 64 (bitshl (I 1) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L2_PG_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 21))))))))) (I 21))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L3_PG_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 12))))))))) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_L3_PG_FLAG_PAT")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.) (= lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::PageDirectoryEntry::view")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%3.view.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%3.view.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%3.view.? self!) (let ((v$ (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)))) (let ((flag_P$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_P.?))) lib!spec_t.hardware.MASK_FLAG_P.?))) (let ((flag_RW$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_RW.?))) lib!spec_t.hardware.MASK_FLAG_RW.?))) (let ((flag_US$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_US.?))) lib!spec_t.hardware.MASK_FLAG_US.?))) (let ((flag_PWT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_PWT.?))) lib!spec_t.hardware.MASK_FLAG_PWT.?))) (let ((flag_PCD$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_PCD.?))) lib!spec_t.hardware.MASK_FLAG_PCD.?))) (let ((flag_A$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_A.?))) lib!spec_t.hardware.MASK_FLAG_A.?))) (let ((flag_XD$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_XD.?))) lib!spec_t.hardware.MASK_FLAG_XD.?))) (let ((flag_D$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_D.?))) lib!spec_t.hardware.MASK_PG_FLAG_D.?))) (let ((flag_G$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_G.?))) lib!spec_t.hardware.MASK_PG_FLAG_G.?))) (ite (<= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 3) (ite (and (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_P.?))) lib!spec_t.hardware.MASK_FLAG_P.?) (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? self!)) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 0) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$)))) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 1) (ite (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?))) lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$))))) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 2) (ite (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?))) lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$)))))))) lib!spec_t.hardware.GhostPageDirectoryEntry./Empty) (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))))))))))) :pattern ((lib!spec_t.hardware.impl&%3.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? self!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((lib!spec_t.hardware.impl&%3.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::spec_read")
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.spec_read.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.spec_read.) (forall ((self! Poly) (idx! Poly) (region! Poly)) (! (= (lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!) (%I (vstd!seq.Seq.index.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? self! region!)) idx!))) :pattern ((lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!))))))
(assert (forall ((self! Poly) (idx! Poly) (region! Poly)) (! (=> (and (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type idx! NAT) (has_type region! TYPE%lib!definitions_t.MemRegion.)) (uInv 64 (lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!))) :pattern ((lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::mem::PageTableMemory::alloc_available_pages")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (<= 0 (lib!spec_t.mem.impl&%1.alloc_available_pages.? self!))) :pattern ((lib!spec_t.mem.impl&%1.alloc_available_pages.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::PageTableEntryExec::view")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%7.view.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%7.view.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%7.view.? self!) (lib!definitions_t.PageTableEntry./PageTableEntry (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. self!)))))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%lib!definitions_t.PageTableEntryExec. self!)))))) :pattern ((lib!definitions_t.impl&%7.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.PageTableEntryExec.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? self!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!definitions_t.impl&%7.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::between")
(assert (fuel_bool_default fuel%lib!definitions_t.between.))
(assert (=> (fuel_bool fuel%lib!definitions_t.between.) (forall ((x! Poly) (a! Poly) (b! Poly)) (! (= (lib!definitions_t.between.? x! a! b!) (and (<= (%I a!) (%I x!)) (< (%I x!) (%I b!)))) :pattern ((lib!definitions_t.between.? x! a! b!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!))))))
(set-info :comment ";; Function-Axioms lib::extra::result_map_ok")
(assert (fuel_bool_default fuel%lib!extra.result_map_ok.))
(assert (=> (fuel_bool fuel%lib!extra.result_map_ok.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (res! Poly) (f! Poly)) (! (= (lib!extra.result_map_ok.? A&. A& B&. B& C&. C& res! f!) (ite (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)) (let ((a$ (core!result.Result./Ok/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Ok (%%apply%%0 (%Poly%fun%1. f!) a$))) (let ((b$ (core!result.Result./Err/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Err b$)))) :pattern ((lib!extra.result_map_ok.? A&. A& B&. B& C&. C& res! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (res! Poly) (f! Poly)) (! (=> (and (has_type res! (TYPE%core!result.Result. A&. A& B&. B&)) (has_type f! (TYPE%fun%1. A&. A& C&. C&))) (has_type (Poly%core!result.Result. (lib!extra.result_map_ok.? A&. A& B&. B& C&. C& res! f!)) (TYPE%core!result.Result. C&. C& B&. B&))) :pattern ((lib!extra.result_map_ok.? A&. A& B&. B& C&. C& res! f!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::cr3")
(declare-fun ens%lib!spec_t.mem.impl&%1.cr3. (lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (res! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.cr3. self! res!) (and (has_type (Poly%lib!definitions_t.MemRegionExec. res!) TYPE%lib!definitions_t.MemRegionExec.) (= res! (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.cr3. self! res!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::new_seq")
(assert (fuel_bool_default fuel%lib!definitions_t.new_seq.))
(declare-const fuel_nat%lib!definitions_t.new_seq. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%) (lib!definitions_t.rec%new_seq.? T&. T& i! e! zero)) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%)) (ite (= (%I i!) 0) (vstd!seq.Seq.empty.? T&. T&) (vstd!seq.Seq.push.? T&. T& (lib!definitions_t.rec%new_seq.? T&. T& (I (nClip (Sub (%I i!) 1))) e! fuel%) e!)))) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!definitions_t.new_seq.) (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.new_seq.? T&. T& i! e!) (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel_nat%lib!definitions_t.new_seq.)))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (has_type (lib!definitions_t.new_seq.? T&. T& i! e!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::alloc_page")
(declare-fun req%lib!spec_t.mem.impl&%1.alloc_page. (lib!spec_t.mem.PageTableMemory.) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.)) (! (= (req%lib!spec_t.mem.impl&%1.alloc_page. pre%self!) (and (=> %%global_location_label%%14 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%15 (< 0 (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!)))))) :pattern ((req%lib!spec_t.mem.impl&%1.alloc_page. pre%self!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.alloc_page. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.alloc_page. pre%self! self! r!) (and (has_type (Poly%lib!definitions_t.MemRegionExec. r!) TYPE%lib!definitions_t.MemRegionExec.) (= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (Sub (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!)) 1)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) lib!definitions_t.PAGE_SIZE.?) (<= (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) lib!definitions_t.PAGE_SIZE.?) lib!definitions_t.MAX_PHYADDR_SPEC.?) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (I lib!definitions_t.PAGE_SIZE.?)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (%Poly%vstd!seq.Seq<u64.>. (lib!definitions_t.new_seq.? $ (UINT 64) (I 512) (I 0)))) (forall ((r2$ Poly)) (! (=> (has_type r2$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r2$) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r2$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$)))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. self!)))) :pattern ((ens%lib!spec_t.mem.impl&%1.alloc_page. pre%self! self! r!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::dealloc_page")
(declare-fun req%lib!spec_t.mem.impl&%1.dealloc_page. (lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (req%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! r!) (and (=> %%global_location_label%%16 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%17 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))))) :pattern ((req%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! r!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.dealloc_page. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! self! r!) (and (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (forall ((r2$ Poly)) (! (=> (has_type r2$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r2$) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r2$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$)))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. self!)))) :pattern ((ens%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! self! r!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::WORD_SIZE")
(assert (fuel_bool_default fuel%lib!definitions_t.WORD_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.WORD_SIZE.) (= lib!definitions_t.WORD_SIZE.? 8)))
(assert (uInv SZ lib!definitions_t.WORD_SIZE.?))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::write")
(declare-fun req%lib!spec_t.mem.impl&%1.write. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (value! Int)) (! (= (req%lib!spec_t.mem.impl&%1.write. pre%self! pbase! idx! region! value!) (and (=> %%global_location_label%%18 (= pbase! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. region!))))) (=> %%global_location_label%%19 (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%20 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%21 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. region!))) (=> %%global_location_label%%22 (< idx! 512)))) :pattern ((req%lib!spec_t.mem.impl&%1.write. pre%self! pbase! idx! region! value!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.write. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (value! Int)) (! (= (ens%lib!spec_t.mem.impl&%1.write. pre%self! self! pbase! idx! region! value!) (and (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (Poly%lib!definitions_t.MemRegion. region!)) (%Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq.update.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) (Poly%lib!definitions_t.MemRegion. region!))) (I idx!) (I value!)))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r$) region!)) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r$)) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r$)))) (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.write. pre%self! self! pbase! idx! region! value!)))))
(set-info :comment ";; Function-Specs lib::spec_t::mem::PageTableMemory::read")
(declare-fun req%lib!spec_t.mem.impl&%1.read. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion.) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.)) (! (= (req%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region!) (and (=> %%global_location_label%%23 (= pbase! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. region!))))) (=> %%global_location_label%%24 (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%25 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!))) (Poly%lib!definitions_t.MemRegion. region!))) (=> %%global_location_label%%26 (< idx! 512)))) :pattern ((req%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.read. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (res! Int)) (! (= (ens%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region! res!) (and (uInv 64 res!) (= res! (lib!spec_t.mem.impl&%1.spec_read.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (I idx!) (Poly%lib!definitions_t.MemRegion. region!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region! res!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Ok_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Err")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Err.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Err.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Err_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Err_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Err_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Err_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Err/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%3 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%3 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::disjoint")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Recommends lib::impl_u::l2_impl::PT::layer_in_range")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:592:1: 592:61 (#0)")
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::layer_in_range")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.layer_in_range.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.layer_in_range.) (forall ((layer! Poly)) (! (= (lib!impl_u.l2_impl.PT.layer_in_range.? layer!) (< (%I layer!) lib!definitions_t.X86_NUM_LAYERS.?)) :pattern ((lib!impl_u.l2_impl.PT.layer_in_range.? layer!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::view_at")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.view_at.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.view_at.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (i! Poly)) (! (= (lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i!) (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry (%I (I (lib!spec_t.mem.impl&%1.spec_read.? mem! i! (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (%I layer!))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i!))))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (i! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type i! NAT)) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_addr")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%1.get_Directory_addr.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%1.get_Directory_addr.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%1.get_Directory_addr.? self!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Directory_addr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.impl&%1.get_Directory_addr.? self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Directory_addr.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_RW")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_RW.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_RW.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%1.get_Directory_flag_RW.? self!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Directory_flag_RW.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_US")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_US.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_US.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%1.get_Directory_flag_US.? self!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Directory_flag_US.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::GhostPageDirectoryEntry::get_Directory_flag_XD")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_XD.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_XD.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%1.get_Directory_flag_XD.? self!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Directory_flag_XD.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::directories_have_flags")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.directories_have_flags.))
(define-fun is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ ((c lib!spec_t.hardware.GhostPageDirectoryEntry.)) Bool ((_ is lib!spec_t.hardware.GhostPageDirectoryEntry./Directory) c))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.directories_have_flags.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (lib!impl_u.l2_impl.PT.directories_have_flags.? mem! pt! layer! ptr!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (let ((entry$ (lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i$))) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$) (and (and (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$)))) (not (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$))))))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i$))))) :pattern ((lib!impl_u.l2_impl.PT.directories_have_flags.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::ghost_pt_matches_structure")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? mem! pt! layer! ptr!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (let ((entry$ (lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i$))) (= (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$))))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$) (lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i$))))) :pattern ((lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::ghost_pt_used_regions_rtrancl")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? mem! pt! layer! ptr!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (forall ((i$ Poly) (r$ Poly)) (! (=> (and (has_type i$ NAT) (has_type r$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))))) r$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) r$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))))) r$) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) r$)))))) :pattern ((lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::ghost_pt_used_regions_pairwise_disjoint")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? mem! pt! layer! ptr!) (forall ((i$ Poly) (j$ Poly) (r$ Poly)) (! (=> (and (has_type i$ NAT) (has_type j$ NAT) (has_type r$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (and (and (and (not (= i$ j$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))))) r$)) (< (%I j$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) j$)))) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) j$)))))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))))) r$) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) j$)))))) r$))))) :pattern ((lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::ghost_pt_region_notin_used_regions")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.? mem! pt! layer! ptr!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))))) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$)))))) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))))))) :pattern ((lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::PageDirectoryEntry::hp_pat_is_zero")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.))
(define-fun is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ ((c lib!spec_t.hardware.GhostPageDirectoryEntry.)) Bool ((_ is lib!spec_t.hardware.GhostPageDirectoryEntry./Page) c))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.) (forall ((self! Poly)) (! (= (lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? self!) (and (=> (and (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ (lib!spec_t.hardware.impl&%3.view.? self!)) (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 1)) (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) (I lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) 0)) (=> (and (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ (lib!spec_t.hardware.impl&%3.view.? self!)) (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 2)) (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) (I lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) 0)))) :pattern ((lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::entry_at_spec")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.entry_at_spec.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.entry_at_spec.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (i! Poly)) (! (= (lib!impl_u.l2_impl.PT.entry_at_spec.? mem! pt! layer! ptr! i!) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry (%I (I (lib!spec_t.mem.impl&%1.spec_read.? mem! i! (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (%I layer!))) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? mem! pt! layer! ptr! i!))))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (i! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type i! NAT)) (has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!impl_u.l2_impl.PT.entry_at_spec.? mem! pt! layer! ptr! i!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? mem! pt! layer! ptr! i!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::hp_pat_is_zero")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.hp_pat_is_zero.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.hp_pat_is_zero.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (lib!impl_u.l2_impl.PT.hp_pat_is_zero.? mem! pt! layer! ptr!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!impl_u.l2_impl.PT.entry_at_spec.? mem! pt! layer! ptr! i$))))) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? mem! pt! layer! ptr! i$))))) :pattern ((lib!impl_u.l2_impl.PT.hp_pat_is_zero.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::entry_mb0_bits_are_zero")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero.? mem! pt! layer! ptr!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!impl_u.l2_impl.PT.entry_at_spec.? mem! pt! layer! ptr! i$))))) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? mem! pt! layer! ptr! i$))))) :pattern ((lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::directories_obey_invariant_at")
(declare-fun req%lib!impl_u.l2_impl.PT.directories_obey_invariant_at. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (req%lib!impl_u.l2_impl.PT.directories_obey_invariant_at. mem! pt! layer! ptr!) (=> %%global_location_label%%27 (lib!impl_u.l2_impl.PT.layer_in_range.? layer!))) :pattern ((req%lib!impl_u.l2_impl.PT.directories_obey_invariant_at. mem! pt! layer! ptr!)))))
(set-info :comment ";; Spec-Termination lib::impl_u::l2_impl::PT::directories_obey_invariant_at")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:576:1: 576:118 (#0)")
(set-info :comment ";; Spec-Termination lib::impl_u::l2_impl::PT::inv_at")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:596:1: 596:104 (#0)")
(set-info :comment ";; Function-Recommends lib::impl_u::l2_impl::PT::inv_at")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:596:1: 596:104 (#0)")
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::directories_obey_invariant_at")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.directories_obey_invariant_at.))
(declare-const fuel_nat%lib!impl_u.l2_impl.PT.directories_obey_invariant_at. Fuel)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? mem! pt! layer! ptr! fuel%) (lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? mem! pt! layer! ptr! zero)) :pattern ((lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? mem! pt! layer! ptr! fuel%)))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (fuel% Fuel)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (lib!impl_u.l2_impl.PT.layer_in_range.? layer!)) (= (lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? mem! pt! layer! ptr! (succ fuel%)) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (let ((entry$ (lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i$))) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$) (lib!impl_u.l2_impl.PT.rec%inv_at.? mem! (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) i$))) (I (nClip (Add (%I layer!) 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$)))) fuel%))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i$)))))) :pattern ((lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? mem! pt! layer! ptr! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.directories_obey_invariant_at.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (lib!impl_u.l2_impl.PT.layer_in_range.? layer!)) (= (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? mem! pt! layer! ptr!) (lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? mem! pt! layer! ptr! (succ (succ fuel_nat%lib!impl_u.l2_impl.PT.directories_obey_invariant_at.))))) :pattern ((lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::inv_at")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.inv_at.))
(declare-const fuel_nat%lib!impl_u.l2_impl.PT.inv_at. Fuel)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l2_impl.PT.rec%inv_at.? mem! pt! layer! ptr! fuel%) (lib!impl_u.l2_impl.PT.rec%inv_at.? mem! pt! layer! ptr! zero)) :pattern ((lib!impl_u.l2_impl.PT.rec%inv_at.? mem! pt! layer! ptr! fuel%)))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (fuel% Fuel)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ))) (= (lib!impl_u.l2_impl.PT.rec%inv_at.? mem! pt! layer! ptr! (succ fuel%)) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (uClip SZ (EucMod (%I ptr!) lib!definitions_t.PAGE_SIZE.?)) 0) (lib!spec_t.mem.impl&%1.inv.? mem!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? mem!)) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (%I ptr!))) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!))))) lib!definitions_t.PAGE_SIZE.?)) (= (vstd!seq.Seq.len.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? mem! (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (lib!impl_u.l2_impl.PT.layer_in_range.? layer!)) (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!)))) lib!definitions_t.X86_NUM_ENTRIES.?)) (lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? mem! pt! layer! ptr! fuel%)) (lib!impl_u.l2_impl.PT.directories_have_flags.? mem! pt! layer! ptr!)) (lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? mem! pt! layer! ptr!)) (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? mem! pt! layer! ptr!)) (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? mem! pt! layer! ptr!)) (lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.? mem! pt! layer! ptr!)) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? mem!)))) (lib!impl_u.l2_impl.PT.hp_pat_is_zero.? mem! pt! layer! ptr!)) (lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero.? mem! pt! layer! ptr!)))) :pattern ((lib!impl_u.l2_impl.PT.rec%inv_at.? mem! pt! layer! ptr! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.inv_at.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ))) (= (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!) (lib!impl_u.l2_impl.PT.rec%inv_at.? mem! pt! layer! ptr! (succ (succ fuel_nat%lib!impl_u.l2_impl.PT.inv_at.))))) :pattern ((lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Recommends lib::impl_u::l2_impl::PT::inv")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:523:1: 523:77 (#0)")
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::inv")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.inv.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.inv.) (forall ((mem! Poly) (pt! Poly)) (! (= (lib!impl_u.l2_impl.PT.inv.? mem! pt!) (and (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. pt!)) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? mem!)))) (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! (I 0) (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? mem!)))))))) :pattern ((lib!impl_u.l2_impl.PT.inv.? mem! pt!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::empty_at")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.empty_at.))
(define-fun is-lib!spec_t.hardware.GhostPageDirectoryEntry./Empty_ ((c lib!spec_t.hardware.GhostPageDirectoryEntry.)) Bool ((_ is lib!spec_t.hardware.GhostPageDirectoryEntry./Empty) c))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.empty_at.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly)) (! (= (lib!impl_u.l2_impl.PT.empty_at.? mem! pt! layer! ptr!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Empty_ (lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i$)))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! i$))))) :pattern ((lib!impl_u.l2_impl.PT.empty_at.? mem! pt! layer! ptr!))))))
(set-info :comment ";; Function-Axioms lib::definitions_u::permissive_flags")
(assert (fuel_bool_default fuel%lib!definitions_u.permissive_flags.))
(assert (=> (fuel_bool fuel%lib!definitions_u.permissive_flags.) (= lib!definitions_u.permissive_flags.? (lib!definitions_t.Flags./Flags (%B (B true)) (%B (B false)) (%B (B false))))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::interp_at_entry")
(declare-fun req%lib!impl_u.l2_impl.PT.interp_at_entry. (Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (idx! Poly)) (! (= (req%lib!impl_u.l2_impl.PT.interp_at_entry. mem! pt! layer! ptr! base_vaddr! idx!) (=> %%global_location_label%%28 (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!))) :pattern ((req%lib!impl_u.l2_impl.PT.interp_at_entry. mem! pt! layer! ptr! base_vaddr! idx!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::interp_at_aux")
(declare-fun req%lib!impl_u.l2_impl.PT.interp_at_aux. (Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (init! Poly)) (! (= (req%lib!impl_u.l2_impl.PT.interp_at_aux. mem! pt! layer! ptr! base_vaddr! init!) (=> %%global_location_label%%29 (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!))) :pattern ((req%lib!impl_u.l2_impl.PT.interp_at_aux. mem! pt! layer! ptr! base_vaddr! init!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::interp_at")
(declare-fun req%lib!impl_u.l2_impl.PT.interp_at. (Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly)) (! (= (req%lib!impl_u.l2_impl.PT.interp_at. mem! pt! layer! ptr! base_vaddr!) (=> %%global_location_label%%30 (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!))) :pattern ((req%lib!impl_u.l2_impl.PT.interp_at. mem! pt! layer! ptr! base_vaddr!)))))
(set-info :comment ";; Spec-Termination lib::impl_u::l2_impl::PT::interp_at_entry")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:678:1: 678:140 (#0)")
(set-info :comment ";; Spec-Termination lib::impl_u::l2_impl::PT::interp_at_aux")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:702:1: 702:159 (#0)")
(set-info :comment ";; Spec-Termination lib::impl_u::l2_impl::PT::interp_at")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:663:1: 663:124 (#0)")
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::interp_at_entry")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.interp_at_entry.))
(declare-const fuel_nat%lib!impl_u.l2_impl.PT.interp_at_entry. Fuel)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (idx! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l2_impl.PT.rec%interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx! fuel%) (lib!impl_u.l2_impl.PT.rec%interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx! zero)) :pattern ((lib!impl_u.l2_impl.PT.rec%interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx! fuel%)))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (idx! Poly) (fuel% Fuel)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type base_vaddr! NAT) (has_type idx! NAT) (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!)) (= (lib!impl_u.l2_impl.PT.rec%interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx! (succ fuel%)) (let ((tmp%%$ (lib!impl_u.l2_impl.PT.view_at.? mem! pt! layer! ptr! idx!))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ tmp%%$) (let ((dir_addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (let ((entry_base$ (lib!definitions_t.entry_base_from_index.? base_vaddr! idx! (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) layer!))))) (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.rec%interp_at.? mem! (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. pt!))) idx!))) (I (nClip (Add (%I layer!) 1))) (I dir_addr$) (I entry_base$) fuel%)))))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ tmp%%$) (let ((addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (let ((flag_RW$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (let ((flag_US$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (let ((flag_XD$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (lib!impl_u.l1.NodeEntry./Page (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I (I addr$)) (%I (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) layer!)))))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags./Flags (%B (B flag_RW$)) (%B (B (not flag_US$))) (%B (B flag_XD$))))))))))))) lib!impl_u.l1.NodeEntry./Empty))))) :pattern ((lib!impl_u.l2_impl.PT.rec%interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.interp_at_entry.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (idx! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type base_vaddr! NAT) (has_type idx! NAT) (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!)) (= (lib!impl_u.l2_impl.PT.interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx!) (lib!impl_u.l2_impl.PT.rec%interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx! (succ (succ (succ fuel_nat%lib!impl_u.l2_impl.PT.interp_at_entry.)))))) :pattern ((lib!impl_u.l2_impl.PT.interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx!))))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (idx! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type base_vaddr! NAT) (has_type idx! NAT)) (has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l2_impl.PT.interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx!)) TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((lib!impl_u.l2_impl.PT.interp_at_entry.? mem! pt! layer! ptr! base_vaddr! idx!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::interp_at_aux")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.interp_at_aux.))
(declare-const fuel_nat%lib!impl_u.l2_impl.PT.interp_at_aux. Fuel)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (init! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l2_impl.PT.rec%interp_at_aux.? mem! pt! layer! ptr! base_vaddr! init! fuel%) (lib!impl_u.l2_impl.PT.rec%interp_at_aux.? mem! pt! layer! ptr! base_vaddr! init! zero)) :pattern ((lib!impl_u.l2_impl.PT.rec%interp_at_aux.? mem! pt! layer! ptr! base_vaddr! init! fuel%)))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (init! Poly) (fuel% Fuel)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type base_vaddr! NAT) (has_type init! (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.)) (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!)) (= (lib!impl_u.l2_impl.PT.rec%interp_at_aux.? mem! pt! layer! ptr! base_vaddr! init! (succ fuel%)) (ite (>= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. init!) lib!definitions_t.X86_NUM_ENTRIES.?) (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!) (let ((entry$ (lib!impl_u.l2_impl.PT.rec%interp_at_entry.? mem! pt! layer! ptr! base_vaddr! (I (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. init!)) fuel%))) (lib!impl_u.l2_impl.PT.rec%interp_at_aux.? mem! pt! layer! ptr! base_vaddr! (vstd!seq.Seq.push.? $ TYPE%lib!impl_u.l1.NodeEntry. init! (Poly%lib!impl_u.l1.NodeEntry. entry$)) fuel%))))) :pattern ((lib!impl_u.l2_impl.PT.rec%interp_at_aux.? mem! pt! layer! ptr! base_vaddr! init! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.interp_at_aux.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (init! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type base_vaddr! NAT) (has_type init! (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.)) (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!)) (= (lib!impl_u.l2_impl.PT.interp_at_aux.? mem! pt! layer! ptr! base_vaddr! init!) (lib!impl_u.l2_impl.PT.rec%interp_at_aux.? mem! pt! layer! ptr! base_vaddr! init! (succ fuel_nat%lib!impl_u.l2_impl.PT.interp_at_aux.)))) :pattern ((lib!impl_u.l2_impl.PT.interp_at_aux.? mem! pt! layer! ptr! base_vaddr! init!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::interp_at")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.interp_at.))
(declare-const fuel_nat%lib!impl_u.l2_impl.PT.interp_at. Fuel)
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l2_impl.PT.rec%interp_at.? mem! pt! layer! ptr! base_vaddr! fuel%) (lib!impl_u.l2_impl.PT.rec%interp_at.? mem! pt! layer! ptr! base_vaddr! zero)) :pattern ((lib!impl_u.l2_impl.PT.rec%interp_at.? mem! pt! layer! ptr! base_vaddr! fuel%)))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly) (fuel% Fuel)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type base_vaddr! NAT) (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!)) (= (lib!impl_u.l2_impl.PT.rec%interp_at.? mem! pt! layer! ptr! base_vaddr! (succ fuel%)) (lib!impl_u.l1.Directory./Directory (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l2_impl.PT.rec%interp_at_aux.? mem! pt! layer! ptr! base_vaddr! (vstd!seq.Seq.empty.? $ TYPE%lib!impl_u.l1.NodeEntry.) fuel%))) (%I layer!) (%I base_vaddr!) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?)) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. lib!definitions_u.permissive_flags.?))))) :pattern ((lib!impl_u.l2_impl.PT.rec%interp_at.? mem! pt! layer! ptr! base_vaddr! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.interp_at.) (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type base_vaddr! NAT) (lib!impl_u.l2_impl.PT.inv_at.? mem! pt! layer! ptr!)) (= (lib!impl_u.l2_impl.PT.interp_at.? mem! pt! layer! ptr! base_vaddr!) (lib!impl_u.l2_impl.PT.rec%interp_at.? mem! pt! layer! ptr! base_vaddr! (succ (succ (succ fuel_nat%lib!impl_u.l2_impl.PT.interp_at.)))))) :pattern ((lib!impl_u.l2_impl.PT.interp_at.? mem! pt! layer! ptr! base_vaddr!))))))
(assert (forall ((mem! Poly) (pt! Poly) (layer! Poly) (ptr! Poly) (base_vaddr! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.) (has_type layer! NAT) (has_type ptr! (UINT SZ)) (has_type base_vaddr! NAT)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? mem! pt! layer! ptr! base_vaddr!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l2_impl.PT.interp_at.? mem! pt! layer! ptr! base_vaddr!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::interp")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.interp.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.interp.) (forall ((mem! Poly) (pt! Poly)) (! (= (lib!impl_u.l2_impl.PT.interp.? mem! pt!) (lib!impl_u.l2_impl.PT.interp_at.? mem! pt! (I 0) (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? mem!))))) (I 0))) :pattern ((lib!impl_u.l2_impl.PT.interp.? mem! pt!))))))
(assert (forall ((mem! Poly) (pt! Poly)) (! (=> (and (has_type mem! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type pt! TYPE%lib!impl_u.l2_impl.PTDir.)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp.? mem! pt!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l2_impl.PT.interp.? mem! pt!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::contains_entry_size_at_index_atleast")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.) (forall ((self! Poly) (entry_size! Poly) (min_idx! Poly)) (! (= (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! min_idx!) (exists ((i$ Poly)) (! (and (has_type i$ NAT) (and (and (<= (%I min_idx!) (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i$) (%I entry_size!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$))))) :pattern ((lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! min_idx!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::PT::accepted_mapping")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.PT.accepted_mapping.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.PT.accepted_mapping.) (forall ((vaddr! Poly) (pte! Poly)) (! (= (lib!impl_u.l2_impl.PT.accepted_mapping.? vaddr! pte!) (and (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I 1)) (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))) lib!definitions_t.MAX_PHYADDR_SPEC.?))) :pattern ((lib!impl_u.l2_impl.PT.accepted_mapping.? vaddr! pte!))))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::contains_entry_size")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.contains_entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.contains_entry_size.) (forall ((self! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.impl&%8.contains_entry_size.? self! entry_size!) (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! (I 0))) :pattern ((lib!definitions_t.impl&%8.contains_entry_size.? self! entry_size!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::mappings_are_of_valid_size")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self!) (forall ((va$ Poly)) (! (=> (has_type va$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) va$) (lib!definitions_t.impl&%8.contains_entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$)))))))))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$))))))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$)))))))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::mappings_are_aligned")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_are_aligned.? self!) (forall ((va$ Poly)) (! (=> (has_type va$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) va$) (and (lib!definitions_t.aligned.? va$ (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$)))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$))))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$))))))))))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$))))))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$)))))))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_are_aligned.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::mappings_dont_overlap")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_dont_overlap.? self!) (forall ((b1$ Poly) (b2$ Poly)) (! (=> (and (has_type b1$ NAT) (has_type b2$ NAT)) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b2$)) (or (= b1$ b2$) (not (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b1$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$)))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b2$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b2$))))))))))))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b2$)) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b2$))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_dont_overlap.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::candidate_mapping_in_bounds")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! base! pte!) (and (<= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!)) (%I base!)) (<= (nClip (Add (%I base!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!))))) :pattern ((lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! base! pte!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::mappings_in_bounds")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_in_bounds.? self!) (forall ((b1$ Poly)) (! (=> (has_type b1$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b1$) (lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! b1$ (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$)))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$)) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b1$)) :pattern ((lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! b1$ (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$)))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_in_bounds.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::inv")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.inv.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.inv.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.inv.? self!) (and (and (and (and (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))))) (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))))) (lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self!)) (lib!impl_u.l0.impl&%0.mappings_are_aligned.? self!)) (lib!impl_u.l0.impl&%0.mappings_dont_overlap.? self!)) (lib!impl_u.l0.impl&%0.mappings_in_bounds.? self!))) :pattern ((lib!impl_u.l0.impl&%0.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::accepted_mapping")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.accepted_mapping.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.accepted_mapping.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l0.impl&%0.accepted_mapping.? self! base! pte!) (and (and (and (lib!definitions_t.aligned.? base! (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! base! pte!)) (lib!definitions_t.impl&%8.contains_entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))))) :pattern ((lib!impl_u.l0.impl&%0.accepted_mapping.? self! base! pte!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::valid_mapping")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.valid_mapping.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.valid_mapping.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l0.impl&%0.valid_mapping.? self! base! pte!) (forall ((b$ Poly)) (! (=> (has_type b$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b$) (not (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I base!) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b$)))))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b$))))) :pattern ((lib!impl_u.l0.impl&%0.valid_mapping.? self! base! pte!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::map_frame")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.map_frame.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.map_frame.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l0.impl&%0.map_frame.? self! base! pte!) (ite (lib!impl_u.l0.impl&%0.accepted_mapping.? self! base! pte!) (ite (lib!impl_u.l0.impl&%0.valid_mapping.? self! base! pte!) (core!result.Result./Ok (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) base! pte!)) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!))))))) (core!result.Result./Err self!)) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? $ (TYPE%core!result.Result. $ TYPE%lib!impl_u.l0.PageTableContents. $ TYPE%lib!impl_u.l0.PageTableContents.))))) :pattern ((lib!impl_u.l0.impl&%0.map_frame.? self! base! pte!))))))
(assert (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l0.PageTableContents.) (has_type base! NAT) (has_type pte! TYPE%lib!definitions_t.PageTableEntry.)) (has_type (Poly%core!result.Result. (lib!impl_u.l0.impl&%0.map_frame.? self! base! pte!)) (TYPE%core!result.Result. $ TYPE%lib!impl_u.l0.PageTableContents. $ TYPE%lib!impl_u.l0.PageTableContents.))) :pattern ((lib!impl_u.l0.impl&%0.map_frame.? self! base! pte!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::accepted_resolve")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.accepted_resolve.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.accepted_resolve.) (forall ((self! Poly) (vaddr! Poly)) (! (= (lib!impl_u.l0.impl&%0.accepted_resolve.? self! vaddr!) (lib!definitions_t.between.? vaddr! (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!))) (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!))))) :pattern ((lib!impl_u.l0.impl&%0.accepted_resolve.? self! vaddr!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l0::PageTableContents::resolve")
(declare-fun req%lib!impl_u.l0.impl&%0.resolve. (Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((self! Poly) (vaddr! Poly)) (! (= (req%lib!impl_u.l0.impl&%0.resolve. self! vaddr!) (=> %%global_location_label%%31 (lib!impl_u.l0.impl&%0.accepted_resolve.? self! vaddr!))) :pattern ((req%lib!impl_u.l0.impl&%0.resolve. self! vaddr!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::resolve")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.resolve.))
(declare-fun %%choose%%0 (Type Type Dcr Type Dcr Type Poly Poly Dcr Type Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly)) (! (=> (exists ((base$ Poly) (pte$ Poly)) (! (and (has_type base$ %%hole%%0) (has_type pte$ %%hole%%1) (and (vstd!map_lib.impl&%0.contains_pair.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 base$ pte$) (lib!definitions_t.between.? %%hole%%7 base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base$ pte$)))) (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ %%hole%%0) (has_type pte$ %%hole%%1) (and (vstd!map_lib.impl&%0.contains_pair.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 base$ pte$) (lib!definitions_t.between.? %%hole%%7 base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) (Poly%tuple%2. (tuple%2./tuple%2 base$ pte$)))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base$ pte$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12)))))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.resolve.) (forall ((self! Poly) (vaddr! Poly)) (! (= (lib!impl_u.l0.impl&%0.resolve.? self! vaddr!) (ite (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) base$ pte$) (lib!definitions_t.between.? vaddr! base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) base$ pte$)))) (let ((tmp%%$ (%Poly%tuple%2. (as_type (%%choose%%0 NAT TYPE%lib!definitions_t.PageTableEntry. $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) vaddr! $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (I base$) (Poly%lib!definitions_t.PageTableEntry. pte$))))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))) :pattern ((lib!impl_u.l0.impl&%0.resolve.? self! vaddr!))))))
(assert (forall ((self! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l0.PageTableContents.) (has_type vaddr! NAT)) (has_type (Poly%core!result.Result. (lib!impl_u.l0.impl&%0.resolve.? self! vaddr!)) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) :pattern ((lib!impl_u.l0.impl&%0.resolve.? self! vaddr!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::remove")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.remove.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.remove.) (forall ((self! Poly) (n! Poly)) (! (= (lib!impl_u.l0.impl&%0.remove.? self! n!) (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) n!)) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!)))))) :pattern ((lib!impl_u.l0.impl&%0.remove.? self! n!))))))
(assert (forall ((self! Poly) (n! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l0.PageTableContents.) (has_type n! NAT)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.impl&%0.remove.? self! n!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((lib!impl_u.l0.impl&%0.remove.? self! n!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::accepted_unmap")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.accepted_unmap.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.accepted_unmap.) (forall ((self! Poly) (base! Poly)) (! (= (lib!impl_u.l0.impl&%0.accepted_unmap.? self! base!) (and (lib!definitions_t.between.? base! (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!))) (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (exists ((size$ Poly)) (! (and (has_type size$ NAT) (and (lib!definitions_t.impl&%8.contains_entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))) size$) (lib!definitions_t.aligned.? base! size$))) :pattern ((lib!definitions_t.impl&%8.contains_entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))) size$)) :pattern ((lib!definitions_t.aligned.? base! size$)))))) :pattern ((lib!impl_u.l0.impl&%0.accepted_unmap.? self! base!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l0::PageTableContents::unmap")
(declare-fun req%lib!impl_u.l0.impl&%0.unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((self! Poly) (base! Poly)) (! (= (req%lib!impl_u.l0.impl&%0.unmap. self! base!) (=> %%global_location_label%%32 (lib!impl_u.l0.impl&%0.accepted_unmap.? self! base!))) :pattern ((req%lib!impl_u.l0.impl&%0.unmap. self! base!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l0::PageTableContents::unmap")
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.unmap.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.unmap.) (forall ((self! Poly) (base! Poly)) (! (= (lib!impl_u.l0.impl&%0.unmap.? self! base!) (ite (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) base!) (core!result.Result./Ok (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.impl&%0.remove.? self! base!))) (core!result.Result./Err self!))) :pattern ((lib!impl_u.l0.impl&%0.unmap.? self! base!))))))
(assert (forall ((self! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l0.PageTableContents.) (has_type base! NAT)) (has_type (Poly%core!result.Result. (lib!impl_u.l0.impl&%0.unmap.? self! base!)) (TYPE%core!result.Result. $ TYPE%lib!impl_u.l0.PageTableContents. $ TYPE%lib!impl_u.l0.PageTableContents.))) :pattern ((lib!impl_u.l0.impl&%0.unmap.? self! base!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::NodeEntry::arrow_Directory_0")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%0.arrow_Directory_0.? self!) (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. self!))) :pattern ((lib!impl_u.l1.impl&%0.arrow_Directory_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%0.arrow_Directory_0.? self!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.impl&%0.arrow_Directory_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::NodeEntry::arrow_Page_0")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%0.arrow_Page_0.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%0.arrow_Page_0.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%0.arrow_Page_0.? self!) (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. self!))) :pattern ((lib!impl_u.l1.impl&%0.arrow_Page_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.impl&%0.arrow_Page_0.? self!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!impl_u.l1.impl&%0.arrow_Page_0.? self!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::entry_size")
(declare-fun req%lib!impl_u.l1.impl&%1.entry_size. (Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.entry_size. self!) (=> %%global_location_label%%33 (< (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))))))))) :pattern ((req%lib!impl_u.l1.impl&%1.entry_size. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::entry_size")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.entry_size.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.entry_size.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.entry_size.? self!) (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))) :pattern ((lib!impl_u.l1.impl&%1.entry_size.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.impl&%1.entry_size.? self!))) :pattern ((lib!impl_u.l1.impl&%1.entry_size.? self!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::num_entries")
(declare-fun req%lib!impl_u.l1.impl&%1.num_entries. (Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.num_entries. self!) (=> %%global_location_label%%34 (< (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))))))))) :pattern ((req%lib!impl_u.l1.impl&%1.num_entries. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::num_entries")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.num_entries.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.num_entries.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.num_entries.? self!) (lib!definitions_t.impl&%8.num_entries.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))) :pattern ((lib!impl_u.l1.impl&%1.num_entries.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.impl&%1.num_entries.? self!))) :pattern ((lib!impl_u.l1.impl&%1.num_entries.? self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::well_formed")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.well_formed.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.well_formed.? self!) (and (and (and (and (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (< (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))))))))) (lib!definitions_t.aligned.? (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))) (I (nClip (Mul (lib!impl_u.l1.impl&%1.entry_size.? self!) (lib!impl_u.l1.impl&%1.num_entries.? self!)))))) (= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!)))) (lib!impl_u.l1.impl&%1.num_entries.? self!))) (= (lib!impl_u.l1.Directory./Directory/flags (%Poly%lib!impl_u.l1.Directory. self!)) lib!definitions_u.permissive_flags.?))) :pattern ((lib!impl_u.l1.impl&%1.well_formed.? self!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::empty")
(declare-fun req%lib!impl_u.l1.impl&%1.empty. (Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.empty. self!) (=> %%global_location_label%%35 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.empty. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::empty")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.empty.))
(define-fun is-lib!impl_u.l1.NodeEntry./Empty_ ((c lib!impl_u.l1.NodeEntry.)) Bool ((_ is lib!impl_u.l1.NodeEntry./Empty) c))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.empty.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.empty.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (lib!impl_u.l1.impl&%1.num_entries.? self!)) (is-lib!impl_u.l1.NodeEntry./Empty_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))) :pattern ((lib!impl_u.l1.impl&%1.empty.? self!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::pages_match_entry_size")
(declare-fun req%lib!impl_u.l1.impl&%1.pages_match_entry_size. (Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.pages_match_entry_size. self!) (=> %%global_location_label%%36 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.pages_match_entry_size. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::pages_match_entry_size")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size.))
(define-fun is-lib!impl_u.l1.NodeEntry./Page_ ((c lib!impl_u.l1.NodeEntry.)) Bool ((_ is lib!impl_u.l1.NodeEntry./Page) c))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.pages_match_entry_size.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Page_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))))))) (lib!impl_u.l1.impl&%1.entry_size.? self!)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))))))))))) :pattern ((lib!impl_u.l1.impl&%1.pages_match_entry_size.? self!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::directories_are_in_next_layer")
(declare-fun req%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. (Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. self!) (=> %%global_location_label%%37 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::directories_are_in_next_layer")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (let ((directory$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))) (and (= (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. directory$))) (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) 1))) (= (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. directory$))) (nClip (Add (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!)) (nClip (Mul (%I i$) (lib!impl_u.l1.impl&%1.entry_size.? self!)))))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))) :pattern ((lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::directories_match_arch")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.directories_match_arch.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.directories_match_arch.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.directories_match_arch.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (= (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))) (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))))) :pattern ((lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))))))) :pattern ((lib!impl_u.l1.impl&%1.directories_match_arch.? self!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::directories_are_nonempty")
(declare-fun req%lib!impl_u.l1.impl&%1.directories_are_nonempty. (Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.directories_are_nonempty. self!) (and (=> %%global_location_label%%38 (lib!impl_u.l1.impl&%1.well_formed.? self!)) (=> %%global_location_label%%39 (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!)) (=> %%global_location_label%%40 (lib!impl_u.l1.impl&%1.directories_match_arch.? self!)))) :pattern ((req%lib!impl_u.l1.impl&%1.directories_are_nonempty. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::directories_are_nonempty")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.directories_are_nonempty.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (not (lib!impl_u.l1.impl&%1.empty.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))))) :pattern ((lib!impl_u.l1.impl&%1.empty.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))))))) :pattern ((lib!impl_u.l1.impl&%1.directories_are_nonempty.? self!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::frames_aligned")
(declare-fun req%lib!impl_u.l1.impl&%1.frames_aligned. (Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.frames_aligned. self!) (=> %%global_location_label%%41 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.frames_aligned. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::frames_aligned")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.frames_aligned.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.frames_aligned.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.frames_aligned.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Page_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))))))) (I (lib!impl_u.l1.impl&%1.entry_size.? self!))))) :pattern ((is-lib!impl_u.l1.NodeEntry./Page_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))))) :pattern ((lib!impl_u.l1.impl&%1.frames_aligned.? self!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::directories_obey_invariant")
(declare-fun req%lib!impl_u.l1.impl&%1.directories_obey_invariant. (Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.directories_obey_invariant. self!) (and (=> %%global_location_label%%42 (lib!impl_u.l1.impl&%1.well_formed.? self!)) (=> %%global_location_label%%43 (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!)) (=> %%global_location_label%%44 (lib!impl_u.l1.impl&%1.directories_match_arch.? self!)))) :pattern ((req%lib!impl_u.l1.impl&%1.directories_obey_invariant. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::inv")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.inv.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.inv. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%inv.? self! fuel%) (lib!impl_u.l1.impl&%1.rec%inv.? self! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%inv.? self! fuel%)))))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (= (lib!impl_u.l1.impl&%1.rec%inv.? self! (succ fuel%)) (and (and (and (and (and (and (lib!impl_u.l1.impl&%1.well_formed.? self!) (lib!impl_u.l1.impl&%1.pages_match_entry_size.? self!)) (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!)) (lib!impl_u.l1.impl&%1.directories_match_arch.? self!)) (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! fuel%)) (lib!impl_u.l1.impl&%1.directories_are_nonempty.? self!)) (lib!impl_u.l1.impl&%1.frames_aligned.? self!)))) :pattern ((lib!impl_u.l1.impl&%1.rec%inv.? self! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.inv.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (= (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l1.impl&%1.rec%inv.? self! (succ (succ fuel_nat%lib!impl_u.l1.impl&%1.inv.))))) :pattern ((lib!impl_u.l1.impl&%1.inv.? self!))))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::directories_obey_invariant")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.directories_obey_invariant. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! fuel%) (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! fuel%)))))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (= (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! (succ fuel%)) (ite (and (and (lib!impl_u.l1.impl&%1.well_formed.? self!) (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!)) (lib!impl_u.l1.impl&%1.directories_match_arch.? self!)) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (lib!impl_u.l1.impl&%1.rec%inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) fuel%))) :pattern ((is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))) (%B (vstd!pervasive.arbitrary.? $ BOOL))))) :pattern ((lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (= (lib!impl_u.l1.impl&%1.directories_obey_invariant.? self!) (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! (succ (succ fuel_nat%lib!impl_u.l1.impl&%1.directories_obey_invariant.))))) :pattern ((lib!impl_u.l1.impl&%1.directories_obey_invariant.? self!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::upper_vaddr")
(declare-fun req%lib!impl_u.l1.impl&%1.upper_vaddr. (Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.upper_vaddr. self!) (=> %%global_location_label%%45 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.upper_vaddr. self!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::upper_vaddr")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.upper_vaddr.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.upper_vaddr.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.upper_vaddr.? self!) (lib!definitions_t.impl&%8.upper_vaddr.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))))) :pattern ((lib!impl_u.l1.impl&%1.upper_vaddr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.impl&%1.upper_vaddr.? self!))) :pattern ((lib!impl_u.l1.impl&%1.upper_vaddr.? self!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::entry_base")
(declare-fun req%lib!impl_u.l1.impl&%1.entry_base. (Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.entry_base. self! idx!) (=> %%global_location_label%%46 (lib!impl_u.l1.impl&%1.inv.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.entry_base. self! idx!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::entry_base")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.entry_base.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.entry_base.) (forall ((self! Poly) (idx! Poly)) (! (= (lib!impl_u.l1.impl&%1.entry_base.? self! idx!) (lib!definitions_t.entry_base_from_index.? (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))) idx! (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))))) :pattern ((lib!impl_u.l1.impl&%1.entry_base.? self! idx!))))))
(assert (forall ((self! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type idx! NAT)) (<= 0 (lib!impl_u.l1.impl&%1.entry_base.? self! idx!))) :pattern ((lib!impl_u.l1.impl&%1.entry_base.? self! idx!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::entry_bounds")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.entry_bounds.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.entry_bounds.) (forall ((self! Poly) (entry! Poly)) (! (= (lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!) (tuple%2./tuple%2 (I (lib!impl_u.l1.impl&%1.entry_base.? self! entry!)) (I (lib!impl_u.l1.impl&%1.entry_base.? self! (I (nClip (Add (%I entry!) 1))))))) :pattern ((lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!))))))
(assert (forall ((self! Poly) (entry! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (has_type (Poly%tuple%2. (lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!)) (TYPE%tuple%2. $ NAT $ NAT))) :pattern ((lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::interp_of_entry")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.interp_of_entry.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.interp_of_entry. Fuel)
(assert (forall ((self! Poly) (entry! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! fuel%) (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! fuel%)))))
(assert (forall ((self! Poly) (entry! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (= (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! (succ fuel%)) (ite (and (lib!impl_u.l1.impl&%1.inv.? self!) (< (%I entry!) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!)))))) (let ((tmp%%$ (lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!))) (let ((lower$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((upper$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (let ((tmp%%$1 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) entry!)))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$1) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (let ((p$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$1))))) (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) (I (lib!impl_u.l1.impl&%1.entry_base.? self! entry!)) (Poly%lib!definitions_t.PageTableEntry. p$)))) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$1) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$1))))) (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.rec%interp_aux.? (Poly%lib!impl_u.l1.Directory. d$) (I 0) fuel%))))) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%I (I lower$)) (%I (I upper$)))))) (%Poly%lib!impl_u.l0.PageTableContents. (vstd!pervasive.arbitrary.? $ TYPE%lib!impl_u.l0.PageTableContents.))))) :pattern ((lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.interp_of_entry.) (forall ((self! Poly) (entry! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (= (lib!impl_u.l1.impl&%1.interp_of_entry.? self! entry!) (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! (succ (succ fuel_nat%lib!impl_u.l1.impl&%1.interp_of_entry.))))) :pattern ((lib!impl_u.l1.impl&%1.interp_of_entry.? self! entry!))))))
(assert (forall ((self! Poly) (entry! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_of_entry.? self! entry!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((lib!impl_u.l1.impl&%1.interp_of_entry.? self! entry!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::interp_aux")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.interp_aux.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.interp_aux. Fuel)
(assert (forall ((self! Poly) (i! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! fuel%) (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! fuel%)))))
(assert (forall ((self! Poly) (i! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type i! NAT)) (= (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! (succ fuel%)) (ite (lib!impl_u.l1.impl&%1.inv.? self!) (ite (>= (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%I (I (lib!impl_u.l1.impl&%1.upper_vaddr.? self!))) (%I (I (lib!impl_u.l1.impl&%1.upper_vaddr.? self!)))) (let ((rem$ (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! (I (nClip (Add (%I i!) 1))) fuel%))) (let ((entry_i$ (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! i! fuel%))) (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. rem$)))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. entry_i$)))))) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. entry_i$))))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. rem$))))))))) (%Poly%lib!impl_u.l0.PageTableContents. (vstd!pervasive.arbitrary.? $ TYPE%lib!impl_u.l0.PageTableContents.))))) :pattern ((lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.interp_aux.) (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type i! NAT)) (= (lib!impl_u.l1.impl&%1.interp_aux.? self! i!) (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! (succ fuel_nat%lib!impl_u.l1.impl&%1.interp_aux.)))) :pattern ((lib!impl_u.l1.impl&%1.interp_aux.? self! i!))))))
(assert (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type i! NAT)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_aux.? self! i!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((lib!impl_u.l1.impl&%1.interp_aux.? self! i!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::interp")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.interp.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.interp.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.interp.? self!) (lib!impl_u.l1.impl&%1.interp_aux.? self! (I 0))) :pattern ((lib!impl_u.l1.impl&%1.interp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((lib!impl_u.l1.impl&%1.interp.? self!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::index_from_offset")
(declare-fun req%lib!definitions_t.index_from_offset. (Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((offset! Poly) (entry_size! Poly)) (! (= (req%lib!definitions_t.index_from_offset. offset! entry_size!) (=> %%global_location_label%%47 (> (%I entry_size!) 0))) :pattern ((req%lib!definitions_t.index_from_offset. offset! entry_size!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::index_from_offset")
(assert (fuel_bool_default fuel%lib!definitions_t.index_from_offset.))
(assert (=> (fuel_bool fuel%lib!definitions_t.index_from_offset.) (forall ((offset! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.index_from_offset.? offset! entry_size!) (nClip (EucDiv (%I offset!) (%I entry_size!)))) :pattern ((lib!definitions_t.index_from_offset.? offset! entry_size!))))))
(assert (forall ((offset! Poly) (entry_size! Poly)) (! (=> (and (has_type offset! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.index_from_offset.? offset! entry_size!))) :pattern ((lib!definitions_t.index_from_offset.? offset! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::index_from_base_and_addr")
(declare-fun req%lib!definitions_t.index_from_base_and_addr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (= (req%lib!definitions_t.index_from_base_and_addr. base! addr! entry_size!) (and (=> %%global_location_label%%48 (>= (%I addr!) (%I base!))) (=> %%global_location_label%%49 (> (%I entry_size!) 0)))) :pattern ((req%lib!definitions_t.index_from_base_and_addr. base! addr! entry_size!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::index_from_base_and_addr")
(assert (fuel_bool_default fuel%lib!definitions_t.index_from_base_and_addr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.index_from_base_and_addr.) (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!) (lib!definitions_t.index_from_offset.? (I (nClip (Sub (%I addr!) (%I base!)))) entry_size!)) :pattern ((lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!))))))
(assert (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type addr! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!))) :pattern ((lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::index_for_vaddr")
(declare-fun req%lib!definitions_t.impl&%8.index_for_vaddr. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (= (req%lib!definitions_t.impl&%8.index_for_vaddr. self! layer! base! vaddr!) (and (=> %%global_location_label%%50 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%51 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))) (=> %%global_location_label%%52 (<= (%I base!) (%I vaddr!))))) :pattern ((req%lib!definitions_t.impl&%8.index_for_vaddr. self! layer! base! vaddr!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::index_for_vaddr")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.index_for_vaddr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.index_for_vaddr.) (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (= (lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!) (lib!definitions_t.index_from_base_and_addr.? base! vaddr! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type vaddr! NAT)) (<= 0 (lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!))) :pattern ((lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::index_for_vaddr")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.index_for_vaddr.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.index_for_vaddr.) (forall ((self! Poly) (vaddr! Poly)) (! (= (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!) (lib!definitions_t.index_from_base_and_addr.? (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))) vaddr! (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))))) :pattern ((lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!))))))
(assert (forall ((self! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type vaddr! NAT)) (<= 0 (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!))) :pattern ((lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::next_entry_base_from_index")
(assert (fuel_bool_default fuel%lib!definitions_t.next_entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.next_entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (nClip (Add (%I idx!) 1)) (%I entry_size!)))))) :pattern ((lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::next_entry_base")
(declare-fun req%lib!definitions_t.impl&%8.next_entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.next_entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%53 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%54 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.next_entry_base. self! layer! base! idx!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::Arch::next_entry_base")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.next_entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.next_entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!) (lib!definitions_t.next_entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!)))))
(set-info :comment ";; Function-Specs lib::impl_u::indexing::lemma_entry_base_from_index")
(declare-fun req%lib!impl_u.indexing.lemma_entry_base_from_index. (Int Int Int) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((base! Int) (idx! Int) (entry_size! Int)) (! (= (req%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx! entry_size!) (=> %%global_location_label%%55 (< 0 entry_size!))) :pattern ((req%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx! entry_size!)))))
(declare-fun ens%lib!impl_u.indexing.lemma_entry_base_from_index. (Int Int Int) Bool)
(assert (forall ((base! Int) (idx! Int) (entry_size! Int)) (! (= (ens%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx! entry_size!) (and (forall ((idx2$ Poly)) (! (=> (has_type idx2$ NAT) (=> (< idx! (%I idx2$)) (< (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (lib!definitions_t.entry_base_from_index.? (I base!) idx2$ (I entry_size!))))) :pattern ((lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (lib!definitions_t.entry_base_from_index.? (I base!) idx2$ (I entry_size!))))) (forall ((idx2$ Poly)) (! (=> (has_type idx2$ NAT) (=> (< idx! (%I idx2$)) (<= (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (lib!definitions_t.entry_base_from_index.? (I base!) idx2$ (I entry_size!))))) :pattern ((lib!definitions_t.entry_base_from_index.? (I base!) idx2$ (I entry_size!))))) (= (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (lib!definitions_t.entry_base_from_index.? (I base!) (I (nClip (Add idx! 1))) (I entry_size!))) (= (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (nClip (Add (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) entry_size!))) (= (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (nClip (Add entry_size! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))))) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (and (and (< 0 (%I n$)) (lib!definitions_t.aligned.? (I base!) n$)) (lib!definitions_t.aligned.? (I entry_size!) n$)) (lib!definitions_t.aligned.? (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) n$))) :pattern ((lib!definitions_t.aligned.? (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) n$)))) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (and (and (< 0 (%I n$)) (lib!definitions_t.aligned.? (I base!) n$)) (lib!definitions_t.aligned.? (I entry_size!) n$)) (lib!definitions_t.aligned.? (I (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) n$))) :pattern ((lib!definitions_t.aligned.? (I (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) n$)))) (=> (lib!definitions_t.aligned.? (I base!) (I entry_size!)) (lib!definitions_t.aligned.? (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) (I entry_size!))) (<= base! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))))) :pattern ((ens%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx! entry_size!)))))
(set-info :comment ";; Function-Specs lib::extra::mod_mult_zero_implies_mod_zero")
(declare-fun req%lib!extra.mod_mult_zero_implies_mod_zero. (Int Int Int) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (req%lib!extra.mod_mult_zero_implies_mod_zero. a! b! c!) (and (=> %%global_location_label%%56 (lib!definitions_t.aligned.? (I a!) (I (nClip (Mul b! c!))))) (=> %%global_location_label%%57 (> b! 0)) (=> %%global_location_label%%58 (> c! 0)))) :pattern ((req%lib!extra.mod_mult_zero_implies_mod_zero. a! b! c!)))))
(declare-fun ens%lib!extra.mod_mult_zero_implies_mod_zero. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (ens%lib!extra.mod_mult_zero_implies_mod_zero. a! b! c!) (lib!definitions_t.aligned.? (I a!) (I b!))) :pattern ((ens%lib!extra.mod_mult_zero_implies_mod_zero. a! b! c!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::lemma_inv_implies_interp_inv")
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. (lib!impl_u.l1.Directory.) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. self!) (=> %%global_location_label%%59 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!)))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. self!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. (lib!impl_u.l1.Directory.) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. self!) (and (lib!impl_u.l0.impl&%0.inv.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!)))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!))))) (lib!impl_u.l1.impl&%1.upper_vaddr.? (Poly%lib!impl_u.l1.Directory. self!))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!))))) (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. self!)))))
(set-info :comment ";; Function-Specs lib::impl_u::indexing::lemma_index_from_base_and_addr")
(declare-fun req%lib!impl_u.indexing.lemma_index_from_base_and_addr. (Int Int Int Int) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((base! Int) (addr! Int) (entry_size! Int) (num_entries! Int)) (! (= (req%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! addr! entry_size! num_entries!) (and (=> %%global_location_label%%60 (>= addr! base!)) (=> %%global_location_label%%61 (< addr! (lib!definitions_t.entry_base_from_index.? (I base!) (I num_entries!) (I entry_size!)))) (=> %%global_location_label%%62 (> entry_size! 0)))) :pattern ((req%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! addr! entry_size! num_entries!)))))
(declare-fun ens%lib!impl_u.indexing.lemma_index_from_base_and_addr. (Int Int Int Int) Bool)
(assert (forall ((base! Int) (addr! Int) (entry_size! Int) (num_entries! Int)) (! (= (ens%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! addr! entry_size! num_entries!) (let ((idx$ (lib!definitions_t.index_from_base_and_addr.? (I base!) (I addr!) (I entry_size!)))) (and (and (< idx$ num_entries!) (lib!definitions_t.between.? (I addr!) (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx$) (I entry_size!))) (I (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx$) (I entry_size!))))) (=> (and (lib!definitions_t.aligned.? (I base!) (I entry_size!)) (lib!definitions_t.aligned.? (I addr!) (I entry_size!))) (= addr! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx$) (I entry_size!))))))) :pattern ((ens%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! addr! entry_size! num_entries!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::resolve")
(declare-fun req%lib!impl_u.l1.impl&%1.resolve. (Poly Poly) Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((self! Poly) (vaddr! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.resolve. self! vaddr!) (and (=> %%global_location_label%%63 (lib!impl_u.l1.impl&%1.inv.? self!)) (=> %%global_location_label%%64 (lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) vaddr!)) (=> %%global_location_label%%65 (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) vaddr!))))) :pattern ((req%lib!impl_u.l1.impl&%1.resolve. self! vaddr!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::resolve")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.resolve.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.resolve. Fuel)
(assert (forall ((self! Poly) (vaddr! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! fuel%) (lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! fuel%)))))
(assert (forall ((self! Poly) (vaddr! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type vaddr! NAT) (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) vaddr!))) (= (lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! (succ fuel%)) (let ((entry$ (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!))) (let ((tmp%%$ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) (I entry$))))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$) (let ((pte$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (let ((offset$ (Sub (%I vaddr!) (lib!impl_u.l1.impl&%1.entry_base.? self! (I entry$))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (I (lib!impl_u.l1.impl&%1.entry_base.? self! (I entry$))) (Poly%lib!definitions_t.PageTableEntry. pte$)))))) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (lib!impl_u.l1.impl&%1.rec%resolve.? (Poly%lib!impl_u.l1.Directory. d$) vaddr! fuel%)) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))))))) :pattern ((lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.resolve.) (forall ((self! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type vaddr! NAT) (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) vaddr!))) (= (lib!impl_u.l1.impl&%1.resolve.? self! vaddr!) (lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! (succ fuel_nat%lib!impl_u.l1.impl&%1.resolve.)))) :pattern ((lib!impl_u.l1.impl&%1.resolve.? self! vaddr!))))))
(assert (forall ((self! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type vaddr! NAT)) (has_type (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.resolve.? self! vaddr!)) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) :pattern ((lib!impl_u.l1.impl&%1.resolve.? self! vaddr!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::update")
(declare-fun req%lib!impl_u.l1.impl&%1.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((self! Poly) (n! Poly) (e! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.update. self! n! e!) (=> %%global_location_label%%66 (< (%I n!) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))))) :pattern ((req%lib!impl_u.l1.impl&%1.update. self! n! e!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::update")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.update.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.update.) (forall ((self! Poly) (n! Poly) (e! Poly)) (! (= (lib!impl_u.l1.impl&%1.update.? self! n! e!) (lib!impl_u.l1.Directory./Directory (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.update.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) n! e!)) (%I (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)))) (%I (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!)))) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!impl_u.l1.Directory./Directory/flags (%Poly%lib!impl_u.l1.Directory. self!)))))) :pattern ((lib!impl_u.l1.impl&%1.update.? self! n! e!))))))
(assert (forall ((self! Poly) (n! Poly) (e! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type n! NAT) (has_type e! TYPE%lib!impl_u.l1.NodeEntry.)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! n! e!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.impl&%1.update.? self! n! e!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::candidate_mapping_in_bounds")
(declare-fun req%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%67 Bool)
(assert (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. self! base! pte!) (=> %%global_location_label%%67 (lib!impl_u.l1.impl&%1.inv.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. self! base! pte!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::candidate_mapping_in_bounds")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? self! base! pte!) (and (<= (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!)) (%I base!)) (<= (nClip (Add (%I base!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!impl_u.l1.impl&%1.upper_vaddr.? self!)))) :pattern ((lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? self! base! pte!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::accepted_mapping")
(declare-fun req%lib!impl_u.l1.impl&%1.accepted_mapping. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.accepted_mapping. self! base! pte!) (=> %%global_location_label%%68 (lib!impl_u.l1.impl&%1.inv.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.accepted_mapping. self! base! pte!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::accepted_mapping")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.accepted_mapping.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.accepted_mapping.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l1.impl&%1.accepted_mapping.? self! base! pte!) (and (and (and (lib!definitions_t.aligned.? base! (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? self! base! pte!)) (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)))))) :pattern ((lib!impl_u.l1.impl&%1.accepted_mapping.? self! base! pte!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::new_empty_dir")
(declare-fun req%lib!impl_u.l1.impl&%1.new_empty_dir. (Poly Poly) Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((self! Poly) (entry! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.new_empty_dir. self! entry!) (and (=> %%global_location_label%%69 (lib!impl_u.l1.impl&%1.inv.? self!)) (=> %%global_location_label%%70 (< (%I entry!) (lib!impl_u.l1.impl&%1.num_entries.? self!))) (=> %%global_location_label%%71 (< (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))))))))))) :pattern ((req%lib!impl_u.l1.impl&%1.new_empty_dir. self! entry!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::new_empty_dir")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.new_empty_dir.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.new_empty_dir.) (forall ((self! Poly) (entry! Poly)) (! (= (lib!impl_u.l1.impl&%1.new_empty_dir.? self! entry!) (lib!impl_u.l1.Directory./Directory (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!definitions_t.new_seq.? $ TYPE%lib!impl_u.l1.NodeEntry. (I (lib!definitions_t.impl&%8.num_entries.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) 1))))) (Poly%lib!impl_u.l1.NodeEntry. lib!impl_u.l1.NodeEntry./Empty))) (%I (I (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) 1)))) (%I (I (lib!impl_u.l1.impl&%1.entry_base.? self! entry!))) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. lib!definitions_u.permissive_flags.?)))) :pattern ((lib!impl_u.l1.impl&%1.new_empty_dir.? self! entry!))))))
(assert (forall ((self! Poly) (entry! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? self! entry!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.impl&%1.new_empty_dir.? self! entry!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::map_frame")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.map_frame.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.map_frame. Fuel)
(assert (forall ((self! Poly) (base! Poly) (pte! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! fuel%) (lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! fuel%)))))
(assert (forall ((self! Poly) (base! Poly) (pte! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT) (has_type pte! TYPE%lib!definitions_t.PageTableEntry.)) (= (lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! (succ fuel%)) (ite (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l1.impl&%1.accepted_mapping.? self! base! pte!)) (let ((entry$ (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! base!))) (let ((tmp%%$ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) (I entry$))))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$) (let ((p$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (core!result.Result./Err self!)) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (ite (= (lib!impl_u.l1.impl&%1.entry_size.? self!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (core!result.Result./Err self!) (let ((tmp%%$1 (lib!impl_u.l1.impl&%1.rec%map_frame.? (Poly%lib!impl_u.l1.Directory. d$) base! pte! fuel%))) (ite (is-core!result.Result./Ok_ tmp%%$1) (let ((d$1 (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1)))))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. d$1)))))))) (let ((d$2 (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1)))))) (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. d$2)))))))))))) (ite (= (lib!impl_u.l1.impl&%1.entry_size.? self!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Page (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (let ((new_dir$ (lib!impl_u.l1.impl&%1.new_empty_dir.? self! (I entry$)))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.rec%map_frame.? (Poly%lib!impl_u.l1.Directory. new_dir$) base! pte! fuel%)))))))))))))))) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? $ (TYPE%core!result.Result. $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l1.Directory.)))))) :pattern ((lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.map_frame.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT) (has_type pte! TYPE%lib!definitions_t.PageTableEntry.)) (= (lib!impl_u.l1.impl&%1.map_frame.? self! base! pte!) (lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! (succ fuel_nat%lib!impl_u.l1.impl&%1.map_frame.)))) :pattern ((lib!impl_u.l1.impl&%1.map_frame.? self! base! pte!))))))
(assert (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT) (has_type pte! TYPE%lib!definitions_t.PageTableEntry.)) (has_type (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? self! base! pte!)) (TYPE%core!result.Result. $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l1.Directory.))) :pattern ((lib!impl_u.l1.impl&%1.map_frame.? self! base! pte!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::accepted_unmap")
(declare-fun req%lib!impl_u.l1.impl&%1.accepted_unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((self! Poly) (base! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.accepted_unmap. self! base!) (=> %%global_location_label%%72 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.accepted_unmap. self! base!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::accepted_unmap")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.accepted_unmap.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.accepted_unmap.) (forall ((self! Poly) (base! Poly)) (! (= (lib!impl_u.l1.impl&%1.accepted_unmap.? self! base!) (lib!impl_u.l0.impl&%0.accepted_unmap.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) base!)) :pattern ((lib!impl_u.l1.impl&%1.accepted_unmap.? self! base!))))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::unmap")
(declare-fun req%lib!impl_u.l1.impl&%1.unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((self! Poly) (base! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.unmap. self! base!) (and (=> %%global_location_label%%73 (lib!impl_u.l1.impl&%1.inv.? self!)) (=> %%global_location_label%%74 (lib!impl_u.l1.impl&%1.accepted_unmap.? self! base!)))) :pattern ((req%lib!impl_u.l1.impl&%1.unmap. self! base!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l1::Directory::unmap")
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.unmap.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.unmap. Fuel)
(assert (forall ((self! Poly) (base! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%unmap.? self! base! fuel%) (lib!impl_u.l1.impl&%1.rec%unmap.? self! base! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%unmap.? self! base! fuel%)))))
(assert (forall ((self! Poly) (base! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT)) (= (lib!impl_u.l1.impl&%1.rec%unmap.? self! base! (succ fuel%)) (ite (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l1.impl&%1.accepted_unmap.? self! base!)) (let ((entry$ (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! base!))) (let ((tmp%%$ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) (I entry$))))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$) (let ((p$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (ite (lib!definitions_t.aligned.? base! (I (lib!impl_u.l1.impl&%1.entry_size.? self!))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. lib!impl_u.l1.NodeEntry./Empty)))) (core!result.Result./Err self!))) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (let ((tmp%%$1 (lib!impl_u.l1.impl&%1.rec%unmap.? (Poly%lib!impl_u.l1.Directory. d$) base! fuel%))) (ite (is-core!result.Result./Ok_ tmp%%$1) (let ((new_d$ (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1)))))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (ite (lib!impl_u.l1.impl&%1.empty.? (Poly%lib!impl_u.l1.Directory. new_d$)) lib!impl_u.l1.NodeEntry./Empty (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. new_d$))))))))) (let ((new_d$ (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1)))))) (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. new_d$))))))))))) (core!result.Result./Err self!))))) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? $ (TYPE%core!result.Result. $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l1.Directory.)))))) :pattern ((lib!impl_u.l1.impl&%1.rec%unmap.? self! base! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.unmap.) (forall ((self! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT)) (= (lib!impl_u.l1.impl&%1.unmap.? self! base!) (lib!impl_u.l1.impl&%1.rec%unmap.? self! base! (succ fuel_nat%lib!impl_u.l1.impl&%1.unmap.)))) :pattern ((lib!impl_u.l1.impl&%1.unmap.? self! base!))))))
(assert (forall ((self! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT)) (has_type (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.unmap.? self! base!)) (TYPE%core!result.Result. $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l1.Directory.))) :pattern ((lib!impl_u.l1.impl&%1.unmap.? self! base!)))))
(set-info :comment ";; Function-Axioms lib::impl_u::l2_impl::addr_is_zero_padded")
(assert (fuel_bool_default fuel%lib!impl_u.l2_impl.addr_is_zero_padded.))
(assert (=> (fuel_bool fuel%lib!impl_u.l2_impl.addr_is_zero_padded.) (forall ((layer! Poly) (addr! Poly) (is_page! Poly)) (! (= (lib!impl_u.l2_impl.addr_is_zero_padded.? layer! addr! is_page!) (=> (%B is_page!) (ite (= (%I layer!) 1) (= (uClip 64 (bitand (I (%I addr!)) (I lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?))) (%I addr!)) (ite (= (%I layer!) 2) (= (uClip 64 (bitand (I (%I addr!)) (I lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?))) (%I addr!)) (ite (= (%I layer!) 3) (= (uClip 64 (bitand (I (%I addr!)) (I lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?))) (%I addr!)) (%B (vstd!pervasive.arbitrary.? $ BOOL))))))) :pattern ((lib!impl_u.l2_impl.addr_is_zero_padded.? layer! addr! is_page!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_addr")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%1.get_Page_addr.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%1.get_Page_addr.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%1.get_Page_addr.? self!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Page_addr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.impl&%1.get_Page_addr.? self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Page_addr.? self!)))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_RW")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_RW.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_RW.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%1.get_Page_flag_RW.? self!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Page_flag_RW.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_US")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_US.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_US.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%1.get_Page_flag_US.? self!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Page_flag_US.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::GhostPageDirectoryEntry::get_Page_flag_XD")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_XD.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_XD.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%1.get_Page_flag_XD.? self!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%1.get_Page_flag_XD.? self!))))))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::MASK_DIR_ADDR_SPEC")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.? lib!spec_t.hardware.MASK_ADDR_SPEC.?)))
(assert (uInv 64 lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.?))
(set-info :comment ";; Function-Axioms lib::spec_t::hardware::PageDirectoryEntry::layer")
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%3.layer.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%3.layer.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%3.layer.? self!) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) :pattern ((lib!spec_t.hardware.impl&%3.layer.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (<= 0 (lib!spec_t.hardware.impl&%3.layer.? self!))) :pattern ((lib!spec_t.hardware.impl&%3.layer.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::ArchLayerExec::view")
(assert (fuel_bool_default fuel%lib!definitions_u.impl&%1.view.))
(assert (=> (fuel_bool fuel%lib!definitions_u.impl&%1.view.) (forall ((self! Poly)) (! (= (lib!definitions_u.impl&%1.view.? self!) (lib!definitions_t.ArchLayer./ArchLayer (%I (I (lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%lib!definitions_t.ArchLayerExec. self!)))) (%I (I (lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%lib!definitions_t.ArchLayerExec. self!)))))) :pattern ((lib!definitions_u.impl&%1.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.ArchLayerExec.) (has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_u.impl&%1.view.? self!)) TYPE%lib!definitions_t.ArchLayer.)) :pattern ((lib!definitions_u.impl&%1.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::ArchExec::view")
(assert (fuel_bool_default fuel%lib!definitions_u.impl&%2.view.))
(declare-fun %%lambda%%4 () %%Function%%)
(assert (forall ((i$ Poly) (l$ Poly)) (! (= (%%apply%%1 %%lambda%%4 i$ l$) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_u.impl&%1.view.? l$))) :pattern ((%%apply%%1 %%lambda%%4 i$ l$)))))
(assert (=> (fuel_bool fuel%lib!definitions_u.impl&%2.view.) (forall ((self! Poly)) (! (= (lib!definitions_u.impl&%2.view.? self!) (lib!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!definitions_t.ArchLayerExec. $ TYPE%lib!definitions_t.ArchLayer. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!definitions_t.ArchLayerExec. $ (CONST_INT 4)) (Poly%array%. (lib!definitions_t.ArchExec./ArchExec/layers (%Poly%lib!definitions_t.ArchExec. self!)))) (Poly%fun%2. (mk_fun %%lambda%%4)))))) :pattern ((lib!definitions_u.impl&%2.view.? self!))))))
(set-info :comment ";; Function-Axioms lib::extra::result_map")
(assert (fuel_bool_default fuel%lib!extra.result_map.))
(assert (=> (fuel_bool fuel%lib!extra.result_map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (res! Poly) (f! Poly)) (! (= (lib!extra.result_map.? A&. A& B&. B& res! f!) (ite (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)) (let ((a$ (core!result.Result./Ok/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Ok (%%apply%%0 (%Poly%fun%1. f!) a$))) (let ((a$ (core!result.Result./Err/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Err (%%apply%%0 (%Poly%fun%1. f!) a$))))) :pattern ((lib!extra.result_map.? A&. A& B&. B& res! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (res! Poly) (f! Poly)) (! (=> (and (has_type res! (TYPE%core!result.Result. A&. A& A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (Poly%core!result.Result. (lib!extra.result_map.? A&. A& B&. B& res! f!)) (TYPE%core!result.Result. B&. B& B&. B&))) :pattern ((lib!extra.result_map.? A&. A& B&. B& res! f!)))))
(set-info :comment ";; Function-Axioms lib::definitions_t::MemRegion::contains")
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%2.contains.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%2.contains.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!definitions_t.impl&%2.contains.? self! addr!) (lib!definitions_t.between.? addr! (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. self!))) (I (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. self!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. self!))))))) :pattern ((lib!definitions_t.impl&%2.contains.? self! addr!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)))))
(set-info :comment ";; Function-Specs lib::definitions_u::lemma_new_seq")
(declare-fun ens%lib!definitions_u.lemma_new_seq. (Dcr Type Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (i! Int) (e! Poly)) (! (= (ens%lib!definitions_u.lemma_new_seq. T&. T& i! e!) (and (= (vstd!seq.Seq.len.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!)) i!) (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (< (%I j$) i!) (= (vstd!seq.Seq.index.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!) j$) e!))) :pattern ((vstd!seq.Seq.index.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!) j$)))))) :pattern ((ens%lib!definitions_u.lemma_new_seq. T&. T& i! e!)))))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::PageDirectoryEntry::lemma_zero_entry_facts")
(declare-fun req%lib!impl_u.l2_impl.impl&%0.lemma_zero_entry_facts. (lib!spec_t.hardware.PageDirectoryEntry.) Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((self! lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (req%lib!impl_u.l2_impl.impl&%0.lemma_zero_entry_facts. self!) (and (=> %%global_location_label%%75 (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) 0)) (=> %%global_location_label%%76 (<= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) 3)))) :pattern ((req%lib!impl_u.l2_impl.impl&%0.lemma_zero_entry_facts. self!)))))
(declare-fun ens%lib!impl_u.l2_impl.impl&%0.lemma_zero_entry_facts. (lib!spec_t.hardware.PageDirectoryEntry.) Bool)
(assert (forall ((self! lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (ens%lib!impl_u.l2_impl.impl&%0.lemma_zero_entry_facts. self!) (and (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Empty_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)))) :pattern ((ens%lib!impl_u.l2_impl.impl&%0.lemma_zero_entry_facts. self!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::lemma_zeroed_page_implies_empty_at")
(declare-fun req%lib!impl_u.l2_impl.PT.lemma_zeroed_page_implies_empty_at. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int) Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int)) (! (= (req%lib!impl_u.l2_impl.PT.lemma_zeroed_page_implies_empty_at. mem! pt! layer! ptr!) (and (=> %%global_location_label%%77 (= (uClip SZ (EucMod ptr! lib!definitions_t.PAGE_SIZE.?)) 0)) (=> %%global_location_label%%78 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. mem!))) (=> %%global_location_label%%79 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!))) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (=> %%global_location_label%%80 (= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) ptr!)) (=> %%global_location_label%%81 (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) lib!definitions_t.PAGE_SIZE.?)) (=> %%global_location_label%%82 (= (vstd!seq.Seq.len.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))))) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))))) (=> %%global_location_label%%83 (= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) ptr!)) (=> %%global_location_label%%84 (= ptr! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))))) (=> %%global_location_label%%85 (= (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!definitions_t.MemRegion. (vstd!set.impl&%0.empty.? $ TYPE%lib!definitions_t.MemRegion.) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))))) (=> %%global_location_label%%86 (lib!impl_u.l2_impl.PT.layer_in_range.? (I layer!))) (=> %%global_location_label%%87 (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))) lib!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%88 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (= (%I (vstd!seq.Seq.index.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) i$)) 0))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) i$))))) (=> %%global_location_label%%89 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$))))))) :pattern ((req%lib!impl_u.l2_impl.PT.lemma_zeroed_page_implies_empty_at. mem! pt! layer! ptr!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.lemma_zeroed_page_implies_empty_at. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int) Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int)) (! (= (ens%lib!impl_u.l2_impl.PT.lemma_zeroed_page_implies_empty_at. mem! pt! layer! ptr!) (and (lib!impl_u.l2_impl.PT.empty_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!)) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!)))) :pattern ((ens%lib!impl_u.l2_impl.PT.lemma_zeroed_page_implies_empty_at. mem! pt! layer! ptr!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::lemma_zeroed_page_implies_empty_at")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:1570:1: 1570:111 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::lemma_interp_at_aux_facts")
(declare-fun req%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) Bool)
(declare-const %%global_location_label%%90 Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base_vaddr! Int) (init! vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)) (! (= (req%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem! pt! layer! ptr! base_vaddr! init!) (=> %%global_location_label%%90 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!)))) :pattern ((req%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem! pt! layer! ptr! base_vaddr! init!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base_vaddr! Int) (init! vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)) (! (= (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem! pt! layer! ptr! base_vaddr! init!) (and (= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l2_impl.PT.interp_at_aux.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!)))) (ite (> (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!)) lib!definitions_t.X86_NUM_ENTRIES.?) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!)) lib!definitions_t.X86_NUM_ENTRIES.?)) (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!))) (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l2_impl.PT.interp_at_aux.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!))) j$) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!) j$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l2_impl.PT.interp_at_aux.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!))) j$)))) (let ((res$ (lib!impl_u.l2_impl.PT.interp_at_aux.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!)))) (and (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (and (<= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!)) (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$)))) (let ((tmp%%$ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) j$))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ tmp%%$) (let ((dir_addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (and (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) j$))) (= (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) j$))) (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j$))) (I (nClip (Add layer! 1))) (I dir_addr$) (I (lib!definitions_t.entry_base_from_index.? (I base_vaddr!) j$ (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))))))))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ tmp%%$) (let ((addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (and (is-lib!impl_u.l1.NodeEntry./Page_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) j$))) (= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) j$))))))))) addr$))) (is-lib!impl_u.l1.NodeEntry./Empty_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) j$)))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) j$)))) (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (and (<= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!)) (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$)))) (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) j$)) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!) j$)))) :pattern ((lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!) j$)))))))) :pattern ((ens%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem! pt! layer! ptr! base_vaddr! init!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::lemma_interp_at_aux_facts")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:828:7: 828:141 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::lemma_interp_at_facts")
(declare-fun req%lib!impl_u.l2_impl.PT.lemma_interp_at_facts. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int) Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base_vaddr! Int)) (! (= (req%lib!impl_u.l2_impl.PT.lemma_interp_at_facts. mem! pt! layer! ptr! base_vaddr!) (and (=> %%global_location_label%%91 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (=> %%global_location_label%%92 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!))))))) :pattern ((req%lib!impl_u.l2_impl.PT.lemma_interp_at_facts. mem! pt! layer! ptr! base_vaddr!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.lemma_interp_at_facts. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int) Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base_vaddr! Int)) (! (= (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_facts. mem! pt! layer! ptr! base_vaddr!) (and (= (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!))))) base_vaddr!) (= (lib!impl_u.l1.impl&%1.upper_vaddr.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!)))) (lib!definitions_t.impl&%8.upper_vaddr.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!) (I base_vaddr!))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!))))))) base_vaddr!) (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!))))))) (lib!definitions_t.impl&%8.upper_vaddr.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!) (I base_vaddr!))) (let ((res$ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!)))) (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))))) (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))) j$)) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!) j$)))) :pattern ((lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!) j$))))))) :pattern ((ens%lib!impl_u.l2_impl.PT.lemma_interp_at_facts. mem! pt! layer! ptr! base_vaddr!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::lemma_interp_at_facts")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:787:1: 787:115 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::lemma_new_empty_dir")
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_new_empty_dir. (lib!impl_u.l1.Directory. Int) Bool)
(declare-const %%global_location_label%%93 Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (entry! Int)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_new_empty_dir. self! entry!) (and (=> %%global_location_label%%93 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!))) (=> %%global_location_label%%94 (< entry! (lib!impl_u.l1.impl&%1.num_entries.? (Poly%lib!impl_u.l1.Directory. self!)))) (=> %%global_location_label%%95 (< (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!))) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))))))))))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_new_empty_dir. self! entry!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_new_empty_dir. (lib!impl_u.l1.Directory. Int) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (entry! Int)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_new_empty_dir. self! entry!) (and (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. self!) (I entry!)))) (= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. self!) (I entry!))))))) (lib!definitions_t.impl&%8.num_entries.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))) (I (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!))) 1))))) (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (< (%I j$) (lib!impl_u.l1.impl&%1.num_entries.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. self!) (I entry!))))) (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. self!) (I entry!)))))) j$)) lib!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. self!) (I entry!)))))) j$)))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_new_empty_dir. self! entry!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::lemma_map_frame_preserves_inv")
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_map_frame_preserves_inv. (lib!impl_u.l1.Directory. Int lib!definitions_t.PageTableEntry.) Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (base! Int) (pte! lib!definitions_t.PageTableEntry.)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_map_frame_preserves_inv. self! base! pte!) (and (=> %%global_location_label%%96 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!))) (=> %%global_location_label%%97 (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))) (=> %%global_location_label%%98 (is-core!result.Result./Ok_ (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_map_frame_preserves_inv. self! base! pte!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_map_frame_preserves_inv. (lib!impl_u.l1.Directory. Int lib!definitions_t.PageTableEntry.) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (base! Int) (pte! lib!definitions_t.PageTableEntry.)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_map_frame_preserves_inv. self! base! pte!) (and (= (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))) (= (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))) (= (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))) (not (lib!impl_u.l1.impl&%1.empty.? (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!impl_u.l1.impl&%1.inv.? (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))))) (not (exists ((b$ Poly)) (! (and (has_type b$ NAT) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!))))))) b$) (lib!definitions_t.between.? (I base!) b$ (I (nClip (Add (%I b$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!)))))) b$)))))))))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!)))))) b$))))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_map_frame_preserves_inv. self! base! pte!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::lemma_map_frame_refines_map_frame")
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_map_frame_refines_map_frame. (lib!impl_u.l1.Directory. Int lib!definitions_t.PageTableEntry.) Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (base! Int) (pte! lib!definitions_t.PageTableEntry.)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_map_frame_refines_map_frame. self! base! pte!) (and (=> %%global_location_label%%99 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!))) (=> %%global_location_label%%100 (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_map_frame_refines_map_frame. self! base! pte!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_map_frame_refines_map_frame. (lib!impl_u.l1.Directory. Int lib!definitions_t.PageTableEntry.) Bool)
(declare-fun %%lambda%%5 () %%Function%%)
(assert (forall ((d$ Poly)) (! (= (%%apply%%0 %%lambda%%5 d$) (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? d$))) :pattern ((%%apply%%0 %%lambda%%5 d$)))))
(assert (forall ((self! lib!impl_u.l1.Directory.) (base! Int) (pte! lib!definitions_t.PageTableEntry.)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_map_frame_refines_map_frame. self! base! pte!) (and (=> (is-core!result.Result./Err_ (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))) (= (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!)))))) self!)) (= (lib!extra.result_map.? $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l0.PageTableContents. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))) (Poly%fun%1. (mk_fun %%lambda%%5))) (lib!impl_u.l0.impl&%0.map_frame.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!))) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_map_frame_refines_map_frame. self! base! pte!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::ArchExec::entry_size")
(declare-fun req%lib!definitions_u.impl&%2.entry_size. (lib!definitions_t.ArchExec. Int) Bool)
(declare-const %%global_location_label%%101 Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int)) (! (= (req%lib!definitions_u.impl&%2.entry_size. self! layer!) (=> %%global_location_label%%101 (< layer! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!)))))))))) :pattern ((req%lib!definitions_u.impl&%2.entry_size. self! layer!)))))
(declare-fun ens%lib!definitions_u.impl&%2.entry_size. (lib!definitions_t.ArchExec. Int Int) Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (res! Int)) (! (= (ens%lib!definitions_u.impl&%2.entry_size. self! layer! res!) (and (uInv SZ res!) (= res! (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))) :pattern ((ens%lib!definitions_u.impl&%2.entry_size. self! layer! res!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::ArchExec::index_for_vaddr")
(declare-fun req%lib!definitions_u.impl&%2.index_for_vaddr. (lib!definitions_t.ArchExec. Int Int Int) Bool)
(declare-const %%global_location_label%%102 Bool)
(declare-const %%global_location_label%%103 Bool)
(declare-const %%global_location_label%%104 Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (vaddr! Int)) (! (= (req%lib!definitions_u.impl&%2.index_for_vaddr. self! layer! base! vaddr!) (and (=> %%global_location_label%%102 (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))) (=> %%global_location_label%%103 (< layer! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))))))) (=> %%global_location_label%%104 (>= vaddr! base!)))) :pattern ((req%lib!definitions_u.impl&%2.index_for_vaddr. self! layer! base! vaddr!)))))
(declare-fun ens%lib!definitions_u.impl&%2.index_for_vaddr. (lib!definitions_t.ArchExec. Int Int Int Int) Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (vaddr! Int) (res! Int)) (! (= (ens%lib!definitions_u.impl&%2.index_for_vaddr. self! layer! base! vaddr! res!) (and (uInv SZ res!) (= res! (lib!definitions_t.index_from_base_and_addr.? (I base!) (I vaddr!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))) (= res! (lib!definitions_t.index_from_base_and_addr.? (I base!) (I vaddr!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))))) :pattern ((ens%lib!definitions_u.impl&%2.index_for_vaddr. self! layer! base! vaddr! res!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::x86_arch_exec")
(declare-fun ens%lib!definitions_t.x86_arch_exec. (lib!definitions_t.ArchExec.) Bool)
(assert (forall ((%return! lib!definitions_t.ArchExec.)) (! (= (ens%lib!definitions_t.x86_arch_exec. %return!) (and (has_type (Poly%lib!definitions_t.ArchExec. %return!) TYPE%lib!definitions_t.ArchExec.) (= (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. %return!)) lib!definitions_t.x86_arch_spec.?))) :pattern ((ens%lib!definitions_t.x86_arch_exec. %return!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::lemma_interp_at_facts_entries")
(declare-fun req%lib!impl_u.l2_impl.PT.lemma_interp_at_facts_entries. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int) Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base_vaddr! Int) (i! Int)) (! (= (req%lib!impl_u.l2_impl.PT.lemma_interp_at_facts_entries. mem! pt! layer! ptr! base_vaddr! i!) (and (=> %%global_location_label%%105 (< i! 512)) (=> %%global_location_label%%106 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (=> %%global_location_label%%107 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!))))))) :pattern ((req%lib!impl_u.l2_impl.PT.lemma_interp_at_facts_entries. mem! pt! layer! ptr! base_vaddr! i!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.lemma_interp_at_facts_entries. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int) Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base_vaddr! Int) (i! Int)) (! (= (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_facts_entries. mem! pt! layer! ptr! base_vaddr! i!) (let ((res$ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base_vaddr!)))) (let ((tmp%%$ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I i!)))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ tmp%%$) (let ((dir_addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (and (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))) (I i!)))) (= (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))) (I i!)))) (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I i!)))) (I (nClip (Add layer! 1))) (I dir_addr$) (I (lib!definitions_t.entry_base_from_index.? (I base_vaddr!) (I i!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))))))))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ tmp%%$) (let ((addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) (and (is-lib!impl_u.l1.NodeEntry./Page_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))) (I i!)))) (= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))) (I i!)))))))))) addr$))) (is-lib!impl_u.l1.NodeEntry./Empty_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))) (I i!))))))))) :pattern ((ens%lib!impl_u.l2_impl.PT.lemma_interp_at_facts_entries. mem! pt! layer! ptr! base_vaddr! i!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::lemma_interp_at_facts_entries")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:811:1: 811:131 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::entry_at")
(declare-fun req%lib!impl_u.l2_impl.PT.entry_at. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int) Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (i! Int)) (! (= (req%lib!impl_u.l2_impl.PT.entry_at. mem! pt! layer! ptr! i!) (and (=> %%global_location_label%%108 (< i! 512)) (=> %%global_location_label%%109 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))))) :pattern ((req%lib!impl_u.l2_impl.PT.entry_at. mem! pt! layer! ptr! i!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.entry_at. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int lib!spec_t.hardware.PageDirectoryEntry.) Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (i! Int) (res! lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (ens%lib!impl_u.l2_impl.PT.entry_at. mem! pt! layer! ptr! i! res!) (and (has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. res!) TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. res!))) layer!) (= (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. res!)) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I i!))) (= res! (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I i!))) (lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. res!)) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. res!))) (< 0 (lib!spec_t.hardware.impl&%3.layer.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. res!)))))) :pattern ((ens%lib!impl_u.l2_impl.PT.entry_at. mem! pt! layer! ptr! i! res!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::entry_at")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:545:1: 545:129 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l1::Directory::lemma_map_frame_structure_assertions")
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_map_frame_structure_assertions. (lib!impl_u.l1.Directory. Int lib!definitions_t.PageTableEntry. Int) Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(declare-const %%global_location_label%%112 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (base! Int) (pte! lib!definitions_t.PageTableEntry.) (idx! Int)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_map_frame_structure_assertions. self! base! pte! idx!) (and (=> %%global_location_label%%110 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!))) (=> %%global_location_label%%111 (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))) (=> %%global_location_label%%112 (= idx! (lib!impl_u.l1.impl&%1.index_for_vaddr.? (Poly%lib!impl_u.l1.Directory. self!) (I base!)))))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_map_frame_structure_assertions. self! base! pte! idx!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_map_frame_structure_assertions. (lib!impl_u.l1.Directory. Int lib!definitions_t.PageTableEntry. Int) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (base! Int) (pte! lib!definitions_t.PageTableEntry.) (idx! Int)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_map_frame_structure_assertions. self! base! pte! idx!) (let ((tmp%%$ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))) (I idx!))))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$) (let ((p$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) true) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (and (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. d$)) (=> (not (= (lib!impl_u.l1.impl&%1.entry_size.? (Poly%lib!impl_u.l1.Directory. self!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. d$) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))) (=> (not (= (lib!impl_u.l1.impl&%1.entry_size.? (Poly%lib!impl_u.l1.Directory. self!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (and (and (and (< (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!))) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!))))))))) (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. self!) (I idx!))))) (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. self!) (I idx!))) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))) (is-core!result.Result./Ok_ (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. self!) (I idx!))) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_map_frame_structure_assertions. self! base! pte! idx!)))))
(set-info :comment ";; Function-Specs lib::definitions_t::ArchExec::entry_base")
(declare-fun req%lib!definitions_u.impl&%2.entry_base. (lib!definitions_t.ArchExec. Int Int Int) Bool)
(declare-const %%global_location_label%%113 Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (idx! Int)) (! (= (req%lib!definitions_u.impl&%2.entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%113 (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))) (=> %%global_location_label%%114 (< layer! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))))))))) (=> %%global_location_label%%115 (<= base! lib!definitions_t.MAX_BASE.?)) (=> %%global_location_label%%116 (<= idx! lib!definitions_t.X86_NUM_ENTRIES.?)))) :pattern ((req%lib!definitions_u.impl&%2.entry_base. self! layer! base! idx!)))))
(declare-fun ens%lib!definitions_u.impl&%2.entry_base. (lib!definitions_t.ArchExec. Int Int Int Int) Bool)
(assert (forall ((self! lib!definitions_t.ArchExec.) (layer! Int) (base! Int) (idx! Int) (res! Int)) (! (= (ens%lib!definitions_u.impl&%2.entry_base. self! layer! base! idx! res!) (and (uInv SZ res!) (= res! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!definitions_u.impl&%2.view.? (Poly%lib!definitions_t.ArchExec. self!))) (I layer!))))))) :pattern ((ens%lib!definitions_u.impl&%2.entry_base. self! layer! base! idx! res!)))))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::PageDirectoryEntry::is_mapping")
(declare-fun req%lib!impl_u.l2_impl.impl&%0.is_mapping. (lib!spec_t.hardware.PageDirectoryEntry.) Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(assert (forall ((self! lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (req%lib!impl_u.l2_impl.impl&%0.is_mapping. self!) (and (=> %%global_location_label%%117 (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) (=> %%global_location_label%%118 (<= (lib!spec_t.hardware.impl&%3.layer.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 3)))) :pattern ((req%lib!impl_u.l2_impl.impl&%0.is_mapping. self!)))))
(declare-fun ens%lib!impl_u.l2_impl.impl&%0.is_mapping. (lib!spec_t.hardware.PageDirectoryEntry. Bool) Bool)
(assert (forall ((self! lib!spec_t.hardware.PageDirectoryEntry.) (r! Bool)) (! (= (ens%lib!impl_u.l2_impl.impl&%0.is_mapping. self! r!) (= r! (not (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Empty_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)))))) :pattern ((ens%lib!impl_u.l2_impl.impl&%0.is_mapping. self! r!)))))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::PageDirectoryEntry::is_dir")
(declare-fun req%lib!impl_u.l2_impl.impl&%0.is_dir. (lib!spec_t.hardware.PageDirectoryEntry. Int) Bool)
(declare-const %%global_location_label%%119 Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(assert (forall ((self! lib!spec_t.hardware.PageDirectoryEntry.) (layer! Int)) (! (= (req%lib!impl_u.l2_impl.impl&%0.is_dir. self! layer!) (and (=> %%global_location_label%%119 (not (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Empty_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))))) (=> %%global_location_label%%120 (= layer! (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))))) (=> %%global_location_label%%121 (<= layer! 3)))) :pattern ((req%lib!impl_u.l2_impl.impl&%0.is_dir. self! layer!)))))
(declare-fun ens%lib!impl_u.l2_impl.impl&%0.is_dir. (lib!spec_t.hardware.PageDirectoryEntry. Int Bool) Bool)
(assert (forall ((self! lib!spec_t.hardware.PageDirectoryEntry.) (layer! Int) (r! Bool)) (! (= (ens%lib!impl_u.l2_impl.impl&%0.is_dir. self! layer! r!) (ite r! (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))))) :pattern ((ens%lib!impl_u.l2_impl.impl&%0.is_dir. self! layer! r!)))))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::PageDirectoryEntry::address")
(declare-fun req%lib!impl_u.l2_impl.impl&%0.address. (lib!spec_t.hardware.PageDirectoryEntry.) Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(declare-const %%global_location_label%%126 Bool)
(assert (forall ((self! lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (req%lib!impl_u.l2_impl.impl&%0.address. self!) (and (=> %%global_location_label%%122 (<= (lib!spec_t.hardware.impl&%3.layer.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 3)) (=> %%global_location_label%%123 (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) (< 0 (lib!spec_t.hardware.impl&%3.layer.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))))) (=> %%global_location_label%%124 (lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) (=> %%global_location_label%%125 (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))) (=> %%global_location_label%%126 (not (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Empty_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!))))))) :pattern ((req%lib!impl_u.l2_impl.impl&%0.address. self!)))))
(declare-fun ens%lib!impl_u.l2_impl.impl&%0.address. (lib!spec_t.hardware.PageDirectoryEntry. Int) Bool)
(assert (forall ((self! lib!spec_t.hardware.PageDirectoryEntry.) (res! Int)) (! (= (ens%lib!impl_u.l2_impl.impl&%0.address. self! res!) (and (uInv 64 res!) (= (uClip SZ res!) (let ((tmp%%$ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)))) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ tmp%%$) (let ((addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) addr$) (ite (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ tmp%%$) (let ((addr$ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. tmp%%$))))) addr$) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ))))))))) :pattern ((ens%lib!impl_u.l2_impl.impl&%0.address. self! res!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::lemma_inv_at_different_memory")
(declare-fun req%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int) Bool)
(declare-const %%global_location_label%%127 Bool)
(declare-const %%global_location_label%%128 Bool)
(declare-const %%global_location_label%%129 Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(assert (forall ((mem1! lib!spec_t.mem.PageTableMemory.) (mem2! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int)) (! (= (req%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem1! mem2! pt! layer! ptr!) (and (=> %%global_location_label%%127 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem1!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (=> %%global_location_label%%128 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem1!) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!) r$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem1!) r$))))) (=> %%global_location_label%%129 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!))) (=> %%global_location_label%%130 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!))) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (=> %%global_location_label%%131 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!))))))) :pattern ((req%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem1! mem2! pt! layer! ptr!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int) Bool)
(assert (forall ((mem1! lib!spec_t.mem.PageTableMemory.) (mem2! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int)) (! (= (ens%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem1! mem2! pt! layer! ptr!) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) :pattern ((ens%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem1! mem2! pt! layer! ptr!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::lemma_inv_at_different_memory")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:718:7: 718:132 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::lemma_interp_at_entry_different_memory")
(declare-fun req%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int) Bool)
(declare-const %%global_location_label%%132 Bool)
(declare-const %%global_location_label%%133 Bool)
(declare-const %%global_location_label%%134 Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(declare-const %%global_location_label%%137 Bool)
(declare-const %%global_location_label%%138 Bool)
(assert (forall ((mem1! lib!spec_t.mem.PageTableMemory.) (pt1! lib!impl_u.l2_impl.PTDir.) (mem2! lib!spec_t.mem.PageTableMemory.) (pt2! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (idx! Int)) (! (= (req%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem1! pt1! mem2! pt2! layer! ptr! base! idx!) (and (=> %%global_location_label%%132 (< idx! lib!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%133 (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt2!))) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt1!))))) (=> %%global_location_label%%134 (= (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt2!)))) (I idx!)) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt1!)))) (I idx!)))) (=> %%global_location_label%%135 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem1!) (Poly%lib!impl_u.l2_impl.PTDir. pt1!) (I layer!) (I ptr!))) (=> %%global_location_label%%136 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!) (Poly%lib!impl_u.l2_impl.PTDir. pt2!) (I layer!) (I ptr!))) (=> %%global_location_label%%137 (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem1!) (Poly%lib!impl_u.l2_impl.PTDir. pt1!) (I layer!) (I ptr!) (I idx!)) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!) (Poly%lib!impl_u.l2_impl.PTDir. pt2!) (I layer!) (I ptr!) (I idx!)))) (=> %%global_location_label%%138 (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt2!)))) (I idx!)))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt2!)))) (I idx!))))))) r$) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem1!) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!) r$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem1!) r$)))))))) :pattern ((req%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem1! pt1! mem2! pt2! layer! ptr! base! idx!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int) Bool)
(assert (forall ((mem1! lib!spec_t.mem.PageTableMemory.) (pt1! lib!impl_u.l2_impl.PTDir.) (mem2! lib!spec_t.mem.PageTableMemory.) (pt2! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (idx! Int)) (! (= (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem1! pt1! mem2! pt2! layer! ptr! base! idx!) (= (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem1!) (Poly%lib!impl_u.l2_impl.PTDir. pt1!) (I layer!) (I ptr!) (I base!) (I idx!)) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem2!) (Poly%lib!impl_u.l2_impl.PTDir. pt2!) (I layer!) (I ptr!) (I base!) (I idx!)))) :pattern ((ens%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem1! pt1! mem2! pt2! layer! ptr! base! idx!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::lemma_interp_at_entry_different_memory")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:749:7: 749:175 (#0)")
(set-info :comment ";; Function-Specs lib::definitions_t::Arch::lemma_entry_sizes_increase")
(declare-fun req%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. (lib!definitions_t.Arch. Int Int) Bool)
(declare-const %%global_location_label%%139 Bool)
(declare-const %%global_location_label%%140 Bool)
(declare-const %%global_location_label%%141 Bool)
(assert (forall ((self! lib!definitions_t.Arch.) (i! Int) (j! Int)) (! (= (req%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. self! i! j!) (and (=> %%global_location_label%%139 (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. self!))) (=> %%global_location_label%%140 (< i! j!)) (=> %%global_location_label%%141 (< j! (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. self!))))))))) :pattern ((req%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. self! i! j!)))))
(declare-fun ens%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. (lib!definitions_t.Arch. Int Int) Bool)
(assert (forall ((self! lib!definitions_t.Arch.) (i! Int) (j! Int)) (! (= (ens%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. self! i! j!) (>= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) (I i!)) (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. self!) (I j!)))) :pattern ((ens%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. self! i! j!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::lemma_page_aligned_implies_mask_dir_addr_is_identity")
(declare-fun ens%lib!impl_u.l2_impl.lemma_page_aligned_implies_mask_dir_addr_is_identity. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!impl_u.l2_impl.lemma_page_aligned_implies_mask_dir_addr_is_identity. no%param) (forall ((addr$ Poly)) (! (=> (has_type addr$ (UINT 64)) (=> (<= (%I addr$) lib!definitions_t.MAX_PHYADDR_SPEC.?) (=> (lib!definitions_t.aligned.? addr$ (I lib!definitions_t.PAGE_SIZE.?)) (= (uClip 64 (bitand (I (%I addr$)) (I lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.?))) (%I addr$))))) :pattern ((lib!definitions_t.aligned.? addr$ (I lib!definitions_t.PAGE_SIZE.?)))))) :pattern ((ens%lib!impl_u.l2_impl.lemma_page_aligned_implies_mask_dir_addr_is_identity. no%param)))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::lemma_aligned_addr_mask_facts")
(declare-fun ens%lib!impl_u.l2_impl.lemma_aligned_addr_mask_facts. (Int) Bool)
(assert (forall ((addr! Int)) (! (= (ens%lib!impl_u.l2_impl.lemma_aligned_addr_mask_facts. addr!) (and (=> (lib!definitions_t.aligned.? (I addr!) (I lib!definitions_t.L1_ENTRY_SIZE.?)) (= (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?))) (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))))) (=> (lib!definitions_t.aligned.? (I addr!) (I lib!definitions_t.L2_ENTRY_SIZE.?)) (= (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?))) (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))))) (= (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?))) (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))) (=> (and (<= addr! lib!definitions_t.MAX_PHYADDR_SPEC.?) (lib!definitions_t.aligned.? (I addr!) (I lib!definitions_t.L1_ENTRY_SIZE.?))) (= (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))) addr!)) (=> (and (<= addr! lib!definitions_t.MAX_PHYADDR_SPEC.?) (lib!definitions_t.aligned.? (I addr!) (I lib!definitions_t.L2_ENTRY_SIZE.?))) (= (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))) addr!)) (=> (and (<= addr! lib!definitions_t.MAX_PHYADDR_SPEC.?) (lib!definitions_t.aligned.? (I addr!) (I lib!definitions_t.L3_ENTRY_SIZE.?))) (= (uClip 64 (bitand (I addr!) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))) addr!)))) :pattern ((ens%lib!impl_u.l2_impl.lemma_aligned_addr_mask_facts. addr!)))))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::PageDirectoryEntry::new_page_entry")
(declare-fun req%lib!impl_u.l2_impl.impl&%0.new_page_entry. (Int lib!definitions_t.PageTableEntryExec.) Bool)
(declare-const %%global_location_label%%142 Bool)
(declare-const %%global_location_label%%143 Bool)
(declare-const %%global_location_label%%144 Bool)
(assert (forall ((layer! Int) (pte! lib!definitions_t.PageTableEntryExec.)) (! (= (req%lib!impl_u.l2_impl.impl&%0.new_page_entry. layer! pte!) (and (=> %%global_location_label%%142 (and (< 0 layer!) (<= layer! 3))) (=> %%global_location_label%%143 (lib!impl_u.l2_impl.addr_is_zero_padded.? (I layer!) (I (uClip 64 (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (B true))) (=> %%global_location_label%%144 (= (uClip 64 (bitand (I (uClip 64 (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))) (uClip 64 (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))))))) :pattern ((req%lib!impl_u.l2_impl.impl&%0.new_page_entry. layer! pte!)))))
(declare-fun ens%lib!impl_u.l2_impl.impl&%0.new_page_entry. (Int lib!definitions_t.PageTableEntryExec. lib!spec_t.hardware.PageDirectoryEntry.) Bool)
(assert (forall ((layer! Int) (pte! lib!definitions_t.PageTableEntryExec.) (r! lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (ens%lib!impl_u.l2_impl.impl&%0.new_page_entry. layer! pte! r!) (and (has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!) TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)) (lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)) (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Page_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))) (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))) layer!) (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))))) (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))) (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))) (I lib!spec_t.hardware.MASK_FLAG_P.?))) lib!spec_t.hardware.MASK_FLAG_P.?) (= (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))) (I lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?))) lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?) (not (= layer! 3))) (= (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))) (I lib!spec_t.hardware.MASK_FLAG_RW.?))) lib!spec_t.hardware.MASK_FLAG_RW.?) (lib!definitions_t.Flags./Flags/is_writable (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))))) (lib!definitions_t.Flags./Flags/is_writable (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (= (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))) (I lib!spec_t.hardware.MASK_FLAG_US.?))) lib!spec_t.hardware.MASK_FLAG_US.?) (not (lib!definitions_t.Flags./Flags/is_supervisor (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))))) (not (lib!definitions_t.Flags./Flags/is_supervisor (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (not (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))) (I lib!spec_t.hardware.MASK_FLAG_PWT.?))) lib!spec_t.hardware.MASK_FLAG_PWT.?)) (not (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))) (I lib!spec_t.hardware.MASK_FLAG_PCD.?))) lib!spec_t.hardware.MASK_FLAG_PCD.?)) (= (= (uClip 64 (bitand (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))) (I lib!spec_t.hardware.MASK_FLAG_XD.?))) lib!spec_t.hardware.MASK_FLAG_XD.?) (lib!definitions_t.Flags./Flags/disable_execute (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))))) (lib!definitions_t.Flags./Flags/disable_execute (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))))) :pattern ((ens%lib!impl_u.l2_impl.impl&%0.new_page_entry. layer! pte! r!)))))
(set-info :comment ";; Function-Specs lib::spec_t::hardware::PageDirectoryEntry::new_dir_entry")
(declare-fun req%lib!impl_u.l2_impl.impl&%0.new_dir_entry. (Int Int) Bool)
(declare-const %%global_location_label%%145 Bool)
(declare-const %%global_location_label%%146 Bool)
(assert (forall ((layer! Int) (address! Int)) (! (= (req%lib!impl_u.l2_impl.impl&%0.new_dir_entry. layer! address!) (and (=> %%global_location_label%%145 (< layer! 3)) (=> %%global_location_label%%146 (= (uClip 64 (bitand (I address!) (I lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.?))) address!)))) :pattern ((req%lib!impl_u.l2_impl.impl&%0.new_dir_entry. layer! address!)))))
(declare-fun ens%lib!impl_u.l2_impl.impl&%0.new_dir_entry. (Int Int lib!spec_t.hardware.PageDirectoryEntry.) Bool)
(assert (forall ((layer! Int) (address! Int) (r! lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (ens%lib!impl_u.l2_impl.impl&%0.new_dir_entry. layer! address! r!) (and (has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!) TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)) (lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)) (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))) (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))) layer!) (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))))) address!) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!))))) (not (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. r!)))))))) :pattern ((ens%lib!impl_u.l2_impl.impl&%0.new_dir_entry. layer! address! r!)))))
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::lemma_empty_at_interp_at_aux_equal_l1_empty_dir")
(declare-fun req%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. Int) Bool)
(declare-const %%global_location_label%%147 Bool)
(declare-const %%global_location_label%%148 Bool)
(declare-const %%global_location_label%%149 Bool)
(declare-const %%global_location_label%%150 Bool)
(declare-const %%global_location_label%%151 Bool)
(declare-const %%global_location_label%%152 Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (init! vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) (idx! Int)) (! (= (req%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. mem! pt! layer! ptr! base! init! idx!) (and (=> %%global_location_label%%147 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (=> %%global_location_label%%148 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!))) (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!) i$)) lib!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!) i$))))) (=> %%global_location_label%%149 (<= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!)) lib!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%150 (< idx! lib!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%151 (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I idx!)))) (=> %%global_location_label%%152 (lib!impl_u.l2_impl.PT.empty_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx!)))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I idx!)))))))))) :pattern ((req%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. mem! pt! layer! ptr! base! init! idx!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. Int) Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (init! vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) (idx! Int)) (! (= (ens%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. mem! pt! layer! ptr! base! init! idx!) (let ((res$ (lib!impl_u.l2_impl.PT.interp_at_aux.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx!)))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I idx!)))))) (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))))) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. init!)))) (and (= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$)) lib!definitions_t.X86_NUM_ENTRIES.?) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$))) (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) i$)) lib!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. res$) i$))))))) :pattern ((ens%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. mem! pt! layer! ptr! base! init! idx!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::lemma_empty_at_interp_at_aux_equal_l1_empty_dir")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:1596:7: 1596:167 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::lemma_empty_at_interp_at_equal_l1_empty_dir")
(declare-fun req%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_equal_l1_empty_dir. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int) Bool)
(declare-const %%global_location_label%%153 Bool)
(declare-const %%global_location_label%%154 Bool)
(declare-const %%global_location_label%%155 Bool)
(declare-const %%global_location_label%%156 Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (idx! Int)) (! (= (req%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_equal_l1_empty_dir. mem! pt! layer! ptr! base! idx!) (and (=> %%global_location_label%%153 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (=> %%global_location_label%%154 (< idx! lib!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%155 (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I idx!)))) (=> %%global_location_label%%156 (lib!impl_u.l2_impl.PT.empty_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx!)))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I idx!)))))))))) :pattern ((req%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_equal_l1_empty_dir. mem! pt! layer! ptr! base! idx!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_equal_l1_empty_dir. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int) Bool)
(assert (forall ((mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (idx! Int)) (! (= (ens%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_equal_l1_empty_dir. mem! pt! layer! ptr! base! idx!) (let ((res$ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx!)))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I idx!)))))) (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!)))))))) (and (= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$))))) lib!definitions_t.X86_NUM_ENTRIES.?) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))))) (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))) i$)) lib!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. res$)))) i$))))))) :pattern ((ens%lib!impl_u.l2_impl.PT.lemma_empty_at_interp_at_equal_l1_empty_dir. mem! pt! layer! ptr! base! idx!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::lemma_empty_at_interp_at_equal_l1_empty_dir")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:1630:7: 1630:137 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::insert_empty_directory")
(declare-fun req%lib!impl_u.l2_impl.PT.insert_empty_directory. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int) Bool)
(declare-const %%global_location_label%%157 Bool)
(declare-const %%global_location_label%%158 Bool)
(declare-const %%global_location_label%%159 Bool)
(declare-const %%global_location_label%%160 Bool)
(declare-const %%global_location_label%%161 Bool)
(declare-const %%global_location_label%%162 Bool)
(assert (forall ((pre%mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (idx! Int)) (! (= (req%lib!impl_u.l2_impl.PT.insert_empty_directory. pre%mem! pt! layer! ptr! base! idx!) (and (=> %%global_location_label%%157 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (=> %%global_location_label%%158 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))))) (=> %%global_location_label%%159 (> (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!)) 0)) (=> %%global_location_label%%160 (< layer! 3)) (=> %%global_location_label%%161 (< idx! 512)) (=> %%global_location_label%%162 (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Empty_ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I idx!)))))) :pattern ((req%lib!impl_u.l2_impl.PT.insert_empty_directory. pre%mem! pt! layer! ptr! base! idx!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.insert_empty_directory. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int tuple%3.) Bool)
(assert (forall ((pre%mem! lib!spec_t.mem.PageTableMemory.) (mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (idx! Int) (res! tuple%3.)) (! (= (ens%lib!impl_u.l2_impl.PT.insert_empty_directory. pre%mem! mem! pt! layer! ptr! base! idx! res!) (and (has_type (Poly%tuple%3. res!) (TYPE%tuple%3. (GHOST $) TYPE%lib!impl_u.l2_impl.PTDir. $ TYPE%lib!definitions_t.MemRegionExec. $ TYPE%lib!spec_t.hardware.PageDirectoryEntry.)) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))) (I layer!) (I ptr!)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!))))))) (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!)))))))) (= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. mem!)) (Sub (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!)) 1)) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) 512) (not (= (%I i$) idx!))) (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))) (I layer!) (I ptr!) i$) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))) (I layer!) (I ptr!) i$)))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))) (I layer!) (I ptr!) i$)) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))) (I layer!) (I ptr!) i$)))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (and (not (= (%Poly%lib!definitions_t.MemRegion. r$) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))))))) (not (= (%Poly%lib!definitions_t.MemRegion. r$) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!)))))) (I idx!))))))))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) r$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) r$)) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) r$)))) (let ((pt_res$ (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!)))))) (let ((new_dir_region$ (%Poly%lib!definitions_t.MemRegionExec. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!)))))) (let ((new_dir_entry$ (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. res!)))))) (let ((new_dir_pt$ (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$)))) (I idx!))))))) (let ((entry_base$ (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!)))))) (let ((new_dir_interp$ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$)))) (I idx!)))) (I (nClip (Add layer! 1))) (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. new_dir_region$)))) (I entry_base$)))) (let ((interp$ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))) (and (and (and (and (and (and (and (and (= (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt_res$) (I layer!) (I ptr!) (I idx!)) new_dir_entry$) (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt_res$) (I layer!) (I ptr!) (I idx!)))) (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt_res$) (I layer!) (I ptr!) (I idx!))))) (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. new_dir_region$))))) (= new_dir_interp$ (lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly%lib!impl_u.l1.Directory. interp$) (I idx!)))) (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. new_dir_interp$))) (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$))) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (= (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$))) (%Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx!) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt$))))))) (= (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$))) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. new_dir_region$))))))) (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt$))) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. new_dir_region$))))))))))))) :pattern ((ens%lib!impl_u.l2_impl.PT.insert_empty_directory. pre%mem! mem! pt! layer! ptr! base! idx! res!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::insert_empty_directory")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:1743:1: 1744:117 (#0)")
(set-info :comment ";; Function-Specs lib::impl_u::l2_impl::PT::map_frame_aux")
(declare-fun req%lib!impl_u.l2_impl.PT.map_frame_aux. (lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int lib!definitions_t.PageTableEntryExec.) Bool)
(declare-const %%global_location_label%%163 Bool)
(declare-const %%global_location_label%%164 Bool)
(declare-const %%global_location_label%%165 Bool)
(declare-const %%global_location_label%%166 Bool)
(declare-const %%global_location_label%%167 Bool)
(declare-const %%global_location_label%%168 Bool)
(declare-const %%global_location_label%%169 Bool)
(assert (forall ((pre%mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (vaddr! Int) (pte! lib!definitions_t.PageTableEntryExec.)) (! (= (req%lib!impl_u.l2_impl.PT.map_frame_aux. pre%mem! pt! layer! ptr! base! vaddr! pte!) (and (=> %%global_location_label%%163 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (=> %%global_location_label%%164 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))))) (=> %%global_location_label%%165 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!))) (=> %%global_location_label%%166 (>= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!)) (Sub 3 layer!))) (=> %%global_location_label%%167 (lib!impl_u.l2_impl.PT.accepted_mapping.? (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))) (=> %%global_location_label%%168 (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))) (=> %%global_location_label%%169 (and (<= base! vaddr!) (< vaddr! lib!definitions_t.MAX_BASE.?))))) :pattern ((req%lib!impl_u.l2_impl.PT.map_frame_aux. pre%mem! pt! layer! ptr! base! vaddr! pte!)))))
(declare-fun ens%lib!impl_u.l2_impl.PT.map_frame_aux. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!impl_u.l2_impl.PTDir. Int Int Int Int lib!definitions_t.PageTableEntryExec. core!result.Result.) Bool)
(assert (forall ((pre%mem! lib!spec_t.mem.PageTableMemory.) (mem! lib!spec_t.mem.PageTableMemory.) (pt! lib!impl_u.l2_impl.PTDir.) (layer! Int) (ptr! Int) (base! Int) (vaddr! Int) (pte! lib!definitions_t.PageTableEntryExec.) (res! core!result.Result.)) (! (= (ens%lib!impl_u.l2_impl.PT.map_frame_aux. pre%mem! mem! pt! layer! ptr! base! vaddr! pte! res!) (and (has_type (Poly%core!result.Result. res!) (TYPE%core!result.Result. (GHOST $) (TYPE%tuple%2. $ TYPE%lib!impl_u.l2_impl.PTDir. $ (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) $ TYPE%tuple%0.)) (ite (is-core!result.Result./Ok_ res!) (let ((resv$ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))))) (let ((pt_res$ (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. resv$)))))) (let ((new_regions$ (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. resv$)))))) (and (and (and (and (and (and (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$)))) (= (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$))) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$))))) (vstd!set.impl&%0.disjoint.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!))))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$))))) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt_res$) (I layer!) (I ptr!))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$) r$))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$))))) (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$))) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))))) (let ((e$ (%Poly%tuple%0. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))))) (= mem! pre%mem!))) (ite (is-core!result.Result./Ok_ res!) (let ((resv$ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))))) (let ((pt_res$ (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. resv$)))))) (let ((new_regions$ (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. resv$)))))) (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt_res$) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (let ((e$ (%Poly%tuple%0. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))))) (= (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%mem!))))) :pattern ((ens%lib!impl_u.l2_impl.PT.map_frame_aux. pre%mem! mem! pt! layer! ptr! base! vaddr! pte! res!)))))
(set-info :comment ";; Function-Def lib::impl_u::l2_impl::PT::map_frame_aux")
(set-info :comment ";; page-table/impl_u/l2_impl.rs:953:1: 954:54 (#0)")
(declare-const res! core!result.Result.)
(declare-const mem!@0 lib!spec_t.mem.PageTableMemory.)
(declare-const pt! lib!impl_u.l2_impl.PTDir.)
(declare-const layer! Int)
(declare-const ptr! Int)
(declare-const base! Int)
(declare-const vaddr! Int)
(declare-const pte! lib!definitions_t.PageTableEntryExec.)
(declare-const tmp%1 lib!definitions_t.ArchExec.)
(declare-const tmp%2 Int)
(declare-const tmp%3 Int)
(declare-const es@ Int)
(declare-const tmp%4 lib!definitions_t.PageTableEntry.)
(declare-const tmp%5 lib!definitions_t.PageTableEntry.)
(declare-const tmp%6 lib!definitions_t.ArchExec.)
(declare-const tmp%7 Int)
(declare-const tmp%8 Bool)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 lib!definitions_t.ArchExec.)
(declare-const tmp%12 Int)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Int)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Bool)
(declare-const tmp%17 Int)
(declare-const tmp%18 Bool)
(declare-const tmp%19 Bool)
(declare-const tmp%20 Bool)
(declare-const tmp%21 Bool)
(declare-const tmp%22 Bool)
(declare-const tmp%23 Bool)
(declare-const tmp%24 Bool)
(declare-const i@ Poly)
(declare-const i$1@ Poly)
(declare-const i$2@ Poly)
(declare-const tmp%25 Bool)
(declare-const tmp%26 Bool)
(declare-const tmp%27 Bool)
(declare-const tmp%28 Bool)
(declare-const entry$1@ lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-const tmp%29 Bool)
(declare-const tmp%30 Bool)
(declare-const tmp%31 Bool)
(declare-const i$3@ Poly)
(declare-const j@ Poly)
(declare-const r@ Poly)
(declare-const tmp%32 Bool)
(declare-const tmp%33 Bool)
(declare-const tmp%34 Bool)
(declare-const tmp%35 Bool)
(declare-const tmp%36 Bool)
(declare-const tmp%37 Bool)
(declare-const tmp%38 Bool)
(declare-const tmp%39 Bool)
(declare-const tmp%40 Bool)
(declare-const tmp%41 Bool)
(declare-const tmp%42 Bool)
(declare-const tmp%43 Bool)
(declare-const tmp%44 Bool)
(declare-const tmp%45 Bool)
(declare-const tmp%46 Bool)
(declare-const tmp%47 Bool)
(declare-const tmp%48 Bool)
(declare-const tmp%49 Bool)
(declare-const tmp%50 Bool)
(declare-const tmp%51 Bool)
(declare-const i$4@ Poly)
(declare-const tmp%52 Bool)
(declare-const tmp%53 Bool)
(declare-const tmp%54 Bool)
(declare-const tmp%55 Bool)
(declare-const tmp%56 Bool)
(declare-const tmp%57 Bool)
(declare-const tmp%58 Bool)
(declare-const tmp%59 Bool)
(declare-const r$1@ Poly)
(declare-const tmp%60 Bool)
(declare-const tmp%61 Bool)
(declare-const tmp%62 Bool)
(declare-const tmp%63 Bool)
(declare-const tmp%64 Bool)
(declare-const tmp%65 Bool)
(declare-const tmp%66 Bool)
(declare-const tmp%67 Bool)
(declare-const tmp%68 lib!impl_u.l2_impl.PTDir.)
(declare-const tmp%69 Int)
(declare-const tmp%70 Int)
(declare-const tmp%71 Bool)
(declare-const pt_entry@ lib!impl_u.l2_impl.PTDir.)
(declare-const entry$4@ lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-const tmp%72 Bool)
(declare-const tmp%73 Bool)
(declare-const tmp%74 vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-const tmp%75 Bool)
(declare-const tmp%76 Bool)
(declare-const tmp%77 Bool)
(declare-const tmp%78 Bool)
(declare-const tmp%79 Bool)
(declare-const tmp%80 Bool)
(declare-const tmp%81 Bool)
(declare-const i$5@ Poly)
(declare-const tmp%82 Bool)
(declare-const tmp%83 Bool)
(declare-const tmp%84 Bool)
(declare-const tmp%85 Bool)
(declare-const tmp%86 Bool)
(declare-const r$2@ Poly)
(declare-const tmp%87 Bool)
(declare-const tmp%88 Bool)
(declare-const tmp%89 Bool)
(declare-const tmp%90 Bool)
(declare-const pt_entry$1@ lib!impl_u.l2_impl.PTDir.)
(declare-const tmp%91 Bool)
(declare-const tmp%92 Bool)
(declare-const tmp%93 Bool)
(declare-const tmp%94 Bool)
(declare-const r$3@ Poly)
(declare-const tmp%95 Bool)
(declare-const tmp%96 Bool)
(declare-const tmp%97 Bool)
(declare-const tmp%98 Bool)
(declare-const dir_pt_res@ lib!impl_u.l2_impl.PTDir.)
(declare-const new_regions@ vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-const pt_res@ lib!impl_u.l2_impl.PTDir.)
(declare-const rec_res@ tuple%2.)
(declare-const tmp%99 Bool)
(declare-const e@ tuple%0.)
(declare-const tmp%100 core!result.Result.)
(declare-const tmp%%@ core!result.Result.)
(declare-const dir_addr@ Int)
(declare-const dir_pt@ lib!impl_u.l2_impl.PTDir.)
(declare-const tmp%101 core!result.Result.)
(declare-const tmp%102 Bool)
(declare-const tmp%103 core!result.Result.)
(declare-const tmp%104 lib!definitions_t.ArchExec.)
(declare-const tmp%105 Int)
(declare-const tmp%106 Bool)
(declare-const tmp%107 Bool)
(declare-const i$6@ Poly)
(declare-const tmp%108 lib!definitions_t.Arch.)
(declare-const iprime@ Int)
(declare-const tmp%109 Bool)
(declare-const tmp%110 Bool)
(declare-const tmp%111 Bool)
(declare-const tmp%112 Bool)
(declare-const tmp%113 Bool)
(declare-const tmp%114 Bool)
(declare-const tmp%115 Bool)
(declare-const tmp%116 Bool)
(declare-const tmp%117 Bool)
(declare-const frame_base@ Int)
(declare-const tmp%118 lib!definitions_t.MemRegion.)
(declare-const tmp%119 Int)
(declare-const tmp%120 Bool)
(declare-const i$7@ Poly)
(declare-const i$8@ Poly)
(declare-const i$9@ Poly)
(declare-const tmp%121 Bool)
(declare-const tmp%122 lib!impl_u.l2_impl.PTDir.)
(declare-const tmp%123 Int)
(declare-const tmp%124 Int)
(declare-const entry$7@ lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-const tmp%125 vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-const tmp%126 Bool)
(declare-const tmp%127 Bool)
(declare-const tmp%128 Bool)
(declare-const i$10@ Poly)
(declare-const tmp%129 Bool)
(declare-const tmp%130 Bool)
(declare-const tmp%131 Bool)
(declare-const tmp%132 Bool)
(declare-const tmp%133 Bool)
(declare-const tmp%134 Bool)
(declare-const tmp%135 Bool)
(declare-const tmp%136 Bool)
(declare-const tmp%137 Bool)
(declare-const tmp%138 Bool)
(declare-const new_interp@ lib!impl_u.l1.Directory.)
(declare-const tmp%139 Bool)
(declare-const tmp%140 Bool)
(declare-const tmp%141 Bool)
(declare-const new_page_entry@ lib!spec_t.hardware.PageDirectoryEntry.)
(declare-const pwmem@ lib!spec_t.mem.PageTableMemory.)
(declare-const tmp%142 Int)
(declare-const tmp%143 Int)
(declare-const tmp%144 Bool)
(declare-const tmp%145 Bool)
(declare-const tmp%146 Bool)
(declare-const i$11@ Poly)
(declare-const i$12@ Poly)
(declare-const i$13@ Poly)
(declare-const tmp%147 Bool)
(declare-const tmp%148 Bool)
(declare-const i$14@ Poly)
(declare-const tmp%149 Bool)
(declare-const tmp%150 Bool)
(declare-const tmp%151 Bool)
(declare-const tmp%152 Bool)
(declare-const tmp%153 Bool)
(declare-const tmp%154 Bool)
(declare-const tmp%155 Bool)
(declare-const tmp%156 Bool)
(declare-const tmp%157 Bool)
(declare-const tmp%158 Bool)
(declare-const tmp%159 Int)
(declare-const tmp%160 Int)
(declare-const tmp%161 Bool)
(declare-const pt_entry$2@ lib!impl_u.l2_impl.PTDir.)
(declare-const entry$12@ lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-const tmp%162 Bool)
(declare-const tmp%163 Bool)
(declare-const tmp%164 Bool)
(declare-const i$15@ Poly)
(declare-const r$4@ Poly)
(declare-const tmp%165 Bool)
(declare-const tmp%166 Bool)
(declare-const tmp%167 Bool)
(declare-const tmp%168 Bool)
(declare-const i$16@ Poly)
(declare-const j$1@ Poly)
(declare-const r$5@ Poly)
(declare-const tmp%169 Bool)
(declare-const tmp%170 Bool)
(declare-const tmp%171 Bool)
(declare-const tmp%172 Bool)
(declare-const tmp%173 Bool)
(declare-const tmp%174 Bool)
(declare-const tmp%175 Bool)
(declare-const tmp%176 Bool)
(declare-const tmp%177 Bool)
(declare-const tmp%178 Bool)
(declare-const tmp%179 Bool)
(declare-const tmp%180 Bool)
(declare-const tmp%181 Bool)
(declare-const tmp%182 Bool)
(declare-const tmp%183 Bool)
(declare-const tmp%184 Bool)
(declare-const tmp%185 Bool)
(declare-const tmp%186 Bool)
(declare-const tmp%187 Bool)
(declare-const tmp%188 Bool)
(declare-const tmp%189 Bool)
(declare-const tmp%190 Bool)
(declare-const tmp%191 Bool)
(declare-const tmp%192 vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-const tmp%193 Bool)
(declare-const tmp%194 Bool)
(declare-const tmp%195 vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-const i$17@ Poly)
(declare-const i$18@ Poly)
(declare-const tmp%196 Bool)
(declare-const r$6@ Poly)
(declare-const tmp%197 Bool)
(declare-const tmp%198 Bool)
(declare-const tmp%199 Bool)
(declare-const tmp%200 Bool)
(declare-const tmp%201 Bool)
(declare-const tmp%202 Bool)
(declare-const pt_entry$3@ lib!impl_u.l2_impl.PTDir.)
(declare-const tmp%203 Bool)
(declare-const tmp%204 Bool)
(declare-const tmp%205 Bool)
(declare-const final_interp@ lib!impl_u.l1.Directory.)
(declare-const prev_interp@ lib!impl_u.l1.Directory.)
(declare-const tmp%206 Bool)
(declare-const tmp%207 Bool)
(declare-const tmp%208 Bool)
(declare-const r$7@ Poly)
(declare-const tmp%209 Bool)
(declare-const tmp%210 Bool)
(declare-const tmp%211 Bool)
(declare-const tmp%212 Bool)
(declare-const tmp%213 Bool)
(declare-const r$8@ Poly)
(declare-const tmp%214 Bool)
(declare-const tmp%215 Bool)
(declare-const tmp%216 Bool)
(declare-const tmp%217 Bool)
(declare-const tmp%218 Bool)
(declare-const dir_pt_res$1@ lib!impl_u.l2_impl.PTDir.)
(declare-const dir_new_regions@ vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-const pt_final@ lib!impl_u.l2_impl.PTDir.)
(declare-const new_regions$1@ vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-const rec_res$1@ tuple%2.)
(declare-const tmp%219 Int)
(declare-const tmp%220 Int)
(declare-const e$1@ tuple%0.)
(declare-const tmp%221 core!result.Result.)
(declare-const tmp%%$2@ core!result.Result.)
(declare-const tmp%%$1@ tuple%3.)
(declare-const pt_with_empty@ lib!impl_u.l2_impl.PTDir.)
(declare-const new_dir_region@ lib!definitions_t.MemRegionExec.)
(declare-const new_dir_entry@ lib!spec_t.hardware.PageDirectoryEntry.)
(declare-const new_dir_pt@ lib!impl_u.l2_impl.PTDir.)
(declare-const mem_with_empty@ lib!spec_t.mem.PageTableMemory.)
(declare-const tmp%222 core!result.Result.)
(declare-const tmp%223 core!result.Result.)
(declare-const idx@ Int)
(declare-const entry@ lib!spec_t.hardware.PageDirectoryEntry.)
(declare-const interp@ lib!impl_u.l1.Directory.)
(declare-const entry_base@ Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!impl_u.l2_impl.PTDir. pt!) TYPE%lib!impl_u.l2_impl.PTDir.))
(assert (uInv SZ layer!))
(assert (uInv SZ ptr!))
(assert (uInv SZ base!))
(assert (uInv SZ vaddr!))
(assert (has_type (Poly%lib!definitions_t.PageTableEntryExec. pte!) TYPE%lib!definitions_t.PageTableEntryExec.))
(assert (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!)))
(assert (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))))
(assert (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0)))
(assert (>= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0)) (Sub 3 layer!)))
(assert (lib!impl_u.l2_impl.PT.accepted_mapping.? (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))
(assert (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))
(assert (and (<= base! vaddr!) (< vaddr! lib!definitions_t.MAX_BASE.?)))
(declare-fun %%choose%%1 (Type Int Int Poly Int Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Poly) (%%hole%%4 Int) (%%hole%%5 Poly)) (! (=> (exists ((i$ Poly)) (! (and (has_type i$ %%hole%%0) (and (and (< %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (= (lib!definitions_t.impl&%8.entry_size.? %%hole%%3 i$) %%hole%%4))) :pattern ((lib!definitions_t.impl&%8.entry_size.? %%hole%%5 i$)))) (exists ((i$ Poly)) (! (and (and (has_type i$ %%hole%%0) (and (and (< %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (= (lib!definitions_t.impl&%8.entry_size.? %%hole%%3 i$) %%hole%%4))) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) i$)) :pattern ((lib!definitions_t.impl&%8.entry_size.? %%hole%%5 i$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5)))))
(declare-const mem!@1 lib!spec_t.mem.PageTableMemory.)
(declare-const mem!@2 lib!spec_t.mem.PageTableMemory.)
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(declare-const %%switch_label%%5 Bool)
(declare-const %%switch_label%%6 Bool)
(declare-const %%switch_label%%7 Bool)
(declare-const %%switch_label%%8 Bool)
(declare-const %%switch_label%%9 Bool)
(declare-const %%switch_label%%10 Bool)
(declare-const %%switch_label%%11 Bool)
(declare-const %%switch_label%%12 Bool)
(declare-const %%switch_label%%13 Bool)
(declare-const %%switch_label%%14 Bool)
(declare-const %%switch_label%%15 Bool)
(declare-const %%switch_label%%16 Bool)
(declare-const %%switch_label%%17 Bool)
(declare-const %%switch_label%%18 Bool)
(declare-const %%switch_label%%19 Bool)
(declare-const %%switch_label%%20 Bool)
(declare-const %%switch_label%%21 Bool)
(declare-const %%switch_label%%22 Bool)
(declare-const %%switch_label%%23 Bool)
(declare-const %%switch_label%%24 Bool)
(declare-const %%switch_label%%25 Bool)
(declare-const %%switch_label%%26 Bool)
(declare-const %%switch_label%%27 Bool)
(declare-const %%switch_label%%28 Bool)
(declare-const %%switch_label%%29 Bool)
(declare-const %%switch_label%%30 Bool)
(declare-const %%switch_label%%31 Bool)
(declare-const %%switch_label%%32 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%42 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%43 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%44 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%45 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%46 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%47 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%48 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%49 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%50 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%51 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%52 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%53 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%54 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%55 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%56 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%57 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%58 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%59 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%60 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%61 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%62 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%63 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%64 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%65 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%66 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%67 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%68 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%69 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%70 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%71 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%72 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%73 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%74 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%75 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%76 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%77 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%78 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%79 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%80 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%81 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%82 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%83 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%84 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%85 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%86 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%87 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%88 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%89 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%90 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%91 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%92 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%93 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%94 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%95 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%96 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%97 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%98 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%99 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%100 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%101 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%102 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%103 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%104 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%105 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%106 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%107 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%108 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%109 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%110 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%111 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%112 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%113 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%114 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%115 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%116 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%117 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%118 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%119 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%120 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%121 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%122 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%123 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%124 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%125 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%126 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%127 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%128 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%129 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%130 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%131 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%132 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%133 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%134 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%135 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%136 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%137 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%138 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%139 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%140 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%141 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%142 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%143 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%144 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%145 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%146 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%147 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%148 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%149 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%150 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%151 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%152 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%153 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%154 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%155 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%156 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%157 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%158 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%159 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%160 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%161 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%162 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%163 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%164 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%165 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%166 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%167 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%168 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%169 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%170 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%171 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%172 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%173 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%174 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%175 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%176 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%177 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%178 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%179 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%180 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%181 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%182 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%183 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%184 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%185 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%186 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%187 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%188 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%189 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%190 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%191 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%192 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%193 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%194 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%195 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%196 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%197 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%198 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%199 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%200 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%201 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%202 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%203 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%204 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%205 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%206 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%207 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%208 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%209 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%210 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%211 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%212 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%213 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%214 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%215 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%216 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%217 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%218 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%219 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%220 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%221 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%222 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%223 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%224 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%225 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%226 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%227 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%228 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%229 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%230 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%231 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%232 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%233 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%234 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%235 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%236 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%237 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%238 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%239 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%240 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%241 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%242 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%243 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%244 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%245 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%246 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%247 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%248 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%249 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%250 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%251 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%252 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%253 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%254 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%255 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%256 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%257 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%258 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%259 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%260 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%261 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%262 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%263 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%264 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_facts. mem!@0 pt! layer! ptr! base!)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_facts. mem!@0 pt! layer! ptr! base!) (=> (ens%lib!definitions_t.x86_arch_exec. tmp%1) (and (=> %%location_label%%1 (req%lib!definitions_u.impl&%2.index_for_vaddr. tmp%1 layer! base! vaddr!)) (=> (ens%lib!definitions_u.impl&%2.index_for_vaddr. tmp%1 layer! base! vaddr! idx@) (and (=> (= es@ (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))) (and (=> (= tmp%2 lib!definitions_t.X86_NUM_ENTRIES.?) (and (=> %%location_label%%2 (req%lib!extra.mod_mult_zero_implies_mod_zero. base! es@ tmp%2)) (=> (ens%lib!extra.mod_mult_zero_implies_mod_zero. base! es@ tmp%2) (=> %%location_label%%3 (lib!definitions_t.aligned.? (I base!) (I es@)))))) (=> (lib!definitions_t.aligned.? (I base!) (I es@)) (=> (= tmp%3 lib!definitions_t.X86_NUM_ENTRIES.?) (and (=> %%location_label%%4 (req%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! vaddr! es@ tmp%3)) (=> (ens%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! vaddr! es@ tmp%3) (=> %%location_label%%5 (and (and (lib!definitions_t.between.? (I vaddr!) (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx@) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))))) (I (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx@) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!)))))) (=> (lib!definitions_t.aligned.? (I vaddr!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!)))) (= vaddr! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx@) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))))))) (< idx@ lib!definitions_t.X86_NUM_ENTRIES.?))))))))) (=> (and (and (lib!definitions_t.between.? (I vaddr!) (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx@) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))))) (I (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx@) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!)))))) (=> (lib!definitions_t.aligned.? (I vaddr!) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!)))) (= vaddr! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx@) (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))))))) (< idx@ lib!definitions_t.X86_NUM_ENTRIES.?)) (and (=> %%location_label%%6 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_facts_entries. mem!@0 pt! layer! ptr! base! idx@)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_facts_entries. mem!@0 pt! layer! ptr! base! idx@) (and (=> %%location_label%%7 (req%lib!impl_u.l2_impl.PT.entry_at. mem!@0 pt! layer! ptr! idx@)) (=> (ens%lib!impl_u.l2_impl.PT.entry_at. mem!@0 pt! layer! ptr! idx@ entry@) (=> (= interp@ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (=> (= tmp%4 (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))) (and (=> %%location_label%%8 (req%lib!impl_u.l1.impl&%1.lemma_map_frame_structure_assertions. interp@ vaddr! tmp%4 idx@)) (=> (ens%lib!impl_u.l1.impl&%1.lemma_map_frame_structure_assertions. interp@ vaddr! tmp%4 idx@) (=> (= tmp%5 (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))) (and (=> %%location_label%%9 (req%lib!impl_u.l1.impl&%1.lemma_map_frame_refines_map_frame. interp@ vaddr! tmp%5)) (=> (ens%lib!impl_u.l1.impl&%1.lemma_map_frame_refines_map_frame. interp@ vaddr! tmp%5) (=> (ens%lib!definitions_t.x86_arch_exec. tmp%6) (and (=> %%location_label%%10 (req%lib!definitions_u.impl&%2.entry_base. tmp%6 layer! base! idx@)) (=> (ens%lib!definitions_u.impl&%2.entry_base. tmp%6 layer! base! idx@ entry_base@) (=> (= tmp%7 (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!))) (and (=> %%location_label%%11 (req%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx@ tmp%7)) (=> (ens%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx@ tmp%7) (=> (= tmp%8 (<= entry_base@ vaddr!)) (and (=> %%location_label%%12 tmp%8) (=> tmp%8 (and (=> %%location_label%%13 (req%lib!impl_u.l2_impl.impl&%0.is_mapping. entry@)) (=> (ens%lib!impl_u.l2_impl.impl&%0.is_mapping. entry@ tmp%9) (or (and (=> tmp%9 (and (=> %%location_label%%14 (req%lib!impl_u.l2_impl.impl&%0.is_dir. entry@ layer!)) (=> (ens%lib!impl_u.l2_impl.impl&%0.is_dir. entry@ layer! tmp%10) (or (and (=> tmp%10 (=> (ens%lib!definitions_t.x86_arch_exec. tmp%11) (and (=> %%location_label%%15 (req%lib!definitions_u.impl&%2.entry_size. tmp%11 layer!)) (=> (ens%lib!definitions_u.impl&%2.entry_size. tmp%11 layer! tmp%12) (or (and (=> (= tmp%12 (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (=> (= tmp%13 (= (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%16 tmp%13) (=> tmp%13 (=> (= tmp%101 (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0))) (=> (= mem!@1 mem!@0) %%switch_label%%2)))))) (=> (not (= tmp%12 (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (and (=> %%location_label%%17 (req%lib!impl_u.l2_impl.impl&%0.address. entry@)) (=> (ens%lib!impl_u.l2_impl.impl&%0.address. entry@ tmp%14) (=> (= dir_addr@ (uClip SZ tmp%14)) (=> (= tmp%15 (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx@))))) (and (=> %%location_label%%18 tmp%15) (=> tmp%15 (=> (= dir_pt@ (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx@)))))) (=> (= tmp%16 (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (and (=> %%location_label%%19 tmp%16) (=> tmp%16 (and (=> %%location_label%%20 (uInv SZ (Add layer! 1))) (=> (= tmp%17 (uClip SZ (Add layer! 1))) (and (=> %%location_label%%21 (req%lib!impl_u.l2_impl.PT.map_frame_aux. mem!@0 dir_pt@ tmp%17 dir_addr@ entry_base@ vaddr! pte!)) (=> (ens%lib!impl_u.l2_impl.PT.map_frame_aux. mem!@0 mem!@1 dir_pt@ tmp%17 dir_addr@ entry_base@ vaddr! pte! tmp%%@) (or (and (=> (is-core!result.Result./Ok_ tmp%%@) (=> (= rec_res@ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%@))))) (=> (= dir_pt_res@ (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. rec_res@))))) (=> (= new_regions@ (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. rec_res@))))) (=> (= tmp%18 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@)))) (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@)))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@)))) (and (=> %%location_label%%22 tmp%18) (=> tmp%18 (=> (= tmp%19 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@) (I (nClip (Add layer! 1))) (I dir_addr@))) (and (=> %%location_label%%23 tmp%19) (=> tmp%19 (=> (= tmp%20 (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@) (I (nClip (Add layer! 1))) (I dir_addr@) (I entry_base@)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@) (I (nClip (Add layer! 1))) (I dir_addr@) (I entry_base@))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%24 tmp%20) (=> tmp%20 (=> (= pt_res@ (lib!impl_u.l2_impl.PTDir./PTDir (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx@) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@))))) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@))))) (=> (= tmp%21 (< idx@ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))))) (and (=> %%location_label%%25 tmp%21) (=> tmp%21 (=> (= tmp%22 (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (and (=> %%location_label%%26 tmp%22) (=> tmp%22 (=> (= tmp%23 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))))))) (and (=> %%location_label%%27 tmp%23) (=> tmp%23 (=> (= tmp%24 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@)))) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))))))) (and (=> %%location_label%%28 tmp%24) (=> tmp%24 (and (=> (has_type i@ NAT) (=> (< (%I i@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> %%location_label%%29 (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i@) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i@))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$)) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)))) (and (=> (has_type i$1@ NAT) (=> (< (%I i$1@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> %%location_label%%30 (= (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$1@) (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$1@))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (= (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$) (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)))) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$)) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)))) (and (and (=> (has_type i$2@ NAT) (=> (< (%I i$2@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> (= tmp%25 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))))) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))))))) (and (=> %%location_label%%31 tmp%25) (=> tmp%25 (=> (= entry$1@ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$2@)) (or (and (=> (= (%I i$2@) idx@) %%switch_label%%12) (=> (not (= (%I i$2@) idx@)) (=> (= tmp%26 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$2@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$2@))) (and (=> %%location_label%%32 tmp%26) (=> tmp%26 (=> (= tmp%27 (= entry$1@ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$2@))) (and (=> %%location_label%%33 tmp%27) (=> tmp%27 (=> (= tmp%28 (= (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$1@) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$2@))))) (and (=> %%location_label%%34 tmp%28) (=> tmp%28 %%switch_label%%12))))))))))) (and (not %%switch_label%%12) (=> %%location_label%%35 (let ((entry$2 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$2@))) (= (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$2) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$2@)))))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (let ((entry$3 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$))) (= (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$3) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$))))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$)))) (=> (= tmp%29 (lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%36 tmp%29) (=> tmp%29 (=> (= tmp%30 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%37 tmp%30) (=> tmp%30 (=> (= tmp%31 (lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%38 tmp%31) (=> tmp%31 (and (=> (has_type i$3@ NAT) (=> (has_type j@ NAT) (=> (has_type r@ TYPE%lib!definitions_t.MemRegion.) (=> (and (and (and (and (and (not (= i$3@ j@)) (< (%I i$3@) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$3@)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$3@)))))) r@)) (< (%I j@) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) j@)))) (=> (= tmp%32 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (and (=> %%location_label%%39 tmp%32) (=> tmp%32 (or (and (=> (= (%I j@) idx@) (=> (= tmp%33 (= (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) j@)))) dir_pt_res@)) (and (=> %%location_label%%40 tmp%33) (=> tmp%33 (=> (= tmp%34 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$3@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$3@))) (and (=> %%location_label%%41 tmp%34) (=> tmp%34 (or (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r@) (=> (= tmp%35 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@)))) r@))) (and (=> %%location_label%%42 tmp%35) (=> tmp%35 (=> (= tmp%36 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r@))) (and (=> %%location_label%%43 tmp%36) (=> tmp%36 (=> (= tmp%37 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@)))) r@))) (and (=> %%location_label%%44 tmp%37) (=> tmp%37 %%switch_label%%8)))))))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r@)) (or (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@)))) r@) (=> (= tmp%38 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r@)) (and (=> %%location_label%%45 tmp%38) (=> tmp%38 (=> (= tmp%39 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r@)) (and (=> %%location_label%%46 tmp%39) (=> tmp%39 (=> (= tmp%40 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@)))) r@))) (and (=> %%location_label%%47 tmp%40) (=> tmp%40 %%switch_label%%9)))))))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@)))) r@)) %%switch_label%%9)) (and (not %%switch_label%%9) %%switch_label%%8)))) (and (not %%switch_label%%8) %%switch_label%%7))))))))) (=> (not (= (%I j@) idx@)) (or (and (=> (= (%I i$3@) idx@) (=> (= tmp%41 (= (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$3@)))) dir_pt_res@)) (and (=> %%location_label%%48 tmp%41) (=> tmp%41 (=> (= tmp%42 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) j@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j@))) (and (=> %%location_label%%49 tmp%42) (=> tmp%42 (or (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r@) (=> (= tmp%43 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@)))) r@)) (and (=> %%location_label%%50 tmp%43) (=> tmp%43 (=> (= tmp%44 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@)))) r@))) (and (=> %%location_label%%51 tmp%44) (=> tmp%44 (=> (= tmp%45 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r@))) (and (=> %%location_label%%52 tmp%45) (=> tmp%45 (=> (= tmp%46 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j@)))))) r@))) (and (=> %%location_label%%53 tmp%46) (=> tmp%46 %%switch_label%%11))))))))))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r@)) (=> (= tmp%47 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@)))) r@)) (and (=> %%location_label%%54 tmp%47) (=> tmp%47 (=> (= tmp%48 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j@)))))) r@))) (and (=> %%location_label%%55 tmp%48) (=> tmp%48 %%switch_label%%11)))))))) (and (not %%switch_label%%11) %%switch_label%%10))))))))) (=> (not (= (%I i$3@) idx@)) (=> (= tmp%49 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$3@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$3@))) (and (=> %%location_label%%56 tmp%49) (=> tmp%49 (=> (= tmp%50 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) j@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j@))) (and (=> %%location_label%%57 tmp%50) (=> tmp%50 %%switch_label%%10)))))))) (and (not %%switch_label%%10) %%switch_label%%7)))) (and (not %%switch_label%%7) (=> %%location_label%%58 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) j@)))))) r@)))))))))))) (=> (forall ((i$ Poly) (j$ Poly) (r$ Poly)) (! (=> (and (has_type i$ NAT) (has_type j$ NAT) (has_type r$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (and (and (and (not (= i$ j$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$)))))) r$)) (< (%I j$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) j$)))) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) j$)))))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$)))))) r$) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) j$)))))) r$)))) (=> (= tmp%51 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%59 tmp%51) (=> tmp%51 (and (=> (has_type i$4@ NAT) (=> (< (%I i$4@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> (= entry$4@ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$4@)) (or (and (=> (= (%I i$4@) idx@) (=> (= tmp%52 (= (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@)))) dir_pt_res@)) (and (=> %%location_label%%60 tmp%52) (=> tmp%52 (=> (= tmp%53 (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$4@))) dir_addr@)) (and (=> %%location_label%%61 tmp%53) (=> tmp%53 (=> (= tmp%54 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$4@)))))) (and (=> %%location_label%%62 tmp%54) (=> tmp%54 %%switch_label%%5)))))))))) (=> (not (= (%I i$4@) idx@)) (=> (= tmp%55 (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (and (=> %%location_label%%63 tmp%55) (=> tmp%55 (=> (= tmp%56 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$4@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@))) (and (=> %%location_label%%64 tmp%56) (=> tmp%56 (=> (= tmp%57 (= entry$4@ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$4@))) (and (=> %%location_label%%65 tmp%57) (=> tmp%57 (=> (= tmp%58 (= entry$4@ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$4@))) (and (=> %%location_label%%66 tmp%58) (=> tmp%58 (or (and (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$4@) (=> (= pt_entry@ (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@))))) (=> (= tmp%59 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%67 tmp%59) (=> tmp%59 (and (=> (has_type r$1@ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry@)))) r$1@) (=> (= tmp%60 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry@)))) r$1@)) (and (=> %%location_label%%68 tmp%60) (=> tmp%60 (=> (= tmp%61 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r$1@)) (and (=> %%location_label%%69 tmp%61) (=> tmp%61 (=> %%location_label%%70 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r$1@))))))))))) (=> (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry@)))) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry@)))) r$)))) (=> (= tmp%62 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry@)))) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@)))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry@)))) r$))))) (and (=> %%location_label%%71 tmp%62) (=> tmp%62 (=> (= tmp%63 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry@)))) r$) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$))))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$))))) (and (=> %%location_label%%72 tmp%63) (=> tmp%63 (=> (= tmp%64 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$4@))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$4@)))))) (and (=> %%location_label%%73 tmp%64) (=> tmp%64 (=> (= tmp%65 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@)))))) r$) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$))))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$))))) (and (=> %%location_label%%74 tmp%65) (=> tmp%65 (=> (= tmp%66 (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@)))) (and (=> %%location_label%%75 tmp%66) (=> tmp%66 (=> (= tmp%67 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@)))))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$4@)))))))) (and (=> %%location_label%%76 tmp%67) (=> tmp%67 (=> (= tmp%68 (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$4@))))) (=> (= tmp%69 (nClip (Add layer! 1))) (=> (= tmp%70 (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$4@)))) (and (=> %%location_label%%77 (req%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem!@0 mem!@1 tmp%68 tmp%69 tmp%70)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem!@0 mem!@1 tmp%68 tmp%69 tmp%70) (=> (= tmp%71 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$4@)))))) (and (=> %%location_label%%78 tmp%71) (=> tmp%71 %%switch_label%%6))))))))))))))))))))))))))))))))) (=> (not (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$4@)) %%switch_label%%6)) (and (not %%switch_label%%6) %%switch_label%%5)))))))))))))))) (and (not %%switch_label%%5) (=> %%location_label%%79 (let ((entry$5 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$4@))) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$5) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$4@))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$5))))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (let ((entry$6 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$))) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$6) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$6))))))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) i$)))) (=> (= tmp%72 (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%80 tmp%72) (=> tmp%72 (=> (= tmp%73 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%81 tmp%73) (=> tmp%73 (and (=> (= tmp%74 (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.empty.? $ TYPE%lib!impl_u.l1.NodeEntry.))) (and (=> %%location_label%%82 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem!@1 pt_res@ layer! ptr! base! tmp%74)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem!@1 pt_res@ layer! ptr! base! tmp%74) (=> (= tmp%75 (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (and (=> %%location_label%%83 tmp%75) (=> tmp%75 (=> (= tmp%76 (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@) (I (nClip (Add layer! 1))) (I dir_addr@) (I entry_base@)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@) (I (nClip (Add layer! 1))) (I dir_addr@) (I entry_base@))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%84 tmp%76) (=> tmp%76 (=> (= tmp%77 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%85 tmp%77) (=> tmp%77 (=> (= tmp%78 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (and (=> %%location_label%%86 tmp%78) (=> tmp%78 (=> (= tmp%79 (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) (I idx@))))) (and (=> %%location_label%%87 tmp%79) (=> tmp%79 (=> (= tmp%80 (= (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) (I idx@))))) dir_pt_res@)) (and (=> %%location_label%%88 tmp%80) (=> tmp%80 (=> (= tmp%81 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$) idx@))) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$)))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$))))) (and (=> %%location_label%%89 tmp%81) (=> tmp%81 (and (=> (has_type i$5@ NAT) (=> (and (< (%I i$5@) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$5@) idx@))) (=> (= tmp%82 (is-core!result.Result./Ok_ (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%90 tmp%82) (=> tmp%82 (=> (= tmp%83 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) i$5@) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))))) i$5@))) (and (=> %%location_label%%91 tmp%83) (=> tmp%83 (=> (= tmp%84 (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))))) i$5@)) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!) i$5@))) (and (=> %%location_label%%92 tmp%84) (=> tmp%84 (=> (= tmp%85 (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))))) i$5@)) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!) i$5@))) (and (=> %%location_label%%93 tmp%85) (=> tmp%85 (or (and (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$5@))) (=> (= pt_entry$1@ (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$5@))))) (=> (= tmp%86 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!))) (and (=> %%location_label%%94 tmp%86) (=> tmp%86 (and (=> (has_type r$2@ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$1@)))) r$2@) (=> (= tmp%87 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$1@)))) r$2@)) (and (=> %%location_label%%95 tmp%87) (=> tmp%87 (=> (= tmp%88 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r$2@)) (and (=> %%location_label%%96 tmp%88) (=> tmp%88 (=> %%location_label%%97 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r$2@))))))))))) (=> (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$1@)))) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$1@)))) r$)))) (=> (= tmp%89 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$1@)))) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res@)))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$1@)))) r$))))) (and (=> %%location_label%%98 tmp%89) (=> tmp%89 (=> (= tmp%90 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$1@)))) r$) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$))))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$))))) (and (=> %%location_label%%99 tmp%90) (=> tmp%90 %%switch_label%%4))))))))))))) (=> (not (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) i$5@)))) %%switch_label%%4)) (and (not %%switch_label%%4) (and (=> %%location_label%%100 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem!@0 pt! mem!@1 pt_res@ layer! ptr! base! (%I i$5@))) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem!@0 pt! mem!@1 pt_res@ layer! ptr! base! (%I i$5@)) (=> (= tmp%91 (= (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!) i$5@) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!) i$5@))) (and (=> %%location_label%%101 tmp%91) (=> tmp%91 (=> %%location_label%%102 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))))) i$5@) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) i$5@)))))))))))))))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$) idx@))) (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) i$)))) (=> (= tmp%92 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))))) (I idx@)) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) (I idx@)))) (and (=> %%location_label%%103 tmp%92) (=> tmp%92 (=> (= tmp%93 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))))) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))))) (and (=> %%location_label%%104 tmp%93) (=> tmp%93 (=> (= tmp%94 (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%105 tmp%94) (=> tmp%94 (=> %%location_label%%106 (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))))))))))))))))))))))))))))))))))))) (=> (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))) (=> %%location_label%%107 (and (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!)) (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))))))))))))))))))))))))))))) (=> (and (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!)) (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> (has_type r$3@ TYPE%lib!definitions_t.MemRegion.) (=> (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$3@)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r$3@))) (=> (= tmp%95 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt@)))) r$3@))) (and (=> %%location_label%%108 tmp%95) (=> tmp%95 (=> %%location_label%%109 (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$3@) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$3@)))))))) (=> (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@) r$))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$)))) (=> (= tmp%96 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1))) (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@)))) (and (=> %%location_label%%110 tmp%96) (=> tmp%96 (=> (= tmp%97 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@)))) (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@)))) (and (=> %%location_label%%111 tmp%97) (=> tmp%97 (=> (= tmp%98 (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res@))) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (and (=> %%location_label%%112 tmp%98) (=> tmp%98 (=> (= tmp%100 (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%lib!impl_u.l2_impl.PTDir. pt_res@) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions@))))) %%switch_label%%3)))))))))))))))))))))))))))))))))))))))))))) (=> (not (is-core!result.Result./Ok_ tmp%%@)) (=> (= e@ (%Poly%tuple%0. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%@))))) (=> (= tmp%99 (= (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%113 tmp%99) (=> tmp%99 (=> (= tmp%100 (core!result.Result./Err (Poly%tuple%0. e@))) %%switch_label%%3))))))) (and (not %%switch_label%%3) (=> (= tmp%101 tmp%100) %%switch_label%%2))))))))))))))))))) (and (not %%switch_label%%2) (=> (= tmp%103 tmp%101) %%switch_label%%1))))))) (=> (not tmp%10) (=> (= tmp%102 (= (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%114 tmp%102) (=> tmp%102 (=> (= tmp%103 (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0))) (=> (= mem!@1 mem!@0) %%switch_label%%1))))))) (and (not %%switch_label%%1) (=> (= tmp%223 tmp%103) (=> (= mem!@2 mem!@1) %%switch_label%%0))))))) (=> (not tmp%9) (=> (ens%lib!definitions_t.x86_arch_exec. tmp%104) (and (=> %%location_label%%115 (req%lib!definitions_u.impl&%2.entry_size. tmp%104 layer!)) (=> (ens%lib!definitions_u.impl&%2.entry_size. tmp%104 layer! tmp%105) (or (and (=> (= tmp%105 (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (and (or (and (=> (not (> layer! 0)) (=> (= iprime@ (%I (as_type (%%choose%%1 NAT 0 lib!definitions_t.X86_NUM_LAYERS.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?)) NAT))) (=> (= tmp%106 (= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I 0)) (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (and (=> %%location_label%%116 tmp%106) (=> tmp%106 (=> (= tmp%107 (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (I 1))) (and (=> %%location_label%%117 tmp%107) (=> tmp%107 (and (=> (has_type i$6@ NAT) (=> (and (< 0 (%I i$6@)) (< (%I i$6@) lib!definitions_t.X86_NUM_LAYERS.?)) (=> (= tmp%108 lib!definitions_t.x86_arch_spec.?) (and (=> %%location_label%%118 (req%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. tmp%108 0 (%I i$6@))) (=> (ens%lib!definitions_u.impl&%3.lemma_entry_sizes_increase. tmp%108 0 (%I i$6@)) (=> %%location_label%%119 (>= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I 0)) (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) i$6@)))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< 0 (%I i$)) (< (%I i$) lib!definitions_t.X86_NUM_LAYERS.?)) (>= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I 0)) (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) i$)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) i$)))) (=> %%location_label%%120 false))))))))))) (=> (not (not (> layer! 0))) %%switch_label%%19)) (and (not %%switch_label%%19) (=> %%location_label%%121 (> layer! 0)))) (=> (> layer! 0) (=> (= frame_base@ (uClip 64 (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (and (=> (= tmp%109 (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (I 1))) (and (=> %%location_label%%122 tmp%109) (=> tmp%109 (=> (= tmp%110 (= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I layer!)) (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (and (=> %%location_label%%123 tmp%110) (=> tmp%110 (=> (= tmp%111 (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (I (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))))) (and (=> %%location_label%%124 tmp%111) (=> tmp%111 (=> (ens%lib!impl_u.l2_impl.lemma_aligned_addr_mask_facts. frame_base@) (or (and (=> (= layer! 1) (=> (= tmp%112 (= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I 1)) lib!definitions_t.L1_ENTRY_SIZE.?)) (and (=> %%location_label%%125 tmp%112) (=> tmp%112 (=> (= tmp%113 (= (uClip 64 (bitand (I frame_base@) (I lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?))) (uClip 64 (bitand (I frame_base@) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))))) (and (=> %%location_label%%126 tmp%113) (=> tmp%113 %%switch_label%%16))))))) (=> (not (= layer! 1)) (or (and (=> (= layer! 2) (=> (= tmp%114 (= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I 2)) lib!definitions_t.L2_ENTRY_SIZE.?)) (and (=> %%location_label%%127 tmp%114) (=> tmp%114 (=> (= tmp%115 (= (uClip 64 (bitand (I frame_base@) (I lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?))) (uClip 64 (bitand (I frame_base@) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))))) (and (=> %%location_label%%128 tmp%115) (=> tmp%115 %%switch_label%%17))))))) (=> (not (= layer! 2)) (or (and (=> (= layer! 3) (=> (= tmp%116 (= (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I 3)) lib!definitions_t.L3_ENTRY_SIZE.?)) (and (=> %%location_label%%129 tmp%116) (=> tmp%116 (=> (= tmp%117 (= (uClip 64 (bitand (I frame_base@) (I lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?))) (uClip 64 (bitand (I frame_base@) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))))) (and (=> %%location_label%%130 tmp%117) (=> tmp%117 %%switch_label%%18))))))) (=> (not (= layer! 3)) (=> %%location_label%%131 false))) (and (not %%switch_label%%18) %%switch_label%%17)))) (and (not %%switch_label%%17) %%switch_label%%16)))) (and (not %%switch_label%%16) (=> %%location_label%%132 (lib!impl_u.l2_impl.addr_is_zero_padded.? (I layer!) (I frame_base@) (B true))))))))))))))) (=> (lib!impl_u.l2_impl.addr_is_zero_padded.? (I layer!) (I frame_base@) (B true)) (and (=> (ens%lib!impl_u.l2_impl.lemma_aligned_addr_mask_facts. frame_base@) (=> %%location_label%%133 (= (uClip 64 (bitand (I frame_base@) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))) frame_base@))) (=> (= (uClip 64 (bitand (I frame_base@) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?))) frame_base@) (and (=> %%location_label%%134 (req%lib!impl_u.l2_impl.impl&%0.new_page_entry. layer! pte!)) (=> (ens%lib!impl_u.l2_impl.impl&%0.new_page_entry. layer! pte! new_page_entry@) (=> (= pwmem@ mem!@0) (=> (= tmp%118 (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (=> (= tmp%119 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. new_page_entry@)))) (and (=> %%location_label%%135 (req%lib!spec_t.mem.impl&%1.write. mem!@0 ptr! idx@ tmp%118 tmp%119)) (=> (ens%lib!spec_t.mem.impl&%1.write. mem!@0 mem!@1 ptr! idx@ tmp%118 tmp%119) (and (=> (= tmp%120 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (vstd!seq.Seq.update.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pwmem@) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (I idx@) (I (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. new_page_entry@))))))) (and (=> %%location_label%%136 tmp%120) (=> tmp%120 (and (=> (has_type i$7@ NAT) (=> (< (%I i$7@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> %%location_label%%137 (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$7@) (ite (= (%I i$7@) idx@) (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. new_page_entry@)) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$7@)))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$) (ite (= (%I i$) idx@) (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. new_page_entry@)) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)))) (and (=> (has_type i$8@ NAT) (=> (and (< (%I i$8@) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$8@) idx@))) (=> %%location_label%%138 (= (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$8@) (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$8@))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$) idx@))) (= (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$) (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)))) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)))) (and (and (=> (has_type i$9@ NAT) (=> (< (%I i$9@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> (= entry$7@ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$9@)) (or (and (=> (not (= (%I i$9@) idx@)) (=> (= tmp%121 (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (and (=> %%location_label%%139 tmp%121) (=> tmp%121 (or (and (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$7@) (=> (= tmp%122 (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$9@))))) (=> (= tmp%123 (nClip (Add layer! 1))) (=> (= tmp%124 (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$7@)))) (and (=> %%location_label%%140 (req%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem!@0 mem!@1 tmp%122 tmp%123 tmp%124)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem!@0 mem!@1 tmp%122 tmp%123 tmp%124) %%switch_label%%15)))))) (=> (not (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$7@)) %%switch_label%%15)) (and (not %%switch_label%%15) %%switch_label%%14)))))) (=> (not (not (= (%I i$9@) idx@))) %%switch_label%%14)) (and (not %%switch_label%%14) (=> %%location_label%%141 (let ((entry$8 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$9@))) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$8) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$9@))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$8))))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (let ((entry$9 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$))) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$9) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$9))))))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) i$)))) (=> %%location_label%%142 (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))))) (=> (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!)) (=> %%location_label%%143 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!)))))))))))) (=> (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!)) (and (=> (= tmp%125 (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.empty.? $ TYPE%lib!impl_u.l1.NodeEntry.))) (and (=> %%location_label%%144 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem!@1 pt! layer! ptr! base! tmp%125)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem!@1 pt! layer! ptr! base! tmp%125) (=> (= tmp%126 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (and (=> %%location_label%%145 tmp%126) (=> tmp%126 (=> (= tmp%127 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!))) (and (=> %%location_label%%146 tmp%127) (=> tmp%127 (=> (= tmp%128 (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (I idx@))))) (and (=> %%location_label%%147 tmp%128) (=> tmp%128 (and (=> (has_type i$10@ NAT) (=> (and (< (%I i$10@) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$10@) idx@))) (=> (= tmp%129 (is-core!result.Result./Ok_ (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%148 tmp%129) (=> tmp%129 (=> (= tmp%130 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) i$10@) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))))) i$10@))) (and (=> %%location_label%%149 tmp%130) (=> tmp%130 (=> (= tmp%131 (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))))) i$10@)) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!) i$10@))) (and (=> %%location_label%%150 tmp%131) (=> tmp%131 (and (=> %%location_label%%151 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem!@0 pt! mem!@1 pt! layer! ptr! base! (%I i$10@))) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem!@0 pt! mem!@1 pt! layer! ptr! base! (%I i$10@)) (=> (= tmp%132 (= (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!) i$10@) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!) i$10@))) (and (=> %%location_label%%152 tmp%132) (=> tmp%132 (=> %%location_label%%153 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))))) i$10@) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) i$10@))))))))))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$) idx@))) (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) i$)))) (=> (= new_interp@ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (=> (= tmp%133 (= (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. new_interp@)))) (I idx@))) (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!) (I idx@)))) (and (=> %%location_label%%154 tmp%133) (=> tmp%133 (=> (= tmp%134 (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I idx@)) (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. new_page_entry@)))) (and (=> %%location_label%%155 tmp%134) (=> tmp%134 (=> (= tmp%135 (= (lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!) (I idx@)) (lib!impl_u.l1.NodeEntry./Page (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))) (and (=> %%location_label%%156 tmp%135) (=> tmp%135 (=> (= tmp%136 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. new_interp@)))) (I idx@)) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. interp@) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) (I idx@)))) (and (=> %%location_label%%157 tmp%136) (=> tmp%136 (=> (= tmp%137 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. new_interp@)))) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))))) (and (=> %%location_label%%158 tmp%137) (=> tmp%137 (=> (= tmp%138 (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. new_interp@)) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%159 tmp%138) (=> tmp%138 (=> %%location_label%%160 (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))))))))))))))))))))))))))))))))))) (=> (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))) (=> (= tmp%139 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$))))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1) r$))))) (and (=> %%location_label%%161 tmp%139) (=> tmp%139 (=> (= tmp%140 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.) (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1))) (vstd!set.impl&%0.empty.? $ TYPE%lib!definitions_t.MemRegion.)) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@1))))) (and (=> %%location_label%%162 tmp%140) (=> tmp%140 (=> (= tmp%141 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.) (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!definitions_t.MemRegion.)) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))) (and (=> %%location_label%%163 tmp%141) (=> tmp%141 (=> (= tmp%222 (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%lib!impl_u.l2_impl.PTDir. pt!) (vstd!set.impl&%0.empty.? $ TYPE%lib!definitions_t.MemRegion.))))) (=> (= mem!@2 mem!@1) %%switch_label%%13)))))))))))))))))))))))))))))) (=> (not (= tmp%105 (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (and (=> %%location_label%%164 (req%lib!impl_u.l2_impl.PT.insert_empty_directory. mem!@0 pt! layer! ptr! base! idx@)) (=> (ens%lib!impl_u.l2_impl.PT.insert_empty_directory. mem!@0 mem!@1 pt! layer! ptr! base! idx@ tmp%%$1@) (=> (= pt_with_empty@ (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1@))))) (=> (= new_dir_region@ (%Poly%lib!definitions_t.MemRegionExec. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1@))))) (=> (= new_dir_entry@ (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1@))))) (=> (= new_dir_pt@ (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) (I idx@)))))) (=> (= mem_with_empty@ mem!@1) (and (=> %%location_label%%165 (uInv SZ (Add layer! 1))) (=> (= tmp%142 (uClip SZ (Add layer! 1))) (=> (= tmp%143 (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. new_dir_region@)))) (and (=> %%location_label%%166 (req%lib!impl_u.l2_impl.PT.map_frame_aux. mem!@1 new_dir_pt@ tmp%142 tmp%143 entry_base@ vaddr! pte!)) (=> (ens%lib!impl_u.l2_impl.PT.map_frame_aux. mem!@1 mem!@2 new_dir_pt@ tmp%142 tmp%143 entry_base@ vaddr! pte! tmp%%$2@) (or (and (=> (is-core!result.Result./Ok_ tmp%%$2@) (=> (= rec_res$1@ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$2@))))) (=> (= dir_pt_res$1@ (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. rec_res$1@))))) (=> (= dir_new_regions@ (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. rec_res$1@))))) (=> (= pt_final@ (lib!impl_u.l2_impl.PTDir./PTDir (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) (I idx@) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res$1@))))) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@))))) (=> (= new_regions$1@ (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. new_dir_region@)))))) (=> (= tmp%144 (< idx@ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@))))))) (and (=> %%location_label%%167 tmp%144) (=> tmp%144 (=> (= tmp%145 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))))))) (and (=> %%location_label%%168 tmp%145) (=> tmp%145 (=> (= tmp%146 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt@)))) (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))))))) (and (=> %%location_label%%169 tmp%146) (=> tmp%146 (and (=> (has_type i$11@ NAT) (=> (< (%I i$11@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> %%location_label%%170 (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$11@) (ite (= (%I i$11@) idx@) (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. new_dir_entry@)) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!) i$11@)))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (= (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$) (ite (= (%I i$) idx@) (lib!spec_t.hardware.impl&%3.view.? (Poly%lib!spec_t.hardware.PageDirectoryEntry. new_dir_entry@)) (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!) i$))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$)))) (and (=> (has_type i$12@ NAT) (=> (< (%I i$12@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> %%location_label%%171 (= (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$12@) (ite (= (%I i$12@) idx@) new_dir_entry@ (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!) i$12@)))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (= (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$) (ite (= (%I i$) idx@) new_dir_entry@ (lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!) i$))))) :pattern ((lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$)))) (and (and (and (=> (has_type i$13@ NAT) (=> (< (%I i$13@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> (= tmp%147 (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!))) (and (=> %%location_label%%172 tmp%147) (=> tmp%147 (=> (= tmp%148 (lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!))) (and (=> %%location_label%%173 tmp%148) (=> tmp%148 (or (and (=> (= (%I i$13@) idx@) %%switch_label%%32) (=> (not (= (%I i$13@) idx@)) %%switch_label%%32)) (and (not %%switch_label%%32) (=> %%location_label%%174 (let ((entry$10 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$13@))) (= (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$10) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$13@)))))))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (let ((entry$11 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$))) (= (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$11) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$))))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$)))) (=> %%location_label%%175 (lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))))) (=> (lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!)) (and (and (=> (has_type i$14@ NAT) (=> (< (%I i$14@) lib!definitions_t.X86_NUM_ENTRIES.?) (=> (= entry$12@ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$14@)) (=> (= tmp%149 (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!))) (and (=> %%location_label%%176 tmp%149) (=> tmp%149 (=> (= tmp%150 (lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!))) (and (=> %%location_label%%177 tmp%150) (=> tmp%150 (=> (= tmp%151 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!))) (and (=> %%location_label%%178 tmp%151) (=> tmp%151 (or (and (=> (= (%I i$14@) idx@) %%switch_label%%30) (=> (not (= (%I i$14@) idx@)) (=> (= tmp%152 (= entry$12@ (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!) i$14@))) (and (=> %%location_label%%179 tmp%152) (=> tmp%152 (=> (= tmp%153 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$14@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) i$14@))) (and (=> %%location_label%%180 tmp%153) (=> tmp%153 (or (and (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$12@) (=> (= tmp%154 (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) i$14@)))) (and (=> %%location_label%%181 tmp%154) (=> tmp%154 (=> (= pt_entry$2@ (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) i$14@))))) (=> (= tmp%155 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) i$14@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$14@))) (and (=> %%location_label%%182 tmp%155) (=> tmp%155 (=> (= tmp%156 (= (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) i$14@))) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$14@))))) (and (=> %%location_label%%183 tmp%156) (=> tmp%156 (=> (= tmp%157 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$2@)))) r$) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt@)))) r$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$2@)))) r$))))) (and (=> %%location_label%%184 tmp%157) (=> tmp%157 (=> (= tmp%158 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$2@)))) r$) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) r$)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) r$))))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) r$))))) (and (=> %%location_label%%185 tmp%158) (=> tmp%158 (=> (= tmp%159 (nClip (Add layer! 1))) (=> (= tmp%160 (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$12@)))) (and (=> %%location_label%%186 (req%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem_with_empty@ mem!@2 pt_entry$2@ tmp%159 tmp%160)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_inv_at_different_memory. mem_with_empty@ mem!@2 pt_entry$2@ tmp%159 tmp%160) (=> (= tmp%161 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$14@))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$12@)))))) (and (=> %%location_label%%187 tmp%161) (=> tmp%161 %%switch_label%%31)))))))))))))))))))))))) (=> (not (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$12@)) %%switch_label%%31)) (and (not %%switch_label%%31) %%switch_label%%30)))))))))) (and (not %%switch_label%%30) (=> %%location_label%%188 (let ((entry$13 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$14@))) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$13) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$14@))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$13)))))))))))))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (let ((entry$14 (lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$))) (=> (is-lib!spec_t.hardware.GhostPageDirectoryEntry./Directory_ entry$14) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$))) (I (nClip (Add layer! 1))) (I (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. entry$14))))))))) :pattern ((lib!impl_u.l2_impl.PT.view_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) i$)))) (=> %%location_label%%189 (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))))) (=> (lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!)) (=> (= tmp%162 (lib!impl_u.l2_impl.PT.directories_have_flags.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))) (and (=> %%location_label%%190 tmp%162) (=> tmp%162 (=> (= tmp%163 (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))))) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@))))))) (and (=> %%location_label%%191 tmp%163) (=> tmp%163 (=> (= tmp%164 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (not (= (%I i$) idx@)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))))))) (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) i$)))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) i$))))) (and (=> %%location_label%%192 tmp%164) (=> tmp%164 (and (and (=> (has_type i$15@ NAT) (=> (has_type r$4@ TYPE%lib!definitions_t.MemRegion.) (=> (and (and (< (%I i$15@) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$15@)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$15@)))))) r$4@)) (or (and (=> (= (%I i$15@) idx@) (or (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$4@) (=> (= tmp%165 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) r$4@)) (and (=> %%location_label%%193 tmp%165) (=> tmp%165 %%switch_label%%29)))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$4@)) (=> (= tmp%166 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) i$15@)))))) r$4@)) (and (=> %%location_label%%194 tmp%166) (=> tmp%166 (=> (= tmp%167 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) r$4@)) (and (=> %%location_label%%195 tmp%167) (=> tmp%167 (=> (= tmp%168 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) r$4@)) (and (=> %%location_label%%196 tmp%168) (=> tmp%168 %%switch_label%%29))))))))))) (and (not %%switch_label%%29) %%switch_label%%28))) (=> (not (= (%I i$15@) idx@)) %%switch_label%%28)) (and (not %%switch_label%%28) (=> %%location_label%%197 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) r$4@))))))) (=> (forall ((i$ Poly) (r$ Poly)) (! (=> (and (has_type i$ NAT) (has_type r$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$)))))) r$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) r$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$)))))) r$)))) (=> %%location_label%%198 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))))) (=> (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!)) (and (and (=> (has_type i$16@ NAT) (=> (has_type j$1@ NAT) (=> (has_type r$5@ TYPE%lib!definitions_t.MemRegion.) (=> (and (and (and (and (and (not (= i$16@ j$1@)) (< (%I i$16@) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$16@)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$16@)))))) r$5@)) (< (%I j$1@) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) j$1@)))) (=> (= tmp%169 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!))) (and (=> %%location_label%%199 tmp%169) (=> tmp%169 (or (and (=> (= (%I j$1@) idx@) (=> (= tmp%170 (= (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) j$1@)))) dir_pt_res$1@)) (and (=> %%location_label%%200 tmp%170) (=> tmp%170 (=> (= tmp%171 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$16@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$16@))) (and (=> %%location_label%%201 tmp%171) (=> tmp%171 (or (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$5@) (=> (= tmp%172 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt@)))) r$5@))) (and (=> %%location_label%%202 tmp%172) (=> tmp%172 (=> (= tmp%173 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@))) r$5@))) (and (=> %%location_label%%203 tmp%173) (=> tmp%173 (=> (= tmp%174 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res$1@)))) r$5@))) (and (=> %%location_label%%204 tmp%174) (=> tmp%174 %%switch_label%%24)))))))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$5@)) (or (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt@)))) r$5@) (=> (= tmp%175 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$5@)) (and (=> %%location_label%%205 tmp%175) (=> tmp%175 (=> (= tmp%176 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@))) r$5@)) (and (=> %%location_label%%206 tmp%176) (=> tmp%176 (=> (= tmp%177 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res$1@)))) r$5@))) (and (=> %%location_label%%207 tmp%177) (=> tmp%177 %%switch_label%%25)))))))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt@)))) r$5@)) %%switch_label%%25)) (and (not %%switch_label%%25) %%switch_label%%24)))) (and (not %%switch_label%%24) %%switch_label%%23))))))))) (=> (not (= (%I j$1@) idx@)) (or (and (=> (= (%I i$16@) idx@) (=> (= tmp%178 (= (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$16@)))) dir_pt_res$1@)) (and (=> %%location_label%%208 tmp%178) (=> tmp%178 (=> (= tmp%179 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) j$1@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j$1@))) (and (=> %%location_label%%209 tmp%179) (=> tmp%179 (or (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$5@) (=> (= tmp%180 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res$1@)))) r$5@)) (and (=> %%location_label%%210 tmp%180) (=> tmp%180 (=> (= tmp%181 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt@)))) r$5@))) (and (=> %%location_label%%211 tmp%181) (=> tmp%181 (=> (= tmp%182 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@))) r$5@))) (and (=> %%location_label%%212 tmp%182) (=> tmp%182 (=> (= tmp%183 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j$1@)))))) r$5@))) (and (=> %%location_label%%213 tmp%183) (=> tmp%183 %%switch_label%%27))))))))))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$5@)) (=> (= tmp%184 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt@)))) r$5@)) (and (=> %%location_label%%214 tmp%184) (=> tmp%184 (=> (= tmp%185 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j$1@)))))) r$5@))) (and (=> %%location_label%%215 tmp%185) (=> tmp%185 %%switch_label%%27)))))))) (and (not %%switch_label%%27) %%switch_label%%26))))))))) (=> (not (= (%I i$16@) idx@)) (=> (= tmp%186 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$16@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) i$16@))) (and (=> %%location_label%%216 tmp%186) (=> tmp%186 (=> (= tmp%187 (ext_eq false (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) j$1@) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) j$1@))) (and (=> %%location_label%%217 tmp%187) (=> tmp%187 %%switch_label%%26)))))))) (and (not %%switch_label%%26) %%switch_label%%23)))) (and (not %%switch_label%%23) (=> %%location_label%%218 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) j$1@)))))) r$5@)))))))))))) (=> (forall ((i$ Poly) (j$ Poly) (r$ Poly)) (! (=> (and (has_type i$ NAT) (has_type j$ NAT) (has_type r$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (and (and (and (not (= i$ j$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$)))))) r$)) (< (%I j$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) j$)))) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) j$)))))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$)))))) r$) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) j$)))))) r$)))) (=> %%location_label%%219 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))))) (=> (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!)) (=> (= tmp%188 (lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))) (and (=> %%location_label%%220 tmp%188) (=> tmp%188 (=> (= tmp%189 (lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))) (and (=> %%location_label%%221 tmp%189) (=> tmp%189 (=> (= tmp%190 (lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))) (and (=> %%location_label%%222 tmp%190) (=> tmp%190 (=> (= tmp%191 (lib!impl_u.l2_impl.PT.hp_pat_is_zero.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))) (and (=> %%location_label%%223 tmp%191) (=> tmp%191 (=> %%location_label%%224 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!)))))))))))))))))))))))))))))))) (=> (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!)) (and (=> (= tmp%192 (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.empty.? $ TYPE%lib!impl_u.l1.NodeEntry.))) (and (=> %%location_label%%225 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem_with_empty@ pt_with_empty@ layer! ptr! base! tmp%192)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem_with_empty@ pt_with_empty@ layer! ptr! base! tmp%192) (=> (= tmp%193 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))) (and (=> %%location_label%%226 tmp%193) (=> tmp%193 (=> (= tmp%194 (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!))) (and (=> %%location_label%%227 tmp%194) (=> tmp%194 (=> (= tmp%195 (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.empty.? $ TYPE%lib!impl_u.l1.NodeEntry.))) (and (=> %%location_label%%228 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem!@2 pt_final@ layer! ptr! base! tmp%195)) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_aux_facts. mem!@2 pt_final@ layer! ptr! base! tmp%195) (=> (= final_interp@ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) (I base!))) (=> (= prev_interp@ (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@) (I layer!) (I ptr!) (I base!))) (and (=> (has_type i$17@ NAT) (=> (and (< (%I i$17@) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$17@) idx@))) (and (=> %%location_label%%229 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem!@0 pt! mem_with_empty@ pt_with_empty@ layer! ptr! base! (%I i$17@))) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem!@0 pt! mem_with_empty@ pt_with_empty@ layer! ptr! base! (%I i$17@)) (=> %%location_label%%230 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. prev_interp@)))) i$17@) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. interp@)))) i$17@))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$) idx@))) (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. prev_interp@)))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. interp@)))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. interp@)))) i$)))) (and (=> (has_type i$18@ NAT) (=> (and (< (%I i$18@) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$18@) idx@))) (or (and (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$18@))) (=> (= pt_entry$3@ (%Poly%lib!impl_u.l2_impl.PTDir. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$18@))))) (=> (= tmp%196 (lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!))) (and (=> %%location_label%%231 tmp%196) (=> tmp%196 (and (=> (has_type r$6@ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$3@)))) r$6@) (=> (= tmp%197 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$3@)))) r$6@)) (and (=> %%location_label%%232 tmp%197) (=> tmp%197 (=> (= tmp%198 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@))) r$6@)) (and (=> %%location_label%%233 tmp%198) (=> tmp%198 (=> (= tmp%199 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r$6@)) (and (=> %%location_label%%234 tmp%199) (=> tmp%199 (=> (= tmp%200 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@) r$6@))) (and (=> %%location_label%%235 tmp%200) (=> tmp%200 (=> %%location_label%%236 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@) r$6@))))))))))))))))) (=> (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$3@)))) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$3@)))) r$)))) (=> (= tmp%201 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$3@)))) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. dir_pt_res$1@)))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$3@)))) r$))))) (and (=> %%location_label%%237 tmp%201) (=> tmp%201 (=> (= tmp%202 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_entry$3@)))) r$) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) r$))))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$))))) (and (=> %%location_label%%238 tmp%202) (=> tmp%202 %%switch_label%%22))))))))))))) (=> (not (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) i$18@)))) %%switch_label%%22)) (and (not %%switch_label%%22) (and (=> %%location_label%%239 (req%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem_with_empty@ pt_with_empty@ mem!@2 pt_final@ layer! ptr! base! (%I i$18@))) (=> (ens%lib!impl_u.l2_impl.PT.lemma_interp_at_entry_different_memory. mem_with_empty@ pt_with_empty@ mem!@2 pt_final@ layer! ptr! base! (%I i$18@)) (=> %%location_label%%240 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. final_interp@)))) i$18@) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. prev_interp@)))) i$18@))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) lib!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i$) idx@))) (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. final_interp@)))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. prev_interp@)))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. prev_interp@)))) i$)))) (=> (= tmp%203 (= (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. final_interp@)))) (I idx@)) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. interp@) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))) (I idx@)))) (and (=> %%location_label%%241 tmp%203) (=> tmp%203 (=> (= tmp%204 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. final_interp@)))) (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. interp@) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))))))) (and (=> %%location_label%%242 tmp%204) (=> tmp%204 (=> (= tmp%205 (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. interp@) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))) (and (=> %%location_label%%243 tmp%205) (=> tmp%205 (=> %%location_label%%244 (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))))))))))))))))))))))))))))))) (=> (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!))))) (=> (= tmp%206 (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@))) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!))))) (and (=> %%location_label%%245 tmp%206) (=> tmp%206 (=> (= tmp%207 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_final@)))) (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@)))) (and (=> %%location_label%%246 tmp%207) (=> tmp%207 (=> (= tmp%208 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2))) (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@)))) (and (=> %%location_label%%247 tmp%208) (=> tmp%208 (and (=> (has_type r$7@ TYPE%lib!definitions_t.MemRegion.) (=> (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$7@)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@) r$7@))) (=> (= tmp%209 (not (= (%Poly%lib!definitions_t.MemRegion. r$7@) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. new_dir_region@))))) (and (=> %%location_label%%248 tmp%209) (=> tmp%209 (=> (= tmp%210 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_with_empty@)))) r$7@))) (and (=> %%location_label%%249 tmp%210) (=> tmp%210 (=> (= tmp%211 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. new_dir_pt@)))) r$7@))) (and (=> %%location_label%%250 tmp%211) (=> tmp%211 (=> (= tmp%212 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$7@))) (and (=> %%location_label%%251 tmp%212) (=> tmp%212 (=> (= tmp%213 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 64)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) r$7@)) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@) r$7@)))) (and (=> %%location_label%%252 tmp%213) (=> tmp%213 (=> %%location_label%%253 (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) r$7@) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$7@)))))))))))))))))))) (=> (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@) r$))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)))) (and (=> (has_type r$8@ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@) r$8@) (or (and (=> (= (%Poly%lib!definitions_t.MemRegion. r$8@) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. new_dir_region@))) (=> (= tmp%214 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r$8@))) (and (=> %%location_label%%254 tmp%214) (=> tmp%214 %%switch_label%%21)))) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r$8@) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. new_dir_region@)))) (=> (= tmp%215 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. dir_new_regions@) r$8@)) (and (=> %%location_label%%255 tmp%215) (=> tmp%215 (=> (= tmp%216 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem_with_empty@))) r$8@))) (and (=> %%location_label%%256 tmp%216) (=> tmp%216 (=> (= tmp%217 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r$8@))) (and (=> %%location_label%%257 tmp%217) (=> tmp%217 %%switch_label%%21))))))))))) (and (not %%switch_label%%21) (=> %%location_label%%258 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r$8@))))))) (=> (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) r$)))) (=> (= tmp%218 (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$))))) (and (=> %%location_label%%259 tmp%218) (=> tmp%218 (=> (= tmp%221 (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%lib!impl_u.l2_impl.PTDir. pt_final@) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$1@))))) %%switch_label%%20)))))))))))))))))))))))))))))))))))))))) (=> (not (is-core!result.Result./Ok_ tmp%%$2@)) (=> (= e$1@ (%Poly%tuple%0. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$2@))))) (=> (= tmp%219 (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. lib!definitions_t.x86_arch_spec.?) (I (nClip (Add layer! 1))))) (=> (= tmp%220 lib!definitions_t.X86_NUM_ENTRIES.?) (and (=> %%location_label%%260 (req%lib!impl_u.indexing.lemma_index_from_base_and_addr. entry_base@ vaddr! tmp%219 tmp%220)) (=> (ens%lib!impl_u.indexing.lemma_index_from_base_and_addr. entry_base@ vaddr! tmp%219 tmp%220) (=> %%location_label%%261 false)))))))) (and (not %%switch_label%%20) (=> (= tmp%222 tmp%221) %%switch_label%%13))))))))))))))))) (and (not %%switch_label%%13) (=> (= tmp%223 tmp%222) %%switch_label%%0)))))))) (and (not %%switch_label%%0) (=> (= res! tmp%223) (and (=> %%location_label%%262 (ite (is-core!result.Result./Ok_ res!) (let ((resv$ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))))) (let ((pt_res$ (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. resv$)))))) (let ((new_regions$ (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. resv$)))))) (and (and (and (and (and (and (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$)))) (= (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$))) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$))))) (vstd!set.impl&%0.disjoint.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$) (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$) r$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$))))) (lib!impl_u.l2_impl.PT.inv_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_res$) (I layer!) (I ptr!))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. new_regions$) r$))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) r$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))) r$))))) (= (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt_res$))) (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. pt!)))))))) (let ((e$ (%Poly%tuple%0. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))))) (= mem!@2 mem!@0)))) (and (=> %%location_label%%263 (ite (is-core!result.Result./Ok_ res!) (let ((resv$ (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))))) (let ((pt_res$ (%Poly%lib!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. resv$)))))) (let ((new_regions$ (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. resv$)))))) (= (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt_res$) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (let ((e$ (%Poly%tuple%0. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))))) (= (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!)))) (lib!impl_u.l1.impl&%1.map_frame.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l2_impl.PT.interp_at.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0) (Poly%lib!impl_u.l2_impl.PTDir. pt!) (I layer!) (I ptr!) (I base!))) (I vaddr!) (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? (Poly%lib!definitions_t.PageTableEntryExec. pte!)))))))) (=> %%location_label%%264 (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@2)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. mem!@0))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
