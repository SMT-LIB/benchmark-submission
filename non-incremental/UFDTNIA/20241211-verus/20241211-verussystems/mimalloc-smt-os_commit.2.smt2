(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. FuelId)
(declare-const fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.restrict. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.axiom_ptr_mut_from_data. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!raw_ptr.spec_cast_ptr_to_usize. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_sub. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_intersect. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_intersect_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference_finite. FuelId)
(declare-const fuel%vstd!set_lib.set_int_range. FuelId)
(declare-const fuel%vstd!set_lib.check_argument_is_set. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!os_mem.page_size. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.wf. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.wf_os. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.range_os. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.range_os_rw. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.range_os_none. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.range_points_to. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.has_pointsto_for_all_read_write. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.os_has_range. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.os_exact_range. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.os_has_range_read_write. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.os_has_range_no_read_write. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.has_new_pointsto. FuelId)
(declare-const fuel%lib!os_mem_util.impl&%0.pointsto_has_range. FuelId)
(declare-const fuel%lib!os_mem_util.impl&%0.os_rw_bytes. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!map_lib.impl&%0.restrict. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.axiom_ptr_mut_from_data. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!raw_ptr.spec_cast_ptr_to_usize. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_le. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.spec_sub. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_intersect. fuel%vstd!set.axiom_set_difference. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_intersect_finite. fuel%vstd!set.axiom_set_difference_finite. fuel%vstd!set_lib.set_int_range. fuel%vstd!set_lib.check_argument_is_set. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%42.view. fuel%lib!os_mem.page_size. fuel%lib!os_mem.impl&%0.wf. fuel%lib!os_mem.impl&%0.wf_os. fuel%lib!os_mem.impl&%0.range_os. fuel%lib!os_mem.impl&%0.range_os_rw. fuel%lib!os_mem.impl&%0.range_os_none. fuel%lib!os_mem.impl&%0.range_points_to. fuel%lib!os_mem.impl&%0.has_pointsto_for_all_read_write. fuel%lib!os_mem.impl&%0.os_has_range. fuel%lib!os_mem.impl&%0.os_exact_range. fuel%lib!os_mem.impl&%0.os_has_range_read_write. fuel%lib!os_mem.impl&%0.os_has_range_no_read_write. fuel%lib!os_mem.impl&%0.has_new_pointsto. fuel%lib!os_mem_util.impl&%0.pointsto_has_range. fuel%lib!os_mem_util.impl&%0.os_rw_bytes. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (and (fuel_bool_default fuel%vstd!raw_ptr.axiom_ptr_mut_from_data.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_intersect.) (fuel_bool_default fuel%vstd!set.axiom_set_difference.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_intersect_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_difference_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-sort lib!os_mem.OsMem. 0)
(declare-sort vstd!map.Map<int./lib!os_mem.OsMem.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.PointsToRaw. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-sort ptr_mut%<u8.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!os_mem.MemProtect. 0) (lib!os_mem.OsMemData. 0) (lib!os_mem.MemChunk. 0) (tuple%0. 0) (tuple%2. 0)) (((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!os_mem.MemProtect./MemProtect (lib!os_mem.MemProtect./MemProtect/?read Bool) (lib!os_mem.MemProtect./MemProtect/?write Bool))) ((lib!os_mem.OsMemData./OsMemData (lib!os_mem.OsMemData./OsMemData/?byte_addr Int) (lib!os_mem.OsMemData./OsMemData/?mem_protect lib!os_mem.MemProtect.))) ((lib!os_mem.MemChunk./MemChunk (lib!os_mem.MemChunk./MemChunk/?os vstd!map.Map<int./lib!os_mem.OsMem.>.) (lib!os_mem.MemChunk./MemChunk/?points_to vstd!raw_ptr.PointsToRaw.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!os_mem.MemProtect./MemProtect/read (lib!os_mem.MemProtect.) Bool)
(declare-fun lib!os_mem.MemProtect./MemProtect/write (lib!os_mem.MemProtect.) Bool)
(declare-fun lib!os_mem.OsMemData./OsMemData/byte_addr (lib!os_mem.OsMemData.) Int)
(declare-fun lib!os_mem.OsMemData./OsMemData/mem_protect (lib!os_mem.OsMemData.) lib!os_mem.MemProtect.)
(declare-fun lib!os_mem.MemChunk./MemChunk/os (lib!os_mem.MemChunk.) vstd!map.Map<int./lib!os_mem.OsMem.>.)
(declare-fun lib!os_mem.MemChunk./MemChunk/points_to (lib!os_mem.MemChunk.) vstd!raw_ptr.PointsToRaw.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-const TYPE%vstd!raw_ptr.PointsToRaw. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!os_mem.OsMem. Type)
(declare-const TYPE%lib!os_mem.MemProtect. Type)
(declare-const TYPE%lib!os_mem.OsMemData. Type)
(declare-const TYPE%lib!os_mem.MemChunk. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%lib!os_mem.OsMem. (lib!os_mem.OsMem.) Poly)
(declare-fun %Poly%lib!os_mem.OsMem. (Poly) lib!os_mem.OsMem.)
(declare-fun Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (vstd!map.Map<int./lib!os_mem.OsMem.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (Poly) vstd!map.Map<int./lib!os_mem.OsMem.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.PointsToRaw. (vstd!raw_ptr.PointsToRaw.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsToRaw. (Poly) vstd!raw_ptr.PointsToRaw.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%ptr_mut%<u8.>. (ptr_mut%<u8.>.) Poly)
(declare-fun %Poly%ptr_mut%<u8.>. (Poly) ptr_mut%<u8.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!os_mem.MemProtect. (lib!os_mem.MemProtect.) Poly)
(declare-fun %Poly%lib!os_mem.MemProtect. (Poly) lib!os_mem.MemProtect.)
(declare-fun Poly%lib!os_mem.OsMemData. (lib!os_mem.OsMemData.) Poly)
(declare-fun %Poly%lib!os_mem.OsMemData. (Poly) lib!os_mem.OsMemData.)
(declare-fun Poly%lib!os_mem.MemChunk. (lib!os_mem.MemChunk.) Poly)
(declare-fun %Poly%lib!os_mem.MemChunk. (Poly) lib!os_mem.MemChunk.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x lib!os_mem.OsMem.)) (! (= x (%Poly%lib!os_mem.OsMem. (Poly%lib!os_mem.OsMem. x))) :pattern ((Poly%lib!os_mem.OsMem. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!os_mem.OsMem.) (= x (Poly%lib!os_mem.OsMem. (%Poly%lib!os_mem.OsMem. x)))) :pattern ((has_type x TYPE%lib!os_mem.OsMem.)))))
(assert (forall ((x lib!os_mem.OsMem.)) (! (has_type (Poly%lib!os_mem.OsMem. x) TYPE%lib!os_mem.OsMem.) :pattern ((has_type (Poly%lib!os_mem.OsMem. x) TYPE%lib!os_mem.OsMem.)))))
(assert (forall ((x vstd!map.Map<int./lib!os_mem.OsMem.>.)) (! (= x (%Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x))) :pattern ((Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%lib!os_mem.OsMem.)) (= x (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (%Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%lib!os_mem.OsMem.))))))
(assert (forall ((x vstd!map.Map<int./lib!os_mem.OsMem.>.)) (! (has_type (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%lib!os_mem.OsMem.)) :pattern ((has_type (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%lib!os_mem.OsMem.))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.PointsToRaw.)) (! (= x (%Poly%vstd!raw_ptr.PointsToRaw. (Poly%vstd!raw_ptr.PointsToRaw. x))) :pattern ((Poly%vstd!raw_ptr.PointsToRaw. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PointsToRaw.) (= x (Poly%vstd!raw_ptr.PointsToRaw. (%Poly%vstd!raw_ptr.PointsToRaw. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PointsToRaw.)))))
(assert (forall ((x vstd!raw_ptr.PointsToRaw.)) (! (has_type (Poly%vstd!raw_ptr.PointsToRaw. x) TYPE%vstd!raw_ptr.PointsToRaw.) :pattern ((has_type (Poly%vstd!raw_ptr.PointsToRaw. x) TYPE%vstd!raw_ptr.PointsToRaw.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x ptr_mut%<u8.>.)) (! (= x (%Poly%ptr_mut%<u8.>. (Poly%ptr_mut%<u8.>. x))) :pattern ((Poly%ptr_mut%<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ (UINT 8))) (= x (Poly%ptr_mut%<u8.>. (%Poly%ptr_mut%<u8.>. x)))) :pattern ((has_type x (PTR $ (UINT 8)))))))
(assert (forall ((x ptr_mut%<u8.>.)) (! (has_type (Poly%ptr_mut%<u8.>. x) (PTR $ (UINT 8))) :pattern ((has_type (Poly%ptr_mut%<u8.>. x) (PTR $ (UINT 8)))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!os_mem.MemProtect.)) (! (= x (%Poly%lib!os_mem.MemProtect. (Poly%lib!os_mem.MemProtect. x))) :pattern ((Poly%lib!os_mem.MemProtect. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!os_mem.MemProtect.) (= x (Poly%lib!os_mem.MemProtect. (%Poly%lib!os_mem.MemProtect. x)))) :pattern ((has_type x TYPE%lib!os_mem.MemProtect.)))))
(assert (forall ((x lib!os_mem.MemProtect.)) (! (= (lib!os_mem.MemProtect./MemProtect/read x) (lib!os_mem.MemProtect./MemProtect/?read x)) :pattern ((lib!os_mem.MemProtect./MemProtect/read x)))))
(assert (forall ((x lib!os_mem.MemProtect.)) (! (= (lib!os_mem.MemProtect./MemProtect/write x) (lib!os_mem.MemProtect./MemProtect/?write x)) :pattern ((lib!os_mem.MemProtect./MemProtect/write x)))))
(assert (forall ((x lib!os_mem.MemProtect.)) (! (has_type (Poly%lib!os_mem.MemProtect. x) TYPE%lib!os_mem.MemProtect.) :pattern ((has_type (Poly%lib!os_mem.MemProtect. x) TYPE%lib!os_mem.MemProtect.)))))
(assert (forall ((x lib!os_mem.OsMemData.)) (! (= x (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. x))) :pattern ((Poly%lib!os_mem.OsMemData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!os_mem.OsMemData.) (= x (Poly%lib!os_mem.OsMemData. (%Poly%lib!os_mem.OsMemData. x)))) :pattern ((has_type x TYPE%lib!os_mem.OsMemData.)))))
(assert (forall ((x lib!os_mem.OsMemData.)) (! (= (lib!os_mem.OsMemData./OsMemData/byte_addr x) (lib!os_mem.OsMemData./OsMemData/?byte_addr x)) :pattern ((lib!os_mem.OsMemData./OsMemData/byte_addr x)))))
(assert (forall ((x lib!os_mem.OsMemData.)) (! (= (lib!os_mem.OsMemData./OsMemData/mem_protect x) (lib!os_mem.OsMemData./OsMemData/?mem_protect x)) :pattern ((lib!os_mem.OsMemData./OsMemData/mem_protect x)))))
(assert (forall ((x lib!os_mem.OsMemData.)) (! (has_type (Poly%lib!os_mem.OsMemData. x) TYPE%lib!os_mem.OsMemData.) :pattern ((has_type (Poly%lib!os_mem.OsMemData. x) TYPE%lib!os_mem.OsMemData.)))))
(assert (forall ((x lib!os_mem.MemChunk.)) (! (= x (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. x))) :pattern ((Poly%lib!os_mem.MemChunk. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!os_mem.MemChunk.) (= x (Poly%lib!os_mem.MemChunk. (%Poly%lib!os_mem.MemChunk. x)))) :pattern ((has_type x TYPE%lib!os_mem.MemChunk.)))))
(assert (forall ((x lib!os_mem.MemChunk.)) (! (= (lib!os_mem.MemChunk./MemChunk/os x) (lib!os_mem.MemChunk./MemChunk/?os x)) :pattern ((lib!os_mem.MemChunk./MemChunk/os x)))))
(assert (forall ((x lib!os_mem.MemChunk.)) (! (= (lib!os_mem.MemChunk./MemChunk/points_to x) (lib!os_mem.MemChunk./MemChunk/?points_to x)) :pattern ((lib!os_mem.MemChunk./MemChunk/points_to x)))))
(assert (forall ((x lib!os_mem.MemChunk.)) (! (has_type (Poly%lib!os_mem.MemChunk. x) TYPE%lib!os_mem.MemChunk.) :pattern ((has_type (Poly%lib!os_mem.MemChunk. x) TYPE%lib!os_mem.MemChunk.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!raw_ptr.ptr_mut_specs.spec_addr.? (Dcr Type Poly) Int)
(declare-fun vstd!raw_ptr.ptr_mut_from_data.? (Dcr Type Poly) Poly)
(declare-fun vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.restrict.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(declare-fun vstd!raw_ptr.spec_cast_ptr_to_usize.? (Dcr Type Poly) Int)
(declare-fun vstd!raw_ptr.impl&%11.provenance.? (Poly) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.impl&%11.dom.? (Poly) vstd!set.Set<int.>.)
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set_lib.set_int_range.? (Poly Poly) vstd!set.Set<int.>.)
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!os_mem.impl&%1.view.? (Poly) lib!os_mem.OsMemData.)
(declare-fun lib!os_mem.page_size.? (Poly) Int)
(declare-fun lib!os_mem.impl&%0.wf_os.? (Poly) Bool)
(declare-fun lib!os_mem.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!os_mem.impl&%0.range_os.? (Poly) vstd!set.Set<int.>.)
(declare-fun lib!os_mem.impl&%0.os_exact_range.? (Poly Poly Poly) Bool)
(declare-fun lib!os_mem.impl&%0.range_os_none.? (Poly) vstd!set.Set<int.>.)
(declare-fun lib!os_mem.impl&%0.os_has_range_no_read_write.? (Poly Poly Poly) Bool)
(declare-fun lib!os_mem.impl&%0.range_os_rw.? (Poly) vstd!set.Set<int.>.)
(declare-fun lib!os_mem.impl&%0.os_has_range_read_write.? (Poly Poly Poly) Bool)
(declare-fun lib!os_mem.impl&%0.range_points_to.? (Poly) vstd!set.Set<int.>.)
(declare-fun lib!os_mem.impl&%0.has_pointsto_for_all_read_write.? (Poly) Bool)
(declare-fun lib!os_mem.impl&%0.has_new_pointsto.? (Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.spec_sub.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set_lib.check_argument_is_set.? (Dcr Type Poly) Poly)
(declare-fun lib!os_mem.impl&%0.os_has_range.? (Poly Poly Poly) Bool)
(declare-fun lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly) vstd!set.Set<int.>.)
(declare-fun lib!os_mem_util.impl&%0.pointsto_has_range.? (Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.) (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (= (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))))))
(assert (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (=> (has_type p! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!)))))
(declare-fun ens%core!ptr.mut_ptr.impl&%0.addr. (Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Int)) (! (= (ens%core!ptr.mut_ptr.impl&%0.addr. T&. T& p! addr!) (and (uInv SZ addr!) (= addr! (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))))) :pattern ((ens%core!ptr.mut_ptr.impl&%0.addr. T&. T& p! addr!)))))
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!)))))
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_mut_specs.spec_with_addr.) (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Poly)) (! (= (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& (Poly%vstd!raw_ptr.PtrData. (let ((tmp%%$ (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))) (vstd!raw_ptr.PtrData./PtrData (%I addr!) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. tmp%%$))))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. tmp%%$)))))))))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!))))))
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Poly)) (! (=> (and (has_type p! (PTR T&. T&)) (has_type addr! (UINT SZ))) (has_type (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! addr!)))))
(declare-fun ens%core!ptr.mut_ptr.impl&%0.with_addr. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Int) (q! Poly)) (! (= (ens%core!ptr.mut_ptr.impl&%0.with_addr. T&. T& p! addr! q!) (and (has_type q! (PTR T&. T&)) (= q! (vstd!raw_ptr.ptr_mut_specs.spec_with_addr.? T&. T& p! (I addr!))))) :pattern ((ens%core!ptr.mut_ptr.impl&%0.with_addr. T&. T& p! addr! q!)))))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.remove_keys.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.remove_keys.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.restrict.))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.restrict.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.axiom_ptr_mut_from_data.) (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (= (vstd!view.View.view.? $ (PTR T&. T&) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!)) data!)) :pattern ((vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!))))))
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(assert (fuel_bool_default fuel%vstd!raw_ptr.spec_cast_ptr_to_usize.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.spec_cast_ptr_to_usize.) (forall ((T&. Dcr) (T& Type) (ptr! Poly)) (! (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) ptr!)))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!))))))
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly)) (! (=> (has_type ptr! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(assert (fuel_bool_default fuel%vstd!set_lib.set_int_range.))
(declare-fun %%lambda%%5 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1) i$) (B (and (<= %%hole%%0 (%I i$)) (< (%I i$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1) i$)))))
(assert (=> (fuel_bool fuel%vstd!set_lib.set_int_range.) (forall ((lo! Poly) (hi! Poly)) (! (= (vstd!set_lib.set_int_range.? lo! hi!) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.new.? $ INT $ (TYPE%fun%1. $ INT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 (%I lo!) (%I hi!))))))) :pattern ((vstd!set_lib.set_int_range.? lo! hi!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_intersect.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_intersect_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_le.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_le.? A&. A& self! s2!) (vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_le.? A&. A& self! s2!))))))
(assert (fuel_bool_default fuel%lib!os_mem.page_size.))
(assert (=> (fuel_bool fuel%lib!os_mem.page_size.) (forall ((no%param Poly)) (! (= (lib!os_mem.page_size.? no%param) 4096) :pattern ((lib!os_mem.page_size.? no%param))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.wf_os.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.wf_os.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.wf_os.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) addr$) (= (lib!os_mem.OsMemData./OsMemData/byte_addr (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. (lib!os_mem.impl&%1.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!))) addr$))))) (%I addr$)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) addr$))))) :pattern ((lib!os_mem.impl&%0.wf_os.? self!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.wf.? self!) (lib!os_mem.impl&%0.wf_os.? self!)) :pattern ((lib!os_mem.impl&%0.wf.? self!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.range_os.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.range_os.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.range_os.? self!) (%Poly%vstd!set.Set<int.>. (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))))) :pattern ((lib!os_mem.impl&%0.range_os.? self!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.os_exact_range.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.os_exact_range.) (forall ((self! Poly) (start! Poly) (len! Poly)) (! (= (lib!os_mem.impl&%0.os_exact_range.? self! start! len!) (ext_eq false (TYPE%vstd!set.Set. $ INT) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? start! (I (Add (%I start!) (%I len!))))) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))))) :pattern ((lib!os_mem.impl&%0.os_exact_range.? self! start! len!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.range_os_none.))
(declare-fun %%lambda%%6 (Dcr Type Poly Dcr Type Dcr Type Poly lib!os_mem.MemProtect.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 lib!os_mem.MemProtect.) (addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) addr$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 addr$) (= (lib!os_mem.OsMemData./OsMemData/mem_protect (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. (lib!os_mem.impl&%1.view.? (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 addr$))))) %%hole%%8)))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) addr$)))))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.range_os_none.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.range_os_none.? self!) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.new.? $ INT $ (TYPE%fun%1. $ INT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%6 $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!))) (lib!os_mem.MemProtect./MemProtect (%B (B false)) (%B (B false))))))))) :pattern ((lib!os_mem.impl&%0.range_os_none.? self!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.os_has_range_no_read_write.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.os_has_range_no_read_write.) (forall ((self! Poly) (start! Poly) (len! Poly)) (! (= (lib!os_mem.impl&%0.os_has_range_no_read_write.? self! start! len!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? start! (I (Add (%I start!) (%I len!))))) (Poly%vstd!set.Set<int.>. (lib!os_mem.impl&%0.range_os_none.? self!)))) :pattern ((lib!os_mem.impl&%0.os_has_range_no_read_write.? self! start! len!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.range_os_rw.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.range_os_rw.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.range_os_rw.? self!) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.new.? $ INT $ (TYPE%fun%1. $ INT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%6 $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!))) (lib!os_mem.MemProtect./MemProtect (%B (B true)) (%B (B true))))))))) :pattern ((lib!os_mem.impl&%0.range_os_rw.? self!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.os_has_range_read_write.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.os_has_range_read_write.) (forall ((self! Poly) (start! Poly) (len! Poly)) (! (= (lib!os_mem.impl&%0.os_has_range_read_write.? self! start! len!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? start! (I (Add (%I start!) (%I len!))))) (Poly%vstd!set.Set<int.>. (lib!os_mem.impl&%0.range_os_rw.? self!)))) :pattern ((lib!os_mem.impl&%0.os_has_range_read_write.? self! start! len!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.range_points_to.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.range_points_to.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.range_points_to.? self!) (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. self!))))) :pattern ((lib!os_mem.impl&%0.range_points_to.? self!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.has_pointsto_for_all_read_write.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.has_pointsto_for_all_read_write.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.has_pointsto_for_all_read_write.? self!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem.impl&%0.range_os_rw.? self!)) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. self!))))))) :pattern ((lib!os_mem.impl&%0.has_pointsto_for_all_read_write.? self!))))))
(declare-fun req%lib!os_mem.mprotect_prot_none. (ptr_mut%<u8.>. Int lib!os_mem.MemChunk.) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((addr! ptr_mut%<u8.>.) (len! Int) (pre%mem! lib!os_mem.MemChunk.)) (! (= (req%lib!os_mem.mprotect_prot_none. addr! len! pre%mem!) (and (=> %%global_location_label%%4 (= (EucMod (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) (lib!os_mem.page_size.? (I 0))) 0)) (=> %%global_location_label%%5 (= (EucMod len! (lib!os_mem.page_size.? (I 0))) 0)) (=> %%global_location_label%%6 (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. pre%mem!))) (=> %%global_location_label%%7 (lib!os_mem.impl&%0.os_exact_range.? (Poly%lib!os_mem.MemChunk. pre%mem!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I len!))) (=> %%global_location_label%%8 (lib!os_mem.impl&%0.has_pointsto_for_all_read_write.? (Poly%lib!os_mem.MemChunk. pre%mem!))) (=> %%global_location_label%%9 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!))))) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. addr!)))))))) :pattern ((req%lib!os_mem.mprotect_prot_none. addr! len! pre%mem!)))))
(declare-fun ens%lib!os_mem.mprotect_prot_none. (ptr_mut%<u8.>. Int lib!os_mem.MemChunk. lib!os_mem.MemChunk.) Bool)
(assert (forall ((addr! ptr_mut%<u8.>.) (len! Int) (pre%mem! lib!os_mem.MemChunk.) (mem! lib!os_mem.MemChunk.)) (! (= (ens%lib!os_mem.mprotect_prot_none. addr! len! pre%mem! mem!) (and (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. mem!)) (lib!os_mem.impl&%0.os_exact_range.? (Poly%lib!os_mem.MemChunk. mem!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I len!)) (lib!os_mem.impl&%0.os_has_range_no_read_write.? (Poly%lib!os_mem.MemChunk. mem!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I len!)) (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!))))) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.empty.? $ INT))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!)))))))) :pattern ((ens%lib!os_mem.mprotect_prot_none. addr! len! pre%mem! mem!)))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.has_new_pointsto.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.has_new_pointsto.) (forall ((self! Poly) (the_old! Poly)) (! (= (lib!os_mem.impl&%0.has_new_pointsto.? self! the_old!) (and (and (and (= (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. the_old!))))) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. the_old!))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. self!))))))) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. the_old!)))) addr$) (=> (= (lib!os_mem.OsMemData./OsMemData/mem_protect (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. (lib!os_mem.impl&%1.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. the_old!))) addr$))))) (lib!os_mem.MemProtect./MemProtect (%B (B true)) (%B (B true)))) (= (lib!os_mem.OsMemData./OsMemData/mem_protect (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. (lib!os_mem.impl&%1.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!))) addr$))))) (lib!os_mem.MemProtect./MemProtect (%B (B true)) (%B (B true))))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. the_old!)))) addr$))))) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) addr$) (= (lib!os_mem.OsMemData./OsMemData/mem_protect (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. (lib!os_mem.impl&%1.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!))) addr$))))) (lib!os_mem.MemProtect./MemProtect (%B (B true)) (%B (B true))))) (not (= (lib!os_mem.OsMemData./OsMemData/mem_protect (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. (lib!os_mem.impl&%1.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. the_old!))) addr$))))) (lib!os_mem.MemProtect./MemProtect (%B (B true)) (%B (B true)))))) (vstd!set.impl&%0.contains.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. self!))))) addr$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. self!))))) addr$)))))) :pattern ((lib!os_mem.impl&%0.has_new_pointsto.? self! the_old!))))))
(declare-fun req%lib!os_mem.mprotect_prot_read_write. (ptr_mut%<u8.>. Int lib!os_mem.MemChunk.) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((addr! ptr_mut%<u8.>.) (len! Int) (pre%mem! lib!os_mem.MemChunk.)) (! (= (req%lib!os_mem.mprotect_prot_read_write. addr! len! pre%mem!) (and (=> %%global_location_label%%10 (= (EucMod (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) (lib!os_mem.page_size.? (I 0))) 0)) (=> %%global_location_label%%11 (= (EucMod len! (lib!os_mem.page_size.? (I 0))) 0)) (=> %%global_location_label%%12 (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. pre%mem!))) (=> %%global_location_label%%13 (lib!os_mem.impl&%0.os_exact_range.? (Poly%lib!os_mem.MemChunk. pre%mem!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I len!))) (=> %%global_location_label%%14 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!))))) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. addr!)))))))) :pattern ((req%lib!os_mem.mprotect_prot_read_write. addr! len! pre%mem!)))))
(declare-fun ens%lib!os_mem.mprotect_prot_read_write. (ptr_mut%<u8.>. Int lib!os_mem.MemChunk. lib!os_mem.MemChunk.) Bool)
(assert (forall ((addr! ptr_mut%<u8.>.) (len! Int) (pre%mem! lib!os_mem.MemChunk.) (mem! lib!os_mem.MemChunk.)) (! (= (ens%lib!os_mem.mprotect_prot_read_write. addr! len! pre%mem! mem!) (and (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. mem!)) (lib!os_mem.impl&%0.os_exact_range.? (Poly%lib!os_mem.MemChunk. mem!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I len!)) (lib!os_mem.impl&%0.os_has_range_read_write.? (Poly%lib!os_mem.MemChunk. mem!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I len!)) (lib!os_mem.impl&%0.has_new_pointsto.? (Poly%lib!os_mem.MemChunk. mem!) (Poly%lib!os_mem.MemChunk. pre%mem!)) (=> (lib!os_mem.impl&%0.has_pointsto_for_all_read_write.? (Poly%lib!os_mem.MemChunk. pre%mem!)) (lib!os_mem.impl&%0.has_pointsto_for_all_read_write.? (Poly%lib!os_mem.MemChunk. mem!))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!)))))))) :pattern ((ens%lib!os_mem.mprotect_prot_read_write. addr! len! pre%mem! mem!)))))
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_sub.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_sub.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_sub.? A&. A& self! s2!) (vstd!set.impl&%0.difference.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_sub.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_sub.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_sub.? A&. A& self! s2!)))))
(assert (fuel_bool_default fuel%vstd!set_lib.check_argument_is_set.))
(assert (=> (fuel_bool fuel%vstd!set_lib.check_argument_is_set.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (vstd!set_lib.check_argument_is_set.? A&. A& s!) s!) :pattern ((vstd!set_lib.check_argument_is_set.? A&. A& s!))))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set_lib.check_argument_is_set.? A&. A& s!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set_lib.check_argument_is_set.? A&. A& s!)))))
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.os_has_range.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.os_has_range.) (forall ((self! Poly) (start! Poly) (len! Poly)) (! (= (lib!os_mem.impl&%0.os_has_range.? self! start! len!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? start! (I (Add (%I start!) (%I len!))))) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))))) :pattern ((lib!os_mem.impl&%0.os_has_range.? self! start! len!))))))
(assert (fuel_bool_default fuel%lib!os_mem_util.impl&%0.os_rw_bytes.))
(assert (=> (fuel_bool fuel%lib!os_mem_util.impl&%0.os_rw_bytes.) (forall ((self! Poly)) (! (= (lib!os_mem_util.impl&%0.os_rw_bytes.? self!) (lib!os_mem.impl&%0.range_os_rw.? self!)) :pattern ((lib!os_mem_util.impl&%0.os_rw_bytes.? self!))))))
(assert (fuel_bool_default fuel%lib!os_mem_util.impl&%0.pointsto_has_range.))
(assert (=> (fuel_bool fuel%lib!os_mem_util.impl&%0.pointsto_has_range.) (forall ((self! Poly) (start! Poly) (len! Poly)) (! (= (lib!os_mem_util.impl&%0.pointsto_has_range.? self! start! len!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? start! (I (Add (%I start!) (%I len!))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. self!))))))) :pattern ((lib!os_mem_util.impl&%0.pointsto_has_range.? self! start! len!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(assert (tr_bound%vstd!view.View. $ BOOL))
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(declare-fun ens%lib!os_mem.get_page_size. (Int Int) Bool)
(assert (forall ((no%param Int) (u! Int)) (! (= (ens%lib!os_mem.get_page_size. no%param u!) (and (uInv SZ u!) (= u! (lib!os_mem.page_size.? (I 0))))) :pattern ((ens%lib!os_mem.get_page_size. no%param u!)))))
(declare-fun req%lib!layout.align_down. (Int Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (req%lib!layout.align_down. x! y!) (=> %%global_location_label%%15 (not (= y! 0)))) :pattern ((req%lib!layout.align_down. x! y!)))))
(declare-fun ens%lib!layout.align_down. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (res! Int)) (! (= (ens%lib!layout.align_down. x! y! res!) (and (uInv SZ res!) (= res! (Mul (EucDiv x! y!) y!)) (and (<= res! x!) (< x! (Add res! y!))) (= (uClip SZ (EucMod res! y!)) 0) (= (Mul (uClip SZ (EucDiv res! y!)) y!) res!))) :pattern ((ens%lib!layout.align_down. x! y! res!)))))
(declare-fun req%lib!layout.align_up. (Int Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (req%lib!layout.align_up. x! y!) (and (=> %%global_location_label%%16 (not (= y! 0))) (=> %%global_location_label%%17 (<= (Sub (Add x! y!) 1) (- (uHi SZ) 1))))) :pattern ((req%lib!layout.align_up. x! y!)))))
(declare-fun ens%lib!layout.align_up. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (res! Int)) (! (= (ens%lib!layout.align_up. x! y! res!) (and (uInv SZ res!) (= res! (Mul (EucDiv (Sub (Add x! y!) 1) y!) y!)) (and (<= x! res!) (<= res! (Sub (Add x! y!) 1))) (= (uClip SZ (EucMod res! y!)) 0) (= (Mul (uClip SZ (EucDiv res! y!)) y!) res!))) :pattern ((ens%lib!layout.align_up. x! y! res!)))))
(declare-fun ens%lib!os_mem_util.impl&%0.split. (lib!os_mem.MemChunk. lib!os_mem.MemChunk. Int Int lib!os_mem.MemChunk.) Bool)
(assert (forall ((pre%self! lib!os_mem.MemChunk.) (self! lib!os_mem.MemChunk.) (start! Int) (len! Int) (t! lib!os_mem.MemChunk.)) (! (= (ens%lib!os_mem_util.impl&%0.split. pre%self! self! start! len! t!) (and (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. t!))))) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.intersect.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? (I start!) (I (Add start! len!))))))) (= (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. t!))) (%Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (vstd!map_lib.impl&%0.restrict.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? (I start!) (I (Add start! len!))))))) (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? (I start!) (I (Add start! len!))))))) (= (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))) (%Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (vstd!map_lib.impl&%0.remove_keys.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? (I start!) (I (Add start! len!))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. t!)))))))) :pattern ((ens%lib!os_mem_util.impl&%0.split. pre%self! self! start! len! t!)))))
(declare-fun req%lib!os_mem_util.impl&%0.join. (lib!os_mem.MemChunk. lib!os_mem.MemChunk.) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((pre%self! lib!os_mem.MemChunk.) (t! lib!os_mem.MemChunk.)) (! (= (req%lib!os_mem_util.impl&%0.join. pre%self! t!) (=> %%global_location_label%%18 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. t!)))))))) :pattern ((req%lib!os_mem_util.impl&%0.join. pre%self! t!)))))
(declare-fun ens%lib!os_mem_util.impl&%0.join. (lib!os_mem.MemChunk. lib!os_mem.MemChunk. lib!os_mem.MemChunk.) Bool)
(assert (forall ((pre%self! lib!os_mem.MemChunk.) (self! lib!os_mem.MemChunk.) (t! lib!os_mem.MemChunk.)) (! (= (ens%lib!os_mem_util.impl&%0.join. pre%self! self! t!) (and (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.union.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. t!))))))))) (= (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))) (%Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))) (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. t!))))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))))) :pattern ((ens%lib!os_mem_util.impl&%0.join. pre%self! self! t!)))))
(declare-fun req%lib!os_mem_util.impl&%0.take_points_to_set. (lib!os_mem.MemChunk. vstd!set.Set<int.>.) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((pre%self! lib!os_mem.MemChunk.) (s! vstd!set.Set<int.>.)) (! (= (req%lib!os_mem_util.impl&%0.take_points_to_set. pre%self! s!) (=> %%global_location_label%%19 (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. s!) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!))))))))) :pattern ((req%lib!os_mem_util.impl&%0.take_points_to_set. pre%self! s!)))))
(declare-fun ens%lib!os_mem_util.impl&%0.take_points_to_set. (lib!os_mem.MemChunk. lib!os_mem.MemChunk. vstd!set.Set<int.>. vstd!raw_ptr.PointsToRaw.) Bool)
(assert (forall ((pre%self! lib!os_mem.MemChunk.) (self! lib!os_mem.MemChunk.) (s! vstd!set.Set<int.>.) (points_to! vstd!raw_ptr.PointsToRaw.)) (! (= (ens%lib!os_mem_util.impl&%0.take_points_to_set. pre%self! self! s! points_to!) (and (= (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))) (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))) (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))) (Poly%vstd!set.Set<int.>. s!)))) (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. points_to!)) s!) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to!)) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))))) :pattern ((ens%lib!os_mem_util.impl&%0.take_points_to_set. pre%self! self! s! points_to!)))))
(declare-fun req%lib!os_mem_util.impl&%0.give_points_to_range. (lib!os_mem.MemChunk. vstd!raw_ptr.PointsToRaw.) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((pre%self! lib!os_mem.MemChunk.) (points_to! vstd!raw_ptr.PointsToRaw.)) (! (= (req%lib!os_mem_util.impl&%0.give_points_to_range. pre%self! points_to!) (and (=> %%global_location_label%%20 (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. pre%self!))) (=> %%global_location_label%%21 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to!)))))) :pattern ((req%lib!os_mem_util.impl&%0.give_points_to_range. pre%self! points_to!)))))
(declare-fun ens%lib!os_mem_util.impl&%0.give_points_to_range. (lib!os_mem.MemChunk. lib!os_mem.MemChunk. vstd!raw_ptr.PointsToRaw.) Bool)
(assert (forall ((pre%self! lib!os_mem.MemChunk.) (self! lib!os_mem.MemChunk.) (points_to! vstd!raw_ptr.PointsToRaw.)) (! (= (ens%lib!os_mem_util.impl&%0.give_points_to_range. pre%self! self! points_to!) (and (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. self!)) (= (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))) (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))) (= (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.union.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%self!)))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. points_to!)))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. self!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. points_to!))))) :pattern ((ens%lib!os_mem_util.impl&%0.give_points_to_range. pre%self! self! points_to!)))))
(declare-fun req%lib!os_commit.os_page_align_areax. (Bool Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((conservative! Bool) (addr! Int) (size! Int)) (! (= (req%lib!os_commit.os_page_align_areax. conservative! addr! size!) (and (=> %%global_location_label%%22 (= (EucMod addr! (lib!os_mem.page_size.? (I 0))) 0)) (=> %%global_location_label%%23 (= (EucMod size! (lib!os_mem.page_size.? (I 0))) 0)) (=> %%global_location_label%%24 (not (= addr! 0))) (=> %%global_location_label%%25 (<= (Add addr! size!) (- (uHi SZ) 1))))) :pattern ((req%lib!os_commit.os_page_align_areax. conservative! addr! size!)))))
(declare-fun ens%lib!os_commit.os_page_align_areax. (Bool Int Int tuple%2.) Bool)
(assert (forall ((conservative! Bool) (addr! Int) (size! Int) (res! tuple%2.)) (! (= (ens%lib!os_commit.os_page_align_areax. conservative! addr! size! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (let ((start$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) (let ((csize$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) (and (and (and (and (= (EucMod start$ (lib!os_mem.page_size.? (I 0))) 0) (= (EucMod csize$ (lib!os_mem.page_size.? (I 0))) 0)) (=> (not (= size! 0)) (= start$ addr!))) (=> (not (= size! 0)) (= csize$ size!))) (=> (= size! 0) (and (= start$ 0) (= csize$ 0)))))))) :pattern ((ens%lib!os_commit.os_page_align_areax. conservative! addr! size! res!)))))
(declare-fun req%lib!os_commit.os_commitx. (ptr_mut%<u8.>. Int Bool Bool lib!os_mem.MemChunk.) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((addr! ptr_mut%<u8.>.) (size! Int) (commit! Bool) (conservative! Bool) (pre%mem! lib!os_mem.MemChunk.)) (! (= (req%lib!os_commit.os_commitx. addr! size! commit! conservative! pre%mem!) (and (=> %%global_location_label%%26 (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. pre%mem!))) (=> %%global_location_label%%27 (lib!os_mem.impl&%0.os_has_range.? (Poly%lib!os_mem.MemChunk. pre%mem!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I size!))) (=> %%global_location_label%%28 (= (EucMod (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) (lib!os_mem.page_size.? (I 0))) 0)) (=> %%global_location_label%%29 (= (EucMod size! (lib!os_mem.page_size.? (I 0))) 0)) (=> %%global_location_label%%30 (not (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) 0))) (=> %%global_location_label%%31 (<= (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) size!) (- (uHi SZ) 1))) (=> %%global_location_label%%32 (=> (not commit!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) size!)))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!))))))))) (=> %%global_location_label%%33 (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. addr!)))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!))))))))) :pattern ((req%lib!os_commit.os_commitx. addr! size! commit! conservative! pre%mem!)))))
(declare-fun ens%lib!os_commit.os_commitx. (ptr_mut%<u8.>. Int Bool Bool lib!os_mem.MemChunk. lib!os_mem.MemChunk. tuple%2.) Bool)
(assert (forall ((addr! ptr_mut%<u8.>.) (size! Int) (commit! Bool) (conservative! Bool) (pre%mem! lib!os_mem.MemChunk.) (mem! lib!os_mem.MemChunk.) (res! tuple%2.)) (! (= (ens%lib!os_commit.os_commitx. addr! size! commit! conservative! pre%mem! mem! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ BOOL $ BOOL)) (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. mem!)) (ext_eq false (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!))))) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!)))))) (=> commit! (lib!os_mem.impl&%0.has_new_pointsto.? (Poly%lib!os_mem.MemChunk. mem!) (Poly%lib!os_mem.MemChunk. pre%mem!))) (=> commit! (=> (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))) (lib!os_mem.impl&%0.os_has_range_read_write.? (Poly%lib!os_mem.MemChunk. mem!) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I size!)))) (=> (not commit!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!)))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!)))))))) (=> (not commit!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!))) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. pre%mem!))))) (=> (not commit!) (ext_eq false (TYPE%vstd!set.Set. $ INT) (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!)))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!))))))) (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. pre%mem!))) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!)))))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. pre%mem!)))))))) :pattern ((ens%lib!os_commit.os_commitx. addr! size! commit! conservative! pre%mem! mem! res!)))))
(declare-const res! tuple%2.)
(declare-const addr! ptr_mut%<u8.>.)
(declare-const size! Int)
(declare-const commit! Bool)
(declare-const conservative! Bool)
(declare-const mem!@0 lib!os_mem.MemChunk.)
(declare-const tmp%1 Int)
(declare-const tmp%2 Poly)
(declare-const tmp%3 vstd!set.Set<int.>.)
(declare-const verus_tmp_weird_extra@ vstd!raw_ptr.PointsToRaw.)
(declare-const tmp%4 Int)
(declare-const verus_tmp_exact_mem@0 lib!os_mem.MemChunk.)
(declare-const verus_tmp_em@ lib!os_mem.MemChunk.)
(declare-const tmp%5 Bool)
(declare-const is_zero@ Bool)
(declare-const tmp%%@ tuple%2.)
(declare-const start@ Int)
(declare-const csize@ Int)
(declare-const err@ Int)
(declare-const p@ ptr_mut%<u8.>.)
(declare-const verus_tmp@ vstd!raw_ptr.PointsToRaw.)
(declare-const weird_extra@0 vstd!raw_ptr.PointsToRaw.)
(declare-const verus_tmp$1@ lib!os_mem.MemChunk.)
(declare-const exact_mem@0 lib!os_mem.MemChunk.)
(declare-const verus_tmp$2@0 lib!os_mem.MemChunk.)
(declare-const em@0 lib!os_mem.MemChunk.)
(assert fuel_defaults)
(assert (uInv SZ size!))
(assert (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. mem!@0)))
(assert (lib!os_mem.impl&%0.os_has_range.? (Poly%lib!os_mem.MemChunk. mem!@0) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I size!)))
(assert (= (EucMod (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) (lib!os_mem.page_size.? (I 0))) 0))
(assert (= (EucMod size! (lib!os_mem.page_size.? (I 0))) 0))
(assert (not (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) 0)))
(assert (<= (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) size!) (- (uHi SZ) 1)))
(assert (=> (not commit!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!)) size!)))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0)))))))))
(assert (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ (UINT 8)) (Poly%ptr_mut%<u8.>. addr!)))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0)))))))
(declare-const mem!@1 lib!os_mem.MemChunk.)
(declare-const weird_extra@1 vstd!raw_ptr.PointsToRaw.)
(declare-const mem!@2 lib!os_mem.MemChunk.)
(declare-const exact_mem@1 lib!os_mem.MemChunk.)
(declare-const verus_tmp$2@1 lib!os_mem.MemChunk.)
(declare-const em@1 lib!os_mem.MemChunk.)
(declare-const exact_mem@2 lib!os_mem.MemChunk.)
(declare-const mem!@3 lib!os_mem.MemChunk.)
(declare-const mem!@4 lib!os_mem.MemChunk.)
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(declare-const %%location_label%%6 Bool)
(declare-const %%location_label%%7 Bool)
(declare-const %%location_label%%8 Bool)
(declare-const %%location_label%%9 Bool)
(declare-const %%location_label%%10 Bool)
(declare-const %%location_label%%11 Bool)
(declare-const %%location_label%%12 Bool)
(declare-const %%location_label%%13 Bool)
(declare-const %%location_label%%14 Bool)
(declare-const %%location_label%%15 Bool)
(declare-const %%location_label%%16 Bool)
(declare-const %%location_label%%17 Bool)
(declare-const %%location_label%%18 Bool)
(declare-const %%location_label%%19 Bool)
(declare-const %%location_label%%20 Bool)
(declare-const %%location_label%%21 Bool)
(declare-const %%location_label%%22 Bool)
(assert (not (=> (= is_zero@ false) (=> (ens%core!ptr.mut_ptr.impl&%0.addr. $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!) tmp%1) (and (=> %%location_label%%0 (req%lib!os_commit.os_page_align_areax. conservative! tmp%1 size!)) (=> (ens%lib!os_commit.os_page_align_areax. conservative! tmp%1 size! tmp%%@) (=> (= start@ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= csize@ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (or (and (=> (= csize@ 0) (=> (= res! (tuple%2./tuple%2 (B true) (B is_zero@))) (and (=> %%location_label%%1 (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. mem!@0))) (and (=> %%location_label%%2 (ext_eq false (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0))))) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0))))))) (and (=> %%location_label%%3 (=> commit! (lib!os_mem.impl&%0.has_new_pointsto.? (Poly%lib!os_mem.MemChunk. mem!@0) (Poly%lib!os_mem.MemChunk. mem!@0)))) (and (=> %%location_label%%4 (=> commit! (=> (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))) (lib!os_mem.impl&%0.os_has_range_read_write.? (Poly%lib!os_mem.MemChunk. mem!@0) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I size!))))) (and (=> %%location_label%%5 (=> (not commit!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0)))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0))))))))) (and (=> %%location_label%%6 (=> (not commit!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@0))) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@0)))))) (and (=> %%location_label%%7 (=> (not commit!) (ext_eq false (TYPE%vstd!set.Set. $ INT) (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0)))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0))))))) (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@0))) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@0))))))) (=> %%location_label%%8 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0)))))))))))))))) (=> (not (= csize@ 0)) %%switch_label%%3)) (and (not %%switch_label%%3) (=> (= err@ 0) (=> (ens%core!ptr.mut_ptr.impl&%0.with_addr. $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!) start@ tmp%2) (=> (= p@ (%Poly%ptr_mut%<u8.>. tmp%2)) (=> (= tmp%3 (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0)))))) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@0)))))) (and (=> %%location_label%%9 (req%lib!os_mem_util.impl&%0.take_points_to_set. mem!@0 tmp%3)) (=> (ens%lib!os_mem_util.impl&%0.take_points_to_set. mem!@0 mem!@1 tmp%3 verus_tmp@) (=> (= verus_tmp_weird_extra@ verus_tmp@) (=> (= weird_extra@1 verus_tmp_weird_extra@) (=> (= tmp%4 (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (=> (ens%lib!os_mem_util.impl&%0.split. mem!@1 mem!@2 tmp%4 size! verus_tmp$1@) (=> (= verus_tmp_exact_mem@0 verus_tmp$1@) (=> (= exact_mem@1 verus_tmp_exact_mem@0) (=> (= verus_tmp$2@1 exact_mem@1) (=> (= verus_tmp_em@ verus_tmp$2@1) (=> (= em@1 verus_tmp_em@) (or (and (=> commit! (and (=> %%location_label%%10 (req%lib!os_mem.mprotect_prot_read_write. p@ csize@ exact_mem@1)) (=> (ens%lib!os_mem.mprotect_prot_read_write. p@ csize@ exact_mem@1 exact_mem@2) %%switch_label%%2))) (=> (not commit!) (and (=> %%location_label%%11 (req%lib!os_mem.mprotect_prot_none. p@ csize@ exact_mem@1)) (=> (ens%lib!os_mem.mprotect_prot_none. p@ csize@ exact_mem@1 exact_mem@2) %%switch_label%%2)))) (and (not %%switch_label%%2) (and (=> %%location_label%%12 (req%lib!os_mem_util.impl&%0.join. mem!@2 exact_mem@2)) (=> (ens%lib!os_mem_util.impl&%0.join. mem!@2 mem!@3 exact_mem@2) (and (=> %%location_label%%13 (req%lib!os_mem_util.impl&%0.give_points_to_range. mem!@3 weird_extra@1)) (=> (ens%lib!os_mem_util.impl&%0.give_points_to_range. mem!@3 mem!@4 weird_extra@1) (or (and (=> commit! %%switch_label%%1) (=> (not commit!) %%switch_label%%1)) (and (not %%switch_label%%1) (or (and (=> (not commit!) %%switch_label%%0) (=> (not (not commit!)) %%switch_label%%0)) (and (not %%switch_label%%0) (=> (= tmp%5 (ext_eq false (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@4))))) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0))))))) (and (=> %%location_label%%14 tmp%5) (=> tmp%5 (=> (= res! (tuple%2./tuple%2 (B true) (B is_zero@))) (and (=> %%location_label%%15 (lib!os_mem.impl&%0.wf.? (Poly%lib!os_mem.MemChunk. mem!@4))) (and (=> %%location_label%%16 (ext_eq false (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@4))))) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0))))))) (and (=> %%location_label%%17 (=> commit! (lib!os_mem.impl&%0.has_new_pointsto.? (Poly%lib!os_mem.MemChunk. mem!@4) (Poly%lib!os_mem.MemChunk. mem!@0)))) (and (=> %%location_label%%18 (=> commit! (=> (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))) (lib!os_mem.impl&%0.os_has_range_read_write.? (Poly%lib!os_mem.MemChunk. mem!@4) (I (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ (UINT 8) (Poly%ptr_mut%<u8.>. addr!))) (I size!))))) (and (=> %%location_label%%19 (=> (not commit!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@4)))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0))))))))) (and (=> %%location_label%%20 (=> (not commit!) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@4))) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@0)))))) (and (=> %%location_label%%21 (=> (not commit!) (ext_eq false (TYPE%vstd!set.Set. $ INT) (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0)))))) (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@4))))))) (vstd!set.impl&%0.difference.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@0))) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly%lib!os_mem.MemChunk. mem!@4))))))) (=> %%location_label%%22 (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@4))))) (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. mem!@0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
