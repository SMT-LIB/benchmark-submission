(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-option :smt.arith.solver 6)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module spec::cyclicbuffer'")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/cyclicbuffer.rs:878:1: 878:83 (#0)")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%lib!spec.utils.map_contains_value. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.stored_type_inv. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Starting_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.is_Range. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_end. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_cur. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.is_Guard. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_end. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_val. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_val. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_end. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingTail. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_observed_head. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_tail. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%4.no_overlap_with. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.min. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.map_min_value. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.log_entry_idx. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.log_entry_is_alive. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.log_entry_alive_value. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.add_buffersize. FuelId)
(declare-const fuel%lib!constants.LOG_SIZE. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!set.impl&%0.choose. fuel%lib!spec.utils.map_contains_value. fuel%lib!spec.cyclicbuffer.stored_type_inv. fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting. fuel%lib!spec.cyclicbuffer.impl&%0.get_Starting_start. fuel%lib!spec.cyclicbuffer.impl&%0.is_Range. fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_start. fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_end. fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_cur. fuel%lib!spec.cyclicbuffer.impl&%0.is_Guard. fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_start. fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_end. fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur. fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_val. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_val. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_start. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_end. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur. fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val. fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle. fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading. fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0. fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead. fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx. fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version. fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingTail. fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head. fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending. fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx. fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_observed_head. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_tail. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_idx. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_0. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx. fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail. fuel%lib!spec.cyclicbuffer.impl&%4.no_overlap_with. fuel%lib!spec.cyclicbuffer.min. fuel%lib!spec.cyclicbuffer.map_min_value. fuel%lib!spec.cyclicbuffer.log_entry_idx. fuel%lib!spec.cyclicbuffer.log_entry_is_alive. fuel%lib!spec.cyclicbuffer.log_entry_alive_value. fuel%lib!spec.cyclicbuffer.add_buffersize. fuel%lib!constants.LOG_SIZE.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!cell.CellId. 0)
(declare-sort vstd!map.Map<nat./bool.>. 0)
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!cell.PointsToData. 0) (lib!spec.unbounded_log.UnboundedLog.log_token_data. 0) (lib!spec.types.LogEntry. 0) (lib!spec.types.ConcreteLogEntry. 0) (lib!spec.cyclicbuffer.StoredType. 0) (lib!spec.cyclicbuffer.ReaderState. 0) (lib!spec.cyclicbuffer.CombinerState. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!cell.PointsToData./PointsToData (vstd!cell.PointsToData./PointsToData/?pcell vstd!cell.CellId.) (vstd!cell.PointsToData./PointsToData/?value core!option.Option.))) ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?value lib!spec.types.LogEntry.))) ((lib!spec.types.LogEntry./LogEntry (lib!spec.types.LogEntry./LogEntry/?op Poly) (lib!spec.types.LogEntry./LogEntry/?node_id Int))) ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op Poly) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id Int))) ((lib!spec.cyclicbuffer.StoredType./StoredType (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms Poly) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry core!option.Option.))) ((lib!spec.cyclicbuffer.ReaderState./Starting (lib!spec.cyclicbuffer.ReaderState./Starting/?start Int)) (lib!spec.cyclicbuffer.ReaderState./Range (lib!spec.cyclicbuffer.ReaderState./Range/?start Int) (lib!spec.cyclicbuffer.ReaderState./Range/?end Int) (lib!spec.cyclicbuffer.ReaderState./Range/?cur Int)) (lib!spec.cyclicbuffer.ReaderState./Guard (lib!spec.cyclicbuffer.ReaderState./Guard/?start Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?end Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?val lib!spec.cyclicbuffer.StoredType.))) ((lib!spec.cyclicbuffer.CombinerState./Idle ) (lib!spec.cyclicbuffer.CombinerState./Reading (lib!spec.cyclicbuffer.CombinerState./Reading/?0 lib!spec.cyclicbuffer.ReaderState.)) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx Int) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version Int)) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head Int)) (lib!spec.cyclicbuffer.CombinerState./Appending (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx Int) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail Int))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!cell.PointsToData./PointsToData/pcell (vstd!cell.PointsToData.) vstd!cell.CellId.)
(declare-fun vstd!cell.PointsToData./PointsToData/value (vstd!cell.PointsToData.) core!option.Option.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (lib!spec.unbounded_log.UnboundedLog.log_token_data.) lib!spec.types.LogEntry.)
(declare-fun lib!spec.types.LogEntry./LogEntry/op (lib!spec.types.LogEntry.) Poly)
(declare-fun lib!spec.types.LogEntry./LogEntry/node_id (lib!spec.types.LogEntry.) Int)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (lib!spec.types.ConcreteLogEntry.) Int)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (lib!spec.cyclicbuffer.StoredType.) core!option.Option.)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Starting/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/val (lib!spec.cyclicbuffer.ReaderState.) lib!spec.cyclicbuffer.StoredType.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Reading/0 (lib!spec.cyclicbuffer.CombinerState.) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/tail (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!cell.CellId. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.LogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.ConcreteLogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.StoredType. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.ReaderState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CombinerState. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!cell.CellId. (vstd!cell.CellId.) Poly)
(declare-fun %Poly%vstd!cell.CellId. (Poly) vstd!cell.CellId.)
(declare-fun Poly%vstd!map.Map<nat./bool.>. (vstd!map.Map<nat./bool.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./bool.>. (Poly) vstd!map.Map<nat./bool.>.)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData.) Poly)
(declare-fun %Poly%vstd!cell.PointsToData. (Poly) vstd!cell.PointsToData.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.log_token_data.)
(declare-fun Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.LogEntry. (Poly) lib!spec.types.LogEntry.)
(declare-fun Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.ConcreteLogEntry. (Poly) lib!spec.types.ConcreteLogEntry.)
(declare-fun Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.StoredType. (Poly) lib!spec.cyclicbuffer.StoredType.)
(declare-fun Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.ReaderState. (Poly) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CombinerState. (Poly) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x vstd!cell.CellId.)) (! (= x (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. x))) :pattern ((Poly%vstd!cell.CellId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!cell.CellId.) (= x (Poly%vstd!cell.CellId. (%Poly%vstd!cell.CellId. x)))) :pattern ((has_type x TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.) :pattern ((has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (= x (%Poly%vstd!map.Map<nat./bool.>. (Poly%vstd!map.Map<nat./bool.>. x))) :pattern ((Poly%vstd!map.Map<nat./bool.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL)) (= x (Poly%vstd!map.Map<nat./bool.>. (%Poly%vstd!map.Map<nat./bool.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL)) :pattern ((has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= x (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. x))) :pattern ((Poly%vstd!cell.PointsToData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (= x (Poly%vstd!cell.PointsToData. (%Poly%vstd!cell.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_pcell! vstd!cell.CellId.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/pcell x) (vstd!cell.PointsToData./PointsToData/?pcell x)) :pattern ((vstd!cell.PointsToData./PointsToData/pcell x)))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/value x) (vstd!cell.PointsToData./PointsToData/?value x)) :pattern ((vstd!cell.PointsToData./PointsToData/value x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (has_type (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x)) (has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(define-fun is-vstd!cell.PointsToData./PointsToData_ ((c vstd!cell.PointsToData.)) Bool ((_ is vstd!cell.PointsToData./PointsToData) c))
(assert (forall ((x vstd!cell.PointsToData.)) (! (=> (is-vstd!cell.PointsToData./PointsToData_ x) (height_lt (height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x))) (height (Poly%vstd!cell.PointsToData. x)))) :pattern ((height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.types.LogEntry.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.types.LogEntry. _value!) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.log_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ x) (height_lt (height (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((height (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x)))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= x (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. x))) :pattern ((Poly%lib!spec.types.LogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.LogEntry. (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _node_id!)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/op x) (lib!spec.types.LogEntry./LogEntry/?op x)) :pattern ((lib!spec.types.LogEntry./LogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (has_type (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/node_id x) (lib!spec.types.LogEntry./LogEntry/?node_id x)) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (<= 0 (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= x (%Poly%lib!spec.types.ConcreteLogEntry. (Poly%lib!spec.types.ConcreteLogEntry. x))) :pattern ((Poly%lib!spec.types.ConcreteLogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.ConcreteLogEntry. (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (uInv 64 _node_id!)) (has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (has_type (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (uInv 64 (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= x (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. x))) :pattern ((Poly%lib!spec.cyclicbuffer.StoredType. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.StoredType. (%Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cell_perms! Poly) (_log_entry! core!option.Option.)) (! (=> (and (has_type _cell_perms! (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)))) (has_type (Poly%core!option.Option. _log_entry!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x) (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.StoredType./StoredType_ ((c lib!spec.cyclicbuffer.StoredType.)) Bool ((_ is lib!spec.cyclicbuffer.StoredType./StoredType) c))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x))) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.ReaderState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.ReaderState. (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int)) (! (=> (<= 0 _start!) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Starting/start x) (lib!spec.cyclicbuffer.ReaderState./Starting/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/start x) (lib!spec.cyclicbuffer.ReaderState./Range/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/end x) (lib!spec.cyclicbuffer.ReaderState./Range/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/cur x) (lib!spec.cyclicbuffer.ReaderState./Range/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int) (_val! lib!spec.cyclicbuffer.StoredType.)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. _val!) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/start x) (lib!spec.cyclicbuffer.ReaderState./Guard/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/end x) (lib!spec.cyclicbuffer.ReaderState./Guard/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/cur x) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/val x) (lib!spec.cyclicbuffer.ReaderState./Guard/?val x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x))) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Guard_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Guard) c))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (=> (is-lib!spec.cyclicbuffer.ReaderState./Guard_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x))) (height (Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CombinerState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CombinerState. (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.cyclicbuffer.ReaderState.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. _0!) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Reading/0 x) (lib!spec.cyclicbuffer.CombinerState./Reading/?0 x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x))) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_idx! Int) (_min_local_version! Int)) (! (=> (and (<= 0 _idx!) (<= 0 _min_local_version!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_observed_head! Int)) (! (=> (<= 0 _observed_head!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cur_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _cur_idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x) (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/tail x) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Reading_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Reading) c))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (=> (is-lib!spec.cyclicbuffer.CombinerState./Reading_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x))) (height (Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::cell::impl&%2::view")
(declare-fun vstd!cell.impl&%2.view.? (Dcr Type Poly) vstd!cell.PointsToData.)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::log::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.log_token_data.)
(set-info :comment ";; Function-Decl lib::spec::utils::map_contains_value")
(declare-fun lib!spec.utils.map_contains_value.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::stored_type_inv")
(declare-fun lib!spec.cyclicbuffer.stored_type_inv.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::is_Starting")
(declare-fun lib!spec.cyclicbuffer.impl&%0.is_Starting.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Starting_start")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Starting_start.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::is_Range")
(declare-fun lib!spec.cyclicbuffer.impl&%0.is_Range.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Range_start")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Range_start.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Range_end")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Range_end.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Range_cur")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::is_Guard")
(declare-fun lib!spec.cyclicbuffer.impl&%0.is_Guard.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Guard_start")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Guard_start.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Guard_end")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Guard_cur")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::get_Guard_val")
(declare-fun lib!spec.cyclicbuffer.impl&%0.get_Guard_val.? (Dcr Type Poly) lib!spec.cyclicbuffer.StoredType.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_val")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_val.? (Dcr Type Poly) lib!spec.cyclicbuffer.StoredType.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_Starting_start")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_Range_start")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_Range_start.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_Range_end")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_Range_end.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_Range_cur")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_Guard_start")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_Guard_end")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_Guard_cur")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::ReaderState::arrow_Guard_val")
(declare-fun lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val.? (Dcr Type Poly) lib!spec.cyclicbuffer.StoredType.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Idle")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Idle.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Reading")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Reading.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Reading_0")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.ReaderState.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_AdvancingHead")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_AdvancingHead_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_AdvancingHead_min_local_version")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_AdvancingTail")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_AdvancingTail.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_AdvancingTail_observed_head")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::is_Appending")
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Appending.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Appending_cur_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::get_Appending_tail")
(declare-fun lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_observed_head")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_observed_head.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_tail")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_tail.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_cur_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_min_local_version")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_0")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.ReaderState.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_Reading_0")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0.? (Dcr Type Poly) lib!spec.cyclicbuffer.ReaderState.)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_AdvancingHead_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_AdvancingHead_min_local_version")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_AdvancingTail_observed_head")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_Appending_cur_idx")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::arrow_Appending_tail")
(declare-fun lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::CombinerState::no_overlap_with")
(declare-fun lib!spec.cyclicbuffer.impl&%4.no_overlap_with.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::min")
(declare-fun lib!spec.cyclicbuffer.min.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::map_min_value")
(declare-fun lib!spec.cyclicbuffer.map_min_value.? (Poly Poly) Int)
(declare-fun lib!spec.cyclicbuffer.rec%map_min_value.? (Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::log_entry_idx")
(declare-fun lib!spec.cyclicbuffer.log_entry_idx.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::log_entry_is_alive")
(declare-fun lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::log_entry_alive_value")
(declare-fun lib!spec.cyclicbuffer.log_entry_alive_value.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::cyclicbuffer::add_buffersize")
(declare-fun lib!spec.cyclicbuffer.add_buffersize.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::constants::LOG_SIZE")
(declare-fun lib!constants.LOG_SIZE.? () Int)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%0 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::cell::impl&%2::view")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!cell.PointsTo. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& self!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((vstd!cell.impl&%2.view.? V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%2 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%6 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%8 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%9 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%11 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%13 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%14 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%15 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%16 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%17 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%18 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%19 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%20 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%21 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%22 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%23 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%24 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%25 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms lib::constants::LOG_SIZE")
(assert (fuel_bool_default fuel%lib!constants.LOG_SIZE.))
(assert (=> (fuel_bool fuel%lib!constants.LOG_SIZE.) (= lib!constants.LOG_SIZE.? (uClip SZ (Mul 512 1024)))))
(assert (uInv SZ lib!constants.LOG_SIZE.?))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_idx")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_idx. (Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (= (req%lib!spec.cyclicbuffer.log_entry_idx. logical! buffer_size!) (=> %%global_location_label%%26 (= (%I buffer_size!) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_idx. logical! buffer_size!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::log_entry_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.log_entry_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.log_entry_idx.) (forall ((logical! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!) (nClip (EucMod (%I logical!) (%I buffer_size!)))) :pattern ((lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!))))))
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (=> (and (has_type logical! INT) (has_type buffer_size! NAT)) (<= 0 (lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!))) :pattern ((lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_alive_value")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_alive_value. (Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((logical! Poly) (buffer_size! Poly)) (! (= (req%lib!spec.cyclicbuffer.log_entry_alive_value. logical! buffer_size!) (=> %%global_location_label%%27 (= (%I buffer_size!) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_alive_value. logical! buffer_size!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::log_entry_alive_value")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.log_entry_alive_value.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.log_entry_alive_value.) (forall ((logical! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.log_entry_alive_value.? logical! buffer_size!) (= (EucMod (EucDiv (%I logical!) (%I buffer_size!)) 2) 0)) :pattern ((lib!spec.cyclicbuffer.log_entry_alive_value.? logical! buffer_size!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::is_Starting")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting.))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Starting_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Starting) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.is_Starting.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.is_Starting.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.ReaderState./Starting_ (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.is_Starting.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::is_Range")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.is_Range.))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Range_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Range) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.is_Range.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.is_Range.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.ReaderState./Range_ (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.is_Range.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::min")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.min.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.min.) (forall ((x! Poly) (y! Poly)) (! (= (lib!spec.cyclicbuffer.min.? x! y!) (%I (ite (< (%I x!) (%I y!)) x! y!))) :pattern ((lib!spec.cyclicbuffer.min.? x! y!))))))
(assert (forall ((x! Poly) (y! Poly)) (! (=> (and (has_type x! NAT) (has_type y! NAT)) (<= 0 (lib!spec.cyclicbuffer.min.? x! y!))) :pattern ((lib!spec.cyclicbuffer.min.? x! y!)))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::log::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::stored_type_inv")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.stored_type_inv.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.stored_type_inv.) (forall ((DT&. Dcr) (DT& Type) (st! Poly) (idx! Poly) (cell_id! Poly) (unbounded_log_instance! Poly)) (! (= (lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& st! idx! cell_id! unbounded_log_instance!) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))) (%Poly%vstd!cell.CellId. cell_id!))) (=> (>= (%I idx!) 0) (and (and (and (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))) (%I idx!))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))) unbounded_log_instance!)) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))))))))))) (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))) (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!)))))))))))))) (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. st!))))))))))))))))) :pattern ((lib!spec.cyclicbuffer.stored_type_inv.? DT&. DT& st! idx! cell_id! unbounded_log_instance!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::no_overlap_with")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%4.no_overlap_with.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Appending_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Appending) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%4.no_overlap_with.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (other! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%4.no_overlap_with.? DT&. DT& self! other!) (=> (is-lib!spec.cyclicbuffer.CombinerState./Appending_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!)) (let ((cur_idx$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!)))) (let ((tail$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. self!)))) (ite (and (is-lib!spec.cyclicbuffer.CombinerState./Reading_ (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)))) (let ((start$ (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!))))))) (let ((end$ (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!))))))) (let ((cur$ (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!))))))) (let ((val$ (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. other!))))))) (or (> cur_idx$ cur$) (<= tail$ cur$)))))) (=> (is-lib!spec.cyclicbuffer.CombinerState./Appending_ (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)) (let ((cur_idx2$ (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)))) (let ((tail2$ (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. other!)))) (or (>= cur_idx$ tail2$) (<= tail$ cur_idx2$)))))))))) :pattern ((lib!spec.cyclicbuffer.impl&%4.no_overlap_with.? DT&. DT& self! other!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::map_min_value")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.map_min_value.))
(declare-const fuel_nat%lib!spec.cyclicbuffer.map_min_value. Fuel)
(assert (forall ((m! Poly) (idx! Poly) (fuel% Fuel)) (! (= (lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! fuel%) (lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! zero)) :pattern ((lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! fuel%)))))
(assert (forall ((m! Poly) (idx! Poly) (fuel% Fuel)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. $ NAT $ NAT)) (has_type idx! NAT)) (= (lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! (succ fuel%)) (ite (= (%I idx!) 0) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT m! (I 0))) (lib!spec.cyclicbuffer.min.? (I (lib!spec.cyclicbuffer.rec%map_min_value.? m! (I (nClip (Sub (%I idx!) 1))) fuel%)) (vstd!map.impl&%0.index.? $ NAT $ NAT m! idx!))))) :pattern ((lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.map_min_value.) (forall ((m! Poly) (idx! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. $ NAT $ NAT)) (has_type idx! NAT)) (= (lib!spec.cyclicbuffer.map_min_value.? m! idx!) (lib!spec.cyclicbuffer.rec%map_min_value.? m! idx! (succ fuel_nat%lib!spec.cyclicbuffer.map_min_value.)))) :pattern ((lib!spec.cyclicbuffer.map_min_value.? m! idx!))))))
(assert (forall ((m! Poly) (idx! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. $ NAT $ NAT)) (has_type idx! NAT)) (<= 0 (lib!spec.cyclicbuffer.map_min_value.? m! idx!))) :pattern ((lib!spec.cyclicbuffer.map_min_value.? m! idx!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_is_alive")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_is_alive. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((alive_bits! Poly) (logical! Poly) (buffer_size! Poly)) (! (= (req%lib!spec.cyclicbuffer.log_entry_is_alive. alive_bits! logical! buffer_size!) (=> %%global_location_label%%28 (= (%I buffer_size!) lib!constants.LOG_SIZE.?))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_is_alive. alive_bits! logical! buffer_size!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::log_entry_is_alive")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.log_entry_is_alive.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.log_entry_is_alive.) (forall ((alive_bits! Poly) (logical! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.log_entry_is_alive.? alive_bits! logical! buffer_size!) (let ((phys_id$ (lib!spec.cyclicbuffer.log_entry_idx.? logical! buffer_size!))) (= (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL alive_bits! (I phys_id$))) (lib!spec.cyclicbuffer.log_entry_alive_value.? logical! buffer_size!)))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? alive_bits! logical! buffer_size!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Reading")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Reading.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Reading.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Reading_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Reading.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Reading_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Reading_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Reading_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Idle")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Idle_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Idle.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Idle.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::utils::map_contains_value")
(assert (fuel_bool_default fuel%lib!spec.utils.map_contains_value.))
(assert (=> (fuel_bool fuel%lib!spec.utils.map_contains_value.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly) (val! Poly)) (! (= (lib!spec.utils.map_contains_value.? K&. K& V&. V& map! val!) (exists ((i$ Poly)) (! (and (has_type i$ K&) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& map!) i$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& map! i$) val!))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& map!) i$))))) :pattern ((lib!spec.utils.map_contains_value.? K&. K& V&. V& map! val!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Starting_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Starting_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Starting_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Starting_start.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Starting_start.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Starting_start.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Starting_start.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Range_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Range_start.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_start.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Range_start.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_start.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Range_end")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_end.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_end.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Range_end.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_end.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Range_end.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_end.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Range_cur")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_cur.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Range_cur.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Range_cur.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::is_Guard")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.is_Guard.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.is_Guard.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.is_Guard.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.ReaderState./Guard_ (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.is_Guard.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Guard_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Guard_start.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_start.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Guard_start.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_start.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Guard_end")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_end.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_end.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_end.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Guard_cur")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_cur.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::get_Guard_val")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_val.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%0.get_Guard_val.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%0.get_Guard_val.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_val.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.impl&%0.get_Guard_val.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.impl&%0.get_Guard_val.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_val")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_val.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_val.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_val.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_val.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.impl&%1.arrow_val.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_val.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_Starting_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Starting_start.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_Range_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_Range_start.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Range_start.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%1.arrow_Range_start.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Range_start.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_Range_end")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_end.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_end.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_Range_end.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Range_end.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%1.arrow_Range_end.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Range_end.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_Range_cur")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Range_cur.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_Guard_start")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Guard_start.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_Guard_end")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Guard_end.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_Guard_cur")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Guard_cur.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::ReaderState::arrow_Guard_val")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val.? DT&. DT& self!) (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.impl&%1.arrow_Guard_val.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_AdvancingHead")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./AdvancingHead) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingHead_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_AdvancingHead.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_AdvancingHead_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_AdvancingHead_min_local_version")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingHead_min_local_version.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_AdvancingTail")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingTail.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./AdvancingTail) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_AdvancingTail.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_AdvancingTail.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./AdvancingTail_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_AdvancingTail.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_AdvancingTail_observed_head")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_AdvancingTail_observed_head.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::is_Appending")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Appending.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Appending.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Appending_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Appending.? DT&. DT& self!))))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Appending_cur_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_cur_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::get_Appending_tail")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.get_Appending_tail.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_observed_head")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_observed_head.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_observed_head.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_observed_head.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_observed_head.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_observed_head.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_observed_head.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_tail")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_tail.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_tail.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_tail.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_tail.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_tail.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_tail.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_cur_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_cur_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_min_local_version")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_min_local_version.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.impl&%3.arrow_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_Reading_0")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_Reading_0.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_AdvancingHead_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_AdvancingHead_min_local_version")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingHead_min_local_version.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_AdvancingTail_observed_head")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_AdvancingTail_observed_head.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_Appending_cur_idx")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_Appending_cur_idx.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::CombinerState::arrow_Appending_tail")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail.? DT&. DT& self!) (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.impl&%3.arrow_Appending_tail.? DT&. DT& self!)))))
(set-info :comment ";; Function-Axioms lib::spec::cyclicbuffer::add_buffersize")
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.add_buffersize.))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.add_buffersize.) (forall ((i! Poly) (buffer_size! Poly)) (! (= (lib!spec.cyclicbuffer.add_buffersize.? i! buffer_size!) (Add (%I i!) (%I buffer_size!))) :pattern ((lib!spec.cyclicbuffer.add_buffersize.? i! buffer_size!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::map_min_value_smallest")
(declare-fun req%lib!spec.cyclicbuffer.map_min_value_smallest. (vstd!map.Map<nat./nat.>. Int) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((m! vstd!map.Map<nat./nat.>.) (idx! Int)) (! (= (req%lib!spec.cyclicbuffer.map_min_value_smallest. m! idx!) (=> %%global_location_label%%29 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (<= (%I i$) idx!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!)) i$)))))) :pattern ((req%lib!spec.cyclicbuffer.map_min_value_smallest. m! idx!)))))
(declare-fun ens%lib!spec.cyclicbuffer.map_min_value_smallest. (vstd!map.Map<nat./nat.>. Int) Bool)
(assert (forall ((m! vstd!map.Map<nat./nat.>.) (idx! Int)) (! (= (ens%lib!spec.cyclicbuffer.map_min_value_smallest. m! idx!) (and (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (and (<= 0 (%I n$)) (<= (%I n$) idx!)) (<= (lib!spec.cyclicbuffer.map_min_value.? (Poly%vstd!map.Map<nat./nat.>. m!) (I idx!)) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) n$))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) n$)))) (lib!spec.utils.map_contains_value.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. m!) (I (lib!spec.cyclicbuffer.map_min_value.? (Poly%vstd!map.Map<nat./nat.>. m!) (I idx!)))))) :pattern ((ens%lib!spec.cyclicbuffer.map_min_value_smallest. m! idx!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_alive_wrap_around")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_alive_wrap_around. (vstd!map.Map<nat./bool.>. Int Int Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((alive_bits! vstd!map.Map<nat./bool.>.) (buffer_size! Int) (low! Int) (high! Int)) (! (= (req%lib!spec.cyclicbuffer.log_entry_alive_wrap_around. alive_bits! buffer_size! low! high!) (and (=> %%global_location_label%%30 (= buffer_size! lib!constants.LOG_SIZE.?)) (=> %%global_location_label%%31 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (< (%I i$) buffer_size!) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. alive_bits!)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. alive_bits!)) i$))))) (=> %%global_location_label%%32 (and (<= low! high!) (<= high! (nClip (Add low! buffer_size!))))))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_alive_wrap_around. alive_bits! buffer_size! low! high!)))))
(declare-fun ens%lib!spec.cyclicbuffer.log_entry_alive_wrap_around. (vstd!map.Map<nat./bool.>. Int Int Int) Bool)
(assert (forall ((alive_bits! vstd!map.Map<nat./bool.>.) (buffer_size! Int) (low! Int) (high! Int)) (! (= (ens%lib!spec.cyclicbuffer.log_entry_alive_wrap_around. alive_bits! buffer_size! low! high!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= low! (%I i$)) (< (%I i$) high!)) (= (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. alive_bits!) i$ (I buffer_size!)) (not (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. alive_bits!) (I (lib!spec.cyclicbuffer.add_buffersize.? i$ (I buffer_size!))) (I buffer_size!)))))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. alive_bits!) (I (lib!spec.cyclicbuffer.add_buffersize.? i$ (I buffer_size!))) (I buffer_size!)))))) :pattern ((ens%lib!spec.cyclicbuffer.log_entry_alive_wrap_around. alive_bits! buffer_size! low! high!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_alive_wrap_around_helper")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_alive_wrap_around_helper. (vstd!map.Map<nat./bool.>. Int Int Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((alive_bits! vstd!map.Map<nat./bool.>.) (buffer_size! Int) (low! Int) (high! Int)) (! (= (req%lib!spec.cyclicbuffer.log_entry_alive_wrap_around_helper. alive_bits! buffer_size! low! high!) (and (=> %%global_location_label%%33 (= buffer_size! lib!constants.LOG_SIZE.?)) (=> %%global_location_label%%34 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (< (%I i$) buffer_size!) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. alive_bits!)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (Poly%vstd!map.Map<nat./bool.>. alive_bits!)) i$))))) (=> %%global_location_label%%35 (and (<= low! high!) (<= high! (nClip (Add low! buffer_size!))))) (=> %%global_location_label%%36 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= low! (%I i$)) (< (%I i$) high!)) (not (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. alive_bits!) (I (lib!spec.cyclicbuffer.add_buffersize.? i$ (I buffer_size!))) (I buffer_size!))))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. alive_bits!) (I (lib!spec.cyclicbuffer.add_buffersize.? i$ (I buffer_size!))) (I buffer_size!)))))))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_alive_wrap_around_helper. alive_bits! buffer_size! low! high!)))))
(declare-fun ens%lib!spec.cyclicbuffer.log_entry_alive_wrap_around_helper. (vstd!map.Map<nat./bool.>. Int Int Int) Bool)
(assert (forall ((alive_bits! vstd!map.Map<nat./bool.>.) (buffer_size! Int) (low! Int) (high! Int)) (! (= (ens%lib!spec.cyclicbuffer.log_entry_alive_wrap_around_helper. alive_bits! buffer_size! low! high!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (nClip (Add low! buffer_size!)) (%I i$)) (< (%I i$) (nClip (Add high! buffer_size!)))) (not (lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. alive_bits!) i$ (I buffer_size!))))) :pattern ((lib!spec.cyclicbuffer.log_entry_is_alive.? (Poly%vstd!map.Map<nat./bool.>. alive_bits!) i$ (I buffer_size!)))))) :pattern ((ens%lib!spec.cyclicbuffer.log_entry_alive_wrap_around_helper. alive_bits! buffer_size! low! high!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_idx_wrap_around")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_idx_wrap_around. (Int Int Int) Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((start! Int) (buffer_size! Int) (idx! Int)) (! (= (req%lib!spec.cyclicbuffer.log_entry_idx_wrap_around. start! buffer_size! idx!) (and (=> %%global_location_label%%37 (= buffer_size! lib!constants.LOG_SIZE.?)) (=> %%global_location_label%%38 (and (<= start! idx!) (< idx! (nClip (Add start! buffer_size!))))))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_idx_wrap_around. start! buffer_size! idx!)))))
(declare-fun ens%lib!spec.cyclicbuffer.log_entry_idx_wrap_around. (Int Int Int) Bool)
(assert (forall ((start! Int) (buffer_size! Int) (idx! Int)) (! (= (ens%lib!spec.cyclicbuffer.log_entry_idx_wrap_around. start! buffer_size! idx!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= start! (%I i$)) (< (%I i$) (nClip (Add start! buffer_size!)))) (not (= (%I i$) idx!))) (not (= (lib!spec.cyclicbuffer.log_entry_idx.? i$ (I buffer_size!)) (lib!spec.cyclicbuffer.log_entry_idx.? (I idx!) (I buffer_size!)))))) :pattern ((lib!spec.cyclicbuffer.log_entry_idx.? i$ (I buffer_size!)))))) :pattern ((ens%lib!spec.cyclicbuffer.log_entry_idx_wrap_around. start! buffer_size! idx!)))))
(set-info :comment ";; Function-Specs lib::spec::cyclicbuffer::log_entry_alive_value_wrap_around")
(declare-fun req%lib!spec.cyclicbuffer.log_entry_alive_value_wrap_around. (Int Int) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((i! Int) (buffer_size! Int)) (! (= (req%lib!spec.cyclicbuffer.log_entry_alive_value_wrap_around. i! buffer_size!) (=> %%global_location_label%%39 (> buffer_size! 0))) :pattern ((req%lib!spec.cyclicbuffer.log_entry_alive_value_wrap_around. i! buffer_size!)))))
(declare-fun ens%lib!spec.cyclicbuffer.log_entry_alive_value_wrap_around. (Int Int) Bool)
(assert (forall ((i! Int) (buffer_size! Int)) (! (= (ens%lib!spec.cyclicbuffer.log_entry_alive_value_wrap_around. i! buffer_size!) (not (= (lib!spec.cyclicbuffer.log_entry_alive_value.? (I i!) (I buffer_size!)) (lib!spec.cyclicbuffer.log_entry_alive_value.? (I (Add i! buffer_size!)) (I buffer_size!))))) :pattern ((ens%lib!spec.cyclicbuffer.log_entry_alive_value_wrap_around. i! buffer_size!)))))
(set-info :comment ";; Function-Def lib::spec::cyclicbuffer::log_entry_alive_value_wrap_around")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/cyclicbuffer.rs:878:1: 878:83 (#0)")
(declare-const i! Int)
(declare-const buffer_size! Int)
(declare-const tmp%1 Bool)
(assert fuel_defaults)
(assert (<= 0 buffer_size!))
(assert (> buffer_size! 0))
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%1 Bool)
(assert (not (=> (= tmp%1 (= (EucDiv (Add i! buffer_size!) buffer_size!) (Add (EucDiv i! buffer_size!) 1))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (=> %%location_label%%1 (not (= (lib!spec.cyclicbuffer.log_entry_alive_value.? (I i!) (I buffer_size!)) (lib!spec.cyclicbuffer.log_entry_alive_value.? (I (Add i! buffer_size!)) (I buffer_size!))))))))))
(check-sat)
(exit)
