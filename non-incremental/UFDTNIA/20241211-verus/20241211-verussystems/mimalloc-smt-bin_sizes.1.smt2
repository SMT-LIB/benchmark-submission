(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.bits.u64_leading_zeros. FuelId)
(declare-const fuel%vstd!std_specs.bits.axiom_u64_leading_zeros. FuelId)
(declare-const fuel%lib!config.INTPTR_SHIFT. FuelId)
(declare-const fuel%lib!config.INTPTR_SIZE. FuelId)
(declare-const fuel%lib!config.SLICE_SHIFT. FuelId)
(declare-const fuel%lib!config.SLICE_SIZE. FuelId)
(declare-const fuel%lib!config.SEGMENT_SHIFT. FuelId)
(declare-const fuel%lib!config.SEGMENT_SIZE. FuelId)
(declare-const fuel%lib!config.SLICES_PER_SEGMENT. FuelId)
(declare-const fuel%lib!config.BIN_HUGE. FuelId)
(declare-const fuel%lib!config.MAX_ALLOC_SIZE. FuelId)
(declare-const fuel%lib!config.SMALL_WSIZE_MAX. FuelId)
(declare-const fuel%lib!config.PAGES_DIRECT. FuelId)
(declare-const fuel%lib!config.SMALL_SIZE_MAX. FuelId)
(declare-const fuel%lib!config.SEGMENT_BIN_MAX. FuelId)
(declare-const fuel%lib!bin_sizes.valid_bin_idx. FuelId)
(declare-const fuel%lib!bin_sizes.size_of_bin. FuelId)
(declare-const fuel%lib!bin_sizes.smallest_bin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.pfd_lower. FuelId)
(declare-const fuel%lib!bin_sizes.pfd_upper. FuelId)
(declare-const fuel%lib!bin_sizes.property_idx_out_of_range_has_different_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.check_idx_out_of_range_has_different_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.property_idx_in_range_has_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.check_idx_in_range_has_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.check2_idx_in_range_has_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.pow2. FuelId)
(declare-const fuel%lib!bin_sizes.property_bounds_for_smallest_bitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.check_bounds_for_smallest_bitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin. FuelId)
(declare-const fuel%lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin. FuelId)
(declare-const fuel%lib!bin_sizes.property_bin. FuelId)
(declare-const fuel%lib!bin_sizes.check_bin. FuelId)
(declare-const fuel%lib!bin_sizes.id. FuelId)
(declare-const fuel%lib!bin_sizes.valid_sbin_idx. FuelId)
(declare-const fuel%lib!bin_sizes.size_of_sbin. FuelId)
(declare-const fuel%lib!bin_sizes.smallest_sbin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.property_sbin_bounds. FuelId)
(declare-const fuel%lib!bin_sizes.check_sbin_bounds. FuelId)
(declare-const fuel%lib!bin_sizes.property_sbin. FuelId)
(declare-const fuel%lib!bin_sizes.check_sbin. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.bits.u64_leading_zeros. fuel%vstd!std_specs.bits.axiom_u64_leading_zeros. fuel%lib!config.INTPTR_SHIFT. fuel%lib!config.INTPTR_SIZE. fuel%lib!config.SLICE_SHIFT. fuel%lib!config.SLICE_SIZE. fuel%lib!config.SEGMENT_SHIFT. fuel%lib!config.SEGMENT_SIZE. fuel%lib!config.SLICES_PER_SEGMENT. fuel%lib!config.BIN_HUGE. fuel%lib!config.MAX_ALLOC_SIZE. fuel%lib!config.SMALL_WSIZE_MAX. fuel%lib!config.PAGES_DIRECT. fuel%lib!config.SMALL_SIZE_MAX. fuel%lib!config.SEGMENT_BIN_MAX. fuel%lib!bin_sizes.valid_bin_idx. fuel%lib!bin_sizes.size_of_bin. fuel%lib!bin_sizes.smallest_bin_fitting_size. fuel%lib!bin_sizes.pfd_lower. fuel%lib!bin_sizes.pfd_upper. fuel%lib!bin_sizes.property_idx_out_of_range_has_different_bin_size. fuel%lib!bin_sizes.check_idx_out_of_range_has_different_bin_size. fuel%lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size. fuel%lib!bin_sizes.property_idx_in_range_has_bin_size. fuel%lib!bin_sizes.check_idx_in_range_has_bin_size. fuel%lib!bin_sizes.check2_idx_in_range_has_bin_size. fuel%lib!bin_sizes.pow2. fuel%lib!bin_sizes.property_bounds_for_smallest_bitting_size. fuel%lib!bin_sizes.check_bounds_for_smallest_bitting_size. fuel%lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin. fuel%lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin. fuel%lib!bin_sizes.property_bin. fuel%lib!bin_sizes.check_bin. fuel%lib!bin_sizes.id. fuel%lib!bin_sizes.valid_sbin_idx. fuel%lib!bin_sizes.size_of_sbin. fuel%lib!bin_sizes.smallest_sbin_fitting_size. fuel%lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size. fuel%lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size. fuel%lib!bin_sizes.property_sbin_bounds. fuel%lib!bin_sizes.check_sbin_bounds. fuel%lib!bin_sizes.property_sbin. fuel%lib!bin_sizes.check_sbin. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.axiom_u64_leading_zeros.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(declare-fun vstd!std_specs.bits.u64_leading_zeros.? (Poly) Int)
(declare-fun vstd!std_specs.bits.rec%u64_leading_zeros.? (Poly Fuel) Int)
(declare-fun lib!config.INTPTR_SHIFT.? () Int)
(declare-fun lib!config.SLICE_SHIFT.? () Int)
(declare-fun lib!config.SEGMENT_SHIFT.? () Int)
(declare-fun lib!config.SEGMENT_SIZE.? () Int)
(declare-fun lib!config.SLICE_SIZE.? () Int)
(declare-fun lib!config.SLICES_PER_SEGMENT.? () Int)
(declare-fun lib!config.INTPTR_SIZE.? () Int)
(declare-fun lib!config.SEGMENT_BIN_MAX.? () Int)
(declare-fun lib!bin_sizes.smallest_sbin_fitting_size.? (Poly) Int)
(declare-fun lib!bin_sizes.valid_sbin_idx.? (Poly) Bool)
(declare-fun lib!config.BIN_HUGE.? () Int)
(declare-fun lib!bin_sizes.valid_bin_idx.? (Poly) Bool)
(declare-fun lib!bin_sizes.pow2.? (Poly) Int)
(declare-fun lib!bin_sizes.rec%pow2.? (Poly Fuel) Int)
(declare-fun lib!bin_sizes.size_of_bin.? (Poly) Int)
(declare-fun lib!config.SMALL_WSIZE_MAX.? () Int)
(declare-fun lib!config.PAGES_DIRECT.? () Int)
(declare-fun lib!bin_sizes.smallest_bin_fitting_size.? (Poly) Int)
(declare-fun lib!config.MAX_ALLOC_SIZE.? () Int)
(declare-fun lib!config.SMALL_SIZE_MAX.? () Int)
(declare-fun lib!bin_sizes.pfd_lower.? (Poly) Int)
(declare-fun lib!bin_sizes.pfd_upper.? (Poly) Int)
(declare-fun lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.? (Poly Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? (Poly Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? (Poly Poly Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_idx_in_range_has_bin_size.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.check_idx_in_range_has_bin_size.? (Poly Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? (Poly Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.check2_idx_in_range_has_bin_size.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? (Poly Poly Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_bounds_for_smallest_bitting_size.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_bounds_for_smallest_bitting_size.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_bin.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_bin.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_bin.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.id.? (Poly) Bool)
(declare-fun lib!bin_sizes.size_of_sbin.? (Poly) Int)
(declare-fun lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_sbin_bounds.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_sbin_bounds.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_sbin_bounds.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_sbin.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_sbin.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_sbin.? (Poly Poly Fuel) Bool)
(declare-const fuel_nat%vstd!std_specs.bits.u64_leading_zeros. Fuel)
(assert (forall ((i! Poly) (fuel% Fuel)) (! (= (vstd!std_specs.bits.rec%u64_leading_zeros.? i! fuel%) (vstd!std_specs.bits.rec%u64_leading_zeros.? i! zero)) :pattern ((vstd!std_specs.bits.rec%u64_leading_zeros.? i! fuel%)))))
(assert (forall ((i! Poly) (fuel% Fuel)) (! (=> (has_type i! (UINT 64)) (= (vstd!std_specs.bits.rec%u64_leading_zeros.? i! (succ fuel%)) (ite (= (%I i!) 0) 64 (Sub (vstd!std_specs.bits.rec%u64_leading_zeros.? (I (uClip 64 (EucDiv (%I i!) 2))) fuel%) 1)))) :pattern ((vstd!std_specs.bits.rec%u64_leading_zeros.? i! (succ fuel%))))))
(assert (=> (fuel_bool fuel%vstd!std_specs.bits.u64_leading_zeros.) (forall ((i! Poly)) (! (=> (has_type i! (UINT 64)) (= (vstd!std_specs.bits.u64_leading_zeros.? i!) (vstd!std_specs.bits.rec%u64_leading_zeros.? i! (succ fuel_nat%vstd!std_specs.bits.u64_leading_zeros.)))) :pattern ((vstd!std_specs.bits.u64_leading_zeros.? i!))))))
(declare-fun ens%core!num.impl&%9.leading_zeros. (Int Int) Bool)
(assert (forall ((i! Int) (r! Int)) (! (= (ens%core!num.impl&%9.leading_zeros. i! r!) (and (uInv 32 r!) (= r! (vstd!std_specs.bits.u64_leading_zeros.? (I i!))))) :pattern ((ens%core!num.impl&%9.leading_zeros. i! r!)))))
(assert (=> (fuel_bool fuel%vstd!std_specs.bits.axiom_u64_leading_zeros.) (forall ((i! Poly)) (! (=> (has_type i! (UINT 64)) (and (and (and (and (let ((tmp%%$ (vstd!std_specs.bits.u64_leading_zeros.? i!))) (and (<= 0 tmp%%$) (<= tmp%%$ 64))) (= (= (%I i!) 0) (= (vstd!std_specs.bits.u64_leading_zeros.? i!) 64))) (=> (let ((tmp%%$ (vstd!std_specs.bits.u64_leading_zeros.? i!))) (and (<= 0 tmp%%$) (< tmp%%$ 64))) (not (= (uClip 64 (bitand (I (uClip 64 (bitshr (I (%I i!)) (I (uClip 64 (Sub 63 (uClip 64 (vstd!std_specs.bits.u64_leading_zeros.? i!)))))))) (I 1))) 0)))) (= (uClip 64 (bitshr (I (%I i!)) (I (uClip 64 (Sub 64 (uClip 64 (vstd!std_specs.bits.u64_leading_zeros.? i!))))))) 0)) (forall ((j$ Poly)) (! (=> (has_type j$ (UINT 64)) (=> (and (<= (Sub 64 (vstd!std_specs.bits.u64_leading_zeros.? i!)) (%I j$)) (< (%I j$) 64)) (= (uClip 64 (bitand (I (uClip 64 (bitshr (I (%I i!)) (I (%I j$))))) (I 1))) 0))) :pattern ((uClip 64 (bitshr (I (%I i!)) (I (%I j$))))))))) :pattern ((vstd!std_specs.bits.u64_leading_zeros.? i!))))))
(assert (fuel_bool_default fuel%lib!config.INTPTR_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SHIFT.) (= lib!config.INTPTR_SHIFT.? 3)))
(assert (uInv 64 lib!config.INTPTR_SHIFT.?))
(assert (fuel_bool_default fuel%lib!config.SLICE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SHIFT.) (= lib!config.SLICE_SHIFT.? (uClip 64 (Add 13 lib!config.INTPTR_SHIFT.?)))))
(assert (uInv 64 lib!config.SLICE_SHIFT.?))
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SHIFT.) (= lib!config.SEGMENT_SHIFT.? (uClip 64 (Add 9 lib!config.SLICE_SHIFT.?)))))
(assert (uInv 64 lib!config.SEGMENT_SHIFT.?))
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SIZE.) (= lib!config.SEGMENT_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.SEGMENT_SHIFT.?))))))
(assert (uInv 64 lib!config.SEGMENT_SIZE.?))
(assert (fuel_bool_default fuel%lib!config.SLICE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SIZE.) (= lib!config.SLICE_SIZE.? 65536)))
(assert (uInv 64 lib!config.SLICE_SIZE.?))
(assert (fuel_bool_default fuel%lib!config.SLICES_PER_SEGMENT.))
(assert (=> (fuel_bool fuel%lib!config.SLICES_PER_SEGMENT.) (= lib!config.SLICES_PER_SEGMENT.? (uClip 64 (EucDiv lib!config.SEGMENT_SIZE.? lib!config.SLICE_SIZE.?)))))
(assert (uInv 64 lib!config.SLICES_PER_SEGMENT.?))
(assert (fuel_bool_default fuel%lib!config.INTPTR_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SIZE.) (= lib!config.INTPTR_SIZE.? 8)))
(assert (uInv 64 lib!config.INTPTR_SIZE.?))
(assert (fuel_bool_default fuel%lib!config.SEGMENT_BIN_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_BIN_MAX.) (= lib!config.SEGMENT_BIN_MAX.? 31)))
(assert (uInv SZ lib!config.SEGMENT_BIN_MAX.?))
(assert (fuel_bool_default fuel%lib!bin_sizes.smallest_sbin_fitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.smallest_sbin_fitting_size.) (forall ((i! Poly)) (! (= (lib!bin_sizes.smallest_sbin_fitting_size.? i!) (ite (<= (%I i!) 8) (%I i!) (let ((w$ (uClip 64 (Sub (%I i!) 1)))) (let ((lz$ (vstd!std_specs.bits.u64_leading_zeros.? (I w$)))) (let ((b$ (uClip 8 (Sub (Sub SZ 1) lz$)))) (let ((sbin_idx$ (Sub (uClip 64 (bitor (I (uClip 64 (uClip 8 (bitshl (I b$) (I 2))))) (I (uClip 64 (bitand (I (uClip 64 (bitshr (I w$) (I (uClip 64 (Sub (uClip 64 b$) 2)))))) (I 3)))))) 4))) sbin_idx$)))))) :pattern ((lib!bin_sizes.smallest_sbin_fitting_size.? i!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.valid_sbin_idx.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.valid_sbin_idx.) (forall ((sbin_idx! Poly)) (! (= (lib!bin_sizes.valid_sbin_idx.? sbin_idx!) (and (<= 0 (%I sbin_idx!)) (<= (%I sbin_idx!) lib!config.SEGMENT_BIN_MAX.?))) :pattern ((lib!bin_sizes.valid_sbin_idx.? sbin_idx!))))))
(assert (fuel_bool_default fuel%lib!config.BIN_HUGE.))
(assert (=> (fuel_bool fuel%lib!config.BIN_HUGE.) (= lib!config.BIN_HUGE.? 73)))
(assert (uInv 64 lib!config.BIN_HUGE.?))
(assert (fuel_bool_default fuel%lib!bin_sizes.valid_bin_idx.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.valid_bin_idx.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.valid_bin_idx.? bin_idx!) (and (<= 1 (%I bin_idx!)) (<= (%I bin_idx!) lib!config.BIN_HUGE.?))) :pattern ((lib!bin_sizes.valid_bin_idx.? bin_idx!))))))
(declare-const i! Poly)
(declare-const tmp%1 Int)
(declare-const tmp%2 Poly)
(declare-const tmp%3 Int)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (has_type i! INT))
(declare-const %%switch_label%%0 Bool)
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= decrease%init0 (%I i!)) (or (and (=> (<= (%I i!) 0) (=> (= tmp%3 1) %%switch_label%%0)) (=> (not (<= (%I i!) 0)) (=> (= tmp%2 (I (Sub (%I i!) 1))) (and (=> %%location_label%%0 (check_decrease_int (let ((i!$0 (%I tmp%2))) i!$0) decrease%init0 false)) (=> (<= 0 tmp%1) (=> (= tmp%1 (lib!bin_sizes.pow2.? (I (Sub (%I i!) 1)))) (=> (= tmp%3 (nClip (Mul tmp%1 2))) %%switch_label%%0))))))) (not %%switch_label%%0)))))
(check-sat)
(exit)
