(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Err. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Err_0. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.constant. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%21.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%21.constant. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%8.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%38.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.wf2. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.thread_id_spec. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.replica_token. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.replica_id_spec. FuelId)
(declare-const fuel%lib!exec.context.impl&%3.wf. FuelId)
(declare-const fuel%lib!exec.log.impl&%1.wf. FuelId)
(declare-const fuel%lib!exec.log.impl&%6.wf. FuelId)
(declare-const fuel%lib!exec.log.impl&%10.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.id_spec. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.view. FuelId)
(declare-const fuel%lib!exec.replica.impl&%1.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%3.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%4.spec_id. FuelId)
(declare-const fuel%lib!exec.replica.impl&%5.wf. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_Ready. FuelId)
(declare-const fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%0.is_Idle. FuelId)
(declare-const fuel%lib!constants.MAX_REPLICAS. FuelId)
(declare-const fuel%lib!constants.LOG_SIZE. FuelId)
(declare-const fuel%lib!constants.MAX_THREADS_PER_REPLICA. FuelId)
(declare-const fuel%lib!exec.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.impl&%0.replica_id_spec. FuelId)
(declare-const fuel%lib!exec.impl&%1.wf. FuelId)
(declare-const fuel%lib!exec.impl&%1.replicas. FuelId)
(declare-const fuel%lib!exec.impl&%1.unbounded_log_instance. FuelId)
(declare-const fuel%lib!is_readonly_ticket. FuelId)
(declare-const fuel%lib!is_readonly_stub. FuelId)
(declare-const fuel%lib!is_update_ticket. FuelId)
(declare-const fuel%lib!is_update_stub. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.impl&%0.is_Err. fuel%vstd!std_specs.result.impl&%0.get_Err_0. fuel%vstd!std_specs.vec.impl&%2.spec_len. fuel%vstd!std_specs.vec.impl&%2.spec_index. fuel%vstd!atomic_ghost.impl&%1.well_formed. fuel%vstd!atomic_ghost.impl&%1.constant. fuel%vstd!atomic_ghost.impl&%21.well_formed. fuel%vstd!atomic_ghost.impl&%21.constant. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!seq_lib.impl&%0.remove. fuel%vstd!set.impl&%0.choose. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%8.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%38.view. fuel%vstd!view.impl&%40.view. fuel%vstd!view.impl&%42.view. fuel%lib!exec.context.impl&%0.wf2. fuel%lib!exec.context.impl&%0.wf. fuel%lib!exec.context.impl&%0.thread_id_spec. fuel%lib!exec.context.impl&%0.replica_token. fuel%lib!exec.context.impl&%0.replica_id_spec. fuel%lib!exec.context.impl&%3.wf. fuel%lib!exec.log.impl&%1.wf. fuel%lib!exec.log.impl&%6.wf. fuel%lib!exec.log.impl&%10.wf. fuel%lib!exec.replica.impl&%0.wf. fuel%lib!exec.replica.impl&%0.id_spec. fuel%lib!exec.replica.impl&%0.view. fuel%lib!exec.replica.impl&%1.wf. fuel%lib!exec.replica.impl&%3.wf. fuel%lib!exec.replica.impl&%4.spec_id. fuel%lib!exec.replica.impl&%5.wf. fuel%lib!spec.unbounded_log.impl&%0.is_Init. fuel%lib!spec.unbounded_log.impl&%0.get_Init_op. fuel%lib!spec.unbounded_log.impl&%0.is_Done. fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%3.is_Init. fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. fuel%lib!spec.unbounded_log.impl&%3.is_Done. fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%5.is_Ready. fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle. fuel%lib!spec.flat_combiner.impl&%0.is_Idle. fuel%lib!constants.MAX_REPLICAS. fuel%lib!constants.LOG_SIZE. fuel%lib!constants.MAX_THREADS_PER_REPLICA. fuel%lib!exec.impl&%0.wf. fuel%lib!exec.impl&%0.replica_id_spec. fuel%lib!exec.impl&%1.wf. fuel%lib!exec.impl&%1.replicas. fuel%lib!exec.impl&%1.unbounded_log_instance. fuel%lib!is_readonly_ticket. fuel%lib!is_readonly_stub. fuel%lib!is_update_ticket. fuel%lib!is_update_stub.))
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./ReadOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./ReadOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./View (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./View (Dcr Type) Type)
(declare-fun proj%%lib!NodeReplicatedT./Replica (Dcr Type Dcr Type) Dcr)
(declare-fun proj%lib!NodeReplicatedT./Replica (Dcr Type Dcr Type) Type)
(declare-fun proj%%lib!NodeReplicatedT./TT (Dcr Type Dcr Type) Dcr)
(declare-fun proj%lib!NodeReplicatedT./TT (Dcr Type Dcr Type) Type)
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<usize./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. 0)
(declare-sort lib!AffinityFn. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.Instance. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.clients. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.combiner. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.slots. 0)
(declare-sort vstd!atomic.PAtomicBool. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionBool. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!cell.CellId. 0)
(declare-sort vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. 0)
(declare-sort vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<vstd!cell.CellId.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!atomic_ghost.AtomicBool. 0) (vstd!cell.PointsToData. 0) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data. 0) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. 0) (lib!spec.flat_combiner.FlatCombiner.clients_token_data. 0) (lib!exec.context.ThreadToken. 0) (lib!exec.context.PendingOperation. 0) (lib!exec.context.Context. 0) (lib!exec.context.InvariantPredicate_auto_Context_atomic. 0) (lib!exec.context.ContextGhost. 0) (lib!exec.log.BufferEntry. 0) (lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. 0) (lib!exec.log.NrLog. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_head. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_tail. 0) (lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. 0) (lib!exec.log.NrLogTokens. 0) (lib!exec.replica.ReplicaToken. 0) (lib!exec.replica.ReplicatedDataStructure. 0) (lib!exec.replica.Replica. 0) (lib!exec.replica.InvariantPredicate_auto_Replica_combiner. 0) (lib!exec.replica.ReplicaConfig. 0) (lib!exec.replica.CombinerLockStateGhost. 0) (lib!spec.types.ConcreteLogEntry. 0) (lib!spec.unbounded_log.ReadonlyState. 0) (lib!spec.unbounded_log.UpdateState. 0) (lib!spec.unbounded_log.CombinerState. 0) (lib!spec.cyclicbuffer.StoredType. 0) (lib!spec.cyclicbuffer.ReaderState. 0) (lib!spec.cyclicbuffer.CombinerState. 0) (lib!spec.flat_combiner.ClientState. 0) (lib!exec.CachePadded. 0) (lib!exec.NodeReplicated. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!atomic_ghost.AtomicBool./AtomicBool (vstd!atomic_ghost.AtomicBool./AtomicBool/?patomic vstd!atomic.PAtomicBool.) (vstd!atomic_ghost.AtomicBool./AtomicBool/?atomic_inv Poly))) ((vstd!cell.PointsToData./PointsToData (vstd!cell.PointsToData./PointsToData/?pcell vstd!cell.CellId.) (vstd!cell.PointsToData./PointsToData/?value core!option.Option.))) ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?value Poly))) ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?value lib!spec.unbounded_log.ReadonlyState.))) ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value lib!spec.unbounded_log.UpdateState.))) ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?value lib!spec.unbounded_log.CombinerState.))) ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?instance Poly) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?key Int) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?value lib!spec.cyclicbuffer.CombinerState.))) ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?key Int) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?value lib!spec.flat_combiner.ClientState.))) ((lib!exec.context.ThreadToken./ThreadToken (lib!exec.context.ThreadToken./ThreadToken/?rid lib!exec.replica.ReplicaToken.) (lib!exec.context.ThreadToken./ThreadToken/?tid Int) (lib!exec.context.ThreadToken./ThreadToken/?fc_client lib!spec.flat_combiner.FlatCombiner.clients.) (lib!exec.context.ThreadToken./ThreadToken/?batch_perm Poly))) ((lib!exec.context.PendingOperation./PendingOperation (lib!exec.context.PendingOperation./PendingOperation/?op Poly) (lib!exec.context.PendingOperation./PendingOperation/?resp core!option.Option.))) ((lib!exec.context.Context./Context (lib!exec.context.Context./Context/?batch lib!exec.CachePadded.) (lib!exec.context.Context./Context/?atomic lib!exec.CachePadded.) (lib!exec.context.Context./Context/?thread_id_g Int) (lib!exec.context.Context./Context/?flat_combiner_instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!exec.context.Context./Context/?unbounded_log_instance Poly))) ((lib!exec.context.InvariantPredicate_auto_Context_atomic./InvariantPredicate_auto_Context_atomic )) ((lib!exec.context.ContextGhost./ContextGhost (lib!exec.context.ContextGhost./ContextGhost/?batch_perms core!option.Option.) (lib!exec.context.ContextGhost./ContextGhost/?slots lib!spec.flat_combiner.FlatCombiner.slots.) (lib!exec.context.ContextGhost./ContextGhost/?update core!option.Option.))) ((lib!exec.log.BufferEntry./BufferEntry (lib!exec.log.BufferEntry./BufferEntry/?log_entry Poly) (lib!exec.log.BufferEntry./BufferEntry/?alive vstd!atomic_ghost.AtomicBool.) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_idx Int) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_instance Poly))) ((lib!exec.log.InvariantPredicate_auto_BufferEntry_alive./InvariantPredicate_auto_BufferEntry_alive )) ((lib!exec.log.NrLog./NrLog (lib!exec.log.NrLog./NrLog/?slog Poly) (lib!exec.log.NrLog./NrLog/?version_upper_bound lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?head lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?tail lib!exec.CachePadded.) (lib!exec.log.NrLog./NrLog/?local_versions Poly) (lib!exec.log.NrLog./NrLog/?num_replicas Int) (lib!exec.log.NrLog./NrLog/?unbounded_log_instance Poly) (lib!exec.log.NrLog./NrLog/?cyclic_buffer_instance Poly))) ((lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound./InvariantPredicate_auto_NrLog_version_upper_bound )) ((lib!exec.log.InvariantPredicate_auto_NrLog_head./InvariantPredicate_auto_NrLog_head )) ((lib!exec.log.InvariantPredicate_auto_NrLog_tail./InvariantPredicate_auto_NrLog_tail )) ((lib!exec.log.InvariantPredicate_auto_NrLog_local_versions./InvariantPredicate_auto_NrLog_local_versions )) ((lib!exec.log.NrLogTokens./NrLogTokens (lib!exec.log.NrLogTokens./NrLogTokens/?num_replicas Int) (lib!exec.log.NrLogTokens./NrLogTokens/?replicas Poly) (lib!exec.log.NrLogTokens./NrLogTokens/?combiners Poly) (lib!exec.log.NrLogTokens./NrLogTokens/?cb_combiners Poly) (lib!exec.log.NrLogTokens./NrLogTokens/?unbounded_log_instance Poly) (lib!exec.log.NrLogTokens./NrLogTokens/?cyclic_buffer_instance Poly))) ((lib!exec.replica.ReplicaToken./ReplicaToken (lib!exec.replica.ReplicaToken./ReplicaToken/?rid Int))) ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?data Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?replica Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?combiner Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?cb_combiner Poly))) ((lib!exec.replica.Replica./Replica (lib!exec.replica.Replica./Replica/?replica_token lib!exec.replica.ReplicaToken.) (lib!exec.replica.Replica./Replica/?combiner lib!exec.CachePadded.) (lib!exec.replica.Replica./Replica/?contexts Poly) (lib!exec.replica.Replica./Replica/?collected_operations Poly) (lib!exec.replica.Replica./Replica/?collected_operations_per_thread vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (lib!exec.replica.Replica./Replica/?responses Poly) (lib!exec.replica.Replica./Replica/?data lib!exec.CachePadded.) (lib!exec.replica.Replica./Replica/?num_threads Int) (lib!exec.replica.Replica./Replica/?thread_tokens Poly) (lib!exec.replica.Replica./Replica/?unbounded_log_instance Poly) (lib!exec.replica.Replica./Replica/?cyclic_buffer_instance Poly) (lib!exec.replica.Replica./Replica/?flat_combiner_instance lib!spec.flat_combiner.FlatCombiner.Instance.))) ((lib!exec.replica.InvariantPredicate_auto_Replica_combiner./InvariantPredicate_auto_Replica_combiner )) ((lib!exec.replica.ReplicaConfig./ReplicaConfig (lib!exec.replica.ReplicaConfig./ReplicaConfig/?replica Poly) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?combiner Poly) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?cb_combiner Poly) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?unbounded_log_instance Poly) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?cyclic_buffer_instance Poly))) ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?flat_combiner lib!spec.flat_combiner.FlatCombiner.combiner.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_perm Poly) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_per_thread_perm vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?responses_token Poly))) ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op Poly) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id Int))) ((lib!spec.unbounded_log.ReadonlyState./Init (lib!spec.unbounded_log.ReadonlyState./Init/?op Poly)) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op Poly) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound Int)) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op Poly) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id Int)) (lib!spec.unbounded_log.ReadonlyState./Done (lib!spec.unbounded_log.ReadonlyState./Done/?op Poly) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id Int) (lib!spec.unbounded_log.ReadonlyState./Done/?ret Poly))) ((lib!spec.unbounded_log.UpdateState./Init (lib!spec.unbounded_log.UpdateState./Init/?op Poly)) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.unbounded_log.UpdateState./Placed/?op Poly) (lib!spec.unbounded_log.UpdateState./Placed/?idx Int)) (lib!spec.unbounded_log.UpdateState./Applied (lib!spec.unbounded_log.UpdateState./Applied/?ret Poly) (lib!spec.unbounded_log.UpdateState./Applied/?idx Int)) (lib!spec.unbounded_log.UpdateState./Done (lib!spec.unbounded_log.UpdateState./Done/?ret Poly) (lib!spec.unbounded_log.UpdateState./Done/?idx Int))) ((lib!spec.unbounded_log.CombinerState./Ready ) (lib!spec.unbounded_log.CombinerState./Placed (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops vstd!seq.Seq<nat.>.)) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion Int)) (lib!spec.unbounded_log.CombinerState./Loop (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./Loop/?lversion Int) (lib!spec.unbounded_log.CombinerState./Loop/?idx Int) (lib!spec.unbounded_log.CombinerState./Loop/?tail Int)) (lib!spec.unbounded_log.CombinerState./UpdatedVersion (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail Int))) ((lib!spec.cyclicbuffer.StoredType./StoredType (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms Poly) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry core!option.Option.))) ((lib!spec.cyclicbuffer.ReaderState./Starting (lib!spec.cyclicbuffer.ReaderState./Starting/?start Int)) (lib!spec.cyclicbuffer.ReaderState./Range (lib!spec.cyclicbuffer.ReaderState./Range/?start Int) (lib!spec.cyclicbuffer.ReaderState./Range/?end Int) (lib!spec.cyclicbuffer.ReaderState./Range/?cur Int)) (lib!spec.cyclicbuffer.ReaderState./Guard (lib!spec.cyclicbuffer.ReaderState./Guard/?start Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?end Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur Int) (lib!spec.cyclicbuffer.ReaderState./Guard/?val lib!spec.cyclicbuffer.StoredType.))) ((lib!spec.cyclicbuffer.CombinerState./Idle ) (lib!spec.cyclicbuffer.CombinerState./Reading (lib!spec.cyclicbuffer.CombinerState./Reading/?0 lib!spec.cyclicbuffer.ReaderState.)) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx Int) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version Int)) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head Int)) (lib!spec.cyclicbuffer.CombinerState./Appending (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx Int) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail Int))) ((lib!spec.flat_combiner.ClientState./Idle ) (lib!spec.flat_combiner.ClientState./Waiting (lib!spec.flat_combiner.ClientState./Waiting/?0 Int))) ((lib!exec.CachePadded./CachePadded (lib!exec.CachePadded./CachePadded/?0 Poly))) ((lib!exec.NodeReplicated./NodeReplicated (lib!exec.NodeReplicated./NodeReplicated/?log lib!exec.log.NrLog.) (lib!exec.NodeReplicated./NodeReplicated/?replicas Poly) (lib!exec.NodeReplicated./NodeReplicated/?unbounded_log_instance Poly) (lib!exec.NodeReplicated./NodeReplicated/?cyclic_buffer_instance Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!atomic_ghost.AtomicBool./AtomicBool/patomic (vstd!atomic_ghost.AtomicBool.) vstd!atomic.PAtomicBool.)
(declare-fun vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (vstd!atomic_ghost.AtomicBool.) Poly)
(declare-fun vstd!cell.PointsToData./PointsToData/pcell (vstd!cell.PointsToData.) vstd!cell.CellId.)
(declare-fun vstd!cell.PointsToData./PointsToData/value (vstd!cell.PointsToData.) core!option.Option.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) lib!spec.unbounded_log.UpdateState.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) lib!spec.unbounded_log.CombinerState.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) lib!spec.flat_combiner.ClientState.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/rid (lib!exec.context.ThreadToken.) lib!exec.replica.ReplicaToken.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/tid (lib!exec.context.ThreadToken.) Int)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/fc_client (lib!exec.context.ThreadToken.) lib!spec.flat_combiner.FlatCombiner.clients.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/batch_perm (lib!exec.context.ThreadToken.) Poly)
(declare-fun lib!exec.context.PendingOperation./PendingOperation/op (lib!exec.context.PendingOperation.) Poly)
(declare-fun lib!exec.context.PendingOperation./PendingOperation/resp (lib!exec.context.PendingOperation.) core!option.Option.)
(declare-fun lib!exec.context.Context./Context/batch (lib!exec.context.Context.) lib!exec.CachePadded.)
(declare-fun lib!exec.context.Context./Context/atomic (lib!exec.context.Context.) lib!exec.CachePadded.)
(declare-fun lib!exec.context.Context./Context/thread_id_g (lib!exec.context.Context.) Int)
(declare-fun lib!exec.context.Context./Context/flat_combiner_instance (lib!exec.context.Context.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!exec.context.Context./Context/unbounded_log_instance (lib!exec.context.Context.) Poly)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/batch_perms (lib!exec.context.ContextGhost.) core!option.Option.)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/slots (lib!exec.context.ContextGhost.) lib!spec.flat_combiner.FlatCombiner.slots.)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/update (lib!exec.context.ContextGhost.) core!option.Option.)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/log_entry (lib!exec.log.BufferEntry.) Poly)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/alive (lib!exec.log.BufferEntry.) vstd!atomic_ghost.AtomicBool.)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (lib!exec.log.BufferEntry.) Int)
(declare-fun lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (lib!exec.log.BufferEntry.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/slog (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/version_upper_bound (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/head (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/tail (lib!exec.log.NrLog.) lib!exec.CachePadded.)
(declare-fun lib!exec.log.NrLog./NrLog/local_versions (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/num_replicas (lib!exec.log.NrLog.) Int)
(declare-fun lib!exec.log.NrLog./NrLog/unbounded_log_instance (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (lib!exec.log.NrLog.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (lib!exec.log.NrLogTokens.) Int)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/replicas (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/combiners (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (lib!exec.log.NrLogTokens.) Poly)
(declare-fun lib!exec.replica.ReplicaToken./ReplicaToken/rid (lib!exec.replica.ReplicaToken.) Int)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/replica_token (lib!exec.replica.Replica.) lib!exec.replica.ReplicaToken.)
(declare-fun lib!exec.replica.Replica./Replica/combiner (lib!exec.replica.Replica.) lib!exec.CachePadded.)
(declare-fun lib!exec.replica.Replica./Replica/contexts (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/collected_operations (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/collected_operations_per_thread (lib!exec.replica.Replica.) vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun lib!exec.replica.Replica./Replica/responses (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/data (lib!exec.replica.Replica.) lib!exec.CachePadded.)
(declare-fun lib!exec.replica.Replica./Replica/num_threads (lib!exec.replica.Replica.) Int)
(declare-fun lib!exec.replica.Replica./Replica/thread_tokens (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/unbounded_log_instance (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/cyclic_buffer_instance (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/flat_combiner_instance (lib!exec.replica.Replica.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!exec.replica.ReplicaConfig./ReplicaConfig/replica (lib!exec.replica.ReplicaConfig.) Poly)
(declare-fun lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner (lib!exec.replica.ReplicaConfig.) Poly)
(declare-fun lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner (lib!exec.replica.ReplicaConfig.) Poly)
(declare-fun lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (lib!exec.replica.ReplicaConfig.) Poly)
(declare-fun lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance (lib!exec.replica.ReplicaConfig.) Poly)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner (lib!exec.replica.CombinerLockStateGhost.) lib!spec.flat_combiner.FlatCombiner.combiner.)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm (lib!exec.replica.CombinerLockStateGhost.) vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (lib!spec.types.ConcreteLogEntry.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Init/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/ret (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Init/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Placed/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/idx (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (lib!spec.cyclicbuffer.StoredType.) core!option.Option.)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Starting/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Range/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/start (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/end (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/cur (lib!spec.cyclicbuffer.ReaderState.) Int)
(declare-fun lib!spec.cyclicbuffer.ReaderState./Guard/val (lib!spec.cyclicbuffer.ReaderState.) lib!spec.cyclicbuffer.StoredType.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Reading/0 (lib!spec.cyclicbuffer.CombinerState.) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.cyclicbuffer.CombinerState./Appending/tail (lib!spec.cyclicbuffer.CombinerState.) Int)
(declare-fun lib!spec.flat_combiner.ClientState./Waiting/0 (lib!spec.flat_combiner.ClientState.) Int)
(declare-fun lib!exec.CachePadded./CachePadded/0 (lib!exec.CachePadded.) Poly)
(declare-fun lib!exec.NodeReplicated./NodeReplicated/log (lib!exec.NodeReplicated.) lib!exec.log.NrLog.)
(declare-fun lib!exec.NodeReplicated./NodeReplicated/replicas (lib!exec.NodeReplicated.) Poly)
(declare-fun lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (lib!exec.NodeReplicated.) Poly)
(declare-fun lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (lib!exec.NodeReplicated.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-const TYPE%vstd!atomic.PAtomicBool. Type)
(declare-const TYPE%vstd!atomic.PermissionBool. Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredBool. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicBool. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!cell.CellId. Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.tail. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Dcr Type) Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.clients. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.slots. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.combiner. Type)
(declare-fun TYPE%lib!exec.context.ThreadToken. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.context.PendingOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.context.Context. (Dcr Type) Type)
(declare-const TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. Type)
(declare-fun TYPE%lib!exec.context.ContextGhost. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.log.BufferEntry. (Dcr Type) Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. Type)
(declare-fun TYPE%lib!exec.log.NrLog. (Dcr Type) Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. Type)
(declare-const TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. Type)
(declare-fun TYPE%lib!exec.log.NrLogTokens. (Dcr Type) Type)
(declare-const TYPE%lib!exec.replica.ReplicaToken. Type)
(declare-fun TYPE%lib!exec.replica.ReplicatedDataStructure. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.replica.Replica. (Dcr Type) Type)
(declare-const TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. Type)
(declare-fun TYPE%lib!exec.replica.ReplicaConfig. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.replica.CombinerLockStateGhost. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.rwlock.RwLock. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.ConcreteLogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.ReadonlyState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UpdateState. (Dcr Type) Type)
(declare-const TYPE%lib!spec.unbounded_log.CombinerState. Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.StoredType. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.ReaderState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CombinerState. (Dcr Type) Type)
(declare-const TYPE%lib!spec.flat_combiner.ClientState. Type)
(declare-fun TYPE%lib!exec.CachePadded. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.NodeReplicated. (Dcr Type) Type)
(declare-const TYPE%lib!AffinityFn. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (alloc!vec.Vec<usize./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<usize./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. (alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.)
(declare-fun Poly%lib!AffinityFn. (lib!AffinityFn.) Poly)
(declare-fun %Poly%lib!AffinityFn. (Poly) lib!AffinityFn.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.Instance.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (Poly) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!spec.flat_combiner.FlatCombiner.clients.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.clients. (Poly) lib!spec.flat_combiner.FlatCombiner.clients.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!spec.flat_combiner.FlatCombiner.combiner.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (Poly) lib!spec.flat_combiner.FlatCombiner.combiner.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!spec.flat_combiner.FlatCombiner.slots.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.slots. (Poly) lib!spec.flat_combiner.FlatCombiner.slots.)
(declare-fun Poly%vstd!atomic.PAtomicBool. (vstd!atomic.PAtomicBool.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicBool. (Poly) vstd!atomic.PAtomicBool.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionBool. (vstd!atomic.PermissionBool.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionBool. (Poly) vstd!atomic.PermissionBool.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!cell.CellId. (vstd!cell.CellId.) Poly)
(declare-fun %Poly%vstd!cell.CellId. (Poly) vstd!cell.CellId.)
(declare-fun Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly) vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly) vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!cell.CellId.>. (vstd!seq.Seq<vstd!cell.CellId.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!cell.CellId.>. (Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicBool. (Poly) vstd!atomic_ghost.AtomicBool.)
(declare-fun Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData.) Poly)
(declare-fun %Poly%vstd!cell.PointsToData. (Poly) vstd!cell.PointsToData.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)
(declare-fun Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly) lib!spec.flat_combiner.FlatCombiner.clients_token_data.)
(declare-fun Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken.) Poly)
(declare-fun %Poly%lib!exec.context.ThreadToken. (Poly) lib!exec.context.ThreadToken.)
(declare-fun Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation.) Poly)
(declare-fun %Poly%lib!exec.context.PendingOperation. (Poly) lib!exec.context.PendingOperation.)
(declare-fun Poly%lib!exec.context.Context. (lib!exec.context.Context.) Poly)
(declare-fun %Poly%lib!exec.context.Context. (Poly) lib!exec.context.Context.)
(declare-fun Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.context.InvariantPredicate_auto_Context_atomic.) Poly)
(declare-fun %Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (Poly) lib!exec.context.InvariantPredicate_auto_Context_atomic.)
(declare-fun Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost.) Poly)
(declare-fun %Poly%lib!exec.context.ContextGhost. (Poly) lib!exec.context.ContextGhost.)
(declare-fun Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry.) Poly)
(declare-fun %Poly%lib!exec.log.BufferEntry. (Poly) lib!exec.log.BufferEntry.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly) lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)
(declare-fun Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog.) Poly)
(declare-fun %Poly%lib!exec.log.NrLog. (Poly) lib!exec.log.NrLog.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.log.InvariantPredicate_auto_NrLog_head.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_head.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.log.InvariantPredicate_auto_NrLog_tail.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_tail.)
(declare-fun Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) Poly)
(declare-fun %Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (Poly) lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)
(declare-fun Poly%lib!exec.log.NrLogTokens. (lib!exec.log.NrLogTokens.) Poly)
(declare-fun %Poly%lib!exec.log.NrLogTokens. (Poly) lib!exec.log.NrLogTokens.)
(declare-fun Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken.) Poly)
(declare-fun %Poly%lib!exec.replica.ReplicaToken. (Poly) lib!exec.replica.ReplicaToken.)
(declare-fun Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun %Poly%lib!exec.replica.ReplicatedDataStructure. (Poly) lib!exec.replica.ReplicatedDataStructure.)
(declare-fun Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica.) Poly)
(declare-fun %Poly%lib!exec.replica.Replica. (Poly) lib!exec.replica.Replica.)
(declare-fun Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) Poly)
(declare-fun %Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (Poly) lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)
(declare-fun Poly%lib!exec.replica.ReplicaConfig. (lib!exec.replica.ReplicaConfig.) Poly)
(declare-fun %Poly%lib!exec.replica.ReplicaConfig. (Poly) lib!exec.replica.ReplicaConfig.)
(declare-fun Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun %Poly%lib!exec.replica.CombinerLockStateGhost. (Poly) lib!exec.replica.CombinerLockStateGhost.)
(declare-fun Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.ConcreteLogEntry. (Poly) lib!spec.types.ConcreteLogEntry.)
(declare-fun Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.ReadonlyState. (Poly) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UpdateState. (Poly) lib!spec.unbounded_log.UpdateState.)
(declare-fun Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.CombinerState. (Poly) lib!spec.unbounded_log.CombinerState.)
(declare-fun Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.StoredType. (Poly) lib!spec.cyclicbuffer.StoredType.)
(declare-fun Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.ReaderState. (Poly) lib!spec.cyclicbuffer.ReaderState.)
(declare-fun Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.cyclicbuffer.CombinerState. (Poly) lib!spec.cyclicbuffer.CombinerState.)
(declare-fun Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.ClientState. (Poly) lib!spec.flat_combiner.ClientState.)
(declare-fun Poly%lib!exec.CachePadded. (lib!exec.CachePadded.) Poly)
(declare-fun %Poly%lib!exec.CachePadded. (Poly) lib!exec.CachePadded.)
(declare-fun Poly%lib!exec.NodeReplicated. (lib!exec.NodeReplicated.) Poly)
(declare-fun %Poly%lib!exec.NodeReplicated. (Poly) lib!exec.NodeReplicated.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)))))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)))))
(assert (forall ((x alloc!vec.Vec<usize./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x alloc!vec.Vec<usize./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x lib!AffinityFn.)) (! (= x (%Poly%lib!AffinityFn. (Poly%lib!AffinityFn. x))) :pattern ((Poly%lib!AffinityFn. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!AffinityFn.) (= x (Poly%lib!AffinityFn. (%Poly%lib!AffinityFn. x)))) :pattern ((has_type x TYPE%lib!AffinityFn.)))))
(assert (forall ((x lib!AffinityFn.)) (! (has_type (Poly%lib!AffinityFn. x) TYPE%lib!AffinityFn.) :pattern ((has_type (Poly%lib!AffinityFn. x) TYPE%lib!AffinityFn.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)))))
(assert (forall ((x vstd!atomic.PAtomicBool.)) (! (= x (%Poly%vstd!atomic.PAtomicBool. (Poly%vstd!atomic.PAtomicBool. x))) :pattern ((Poly%vstd!atomic.PAtomicBool. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicBool.) (= x (Poly%vstd!atomic.PAtomicBool. (%Poly%vstd!atomic.PAtomicBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicBool.)))))
(assert (forall ((x vstd!atomic.PAtomicBool.)) (! (has_type (Poly%vstd!atomic.PAtomicBool. x) TYPE%vstd!atomic.PAtomicBool.) :pattern ((has_type (Poly%vstd!atomic.PAtomicBool. x) TYPE%vstd!atomic.PAtomicBool.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PermissionBool.)) (! (= x (%Poly%vstd!atomic.PermissionBool. (Poly%vstd!atomic.PermissionBool. x))) :pattern ((Poly%vstd!atomic.PermissionBool. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionBool.) (= x (Poly%vstd!atomic.PermissionBool. (%Poly%vstd!atomic.PermissionBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionBool.)))))
(assert (forall ((x vstd!atomic.PermissionBool.)) (! (has_type (Poly%vstd!atomic.PermissionBool. x) TYPE%vstd!atomic.PermissionBool.) :pattern ((has_type (Poly%vstd!atomic.PermissionBool. x) TYPE%vstd!atomic.PermissionBool.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (= x (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. x))) :pattern ((Poly%vstd!cell.CellId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!cell.CellId.) (= x (Poly%vstd!cell.CellId. (%Poly%vstd!cell.CellId. x)))) :pattern ((has_type x TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.) :pattern ((has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (= x (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x))) :pattern ((Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) (= x (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (has_type (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) :pattern ((has_type (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (= x (%Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x))) :pattern ((Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) (= x (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (%Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (has_type (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) :pattern ((has_type (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<vstd!cell.CellId.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!cell.CellId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.)) (= x (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (%Poly%vstd!seq.Seq<vstd!cell.CellId.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.))))))
(assert (forall ((x vstd!seq.Seq<vstd!cell.CellId.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.)) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!cell.CellId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!cell.CellId.))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicBool. (Poly%vstd!atomic_ghost.AtomicBool. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicBool. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicBool. (%Poly%vstd!atomic_ghost.AtomicBool. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicBool.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= (vstd!atomic_ghost.AtomicBool./AtomicBool/patomic x) (vstd!atomic_ghost.AtomicBool./AtomicBool/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x) (vstd!atomic_ghost.AtomicBool./AtomicBool/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicBool./AtomicBool_ ((c vstd!atomic_ghost.AtomicBool.)) Bool ((_ is vstd!atomic_ghost.AtomicBool./AtomicBool) c))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (=> (is-vstd!atomic_ghost.AtomicBool./AtomicBool_ x) (height_lt (height (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicBool. x)))) :pattern ((height (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= x (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. x))) :pattern ((Poly%vstd!cell.PointsToData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (= x (Poly%vstd!cell.PointsToData. (%Poly%vstd!cell.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_pcell! vstd!cell.CellId.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/pcell x) (vstd!cell.PointsToData./PointsToData/?pcell x)) :pattern ((vstd!cell.PointsToData./PointsToData/pcell x)))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/value x) (vstd!cell.PointsToData./PointsToData/?value x)) :pattern ((vstd!cell.PointsToData./PointsToData/value x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (has_type (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x)) (has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(define-fun is-vstd!cell.PointsToData./PointsToData_ ((c vstd!cell.PointsToData.)) Bool ((_ is vstd!cell.PointsToData./PointsToData) c))
(assert (forall ((x vstd!cell.PointsToData.)) (! (=> (is-vstd!cell.PointsToData./PointsToData_ x) (height_lt (height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x))) (height (Poly%vstd!cell.PointsToData. x)))) :pattern ((height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! Poly)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type _value! (proj%lib!Dispatch./View DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.ReadonlyState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. _value!) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.UpdateState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.UpdateState. _value!) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.CombinerState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. _value!) TYPE%lib!spec.unbounded_log.CombinerState.)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))))))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.cyclicbuffer.CombinerState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. _value!) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?key x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x) (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x))) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ ((c lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) Bool ((_ is lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data) c))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ x) (height_lt (height (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x)) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((height (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance x))))))
(assert (forall ((x lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)) (! (=> (is-lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x))) (height (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value x)))))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)))))
(assert (forall ((_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_key! Int) (_value! lib!spec.flat_combiner.ClientState.)) (! (=> (and (<= 0 _key!) (has_type (Poly%lib!spec.flat_combiner.ClientState. _value!) TYPE%lib!spec.flat_combiner.ClientState.)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance x)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?key x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)))))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?value x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= x (%Poly%lib!exec.context.ThreadToken. (Poly%lib!exec.context.ThreadToken. x))) :pattern ((Poly%lib!exec.context.ThreadToken. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (= x (Poly%lib!exec.context.ThreadToken. (%Poly%lib!exec.context.ThreadToken. x)))) :pattern ((has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_rid! lib!exec.replica.ReplicaToken.) (_tid! Int) (_fc_client! lib!spec.flat_combiner.FlatCombiner.clients.) (_batch_perm! Poly)) (! (=> (and (has_type (Poly%lib!exec.replica.ReplicaToken. _rid!) TYPE%lib!exec.replica.ReplicaToken.) (uInv 32 _tid!) (has_type _batch_perm! (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken./ThreadToken _rid! _tid! _fc_client! _batch_perm!)) (TYPE%lib!exec.context.ThreadToken. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken./ThreadToken _rid! _tid! _fc_client! _batch_perm!)) (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/rid x) (lib!exec.context.ThreadToken./ThreadToken/?rid x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/rid x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. x))) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/tid x) (lib!exec.context.ThreadToken./ThreadToken/?tid x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/tid x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (uInv 32 (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. x)))) :pattern ((lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/fc_client x) (lib!exec.context.ThreadToken./ThreadToken/?fc_client x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/fc_client x)))))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/batch_perm x) (lib!exec.context.ThreadToken./ThreadToken/?batch_perm x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/batch_perm x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (has_type (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) :pattern ((lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))))))
(define-fun is-lib!exec.context.ThreadToken./ThreadToken_ ((c lib!exec.context.ThreadToken.)) Bool ((_ is lib!exec.context.ThreadToken./ThreadToken) c))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (=> (is-lib!exec.context.ThreadToken./ThreadToken_ x) (height_lt (height (lib!exec.context.ThreadToken./ThreadToken/batch_perm x)) (height (Poly%lib!exec.context.ThreadToken. x)))) :pattern ((height (lib!exec.context.ThreadToken./ThreadToken/batch_perm x))))))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= x (%Poly%lib!exec.context.PendingOperation. (Poly%lib!exec.context.PendingOperation. x))) :pattern ((Poly%lib!exec.context.PendingOperation. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (= x (Poly%lib!exec.context.PendingOperation. (%Poly%lib!exec.context.PendingOperation. x)))) :pattern ((has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_resp! core!option.Option.)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%core!option.Option. _resp!) (TYPE%core!option.Option. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&)))) (has_type (Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation./PendingOperation _op! _resp!)) (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation./PendingOperation _op! _resp!)) (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= (lib!exec.context.PendingOperation./PendingOperation/op x) (lib!exec.context.PendingOperation./PendingOperation/?op x)) :pattern ((lib!exec.context.PendingOperation./PendingOperation/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (has_type (lib!exec.context.PendingOperation./PendingOperation/op (%Poly%lib!exec.context.PendingOperation. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!exec.context.PendingOperation./PendingOperation/op (%Poly%lib!exec.context.PendingOperation. x)) (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= (lib!exec.context.PendingOperation./PendingOperation/resp x) (lib!exec.context.PendingOperation./PendingOperation/?resp x)) :pattern ((lib!exec.context.PendingOperation./PendingOperation/resp x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp (%Poly%lib!exec.context.PendingOperation. x))) (TYPE%core!option.Option. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&)))) :pattern ((lib!exec.context.PendingOperation./PendingOperation/resp (%Poly%lib!exec.context.PendingOperation. x)) (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))))
(define-fun is-lib!exec.context.PendingOperation./PendingOperation_ ((c lib!exec.context.PendingOperation.)) Bool ((_ is lib!exec.context.PendingOperation./PendingOperation) c))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (=> (is-lib!exec.context.PendingOperation./PendingOperation_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp x))) (height (Poly%lib!exec.context.PendingOperation. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp x)))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= x (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. x))) :pattern ((Poly%lib!exec.context.Context. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (= x (Poly%lib!exec.context.Context. (%Poly%lib!exec.context.Context. x)))) :pattern ((has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_batch! lib!exec.CachePadded.) (_atomic! lib!exec.CachePadded.) (_thread_id_g! Int) (_flat_combiner_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_unbounded_log_instance! Poly)) (! (=> (and (has_type (Poly%lib!exec.CachePadded. _batch!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%lib!exec.CachePadded. _atomic!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.))) (<= 0 _thread_id_g!) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) (has_type (Poly%lib!exec.context.Context. (lib!exec.context.Context./Context _batch! _atomic! _thread_id_g! _flat_combiner_instance! _unbounded_log_instance!)) (TYPE%lib!exec.context.Context. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.Context. (lib!exec.context.Context./Context _batch! _atomic! _thread_id_g! _flat_combiner_instance! _unbounded_log_instance!)) (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/batch x) (lib!exec.context.Context./Context/?batch x)) :pattern ((lib!exec.context.Context./Context/batch x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))) :pattern ((lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/atomic x) (lib!exec.context.Context./Context/?atomic x)) :pattern ((lib!exec.context.Context./Context/atomic x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)))) :pattern ((lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/thread_id_g x) (lib!exec.context.Context./Context/?thread_id_g x)) :pattern ((lib!exec.context.Context./Context/thread_id_g x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (<= 0 (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. x)))) :pattern ((lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/flat_combiner_instance x) (lib!exec.context.Context./Context/?flat_combiner_instance x)) :pattern ((lib!exec.context.Context./Context/flat_combiner_instance x)))))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/unbounded_log_instance x) (lib!exec.context.Context./Context/?unbounded_log_instance x)) :pattern ((lib!exec.context.Context./Context/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))))))
(define-fun is-lib!exec.context.Context./Context_ ((c lib!exec.context.Context.)) Bool ((_ is lib!exec.context.Context./Context) c))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch x))) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch x)))))))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic x))) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic x)))))))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (lib!exec.context.Context./Context/unbounded_log_instance x)) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (lib!exec.context.Context./Context/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.context.InvariantPredicate_auto_Context_atomic.)) (! (= x (%Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x))) :pattern ((Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.) (= x (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (%Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x)))) :pattern ((has_type x TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)))))
(assert (forall ((x lib!exec.context.InvariantPredicate_auto_Context_atomic.)) (! (has_type (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x) TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.) :pattern ((has_type (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x) TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= x (%Poly%lib!exec.context.ContextGhost. (Poly%lib!exec.context.ContextGhost. x))) :pattern ((Poly%lib!exec.context.ContextGhost. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (= x (Poly%lib!exec.context.ContextGhost. (%Poly%lib!exec.context.ContextGhost. x)))) :pattern ((has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_batch_perms! core!option.Option.) (_slots! lib!spec.flat_combiner.FlatCombiner.slots.) (_update! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _batch_perms!) (TYPE%core!option.Option. $ (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%core!option.Option. _update!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) (has_type (Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost./ContextGhost _batch_perms! _slots! _update!)) (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost./ContextGhost _batch_perms! _slots! _update!)) (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/batch_perms x) (lib!exec.context.ContextGhost./ContextGhost/?batch_perms x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/batch_perms x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. x))) (TYPE%core!option.Option. $ (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))) :pattern ((lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. x)) (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/slots x) (lib!exec.context.ContextGhost./ContextGhost/?slots x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/slots x)))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/update x) (lib!exec.context.ContextGhost./ContextGhost/?update x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/update x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) :pattern ((lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. x)) (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(define-fun is-lib!exec.context.ContextGhost./ContextGhost_ ((c lib!exec.context.ContextGhost.)) Bool ((_ is lib!exec.context.ContextGhost./ContextGhost) c))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (=> (is-lib!exec.context.ContextGhost./ContextGhost_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms x))) (height (Poly%lib!exec.context.ContextGhost. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms x)))))))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (=> (is-lib!exec.context.ContextGhost./ContextGhost_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update x))) (height (Poly%lib!exec.context.ContextGhost. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update x)))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= x (%Poly%lib!exec.log.BufferEntry. (Poly%lib!exec.log.BufferEntry. x))) :pattern ((Poly%lib!exec.log.BufferEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (= x (Poly%lib!exec.log.BufferEntry. (%Poly%lib!exec.log.BufferEntry. x)))) :pattern ((has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_log_entry! Poly) (_alive! vstd!atomic_ghost.AtomicBool.) (_cyclic_buffer_idx! Int) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type _log_entry! (TYPE%vstd!cell.PCell. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)))) (has_type (Poly%vstd!atomic_ghost.AtomicBool. _alive!) (TYPE%vstd!atomic_ghost.AtomicBool. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (<= 0 _cyclic_buffer_idx!) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry./BufferEntry _log_entry! _alive! _cyclic_buffer_idx! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.BufferEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.BufferEntry. (lib!exec.log.BufferEntry./BufferEntry _log_entry! _alive! _cyclic_buffer_idx! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/log_entry x) (lib!exec.log.BufferEntry./BufferEntry/?log_entry x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/log_entry x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. x)) (TYPE%vstd!cell.PCell. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/alive x) (lib!exec.log.BufferEntry./BufferEntry/?alive x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/alive x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. x))) (TYPE%vstd!atomic_ghost.AtomicBool. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx x) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_idx x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (<= 0 (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. x)))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x) (lib!exec.log.BufferEntry./BufferEntry/?cyclic_buffer_instance x)) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&)) (has_type (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. x)) (has_type x (TYPE%lib!exec.log.BufferEntry. DT&. DT&))))))
(define-fun is-lib!exec.log.BufferEntry./BufferEntry_ ((c lib!exec.log.BufferEntry.)) Bool ((_ is lib!exec.log.BufferEntry./BufferEntry) c))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (lib!exec.log.BufferEntry./BufferEntry/log_entry x)) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (lib!exec.log.BufferEntry./BufferEntry/log_entry x))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive x))) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive x)))))))
(assert (forall ((x lib!exec.log.BufferEntry.)) (! (=> (is-lib!exec.log.BufferEntry./BufferEntry_ x) (height_lt (height (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x)) (height (Poly%lib!exec.log.BufferEntry. x)))) :pattern ((height (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (%Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x) TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. x) TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive.)))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= x (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. x))) :pattern ((Poly%lib!exec.log.NrLog. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (= x (Poly%lib!exec.log.NrLog. (%Poly%lib!exec.log.NrLog. x)))) :pattern ((has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_slog! Poly) (_version_upper_bound! lib!exec.CachePadded.) (_head! lib!exec.CachePadded.) (_tail! lib!exec.CachePadded.) (_local_versions! Poly) (_num_replicas! Int) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type _slog! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type (Poly%lib!exec.CachePadded. _version_upper_bound!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.))) (has_type (Poly%lib!exec.CachePadded. _head!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.))) (has_type (Poly%lib!exec.CachePadded. _tail!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.))) (has_type _local_versions! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.)) (<= 0 _num_replicas!) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog./NrLog _slog! _version_upper_bound! _head! _tail! _local_versions! _num_replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLog. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.NrLog. (lib!exec.log.NrLog./NrLog _slog! _version_upper_bound! _head! _tail! _local_versions! _num_replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/slog x) (lib!exec.log.NrLog./NrLog/?slog x)) :pattern ((lib!exec.log.NrLog./NrLog/slog x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/version_upper_bound x) (lib!exec.log.NrLog./NrLog/?version_upper_bound x)) :pattern ((lib!exec.log.NrLog./NrLog/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))) :pattern ((lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/head x) (lib!exec.log.NrLog./NrLog/?head x)) :pattern ((lib!exec.log.NrLog./NrLog/head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))) :pattern ((lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/tail x) (lib!exec.log.NrLog./NrLog/?tail x)) :pattern ((lib!exec.log.NrLog./NrLog/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))) :pattern ((lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/local_versions x) (lib!exec.log.NrLog./NrLog/?local_versions x)) :pattern ((lib!exec.log.NrLog./NrLog/local_versions x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/num_replicas x) (lib!exec.log.NrLog./NrLog/?num_replicas x)) :pattern ((lib!exec.log.NrLog./NrLog/num_replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (<= 0 (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. x)))) :pattern ((lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/unbounded_log_instance x) (lib!exec.log.NrLog./NrLog/?unbounded_log_instance x)) :pattern ((lib!exec.log.NrLog./NrLog/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (= (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x) (lib!exec.log.NrLog./NrLog/?cyclic_buffer_instance x)) :pattern ((lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. x)) (has_type x (TYPE%lib!exec.log.NrLog. DT&. DT&))))))
(define-fun is-lib!exec.log.NrLog./NrLog_ ((c lib!exec.log.NrLog.)) Bool ((_ is lib!exec.log.NrLog./NrLog) c))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/slog x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/slog x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail x))) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail x)))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/local_versions x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/local_versions x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/unbounded_log_instance x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.log.NrLog.)) (! (=> (is-lib!exec.log.NrLog./NrLog_ x) (height_lt (height (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x)) (height (Poly%lib!exec.log.NrLog. x)))) :pattern ((height (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_head.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_head.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_head. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_tail.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_tail.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_tail. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (! (= x (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x))) :pattern ((Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) (= x (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (%Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x)))) :pattern ((has_type x TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)))))
(assert (forall ((x lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (! (has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.) :pattern ((has_type (Poly%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. x) TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= x (%Poly%lib!exec.log.NrLogTokens. (Poly%lib!exec.log.NrLogTokens. x))) :pattern ((Poly%lib!exec.log.NrLogTokens. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (= x (Poly%lib!exec.log.NrLogTokens. (%Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_num_replicas! Int) (_replicas! Poly) (_combiners! Poly) (_cb_combiners! Poly) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly)) (! (=> (and (<= 0 _num_replicas!) (has_type _replicas! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) (has_type _combiners! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (has_type _cb_combiners! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.log.NrLogTokens. (lib!exec.log.NrLogTokens./NrLogTokens _num_replicas! _replicas! _combiners! _cb_combiners! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.log.NrLogTokens. (lib!exec.log.NrLogTokens./NrLogTokens _num_replicas! _replicas! _combiners! _cb_combiners! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas x) (lib!exec.log.NrLogTokens./NrLogTokens/?num_replicas x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/num_replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (<= 0 (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/replicas x) (lib!exec.log.NrLogTokens./NrLogTokens/?replicas x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/combiners x) (lib!exec.log.NrLogTokens./NrLogTokens/?combiners x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/combiners x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners x) (lib!exec.log.NrLogTokens./NrLogTokens/?cb_combiners x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance x) (lib!exec.log.NrLogTokens./NrLogTokens/?unbounded_log_instance x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (= (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance x) (lib!exec.log.NrLogTokens./NrLogTokens/?cyclic_buffer_instance x)) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)) (has_type (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. x)) (has_type x (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))))
(define-fun is-lib!exec.log.NrLogTokens./NrLogTokens_ ((c lib!exec.log.NrLogTokens.)) Bool ((_ is lib!exec.log.NrLogTokens./NrLogTokens) c))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/replicas x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/replicas x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/combiners x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/combiners x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.log.NrLogTokens.)) (! (=> (is-lib!exec.log.NrLogTokens./NrLogTokens_ x) (height_lt (height (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance x)) (height (Poly%lib!exec.log.NrLogTokens. x)))) :pattern ((height (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.replica.ReplicaToken.)) (! (= x (%Poly%lib!exec.replica.ReplicaToken. (Poly%lib!exec.replica.ReplicaToken. x))) :pattern ((Poly%lib!exec.replica.ReplicaToken. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.ReplicaToken.) (= x (Poly%lib!exec.replica.ReplicaToken. (%Poly%lib!exec.replica.ReplicaToken. x)))) :pattern ((has_type x TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((_rid! Int)) (! (=> (uInv SZ _rid!) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken./ReplicaToken _rid!)) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken./ReplicaToken _rid!)) TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((x lib!exec.replica.ReplicaToken.)) (! (= (lib!exec.replica.ReplicaToken./ReplicaToken/rid x) (lib!exec.replica.ReplicaToken./ReplicaToken/?rid x)) :pattern ((lib!exec.replica.ReplicaToken./ReplicaToken/rid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.ReplicaToken.) (uInv SZ (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. x)))) :pattern ((lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. x)) (has_type x TYPE%lib!exec.replica.ReplicaToken.)))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= x (%Poly%lib!exec.replica.ReplicatedDataStructure. (Poly%lib!exec.replica.ReplicatedDataStructure. x))) :pattern ((Poly%lib!exec.replica.ReplicatedDataStructure. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (= x (Poly%lib!exec.replica.ReplicatedDataStructure. (%Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_data! Poly) (_replica! Poly) (_combiner! Poly) (_cb_combiner! Poly)) (! (=> (and (has_type _data! DT&) (has_type _replica! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type _combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type _cb_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) (has_type (Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure _data! _replica! _combiner! _cb_combiner!)) (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure _data! _replica! _combiner! _cb_combiner!)) (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?data x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) DT&)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?replica x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?combiner x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?cb_combiner x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))))
(define-fun is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ ((c lib!exec.replica.ReplicatedDataStructure.)) Bool ((_ is lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure) c))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x))))))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= x (%Poly%lib!exec.replica.Replica. (Poly%lib!exec.replica.Replica. x))) :pattern ((Poly%lib!exec.replica.Replica. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (= x (Poly%lib!exec.replica.Replica. (%Poly%lib!exec.replica.Replica. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_replica_token! lib!exec.replica.ReplicaToken.) (_combiner! lib!exec.CachePadded.) (_contexts! Poly) (_collected_operations! Poly) (_collected_operations_per_thread! vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (_responses! Poly) (_data! lib!exec.CachePadded.) (_num_threads! Int) (_thread_tokens! Poly) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly) (_flat_combiner_instance! lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (=> (and (has_type (Poly%lib!exec.replica.ReplicaToken. _replica_token!) TYPE%lib!exec.replica.ReplicaToken.) (has_type (Poly%lib!exec.CachePadded. _combiner!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.))) (has_type _contexts! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type _collected_operations! (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type _responses! (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type (Poly%lib!exec.CachePadded. _data!) (TYPE%lib!exec.CachePadded. $ (TYPE%lib!exec.rwlock.RwLock. $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)))) (uInv 64 _num_threads!) (has_type _thread_tokens! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica./Replica _replica_token! _combiner! _contexts! _collected_operations! _collected_operations_per_thread! _responses! _data! _num_threads! _thread_tokens! _unbounded_log_instance! _cyclic_buffer_instance! _flat_combiner_instance!)) (TYPE%lib!exec.replica.Replica. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica./Replica _replica_token! _combiner! _contexts! _collected_operations! _collected_operations_per_thread! _responses! _data! _num_threads! _thread_tokens! _unbounded_log_instance! _cyclic_buffer_instance! _flat_combiner_instance!)) (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/replica_token x) (lib!exec.replica.Replica./Replica/?replica_token x)) :pattern ((lib!exec.replica.Replica./Replica/replica_token x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. x))) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/combiner x) (lib!exec.replica.Replica./Replica/?combiner x)) :pattern ((lib!exec.replica.Replica./Replica/combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)))) :pattern ((lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/contexts x) (lib!exec.replica.Replica./Replica/?contexts x)) :pattern ((lib!exec.replica.Replica./Replica/contexts x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/collected_operations x) (lib!exec.replica.Replica./Replica/?collected_operations x)) :pattern ((lib!exec.replica.Replica./Replica/collected_operations x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/collected_operations (%Poly%lib!exec.replica.Replica. x)) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.Replica./Replica/collected_operations (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/collected_operations_per_thread x) (lib!exec.replica.Replica./Replica/?collected_operations_per_thread x)) :pattern ((lib!exec.replica.Replica./Replica/collected_operations_per_thread x)))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/responses x) (lib!exec.replica.Replica./Replica/?responses x)) :pattern ((lib!exec.replica.Replica./Replica/responses x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/responses (%Poly%lib!exec.replica.Replica. x)) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.Replica./Replica/responses (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/data x) (lib!exec.replica.Replica./Replica/?data x)) :pattern ((lib!exec.replica.Replica./Replica/data x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%lib!exec.rwlock.RwLock. $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))) :pattern ((lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/num_threads x) (lib!exec.replica.Replica./Replica/?num_threads x)) :pattern ((lib!exec.replica.Replica./Replica/num_threads x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (uInv 64 (lib!exec.replica.Replica./Replica/num_threads (%Poly%lib!exec.replica.Replica. x)))) :pattern ((lib!exec.replica.Replica./Replica/num_threads (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/thread_tokens x) (lib!exec.replica.Replica./Replica/?thread_tokens x)) :pattern ((lib!exec.replica.Replica./Replica/thread_tokens x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/unbounded_log_instance x) (lib!exec.replica.Replica./Replica/?unbounded_log_instance x)) :pattern ((lib!exec.replica.Replica./Replica/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x) (lib!exec.replica.Replica./Replica/?cyclic_buffer_instance x)) :pattern ((lib!exec.replica.Replica./Replica/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/flat_combiner_instance x) (lib!exec.replica.Replica./Replica/?flat_combiner_instance x)) :pattern ((lib!exec.replica.Replica./Replica/flat_combiner_instance x)))))
(define-fun is-lib!exec.replica.Replica./Replica_ ((c lib!exec.replica.Replica.)) Bool ((_ is lib!exec.replica.Replica./Replica) c))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner x))) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner x)))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/contexts x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/contexts x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/collected_operations x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/collected_operations x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/responses x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/responses x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data x))) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data x)))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/thread_tokens x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/thread_tokens x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/unbounded_log_instance x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)) (! (= x (%Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x))) :pattern ((Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) (= x (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (%Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x)))) :pattern ((has_type x TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)))))
(assert (forall ((x lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)) (! (has_type (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x) TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) :pattern ((has_type (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x) TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (= x (%Poly%lib!exec.replica.ReplicaConfig. (Poly%lib!exec.replica.ReplicaConfig. x))) :pattern ((Poly%lib!exec.replica.ReplicaConfig. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&)) (= x (Poly%lib!exec.replica.ReplicaConfig. (%Poly%lib!exec.replica.ReplicaConfig. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_replica! Poly) (_combiner! Poly) (_cb_combiner! Poly) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type _replica! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type _combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type _cb_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.replica.ReplicaConfig. (lib!exec.replica.ReplicaConfig./ReplicaConfig _replica! _combiner! _cb_combiner! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.ReplicaConfig. (lib!exec.replica.ReplicaConfig./ReplicaConfig _replica! _combiner! _cb_combiner! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (= (lib!exec.replica.ReplicaConfig./ReplicaConfig/replica x) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?replica x)) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/replica x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&)) (has_type (lib!exec.replica.ReplicaConfig./ReplicaConfig/replica (%Poly%lib!exec.replica.ReplicaConfig. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/replica (%Poly%lib!exec.replica.ReplicaConfig. x)) (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (= (lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner x) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?combiner x)) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&)) (has_type (lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner (%Poly%lib!exec.replica.ReplicaConfig. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner (%Poly%lib!exec.replica.ReplicaConfig. x)) (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (= (lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner x) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?cb_combiner x)) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&)) (has_type (lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner (%Poly%lib!exec.replica.ReplicaConfig. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner (%Poly%lib!exec.replica.ReplicaConfig. x)) (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (= (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance x) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?unbounded_log_instance x)) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&)) (has_type (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (%Poly%lib!exec.replica.ReplicaConfig. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (%Poly%lib!exec.replica.ReplicaConfig. x)) (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (= (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance x) (lib!exec.replica.ReplicaConfig./ReplicaConfig/?cyclic_buffer_instance x)) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&)) (has_type (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance (%Poly%lib!exec.replica.ReplicaConfig. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance (%Poly%lib!exec.replica.ReplicaConfig. x)) (has_type x (TYPE%lib!exec.replica.ReplicaConfig. DT&. DT&))))))
(define-fun is-lib!exec.replica.ReplicaConfig./ReplicaConfig_ ((c lib!exec.replica.ReplicaConfig.)) Bool ((_ is lib!exec.replica.ReplicaConfig./ReplicaConfig) c))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (=> (is-lib!exec.replica.ReplicaConfig./ReplicaConfig_ x) (height_lt (height (lib!exec.replica.ReplicaConfig./ReplicaConfig/replica x)) (height (Poly%lib!exec.replica.ReplicaConfig. x)))) :pattern ((height (lib!exec.replica.ReplicaConfig./ReplicaConfig/replica x))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (=> (is-lib!exec.replica.ReplicaConfig./ReplicaConfig_ x) (height_lt (height (lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner x)) (height (Poly%lib!exec.replica.ReplicaConfig. x)))) :pattern ((height (lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner x))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (=> (is-lib!exec.replica.ReplicaConfig./ReplicaConfig_ x) (height_lt (height (lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner x)) (height (Poly%lib!exec.replica.ReplicaConfig. x)))) :pattern ((height (lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner x))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (=> (is-lib!exec.replica.ReplicaConfig./ReplicaConfig_ x) (height_lt (height (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance x)) (height (Poly%lib!exec.replica.ReplicaConfig. x)))) :pattern ((height (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.replica.ReplicaConfig.)) (! (=> (is-lib!exec.replica.ReplicaConfig./ReplicaConfig_ x) (height_lt (height (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance x)) (height (Poly%lib!exec.replica.ReplicaConfig. x)))) :pattern ((height (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance x))))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= x (%Poly%lib!exec.replica.CombinerLockStateGhost. (Poly%lib!exec.replica.CombinerLockStateGhost. x))) :pattern ((Poly%lib!exec.replica.CombinerLockStateGhost. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (= x (Poly%lib!exec.replica.CombinerLockStateGhost. (%Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_flat_combiner! lib!spec.flat_combiner.FlatCombiner.combiner.) (_collected_operations_perm! Poly) (_collected_operations_per_thread_perm! vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (_responses_token! Poly)) (! (=> (and (has_type _collected_operations_perm! (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type _responses_token! (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) (has_type (Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost _flat_combiner! _collected_operations_perm! _collected_operations_per_thread_perm! _responses_token!)) (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost _flat_combiner! _collected_operations_perm! _collected_operations_per_thread_perm! _responses_token!)) (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?flat_combiner x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner x)))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_perm x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (has_type (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_per_thread_perm x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm x)))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?responses_token x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (has_type (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))))))
(define-fun is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ ((c lib!exec.replica.CombinerLockStateGhost.)) Bool ((_ is lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost) c))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (=> (is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ x) (height_lt (height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x)) (height (Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x))))))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (=> (is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ x) (height_lt (height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x)) (height (Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= x (%Poly%lib!spec.types.ConcreteLogEntry. (Poly%lib!spec.types.ConcreteLogEntry. x))) :pattern ((Poly%lib!spec.types.ConcreteLogEntry. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.ConcreteLogEntry. (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (uInv 64 _node_id!)) (has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.ConcreteLogEntry. (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry _op! _node_id!)) (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?op x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (has_type (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/op (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.types.ConcreteLogEntry.)) (! (= (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x) (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/?node_id x)) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (uInv 64 (lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)))) :pattern ((lib!spec.types.ConcreteLogEntry./ConcreteLogEntry/node_id (%Poly%lib!spec.types.ConcreteLogEntry. x)) (has_type x (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= x (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. x))) :pattern ((Poly%lib!spec.unbounded_log.ReadonlyState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.ReadonlyState. (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Init/op x) (lib!spec.unbounded_log.ReadonlyState./Init/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int) (_ret! Poly)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!) (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/op x) (lib!spec.unbounded_log.ReadonlyState./Done/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/node_id x) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/ret x) (lib!spec.unbounded_log.ReadonlyState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= x (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. x))) :pattern ((Poly%lib!spec.unbounded_log.UpdateState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UpdateState. (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Init/op x) (lib!spec.unbounded_log.UpdateState./Init/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_idx! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/op x) (lib!spec.unbounded_log.UpdateState./Placed/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/idx x) (lib!spec.unbounded_log.UpdateState./Placed/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/ret x) (lib!spec.unbounded_log.UpdateState./Applied/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/idx x) (lib!spec.unbounded_log.UpdateState./Applied/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/ret x) (lib!spec.unbounded_log.UpdateState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/idx x) (lib!spec.unbounded_log.UpdateState./Done/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= x (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. x))) :pattern ((Poly%lib!spec.unbounded_log.CombinerState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (= x (Poly%lib!spec.unbounded_log.CombinerState. (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (has_type (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready) TYPE%lib!spec.unbounded_log.CombinerState.))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.)) (! (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Placed/queued_ops x) (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Placed/queued_ops x)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int)) (! (=> (<= 0 _lversion!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int) (_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _lversion!) (<= 0 _idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/queued_ops x) (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/lversion x) (lib!spec.unbounded_log.CombinerState./Loop/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/idx x) (lib!spec.unbounded_log.CombinerState./Loop/?idx x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/tail x) (lib!spec.unbounded_log.CombinerState./Loop/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_tail! Int)) (! (=> (<= 0 _tail!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x)))))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= x (%Poly%lib!spec.cyclicbuffer.StoredType. (Poly%lib!spec.cyclicbuffer.StoredType. x))) :pattern ((Poly%lib!spec.cyclicbuffer.StoredType. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.StoredType. (%Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cell_perms! Poly) (_log_entry! core!option.Option.)) (! (=> (and (has_type _cell_perms! (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)))) (has_type (Poly%core!option.Option. _log_entry!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.StoredType./StoredType _cell_perms! _log_entry!)) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x) (lib!spec.cyclicbuffer.StoredType./StoredType/?cell_perms x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&))))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (= (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x) (lib!spec.cyclicbuffer.StoredType./StoredType/?log_entry x)) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)))) :pattern ((lib!spec.cyclicbuffer.StoredType./StoredType/log_entry (%Poly%lib!spec.cyclicbuffer.StoredType. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.StoredType./StoredType_ ((c lib!spec.cyclicbuffer.StoredType.)) Bool ((_ is lib!spec.cyclicbuffer.StoredType./StoredType) c))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x)) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (lib!spec.cyclicbuffer.StoredType./StoredType/cell_perms x))))))
(assert (forall ((x lib!spec.cyclicbuffer.StoredType.)) (! (=> (is-lib!spec.cyclicbuffer.StoredType./StoredType_ x) (height_lt (height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x))) (height (Poly%lib!spec.cyclicbuffer.StoredType. x)))) :pattern ((height (Poly%core!option.Option. (lib!spec.cyclicbuffer.StoredType./StoredType/log_entry x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.ReaderState. (Poly%lib!spec.cyclicbuffer.ReaderState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.ReaderState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.ReaderState. (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int)) (! (=> (<= 0 _start!) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Starting _start!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Starting/start x) (lib!spec.cyclicbuffer.ReaderState./Starting/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Starting/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Range _start! _end! _cur!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/start x) (lib!spec.cyclicbuffer.ReaderState./Range/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/end x) (lib!spec.cyclicbuffer.ReaderState./Range/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Range/cur x) (lib!spec.cyclicbuffer.ReaderState./Range/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Range/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_start! Int) (_end! Int) (_cur! Int) (_val! lib!spec.cyclicbuffer.StoredType.)) (! (=> (and (<= 0 _start!) (<= 0 _end!) (<= 0 _cur!) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. _val!) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.ReaderState./Guard _start! _end! _cur! _val!)) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/start x) (lib!spec.cyclicbuffer.ReaderState./Guard/?start x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/start (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/end x) (lib!spec.cyclicbuffer.ReaderState./Guard/?end x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/end (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/cur x) (lib!spec.cyclicbuffer.ReaderState./Guard/?cur x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/cur (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (= (lib!spec.cyclicbuffer.ReaderState./Guard/val x) (lib!spec.cyclicbuffer.ReaderState./Guard/?val x)) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x))) (TYPE%lib!spec.cyclicbuffer.StoredType. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.ReaderState./Guard/val (%Poly%lib!spec.cyclicbuffer.ReaderState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.ReaderState./Guard_ ((c lib!spec.cyclicbuffer.ReaderState.)) Bool ((_ is lib!spec.cyclicbuffer.ReaderState./Guard) c))
(assert (forall ((x lib!spec.cyclicbuffer.ReaderState.)) (! (=> (is-lib!spec.cyclicbuffer.ReaderState./Guard_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x))) (height (Poly%lib!spec.cyclicbuffer.ReaderState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.StoredType. (lib!spec.cyclicbuffer.ReaderState./Guard/val x)))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= x (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. x))) :pattern ((Poly%lib!spec.cyclicbuffer.CombinerState. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (= x (Poly%lib!spec.cyclicbuffer.CombinerState. (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. lib!spec.cyclicbuffer.CombinerState./Idle) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.cyclicbuffer.ReaderState.)) (! (=> (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. _0!) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Reading _0!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Reading/0 x) (lib!spec.cyclicbuffer.CombinerState./Reading/?0 x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x))) (TYPE%lib!spec.cyclicbuffer.ReaderState. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Reading/0 (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_idx! Int) (_min_local_version! Int)) (! (=> (and (<= 0 _idx!) (<= 0 _min_local_version!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingHead _idx! _min_local_version!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x) (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/?min_local_version x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingHead/min_local_version (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_observed_head! Int)) (! (=> (<= 0 _observed_head!) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./AdvancingTail _observed_head!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x) (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/?observed_head x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./AdvancingTail/observed_head (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_cur_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _cur_idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CombinerState./Appending _cur_idx! _tail!)) (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x) (lib!spec.cyclicbuffer.CombinerState./Appending/?cur_idx x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/cur_idx (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (= (lib!spec.cyclicbuffer.CombinerState./Appending/tail x) (lib!spec.cyclicbuffer.CombinerState./Appending/?tail x)) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((lib!spec.cyclicbuffer.CombinerState./Appending/tail (%Poly%lib!spec.cyclicbuffer.CombinerState. x)) (has_type x (TYPE%lib!spec.cyclicbuffer.CombinerState. DT&. DT&))))))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Reading_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Reading) c))
(assert (forall ((x lib!spec.cyclicbuffer.CombinerState.)) (! (=> (is-lib!spec.cyclicbuffer.CombinerState./Reading_ x) (height_lt (height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x))) (height (Poly%lib!spec.cyclicbuffer.CombinerState. x)))) :pattern ((height (Poly%lib!spec.cyclicbuffer.ReaderState. (lib!spec.cyclicbuffer.CombinerState./Reading/0 x)))))))
(assert (forall ((x lib!spec.flat_combiner.ClientState.)) (! (= x (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. x))) :pattern ((Poly%lib!spec.flat_combiner.ClientState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.ClientState.) (= x (Poly%lib!spec.flat_combiner.ClientState. (%Poly%lib!spec.flat_combiner.ClientState. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.ClientState.)))))
(assert (has_type (Poly%lib!spec.flat_combiner.ClientState. lib!spec.flat_combiner.ClientState./Idle) TYPE%lib!spec.flat_combiner.ClientState.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting _0!)) TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting _0!)) TYPE%lib!spec.flat_combiner.ClientState.)))))
(assert (forall ((x lib!spec.flat_combiner.ClientState.)) (! (= (lib!spec.flat_combiner.ClientState./Waiting/0 x) (lib!spec.flat_combiner.ClientState./Waiting/?0 x)) :pattern ((lib!spec.flat_combiner.ClientState./Waiting/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.ClientState.) (<= 0 (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. x)))) :pattern ((lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. x)) (has_type x TYPE%lib!spec.flat_combiner.ClientState.)))))
(assert (forall ((x lib!exec.CachePadded.)) (! (= x (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. x))) :pattern ((Poly%lib!exec.CachePadded. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (= x (Poly%lib!exec.CachePadded. (%Poly%lib!exec.CachePadded. x)))) :pattern ((has_type x (TYPE%lib!exec.CachePadded. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))) :pattern ((has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))))))
(assert (forall ((x lib!exec.CachePadded.)) (! (= (lib!exec.CachePadded./CachePadded/0 x) (lib!exec.CachePadded./CachePadded/?0 x)) :pattern ((lib!exec.CachePadded./CachePadded/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (has_type (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) T&)) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) (has_type x (TYPE%lib!exec.CachePadded. T&. T&))))))
(define-fun is-lib!exec.CachePadded./CachePadded_ ((c lib!exec.CachePadded.)) Bool ((_ is lib!exec.CachePadded./CachePadded) c))
(assert (forall ((x lib!exec.CachePadded.)) (! (=> (is-lib!exec.CachePadded./CachePadded_ x) (height_lt (height (lib!exec.CachePadded./CachePadded/0 x)) (height (Poly%lib!exec.CachePadded. x)))) :pattern ((height (lib!exec.CachePadded./CachePadded/0 x))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= x (%Poly%lib!exec.NodeReplicated. (Poly%lib!exec.NodeReplicated. x))) :pattern ((Poly%lib!exec.NodeReplicated. x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (= x (Poly%lib!exec.NodeReplicated. (%Poly%lib!exec.NodeReplicated. x)))) :pattern ((has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type) (_log! lib!exec.log.NrLog.) (_replicas! Poly) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly)) (! (=> (and (has_type (Poly%lib!exec.log.NrLog. _log!) (TYPE%lib!exec.log.NrLog. DT&. DT&)) (has_type _replicas! (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.NodeReplicated. (lib!exec.NodeReplicated./NodeReplicated _log! _replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.NodeReplicated. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.NodeReplicated. (lib!exec.NodeReplicated./NodeReplicated _log! _replicas! _unbounded_log_instance! _cyclic_buffer_instance!)) (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= (lib!exec.NodeReplicated./NodeReplicated/log x) (lib!exec.NodeReplicated./NodeReplicated/?log x)) :pattern ((lib!exec.NodeReplicated./NodeReplicated/log x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (has_type (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. x))) (TYPE%lib!exec.log.NrLog. DT&. DT&))) :pattern ((lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. x)) (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= (lib!exec.NodeReplicated./NodeReplicated/replicas x) (lib!exec.NodeReplicated./NodeReplicated/?replicas x)) :pattern ((lib!exec.NodeReplicated./NodeReplicated/replicas x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (has_type (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. x)) (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. x)) (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance x) (lib!exec.NodeReplicated./NodeReplicated/?unbounded_log_instance x)) :pattern ((lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (has_type (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (%Poly%lib!exec.NodeReplicated. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (%Poly%lib!exec.NodeReplicated. x)) (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (= (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance x) (lib!exec.NodeReplicated./NodeReplicated/?cyclic_buffer_instance x)) :pattern ((lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance x)))))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&)) (has_type (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (%Poly%lib!exec.NodeReplicated. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (%Poly%lib!exec.NodeReplicated. x)) (has_type x (TYPE%lib!exec.NodeReplicated. DT&. DT&))))))
(define-fun is-lib!exec.NodeReplicated./NodeReplicated_ ((c lib!exec.NodeReplicated.)) Bool ((_ is lib!exec.NodeReplicated./NodeReplicated) c))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (=> (is-lib!exec.NodeReplicated./NodeReplicated_ x) (height_lt (height (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log x))) (height (Poly%lib!exec.NodeReplicated. x)))) :pattern ((height (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log x)))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (=> (is-lib!exec.NodeReplicated./NodeReplicated_ x) (height_lt (height (lib!exec.NodeReplicated./NodeReplicated/replicas x)) (height (Poly%lib!exec.NodeReplicated. x)))) :pattern ((height (lib!exec.NodeReplicated./NodeReplicated/replicas x))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (=> (is-lib!exec.NodeReplicated./NodeReplicated_ x) (height_lt (height (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance x)) (height (Poly%lib!exec.NodeReplicated. x)))) :pattern ((height (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance x))))))
(assert (forall ((x lib!exec.NodeReplicated.)) (! (=> (is-lib!exec.NodeReplicated./NodeReplicated_ x) (height_lt (height (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance x)) (height (Poly%lib!exec.NodeReplicated. x)))) :pattern ((height (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance x))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(declare-fun tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!invariant.InvariantPredicate. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!ThreadTokenT. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(declare-fun tr_bound%lib!NodeReplicatedT. (Dcr Type Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (proj%%lib!NodeReplicatedT./Replica $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&) $) :pattern ((proj%%lib!NodeReplicatedT./Replica $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (proj%lib!NodeReplicatedT./Replica $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&) (TYPE%lib!exec.replica.Replica. DT&. DT&)) :pattern ((proj%lib!NodeReplicatedT./Replica $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (proj%%lib!NodeReplicatedT./TT $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&) $) :pattern ((proj%%lib!NodeReplicatedT./TT $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (= (proj%lib!NodeReplicatedT./TT $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&) (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) :pattern ((proj%lib!NodeReplicatedT./TT $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT&)))))
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(declare-fun vstd!atomic.impl&%1.id.? (Poly) Int)
(declare-fun vstd!atomic.impl&%9.id.? (Poly) Int)
(declare-fun vstd!atomic_ghost.impl&%1.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(declare-fun vstd!atomic_ghost.impl&%1.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!atomic_ghost.impl&%21.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(declare-fun vstd!atomic_ghost.impl&%21.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!cell.impl&%2.view.? (Dcr Type Poly) vstd!cell.PointsToData.)
(declare-fun vstd!cell.impl&%3.id.? (Dcr Type Poly) vstd!cell.CellId.)
(declare-fun vstd!invariant.impl&%0.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? (Dcr Type Poly) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? (Dcr Type Poly) lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? (Dcr Type Poly) vstd!seq.Seq<vstd!cell.CellId.>.)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? (Dcr Type Poly) Int)
(declare-fun lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? (Dcr Type Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly) lib!spec.flat_combiner.FlatCombiner.clients_token_data.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? (Poly) Int)
(declare-fun lib!exec.context.impl&%0.wf2.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!exec.context.impl&%0.wf.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!exec.context.impl&%0.thread_id_spec.? (Dcr Type Poly) Int)
(declare-fun lib!exec.context.impl&%0.replica_token.? (Dcr Type Poly) lib!exec.replica.ReplicaToken.)
(declare-fun lib!exec.context.impl&%0.replica_id_spec.? (Dcr Type Poly) Int)
(declare-fun lib!exec.context.impl&%3.wf.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!exec.log.impl&%1.wf.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!exec.log.impl&%6.wf.? (Dcr Type Poly) Bool)
(declare-fun lib!exec.log.impl&%10.wf.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!exec.replica.impl&%0.wf.? (Poly Poly) Bool)
(declare-fun lib!exec.replica.impl&%0.id_spec.? (Poly) Int)
(declare-fun lib!exec.replica.impl&%0.view.? (Poly) Int)
(declare-fun lib!exec.replica.impl&%1.wf.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!exec.replica.impl&%3.wf.? (Dcr Type Poly) Bool)
(declare-fun lib!exec.replica.impl&%4.spec_id.? (Dcr Type Poly) Int)
(declare-fun lib!exec.replica.impl&%5.wf.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!exec.rwlock.impl&%3.wf.? (Dcr Type Poly) Bool)
(declare-fun lib!exec.rwlock.impl&%4.inv.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!exec.rwlock.impl&%4.max_threads.? (Dcr Type Poly) Int)
(declare-fun lib!spec.unbounded_log.impl&%0.is_Init.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.unbounded_log.impl&%0.get_Init_op.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.unbounded_log.impl&%0.is_Done.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_ret.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.unbounded_log.impl&%3.is_Init.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.unbounded_log.impl&%3.get_Init_op.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.unbounded_log.impl&%3.is_Done.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.unbounded_log.impl&%3.get_Done_ret.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.unbounded_log.impl&%5.is_Ready.? (Poly) Bool)
(declare-fun lib!spec.cyclicbuffer.impl&%2.is_Idle.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.flat_combiner.impl&%0.is_Idle.? (Poly) Bool)
(declare-fun lib!constants.MAX_REPLICAS.? () Int)
(declare-fun lib!constants.LOG_SIZE.? () Int)
(declare-fun lib!constants.MAX_THREADS_PER_REPLICA.? () Int)
(declare-fun lib!ThreadTokenT.wf.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!ThreadTokenT.wf%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!ThreadTokenT.replica_id_spec.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!ThreadTokenT.replica_id_spec%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!Dispatch.view.? (Dcr Type Poly) Poly)
(declare-fun lib!Dispatch.view%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!Dispatch.init_spec.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.init_spec%default%.? (Dcr Type) Poly)
(declare-fun lib!NodeReplicatedT.wf.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!NodeReplicatedT.wf%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!NodeReplicatedT.replicas.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!NodeReplicatedT.replicas%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!NodeReplicatedT.unbounded_log_instance.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!NodeReplicatedT.unbounded_log_instance%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!is_readonly_ticket.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!is_readonly_stub.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!is_update_ticket.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!is_update_stub.? (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!Dispatch.view.? Self%&. Self%& self!) (proj%lib!Dispatch./View Self%&. Self%&))) :pattern ((lib!Dispatch.view.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!Dispatch.init_spec.? Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&)) :pattern ((lib!Dispatch.init_spec.? Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (Replica&. Dcr) (Replica& Type) (self! Poly) (replica! Poly)) (! (=> (and (has_type self! Self%&) (has_type replica! Replica&)) (has_type (lib!ThreadTokenT.wf.? Self%&. Self%& DT&. DT& Replica&. Replica& self! replica!) BOOL)) :pattern ((lib!ThreadTokenT.wf.? Self%&. Self%& DT&. DT& Replica&. Replica& self! replica!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (Replica&. Dcr) (Replica& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!ThreadTokenT.replica_id_spec.? Self%&. Self%& DT&. DT& Replica&. Replica& self!) NAT)) :pattern ((lib!ThreadTokenT.replica_id_spec.? Self%&. Self%& DT&. DT& Replica&. Replica& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!) BOOL)) :pattern ((lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!) (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!constants.MAX_REPLICAS.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_REPLICAS.) (= lib!constants.MAX_REPLICAS.? 16)))
(assert (uInv SZ lib!constants.MAX_REPLICAS.?))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)))))
(declare-fun req%lib!NodeReplicatedT.new. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (num_replicas! Poly) (chg_mem_affinity! Poly)) (! (= (req%lib!NodeReplicatedT.new. Self%&. Self%& DT&. DT& num_replicas! chg_mem_affinity!) (=> %%global_location_label%%0 (and (< 0 (%I num_replicas!)) (<= (%I num_replicas!) lib!constants.MAX_REPLICAS.?)))) :pattern ((req%lib!NodeReplicatedT.new. Self%&. Self%& DT&. DT& num_replicas! chg_mem_affinity!)))))
(declare-fun ens%lib!NodeReplicatedT.new. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (num_replicas! Poly) (chg_mem_affinity! Poly) (res! Poly)) (! (= (ens%lib!NodeReplicatedT.new. Self%&. Self%& DT&. DT& num_replicas! chg_mem_affinity! res!) (and (has_type res! Self%&) (and (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& res!)) (= (vstd!std_specs.vec.spec_vec_len.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& res!)) (%I num_replicas!))))) :pattern ((ens%lib!NodeReplicatedT.new. Self%&. Self%& DT&. DT& num_replicas! chg_mem_affinity! res!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!) NAT)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (%I (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!))))))
(declare-fun req%lib!NodeReplicatedT.register. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre%self! Poly) (replica_id! Poly)) (! (= (req%lib!NodeReplicatedT.register. Self%&. Self%& DT&. DT& pre%self! replica_id!) (=> %%global_location_label%%3 (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& pre%self!)))) :pattern ((req%lib!NodeReplicatedT.register. Self%&. Self%& DT&. DT& pre%self! replica_id!)))))
(declare-fun ens%lib!NodeReplicatedT.register. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (pre%self! Poly) (self! Poly) (replica_id! Poly) (result! Poly)) (! (= (ens%lib!NodeReplicatedT.register. Self%&. Self%& DT&. DT& pre%self! self! replica_id! result!) (and (has_type result! (TYPE%core!option.Option. (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&))) (has_type self! Self%&) (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!)) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. result!)))) (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. result!)) (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) replica_id!)))))) :pattern ((ens%lib!NodeReplicatedT.register. Self%&. Self%& DT&. DT& pre%self! self! replica_id! result!)))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Init.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Init_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!is_update_ticket.))
(assert (=> (fuel_bool fuel%lib!is_update_ticket.) (forall ((DT&. Dcr) (DT& Type) (ticket! Poly) (op! Poly) (log! Poly)) (! (= (lib!is_update_ticket.? DT&. DT& ticket! op! log!) (and (and (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& ticket!))))))) (= (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& ticket!))))))) op!)) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& ticket!)))) log!))) :pattern ((lib!is_update_ticket.? DT&. DT& ticket! op! log!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!) E&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Done.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Done_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!))))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!is_update_stub.))
(assert (=> (fuel_bool fuel%lib!is_update_stub.) (forall ((DT&. Dcr) (DT& Type) (stub! Poly) (rid! Poly) (result! Poly) (log! Poly)) (! (= (lib!is_update_stub.? DT&. DT& stub! rid! result! log!) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& stub!)))) log!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& stub!)))) (%I rid!))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& stub!)))))))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& stub!))))))) result!))) :pattern ((lib!is_update_stub.? DT&. DT& stub! rid! result! log!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Err.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Err.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Err_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Err_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Err_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Err/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(declare-fun req%lib!NodeReplicatedT.execute_mut. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly) (op! Poly) (tkn! Poly) (ticket! Poly)) (! (= (req%lib!NodeReplicatedT.execute_mut. Self%&. Self%& DT&. DT& self! op! tkn! ticket!) (and (=> %%global_location_label%%4 (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!))) (=> %%global_location_label%%5 (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn! (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) (lib!ThreadTokenT.replica_id_spec.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn!))))) (=> %%global_location_label%%6 (lib!is_update_ticket.? DT&. DT& ticket! op! (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!))))) :pattern ((req%lib!NodeReplicatedT.execute_mut. Self%&. Self%& DT&. DT& self! op! tkn! ticket!)))))
(declare-fun ens%lib!NodeReplicatedT.execute_mut. (Dcr Type Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly) (op! Poly) (tkn! Poly) (ticket! Poly) (result! Poly)) (! (= (ens%lib!NodeReplicatedT.execute_mut. Self%&. Self%& DT&. DT& self! op! tkn! ticket! result!) (and (has_type result! (TYPE%core!result.Result. $ (TYPE%tuple%3. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) $ (TYPE%tuple%2. (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)))) (and (lib!is_update_stub.? DT&. DT& (tuple%3./tuple%3/2 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (I (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& ticket!))))) (tuple%3./tuple%3/0 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!)) (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (tuple%3./tuple%3/1 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) (lib!ThreadTokenT.replica_id_spec.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn!)))))) (=> (%B (B (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)))) (and (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Err/0 (%Poly%core!result.Result. result!)))) ticket!) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Err/0 (%Poly%core!result.Result. result!)))) tkn!))))) :pattern ((ens%lib!NodeReplicatedT.execute_mut. Self%&. Self%& DT&. DT& self! op! tkn! ticket! result!)))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_Init.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Init_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_Init.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!is_readonly_ticket.))
(assert (=> (fuel_bool fuel%lib!is_readonly_ticket.) (forall ((DT&. Dcr) (DT& Type) (ticket! Poly) (op! Poly) (log! Poly)) (! (= (lib!is_readonly_ticket.? DT&. DT& ticket! op! log!) (and (and (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& ticket!))))))) (= (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& ticket!))))))) op!)) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& ticket!)))) log!))) :pattern ((lib!is_readonly_ticket.? DT&. DT& ticket! op! log!))))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_Done.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Done_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_Done.? DT&. DT& self!))))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!is_readonly_stub.))
(assert (=> (fuel_bool fuel%lib!is_readonly_stub.) (forall ((DT&. Dcr) (DT& Type) (stub! Poly) (rid! Poly) (result! Poly) (log! Poly)) (! (= (lib!is_readonly_stub.? DT&. DT& stub! rid! result! log!) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& stub!)))) log!) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& stub!)))) (%I rid!))) (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& stub!)))))))) (= (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& stub!))))))) result!))) :pattern ((lib!is_readonly_stub.? DT&. DT& stub! rid! result! log!))))))
(declare-fun req%lib!NodeReplicatedT.execute. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly) (op! Poly) (tkn! Poly) (ticket! Poly)) (! (= (req%lib!NodeReplicatedT.execute. Self%&. Self%& DT&. DT& self! op! tkn! ticket!) (and (=> %%global_location_label%%7 (%B (lib!NodeReplicatedT.wf.? Self%&. Self%& DT&. DT& self!))) (=> %%global_location_label%%8 (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn! (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) (lib!ThreadTokenT.replica_id_spec.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn!))))) (=> %%global_location_label%%9 (lib!is_readonly_ticket.? DT&. DT& ticket! op! (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!))))) :pattern ((req%lib!NodeReplicatedT.execute. Self%&. Self%& DT&. DT& self! op! tkn! ticket!)))))
(declare-fun ens%lib!NodeReplicatedT.execute. (Dcr Type Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (self! Poly) (op! Poly) (tkn! Poly) (ticket! Poly) (result! Poly)) (! (= (ens%lib!NodeReplicatedT.execute. Self%&. Self%& DT&. DT& self! op! tkn! ticket! result!) (and (has_type result! (TYPE%core!result.Result. $ (TYPE%tuple%3. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) $ (TYPE%tuple%2. (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)))) (and (lib!is_readonly_stub.? DT&. DT& (tuple%3./tuple%3/2 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (I (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& ticket!))))) (tuple%3./tuple%3/0 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (lib!NodeReplicatedT.unbounded_log_instance.? Self%&. Self%& DT&. DT& self!)) (%B (lib!ThreadTokenT.wf.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (tuple%3./tuple%3/1 (%Poly%tuple%3. (core!result.Result./Ok/0 (%Poly%core!result.Result. result!)))) (vstd!seq.Seq.index.? (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&)) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!NodeReplicatedT.replicas.? Self%&. Self%& DT&. DT& self!)) (lib!ThreadTokenT.replica_id_spec.? (proj%%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./TT Self%&. Self%& DT&. DT&) DT&. DT& (proj%%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) (proj%lib!NodeReplicatedT./Replica Self%&. Self%& DT&. DT&) tkn!)))))) (=> (%B (B (is-core!result.Result./Err_ (%Poly%core!result.Result. result!)))) (and (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Err/0 (%Poly%core!result.Result. result!)))) ticket!) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Err/0 (%Poly%core!result.Result. result!)))) tkn!))))) :pattern ((ens%lib!NodeReplicatedT.execute. Self%&. Self%& DT&. DT& self! op! tkn! ticket! result!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%12 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%13 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)))))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)))))
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)))))
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)))))
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)))))
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)))))
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)))))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%14 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%15 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)))))
(declare-fun req%alloc!vec.impl&%1.insert. (Dcr Type Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (i! Int) (element! Poly)) (! (= (req%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! i! element!) (=> %%global_location_label%%16 (<= i! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& pre%vec!)))) :pattern ((req%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! i! element!)))))
(declare-fun ens%alloc!vec.impl&%1.insert. (Dcr Type Dcr Type Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! vec! i! element!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq_lib.impl&%0.insert.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!) element!)))) :pattern ((ens%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! vec! i! element!)))))
(declare-fun req%vstd!seq_lib.impl&%0.remove. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!) (=> %%global_location_label%%17 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) (vstd!seq.Seq.subrange.? A&. A& self! (I (Add (%I i!) 1)) (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)))))
(declare-fun req%alloc!vec.impl&%1.remove. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (i! Int)) (! (= (req%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! i!) (=> %%global_location_label%%18 (< i! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& pre%vec!)))) :pattern ((req%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! i!)))))
(declare-fun ens%alloc!vec.impl&%1.remove. (Dcr Type Dcr Type Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! vec! i! element!) (and (has_type element! T&) (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!))) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq_lib.impl&%0.remove.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!))))) :pattern ((ens%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! vec! i! element!)))))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%19 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!cell.PointsTo. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& self!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((vstd!cell.impl&%2.view.? V&. V& self!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!invariant.AtomicInvariant. K&. K& V&. V& Pred&. Pred&)) (has_type (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) K&)) :pattern ((vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!)))))
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%20 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%21 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%22 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%23 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%24 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%25 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%26 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%27 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%28 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%29 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%30 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%31 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%32 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%33 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%34 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%35 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%36 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%37 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%38 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%39 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%40 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%41 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!))))))
(declare-fun ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. (Dcr Type Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))))) (and (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$))))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (and (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))))))
(declare-fun ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. (Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) (Poly%fun%1. pred!)) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! (Poly%fun%1. pred!)) (vstd!seq_lib.impl&%0.filter.? A&. A& b! (Poly%fun%1. pred!))))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!)))))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! pred!) (vstd!seq_lib.impl&%0.filter.? A&. A& b! pred!)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)))))
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!)))))
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%42 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%43 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%44 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%45 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%46 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%47 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%48 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%49 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%50 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%51 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%52 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%53 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%54 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%55 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%56 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%57 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%58 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(assert (fuel_bool_default fuel%lib!constants.LOG_SIZE.))
(assert (=> (fuel_bool fuel%lib!constants.LOG_SIZE.) (= lib!constants.LOG_SIZE.? (uClip SZ (Mul 512 1024)))))
(assert (uInv SZ lib!constants.LOG_SIZE.?))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& self!)))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& self!)))))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (s! Poly)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. DT&. DT& self! s!) (and (has_type s! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (= self! s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. DT&. DT& self! s!)))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& self!)))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&)) (has_type (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& self!)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& self!)))))
(declare-fun ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (s! Poly)) (! (= (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. DT&. DT& self! s!) (and (has_type s! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (= self! s!))) :pattern ((ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. DT&. DT& self! s!)))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (has_type (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& self!)))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& self!)))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) (<= 0 (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& self!))) :pattern ((lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? self!)))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%0.is_Idle.))
(define-fun is-lib!spec.flat_combiner.ClientState./Idle_ ((c lib!spec.flat_combiner.ClientState.)) Bool ((_ is lib!spec.flat_combiner.ClientState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%0.is_Idle.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%0.is_Idle.? self!) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. self!))) :pattern ((lib!spec.flat_combiner.impl&%0.is_Idle.? self!))))))
(declare-fun ens%lib!VERUS_layout_of_usize. () Bool)
(assert (= ens%lib!VERUS_layout_of_usize. (= (vstd!layout.size_of.? $ (UINT SZ)) 8)))
(assert (= (vstd!layout.size_of.? $ (UINT SZ)) 8))
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_len.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_len.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!) (I (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!)))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (UINT 64) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))))))
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ BOOL G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&))))))
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%21.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%21.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool/patomic (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) :pattern ((vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%21.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%21.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) :pattern ((vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!)))))
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%8.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%8.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%38.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%38.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.wf.) (forall ((self! Poly) (max_replicas! Poly)) (! (= (lib!exec.replica.impl&%0.wf.? self! max_replicas!) (< (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!)) (%I max_replicas!))) :pattern ((lib!exec.replica.impl&%0.wf.? self! max_replicas!))))))
(assert (fuel_bool_default fuel%lib!constants.MAX_THREADS_PER_REPLICA.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_THREADS_PER_REPLICA.) (= lib!constants.MAX_THREADS_PER_REPLICA.? 128)))
(assert (uInv SZ lib!constants.MAX_THREADS_PER_REPLICA.?))
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.wf2.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.wf2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (num_replicas! Poly)) (! (= (lib!exec.context.impl&%0.wf2.? DT&. DT& self! num_replicas!) (and (and (and (and (lib!exec.replica.impl&%0.wf.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!))) num_replicas!) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))))))) (< (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!)) lib!constants.MAX_THREADS_PER_REPLICA.?)) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. self!)))))))))))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))) (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!))))) :pattern ((lib!exec.context.impl&%0.wf2.? DT&. DT& self! num_replicas!))))))
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.id_spec.) (forall ((self! Poly)) (! (= (lib!exec.replica.impl&%0.id_spec.? self!) (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!))) :pattern ((lib!exec.replica.impl&%0.id_spec.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.replica.ReplicaToken.) (<= 0 (lib!exec.replica.impl&%0.id_spec.? self!))) :pattern ((lib!exec.replica.impl&%0.id_spec.? self!)))))
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%4.spec_id.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%4.spec_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!) (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.replica.Replica. DT&. DT&)) (<= 0 (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!))) :pattern ((lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!exec.replica.impl&%0.view.? self!) (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!))) :pattern ((lib!exec.replica.impl&%0.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.replica.ReplicaToken.) (<= 0 (lib!exec.replica.impl&%0.view.? self!))) :pattern ((lib!exec.replica.impl&%0.view.? self!)))))
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.thread_id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.thread_id_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!) (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!))) :pattern ((lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (<= 0 (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!))) :pattern ((lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (replica! Poly)) (! (= (lib!exec.context.impl&%0.wf.? DT&. DT& self! replica!) (and (and (and (lib!exec.context.impl&%0.wf2.? DT&. DT& self! (I (nClip (Add (lib!exec.replica.impl&%4.spec_id.? DT&. DT& replica!) 1)))) (= (lib!exec.replica.impl&%0.view.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!)))) (lib!exec.replica.impl&%4.spec_id.? DT&. DT& replica!))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))) (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. replica!)))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. self!)))))) (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. replica!))) (I (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!)))))))))))) :pattern ((lib!exec.context.impl&%0.wf.? DT&. DT& self! replica!))))))
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.replica_token.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.replica_token.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.context.impl&%0.replica_token.? DT&. DT& self!) (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!))) :pattern ((lib!exec.context.impl&%0.replica_token.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.impl&%0.replica_token.? DT&. DT& self!)) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((lib!exec.context.impl&%0.replica_token.? DT&. DT& self!)))))
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.replica_id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.replica_id_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!) (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!))))) :pattern ((lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!))))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (<= 0 (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!))) :pattern ((lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (UINT 64) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (UINT 64) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&))))))
(assert (fuel_bool_default fuel%lib!exec.context.impl&%3.wf.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%3.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (thread_idx! Poly)) (! (= (lib!exec.context.impl&%3.wf.? DT&. DT& self! thread_idx!) (and (and (and (and (and (= (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. self!)) (%I thread_idx!)) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))) (= (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/flat_combiner_instance (%Poly%lib!exec.context.Context. self!)))) (= (tuple%4./tuple%4/1 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!)))))))) (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. self!)))) (= (%Poly%lib!exec.CachePadded. (tuple%4./tuple%4/2 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. self!)))) (= (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. self!))))) :pattern ((lib!exec.context.impl&%3.wf.? DT&. DT& self! thread_idx!))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ BOOL $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ BOOL $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&))))))
(assert (fuel_bool_default fuel%lib!exec.log.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%1.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (idx! Poly) (cb_inst! Poly)) (! (= (lib!exec.log.impl&%1.wf.? DT&. DT& self! idx! cb_inst!) (and (and (and (and (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. self!)) cb_inst!) (= (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. self!)) (%I idx!))) (vstd!atomic_ghost.impl&%21.well_formed.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!))))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%21.constant.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!))))))) (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_idx (%Poly%lib!exec.log.BufferEntry. self!)))) (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%21.constant.? $ (TYPE%tuple%2. (GHOST $) NAT (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.alive_bits. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_BufferEntry_alive. (Poly%vstd!atomic_ghost.AtomicBool. (lib!exec.log.BufferEntry./BufferEntry/alive (%Poly%lib!exec.log.BufferEntry. self!)))))) (lib!exec.log.BufferEntry./BufferEntry/cyclic_buffer_instance (%Poly%lib!exec.log.BufferEntry. self!))))) :pattern ((lib!exec.log.impl&%1.wf.? DT&. DT& self! idx! cb_inst!))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (UINT 64) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)))))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (UINT 64) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)))))))
(assert (fuel_bool_default fuel%lib!exec.log.impl&%6.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%6.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.log.impl&%6.wf.? DT&. DT& self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (let ((tmp%%$ (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (and (< 0 tmp%%$) (<= tmp%%$ lib!constants.MAX_REPLICAS.?))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) lib!constants.LOG_SIZE.?)) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.buffer_size.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) (vstd!seq.Seq.len.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))))) (= (vstd!cell.impl&%3.id.? $ (TYPE%core!option.Option. $ (TYPE%lib!spec.types.ConcreteLogEntry. DT&. DT&)) (lib!exec.log.BufferEntry./BufferEntry/log_entry (%Poly%lib!exec.log.BufferEntry. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$)))) (%Poly%vstd!cell.CellId. (vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%vstd!cell.CellId. (Poly%vstd!seq.Seq<vstd!cell.CellId.>. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.cell_ids.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) lib!constants.LOG_SIZE.?) (lib!exec.log.impl&%1.wf.? DT&. DT& (vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$) i$ (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.log.BufferEntry. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/slog (%Poly%lib!exec.log.NrLog. self!))) i$))))) (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/num_replicas (%Poly%lib!exec.log.NrLog. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. self!))))))) (= (vstd!atomic_ghost.impl&%1.constant.? (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_version_upper_bound. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/version_upper_bound (%Poly%lib!exec.log.NrLog. self!)))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. self!))))))) (= (vstd!atomic_ghost.impl&%1.constant.? (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.head. DT&. DT&) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_head. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/head (%Poly%lib!exec.log.NrLog. self!)))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!))))))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!)))))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.tail. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_tail. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.log.NrLog./NrLog/tail (%Poly%lib!exec.log.NrLog. self!)))))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!)))))) (and (and (and (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))) (= (tuple%3./tuple%3/0 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%3./tuple%3/1 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. self!)))) (= (tuple%3./tuple%3/2 (%Poly%tuple%3. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))) i$)))) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&) $ INT) $ (TYPE%tuple%2. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.local_versions. DT&. DT&)) $ TYPE%lib!exec.log.InvariantPredicate_auto_NrLog_local_versions.)) $ TYPE%alloc!alloc.Global.) (lib!exec.log.NrLog./NrLog/local_versions (%Poly%lib!exec.log.NrLog. self!))) i$)))))))) :pattern ((lib!exec.log.impl&%6.wf.? DT&. DT& self!))))))
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_Ready.))
(define-fun is-lib!spec.unbounded_log.CombinerState./Ready_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Ready) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_Ready.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_Ready.? self!) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_Ready.? self!))))))
(assert (fuel_bool_default fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle.))
(define-fun is-lib!spec.cyclicbuffer.CombinerState./Idle_ ((c lib!spec.cyclicbuffer.CombinerState.)) Bool ((_ is lib!spec.cyclicbuffer.CombinerState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.cyclicbuffer.impl&%2.is_Idle.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.cyclicbuffer.impl&%2.is_Idle.? DT&. DT& self!) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. self!))) :pattern ((lib!spec.cyclicbuffer.impl&%2.is_Idle.? DT&. DT& self!))))))
(assert (fuel_bool_default fuel%lib!exec.log.impl&%10.wf.))
(assert (=> (fuel_bool fuel%lib!exec.log.impl&%10.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (num_replicas! Poly)) (! (= (lib!exec.log.impl&%10.wf.? DT&. DT& self! num_replicas!) (and (and (and (and (and (= (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)) (%I num_replicas!)) (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. self!))) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. self!))) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!))) i$) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. self!)))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (%I i$))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (lib!Dispatch.init_spec.? DT&. DT&))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!))) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/replicas (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!))) i$) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. self!)))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (%I i$))) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!))) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!exec.log.NrLogTokens./NrLogTokens/num_replicas (%Poly%lib!exec.log.NrLogTokens. self!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!))) i$) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))) (%I i$))) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!))) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) (lib!exec.log.NrLogTokens./NrLogTokens/cb_combiners (%Poly%lib!exec.log.NrLogTokens. self!)) i$)))))) :pattern ((lib!exec.log.impl&%10.wf.? DT&. DT& self! num_replicas!))))))
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%1.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (nid! Poly) (inst! Poly) (cb! Poly)) (! (= (lib!exec.replica.impl&%1.wf.? DT&. DT& self! nid! inst! cb!) (and (and (and (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) inst!) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) inst!)) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) (lib!Dispatch.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (%Poly%lib!exec.replica.ReplicatedDataStructure. self!))))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) (%I nid!))) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))))))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) (%I nid!))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) (%I nid!))) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. self!)))))) cb!))) :pattern ((lib!exec.replica.impl&%1.wf.? DT&. DT& self! nid! inst! cb!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (<= 0 (lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!))) :pattern ((lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (UINT 64) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (UINT 64) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)))))))
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%3.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%3.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.replica.impl&%3.wf.? DT&. DT& self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))))) (lib!exec.context.impl&%3.wf.? DT&. DT& (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$) (I (nClip (%I i$)))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))))) (= (lib!exec.context.Context./Context/flat_combiner_instance (%Poly%lib!exec.context.Context. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$))) (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))))) (= (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$))) (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) i$))))) (< (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. self!))))) (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. self!))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))) lib!constants.MAX_THREADS_PER_REPLICA.?)) (= (lib!exec.rwlock.impl&%4.max_threads.? $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. self!)))))) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. self!))))) (let ((tmp%%$ (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!))) (and (<= 0 tmp%%$) (< tmp%%$ lib!constants.MAX_REPLICAS.?)))) (lib!exec.rwlock.impl&%3.wf.? $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. self!))))))) (forall ((v$ Poly)) (! (=> (has_type v$ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (= (lib!exec.rwlock.impl&%4.inv.? $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. self!))))) v$) (lib!exec.replica.impl&%1.wf.? DT&. DT& v$ (I (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!)) (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. self!)) (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((lib!exec.rwlock.impl&%4.inv.? $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. self!))))) v$))))) (= (lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. self!)))) lib!constants.MAX_THREADS_PER_REPLICA.?)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. self!))))) (lib!exec.context.impl&%0.wf.? DT&. DT& (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. self!))) i$) self!))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. self!))) i$))))) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!))))))) (= (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!))))))))) (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. self!)))) (= (tuple%4./tuple%4/1 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!)))))))) (lib!exec.replica.Replica./Replica/responses (%Poly%lib!exec.replica.Replica. self!)))) (= (tuple%4./tuple%4/2 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!)))))))) (lib!exec.replica.Replica./Replica/collected_operations (%Poly%lib!exec.replica.Replica. self!)))) (= (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. self!))))))))) (lib!exec.replica.Replica./Replica/collected_operations_per_thread (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((lib!exec.replica.impl&%3.wf.? DT&. DT& self!))))))
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%5.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (nid! Poly)) (! (= (lib!exec.replica.impl&%5.wf.? DT&. DT& self! nid!) (and (and (and (and (and (and (and (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner (%Poly%lib!exec.replica.ReplicaConfig. self!)))))) (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (%Poly%lib!exec.replica.ReplicaConfig. self!))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner (%Poly%lib!exec.replica.ReplicaConfig. self!)))))) (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance (%Poly%lib!exec.replica.ReplicaConfig. self!)))) (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance (%Poly%lib!exec.replica.ReplicaConfig. self!))) (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (%Poly%lib!exec.replica.ReplicaConfig. self!)))) (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (%Poly%lib!exec.replica.ReplicaConfig. self!))) (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance (%Poly%lib!exec.replica.ReplicaConfig. self!))))) (< (%I nid!) (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (%Poly%lib!exec.replica.ReplicaConfig. self!))))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/replica (%Poly%lib!exec.replica.ReplicaConfig. self!)))))) (lib!Dispatch.init_spec.? DT&. DT&))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/replica (%Poly%lib!exec.replica.ReplicaConfig. self!)))))) (%I nid!))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/replica (%Poly%lib!exec.replica.ReplicaConfig. self!)))))) (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (%Poly%lib!exec.replica.ReplicaConfig. self!)))) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner (%Poly%lib!exec.replica.ReplicaConfig. self!)))))))))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/combiner (%Poly%lib!exec.replica.ReplicaConfig. self!)))))) (%I nid!))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner (%Poly%lib!exec.replica.ReplicaConfig. self!)))))) (%I nid!))) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner (%Poly%lib!exec.replica.ReplicaConfig. self!)))))))))) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (lib!exec.replica.ReplicaConfig./ReplicaConfig/cb_combiner (%Poly%lib!exec.replica.ReplicaConfig. self!)))))) (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance (%Poly%lib!exec.replica.ReplicaConfig. self!))))) :pattern ((lib!exec.replica.impl&%5.wf.? DT&. DT& self! nid!))))))
(assert (fuel_bool_default fuel%lib!exec.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%0.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (replica! Poly)) (! (= (lib!ThreadTokenT.wf.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&) self! replica!) (B (lib!exec.context.impl&%0.wf.? DT&. DT& self! replica!))) :pattern ((lib!ThreadTokenT.wf.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&) self! replica!))))))
(assert (fuel_bool_default fuel%lib!exec.impl&%0.replica_id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%0.replica_id_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!ThreadTokenT.replica_id_spec.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&) self!) (I (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!))) :pattern ((lib!ThreadTokenT.replica_id_spec.? $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&) self!))))))
(assert (fuel_bool_default fuel%lib!exec.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%1.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!NodeReplicatedT.wf.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!) (B (and (and (and (and (lib!exec.log.impl&%6.wf.? DT&. DT& (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. self!)))) (= (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (%Poly%lib!exec.NodeReplicated. self!)) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. self!))))))) (= (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (%Poly%lib!exec.NodeReplicated. self!)) (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. self!))))))) (<= (vstd!std_specs.vec.spec_vec_len.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) lib!constants.MAX_REPLICAS.?)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global. (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))))) (and (and (and (and (lib!exec.replica.impl&%3.wf.? DT&. DT& (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$)) (= (lib!exec.replica.impl&%4.spec_id.? DT&. DT& (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$)) (%I i$))) (= (lib!exec.replica.impl&%0.view.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$))))) (%I i$))) (= (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$))) (lib!exec.NodeReplicated./NodeReplicated/unbounded_log_instance (%Poly%lib!exec.NodeReplicated. self!)))) (= (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$))) (lib!exec.NodeReplicated./NodeReplicated/cyclic_buffer_instance (%Poly%lib!exec.NodeReplicated. self!)))))) :pattern ((vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) i$))))))) :pattern ((lib!NodeReplicatedT.wf.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!))))))
(assert (fuel_bool_default fuel%lib!exec.impl&%1.replicas.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%1.replicas.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!NodeReplicatedT.replicas.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!) (lib!exec.NodeReplicated./NodeReplicated/replicas (%Poly%lib!exec.NodeReplicated. self!))) :pattern ((lib!NodeReplicatedT.replicas.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!))))))
(assert (fuel_bool_default fuel%lib!exec.impl&%1.unbounded_log_instance.))
(assert (=> (fuel_bool fuel%lib!exec.impl&%1.unbounded_log_instance.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!NodeReplicatedT.unbounded_log_instance.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!) (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (Poly%lib!exec.log.NrLog. (lib!exec.NodeReplicated./NodeReplicated/log (%Poly%lib!exec.NodeReplicated. self!)))))) :pattern ((lib!NodeReplicatedT.unbounded_log_instance.? $ (TYPE%lib!exec.NodeReplicated. DT&. DT&) DT&. DT& self!))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)))))
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(assert (tr_bound%vstd!view.View. $ BOOL))
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)))))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%lib!ThreadTokenT. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&))) :pattern ((tr_bound%lib!ThreadTokenT. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) DT&. DT& $ (TYPE%lib!exec.replica.Replica. DT&. DT&))))))
(declare-fun req%lib!exec.log.impl&%7.new. (Dcr Type Int Int) Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (num_replicas! Int) (log_size! Int)) (! (= (req%lib!exec.log.impl&%7.new. DT&. DT& num_replicas! log_size!) (and (=> %%global_location_label%%59 (= log_size! lib!constants.LOG_SIZE.?)) (=> %%global_location_label%%60 (and (< 0 num_replicas!) (<= num_replicas! lib!constants.MAX_REPLICAS.?))))) :pattern ((req%lib!exec.log.impl&%7.new. DT&. DT& num_replicas! log_size!)))))
(declare-fun ens%lib!exec.log.impl&%7.new. (Dcr Type Int Int tuple%3.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (num_replicas! Int) (log_size! Int) (res! tuple%3.)) (! (= (ens%lib!exec.log.impl&%7.new. DT&. DT& num_replicas! log_size! res!) (and (has_type (Poly%tuple%3. res!) (TYPE%tuple%3. $ (TYPE%lib!exec.log.NrLog. DT&. DT&) $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (TRACKED $) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))) (lib!exec.log.impl&%6.wf.? DT&. DT& (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!)))) (= (lib!exec.log.NrLog./NrLog/unbounded_log_instance (%Poly%lib!exec.log.NrLog. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))))) (lib!exec.log.NrLogTokens./NrLogTokens/unbounded_log_instance (%Poly%lib!exec.log.NrLogTokens. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. res!)))))) (= (lib!exec.log.NrLog./NrLog/cyclic_buffer_instance (%Poly%lib!exec.log.NrLog. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. res!))))) (lib!exec.log.NrLogTokens./NrLogTokens/cyclic_buffer_instance (%Poly%lib!exec.log.NrLogTokens. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. res!)))))) (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!)))) num_replicas!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) num_replicas!)) (= (lib!exec.replica.impl&%0.id_spec.? (vstd!seq.Seq.index.? $ TYPE%lib!exec.replica.ReplicaToken. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!)))) i$)) (%I i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!exec.replica.ReplicaToken. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. res!)))) i$)))) (lib!exec.log.impl&%10.wf.? DT&. DT& (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. res!))) (I num_replicas!)))) :pattern ((ens%lib!exec.log.impl&%7.new. DT&. DT& num_replicas! log_size! res!)))))
(declare-fun ens%lib!exec.replica.impl&%0.clone. (lib!exec.replica.ReplicaToken. lib!exec.replica.ReplicaToken.) Bool)
(assert (forall ((self! lib!exec.replica.ReplicaToken.) (res! lib!exec.replica.ReplicaToken.)) (! (= (ens%lib!exec.replica.impl&%0.clone. self! res!) (and (has_type (Poly%lib!exec.replica.ReplicaToken. res!) TYPE%lib!exec.replica.ReplicaToken.) (= res! self!))) :pattern ((ens%lib!exec.replica.impl&%0.clone. self! res!)))))
(declare-fun ens%lib!exec.replica.impl&%0.id. (lib!exec.replica.ReplicaToken. Int) Bool)
(assert (forall ((self! lib!exec.replica.ReplicaToken.) (result! Int)) (! (= (ens%lib!exec.replica.impl&%0.id. self! result!) (and (uInv SZ result!) (= result! (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. self!))))) :pattern ((ens%lib!exec.replica.impl&%0.id. self! result!)))))
(declare-fun req%lib!exec.replica.impl&%4.new. (Dcr Type lib!exec.replica.ReplicaToken. Int lib!exec.replica.ReplicaConfig.) Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (replica_token! lib!exec.replica.ReplicaToken.) (num_threads! Int) (config! lib!exec.replica.ReplicaConfig.)) (! (= (req%lib!exec.replica.impl&%4.new. DT&. DT& replica_token! num_threads! config!) (and (=> %%global_location_label%%61 (= num_threads! lib!constants.MAX_THREADS_PER_REPLICA.?)) (=> %%global_location_label%%62 (< (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. replica_token!)) lib!constants.MAX_REPLICAS.?)) (=> %%global_location_label%%63 (lib!exec.replica.impl&%5.wf.? DT&. DT& (Poly%lib!exec.replica.ReplicaConfig. config!) (I (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. replica_token!))))))) :pattern ((req%lib!exec.replica.impl&%4.new. DT&. DT& replica_token! num_threads! config!)))))
(declare-fun ens%lib!exec.replica.impl&%4.new. (Dcr Type lib!exec.replica.ReplicaToken. Int lib!exec.replica.ReplicaConfig. lib!exec.replica.Replica.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (replica_token! lib!exec.replica.ReplicaToken.) (num_threads! Int) (config! lib!exec.replica.ReplicaConfig.) (res! lib!exec.replica.Replica.)) (! (= (ens%lib!exec.replica.impl&%4.new. DT&. DT& replica_token! num_threads! config! res!) (and (has_type (Poly%lib!exec.replica.Replica. res!) (TYPE%lib!exec.replica.Replica. DT&. DT&)) (lib!exec.replica.impl&%3.wf.? DT&. DT& (Poly%lib!exec.replica.Replica. res!)) (= (lib!exec.replica.impl&%4.spec_id.? DT&. DT& (Poly%lib!exec.replica.Replica. res!)) (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. replica_token!))) (= (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. (Poly%lib!exec.replica.Replica. res!))) (lib!exec.replica.ReplicaConfig./ReplicaConfig/unbounded_log_instance (%Poly%lib!exec.replica.ReplicaConfig. (Poly%lib!exec.replica.ReplicaConfig. config!)))) (= (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. (Poly%lib!exec.replica.Replica. res!))) (lib!exec.replica.ReplicaConfig./ReplicaConfig/cyclic_buffer_instance (%Poly%lib!exec.replica.ReplicaConfig. (Poly%lib!exec.replica.ReplicaConfig. config!)))))) :pattern ((ens%lib!exec.replica.impl&%4.new. DT&. DT& replica_token! num_threads! config! res!)))))
(declare-const DT&. Dcr)
(declare-const DT& Type)
(declare-const %return! Poly)
(declare-const num_replicas! Poly)
(declare-const chg_mem_affinity! Poly)
(declare-const tmp%1 Int)
(declare-const verus_tmp_replicas@0 Poly)
(declare-const verus_tmp_combiners@0 Poly)
(declare-const verus_tmp_cb_combiners@0 Poly)
(declare-const verus_tmp_unbounded_log_instance@ Poly)
(declare-const verus_tmp_cyclic_buffer_instance@ Poly)
(declare-const tmp%2 Poly)
(declare-const tmp%3 Poly)
(declare-const tmp%4 Poly)
(declare-const tmp%5 Poly)
(declare-const tmp%6 Poly)
(declare-const tmp%7 Poly)
(declare-const verus_tmp_config@ lib!exec.replica.ReplicaConfig.)
(declare-const tmp%8 Int)
(declare-const tmp%9 Int)
(declare-const idx_ghost@0 Int)
(declare-const replica_token@ lib!exec.replica.ReplicaToken.)
(declare-const verus_tmp$1@ lib!exec.replica.ReplicaConfig.)
(declare-const config@0 lib!exec.replica.ReplicaConfig.)
(declare-const replica@ lib!exec.replica.Replica.)
(declare-const tmp%%@ tuple%3.)
(declare-const log@ lib!exec.log.NrLog.)
(declare-const replica_tokens@ alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>.)
(declare-const nr_log_tokens@ lib!exec.log.NrLogTokens.)
(declare-const verus_tmp@ lib!exec.log.NrLogTokens.)
(declare-const replicas@0 Poly)
(declare-const combiners@0 Poly)
(declare-const cb_combiners@0 Poly)
(declare-const unbounded_log_instance@0 Poly)
(declare-const cyclic_buffer_instance@0 Poly)
(declare-const actual_replicas@0 Poly)
(declare-const thread_tokens@0 Poly)
(declare-const idx@0 Int)
(declare-const unbounded_log_instance$1@ Poly)
(declare-const cyclic_buffer_instance$1@ Poly)
(assert fuel_defaults)
(assert (has_type num_replicas! (UINT SZ)))
(assert (has_type chg_mem_affinity! TYPE%lib!AffinityFn.))
(assert (uInv SZ tmp%1))
(assert (has_type (Poly%tuple%3. tmp%%@) (TYPE%tuple%3. $ (TYPE%lib!exec.log.NrLog. DT&. DT&) $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (TRACKED $) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&))))
(assert (has_type (Poly%lib!exec.log.NrLog. log@) (TYPE%lib!exec.log.NrLog. DT&. DT&)))
(assert (has_type (Poly%lib!exec.log.NrLogTokens. nr_log_tokens@) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)))
(assert (has_type (Poly%lib!exec.log.NrLogTokens. verus_tmp@) (TYPE%lib!exec.log.NrLogTokens. DT&. DT&)))
(assert (has_type verus_tmp_replicas@0 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))))
(assert (has_type verus_tmp_combiners@0 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))))
(assert (has_type verus_tmp_cb_combiners@0 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))))
(assert (has_type verus_tmp_unbounded_log_instance@ (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)))
(assert (has_type verus_tmp_cyclic_buffer_instance@ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)))
(assert (has_type replicas@0 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))))
(assert (has_type combiners@0 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))))
(assert (has_type cb_combiners@0 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))))
(assert (has_type unbounded_log_instance@0 (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)))
(assert (has_type cyclic_buffer_instance@0 (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&)))
(assert (has_type actual_replicas@0 (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.)))
(assert (has_type thread_tokens@0 (TYPE%alloc!vec.Vec. $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.) $ TYPE%alloc!alloc.Global.)))
(assert (uInv SZ idx@0))
(declare-const idx_ghost@1 Int)
(declare-const replicas@1 Poly)
(declare-const combiners@1 Poly)
(declare-const cb_combiners@1 Poly)
(declare-const config@1 lib!exec.replica.ReplicaConfig.)
(declare-const actual_replicas@1 Poly)
(declare-const idx@1 Int)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(declare-const %%location_label%%6 Bool)
(declare-const %%location_label%%7 Bool)
(declare-const %%location_label%%8 Bool)
(declare-const %%location_label%%9 Bool)
(declare-const %%location_label%%10 Bool)
(declare-const %%location_label%%11 Bool)
(declare-const %%location_label%%12 Bool)
(declare-const %%location_label%%13 Bool)
(declare-const %%location_label%%14 Bool)
(declare-const %%location_label%%15 Bool)
(declare-const %%location_label%%16 Bool)
(declare-const %%location_label%%17 Bool)
(assert (not (=> (<= (%I num_replicas!) lib!constants.MAX_REPLICAS.?) (=> (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& unbounded_log_instance@0) (%I num_replicas!)) (=> (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& cyclic_buffer_instance@0) (%I num_replicas!)) (=> (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& cyclic_buffer_instance@0) unbounded_log_instance@0) (=> (and (<= 0 idx@0) (<= idx@0 (%I num_replicas!))) (=> (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global. (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. replica_tokens@)) (%I num_replicas!)) (=> (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I num_replicas!))) (= (lib!exec.replica.impl&%0.id_spec.? (vstd!seq.Seq.index.? $ TYPE%lib!exec.replica.ReplicaToken. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. replica_tokens@)) i$)) (%I i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!exec.replica.ReplicaToken. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. replica_tokens@)) i$)))) (=> (= (vstd!std_specs.vec.spec_vec_len.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global. actual_replicas@0) idx@0) (=> (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) idx@0)) (and (and (and (lib!exec.replica.impl&%3.wf.? DT&. DT& (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@0) i$)) (= (lib!exec.replica.impl&%4.spec_id.? DT&. DT& (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@0) i$)) (%I i$))) (= (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@0) i$))) unbounded_log_instance@0)) (= (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@0) i$))) cyclic_buffer_instance@0)))) :pattern ((vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@0) i$)))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= idx@0 (%I i$)) (< (%I i$) (%I num_replicas!))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@0) i$) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@0 i$))))) unbounded_log_instance@0)) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@0 i$))))) (%I i$))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@0 i$))))) (lib!Dispatch.init_spec.? DT&. DT&))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@0) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@0 i$)))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= idx@0 (%I i$)) (< (%I i$) (%I num_replicas!))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@0) i$) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@0 i$))))) unbounded_log_instance@0)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@0 i$))))) (%I i$))) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@0 i$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@0) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@0 i$)))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= idx@0 (%I i$)) (< (%I i$) (%I num_replicas!))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@0) i$) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@0 i$))))) cyclic_buffer_instance@0)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@0 i$))))) (%I i$))) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@0 i$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@0) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@0 i$)))) (=> (< idx@0 (%I num_replicas!)) (=> (= idx_ghost@1 idx@0) (and (=> %%location_label%%0 (req%vstd!std_specs.vec.vec_index. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global. (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. replica_tokens@) idx@0)) (=> (ens%vstd!std_specs.vec.vec_index. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global. (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. replica_tokens@) idx@0 tmp%2) (=> (ens%lib!exec.replica.impl&%0.clone. (%Poly%lib!exec.replica.ReplicaToken. tmp%2) replica_token@) (and (=> %%location_label%%1 (req%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@0 (I idx_ghost@1))) (=> (has_type replicas@1 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) (=> (ens%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@0 replicas@1 (I idx_ghost@1) tmp%3) (and (=> %%location_label%%2 (req%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@0 (I idx_ghost@1))) (=> (has_type combiners@1 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (=> (ens%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@0 combiners@1 (I idx_ghost@1) tmp%4) (and (=> %%location_label%%3 (req%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@0 (I idx_ghost@1))) (=> (has_type cb_combiners@1 (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) (=> (ens%vstd!map.impl&%0.tracked_remove. $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@0 cb_combiners@1 (I idx_ghost@1) tmp%5) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. DT&. DT& unbounded_log_instance@0 tmp%6) (=> (ens%lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.clone. DT&. DT& cyclic_buffer_instance@0 tmp%7) (=> (= verus_tmp$1@ (lib!exec.replica.ReplicaConfig./ReplicaConfig tmp%3 tmp%4 tmp%5 tmp%6 tmp%7)) (=> (= verus_tmp_config@ verus_tmp$1@) (=> (= config@1 verus_tmp_config@) (=> (ens%lib!exec.replica.impl&%0.id. replica_token@ tmp%8) (=> (= tmp%9 lib!constants.MAX_THREADS_PER_REPLICA.?) (and (=> %%location_label%%4 (req%lib!exec.replica.impl&%4.new. DT&. DT& replica_token@ tmp%9 config@1)) (=> (ens%lib!exec.replica.impl&%4.new. DT&. DT& replica_token@ tmp%9 config@1 replica@) (=> (has_type actual_replicas@1 (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (=> (ens%alloc!vec.impl&%1.push. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global. actual_replicas@0 actual_replicas@1 (Poly%lib!exec.replica.Replica. replica@)) (and (=> %%location_label%%5 (uInv SZ (Add idx@0 1))) (=> (= idx@1 (uClip SZ (Add idx@0 1))) (and (=> %%location_label%%6 (<= (%I num_replicas!) lib!constants.MAX_REPLICAS.?)) (and (=> %%location_label%%7 (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& unbounded_log_instance@0) (%I num_replicas!))) (and (=> %%location_label%%8 (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.num_replicas.? DT&. DT& cyclic_buffer_instance@0) (%I num_replicas!))) (and (=> %%location_label%%9 (= (lib!spec.cyclicbuffer.CyclicBuffer.impl&%9.unbounded_log_instance.? DT&. DT& cyclic_buffer_instance@0) unbounded_log_instance@0)) (and (=> %%location_label%%10 (and (<= 0 idx@1) (<= idx@1 (%I num_replicas!)))) (and (=> %%location_label%%11 (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global. (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. replica_tokens@)) (%I num_replicas!))) (and (=> %%location_label%%12 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I num_replicas!))) (= (lib!exec.replica.impl&%0.id_spec.? (vstd!seq.Seq.index.? $ TYPE%lib!exec.replica.ReplicaToken. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. replica_tokens@)) i$)) (%I i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!exec.replica.ReplicaToken. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!exec.replica.ReplicaToken. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<lib!exec.replica.ReplicaToken./alloc!alloc.Global.>. replica_tokens@)) i$))))) (and (=> %%location_label%%13 (= (vstd!std_specs.vec.spec_vec_len.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global. actual_replicas@1) idx@1)) (and (=> %%location_label%%14 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) idx@1)) (and (and (and (lib!exec.replica.impl&%3.wf.? DT&. DT& (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@1) i$)) (= (lib!exec.replica.impl&%4.spec_id.? DT&. DT& (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@1) i$)) (%I i$))) (= (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@1) i$))) unbounded_log_instance@0)) (= (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. (vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@1) i$))) cyclic_buffer_instance@0)))) :pattern ((vstd!seq.Seq.index.? (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. (BOX $) (TYPE%lib!exec.replica.Replica. DT&. DT&) $ TYPE%alloc!alloc.Global.) actual_replicas@1) i$))))) (and (=> %%location_label%%15 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= idx@1 (%I i$)) (< (%I i$) (%I num_replicas!))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@1) i$) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@1 i$))))) unbounded_log_instance@0)) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@1 i$))))) (%I i$))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@1 i$))))) (lib!Dispatch.init_spec.? DT&. DT&))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@1) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) replicas@1 i$))))) (and (=> %%location_label%%16 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= idx@1 (%I i$)) (< (%I i$) (%I num_replicas!))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@1) i$) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@1 i$))))) unbounded_log_instance@0)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@1 i$))))) (%I i$))) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@1 i$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@1) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) combiners@1 i$))))) (=> %%location_label%%17 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= idx@1 (%I i$)) (< (%I i$) (%I num_replicas!))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@1) i$) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@1 i$))))) cyclic_buffer_instance@0)) (= (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@1 i$))))) (%I i$))) (is-lib!spec.cyclicbuffer.CombinerState./Idle_ (%Poly%lib!spec.cyclicbuffer.CombinerState. (Poly%lib!spec.cyclicbuffer.CombinerState. (lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (Poly%lib!spec.cyclicbuffer.CyclicBuffer.combiner_token_data. (lib!spec.cyclicbuffer.CyclicBuffer.impl&%8.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@1 i$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@1) i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&) cb_combiners@1 i$)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
