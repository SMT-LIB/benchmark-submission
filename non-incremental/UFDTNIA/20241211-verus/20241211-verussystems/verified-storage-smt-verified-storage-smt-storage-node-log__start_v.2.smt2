(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!arithmetic.div_mod.lemma_mod_bound. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_first. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%lib!log.inv_v.metadata_consistent_with_info. FuelId)
(declare-const fuel%lib!log.inv_v.info_consistent_with_log_area. FuelId)
(declare-const fuel%lib!log.inv_v.info_consistent_with_log_area_in_region. FuelId)
(declare-const fuel%lib!log.inv_v.metadata_types_set. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA. FuelId)
(declare-const fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE. FuelId)
(declare-const fuel%lib!log.layout_v.LOG_PROGRAM_GUID. FuelId)
(declare-const fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%3.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%3.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%12.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%12.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%21.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%21.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.extract_global_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_global_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_global_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_global_crc. FuelId)
(declare-const fuel%lib!log.layout_v.extract_region_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_region_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_region_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_region_crc. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_and_check_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.get_log_metadata_pos. FuelId)
(declare-const fuel%lib!log.layout_v.get_log_crc_end. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_crc. FuelId)
(declare-const fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_from_log_area. FuelId)
(declare-const fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.recover_log. FuelId)
(declare-const fuel%lib!log.layout_v.recover_given_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.recover_cdb. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.all_elements_unique. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.maybe_corrupted. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.spec_crc_bytes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.CDB_FALSE. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.CDB_TRUE. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.len. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.committed. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.extract_bytes. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.spec_padding_needed. FuelId)
(declare-const fuel%lib!pmem.subregion_v.get_subregion_view. FuelId)
(declare-const fuel%lib!util_v.nat_seq_max. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!arithmetic.div_mod.lemma_mod_bound. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.drop_first. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%24.view. fuel%lib!log.inv_v.metadata_consistent_with_info. fuel%lib!log.inv_v.info_consistent_with_log_area. fuel%lib!log.inv_v.info_consistent_with_log_area_in_region. fuel%lib!log.inv_v.metadata_types_set. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA. fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE. fuel%lib!log.layout_v.LOG_PROGRAM_GUID. fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER. fuel%lib!log.layout_v.impl&%3.spec_size_of. fuel%lib!log.layout_v.impl&%3.spec_align_of. fuel%lib!log.layout_v.impl&%12.spec_size_of. fuel%lib!log.layout_v.impl&%12.spec_align_of. fuel%lib!log.layout_v.impl&%21.spec_size_of. fuel%lib!log.layout_v.impl&%21.spec_align_of. fuel%lib!log.layout_v.extract_global_metadata. fuel%lib!log.layout_v.deserialize_global_metadata. fuel%lib!log.layout_v.extract_global_crc. fuel%lib!log.layout_v.deserialize_global_crc. fuel%lib!log.layout_v.extract_region_metadata. fuel%lib!log.layout_v.deserialize_region_metadata. fuel%lib!log.layout_v.extract_region_crc. fuel%lib!log.layout_v.deserialize_region_crc. fuel%lib!log.layout_v.extract_log_cdb. fuel%lib!log.layout_v.deserialize_log_cdb. fuel%lib!log.layout_v.deserialize_and_check_log_cdb. fuel%lib!log.layout_v.get_log_metadata_pos. fuel%lib!log.layout_v.get_log_crc_end. fuel%lib!log.layout_v.extract_log_metadata. fuel%lib!log.layout_v.deserialize_log_metadata. fuel%lib!log.layout_v.extract_log_crc. fuel%lib!log.layout_v.deserialize_log_crc. fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset. fuel%lib!log.layout_v.extract_log_from_log_area. fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata. fuel%lib!log.layout_v.recover_log. fuel%lib!log.layout_v.recover_given_cdb. fuel%lib!log.layout_v.recover_cdb. fuel%lib!pmem.pmemspec_t.all_elements_unique. fuel%lib!pmem.pmemspec_t.maybe_corrupted. fuel%lib!pmem.pmemspec_t.spec_crc_bytes. fuel%lib!pmem.pmemspec_t.CDB_FALSE. fuel%lib!pmem.pmemspec_t.CDB_TRUE. fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. fuel%lib!pmem.pmemspec_t.impl&%6.len. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%6.committed. fuel%lib!pmem.pmemspec_t.extract_bytes. fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc. fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of. fuel%lib!pmem.pmcopy_t.spec_padding_needed. fuel%lib!pmem.subregion_v.get_subregion_view. fuel%lib!util_v.nat_seq_max. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-sort lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. 0)
(declare-sort lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. 0)
(declare-sort lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. 0)
(declare-sort lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. 0)
(declare-sort lib!pmem.subregion_v.PersistentMemorySubregion. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<int.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. 0)
(declare-sort slice%<u8.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!log.layout_v.GlobalMetadata. 0) (lib!log.layout_v.RegionMetadata. 0) (lib!log.layout_v.LogMetadata. 0) (lib!log.logimpl_t.LogErr. 0) (lib!log.logimpl_v.LogInfo. 0) (lib!log.logspec_t.AbstractLogState. 0) (lib!pmem.pmemspec_t.PmemError. 0) (lib!pmem.pmemspec_t.PersistentMemoryByte. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionView. 0) (lib!pmem.pmemspec_t.PersistentMemoryConstants. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!log.layout_v.GlobalMetadata./GlobalMetadata (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?version_number Int) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?length_of_region_metadata Int) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?program_guid Int))) ((lib!log.layout_v.RegionMetadata./RegionMetadata (lib!log.layout_v.RegionMetadata./RegionMetadata/?region_size Int) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_area_len Int) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_id Int))) ((lib!log.layout_v.LogMetadata./LogMetadata (lib!log.layout_v.LogMetadata./LogMetadata/?log_length Int) (lib!log.layout_v.LogMetadata./LogMetadata/?_padding Int) (lib!log.layout_v.LogMetadata./LogMetadata/?head Int))) ((lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/?required_space Int)) (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/?log_id_expected Int) (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/?log_id_read Int)) (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/?region_size_expected Int) (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/?region_size_read Int)) (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/?version_number Int) (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/?max_supported Int)) (lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents ) (lib!log.logimpl_t.LogErr./CRCMismatch ) (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/?available_space Int)) (lib!log.logimpl_t.LogErr./CantReadBeforeHead (lib!log.logimpl_t.LogErr./CantReadBeforeHead/?head Int)) (lib!log.logimpl_t.LogErr./CantReadPastTail (lib!log.logimpl_t.LogErr./CantReadPastTail/?tail Int)) (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/?head Int)) (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/?tail Int)) (lib!log.logimpl_t.LogErr./PmemErr (lib!log.logimpl_t.LogErr./PmemErr/?err lib!pmem.pmemspec_t.PmemError.))) ((lib!log.logimpl_v.LogInfo./LogInfo (lib!log.logimpl_v.LogInfo./LogInfo/?log_area_len Int) (lib!log.logimpl_v.LogInfo./LogInfo/?head Int) (lib!log.logimpl_v.LogInfo./LogInfo/?head_log_area_offset Int) (lib!log.logimpl_v.LogInfo./LogInfo/?log_length Int) (lib!log.logimpl_v.LogInfo./LogInfo/?log_plus_pending_length Int))) ((lib!log.logspec_t.AbstractLogState./AbstractLogState (lib!log.logspec_t.AbstractLogState./AbstractLogState/?head Int) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?log vstd!seq.Seq<u8.>.) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?pending vstd!seq.Seq<u8.>.) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?capacity Int))) ((lib!pmem.pmemspec_t.PmemError./InvalidFileName ) (lib!pmem.pmemspec_t.PmemError./CannotOpenPmFile ) (lib!pmem.pmemspec_t.PmemError./NotPm ) (lib!pmem.pmemspec_t.PmemError./PmdkError ) (lib!pmem.pmemspec_t.PmemError./AccessOutOfRange )) ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush Int) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write core!option.Option.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.))) ((lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption Bool))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/log_length (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/_padding (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/head (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./CantReadBeforeHead/head (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./CantReadPastTail/tail (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail (lib!log.logimpl_t.LogErr.) Int)
(declare-fun lib!log.logimpl_t.LogErr./PmemErr/err (lib!log.logimpl_t.LogErr.) lib!pmem.pmemspec_t.PmemError.)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/head (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/log_length (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (lib!log.logimpl_v.LogInfo.) Int)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/head (lib!log.logspec_t.AbstractLogState.) Int)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/log (lib!log.logspec_t.AbstractLogState.) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (lib!log.logspec_t.AbstractLogState.) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (lib!log.logspec_t.AbstractLogState.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (lib!pmem.pmemspec_t.PersistentMemoryByte.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (lib!pmem.pmemspec_t.PersistentMemoryByte.) core!option.Option.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (lib!pmem.pmemspec_t.PersistentMemoryConstants.) Bool)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!log.layout_v.GlobalMetadata. Type)
(declare-const TYPE%lib!log.layout_v.RegionMetadata. Type)
(declare-const TYPE%lib!log.layout_v.LogMetadata. Type)
(declare-const TYPE%lib!log.logimpl_t.LogErr. Type)
(declare-const TYPE%lib!log.logimpl_v.LogInfo. Type)
(declare-const TYPE%lib!log.logspec_t.AbstractLogState. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PmemError. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants. Type)
(declare-fun TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. (Dcr Type) Type)
(declare-const TYPE%lib!pmem.subregion_v.PersistentMemorySubregion. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. (lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.) Poly)
(declare-fun %Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. (Poly) lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.)
(declare-fun Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. (lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>.) Poly)
(declare-fun %Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. (Poly) lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>.)
(declare-fun Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. (lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>.) Poly)
(declare-fun %Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. (Poly) lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>.)
(declare-fun Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. (lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>.) Poly)
(declare-fun %Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. (Poly) lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>.)
(declare-fun Poly%lib!pmem.subregion_v.PersistentMemorySubregion. (lib!pmem.subregion_v.PersistentMemorySubregion.) Poly)
(declare-fun %Poly%lib!pmem.subregion_v.PersistentMemorySubregion. (Poly) lib!pmem.subregion_v.PersistentMemorySubregion.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq<int.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<int.>. (Poly) vstd!seq.Seq<int.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun Poly%slice%<u8.>. (slice%<u8.>.) Poly)
(declare-fun %Poly%slice%<u8.>. (Poly) slice%<u8.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.GlobalMetadata. (Poly) lib!log.layout_v.GlobalMetadata.)
(declare-fun Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.RegionMetadata. (Poly) lib!log.layout_v.RegionMetadata.)
(declare-fun Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.LogMetadata. (Poly) lib!log.layout_v.LogMetadata.)
(declare-fun Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr.) Poly)
(declare-fun %Poly%lib!log.logimpl_t.LogErr. (Poly) lib!log.logimpl_t.LogErr.)
(declare-fun Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.LogInfo.) Poly)
(declare-fun %Poly%lib!log.logimpl_v.LogInfo. (Poly) lib!log.logimpl_v.LogInfo.)
(declare-fun Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.AbstractLogState.) Poly)
(declare-fun %Poly%lib!log.logspec_t.AbstractLogState. (Poly) lib!log.logspec_t.AbstractLogState.)
(declare-fun Poly%lib!pmem.pmemspec_t.PmemError. (lib!pmem.pmemspec_t.PmemError.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PmemError. (Poly) lib!pmem.pmemspec_t.PmemError.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryConstants.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly) lib!pmem.pmemspec_t.PersistentMemoryConstants.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.)) (! (= x (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. x))) :pattern ((Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ (UINT 64))) (= x (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. x)))) :pattern ((has_type x (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ (UINT 64)))))))
(assert (forall ((x lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.)) (! (has_type (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. x) (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ (UINT 64))) :pattern ((has_type (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. x) (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ (UINT 64)))))))
(assert (forall ((x lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>.)) (! (= x (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. x))) :pattern ((Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.GlobalMetadata.)) (= x (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. x)))) :pattern ((has_type x (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.GlobalMetadata.))))))
(assert (forall ((x lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>.)) (! (has_type (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. x) (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.GlobalMetadata.)) :pattern ((has_type (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. x) (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.GlobalMetadata.))))))
(assert (forall ((x lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>.)) (! (= x (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. x))) :pattern ((Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.LogMetadata.)) (= x (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. x)))) :pattern ((has_type x (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.LogMetadata.))))))
(assert (forall ((x lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>.)) (! (has_type (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. x) (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.LogMetadata.)) :pattern ((has_type (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. x) (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.LogMetadata.))))))
(assert (forall ((x lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>.)) (! (= x (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. x))) :pattern ((Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.RegionMetadata.)) (= x (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. x)))) :pattern ((has_type x (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.RegionMetadata.))))))
(assert (forall ((x lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>.)) (! (has_type (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. x) (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.RegionMetadata.)) :pattern ((has_type (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. x) (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. $ TYPE%lib!log.layout_v.RegionMetadata.))))))
(assert (forall ((x lib!pmem.subregion_v.PersistentMemorySubregion.)) (! (= x (%Poly%lib!pmem.subregion_v.PersistentMemorySubregion. (Poly%lib!pmem.subregion_v.PersistentMemorySubregion. x))) :pattern ((Poly%lib!pmem.subregion_v.PersistentMemorySubregion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.subregion_v.PersistentMemorySubregion.) (= x (Poly%lib!pmem.subregion_v.PersistentMemorySubregion. (%Poly%lib!pmem.subregion_v.PersistentMemorySubregion. x)))) :pattern ((has_type x TYPE%lib!pmem.subregion_v.PersistentMemorySubregion.)))))
(assert (forall ((x lib!pmem.subregion_v.PersistentMemorySubregion.)) (! (has_type (Poly%lib!pmem.subregion_v.PersistentMemorySubregion. x) TYPE%lib!pmem.subregion_v.PersistentMemorySubregion.) :pattern ((has_type (Poly%lib!pmem.subregion_v.PersistentMemorySubregion. x) TYPE%lib!pmem.subregion_v.PersistentMemorySubregion.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<int.>.)) (! (= x (%Poly%vstd!seq.Seq<int.>. (Poly%vstd!seq.Seq<int.>. x))) :pattern ((Poly%vstd!seq.Seq<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ INT)) (= x (Poly%vstd!seq.Seq<int.>. (%Poly%vstd!seq.Seq<int.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ INT))))))
(assert (forall ((x vstd!seq.Seq<int.>.)) (! (has_type (Poly%vstd!seq.Seq<int.>. x) (TYPE%vstd!seq.Seq. $ INT)) :pattern ((has_type (Poly%vstd!seq.Seq<int.>. x) (TYPE%vstd!seq.Seq. $ INT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))))))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))))))
(assert (forall ((x slice%<u8.>.)) (! (= x (%Poly%slice%<u8.>. (Poly%slice%<u8.>. x))) :pattern ((Poly%slice%<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (SLICE $ (UINT 8))) (= x (Poly%slice%<u8.>. (%Poly%slice%<u8.>. x)))) :pattern ((has_type x (SLICE $ (UINT 8)))))))
(assert (forall ((x slice%<u8.>.)) (! (has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8))) :pattern ((has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8)))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= x (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. x))) :pattern ((Poly%lib!log.layout_v.GlobalMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (= x (Poly%lib!log.layout_v.GlobalMetadata. (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((_version_number! Int) (_length_of_region_metadata! Int) (_program_guid! Int)) (! (=> (and (uInv 64 _version_number!) (uInv 64 _length_of_region_metadata!) (uInv 128 _program_guid!)) (has_type (Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata./GlobalMetadata _version_number! _length_of_region_metadata! _program_guid!)) TYPE%lib!log.layout_v.GlobalMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata./GlobalMetadata _version_number! _length_of_region_metadata! _program_guid!)) TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?version_number x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 64 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?length_of_region_metadata x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 64 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?program_guid x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 128 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= x (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. x))) :pattern ((Poly%lib!log.layout_v.RegionMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (= x (Poly%lib!log.layout_v.RegionMetadata. (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((_region_size! Int) (_log_area_len! Int) (_log_id! Int)) (! (=> (and (uInv 64 _region_size!) (uInv 64 _log_area_len!) (uInv 128 _log_id!)) (has_type (Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata./RegionMetadata _region_size! _log_area_len! _log_id!)) TYPE%lib!log.layout_v.RegionMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata./RegionMetadata _region_size! _log_area_len! _log_id!)) TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?region_size x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/region_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 64 (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_area_len x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 64 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_id x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 128 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= x (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. x))) :pattern ((Poly%lib!log.layout_v.LogMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (= x (Poly%lib!log.layout_v.LogMetadata. (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((_log_length! Int) (__padding! Int) (_head! Int)) (! (=> (and (uInv 64 _log_length!) (uInv 64 __padding!) (uInv 128 _head!)) (has_type (Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata./LogMetadata _log_length! __padding! _head!)) TYPE%lib!log.layout_v.LogMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata./LogMetadata _log_length! __padding! _head!)) TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/log_length x) (lib!log.layout_v.LogMetadata./LogMetadata/?log_length x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/log_length x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 64 (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/_padding x) (lib!log.layout_v.LogMetadata./LogMetadata/?_padding x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/_padding x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 64 (lib!log.layout_v.LogMetadata./LogMetadata/_padding (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/_padding (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/head x) (lib!log.layout_v.LogMetadata./LogMetadata/?head x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 128 (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= x (%Poly%lib!log.logimpl_t.LogErr. (Poly%lib!log.logimpl_t.LogErr. x))) :pattern ((Poly%lib!log.logimpl_t.LogErr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (= x (Poly%lib!log.logimpl_t.LogErr. (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_required_space! Int)) (! (=> (uInv 64 _required_space!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup _required_space!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup _required_space!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space x) (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/?required_space x)) :pattern ((lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./InsufficientSpaceForSetup/required_space (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_log_id_expected! Int) (_log_id_read! Int)) (! (=> (and (uInv 128 _log_id_expected!) (uInv 128 _log_id_read!)) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch _log_id_expected! _log_id_read!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch _log_id_expected! _log_id_read!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected x) (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/?log_id_expected x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read x) (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/?log_id_read x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_region_size_expected! Int) (_region_size_read! Int)) (! (=> (and (uInv 64 _region_size_expected!) (uInv 64 _region_size_read!)) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch _region_size_expected! _region_size_read!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch _region_size_expected! _region_size_read!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected x) (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/?region_size_expected x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read x) (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/?region_size_read x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_version_number! Int) (_max_supported! Int)) (! (=> (and (uInv 64 _version_number!) (uInv 64 _max_supported!)) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported _version_number! _max_supported!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported _version_number! _max_supported!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number x) (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/?version_number x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported x) (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/?max_supported x)) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (has_type (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents) TYPE%lib!log.logimpl_t.LogErr.))
(assert (has_type (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./CRCMismatch) TYPE%lib!log.logimpl_t.LogErr.))
(assert (forall ((_available_space! Int)) (! (=> (uInv 64 _available_space!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend _available_space!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend _available_space!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space x) (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/?available_space x)) :pattern ((lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 64 (lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./InsufficientSpaceForAppend/available_space (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_head! Int)) (! (=> (uInv 128 _head!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantReadBeforeHead _head!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantReadBeforeHead _head!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./CantReadBeforeHead/head x) (lib!log.logimpl_t.LogErr./CantReadBeforeHead/?head x)) :pattern ((lib!log.logimpl_t.LogErr./CantReadBeforeHead/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./CantReadBeforeHead/head (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./CantReadBeforeHead/head (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_tail! Int)) (! (=> (uInv 128 _tail!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantReadPastTail _tail!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantReadPastTail _tail!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./CantReadPastTail/tail x) (lib!log.logimpl_t.LogErr./CantReadPastTail/?tail x)) :pattern ((lib!log.logimpl_t.LogErr./CantReadPastTail/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./CantReadPastTail/tail (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./CantReadPastTail/tail (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_head! Int)) (! (=> (uInv 128 _head!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead _head!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead _head!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head x) (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/?head x)) :pattern ((lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeforeHead/head (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_tail! Int)) (! (=> (uInv 128 _tail!) (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail _tail!)) TYPE%lib!log.logimpl_t.LogErr.)) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail _tail!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail x) (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/?tail x)) :pattern ((lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_t.LogErr.) (uInv 128 (lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail (%Poly%lib!log.logimpl_t.LogErr. x)))) :pattern ((lib!log.logimpl_t.LogErr./CantAdvanceHeadPositionBeyondTail/tail (%Poly%lib!log.logimpl_t.LogErr. x)) (has_type x TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((_err! lib!pmem.pmemspec_t.PmemError.)) (! (has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./PmemErr _err!)) TYPE%lib!log.logimpl_t.LogErr.) :pattern ((has_type (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./PmemErr _err!)) TYPE%lib!log.logimpl_t.LogErr.)))))
(assert (forall ((x lib!log.logimpl_t.LogErr.)) (! (= (lib!log.logimpl_t.LogErr./PmemErr/err x) (lib!log.logimpl_t.LogErr./PmemErr/?err x)) :pattern ((lib!log.logimpl_t.LogErr./PmemErr/err x)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= x (%Poly%lib!log.logimpl_v.LogInfo. (Poly%lib!log.logimpl_v.LogInfo. x))) :pattern ((Poly%lib!log.logimpl_v.LogInfo. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (= x (Poly%lib!log.logimpl_v.LogInfo. (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((_log_area_len! Int) (_head! Int) (_head_log_area_offset! Int) (_log_length! Int) (_log_plus_pending_length! Int)) (! (=> (and (uInv 64 _log_area_len!) (uInv 128 _head!) (uInv 64 _head_log_area_offset!) (uInv 64 _log_length!) (uInv 64 _log_plus_pending_length!)) (has_type (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.LogInfo./LogInfo _log_area_len! _head! _head_log_area_offset! _log_length! _log_plus_pending_length!)) TYPE%lib!log.logimpl_v.LogInfo.)) :pattern ((has_type (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.LogInfo./LogInfo _log_area_len! _head! _head_log_area_offset! _log_length! _log_plus_pending_length!)) TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len x) (lib!log.logimpl_v.LogInfo./LogInfo/?log_area_len x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_area_len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 64 (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/head x) (lib!log.logimpl_v.LogInfo./LogInfo/?head x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 128 (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset x) (lib!log.logimpl_v.LogInfo./LogInfo/?head_log_area_offset x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 64 (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/log_length x) (lib!log.logimpl_v.LogInfo./LogInfo/?log_length x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_length x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 64 (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logimpl_v.LogInfo.)) (! (= (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length x) (lib!log.logimpl_v.LogInfo./LogInfo/?log_plus_pending_length x)) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logimpl_v.LogInfo.) (uInv 64 (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. x)))) :pattern ((lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. x)) (has_type x TYPE%lib!log.logimpl_v.LogInfo.)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= x (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. x))) :pattern ((Poly%lib!log.logspec_t.AbstractLogState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logspec_t.AbstractLogState.) (= x (Poly%lib!log.logspec_t.AbstractLogState. (%Poly%lib!log.logspec_t.AbstractLogState. x)))) :pattern ((has_type x TYPE%lib!log.logspec_t.AbstractLogState.)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/head x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?head x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/head x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/log x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?log x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/log x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?pending x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/pending x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?capacity x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity x)))))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (has_type (Poly%lib!log.logspec_t.AbstractLogState. x) TYPE%lib!log.logspec_t.AbstractLogState.) :pattern ((has_type (Poly%lib!log.logspec_t.AbstractLogState. x) TYPE%lib!log.logspec_t.AbstractLogState.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!log.logspec_t.AbstractLogState.) (has_type y TYPE%lib!log.logspec_t.AbstractLogState.) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. x)) (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. x))) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. x))) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. x)) (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (ext_eq deep TYPE%lib!log.logspec_t.AbstractLogState. x y)) :pattern ((ext_eq deep TYPE%lib!log.logspec_t.AbstractLogState. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PmemError.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PmemError. (Poly%lib!pmem.pmemspec_t.PmemError. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PmemError. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PmemError.) (= x (Poly%lib!pmem.pmemspec_t.PmemError. (%Poly%lib!pmem.pmemspec_t.PmemError. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PmemError.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PmemError.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PmemError. x) TYPE%lib!pmem.pmemspec_t.PmemError.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PmemError. x) TYPE%lib!pmem.pmemspec_t.PmemError.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((_state_at_last_flush! Int) (_outstanding_write! core!option.Option.)) (! (=> (and (uInv 8 _state_at_last_flush!) (has_type (Poly%core!option.Option. _outstanding_write!) (TYPE%core!option.Option. $ (UINT 8)))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (TYPE%core!option.Option. $ (UINT 8)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))) (ext_eq deep (TYPE%core!option.Option. $ (UINT 8)) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x) (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%2 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%2 Fn i) T)) :pattern ((has_type (%%apply%%2 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%2 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%2 Fn i)))))
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopy. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.SpecPmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSafe. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&) (and (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT 128)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 128)) (UINT 128)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.impl&%6.len.? (Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of%default%.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_align_of%default%.? (Dcr Type) Poly)
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly Poly Poly) Bool)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_crc%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.impl&%6.committed.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!pmem.pmcopy_t.impl&%2.view.? (Dcr Type Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!pmem.pmemspec_t.maybe_corrupted_byte.? (Poly Poly Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.maybe_corrupted.? (Poly Poly Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.impl&%5.flush_byte.? (Poly) Int)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.drop_first.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.view%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.inv%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.constants%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.spec_crc_u64.? (Poly) Int)
(declare-fun lib!pmem.pmemspec_t.spec_crc_bytes.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!pmem.pmemspec_t.all_elements_unique.? (Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.CDB_FALSE.? () Int)
(declare-fun lib!pmem.pmemspec_t.CDB_TRUE.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? () Int)
(declare-fun lib!pmem.pmcopy_t.spec_padding_needed.? (Poly Poly) Int)
(declare-fun lib!pmem.pmemspec_t.extract_bytes.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? () Int)
(declare-fun lib!log.layout_v.extract_log_cdb.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_log_cdb.? (Poly) Int)
(declare-fun lib!log.layout_v.deserialize_and_check_log_cdb.? (Poly) core!option.Option.)
(declare-fun lib!util_v.nat_seq_max.? (Poly) Int)
(declare-fun lib!util_v.rec%nat_seq_max.? (Poly Fuel) Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? () Int)
(declare-fun lib!log.layout_v.extract_global_metadata.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_global_metadata.? (Poly) lib!log.layout_v.GlobalMetadata.)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.? () Int)
(declare-fun lib!log.layout_v.extract_global_crc.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_global_crc.? (Poly) Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.? () Int)
(declare-fun lib!log.layout_v.extract_region_metadata.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_region_metadata.? (Poly) lib!log.layout_v.RegionMetadata.)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.? () Int)
(declare-fun lib!log.layout_v.extract_region_crc.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_region_crc.? (Poly) Int)
(declare-fun lib!log.layout_v.get_log_metadata_pos.? (Poly) Int)
(declare-fun lib!log.layout_v.extract_log_metadata.? (Poly Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_log_metadata.? (Poly Poly) lib!log.layout_v.LogMetadata.)
(declare-fun lib!log.layout_v.extract_log_crc.? (Poly Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_log_crc.? (Poly Poly) Int)
(declare-fun lib!log.layout_v.get_log_crc_end.? (Poly) Int)
(declare-fun lib!log.layout_v.LOG_PROGRAM_GUID.? () Int)
(declare-fun lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.? () Int)
(declare-fun lib!log.inv_v.metadata_consistent_with_info.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!log.layout_v.MIN_LOG_AREA_SIZE.? () Int)
(declare-fun lib!log.layout_v.relative_log_pos_to_log_area_offset.? (Poly Poly Poly) Int)
(declare-fun lib!log.inv_v.info_consistent_with_log_area.? (Poly Poly Poly) Bool)
(declare-fun lib!pmem.subregion_v.get_subregion_view.? (Poly Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-fun lib!log.inv_v.info_consistent_with_log_area_in_region.? (Poly Poly Poly) Bool)
(declare-fun lib!log.inv_v.metadata_types_set.? (Poly) Bool)
(declare-fun lib!log.layout_v.extract_log_from_log_area.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.recover_log_from_log_area_given_metadata.? (Poly Poly Poly) core!option.Option.)
(declare-fun lib!log.layout_v.recover_log.? (Poly Poly Poly Poly) core!option.Option.)
(declare-fun lib!log.layout_v.recover_given_cdb.? (Poly Poly Poly) core!option.Option.)
(declare-fun lib!log.layout_v.recover_cdb.? (Poly) core!option.Option.)
(declare-fun lib!pmem.subregion_v.impl&%1.start.? (Poly) Int)
(declare-fun lib!pmem.subregion_v.impl&%1.len.? (Poly) Int)
(declare-fun lib!pmem.subregion_v.impl&%1.view.? (Dcr Type Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.len.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.len.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (<= 0 (lib!pmem.pmemspec_t.impl&%6.len.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!)))))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? Self%&. Self%&)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.) (forall ((self! Poly) (i! Poly) (j! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (<= (%I i!) (%I k$)) (< (%I k$) (%I j!))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$)))))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!) Self%&)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!) BOOL)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? Self%&. Self%& self!) (UINT 64))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.) (forall ((T&. Dcr) (T& Type) (bytes! Poly)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (= (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!) (B (= (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? T&. T& (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? T&. T& bytes!)) bytes!)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!))))))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%3 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%0 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.committed.))
(declare-fun %%lambda%%1 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%1 _addr$ b$) (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. b$)))) :pattern ((%%apply%%1 %%lambda%%1 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.committed.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.committed.? self!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ (UINT 8) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%1))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.committed.? self!))))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.maybe_corrupted.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.maybe_corrupted.) (forall ((bytes! Poly) (true_bytes! Poly) (addrs! Poly)) (! (= (lib!pmem.pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs!) (and (let ((tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) true_bytes!))) (and (= (vstd!seq.Seq.len.? $ (UINT 8) bytes!) tmp%%$) (= tmp%%$ (vstd!seq.Seq.len.? $ INT addrs!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (UINT 8) bytes!))) (lib!pmem.pmemspec_t.maybe_corrupted_byte.? (vstd!seq.Seq.index.? $ (UINT 8) bytes! i$) (vstd!seq.Seq.index.? $ (UINT 8) true_bytes! i$) (vstd!seq.Seq.index.? $ INT addrs! i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) bytes! i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) true_bytes! i$)) :pattern ((vstd!seq.Seq.index.? $ INT addrs! i$)))))) :pattern ((lib!pmem.pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs!))))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!) (let ((tmp%%$ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)))) (ite (is-core!option.Option./None_ tmp%%$) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)) (let ((b$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) b$)))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%4 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(declare-fun req%vstd!arithmetic.div_mod.lemma_mod_bound. (Int Int) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((x! Int) (m! Int)) (! (= (req%vstd!arithmetic.div_mod.lemma_mod_bound. x! m!) (=> %%global_location_label%%5 (< 0 m!))) :pattern ((req%vstd!arithmetic.div_mod.lemma_mod_bound. x! m!)))))
(declare-fun ens%vstd!arithmetic.div_mod.lemma_mod_bound. (Int Int) Bool)
(assert (forall ((x! Int) (m! Int)) (! (= (ens%vstd!arithmetic.div_mod.lemma_mod_bound. x! m!) (let ((tmp%%$ (EucMod x! m!))) (and (<= 0 tmp%%$) (< tmp%%$ m!)))) :pattern ((ens%vstd!arithmetic.div_mod.lemma_mod_bound. x! m!)))))
(assert (=> (fuel_bool fuel%vstd!arithmetic.div_mod.lemma_mod_bound.) (forall ((x! Int) (m! Int)) (! (=> (< 0 m!) (let ((tmp%%$ (EucMod x! m!))) (and (<= 0 tmp%%$) (< tmp%%$ m!)))) :pattern ((EucMod x! m!))))))
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%2 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%2 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(declare-fun req%vstd!seq_lib.impl&%0.drop_first. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_first. A&. A& self!) (=> %%global_location_label%%6 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_first. A&. A& self!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_first.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_first.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_first.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 1) (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq_lib.impl&%0.drop_first.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_first.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_first.? A&. A& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!) BOOL)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!)))))
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self!) (=> %%global_location_label%%7 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self!)))))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (result! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self! result!) (and (has_type result! (UINT 64)) (= (%I result!) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self! result!)))))
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (self! Poly) (addr! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. Self%&. Self%& S&. S& self! addr!) (and (=> %%global_location_label%%8 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!))) (=> %%global_location_label%%9 (let ((tmp%%$ (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) (and (and (<= 0 (%I addr!)) (< (%I addr!) tmp%%$)) (<= tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)))))) (=> %%global_location_label%%10 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))) (=> %%global_location_label%%11 (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? S&. S& (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. Self%&. Self%& S&. S& self! addr!)))))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-fun %%lambda%%3 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0) i$) (I (Add (%I i$) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0) i$)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (self! Poly) (addr! Poly) (bytes! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. Self%&. Self%& S&. S& self! addr! bytes!) (and (has_type bytes! (TYPE%core!result.Result. $ (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. S&. S&) $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. bytes!)) (let ((bytes$ (core!result.Result./Ok/0 (%Poly%core!result.Result. bytes!)))) (let ((true_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))) (let ((addrs$ (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&) (Poly%fun%1. (mk_fun (%%lambda%%3 (%I addr!)))))))) (ite (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!))) (= (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& bytes$) true_bytes$) (lib!pmem.pmemspec_t.maybe_corrupted.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& bytes$)) (Poly%vstd!seq.Seq<u8.>. true_bytes$) (Poly%vstd!seq.Seq<int.>. addrs$))))))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. Self%&. Self%& S&. S& self! addr! bytes!)))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! (I 0) (I (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!))))))
(assert (forall ((bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!pmem.pmemspec_t.spec_crc_u64.? bytes!))) :pattern ((lib!pmem.pmemspec_t.spec_crc_u64.? bytes!)))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (I 8))))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 64)))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (I 8))))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 64)))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 64)))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ (UINT 64)))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.spec_crc_bytes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.spec_crc_bytes.) (forall ((bytes! Poly)) (! (= (lib!pmem.pmemspec_t.spec_crc_bytes.? bytes!) (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I (lib!pmem.pmemspec_t.spec_crc_u64.? bytes!))))) :pattern ((lib!pmem.pmemspec_t.spec_crc_bytes.? bytes!))))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.all_elements_unique.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.all_elements_unique.) (forall ((seq! Poly)) (! (= (lib!pmem.pmemspec_t.all_elements_unique.? seq!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ INT seq!))) (not (= (vstd!seq.Seq.index.? $ INT seq! i$) (vstd!seq.Seq.index.? $ INT seq! j$))))) :pattern ((vstd!seq.Seq.index.? $ INT seq! i$) (vstd!seq.Seq.index.? $ INT seq! j$))))) :pattern ((lib!pmem.pmemspec_t.all_elements_unique.? seq!))))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.CDB_FALSE.) (= lib!pmem.pmemspec_t.CDB_FALSE.? 11756720295082287198)))
(assert (uInv 64 lib!pmem.pmemspec_t.CDB_FALSE.?))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.CDB_TRUE.) (= lib!pmem.pmemspec_t.CDB_TRUE.? 12331324665725530551)))
(assert (uInv 64 lib!pmem.pmemspec_t.CDB_TRUE.?))
(declare-fun ens%lib!pmem.pmcopy_t.impl&%2.as_slice. (Dcr Type Poly slice%<u8.>.) Bool)
(assert (forall ((S&. Dcr) (S& Type) (self! Poly) (out! slice%<u8.>.)) (! (= (ens%lib!pmem.pmcopy_t.impl&%2.as_slice. S&. S& self! out!) (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. out!))) (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& self!))) :pattern ((ens%lib!pmem.pmcopy_t.impl&%2.as_slice. S&. S& self! out!)))))
(declare-fun req%lib!pmem.pmcopy_t.impl&%2.extract_init_val. (Dcr Type Poly Poly vstd!seq.Seq<u8.>. Bool) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((S&. Dcr) (S& Type) (self! Poly) (true_val! Poly) (true_bytes! vstd!seq.Seq<u8.>.) (impervious_to_corruption! Bool)) (! (= (req%lib!pmem.pmcopy_t.impl&%2.extract_init_val. S&. S& self! true_val! true_bytes! impervious_to_corruption!) (=> %%global_location_label%%12 (=> (not impervious_to_corruption!) (and (= true_bytes! (%Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& true_val!))) (= (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& self!) true_bytes!))))) :pattern ((req%lib!pmem.pmcopy_t.impl&%2.extract_init_val. S&. S& self! true_val! true_bytes! impervious_to_corruption!)))))
(declare-fun ens%lib!pmem.pmcopy_t.impl&%2.extract_init_val. (Dcr Type Poly Poly vstd!seq.Seq<u8.>. Bool Poly) Bool)
(assert (forall ((S&. Dcr) (S& Type) (self! Poly) (true_val! Poly) (true_bytes! vstd!seq.Seq<u8.>.) (impervious_to_corruption! Bool) (out! Poly)) (! (= (ens%lib!pmem.pmcopy_t.impl&%2.extract_init_val. S&. S& self! true_val! true_bytes! impervious_to_corruption! out!) (and (has_type out! S&) (= out! true_val!))) :pattern ((ens%lib!pmem.pmcopy_t.impl&%2.extract_init_val. S&. S& self! true_val! true_bytes! impervious_to_corruption! out!)))))
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 128) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.) (= lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.? 0)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? 256)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? 128)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? 88)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.spec_padding_needed.) (forall ((offset! Poly) (align! Poly)) (! (= (lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!) (let ((misalignment$ (nClip (EucMod (%I offset!) (%I align!))))) (ite (> misalignment$ 0) (nClip (Sub (%I align!) misalignment$)) 0))) :pattern ((lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!))))))
(assert (forall ((offset! Poly) (align! Poly)) (! (=> (and (has_type offset! NAT) (has_type align! NAT)) (<= 0 (lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!))) :pattern ((lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!)))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128)) (I 16))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)) (I 16))))
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%21.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%21.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$3))))))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.extract_bytes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.extract_bytes.) (forall ((bytes! Poly) (pos! Poly) (len! Poly)) (! (= (lib!pmem.pmemspec_t.extract_bytes.? bytes! pos! len!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) bytes! pos! (I (nClip (Add (%I pos!) (%I len!))))))) :pattern ((lib!pmem.pmemspec_t.extract_bytes.? bytes! pos! len!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? 80)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_log_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_log_cdb.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_log_cdb.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!log.layout_v.extract_log_cdb.? mem!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_log_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_log_cdb.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_log_cdb.? mem!) (%I (let ((bytes$ (lib!log.layout_v.extract_log_cdb.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_log_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!log.layout_v.deserialize_log_cdb.? mem!))) :pattern ((lib!log.layout_v.deserialize_log_cdb.? mem!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_and_check_log_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_and_check_log_cdb.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_and_check_log_cdb.? mem!) (let ((log_cdb$ (lib!log.layout_v.deserialize_log_cdb.? mem!))) (ite (= log_cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?) (core!option.Option./Some (B false)) (ite (= log_cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) (core!option.Option./Some (B true)) core!option.Option./None)))) :pattern ((lib!log.layout_v.deserialize_and_check_log_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%core!option.Option. (lib!log.layout_v.deserialize_and_check_log_cdb.? mem!)) (TYPE%core!option.Option. $ BOOL))) :pattern ((lib!log.layout_v.deserialize_and_check_log_cdb.? mem!)))))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!log.layout_v.LogMetadata.))
(declare-fun req%lib!util_v.nat_seq_max. (Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((seq! Poly)) (! (= (req%lib!util_v.nat_seq_max. seq!) (=> %%global_location_label%%13 (< 0 (vstd!seq.Seq.len.? $ NAT seq!)))) :pattern ((req%lib!util_v.nat_seq_max. seq!)))))
(assert (fuel_bool_default fuel%lib!util_v.nat_seq_max.))
(declare-const fuel_nat%lib!util_v.nat_seq_max. Fuel)
(assert (forall ((seq! Poly) (fuel% Fuel)) (! (= (lib!util_v.rec%nat_seq_max.? seq! fuel%) (lib!util_v.rec%nat_seq_max.? seq! zero)) :pattern ((lib!util_v.rec%nat_seq_max.? seq! fuel%)))))
(assert (forall ((seq! Poly) (fuel% Fuel)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (= (lib!util_v.rec%nat_seq_max.? seq! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? $ NAT seq!) 1) (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) (ite (= (vstd!seq.Seq.len.? $ NAT seq!) 0) 0 (let ((later_max$ (lib!util_v.rec%nat_seq_max.? (vstd!seq_lib.impl&%0.drop_first.? $ NAT seq!) fuel%))) (ite (>= (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) later_max$) (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) later_max$)))))) :pattern ((lib!util_v.rec%nat_seq_max.? seq! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!util_v.nat_seq_max.) (forall ((seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (= (lib!util_v.nat_seq_max.? seq!) (lib!util_v.rec%nat_seq_max.? seq! (succ fuel_nat%lib!util_v.nat_seq_max.)))) :pattern ((lib!util_v.nat_seq_max.? seq!))))))
(assert (forall ((seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (<= 0 (lib!util_v.nat_seq_max.? seq!))) :pattern ((lib!util_v.nat_seq_max.? seq!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%21.spec_align_of.))
(declare-fun %%array%%0 (Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2))) (and (= (%%apply%%2 %%x%% 0) %%hole%%0) (= (%%apply%%2 %%x%% 1) %%hole%%1) (= (%%apply%%2 %%x%% 2) %%hole%%2))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2)))))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%21.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!log.layout_v.LogMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 3)) (array_new $ NAT 3 (%%array%%0 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!log.layout_v.LogMetadata.))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!log.layout_v.LogMetadata.))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128)))
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!log.layout_v.LogMetadata.)))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!log.layout_v.LogMetadata.))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.? 120)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? 160)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%3.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%3.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$3))))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_global_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_global_metadata.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_global_metadata.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.))) :pattern ((lib!log.layout_v.extract_global_metadata.? mem!))))))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%3.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%3.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 3)) (array_new $ NAT 3 (%%array%%0 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!log.layout_v.GlobalMetadata.)))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!log.layout_v.GlobalMetadata.))
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_global_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_global_metadata.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_global_metadata.? mem!) (%Poly%lib!log.layout_v.GlobalMetadata. (let ((bytes$ (lib!log.layout_v.extract_global_metadata.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_global_metadata.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.deserialize_global_metadata.? mem!)) TYPE%lib!log.layout_v.GlobalMetadata.)) :pattern ((lib!log.layout_v.deserialize_global_metadata.? mem!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.) (= lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.? 32)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_global_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_global_crc.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_global_crc.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!log.layout_v.extract_global_crc.? mem!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_global_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_global_crc.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_global_crc.? mem!) (%I (let ((bytes$ (lib!log.layout_v.extract_global_crc.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_global_crc.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!log.layout_v.deserialize_global_crc.? mem!))) :pattern ((lib!log.layout_v.deserialize_global_crc.? mem!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.) (= lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.? 40)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%12.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%12.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$3))))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_region_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_region_metadata.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_region_metadata.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.))) :pattern ((lib!log.layout_v.extract_region_metadata.? mem!))))))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!log.layout_v.RegionMetadata.))
(assert (fuel_bool_default fuel%lib!log.layout_v.impl&%12.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.impl&%12.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!log.layout_v.RegionMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 3)) (array_new $ NAT 3 (%%array%%0 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!log.layout_v.RegionMetadata.))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!log.layout_v.RegionMetadata.))
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!log.layout_v.RegionMetadata.)))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!log.layout_v.RegionMetadata.))
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_region_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_region_metadata.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_region_metadata.? mem!) (%Poly%lib!log.layout_v.RegionMetadata. (let ((bytes$ (lib!log.layout_v.extract_region_metadata.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_region_metadata.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.deserialize_region_metadata.? mem!)) TYPE%lib!log.layout_v.RegionMetadata.)) :pattern ((lib!log.layout_v.deserialize_region_metadata.? mem!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.) (= lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.? 72)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_region_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_region_crc.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.extract_region_crc.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!log.layout_v.extract_region_crc.? mem!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_region_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_region_crc.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.deserialize_region_crc.? mem!) (%I (let ((bytes$ (lib!log.layout_v.extract_region_crc.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_region_crc.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!log.layout_v.deserialize_region_crc.? mem!))) :pattern ((lib!log.layout_v.deserialize_region_crc.? mem!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.get_log_metadata_pos.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.get_log_metadata_pos.) (forall ((cdb! Poly)) (! (= (lib!log.layout_v.get_log_metadata_pos.? cdb!) (ite (%B cdb!) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?)) :pattern ((lib!log.layout_v.get_log_metadata_pos.? cdb!))))))
(assert (forall ((cdb! Poly)) (! (=> (has_type cdb! BOOL) (uInv 64 (lib!log.layout_v.get_log_metadata_pos.? cdb!))) :pattern ((lib!log.layout_v.get_log_metadata_pos.? cdb!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_log_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_log_metadata.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.extract_log_metadata.? mem! cdb!) (let ((pos$ (lib!log.layout_v.get_log_metadata_pos.? cdb!))) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)))) :pattern ((lib!log.layout_v.extract_log_metadata.? mem! cdb!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_log_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_log_metadata.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.deserialize_log_metadata.? mem! cdb!) (%Poly%lib!log.layout_v.LogMetadata. (let ((bytes$ (lib!log.layout_v.extract_log_metadata.? mem! cdb!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_log_metadata.? mem! cdb!))))))
(assert (forall ((mem! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type cdb! BOOL)) (has_type (Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.deserialize_log_metadata.? mem! cdb!)) TYPE%lib!log.layout_v.LogMetadata.)) :pattern ((lib!log.layout_v.deserialize_log_metadata.? mem! cdb!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_log_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_log_crc.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.extract_log_crc.? mem! cdb!) (let ((pos$ (ite (%B cdb!) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) :pattern ((lib!log.layout_v.extract_log_crc.? mem! cdb!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.deserialize_log_crc.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.deserialize_log_crc.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.deserialize_log_crc.? mem! cdb!) (%I (let ((bytes$ (lib!log.layout_v.extract_log_crc.? mem! cdb!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!log.layout_v.deserialize_log_crc.? mem! cdb!))))))
(assert (forall ((mem! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type cdb! BOOL)) (uInv 64 (lib!log.layout_v.deserialize_log_crc.? mem! cdb!))) :pattern ((lib!log.layout_v.deserialize_log_crc.? mem! cdb!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.get_log_crc_end.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.get_log_crc_end.) (forall ((cdb! Poly)) (! (= (lib!log.layout_v.get_log_crc_end.? cdb!) (uClip 64 (Add (Add (lib!log.layout_v.get_log_metadata_pos.? cdb!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) :pattern ((lib!log.layout_v.get_log_crc_end.? cdb!))))))
(assert (forall ((cdb! Poly)) (! (=> (has_type cdb! BOOL) (uInv 64 (lib!log.layout_v.get_log_crc_end.? cdb!))) :pattern ((lib!log.layout_v.get_log_crc_end.? cdb!)))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (= (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? T&. T& self!) (I (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? T&. T& self!))))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? T&. T& self!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.LOG_PROGRAM_GUID.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.LOG_PROGRAM_GUID.) (= lib!log.layout_v.LOG_PROGRAM_GUID.? 189980176382013619342097570959470067903)))
(assert (uInv 128 lib!log.layout_v.LOG_PROGRAM_GUID.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.) (= lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.? 1)))
(assert (uInv 64 lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.?))
(assert (fuel_bool_default fuel%lib!log.inv_v.metadata_consistent_with_info.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.metadata_consistent_with_info.) (forall ((pm_region_view! Poly) (log_id! Poly) (cdb! Poly) (info! Poly)) (! (= (lib!log.inv_v.metadata_consistent_with_info.? pm_region_view! log_id! cdb! info!) (let ((mem$ (lib!pmem.pmemspec_t.impl&%6.committed.? pm_region_view!))) (let ((global_metadata$ (lib!log.layout_v.deserialize_global_metadata.? (Poly%vstd!seq.Seq<u8.>. mem$)))) (let ((global_crc$ (lib!log.layout_v.deserialize_global_crc.? (Poly%vstd!seq.Seq<u8.>. mem$)))) (let ((region_metadata$ (lib!log.layout_v.deserialize_region_metadata.? (Poly%vstd!seq.Seq<u8.>. mem$)))) (let ((region_crc$ (lib!log.layout_v.deserialize_region_crc.? (Poly%vstd!seq.Seq<u8.>. mem$)))) (let ((log_metadata$ (lib!log.layout_v.deserialize_log_metadata.? (Poly%vstd!seq.Seq<u8.>. mem$) cdb!))) (let ((log_crc$ (lib!log.layout_v.deserialize_log_crc.? (Poly%vstd!seq.Seq<u8.>. mem$) cdb!))) (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? pm_region_view! (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?)) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? pm_region_view! (I (lib!log.layout_v.get_log_metadata_pos.? cdb!)) (I (lib!log.layout_v.get_log_crc_end.? cdb!)))) (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))))) (= region_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))))) (= log_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))))) (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) lib!log.layout_v.LOG_PROGRAM_GUID.?)) (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.?)) (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.)))) (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem$)))) (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (%I log_id!))) (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))) (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (>= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem$)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!))))))))))))) :pattern ((lib!log.inv_v.metadata_consistent_with_info.? pm_region_view! log_id! cdb! info!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE.) (= lib!log.layout_v.MIN_LOG_AREA_SIZE.? 1)))
(assert (uInv 64 lib!log.layout_v.MIN_LOG_AREA_SIZE.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset.) (forall ((pos_relative_to_head! Poly) (head_log_area_offset! Poly) (log_area_len! Poly)) (! (= (lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head! head_log_area_offset! log_area_len!) (let ((log_area_offset$ (Add (%I head_log_area_offset!) (%I pos_relative_to_head!)))) (ite (>= log_area_offset$ (%I log_area_len!)) (Sub log_area_offset$ (%I log_area_len!)) log_area_offset$))) :pattern ((lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head! head_log_area_offset! log_area_len!))))))
(assert (fuel_bool_default fuel%lib!log.inv_v.info_consistent_with_log_area.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.info_consistent_with_log_area.) (forall ((log_area_view! Poly) (info! Poly) (state! Poly)) (! (= (lib!log.inv_v.info_consistent_with_log_area.? log_area_view! info! state!) (and (and (and (and (and (and (and (and (>= (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)) lib!log.layout_v.MIN_LOG_AREA_SIZE.?) (let ((tmp%%$ (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (and (<= (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)) tmp%%$) (<= tmp%%$ (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))))) (= (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. info!)) (EucMod (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. info!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!))))) (<= (Add (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. info!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!))) 340282366920938463463374607431768211455)) (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. state!)))) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. state!)))) (Sub (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!))))) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. state!)) (lib!log.logimpl_v.LogInfo./LogInfo/head (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. state!)) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (forall ((pos_relative_to_head$ Poly)) (! (=> (has_type pos_relative_to_head$ INT) (let ((log_area_offset$ (lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head$ (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. info!))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))))) (let ((pmb$ (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. log_area_view!))) (I log_area_offset$))))) (and (and (=> (and (<= 0 (%I pos_relative_to_head$)) (< (%I pos_relative_to_head$) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (and (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pmb$))) (%I (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. state!))) pos_relative_to_head$))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pmb$)))))) (=> (and (<= (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!)) (%I pos_relative_to_head$)) (< (%I pos_relative_to_head$) (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (= (lib!pmem.pmemspec_t.impl&%5.flush_byte.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pmb$)) (%I (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. state!))) (I (Sub (%I pos_relative_to_head$) (lib!log.logimpl_v.LogInfo./LogInfo/log_length (%Poly%lib!log.logimpl_v.LogInfo. info!))))))))) (=> (and (<= (lib!log.logimpl_v.LogInfo./LogInfo/log_plus_pending_length (%Poly%lib!log.logimpl_v.LogInfo. info!)) (%I pos_relative_to_head$)) (< (%I pos_relative_to_head$) (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pmb$))))))))) :pattern ((lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head$ (I (lib!log.logimpl_v.LogInfo./LogInfo/head_log_area_offset (%Poly%lib!log.logimpl_v.LogInfo. info!))) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!))))))))) :pattern ((lib!log.inv_v.info_consistent_with_log_area.? log_area_view! info! state!))))))
(declare-fun req%lib!pmem.subregion_v.get_subregion_view. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((region! Poly) (start! Poly) (len! Poly)) (! (= (req%lib!pmem.subregion_v.get_subregion_view. region! start! len!) (and (=> %%global_location_label%%14 (<= 0 (%I start!))) (=> %%global_location_label%%15 (<= 0 (%I len!))) (=> %%global_location_label%%16 (<= (nClip (Add (%I start!) (%I len!))) (lib!pmem.pmemspec_t.impl&%6.len.? region!))))) :pattern ((req%lib!pmem.subregion_v.get_subregion_view. region! start! len!)))))
(assert (fuel_bool_default fuel%lib!pmem.subregion_v.get_subregion_view.))
(assert (=> (fuel_bool fuel%lib!pmem.subregion_v.get_subregion_view.) (forall ((region! Poly) (start! Poly) (len! Poly)) (! (= (lib!pmem.subregion_v.get_subregion_view.? region! start! len!) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. region!))) start! (I (nClip (Add (%I start!) (%I len!)))))))) :pattern ((lib!pmem.subregion_v.get_subregion_view.? region! start! len!))))))
(assert (fuel_bool_default fuel%lib!log.inv_v.info_consistent_with_log_area_in_region.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.info_consistent_with_log_area_in_region.) (forall ((pm_region_view! Poly) (info! Poly) (state! Poly)) (! (= (lib!log.inv_v.info_consistent_with_log_area_in_region.? pm_region_view! info! state!) (and (>= (lib!pmem.pmemspec_t.impl&%6.len.? pm_region_view!) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!)))) (lib!log.inv_v.info_consistent_with_log_area.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.subregion_v.get_subregion_view.? pm_region_view! (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (I (lib!log.logimpl_v.LogInfo./LogInfo/log_area_len (%Poly%lib!log.logimpl_v.LogInfo. info!))))) info! state!))) :pattern ((lib!log.inv_v.info_consistent_with_log_area_in_region.? pm_region_view! info! state!))))))
(assert (fuel_bool_default fuel%lib!log.inv_v.metadata_types_set.))
(assert (=> (fuel_bool fuel%lib!log.inv_v.metadata_types_set.) (forall ((mem! Poly)) (! (= (lib!log.inv_v.metadata_types_set.? mem!) (and (and (let ((metadata_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?)) (let ((crc_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?)) (let ((metadata$ (%Poly%lib!log.layout_v.GlobalMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.))))))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. metadata$))))))))) (let ((metadata_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?)) (let ((crc_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?)) (let ((metadata$ (%Poly%lib!log.layout_v.RegionMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.))))))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. metadata$)))))))))) (let ((cdb_pos$ lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?)) (let ((cdb$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip cdb_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (let ((metadata_pos$ (ite (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))) (let ((metadata$ (%Poly%lib!log.layout_v.LogMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I metadata_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))))))) (let ((crc_pos$ (ite (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I crc_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip cdb_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (or (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) (= cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I metadata_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I crc_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. metadata$))))))))))))) :pattern ((lib!log.inv_v.metadata_types_set.? mem!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.extract_log_from_log_area.))
(declare-fun %%lambda%%4 (Poly Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (pos_relative_to_head$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) pos_relative_to_head$) (vstd!seq.Seq.index.? %%hole%%2 %%hole%%3 %%hole%%4 (I (lib!log.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head$ %%hole%%0 %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) pos_relative_to_head$)))))
(assert (=> (fuel_bool fuel%lib!log.layout_v.extract_log_from_log_area.) (forall ((log_area! Poly) (head! Poly) (log_length! Poly)) (! (= (lib!log.layout_v.extract_log_from_log_area.? log_area! head! log_length!) (%Poly%vstd!seq.Seq<u8.>. (let ((head_log_area_offset$ (EucMod (%I head!) (vstd!seq.Seq.len.? $ (UINT 8) log_area!)))) (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (nClip (%I log_length!))) (Poly%fun%1. (mk_fun (%%lambda%%4 (I head_log_area_offset$) (I (vstd!seq.Seq.len.? $ (UINT 8) log_area!)) $ (UINT 8) log_area!))))))) :pattern ((lib!log.layout_v.extract_log_from_log_area.? log_area! head! log_length!))))))
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata.) (forall ((log_area! Poly) (head! Poly) (log_length! Poly)) (! (= (lib!log.layout_v.recover_log_from_log_area_given_metadata.? log_area! head! log_length!) (ite (or (> (%I log_length!) (vstd!seq.Seq.len.? $ (UINT 8) log_area!)) (> (Add (%I head!) (%I log_length!)) 340282366920938463463374607431768211455)) core!option.Option./None (core!option.Option./Some (Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.AbstractLogState./AbstractLogState (%I head!) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!log.layout_v.extract_log_from_log_area.? log_area! head! log_length!))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%I (I (vstd!seq.Seq.len.? $ (UINT 8) log_area!)))))))) :pattern ((lib!log.layout_v.recover_log_from_log_area_given_metadata.? log_area! head! log_length!))))))
(assert (forall ((log_area! Poly) (head! Poly) (log_length! Poly)) (! (=> (and (has_type log_area! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type head! INT) (has_type log_length! INT)) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_log_from_log_area_given_metadata.? log_area! head! log_length!)) (TYPE%core!option.Option. $ TYPE%lib!log.logspec_t.AbstractLogState.))) :pattern ((lib!log.layout_v.recover_log_from_log_area_given_metadata.? log_area! head! log_length!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_log.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_log.) (forall ((mem! Poly) (log_area_len! Poly) (head! Poly) (log_length! Poly)) (! (= (lib!log.layout_v.recover_log.? mem! log_area_len! head! log_length!) (lib!log.layout_v.recover_log_from_log_area_given_metadata.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (I (nClip (%I log_area_len!))))) head! log_length!)) :pattern ((lib!log.layout_v.recover_log.? mem! log_area_len! head! log_length!))))))
(assert (forall ((mem! Poly) (log_area_len! Poly) (head! Poly) (log_length! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type log_area_len! INT) (has_type head! INT) (has_type log_length! INT)) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_log.? mem! log_area_len! head! log_length!)) (TYPE%core!option.Option. $ TYPE%lib!log.logspec_t.AbstractLogState.))) :pattern ((lib!log.layout_v.recover_log.? mem! log_area_len! head! log_length!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_given_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_given_cdb.) (forall ((mem! Poly) (log_id! Poly) (cdb! Poly)) (! (= (lib!log.layout_v.recover_given_cdb.? mem! log_id! cdb!) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) core!option.Option./None (let ((global_metadata$ (lib!log.layout_v.deserialize_global_metadata.? mem!))) (let ((global_crc$ (lib!log.layout_v.deserialize_global_crc.? mem!))) (ite (not (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))))) core!option.Option./None (ite (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) lib!log.layout_v.LOG_PROGRAM_GUID.?)) core!option.Option./None (ite (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) 1) (ite (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.)))) core!option.Option./None (let ((region_metadata$ (lib!log.layout_v.deserialize_region_metadata.? mem!))) (let ((region_crc$ (lib!log.layout_v.deserialize_region_crc.? mem!))) (ite (not (= region_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))))) core!option.Option./None (ite (or (or (or (not (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (vstd!seq.Seq.len.? $ (UINT 8) mem!))) (not (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) (%I log_id!)))) (< (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$))) lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$)))))) core!option.Option./None (let ((log_metadata$ (lib!log.layout_v.deserialize_log_metadata.? mem! cdb!))) (let ((log_crc$ (lib!log.layout_v.deserialize_log_crc.? mem! cdb!))) (ite (not (= log_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))))) core!option.Option./None (lib!log.layout_v.recover_log.? mem! (I (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$)))) (I (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$)))) (I (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$))))))))))))) core!option.Option./None))))))) :pattern ((lib!log.layout_v.recover_given_cdb.? mem! log_id! cdb!))))))
(assert (forall ((mem! Poly) (log_id! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type log_id! (UINT 128)) (has_type cdb! BOOL)) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_given_cdb.? mem! log_id! cdb!)) (TYPE%core!option.Option. $ TYPE%lib!log.logspec_t.AbstractLogState.))) :pattern ((lib!log.layout_v.recover_given_cdb.? mem! log_id! cdb!)))))
(assert (fuel_bool_default fuel%lib!log.layout_v.recover_cdb.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.recover_cdb.) (forall ((mem! Poly)) (! (= (lib!log.layout_v.recover_cdb.? mem!) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?) core!option.Option./None (let ((global_metadata$ (lib!log.layout_v.deserialize_global_metadata.? mem!))) (let ((global_crc$ (lib!log.layout_v.deserialize_global_crc.? mem!))) (ite (not (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))))) core!option.Option./None (ite (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) lib!log.layout_v.LOG_PROGRAM_GUID.?)) core!option.Option./None (ite (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$))) 1) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) core!option.Option./None (lib!log.layout_v.deserialize_and_check_log_cdb.? mem!)) core!option.Option./None))))))) :pattern ((lib!log.layout_v.recover_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%core!option.Option. (lib!log.layout_v.recover_cdb.? mem!)) (TYPE%core!option.Option. $ BOOL))) :pattern ((lib!log.layout_v.recover_cdb.? mem!)))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 8)) (I 1))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 8)) (I 1))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT SZ)) (I 8))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT SZ)) (I 8))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ BOOL) (I 1))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ BOOL) (I 1))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (ARRAY T&. T& N&. N&)) (I (nClip (Mul (const_int N&) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? T&. T&))))))) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (ARRAY T&. T& N&. N&)))))))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (ARRAY T&. T& N&. N&)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? T&. T&))) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (ARRAY T&. T& N&. N&)))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.subregion_v.PersistentMemorySubregion.) (<= 0 (lib!pmem.subregion_v.impl&%1.start.? self!))) :pattern ((lib!pmem.subregion_v.impl&%1.start.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.subregion_v.PersistentMemorySubregion.) (<= 0 (lib!pmem.subregion_v.impl&%1.len.? self!))) :pattern ((lib!pmem.subregion_v.impl&%1.len.? self!)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(assert (tr_bound%vstd!view.View. $ BOOL))
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(assert (tr_bound%vstd!view.View. $ (UINT 128)))
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. T&. T&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. T&. T&)))))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 8)))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 8)))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 128)))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 128)))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT SZ)))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT SZ)))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ BOOL))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ BOOL))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (ARRAY T&. T& N&. N&))))))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 8)))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT SZ)))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. $ (ARRAY T&. T& N&. N&))))))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ BOOL))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 8)))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 128)))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT SZ)))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ BOOL))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.traits_t.PmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. $ (ARRAY T&. T& N&. N&))))))
(declare-fun ens%lib!pmem.traits_t.size_of. (Dcr Type Int) Bool)
(assert (forall ((S&. Dcr) (S& Type) (out! Int)) (! (= (ens%lib!pmem.traits_t.size_of. S&. S& out!) (and (uInv SZ out!) (= out! (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) :pattern ((ens%lib!pmem.traits_t.size_of. S&. S& out!)))))
(declare-fun req%lib!pmem.pmemutil_v.check_cdb. (lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. vstd!seq.Seq<u8.>. Bool vstd!seq.Seq<int.>.) Bool)
(declare-fun %%lambda%%5 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) i$) (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) i$)))))
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((cdb_c! lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.) (mem! vstd!seq.Seq<u8.>.) (impervious_to_corruption! Bool) (cdb_addrs! vstd!seq.Seq<int.>.)) (! (= (req%lib!pmem.pmemutil_v.check_cdb. cdb_c! mem! impervious_to_corruption! cdb_addrs!) (and (=> %%global_location_label%%17 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. cdb_addrs!)))) (<= (%I (vstd!seq.Seq.index.? $ INT (Poly%vstd!seq.Seq<int.>. cdb_addrs!) i$)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!))))) :pattern ((vstd!seq.Seq.index.? $ INT (Poly%vstd!seq.Seq<int.>. cdb_addrs!) i$))))) (=> %%global_location_label%%18 (lib!pmem.pmemspec_t.all_elements_unique.? (Poly%vstd!seq.Seq<int.>. cdb_addrs!))) (=> %%global_location_label%%19 (let ((true_cdb_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. cdb_addrs!) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!)))))))) (let ((true_cdb$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. true_cdb_bytes$))))) (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. true_cdb_bytes$))) (or (= true_cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?) (= true_cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?))) (ite impervious_to_corruption! (= (lib!pmem.pmcopy_t.impl&%2.view.? $ (UINT 64) (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. cdb_c!)) true_cdb_bytes$) (lib!pmem.pmemspec_t.maybe_corrupted.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.impl&%2.view.? $ (UINT 64) (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. cdb_c!))) (Poly%vstd!seq.Seq<u8.>. true_cdb_bytes$) (Poly%vstd!seq.Seq<int.>. cdb_addrs!))))))))) :pattern ((req%lib!pmem.pmemutil_v.check_cdb. cdb_c! mem! impervious_to_corruption! cdb_addrs!)))))
(declare-fun ens%lib!pmem.pmemutil_v.check_cdb. (lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. vstd!seq.Seq<u8.>. Bool vstd!seq.Seq<int.>. core!option.Option.) Bool)
(assert (forall ((cdb_c! lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.) (mem! vstd!seq.Seq<u8.>.) (impervious_to_corruption! Bool) (cdb_addrs! vstd!seq.Seq<int.>.) (result! core!option.Option.)) (! (= (ens%lib!pmem.pmemutil_v.check_cdb. cdb_c! mem! impervious_to_corruption! cdb_addrs! result!) (and (has_type (Poly%core!option.Option. result!) (TYPE%core!option.Option. $ BOOL)) (let ((true_cdb_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. cdb_addrs!) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!)))))))) (let ((true_cdb$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. true_cdb_bytes$))))) (ite (is-core!option.Option./Some_ result!) (let ((b$ (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result!)))))) (ite b$ (= true_cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) (= true_cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?))) (not impervious_to_corruption!)))))) :pattern ((ens%lib!pmem.pmemutil_v.check_cdb. cdb_c! mem! impervious_to_corruption! cdb_addrs! result!)))))
(declare-fun req%lib!log.start_v.read_cdb. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm_region! Poly)) (! (= (req%lib!log.start_v.read_cdb. PMRegion&. PMRegion& pm_region!) (and (=> %%global_location_label%%20 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm_region!))) (=> %%global_location_label%%21 (is-core!option.Option./Some_ (lib!log.layout_v.recover_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))))) (=> %%global_location_label%%22 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (=> %%global_location_label%%23 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))))))) :pattern ((req%lib!log.start_v.read_cdb. PMRegion&. PMRegion& pm_region!)))))
(declare-fun ens%lib!log.start_v.read_cdb. (Dcr Type Poly core!result.Result.) Bool)
(define-fun is-lib!log.logimpl_t.LogErr./CRCMismatch_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./CRCMismatch) c))
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm_region! Poly) (result! core!result.Result.)) (! (= (ens%lib!log.start_v.read_cdb. PMRegion&. PMRegion& pm_region! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ BOOL $ TYPE%lib!log.logimpl_t.LogErr.)) (ite (is-core!result.Result./Ok_ result!) (let ((b$ (%B (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (core!option.Option./Some (B b$)) (lib!log.layout_v.recover_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)))) (let ((e$ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= e$ (lib!log.logimpl_t.LogErr./PmemErr (%Poly%lib!pmem.pmemspec_t.PmemError. (Poly%lib!pmem.pmemspec_t.PmemError. lib!pmem.pmemspec_t.PmemError./AccessOutOfRange))))))))) :pattern ((ens%lib!log.start_v.read_cdb. PMRegion&. PMRegion& pm_region! result!)))))
(declare-fun req%lib!pmem.pmemutil_v.check_crc. (slice%<u8.>. slice%<u8.>. vstd!seq.Seq<u8.>. Bool vstd!seq.Seq<int.>. vstd!seq.Seq<int.>.) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((data_c! slice%<u8.>.) (crc_c! slice%<u8.>.) (mem! vstd!seq.Seq<u8.>.) (impervious_to_corruption! Bool) (data_addrs! vstd!seq.Seq<int.>.) (crc_addrs! vstd!seq.Seq<int.>.)) (! (= (req%lib!pmem.pmemutil_v.check_crc. data_c! crc_c! mem! impervious_to_corruption! data_addrs! crc_addrs!) (and (=> %%global_location_label%%24 (<= (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. data_addrs!)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!)))) (=> %%global_location_label%%25 (<= (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs!)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!)))) (=> %%global_location_label%%26 (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. crc_c!))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (=> %%global_location_label%%27 (lib!pmem.pmemspec_t.all_elements_unique.? (Poly%vstd!seq.Seq<int.>. data_addrs!))) (=> %%global_location_label%%28 (lib!pmem.pmemspec_t.all_elements_unique.? (Poly%vstd!seq.Seq<int.>. crc_addrs!))) (=> %%global_location_label%%29 (let ((true_data_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. data_addrs!))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. data_addrs!) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!)))))))) (let ((true_crc_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs!))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs!) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!)))))))) (ite impervious_to_corruption! (and (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. data_c!))) true_data_bytes$) (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. crc_c!))) true_crc_bytes$)) (and (lib!pmem.pmemspec_t.maybe_corrupted.? (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. data_c!)) (Poly%vstd!seq.Seq<u8.>. true_data_bytes$) (Poly%vstd!seq.Seq<int.>. data_addrs!)) (lib!pmem.pmemspec_t.maybe_corrupted.? (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. crc_c!)) (Poly%vstd!seq.Seq<u8.>. true_crc_bytes$) (Poly%vstd!seq.Seq<int.>. crc_addrs!))))))))) :pattern ((req%lib!pmem.pmemutil_v.check_crc. data_c! crc_c! mem! impervious_to_corruption! data_addrs! crc_addrs!)))))
(declare-fun ens%lib!pmem.pmemutil_v.check_crc. (slice%<u8.>. slice%<u8.>. vstd!seq.Seq<u8.>. Bool vstd!seq.Seq<int.>. vstd!seq.Seq<int.>. Bool) Bool)
(assert (forall ((data_c! slice%<u8.>.) (crc_c! slice%<u8.>.) (mem! vstd!seq.Seq<u8.>.) (impervious_to_corruption! Bool) (data_addrs! vstd!seq.Seq<int.>.) (crc_addrs! vstd!seq.Seq<int.>.) (b! Bool)) (! (= (ens%lib!pmem.pmemutil_v.check_crc. data_c! crc_c! mem! impervious_to_corruption! data_addrs! crc_addrs! b!) (let ((true_data_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. data_addrs!))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. data_addrs!) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!)))))))) (let ((true_crc_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs!))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs!) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem!)))))))) (=> (= true_crc_bytes$ (lib!pmem.pmemspec_t.spec_crc_bytes.? (Poly%vstd!seq.Seq<u8.>. true_data_bytes$))) (ite b! (and (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. data_c!))) true_data_bytes$) (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. crc_c!))) true_crc_bytes$)) (not impervious_to_corruption!)))))) :pattern ((ens%lib!pmem.pmemutil_v.check_crc. data_c! crc_c! mem! impervious_to_corruption! data_addrs! crc_addrs! b!)))))
(declare-fun req%lib!pmem.subregion_v.impl&%1.new. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm! Poly) (start! Int) (len! Int)) (! (= (req%lib!pmem.subregion_v.impl&%1.new. PMRegion&. PMRegion& pm! start! len!) (and (=> %%global_location_label%%30 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm!))) (=> %%global_location_label%%31 (let ((tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm!)))) (and (<= (Add start! len!) tmp%%$) (<= tmp%%$ 18446744073709551615)))))) :pattern ((req%lib!pmem.subregion_v.impl&%1.new. PMRegion&. PMRegion& pm! start! len!)))))
(declare-fun ens%lib!pmem.subregion_v.impl&%1.new. (Dcr Type Poly Int Int lib!pmem.subregion_v.PersistentMemorySubregion.) Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm! Poly) (start! Int) (len! Int) (result! lib!pmem.subregion_v.PersistentMemorySubregion.)) (! (= (ens%lib!pmem.subregion_v.impl&%1.new. PMRegion&. PMRegion& pm! start! len! result!) (and (= (lib!pmem.subregion_v.impl&%1.start.? (Poly%lib!pmem.subregion_v.PersistentMemorySubregion. result!)) start!) (= (lib!pmem.subregion_v.impl&%1.len.? (Poly%lib!pmem.subregion_v.PersistentMemorySubregion. result!)) len!) (= (lib!pmem.subregion_v.impl&%1.view.? PMRegion&. PMRegion& (Poly%lib!pmem.subregion_v.PersistentMemorySubregion. result!) pm!) (lib!pmem.subregion_v.get_subregion_view.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm!) (I start!) (I len!))))) :pattern ((ens%lib!pmem.subregion_v.impl&%1.new. PMRegion&. PMRegion& pm! start! len! result!)))))
(declare-fun req%lib!log.start_v.read_log_variables. (Dcr Type Poly Int Bool) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm_region! Poly) (log_id! Int) (cdb! Bool)) (! (= (req%lib!log.start_v.read_log_variables. PMRegion&. PMRegion& pm_region! log_id! cdb!) (and (=> %%global_location_label%%32 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm_region!))) (=> %%global_location_label%%33 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (=> %%global_location_label%%34 (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))))) (=> %%global_location_label%%35 (= cdb! (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!log.layout_v.deserialize_and_check_log_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))))))))))) :pattern ((req%lib!log.start_v.read_log_variables. PMRegion&. PMRegion& pm_region! log_id! cdb!)))))
(declare-fun ens%lib!log.start_v.read_log_variables. (Dcr Type Poly Int Bool core!result.Result.) Bool)
(define-fun is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents) c))
(define-fun is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported) c))
(define-fun is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch) c))
(define-fun is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ ((c lib!log.logimpl_t.LogErr.)) Bool ((_ is lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch) c))
(assert (forall ((PMRegion&. Dcr) (PMRegion& Type) (pm_region! Poly) (log_id! Int) (cdb! Bool) (result! core!result.Result.)) (! (= (ens%lib!log.start_v.read_log_variables. PMRegion&. PMRegion& pm_region! log_id! cdb! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%lib!log.logimpl_v.LogInfo. $ TYPE%lib!log.logimpl_t.LogErr.)) (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))) :pattern ((ens%lib!log.start_v.read_log_variables. PMRegion&. PMRegion& pm_region! log_id! cdb! result!)))))
(declare-const PMRegion&. Dcr)
(declare-const PMRegion& Type)
(declare-const result! core!result.Result.)
(declare-const pm_region! Poly)
(declare-const log_id! Int)
(declare-const cdb! Bool)
(declare-const verus_tmp_mem@ vstd!seq.Seq<u8.>.)
(declare-const verus_tmp_state@ core!option.Option.)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Bool)
(declare-const verus_tmp_true_global_metadata@ lib!log.layout_v.GlobalMetadata.)
(declare-const verus_tmp_true_crc@ Int)
(declare-const tmp%3 Poly)
(declare-const tmp%4 Poly)
(declare-const e@ lib!pmem.pmemspec_t.PmemError.)
(declare-const tmp%%@ core!result.Result.)
(declare-const tmp%5 Poly)
(declare-const tmp%6 Poly)
(declare-const e$1@ lib!pmem.pmemspec_t.PmemError.)
(declare-const tmp%%$1@ core!result.Result.)
(declare-const verus_tmp_global_metadata_addrs@ vstd!seq.Seq<int.>.)
(declare-const verus_tmp_crc_addrs@ vstd!seq.Seq<int.>.)
(declare-const verus_tmp_true_bytes@ vstd!seq.Seq<u8.>.)
(declare-const verus_tmp_true_crc_bytes@ vstd!seq.Seq<u8.>.)
(declare-const tmp%7 Bool)
(declare-const tmp%8 slice%<u8.>.)
(declare-const tmp%9 slice%<u8.>.)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Poly)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Int)
(declare-const tmp%17 Bool)
(declare-const verus_tmp_metadata_addrs@ vstd!seq.Seq<int.>.)
(declare-const verus_tmp_crc_addrs$1@ vstd!seq.Seq<int.>.)
(declare-const verus_tmp_true_region_metadata@ lib!log.layout_v.RegionMetadata.)
(declare-const verus_tmp_true_crc$1@ Int)
(declare-const tmp%18 Poly)
(declare-const tmp%19 Poly)
(declare-const e$2@ lib!pmem.pmemspec_t.PmemError.)
(declare-const tmp%%$2@ core!result.Result.)
(declare-const tmp%20 Poly)
(declare-const tmp%21 Poly)
(declare-const e$3@ lib!pmem.pmemspec_t.PmemError.)
(declare-const tmp%%$3@ core!result.Result.)
(declare-const verus_tmp_true_bytes$1@ vstd!seq.Seq<u8.>.)
(declare-const verus_tmp_true_crc_bytes$1@ vstd!seq.Seq<u8.>.)
(declare-const tmp%22 Bool)
(declare-const tmp%23 slice%<u8.>.)
(declare-const tmp%24 slice%<u8.>.)
(declare-const tmp%25 Bool)
(declare-const tmp%26 Bool)
(declare-const tmp%27 Bool)
(declare-const tmp%28 Poly)
(declare-const tmp%29 Bool)
(declare-const tmp%30 Bool)
(declare-const tmp%31 Bool)
(declare-const tmp%32 Bool)
(declare-const tmp%33 Bool)
(declare-const tmp%34 Bool)
(declare-const tmp%35 Bool)
(declare-const tmp%36 Int)
(declare-const verus_tmp_true_log_metadata@ lib!log.layout_v.LogMetadata.)
(declare-const verus_tmp_true_crc$2@ Int)
(declare-const verus_tmp_log_metadata_addrs@ vstd!seq.Seq<int.>.)
(declare-const verus_tmp_crc_addrs$2@ vstd!seq.Seq<int.>.)
(declare-const verus_tmp_true_bytes$2@ vstd!seq.Seq<u8.>.)
(declare-const verus_tmp_true_crc_bytes$2@ vstd!seq.Seq<u8.>.)
(declare-const tmp%37 Bool)
(declare-const tmp%38 Poly)
(declare-const e$4@ lib!pmem.pmemspec_t.PmemError.)
(declare-const tmp%%$4@ core!result.Result.)
(declare-const tmp%39 Poly)
(declare-const e$5@ lib!pmem.pmemspec_t.PmemError.)
(declare-const tmp%%$5@ core!result.Result.)
(declare-const tmp%40 Bool)
(declare-const tmp%41 slice%<u8.>.)
(declare-const tmp%42 slice%<u8.>.)
(declare-const tmp%43 Bool)
(declare-const tmp%44 Bool)
(declare-const tmp%45 Poly)
(declare-const tmp%46 Bool)
(declare-const tmp%47 Bool)
(declare-const tmp%48 Bool)
(declare-const tmp%49 Int)
(declare-const verus_tmp@0 vstd!seq.Seq<u8.>.)
(declare-const mem@0 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$1@0 core!option.Option.)
(declare-const state@0 core!option.Option.)
(declare-const region_size@ Int)
(declare-const verus_tmp$2@0 lib!log.layout_v.GlobalMetadata.)
(declare-const true_global_metadata@0 lib!log.layout_v.GlobalMetadata.)
(declare-const verus_tmp$3@0 Int)
(declare-const true_crc@0 Int)
(declare-const global_metadata@ lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>.)
(declare-const global_crc@ lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.)
(declare-const verus_tmp$4@0 vstd!seq.Seq<int.>.)
(declare-const global_metadata_addrs@0 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$5@0 vstd!seq.Seq<int.>.)
(declare-const crc_addrs@0 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$6@0 vstd!seq.Seq<u8.>.)
(declare-const true_bytes@0 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$7@0 vstd!seq.Seq<u8.>.)
(declare-const true_crc_bytes@0 vstd!seq.Seq<u8.>.)
(declare-const global_metadata$2@ lib!log.layout_v.GlobalMetadata.)
(declare-const verus_tmp$8@0 vstd!seq.Seq<int.>.)
(declare-const metadata_addrs@0 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$9@0 vstd!seq.Seq<int.>.)
(declare-const crc_addrs$1@0 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$10@0 lib!log.layout_v.RegionMetadata.)
(declare-const true_region_metadata@0 lib!log.layout_v.RegionMetadata.)
(declare-const verus_tmp$11@0 Int)
(declare-const true_crc$1@0 Int)
(declare-const region_metadata@ lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>.)
(declare-const region_crc@ lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.)
(declare-const verus_tmp$12@0 vstd!seq.Seq<u8.>.)
(declare-const true_bytes$1@0 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$13@0 vstd!seq.Seq<u8.>.)
(declare-const true_crc_bytes$1@0 vstd!seq.Seq<u8.>.)
(declare-const region_metadata$2@ lib!log.layout_v.RegionMetadata.)
(declare-const log_metadata_pos@ Int)
(declare-const log_crc_pos@ Int)
(declare-const subregion@ lib!pmem.subregion_v.PersistentMemorySubregion.)
(declare-const verus_tmp$14@0 lib!log.layout_v.LogMetadata.)
(declare-const true_log_metadata@0 lib!log.layout_v.LogMetadata.)
(declare-const verus_tmp$15@0 Int)
(declare-const true_crc$2@0 Int)
(declare-const verus_tmp$16@0 vstd!seq.Seq<int.>.)
(declare-const log_metadata_addrs@0 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$17@0 vstd!seq.Seq<int.>.)
(declare-const crc_addrs$2@0 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$18@0 vstd!seq.Seq<u8.>.)
(declare-const true_bytes$2@0 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$19@0 vstd!seq.Seq<u8.>.)
(declare-const true_crc_bytes$2@0 vstd!seq.Seq<u8.>.)
(declare-const log_metadata@ lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>.)
(declare-const log_crc@ lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>.)
(declare-const log_metadata$2@ lib!log.layout_v.LogMetadata.)
(declare-const head@ Int)
(declare-const log_length@ Int)
(declare-const head_log_area_offset@ Int)
(assert fuel_defaults)
(assert (has_type pm_region! PMRegion&))
(assert (uInv 128 log_id!))
(assert (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. PMRegion&. PMRegion&))
(assert (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? PMRegion&. PMRegion& pm_region!)))
(assert (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))
(assert (lib!log.inv_v.metadata_types_set.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)))))
(assert (= cdb! (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!log.layout_v.deserialize_and_check_log_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))))))))))
(declare-fun %%lambda%%7 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0) i$) (I (Add %%hole%%0 (%I i$)))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0) i$)))))
(declare-const verus_tmp@1 vstd!seq.Seq<u8.>.)
(declare-const mem@1 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$1@1 core!option.Option.)
(declare-const state@1 core!option.Option.)
(declare-const verus_tmp$2@1 lib!log.layout_v.GlobalMetadata.)
(declare-const true_global_metadata@1 lib!log.layout_v.GlobalMetadata.)
(declare-const verus_tmp$3@1 Int)
(declare-const true_crc@1 Int)
(declare-const verus_tmp$4@1 vstd!seq.Seq<int.>.)
(declare-const global_metadata_addrs@1 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$5@1 vstd!seq.Seq<int.>.)
(declare-const crc_addrs@1 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$6@1 vstd!seq.Seq<u8.>.)
(declare-const true_bytes@1 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$7@1 vstd!seq.Seq<u8.>.)
(declare-const true_crc_bytes@1 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$8@1 vstd!seq.Seq<int.>.)
(declare-const metadata_addrs@1 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$9@1 vstd!seq.Seq<int.>.)
(declare-const crc_addrs$1@1 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$10@1 lib!log.layout_v.RegionMetadata.)
(declare-const true_region_metadata@1 lib!log.layout_v.RegionMetadata.)
(declare-const verus_tmp$11@1 Int)
(declare-const true_crc$1@1 Int)
(declare-const verus_tmp$12@1 vstd!seq.Seq<u8.>.)
(declare-const true_bytes$1@1 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$13@1 vstd!seq.Seq<u8.>.)
(declare-const true_crc_bytes$1@1 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$14@1 lib!log.layout_v.LogMetadata.)
(declare-const true_log_metadata@1 lib!log.layout_v.LogMetadata.)
(declare-const verus_tmp$15@1 Int)
(declare-const true_crc$2@1 Int)
(declare-const verus_tmp$16@1 vstd!seq.Seq<int.>.)
(declare-const log_metadata_addrs@1 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$17@1 vstd!seq.Seq<int.>.)
(declare-const crc_addrs$2@1 vstd!seq.Seq<int.>.)
(declare-const verus_tmp$18@1 vstd!seq.Seq<u8.>.)
(declare-const true_bytes$2@1 vstd!seq.Seq<u8.>.)
(declare-const verus_tmp$19@1 vstd!seq.Seq<u8.>.)
(declare-const true_crc_bytes$2@1 vstd!seq.Seq<u8.>.)
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(declare-const %%switch_label%%5 Bool)
(declare-const %%switch_label%%6 Bool)
(declare-const %%switch_label%%7 Bool)
(declare-const %%switch_label%%8 Bool)
(declare-const %%switch_label%%9 Bool)
(declare-const %%switch_label%%10 Bool)
(declare-const %%switch_label%%11 Bool)
(declare-const %%switch_label%%12 Bool)
(declare-const %%switch_label%%13 Bool)
(declare-const %%switch_label%%14 Bool)
(declare-const %%switch_label%%15 Bool)
(declare-const %%switch_label%%16 Bool)
(declare-const %%switch_label%%17 Bool)
(declare-const %%switch_label%%18 Bool)
(declare-const %%switch_label%%19 Bool)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(declare-const %%location_label%%6 Bool)
(declare-const %%location_label%%7 Bool)
(declare-const %%location_label%%8 Bool)
(declare-const %%location_label%%9 Bool)
(declare-const %%location_label%%10 Bool)
(declare-const %%location_label%%11 Bool)
(declare-const %%location_label%%12 Bool)
(declare-const %%location_label%%13 Bool)
(declare-const %%location_label%%14 Bool)
(declare-const %%location_label%%15 Bool)
(declare-const %%location_label%%16 Bool)
(declare-const %%location_label%%17 Bool)
(declare-const %%location_label%%18 Bool)
(declare-const %%location_label%%19 Bool)
(declare-const %%location_label%%20 Bool)
(declare-const %%location_label%%21 Bool)
(declare-const %%location_label%%22 Bool)
(declare-const %%location_label%%23 Bool)
(declare-const %%location_label%%24 Bool)
(declare-const %%location_label%%25 Bool)
(declare-const %%location_label%%26 Bool)
(declare-const %%location_label%%27 Bool)
(declare-const %%location_label%%28 Bool)
(declare-const %%location_label%%29 Bool)
(declare-const %%location_label%%30 Bool)
(declare-const %%location_label%%31 Bool)
(declare-const %%location_label%%32 Bool)
(declare-const %%location_label%%33 Bool)
(declare-const %%location_label%%34 Bool)
(declare-const %%location_label%%35 Bool)
(declare-const %%location_label%%36 Bool)
(declare-const %%location_label%%37 Bool)
(declare-const %%location_label%%38 Bool)
(declare-const %%location_label%%39 Bool)
(declare-const %%location_label%%40 Bool)
(declare-const %%location_label%%41 Bool)
(declare-const %%location_label%%42 Bool)
(declare-const %%location_label%%43 Bool)
(declare-const %%location_label%%44 Bool)
(declare-const %%location_label%%45 Bool)
(declare-const %%location_label%%46 Bool)
(declare-const %%location_label%%47 Bool)
(declare-const %%location_label%%48 Bool)
(declare-const %%location_label%%49 Bool)
(declare-const %%location_label%%50 Bool)
(declare-const %%location_label%%51 Bool)
(declare-const %%location_label%%52 Bool)
(declare-const %%location_label%%53 Bool)
(declare-const %%location_label%%54 Bool)
(declare-const %%location_label%%55 Bool)
(declare-const %%location_label%%56 Bool)
(assert (not (=> (= verus_tmp@1 (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (=> (= verus_tmp_mem@ verus_tmp@1) (=> (= mem@1 verus_tmp_mem@) (=> (= verus_tmp$1@1 (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!))) (=> (= verus_tmp_state@ verus_tmp$1@1) (=> (= state@1 verus_tmp_state@) (=> (fuel_bool fuel%lib!pmem.pmcopy_t.spec_padding_needed.) (and (=> %%location_label%%0 (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. PMRegion&. PMRegion& pm_region!)) (=> (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. PMRegion&. PMRegion& pm_region! tmp%1) (=> (= region_size@ (%I tmp%1)) (and (=> %%location_label%%1 (uInv 64 (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?))) (or (and (=> (< region_size@ (uClip 64 (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?))) (=> (= tmp%2 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%2 tmp%2) (=> tmp%2 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents))) (=> %%location_label%%3 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (< region_size@ (uClip 64 (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)))) %%switch_label%%19)) (and (not %%switch_label%%19) (=> (= verus_tmp$2@1 (%Poly%lib!log.layout_v.GlobalMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem@1) (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.)))))) (=> (= verus_tmp_true_global_metadata@ verus_tmp$2@1) (=> (= true_global_metadata@1 verus_tmp_true_global_metadata@) (=> (= verus_tmp$3@1 (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem@1) (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (=> (= verus_tmp_true_crc@ verus_tmp$3@1) (=> (= true_crc@1 verus_tmp_true_crc@) (=> (= tmp%4 (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?)) (and (=> %%location_label%%4 (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ TYPE%lib!log.layout_v.GlobalMetadata. pm_region! tmp%4)) (=> (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ TYPE%lib!log.layout_v.GlobalMetadata. pm_region! tmp%4 tmp%3) (=> (= tmp%%@ (%Poly%core!result.Result. tmp%3)) (or (and (=> (is-core!result.Result./Ok_ tmp%%@) %%switch_label%%18) (=> (not (is-core!result.Result./Ok_ tmp%%@)) (=> (= e@ (%Poly%lib!pmem.pmemspec_t.PmemError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%@))))) (=> %%location_label%%5 false)))) (and (not %%switch_label%%18) (=> (= global_metadata@ (let ((global_metadata$1 (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%@)))))) global_metadata$1)) (=> (= tmp%6 (I lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?)) (and (=> %%location_label%%6 (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ (UINT 64) pm_region! tmp%6)) (=> (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ (UINT 64) pm_region! tmp%6 tmp%5) (=> (= tmp%%$1@ (%Poly%core!result.Result. tmp%5)) (or (and (=> (is-core!result.Result./Ok_ tmp%%$1@) %%switch_label%%17) (=> (not (is-core!result.Result./Ok_ tmp%%$1@)) (=> (= e$1@ (%Poly%lib!pmem.pmemspec_t.PmemError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1@))))) (=> %%location_label%%7 false)))) (and (not %%switch_label%%17) (=> (= global_crc@ (let ((global_crc$1 (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1@)))))) global_crc$1)) (=> (= verus_tmp$4@1 (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.) (Poly%fun%1. (mk_fun (%%lambda%%7 lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?)))))) (=> (= verus_tmp_global_metadata_addrs@ verus_tmp$4@1) (=> (= global_metadata_addrs@1 verus_tmp_global_metadata_addrs@) (=> (= verus_tmp$5@1 (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (Poly%fun%1. (mk_fun (%%lambda%%7 lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?)))))) (=> (= verus_tmp_crc_addrs@ verus_tmp$5@1) (=> (= crc_addrs@1 verus_tmp_crc_addrs@) (=> (= verus_tmp$6@1 (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.GlobalMetadata.) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. global_metadata_addrs@1) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem@1))))))) (=> (= verus_tmp_true_bytes@ verus_tmp$6@1) (=> (= true_bytes@1 verus_tmp_true_bytes@) (=> (= verus_tmp$7@1 (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs@1) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem@1))))))) (=> (= verus_tmp_true_crc_bytes@ verus_tmp$7@1) (=> (= true_crc_bytes@1 verus_tmp_true_crc_bytes@) (=> (= tmp%7 (and (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. true_global_metadata@1)) (Poly%vstd!seq.Seq<u8.>. true_bytes@1)) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I true_crc@1)) (Poly%vstd!seq.Seq<u8.>. true_crc_bytes@1)))) (and (=> %%location_label%%8 tmp%7) (=> tmp%7 (=> (ens%lib!pmem.pmcopy_t.impl&%2.as_slice. $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. global_metadata@) tmp%8) (=> (ens%lib!pmem.pmcopy_t.impl&%2.as_slice. $ (UINT 64) (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. global_crc@) tmp%9) (=> (= tmp%11 (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)))) (and (=> %%location_label%%9 (req%lib!pmem.pmemutil_v.check_crc. tmp%8 tmp%9 mem@1 tmp%11 global_metadata_addrs@1 crc_addrs@1)) (=> (ens%lib!pmem.pmemutil_v.check_crc. tmp%8 tmp%9 mem@1 tmp%11 global_metadata_addrs@1 crc_addrs@1 tmp%10) (or (and (=> (not tmp%10) (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./CRCMismatch))) (=> %%location_label%%10 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$))))))))))))))) (=> (not (not tmp%10)) %%switch_label%%16)) (and (not %%switch_label%%16) (=> (= tmp%13 (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)))) (and (=> %%location_label%%11 (req%lib!pmem.pmcopy_t.impl&%2.extract_init_val. $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. global_metadata@) (Poly%lib!log.layout_v.GlobalMetadata. true_global_metadata@1) true_bytes@1 tmp%13)) (=> (ens%lib!pmem.pmcopy_t.impl&%2.extract_init_val. $ TYPE%lib!log.layout_v.GlobalMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.GlobalMetadata.>. global_metadata@) (Poly%lib!log.layout_v.GlobalMetadata. true_global_metadata@1) true_bytes@1 tmp%13 tmp%12) (=> (= global_metadata$2@ (%Poly%lib!log.layout_v.GlobalMetadata. tmp%12)) (or (and (=> (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$2@))) lib!log.layout_v.LOG_PROGRAM_GUID.?)) (=> (= tmp%14 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%12 tmp%14) (=> tmp%14 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents))) (=> %%location_label%%13 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$2@))) lib!log.layout_v.LOG_PROGRAM_GUID.?))) %%switch_label%%15)) (and (not %%switch_label%%15) (or (and (=> (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$2@))) lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.?)) (=> (= tmp%15 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%14 tmp%15) (=> tmp%15 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported (%I (I (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$2@))))) (%I (I lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.?)))))) (=> %%location_label%%15 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$2@))) lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.?))) %%switch_label%%14)) (and (not %%switch_label%%14) (=> (ens%lib!pmem.traits_t.size_of. $ TYPE%lib!log.layout_v.RegionMetadata. tmp%16) (or (and (=> (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$2@))) (uClip 64 tmp%16))) (=> (= tmp%17 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%16 tmp%17) (=> tmp%17 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents))) (=> %%location_label%%17 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (not (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. global_metadata$2@))) (uClip 64 tmp%16)))) %%switch_label%%13)) (and (not %%switch_label%%13) (=> (= verus_tmp$8@1 (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.) (Poly%fun%1. (mk_fun (%%lambda%%7 lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?)))))) (=> (= verus_tmp_metadata_addrs@ verus_tmp$8@1) (=> (= metadata_addrs@1 verus_tmp_metadata_addrs@) (=> (= verus_tmp$9@1 (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (Poly%fun%1. (mk_fun (%%lambda%%7 lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?)))))) (=> (= verus_tmp_crc_addrs$1@ verus_tmp$9@1) (=> (= crc_addrs$1@1 verus_tmp_crc_addrs$1@) (=> (= verus_tmp$10@1 (%Poly%lib!log.layout_v.RegionMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem@1) (I lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.RegionMetadata.)))))) (=> (= verus_tmp_true_region_metadata@ verus_tmp$10@1) (=> (= true_region_metadata@1 verus_tmp_true_region_metadata@) (=> (= verus_tmp$11@1 (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem@1) (I lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (=> (= verus_tmp_true_crc$1@ verus_tmp$11@1) (=> (= true_crc$1@1 verus_tmp_true_crc$1@) (=> (= tmp%19 (I lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?)) (and (=> %%location_label%%18 (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ TYPE%lib!log.layout_v.RegionMetadata. pm_region! tmp%19)) (=> (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ TYPE%lib!log.layout_v.RegionMetadata. pm_region! tmp%19 tmp%18) (=> (= tmp%%$2@ (%Poly%core!result.Result. tmp%18)) (or (and (=> (is-core!result.Result./Ok_ tmp%%$2@) %%switch_label%%12) (=> (not (is-core!result.Result./Ok_ tmp%%$2@)) (=> (= e$2@ (%Poly%lib!pmem.pmemspec_t.PmemError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$2@))))) (=> %%location_label%%19 false)))) (and (not %%switch_label%%12) (=> (= region_metadata@ (let ((region_metadata$1 (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$2@)))))) region_metadata$1)) (=> (= tmp%21 (I lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?)) (and (=> %%location_label%%20 (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ (UINT 64) pm_region! tmp%21)) (=> (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ (UINT 64) pm_region! tmp%21 tmp%20) (=> (= tmp%%$3@ (%Poly%core!result.Result. tmp%20)) (or (and (=> (is-core!result.Result./Ok_ tmp%%$3@) %%switch_label%%11) (=> (not (is-core!result.Result./Ok_ tmp%%$3@)) (=> (= e$3@ (%Poly%lib!pmem.pmemspec_t.PmemError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$3@))))) (=> %%location_label%%21 false)))) (and (not %%switch_label%%11) (=> (= region_crc@ (let ((region_crc$1 (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$3@)))))) region_crc$1)) (=> (= verus_tmp$12@1 (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. metadata_addrs@1))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. metadata_addrs@1) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem@1))))))) (=> (= verus_tmp_true_bytes$1@ verus_tmp$12@1) (=> (= true_bytes$1@1 verus_tmp_true_bytes$1@) (=> (= verus_tmp$13@1 (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs$1@1))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs$1@1) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem@1))))))) (=> (= verus_tmp_true_crc_bytes$1@ verus_tmp$13@1) (=> (= true_crc_bytes$1@1 verus_tmp_true_crc_bytes$1@) (=> (= tmp%22 (and (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. true_region_metadata@1)) (Poly%vstd!seq.Seq<u8.>. true_bytes$1@1)) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I true_crc$1@1)) (Poly%vstd!seq.Seq<u8.>. true_crc_bytes$1@1)))) (and (=> %%location_label%%22 tmp%22) (=> tmp%22 (=> (ens%lib!pmem.pmcopy_t.impl&%2.as_slice. $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. region_metadata@) tmp%23) (=> (ens%lib!pmem.pmcopy_t.impl&%2.as_slice. $ (UINT 64) (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. region_crc@) tmp%24) (=> (= tmp%26 (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)))) (and (=> %%location_label%%23 (req%lib!pmem.pmemutil_v.check_crc. tmp%23 tmp%24 mem@1 tmp%26 metadata_addrs@1 crc_addrs$1@1)) (=> (ens%lib!pmem.pmemutil_v.check_crc. tmp%23 tmp%24 mem@1 tmp%26 metadata_addrs@1 crc_addrs$1@1 tmp%25) (or (and (=> (not tmp%25) (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./CRCMismatch))) (=> %%location_label%%24 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$))))))))))))))) (=> (not (not tmp%25)) %%switch_label%%10)) (and (not %%switch_label%%10) (=> (= tmp%27 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. true_region_metadata@1)) (Poly%vstd!seq.Seq<u8.>. true_bytes$1@1))) (and (=> %%location_label%%25 tmp%27) (=> tmp%27 (=> (= tmp%29 (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)))) (and (=> %%location_label%%26 (req%lib!pmem.pmcopy_t.impl&%2.extract_init_val. $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. region_metadata@) (Poly%lib!log.layout_v.RegionMetadata. true_region_metadata@1) true_bytes$1@1 tmp%29)) (=> (ens%lib!pmem.pmcopy_t.impl&%2.extract_init_val. $ TYPE%lib!log.layout_v.RegionMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.RegionMetadata.>. region_metadata@) (Poly%lib!log.layout_v.RegionMetadata. true_region_metadata@1) true_bytes$1@1 tmp%29 tmp%28) (=> (= region_metadata$2@ (%Poly%lib!log.layout_v.RegionMetadata. tmp%28)) (or (and (=> (not (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))) region_size@)) (=> (= tmp%30 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%27 tmp%30) (=> tmp%30 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch (%I (I region_size@)) (%I (I (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))))))))) (=> %%location_label%%28 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (not (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))) region_size@))) %%switch_label%%9)) (and (not %%switch_label%%9) (or (and (=> (not (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))) log_id!)) (=> (= tmp%31 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%29 tmp%31) (=> tmp%31 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch (%I (I log_id!)) (%I (I (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))))))))) (=> %%location_label%%30 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (not (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))) log_id!))) %%switch_label%%8)) (and (not %%switch_label%%8) (or (and (=> (> (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))) region_size@) (=> (= tmp%32 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%31 tmp%32) (=> tmp%32 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents))) (=> %%location_label%%32 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (> (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))) region_size@)) %%switch_label%%7)) (and (not %%switch_label%%7) (and (=> %%location_label%%33 (uInv 64 (Sub region_size@ (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@)))))) (or (and (=> (< (uClip 64 (Sub region_size@ (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))))) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (=> (= tmp%33 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%34 tmp%33) (=> tmp%33 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents))) (=> %%location_label%%35 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (< (uClip 64 (Sub region_size@ (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))))) lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?)) %%switch_label%%6)) (and (not %%switch_label%%6) (or (and (=> (< (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))) lib!log.layout_v.MIN_LOG_AREA_SIZE.?) (=> (= tmp%34 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%36 tmp%34) (=> tmp%34 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents))) (=> %%location_label%%37 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (< (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))) lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) %%switch_label%%5)) (and (not %%switch_label%%5) (=> (= log_metadata_pos@ (ite cdb! lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?)) (=> (= log_crc_pos@ (ite cdb! lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?)) (=> (= tmp%35 (= log_metadata_pos@ (lib!log.layout_v.get_log_metadata_pos.? (B cdb!)))) (and (=> %%location_label%%38 tmp%35) (=> tmp%35 (=> (= tmp%36 (nClip (Add (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (and (=> %%location_label%%39 (req%lib!pmem.subregion_v.impl&%1.new. PMRegion&. PMRegion& pm_region! log_metadata_pos@ tmp%36)) (=> (ens%lib!pmem.subregion_v.impl&%1.new. PMRegion&. PMRegion& pm_region! log_metadata_pos@ tmp%36 subregion@) (=> (= verus_tmp$14@1 (%Poly%lib!log.layout_v.LogMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem@1) (I log_metadata_pos@) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.)))))) (=> (= verus_tmp_true_log_metadata@ verus_tmp$14@1) (=> (= true_log_metadata@1 verus_tmp_true_log_metadata@) (=> (= verus_tmp$15@1 (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? (Poly%vstd!seq.Seq<u8.>. mem@1) (I log_crc_pos@) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (=> (= verus_tmp_true_crc$2@ verus_tmp$15@1) (=> (= true_crc$2@1 verus_tmp_true_crc$2@) (=> (= verus_tmp$16@1 (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.) (Poly%fun%1. (mk_fun (%%lambda%%7 log_metadata_pos@)))))) (=> (= verus_tmp_log_metadata_addrs@ verus_tmp$16@1) (=> (= log_metadata_addrs@1 verus_tmp_log_metadata_addrs@) (=> (= verus_tmp$17@1 (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (Poly%fun%1. (mk_fun (%%lambda%%7 log_crc_pos@)))))) (=> (= verus_tmp_crc_addrs$2@ verus_tmp$17@1) (=> (= crc_addrs$2@1 verus_tmp_crc_addrs$2@) (=> (= verus_tmp$18@1 (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. log_metadata_addrs@1))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. log_metadata_addrs@1) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem@1))))))) (=> (= verus_tmp_true_bytes$2@ verus_tmp$18@1) (=> (= true_bytes$2@1 verus_tmp_true_bytes$2@) (=> (= verus_tmp$19@1 (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (vstd!seq.Seq.len.? $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs$2@1))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ INT (Poly%vstd!seq.Seq<int.>. crc_addrs$2@1) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. mem@1))))))) (=> (= verus_tmp_true_crc_bytes$2@ verus_tmp$19@1) (=> (= true_crc_bytes$2@1 verus_tmp_true_crc_bytes$2@) (=> (= tmp%37 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_metadata_pos@) (I (Add log_metadata_pos@ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!log.layout_v.LogMetadata.))))) (Poly%vstd!seq.Seq<u8.>. true_bytes$2@1))) (and (=> %%location_label%%40 tmp%37) (=> tmp%37 (and (=> %%location_label%%41 (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ TYPE%lib!log.layout_v.LogMetadata. pm_region! (I log_metadata_pos@))) (=> (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ TYPE%lib!log.layout_v.LogMetadata. pm_region! (I log_metadata_pos@) tmp%38) (=> (= tmp%%$4@ (%Poly%core!result.Result. tmp%38)) (or (and (=> (is-core!result.Result./Ok_ tmp%%$4@) %%switch_label%%4) (=> (not (is-core!result.Result./Ok_ tmp%%$4@)) (=> (= e$4@ (%Poly%lib!pmem.pmemspec_t.PmemError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$4@))))) (=> %%location_label%%42 false)))) (and (not %%switch_label%%4) (=> (= log_metadata@ (let ((log_metadata$1 (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$4@)))))) log_metadata$1)) (and (=> %%location_label%%43 (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ (UINT 64) pm_region! (I log_crc_pos@))) (=> (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. PMRegion&. PMRegion& $ (UINT 64) pm_region! (I log_crc_pos@) tmp%39) (=> (= tmp%%$5@ (%Poly%core!result.Result. tmp%39)) (or (and (=> (is-core!result.Result./Ok_ tmp%%$5@) %%switch_label%%3) (=> (not (is-core!result.Result./Ok_ tmp%%$5@)) (=> (= e$5@ (%Poly%lib!pmem.pmemspec_t.PmemError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$5@))))) (=> %%location_label%%44 false)))) (and (not %%switch_label%%3) (=> (= log_crc@ (let ((log_crc$1 (%Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$5@)))))) log_crc$1)) (=> (= tmp%40 (and (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. true_log_metadata@1)) (Poly%vstd!seq.Seq<u8.>. true_bytes$2@1)) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ (UINT 64) (I true_crc$2@1)) (Poly%vstd!seq.Seq<u8.>. true_crc_bytes$2@1)))) (and (=> %%location_label%%45 tmp%40) (=> tmp%40 (=> (ens%lib!pmem.pmcopy_t.impl&%2.as_slice. $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. log_metadata@) tmp%41) (=> (ens%lib!pmem.pmcopy_t.impl&%2.as_slice. $ (UINT 64) (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<u64.>. log_crc@) tmp%42) (=> (= tmp%44 (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)))) (and (=> %%location_label%%46 (req%lib!pmem.pmemutil_v.check_crc. tmp%41 tmp%42 mem@1 tmp%44 log_metadata_addrs@1 crc_addrs$2@1)) (=> (ens%lib!pmem.pmemutil_v.check_crc. tmp%41 tmp%42 mem@1 tmp%44 log_metadata_addrs@1 crc_addrs$2@1 tmp%43) (or (and (=> (not tmp%43) (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./CRCMismatch))) (=> %%location_label%%47 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$))))))))))))))) (=> (not (not tmp%43)) %%switch_label%%2)) (and (not %%switch_label%%2) (=> (= tmp%46 (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!)))) (and (=> %%location_label%%48 (req%lib!pmem.pmcopy_t.impl&%2.extract_init_val. $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. log_metadata@) (Poly%lib!log.layout_v.LogMetadata. true_log_metadata@1) true_bytes$2@1 tmp%46)) (=> (ens%lib!pmem.pmcopy_t.impl&%2.extract_init_val. $ TYPE%lib!log.layout_v.LogMetadata. (Poly%lib!pmem.pmcopy_t.MaybeCorruptedBytes<lib!log.layout_v.LogMetadata.>. log_metadata@) (Poly%lib!log.layout_v.LogMetadata. true_log_metadata@1) true_bytes$2@1 tmp%46 tmp%45) (=> (= log_metadata$2@ (%Poly%lib!log.layout_v.LogMetadata. tmp%45)) (=> (= head@ (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$2@)))) (=> (= log_length@ (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. log_metadata$2@)))) (or (and (=> (> log_length@ (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@)))) (=> (= tmp%47 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%49 tmp%47) (=> tmp%47 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents))) (=> %%location_label%%50 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (> log_length@ (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))))) %%switch_label%%1)) (and (not %%switch_label%%1) (and (=> %%location_label%%51 (uInv 128 (Sub 340282366920938463463374607431768211455 head@))) (or (and (=> (> (uClip 128 log_length@) (uClip 128 (Sub 340282366920938463463374607431768211455 head@))) (=> (= tmp%48 (is-core!option.Option./None_ state@1)) (and (=> %%location_label%%52 tmp%48) (=> tmp%48 (=> (= result! (core!result.Result./Err (Poly%lib!log.logimpl_t.LogErr. lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents))) (=> %%location_label%%53 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))) (=> (not (> (uClip 128 log_length@) (uClip 128 (Sub 340282366920938463463374607431768211455 head@)))) %%switch_label%%0)) (and (not %%switch_label%%0) (=> (= tmp%49 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@)))) (and (=> %%location_label%%54 (req%vstd!arithmetic.div_mod.lemma_mod_bound. head@ tmp%49)) (=> (ens%vstd!arithmetic.div_mod.lemma_mod_bound. head@ tmp%49) (and (=> %%location_label%%55 (not (= (uClip 128 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@)))) 0))) (=> (= head_log_area_offset@ (uClip 64 (uClip 128 (EucMod head@ (uClip 128 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@)))))))) (=> (= result! (core!result.Result./Ok (Poly%lib!log.logimpl_v.LogInfo. (lib!log.logimpl_v.LogInfo./LogInfo (%I (I (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. region_metadata$2@))))) (%I (I head@)) (%I (I head_log_area_offset@)) (%I (I log_length@)) (%I (I log_length@)))))) (=> %%location_label%%56 (let ((state$ (lib!log.layout_v.recover_given_cdb.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!))) (I log_id!) (B cdb!)))) (ite (is-core!result.Result./Ok_ result!) (let ((info$ (%Poly%lib!log.logimpl_v.LogInfo. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (and (lib!log.inv_v.metadata_consistent_with_info.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (I log_id!) (B cdb!) (Poly%lib!log.logimpl_v.LogInfo. info$)) (lib!log.inv_v.info_consistent_with_log_area_in_region.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!) (Poly%lib!log.logimpl_v.LogInfo. info$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. state$))))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./CRCMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (=> (is-core!option.Option./Some_ state$) (not (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? PMRegion&. PMRegion& pm_region!))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToInvalidMemoryContents_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (or (< (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? PMRegion&. PMRegion& pm_region!)) (Add lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!log.layout_v.MIN_LOG_AREA_SIZE.?)) (is-core!option.Option./None_ state$)) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((version_number$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((max_supported$ (lib!log.logimpl_t.LogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= version_number$ max_supported$))))) (ite (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((log_id_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((log_id_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToLogIDMismatch/log_id_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= log_id_expected$ log_id_read$))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch_ (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((region_size_expected$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((region_size_read$ (lib!log.logimpl_t.LogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!log.logimpl_t.LogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (is-core!option.Option./None_ state$) (not (= region_size_expected$ region_size_read$)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
