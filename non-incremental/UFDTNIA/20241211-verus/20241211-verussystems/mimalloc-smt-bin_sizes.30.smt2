(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.bits.u64_leading_zeros. FuelId)
(declare-const fuel%vstd!std_specs.bits.axiom_u64_leading_zeros. FuelId)
(declare-const fuel%lib!config.INTPTR_SHIFT. FuelId)
(declare-const fuel%lib!config.INTPTR_SIZE. FuelId)
(declare-const fuel%lib!config.SLICE_SHIFT. FuelId)
(declare-const fuel%lib!config.SLICE_SIZE. FuelId)
(declare-const fuel%lib!config.SEGMENT_SHIFT. FuelId)
(declare-const fuel%lib!config.SEGMENT_SIZE. FuelId)
(declare-const fuel%lib!config.SLICES_PER_SEGMENT. FuelId)
(declare-const fuel%lib!config.BIN_HUGE. FuelId)
(declare-const fuel%lib!config.MAX_ALLOC_SIZE. FuelId)
(declare-const fuel%lib!config.SMALL_WSIZE_MAX. FuelId)
(declare-const fuel%lib!config.PAGES_DIRECT. FuelId)
(declare-const fuel%lib!config.SMALL_SIZE_MAX. FuelId)
(declare-const fuel%lib!config.SEGMENT_BIN_MAX. FuelId)
(declare-const fuel%lib!bin_sizes.valid_bin_idx. FuelId)
(declare-const fuel%lib!bin_sizes.size_of_bin. FuelId)
(declare-const fuel%lib!bin_sizes.smallest_bin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.pfd_lower. FuelId)
(declare-const fuel%lib!bin_sizes.pfd_upper. FuelId)
(declare-const fuel%lib!bin_sizes.property_idx_out_of_range_has_different_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.check_idx_out_of_range_has_different_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.property_idx_in_range_has_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.check_idx_in_range_has_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.check2_idx_in_range_has_bin_size. FuelId)
(declare-const fuel%lib!bin_sizes.pow2. FuelId)
(declare-const fuel%lib!bin_sizes.property_bounds_for_smallest_bitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.check_bounds_for_smallest_bitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin. FuelId)
(declare-const fuel%lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin. FuelId)
(declare-const fuel%lib!bin_sizes.property_bin. FuelId)
(declare-const fuel%lib!bin_sizes.check_bin. FuelId)
(declare-const fuel%lib!bin_sizes.id. FuelId)
(declare-const fuel%lib!bin_sizes.valid_sbin_idx. FuelId)
(declare-const fuel%lib!bin_sizes.size_of_sbin. FuelId)
(declare-const fuel%lib!bin_sizes.smallest_sbin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.property_sbin_bounds. FuelId)
(declare-const fuel%lib!bin_sizes.check_sbin_bounds. FuelId)
(declare-const fuel%lib!bin_sizes.property_sbin. FuelId)
(declare-const fuel%lib!bin_sizes.check_sbin. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.bits.u64_leading_zeros. fuel%vstd!std_specs.bits.axiom_u64_leading_zeros. fuel%lib!config.INTPTR_SHIFT. fuel%lib!config.INTPTR_SIZE. fuel%lib!config.SLICE_SHIFT. fuel%lib!config.SLICE_SIZE. fuel%lib!config.SEGMENT_SHIFT. fuel%lib!config.SEGMENT_SIZE. fuel%lib!config.SLICES_PER_SEGMENT. fuel%lib!config.BIN_HUGE. fuel%lib!config.MAX_ALLOC_SIZE. fuel%lib!config.SMALL_WSIZE_MAX. fuel%lib!config.PAGES_DIRECT. fuel%lib!config.SMALL_SIZE_MAX. fuel%lib!config.SEGMENT_BIN_MAX. fuel%lib!bin_sizes.valid_bin_idx. fuel%lib!bin_sizes.size_of_bin. fuel%lib!bin_sizes.smallest_bin_fitting_size. fuel%lib!bin_sizes.pfd_lower. fuel%lib!bin_sizes.pfd_upper. fuel%lib!bin_sizes.property_idx_out_of_range_has_different_bin_size. fuel%lib!bin_sizes.check_idx_out_of_range_has_different_bin_size. fuel%lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size. fuel%lib!bin_sizes.property_idx_in_range_has_bin_size. fuel%lib!bin_sizes.check_idx_in_range_has_bin_size. fuel%lib!bin_sizes.check2_idx_in_range_has_bin_size. fuel%lib!bin_sizes.pow2. fuel%lib!bin_sizes.property_bounds_for_smallest_bitting_size. fuel%lib!bin_sizes.check_bounds_for_smallest_bitting_size. fuel%lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin. fuel%lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin. fuel%lib!bin_sizes.property_bin. fuel%lib!bin_sizes.check_bin. fuel%lib!bin_sizes.id. fuel%lib!bin_sizes.valid_sbin_idx. fuel%lib!bin_sizes.size_of_sbin. fuel%lib!bin_sizes.smallest_sbin_fitting_size. fuel%lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size. fuel%lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size. fuel%lib!bin_sizes.property_sbin_bounds. fuel%lib!bin_sizes.check_sbin_bounds. fuel%lib!bin_sizes.property_sbin. fuel%lib!bin_sizes.check_sbin. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.axiom_u64_leading_zeros.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(declare-fun vstd!std_specs.bits.u64_leading_zeros.? (Poly) Int)
(declare-fun vstd!std_specs.bits.rec%u64_leading_zeros.? (Poly Fuel) Int)
(declare-fun lib!config.INTPTR_SHIFT.? () Int)
(declare-fun lib!config.SLICE_SHIFT.? () Int)
(declare-fun lib!config.SEGMENT_SHIFT.? () Int)
(declare-fun lib!config.SEGMENT_SIZE.? () Int)
(declare-fun lib!config.SLICE_SIZE.? () Int)
(declare-fun lib!config.SLICES_PER_SEGMENT.? () Int)
(declare-fun lib!config.INTPTR_SIZE.? () Int)
(declare-fun lib!config.SEGMENT_BIN_MAX.? () Int)
(declare-fun lib!bin_sizes.smallest_sbin_fitting_size.? (Poly) Int)
(declare-fun lib!bin_sizes.valid_sbin_idx.? (Poly) Bool)
(declare-fun lib!config.BIN_HUGE.? () Int)
(declare-fun lib!bin_sizes.valid_bin_idx.? (Poly) Bool)
(declare-fun lib!bin_sizes.pow2.? (Poly) Int)
(declare-fun lib!bin_sizes.rec%pow2.? (Poly Fuel) Int)
(declare-fun lib!bin_sizes.size_of_bin.? (Poly) Int)
(declare-fun lib!config.SMALL_WSIZE_MAX.? () Int)
(declare-fun lib!config.PAGES_DIRECT.? () Int)
(declare-fun lib!bin_sizes.smallest_bin_fitting_size.? (Poly) Int)
(declare-fun lib!config.MAX_ALLOC_SIZE.? () Int)
(declare-fun lib!config.SMALL_SIZE_MAX.? () Int)
(declare-fun lib!bin_sizes.pfd_lower.? (Poly) Int)
(declare-fun lib!bin_sizes.pfd_upper.? (Poly) Int)
(declare-fun lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.? (Poly Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? (Poly Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? (Poly Poly Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_idx_in_range_has_bin_size.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.check_idx_in_range_has_bin_size.? (Poly Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? (Poly Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.check2_idx_in_range_has_bin_size.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? (Poly Poly Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_bounds_for_smallest_bitting_size.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_bounds_for_smallest_bitting_size.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_bin.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_bin.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_bin.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.id.? (Poly) Bool)
(declare-fun lib!bin_sizes.size_of_sbin.? (Poly) Int)
(declare-fun lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_sbin_bounds.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_sbin_bounds.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_sbin_bounds.? (Poly Poly Fuel) Bool)
(declare-fun lib!bin_sizes.property_sbin.? (Poly) Bool)
(declare-fun lib!bin_sizes.check_sbin.? (Poly Poly) Bool)
(declare-fun lib!bin_sizes.rec%check_sbin.? (Poly Poly Fuel) Bool)
(declare-const fuel_nat%vstd!std_specs.bits.u64_leading_zeros. Fuel)
(assert (forall ((i! Poly) (fuel% Fuel)) (! (= (vstd!std_specs.bits.rec%u64_leading_zeros.? i! fuel%) (vstd!std_specs.bits.rec%u64_leading_zeros.? i! zero)) :pattern ((vstd!std_specs.bits.rec%u64_leading_zeros.? i! fuel%)))))
(assert (forall ((i! Poly) (fuel% Fuel)) (! (=> (has_type i! (UINT 64)) (= (vstd!std_specs.bits.rec%u64_leading_zeros.? i! (succ fuel%)) (ite (= (%I i!) 0) 64 (Sub (vstd!std_specs.bits.rec%u64_leading_zeros.? (I (uClip 64 (EucDiv (%I i!) 2))) fuel%) 1)))) :pattern ((vstd!std_specs.bits.rec%u64_leading_zeros.? i! (succ fuel%))))))
(assert (=> (fuel_bool fuel%vstd!std_specs.bits.u64_leading_zeros.) (forall ((i! Poly)) (! (=> (has_type i! (UINT 64)) (= (vstd!std_specs.bits.u64_leading_zeros.? i!) (vstd!std_specs.bits.rec%u64_leading_zeros.? i! (succ fuel_nat%vstd!std_specs.bits.u64_leading_zeros.)))) :pattern ((vstd!std_specs.bits.u64_leading_zeros.? i!))))))
(declare-fun ens%core!num.impl&%9.leading_zeros. (Int Int) Bool)
(assert (forall ((i! Int) (r! Int)) (! (= (ens%core!num.impl&%9.leading_zeros. i! r!) (and (uInv 32 r!) (= r! (vstd!std_specs.bits.u64_leading_zeros.? (I i!))))) :pattern ((ens%core!num.impl&%9.leading_zeros. i! r!)))))
(assert (=> (fuel_bool fuel%vstd!std_specs.bits.axiom_u64_leading_zeros.) (forall ((i! Poly)) (! (=> (has_type i! (UINT 64)) (and (and (and (and (let ((tmp%%$ (vstd!std_specs.bits.u64_leading_zeros.? i!))) (and (<= 0 tmp%%$) (<= tmp%%$ 64))) (= (= (%I i!) 0) (= (vstd!std_specs.bits.u64_leading_zeros.? i!) 64))) (=> (let ((tmp%%$ (vstd!std_specs.bits.u64_leading_zeros.? i!))) (and (<= 0 tmp%%$) (< tmp%%$ 64))) (not (= (uClip 64 (bitand (I (uClip 64 (bitshr (I (%I i!)) (I (uClip 64 (Sub 63 (uClip 64 (vstd!std_specs.bits.u64_leading_zeros.? i!)))))))) (I 1))) 0)))) (= (uClip 64 (bitshr (I (%I i!)) (I (uClip 64 (Sub 64 (uClip 64 (vstd!std_specs.bits.u64_leading_zeros.? i!))))))) 0)) (forall ((j$ Poly)) (! (=> (has_type j$ (UINT 64)) (=> (and (<= (Sub 64 (vstd!std_specs.bits.u64_leading_zeros.? i!)) (%I j$)) (< (%I j$) 64)) (= (uClip 64 (bitand (I (uClip 64 (bitshr (I (%I i!)) (I (%I j$))))) (I 1))) 0))) :pattern ((uClip 64 (bitshr (I (%I i!)) (I (%I j$))))))))) :pattern ((vstd!std_specs.bits.u64_leading_zeros.? i!))))))
(assert (fuel_bool_default fuel%lib!config.INTPTR_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SHIFT.) (= lib!config.INTPTR_SHIFT.? 3)))
(assert (uInv 64 lib!config.INTPTR_SHIFT.?))
(assert (fuel_bool_default fuel%lib!config.SLICE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SHIFT.) (= lib!config.SLICE_SHIFT.? (uClip 64 (Add 13 lib!config.INTPTR_SHIFT.?)))))
(assert (uInv 64 lib!config.SLICE_SHIFT.?))
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SHIFT.) (= lib!config.SEGMENT_SHIFT.? (uClip 64 (Add 9 lib!config.SLICE_SHIFT.?)))))
(assert (uInv 64 lib!config.SEGMENT_SHIFT.?))
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SIZE.) (= lib!config.SEGMENT_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.SEGMENT_SHIFT.?))))))
(assert (uInv 64 lib!config.SEGMENT_SIZE.?))
(assert (fuel_bool_default fuel%lib!config.SLICE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SIZE.) (= lib!config.SLICE_SIZE.? 65536)))
(assert (uInv 64 lib!config.SLICE_SIZE.?))
(assert (fuel_bool_default fuel%lib!config.SLICES_PER_SEGMENT.))
(assert (=> (fuel_bool fuel%lib!config.SLICES_PER_SEGMENT.) (= lib!config.SLICES_PER_SEGMENT.? (uClip 64 (EucDiv lib!config.SEGMENT_SIZE.? lib!config.SLICE_SIZE.?)))))
(assert (uInv 64 lib!config.SLICES_PER_SEGMENT.?))
(assert (fuel_bool_default fuel%lib!config.INTPTR_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SIZE.) (= lib!config.INTPTR_SIZE.? 8)))
(assert (uInv 64 lib!config.INTPTR_SIZE.?))
(assert (fuel_bool_default fuel%lib!config.SEGMENT_BIN_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_BIN_MAX.) (= lib!config.SEGMENT_BIN_MAX.? 31)))
(assert (uInv SZ lib!config.SEGMENT_BIN_MAX.?))
(assert (fuel_bool_default fuel%lib!bin_sizes.smallest_sbin_fitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.smallest_sbin_fitting_size.) (forall ((i! Poly)) (! (= (lib!bin_sizes.smallest_sbin_fitting_size.? i!) (ite (<= (%I i!) 8) (%I i!) (let ((w$ (uClip 64 (Sub (%I i!) 1)))) (let ((lz$ (vstd!std_specs.bits.u64_leading_zeros.? (I w$)))) (let ((b$ (uClip 8 (Sub (Sub SZ 1) lz$)))) (let ((sbin_idx$ (Sub (uClip 64 (bitor (I (uClip 64 (uClip 8 (bitshl (I b$) (I 2))))) (I (uClip 64 (bitand (I (uClip 64 (bitshr (I w$) (I (uClip 64 (Sub (uClip 64 b$) 2)))))) (I 3)))))) 4))) sbin_idx$)))))) :pattern ((lib!bin_sizes.smallest_sbin_fitting_size.? i!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.valid_sbin_idx.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.valid_sbin_idx.) (forall ((sbin_idx! Poly)) (! (= (lib!bin_sizes.valid_sbin_idx.? sbin_idx!) (and (<= 0 (%I sbin_idx!)) (<= (%I sbin_idx!) lib!config.SEGMENT_BIN_MAX.?))) :pattern ((lib!bin_sizes.valid_sbin_idx.? sbin_idx!))))))
(assert (fuel_bool_default fuel%lib!config.BIN_HUGE.))
(assert (=> (fuel_bool fuel%lib!config.BIN_HUGE.) (= lib!config.BIN_HUGE.? 73)))
(assert (uInv 64 lib!config.BIN_HUGE.?))
(assert (fuel_bool_default fuel%lib!bin_sizes.valid_bin_idx.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.valid_bin_idx.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.valid_bin_idx.? bin_idx!) (and (<= 1 (%I bin_idx!)) (<= (%I bin_idx!) lib!config.BIN_HUGE.?))) :pattern ((lib!bin_sizes.valid_bin_idx.? bin_idx!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.pow2.))
(declare-const fuel_nat%lib!bin_sizes.pow2. Fuel)
(assert (forall ((i! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%pow2.? i! fuel%) (lib!bin_sizes.rec%pow2.? i! zero)) :pattern ((lib!bin_sizes.rec%pow2.? i! fuel%)))))
(assert (forall ((i! Poly) (fuel% Fuel)) (! (=> (has_type i! INT) (= (lib!bin_sizes.rec%pow2.? i! (succ fuel%)) (ite (<= (%I i!) 0) 1 (nClip (Mul (lib!bin_sizes.rec%pow2.? (I (Sub (%I i!) 1)) fuel%) 2))))) :pattern ((lib!bin_sizes.rec%pow2.? i! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.pow2.) (forall ((i! Poly)) (! (=> (has_type i! INT) (= (lib!bin_sizes.pow2.? i!) (lib!bin_sizes.rec%pow2.? i! (succ fuel_nat%lib!bin_sizes.pow2.)))) :pattern ((lib!bin_sizes.pow2.? i!))))))
(assert (forall ((i! Poly)) (! (=> (has_type i! INT) (<= 0 (lib!bin_sizes.pow2.? i!))) :pattern ((lib!bin_sizes.pow2.? i!)))))
(declare-fun req%lib!bin_sizes.size_of_bin. (Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((bin_idx! Poly)) (! (= (req%lib!bin_sizes.size_of_bin. bin_idx!) (=> %%global_location_label%%0 (lib!bin_sizes.valid_bin_idx.? bin_idx!))) :pattern ((req%lib!bin_sizes.size_of_bin. bin_idx!)))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.size_of_bin.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.size_of_bin.? bin_idx!) (ite (and (<= 1 (%I bin_idx!)) (<= (%I bin_idx!) 8)) (nClip (Mul (uClip 32 (EucDiv SZ 8)) (nClip (%I bin_idx!)))) (ite (= (%I bin_idx!) lib!config.BIN_HUGE.?) (nClip (Mul 8 (nClip (Add 524288 1)))) (let ((group$ (EucDiv (Sub (%I bin_idx!) 9) 4))) (let ((inner$ (EucMod (Sub (%I bin_idx!) 9) 4))) (nClip (Mul (Mul (uClip 32 (EucDiv SZ 8)) (Add inner$ 5)) (lib!bin_sizes.pow2.? (I (Add group$ 1)))))))))) :pattern ((lib!bin_sizes.size_of_bin.? bin_idx!))))))
(assert (forall ((bin_idx! Poly)) (! (=> (has_type bin_idx! INT) (<= 0 (lib!bin_sizes.size_of_bin.? bin_idx!))) :pattern ((lib!bin_sizes.size_of_bin.? bin_idx!)))))
(assert (fuel_bool_default fuel%lib!config.SMALL_WSIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_WSIZE_MAX.) (= lib!config.SMALL_WSIZE_MAX.? 128)))
(assert (uInv SZ lib!config.SMALL_WSIZE_MAX.?))
(assert (fuel_bool_default fuel%lib!config.PAGES_DIRECT.))
(assert (=> (fuel_bool fuel%lib!config.PAGES_DIRECT.) (= lib!config.PAGES_DIRECT.? (uClip SZ (Add lib!config.SMALL_WSIZE_MAX.? 1)))))
(assert (uInv SZ lib!config.PAGES_DIRECT.?))
(assert (fuel_bool_default fuel%lib!bin_sizes.smallest_bin_fitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.smallest_bin_fitting_size.) (forall ((size! Poly)) (! (= (lib!bin_sizes.smallest_bin_fitting_size.? size!) (let ((bytes_per_word$ (uClip 32 (EucDiv SZ 8)))) (let ((wsize$ (EucDiv (Sub (Add (%I size!) bytes_per_word$) 1) bytes_per_word$))) (ite (<= wsize$ 1) 1 (ite (<= wsize$ 8) wsize$ (ite (> wsize$ 524288) lib!config.BIN_HUGE.? (let ((w$ (uClip 64 (Sub wsize$ 1)))) (let ((lz$ (vstd!std_specs.bits.u64_leading_zeros.? (I w$)))) (let ((b$ (uClip 8 (Sub (Sub SZ 1) lz$)))) (let ((shifted$ (uClip 8 (uClip 64 (bitshr (I w$) (I (uClip 64 (Sub b$ 2)))))))) (let ((bin_idx$ (Sub (Add (Mul b$ 4) (uClip 8 (bitand (I shifted$) (I 3)))) 3))) bin_idx$))))))))))) :pattern ((lib!bin_sizes.smallest_bin_fitting_size.? size!))))))
(assert (fuel_bool_default fuel%lib!config.MAX_ALLOC_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.MAX_ALLOC_SIZE.) (= lib!config.MAX_ALLOC_SIZE.? (uClip SZ (- (iHi SZ) 1)))))
(assert (uInv SZ lib!config.MAX_ALLOC_SIZE.?))
(assert (fuel_bool_default fuel%lib!config.SMALL_SIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_SIZE_MAX.) (= lib!config.SMALL_SIZE_MAX.? (uClip SZ (Mul lib!config.SMALL_WSIZE_MAX.? (uClip SZ lib!config.INTPTR_SIZE.?))))))
(assert (uInv SZ lib!config.SMALL_SIZE_MAX.?))
(declare-fun req%lib!bin_sizes.pfd_lower. (Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((bin_idx! Poly)) (! (= (req%lib!bin_sizes.pfd_lower. bin_idx!) (=> %%global_location_label%%1 (lib!bin_sizes.valid_bin_idx.? bin_idx!))) :pattern ((req%lib!bin_sizes.pfd_lower. bin_idx!)))))
(assert (fuel_bool_default fuel%lib!bin_sizes.pfd_lower.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.pfd_lower.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.pfd_lower.? bin_idx!) (ite (= (%I bin_idx!) 1) 0 (nClip (Add (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I (Sub (%I bin_idx!) 1))) lib!config.INTPTR_SIZE.?)) 1)))) :pattern ((lib!bin_sizes.pfd_lower.? bin_idx!))))))
(assert (forall ((bin_idx! Poly)) (! (=> (has_type bin_idx! INT) (<= 0 (lib!bin_sizes.pfd_lower.? bin_idx!))) :pattern ((lib!bin_sizes.pfd_lower.? bin_idx!)))))
(declare-fun req%lib!bin_sizes.pfd_upper. (Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((bin_idx! Poly)) (! (= (req%lib!bin_sizes.pfd_upper. bin_idx!) (=> %%global_location_label%%2 (lib!bin_sizes.valid_bin_idx.? bin_idx!))) :pattern ((req%lib!bin_sizes.pfd_upper. bin_idx!)))))
(assert (fuel_bool_default fuel%lib!bin_sizes.pfd_upper.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.pfd_upper.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.pfd_upper.? bin_idx!) (nClip (EucDiv (lib!bin_sizes.size_of_bin.? bin_idx!) lib!config.INTPTR_SIZE.?))) :pattern ((lib!bin_sizes.pfd_upper.? bin_idx!))))))
(assert (forall ((bin_idx! Poly)) (! (=> (has_type bin_idx! INT) (<= 0 (lib!bin_sizes.pfd_upper.? bin_idx!))) :pattern ((lib!bin_sizes.pfd_upper.? bin_idx!)))))
(assert (fuel_bool_default fuel%lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.) (forall ((bin_idx! Poly) (wsize! Poly)) (! (= (lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? bin_idx! wsize!) (=> (and (and (lib!bin_sizes.valid_bin_idx.? bin_idx!) (not (and (<= (lib!bin_sizes.pfd_lower.? bin_idx!) (%I wsize!)) (<= (%I wsize!) (lib!bin_sizes.pfd_upper.? bin_idx!))))) (and (<= 0 (%I wsize!)) (<= (%I wsize!) 128))) (not (= (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize!) lib!config.INTPTR_SIZE.?))) (%I bin_idx!))))) :pattern ((lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? bin_idx! wsize!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.))
(declare-const fuel_nat%lib!bin_sizes.check_idx_out_of_range_has_different_bin_size. Fuel)
(assert (forall ((bin_idx! Poly) (wsize_start! Poly) (wsize_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start! wsize_end! fuel%) (lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start! wsize_end! zero)) :pattern ((lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start! wsize_end! fuel%)))))
(assert (forall ((bin_idx! Poly) (wsize_start! Poly) (wsize_end! Poly) (fuel% Fuel)) (! (=> (and (has_type bin_idx! INT) (has_type wsize_start! INT) (has_type wsize_end! INT)) (= (lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start! wsize_end! (succ fuel%)) (=> (not (>= (%I wsize_start!) (%I wsize_end!))) (and (lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start!) (lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? bin_idx! (I (Add (%I wsize_start!) 1)) wsize_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start! wsize_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.) (forall ((bin_idx! Poly) (wsize_start! Poly) (wsize_end! Poly)) (! (=> (and (has_type bin_idx! INT) (has_type wsize_start! INT) (has_type wsize_end! INT)) (= (lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start! wsize_end!) (lib!bin_sizes.rec%check_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start! wsize_end! (succ fuel_nat%lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.)))) :pattern ((lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.? bin_idx! wsize_start! wsize_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size.))
(declare-const fuel_nat%lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size. Fuel)
(assert (forall ((bin_idx_start! Poly) (bin_idx_end! Poly) (wsize_start! Poly) (wsize_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! fuel%) (lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! zero)) :pattern ((lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! fuel%)))))
(assert (forall ((bin_idx_start! Poly) (bin_idx_end! Poly) (wsize_start! Poly) (wsize_end! Poly) (fuel% Fuel)) (! (=> (and (has_type bin_idx_start! INT) (has_type bin_idx_end! INT) (has_type wsize_start! INT) (has_type wsize_end! INT)) (= (lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! (succ fuel%)) (=> (not (>= (%I bin_idx_start!) (%I bin_idx_end!))) (and (lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.? bin_idx_start! wsize_start! wsize_end!) (lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? (I (Add (%I bin_idx_start!) 1)) bin_idx_end! wsize_start! wsize_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size.) (forall ((bin_idx_start! Poly) (bin_idx_end! Poly) (wsize_start! Poly) (wsize_end! Poly)) (! (=> (and (has_type bin_idx_start! INT) (has_type bin_idx_end! INT) (has_type wsize_start! INT) (has_type wsize_end! INT)) (= (lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end!) (lib!bin_sizes.rec%check2_idx_out_of_range_has_different_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! (succ fuel_nat%lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size.)))) :pattern ((lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.property_idx_in_range_has_bin_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.property_idx_in_range_has_bin_size.) (forall ((bin_idx! Poly) (wsize! Poly)) (! (= (lib!bin_sizes.property_idx_in_range_has_bin_size.? bin_idx! wsize!) (=> (and (lib!bin_sizes.valid_bin_idx.? bin_idx!) (and (<= (lib!bin_sizes.pfd_lower.? bin_idx!) (%I wsize!)) (<= (%I wsize!) (lib!bin_sizes.pfd_upper.? bin_idx!)))) (= (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize!) lib!config.INTPTR_SIZE.?))) (%I bin_idx!)))) :pattern ((lib!bin_sizes.property_idx_in_range_has_bin_size.? bin_idx! wsize!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check_idx_in_range_has_bin_size.))
(declare-const fuel_nat%lib!bin_sizes.check_idx_in_range_has_bin_size. Fuel)
(assert (forall ((bin_idx! Poly) (wsize_start! Poly) (wsize_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? bin_idx! wsize_start! wsize_end! fuel%) (lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? bin_idx! wsize_start! wsize_end! zero)) :pattern ((lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? bin_idx! wsize_start! wsize_end! fuel%)))))
(assert (forall ((bin_idx! Poly) (wsize_start! Poly) (wsize_end! Poly) (fuel% Fuel)) (! (=> (and (has_type bin_idx! INT) (has_type wsize_start! INT) (has_type wsize_end! INT)) (= (lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? bin_idx! wsize_start! wsize_end! (succ fuel%)) (=> (not (>= (%I wsize_start!) (%I wsize_end!))) (and (lib!bin_sizes.property_idx_in_range_has_bin_size.? bin_idx! wsize_start!) (lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? bin_idx! (I (Add (%I wsize_start!) 1)) wsize_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? bin_idx! wsize_start! wsize_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check_idx_in_range_has_bin_size.) (forall ((bin_idx! Poly) (wsize_start! Poly) (wsize_end! Poly)) (! (=> (and (has_type bin_idx! INT) (has_type wsize_start! INT) (has_type wsize_end! INT)) (= (lib!bin_sizes.check_idx_in_range_has_bin_size.? bin_idx! wsize_start! wsize_end!) (lib!bin_sizes.rec%check_idx_in_range_has_bin_size.? bin_idx! wsize_start! wsize_end! (succ fuel_nat%lib!bin_sizes.check_idx_in_range_has_bin_size.)))) :pattern ((lib!bin_sizes.check_idx_in_range_has_bin_size.? bin_idx! wsize_start! wsize_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check2_idx_in_range_has_bin_size.))
(declare-const fuel_nat%lib!bin_sizes.check2_idx_in_range_has_bin_size. Fuel)
(assert (forall ((bin_idx_start! Poly) (bin_idx_end! Poly) (wsize_start! Poly) (wsize_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! fuel%) (lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! zero)) :pattern ((lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! fuel%)))))
(assert (forall ((bin_idx_start! Poly) (bin_idx_end! Poly) (wsize_start! Poly) (wsize_end! Poly) (fuel% Fuel)) (! (=> (and (has_type bin_idx_start! INT) (has_type bin_idx_end! INT) (has_type wsize_start! INT) (has_type wsize_end! INT)) (= (lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! (succ fuel%)) (=> (not (>= (%I bin_idx_start!) (%I bin_idx_end!))) (and (lib!bin_sizes.check_idx_in_range_has_bin_size.? bin_idx_start! wsize_start! wsize_end!) (lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? (I (Add (%I bin_idx_start!) 1)) bin_idx_end! wsize_start! wsize_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check2_idx_in_range_has_bin_size.) (forall ((bin_idx_start! Poly) (bin_idx_end! Poly) (wsize_start! Poly) (wsize_end! Poly)) (! (=> (and (has_type bin_idx_start! INT) (has_type bin_idx_end! INT) (has_type wsize_start! INT) (has_type wsize_end! INT)) (= (lib!bin_sizes.check2_idx_in_range_has_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end!) (lib!bin_sizes.rec%check2_idx_in_range_has_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end! (succ fuel_nat%lib!bin_sizes.check2_idx_in_range_has_bin_size.)))) :pattern ((lib!bin_sizes.check2_idx_in_range_has_bin_size.? bin_idx_start! bin_idx_end! wsize_start! wsize_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.property_bounds_for_smallest_bitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.property_bounds_for_smallest_bitting_size.) (forall ((size! Poly)) (! (= (lib!bin_sizes.property_bounds_for_smallest_bitting_size.? size!) (and (lib!bin_sizes.valid_bin_idx.? (I (lib!bin_sizes.smallest_bin_fitting_size.? size!))) (>= (lib!bin_sizes.size_of_bin.? (I (lib!bin_sizes.smallest_bin_fitting_size.? size!))) (%I size!)))) :pattern ((lib!bin_sizes.property_bounds_for_smallest_bitting_size.? size!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check_bounds_for_smallest_bitting_size.))
(declare-const fuel_nat%lib!bin_sizes.check_bounds_for_smallest_bitting_size. Fuel)
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? size_start! size_end! fuel%) (lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? size_start! size_end! zero)) :pattern ((lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? size_start! size_end! fuel%)))))
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? size_start! size_end! (succ fuel%)) (=> (not (>= (%I size_start!) (%I size_end!))) (and (lib!bin_sizes.property_bounds_for_smallest_bitting_size.? size_start!) (lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? (I (Add (%I size_start!) 1)) size_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? size_start! size_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check_bounds_for_smallest_bitting_size.) (forall ((size_start! Poly) (size_end! Poly)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.check_bounds_for_smallest_bitting_size.? size_start! size_end!) (lib!bin_sizes.rec%check_bounds_for_smallest_bitting_size.? size_start! size_end! (succ fuel_nat%lib!bin_sizes.check_bounds_for_smallest_bitting_size.)))) :pattern ((lib!bin_sizes.check_bounds_for_smallest_bitting_size.? size_start! size_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.? bin_idx!) (= (lib!bin_sizes.smallest_bin_fitting_size.? (I (lib!bin_sizes.size_of_bin.? bin_idx!))) (%I bin_idx!))) :pattern ((lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.? bin_idx!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin.))
(declare-const fuel_nat%lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin. Fuel)
(assert (forall ((bin_idx_start! Poly) (bin_idx_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? bin_idx_start! bin_idx_end! fuel%) (lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? bin_idx_start! bin_idx_end! zero)) :pattern ((lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? bin_idx_start! bin_idx_end! fuel%)))))
(assert (forall ((bin_idx_start! Poly) (bin_idx_end! Poly) (fuel% Fuel)) (! (=> (and (has_type bin_idx_start! INT) (has_type bin_idx_end! INT)) (= (lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? bin_idx_start! bin_idx_end! (succ fuel%)) (=> (not (>= (%I bin_idx_start!) (%I bin_idx_end!))) (and (lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.? bin_idx_start!) (lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? (I (Add (%I bin_idx_start!) 1)) bin_idx_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? bin_idx_start! bin_idx_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin.) (forall ((bin_idx_start! Poly) (bin_idx_end! Poly)) (! (=> (and (has_type bin_idx_start! INT) (has_type bin_idx_end! INT)) (= (lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin.? bin_idx_start! bin_idx_end!) (lib!bin_sizes.rec%check_smallest_bin_fitting_size_size_of_bin.? bin_idx_start! bin_idx_end! (succ fuel_nat%lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin.)))) :pattern ((lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin.? bin_idx_start! bin_idx_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.property_bin.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.property_bin.) (forall ((size! Poly)) (! (= (lib!bin_sizes.property_bin.? size!) (let ((tmp%%$ (lib!bin_sizes.size_of_bin.? (I (lib!bin_sizes.smallest_bin_fitting_size.? size!))))) (and (>= 131072 tmp%%$) (>= tmp%%$ (%I size!))))) :pattern ((lib!bin_sizes.property_bin.? size!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check_bin.))
(declare-const fuel_nat%lib!bin_sizes.check_bin. Fuel)
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check_bin.? size_start! size_end! fuel%) (lib!bin_sizes.rec%check_bin.? size_start! size_end! zero)) :pattern ((lib!bin_sizes.rec%check_bin.? size_start! size_end! fuel%)))))
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.rec%check_bin.? size_start! size_end! (succ fuel%)) (=> (not (>= (%I size_start!) (%I size_end!))) (and (lib!bin_sizes.property_bin.? size_start!) (lib!bin_sizes.rec%check_bin.? (I (Add (%I size_start!) 8)) size_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check_bin.? size_start! size_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check_bin.) (forall ((size_start! Poly) (size_end! Poly)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.check_bin.? size_start! size_end!) (lib!bin_sizes.rec%check_bin.? size_start! size_end! (succ fuel_nat%lib!bin_sizes.check_bin.)))) :pattern ((lib!bin_sizes.check_bin.? size_start! size_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.id.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.id.) (forall ((i! Poly)) (! (= (lib!bin_sizes.id.? i!) true) :pattern ((lib!bin_sizes.id.? i!))))))
(declare-fun req%lib!bin_sizes.size_of_sbin. (Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((sbin_idx! Poly)) (! (= (req%lib!bin_sizes.size_of_sbin. sbin_idx!) (=> %%global_location_label%%3 (lib!bin_sizes.valid_sbin_idx.? sbin_idx!))) :pattern ((req%lib!bin_sizes.size_of_sbin. sbin_idx!)))))
(assert (fuel_bool_default fuel%lib!bin_sizes.size_of_sbin.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.size_of_sbin.) (forall ((sbin_idx! Poly)) (! (= (lib!bin_sizes.size_of_sbin.? sbin_idx!) (ite (and (<= 0 (%I sbin_idx!)) (<= (%I sbin_idx!) 7)) (nClip (%I sbin_idx!)) (ite (= (%I sbin_idx!) 8) 10 (let ((group$ (EucDiv (Sub (%I sbin_idx!) 8) 4))) (let ((inner$ (EucMod (Sub (%I sbin_idx!) 8) 4))) (nClip (Mul (Add inner$ 5) (lib!bin_sizes.pow2.? (I (Add group$ 1)))))))))) :pattern ((lib!bin_sizes.size_of_sbin.? sbin_idx!))))))
(assert (forall ((sbin_idx! Poly)) (! (=> (has_type sbin_idx! INT) (<= 0 (lib!bin_sizes.size_of_sbin.? sbin_idx!))) :pattern ((lib!bin_sizes.size_of_sbin.? sbin_idx!)))))
(assert (fuel_bool_default fuel%lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.) (forall ((size! Poly)) (! (= (lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.? size!) (lib!bin_sizes.valid_sbin_idx.? (I (lib!bin_sizes.smallest_sbin_fitting_size.? size!)))) :pattern ((lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.? size!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size.))
(declare-const fuel_nat%lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size. Fuel)
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? size_start! size_end! fuel%) (lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? size_start! size_end! zero)) :pattern ((lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? size_start! size_end! fuel%)))))
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? size_start! size_end! (succ fuel%)) (=> (not (>= (%I size_start!) (%I size_end!))) (and (lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.? size_start!) (lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? (I (Add (%I size_start!) 1)) size_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? size_start! size_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size.) (forall ((size_start! Poly) (size_end! Poly)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size.? size_start! size_end!) (lib!bin_sizes.rec%check_sbin_idx_smallest_sbin_fitting_size.? size_start! size_end! (succ fuel_nat%lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size.)))) :pattern ((lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size.? size_start! size_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.property_sbin_bounds.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.property_sbin_bounds.) (forall ((size! Poly)) (! (= (lib!bin_sizes.property_sbin_bounds.? size!) (let ((lz$ (vstd!std_specs.bits.u64_leading_zeros.? (I (uClip 64 (%I size!)))))) (let ((b$ (uClip 8 (Sub 63 lz$)))) (and (>= b$ 2) (>= (uClip 64 (bitor (I (uClip 64 (uClip 8 (bitshl (I b$) (I 2))))) (I (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I size!))) (I (uClip 64 (Sub (uClip 64 b$) 2)))))) (I 3)))))) 4))))) :pattern ((lib!bin_sizes.property_sbin_bounds.? size!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check_sbin_bounds.))
(declare-const fuel_nat%lib!bin_sizes.check_sbin_bounds. Fuel)
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check_sbin_bounds.? size_start! size_end! fuel%) (lib!bin_sizes.rec%check_sbin_bounds.? size_start! size_end! zero)) :pattern ((lib!bin_sizes.rec%check_sbin_bounds.? size_start! size_end! fuel%)))))
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.rec%check_sbin_bounds.? size_start! size_end! (succ fuel%)) (=> (not (>= (%I size_start!) (%I size_end!))) (and (lib!bin_sizes.property_sbin_bounds.? size_start!) (lib!bin_sizes.rec%check_sbin_bounds.? (I (Add (%I size_start!) 1)) size_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check_sbin_bounds.? size_start! size_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check_sbin_bounds.) (forall ((size_start! Poly) (size_end! Poly)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.check_sbin_bounds.? size_start! size_end!) (lib!bin_sizes.rec%check_sbin_bounds.? size_start! size_end! (succ fuel_nat%lib!bin_sizes.check_sbin_bounds.)))) :pattern ((lib!bin_sizes.check_sbin_bounds.? size_start! size_end!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.property_sbin.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.property_sbin.) (forall ((slice_count! Poly)) (! (= (lib!bin_sizes.property_sbin.? slice_count!) (let ((sbin_idx$ (lib!bin_sizes.smallest_sbin_fitting_size.? slice_count!))) (and (lib!bin_sizes.valid_sbin_idx.? (I sbin_idx$)) (>= (lib!bin_sizes.size_of_sbin.? (I sbin_idx$)) (%I slice_count!))))) :pattern ((lib!bin_sizes.property_sbin.? slice_count!))))))
(assert (fuel_bool_default fuel%lib!bin_sizes.check_sbin.))
(declare-const fuel_nat%lib!bin_sizes.check_sbin. Fuel)
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (= (lib!bin_sizes.rec%check_sbin.? size_start! size_end! fuel%) (lib!bin_sizes.rec%check_sbin.? size_start! size_end! zero)) :pattern ((lib!bin_sizes.rec%check_sbin.? size_start! size_end! fuel%)))))
(assert (forall ((size_start! Poly) (size_end! Poly) (fuel% Fuel)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.rec%check_sbin.? size_start! size_end! (succ fuel%)) (=> (not (>= (%I size_start!) (%I size_end!))) (and (lib!bin_sizes.property_sbin.? size_start!) (lib!bin_sizes.rec%check_sbin.? (I (Add (%I size_start!) 1)) size_end! fuel%))))) :pattern ((lib!bin_sizes.rec%check_sbin.? size_start! size_end! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!bin_sizes.check_sbin.) (forall ((size_start! Poly) (size_end! Poly)) (! (=> (and (has_type size_start! INT) (has_type size_end! INT)) (= (lib!bin_sizes.check_sbin.? size_start! size_end!) (lib!bin_sizes.rec%check_sbin.? size_start! size_end! (succ fuel_nat%lib!bin_sizes.check_sbin.)))) :pattern ((lib!bin_sizes.check_sbin.? size_start! size_end!))))))
(declare-fun ens%lib!bin_sizes.lemma_bin_sizes_constants. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!bin_sizes.lemma_bin_sizes_constants. no%param) (and (= (lib!bin_sizes.size_of_bin.? (I 1)) 8) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 1)) 8)) 1) (= (lib!bin_sizes.size_of_bin.? (I 2)) 16) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 2)) 8)) 2) (= (lib!bin_sizes.size_of_bin.? (I 3)) 24) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 3)) 8)) 3) (= (lib!bin_sizes.size_of_bin.? (I 4)) 32) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 4)) 8)) 4) (= (lib!bin_sizes.size_of_bin.? (I 5)) 40) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 5)) 8)) 5) (= (lib!bin_sizes.size_of_bin.? (I 6)) 48) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 6)) 8)) 6) (= (lib!bin_sizes.size_of_bin.? (I 7)) 56) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 7)) 8)) 7) (= (lib!bin_sizes.size_of_bin.? (I 8)) 64) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 8)) 8)) 8) (= (lib!bin_sizes.size_of_bin.? (I 9)) 80) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 9)) 8)) 10) (= (lib!bin_sizes.size_of_bin.? (I 10)) 96) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 10)) 8)) 12) (= (lib!bin_sizes.size_of_bin.? (I 11)) 112) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 11)) 8)) 14) (= (lib!bin_sizes.size_of_bin.? (I 12)) 128) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 12)) 8)) 16) (= (lib!bin_sizes.size_of_bin.? (I 13)) 160) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 13)) 8)) 20) (= (lib!bin_sizes.size_of_bin.? (I 14)) 192) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 14)) 8)) 24) (= (lib!bin_sizes.size_of_bin.? (I 15)) 224) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 15)) 8)) 28) (= (lib!bin_sizes.size_of_bin.? (I 16)) 256) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 16)) 8)) 32) (= (lib!bin_sizes.size_of_bin.? (I 17)) 320) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 17)) 8)) 40) (= (lib!bin_sizes.size_of_bin.? (I 18)) 384) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 18)) 8)) 48) (= (lib!bin_sizes.size_of_bin.? (I 19)) 448) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 19)) 8)) 56) (= (lib!bin_sizes.size_of_bin.? (I 20)) 512) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 20)) 8)) 64) (= (lib!bin_sizes.size_of_bin.? (I 21)) 640) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 21)) 8)) 80) (= (lib!bin_sizes.size_of_bin.? (I 22)) 768) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 22)) 8)) 96) (= (lib!bin_sizes.size_of_bin.? (I 23)) 896) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 23)) 8)) 112) (= (lib!bin_sizes.size_of_bin.? (I 24)) 1024) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 24)) 8)) 128) (= (lib!bin_sizes.size_of_bin.? (I 25)) 1280) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 25)) 8)) 160) (= (lib!bin_sizes.size_of_bin.? (I 26)) 1536) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 26)) 8)) 192) (= (lib!bin_sizes.size_of_bin.? (I 27)) 1792) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 27)) 8)) 224) (= (lib!bin_sizes.size_of_bin.? (I 28)) 2048) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 28)) 8)) 256) (= (lib!bin_sizes.size_of_bin.? (I 29)) 2560) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 29)) 8)) 320) (= (lib!bin_sizes.size_of_bin.? (I 30)) 3072) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 30)) 8)) 384) (= (lib!bin_sizes.size_of_bin.? (I 31)) 3584) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 31)) 8)) 448) (= (lib!bin_sizes.size_of_bin.? (I 32)) 4096) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 32)) 8)) 512) (= (lib!bin_sizes.size_of_bin.? (I 33)) 5120) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 33)) 8)) 640) (= (lib!bin_sizes.size_of_bin.? (I 34)) 6144) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 34)) 8)) 768) (= (lib!bin_sizes.size_of_bin.? (I 35)) 7168) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 35)) 8)) 896) (= (lib!bin_sizes.size_of_bin.? (I 36)) 8192) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 36)) 8)) 1024) (= (lib!bin_sizes.size_of_bin.? (I 37)) 10240) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 37)) 8)) 1280) (= (lib!bin_sizes.size_of_bin.? (I 38)) 12288) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 38)) 8)) 1536) (= (lib!bin_sizes.size_of_bin.? (I 39)) 14336) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 39)) 8)) 1792) (= (lib!bin_sizes.size_of_bin.? (I 40)) 16384) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 40)) 8)) 2048) (= (lib!bin_sizes.size_of_bin.? (I 41)) 20480) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 41)) 8)) 2560) (= (lib!bin_sizes.size_of_bin.? (I 42)) 24576) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 42)) 8)) 3072) (= (lib!bin_sizes.size_of_bin.? (I 43)) 28672) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 43)) 8)) 3584) (= (lib!bin_sizes.size_of_bin.? (I 44)) 32768) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 44)) 8)) 4096) (= (lib!bin_sizes.size_of_bin.? (I 45)) 40960) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 45)) 8)) 5120) (= (lib!bin_sizes.size_of_bin.? (I 46)) 49152) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 46)) 8)) 6144) (= (lib!bin_sizes.size_of_bin.? (I 47)) 57344) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 47)) 8)) 7168) (= (lib!bin_sizes.size_of_bin.? (I 48)) 65536) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 48)) 8)) 8192) (= (lib!bin_sizes.size_of_bin.? (I 49)) 81920) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 49)) 8)) 10240) (= (lib!bin_sizes.size_of_bin.? (I 50)) 98304) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 50)) 8)) 12288) (= (lib!bin_sizes.size_of_bin.? (I 51)) 114688) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 51)) 8)) 14336) (= (lib!bin_sizes.size_of_bin.? (I 52)) 131072) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 52)) 8)) 16384) (= (lib!bin_sizes.size_of_bin.? (I 53)) 163840) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 53)) 8)) 20480) (= (lib!bin_sizes.size_of_bin.? (I 54)) 196608) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 54)) 8)) 24576) (= (lib!bin_sizes.size_of_bin.? (I 55)) 229376) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 55)) 8)) 28672) (= (lib!bin_sizes.size_of_bin.? (I 56)) 262144) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 56)) 8)) 32768) (= (lib!bin_sizes.size_of_bin.? (I 57)) 327680) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 57)) 8)) 40960) (= (lib!bin_sizes.size_of_bin.? (I 58)) 393216) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 58)) 8)) 49152) (= (lib!bin_sizes.size_of_bin.? (I 59)) 458752) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 59)) 8)) 57344) (= (lib!bin_sizes.size_of_bin.? (I 60)) 524288) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 60)) 8)) 65536) (= (lib!bin_sizes.size_of_bin.? (I 61)) 655360) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 61)) 8)) 81920) (= (lib!bin_sizes.size_of_bin.? (I 62)) 786432) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 62)) 8)) 98304) (= (lib!bin_sizes.size_of_bin.? (I 63)) 917504) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 63)) 8)) 114688) (= (lib!bin_sizes.size_of_bin.? (I 64)) 1048576) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 64)) 8)) 131072) (= (lib!bin_sizes.size_of_bin.? (I 65)) 1310720) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 65)) 8)) 163840) (= (lib!bin_sizes.size_of_bin.? (I 66)) 1572864) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 66)) 8)) 196608) (= (lib!bin_sizes.size_of_bin.? (I 67)) 1835008) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 67)) 8)) 229376) (= (lib!bin_sizes.size_of_bin.? (I 68)) 2097152) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 68)) 8)) 262144) (= (lib!bin_sizes.size_of_bin.? (I 69)) 2621440) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 69)) 8)) 327680) (= (lib!bin_sizes.size_of_bin.? (I 70)) 3145728) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 70)) 8)) 393216) (= (lib!bin_sizes.size_of_bin.? (I 71)) 3670016) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 71)) 8)) 458752) (= (lib!bin_sizes.size_of_bin.? (I 72)) 4194304) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 72)) 8)) 524288) (= (lib!bin_sizes.size_of_bin.? (I 73)) 4194312) (= (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I 73)) 8)) 524289))) :pattern ((ens%lib!bin_sizes.lemma_bin_sizes_constants. no%param)))))
(declare-fun req%lib!bin_sizes.different_bin_size. (Int Int) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((bin_idx1! Int) (bin_idx2! Int)) (! (= (req%lib!bin_sizes.different_bin_size. bin_idx1! bin_idx2!) (and (=> %%global_location_label%%4 (lib!bin_sizes.valid_bin_idx.? (I bin_idx1!))) (=> %%global_location_label%%5 (lib!bin_sizes.valid_bin_idx.? (I bin_idx2!))) (=> %%global_location_label%%6 (not (= bin_idx1! bin_idx2!))))) :pattern ((req%lib!bin_sizes.different_bin_size. bin_idx1! bin_idx2!)))))
(declare-fun ens%lib!bin_sizes.different_bin_size. (Int Int) Bool)
(assert (forall ((bin_idx1! Int) (bin_idx2! Int)) (! (= (ens%lib!bin_sizes.different_bin_size. bin_idx1! bin_idx2!) (not (= (lib!bin_sizes.size_of_bin.? (I bin_idx1!)) (lib!bin_sizes.size_of_bin.? (I bin_idx2!))))) :pattern ((ens%lib!bin_sizes.different_bin_size. bin_idx1! bin_idx2!)))))
(declare-fun ens%lib!bin_sizes.result_sbin_idx_smallest_sbin_fitting_size. (Int Int) Bool)
(assert (forall ((size_start! Int) (size_end! Int)) (! (= (ens%lib!bin_sizes.result_sbin_idx_smallest_sbin_fitting_size. size_start! size_end!) (=> (lib!bin_sizes.check_sbin_idx_smallest_sbin_fitting_size.? (I size_start!) (I size_end!)) (forall ((size$ Poly)) (! (=> (has_type size$ INT) (=> (and (<= size_start! (%I size$)) (< (%I size$) size_end!)) (lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.? size$))) :pattern ((lib!bin_sizes.property_sbin_idx_smallest_sbin_fitting_size.? size$)))))) :pattern ((ens%lib!bin_sizes.result_sbin_idx_smallest_sbin_fitting_size. size_start! size_end!)))))
(declare-fun req%lib!bin_sizes.valid_sbin_idx_smallest_sbin_fitting_size. (Int) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((i! Int)) (! (= (req%lib!bin_sizes.valid_sbin_idx_smallest_sbin_fitting_size. i!) (=> %%global_location_label%%7 (and (<= 0 i!) (<= i! lib!config.SLICES_PER_SEGMENT.?)))) :pattern ((req%lib!bin_sizes.valid_sbin_idx_smallest_sbin_fitting_size. i!)))))
(declare-fun ens%lib!bin_sizes.valid_sbin_idx_smallest_sbin_fitting_size. (Int) Bool)
(assert (forall ((i! Int)) (! (= (ens%lib!bin_sizes.valid_sbin_idx_smallest_sbin_fitting_size. i!) (lib!bin_sizes.valid_sbin_idx.? (I (lib!bin_sizes.smallest_sbin_fitting_size.? (I i!))))) :pattern ((ens%lib!bin_sizes.valid_sbin_idx_smallest_sbin_fitting_size. i!)))))
(declare-fun ens%lib!bin_sizes.result_smallest_bin_fitting_size_size_of_bin. (Int Int) Bool)
(assert (forall ((bin_idx_start! Int) (bin_idx_end! Int)) (! (= (ens%lib!bin_sizes.result_smallest_bin_fitting_size_size_of_bin. bin_idx_start! bin_idx_end!) (=> (lib!bin_sizes.check_smallest_bin_fitting_size_size_of_bin.? (I bin_idx_start!) (I bin_idx_end!)) (forall ((bin_idx$ Poly)) (! (=> (has_type bin_idx$ INT) (=> (and (<= bin_idx_start! (%I bin_idx$)) (< (%I bin_idx$) bin_idx_end!)) (lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.? bin_idx$))) :pattern ((lib!bin_sizes.property_smallest_bin_fitting_size_size_of_bin.? bin_idx$)))))) :pattern ((ens%lib!bin_sizes.result_smallest_bin_fitting_size_size_of_bin. bin_idx_start! bin_idx_end!)))))
(declare-fun req%lib!bin_sizes.smallest_bin_fitting_size_size_of_bin. (Int) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((bin_idx! Int)) (! (= (req%lib!bin_sizes.smallest_bin_fitting_size_size_of_bin. bin_idx!) (=> %%global_location_label%%8 (lib!bin_sizes.valid_bin_idx.? (I bin_idx!)))) :pattern ((req%lib!bin_sizes.smallest_bin_fitting_size_size_of_bin. bin_idx!)))))
(declare-fun ens%lib!bin_sizes.smallest_bin_fitting_size_size_of_bin. (Int) Bool)
(assert (forall ((bin_idx! Int)) (! (= (ens%lib!bin_sizes.smallest_bin_fitting_size_size_of_bin. bin_idx!) (= (lib!bin_sizes.smallest_bin_fitting_size.? (I (lib!bin_sizes.size_of_bin.? (I bin_idx!)))) bin_idx!)) :pattern ((ens%lib!bin_sizes.smallest_bin_fitting_size_size_of_bin. bin_idx!)))))
(declare-fun req%lib!bin_sizes.mod8. (Int Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (req%lib!bin_sizes.mod8. x! y!) (=> %%global_location_label%%9 (= x! (Mul 8 y!)))) :pattern ((req%lib!bin_sizes.mod8. x! y!)))))
(declare-fun ens%lib!bin_sizes.mod8. (Int Int) Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (ens%lib!bin_sizes.mod8. x! y!) (= (EucMod x! 8) 0)) :pattern ((ens%lib!bin_sizes.mod8. x! y!)))))
(declare-fun ens%lib!bin_sizes.size_of_bin_mult_word_size. (Int) Bool)
(assert (forall ((bin_idx! Int)) (! (= (ens%lib!bin_sizes.size_of_bin_mult_word_size. bin_idx!) (= (nClip (EucMod (lib!bin_sizes.size_of_bin.? (I bin_idx!)) 8)) 0)) :pattern ((ens%lib!bin_sizes.size_of_bin_mult_word_size. bin_idx!)))))
(declare-fun ens%lib!bin_sizes.result_idx_out_of_range_has_different_bin_size. (Int Int Int) Bool)
(assert (forall ((bin_idx! Int) (wsize_start! Int) (wsize_end! Int)) (! (= (ens%lib!bin_sizes.result_idx_out_of_range_has_different_bin_size. bin_idx! wsize_start! wsize_end!) (=> (lib!bin_sizes.check_idx_out_of_range_has_different_bin_size.? (I bin_idx!) (I wsize_start!) (I wsize_end!)) (forall ((wsize$ Poly)) (! (=> (has_type wsize$ INT) (=> (and (<= wsize_start! (%I wsize$)) (< (%I wsize$) wsize_end!)) (lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? (I bin_idx!) wsize$))) :pattern ((lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? (I bin_idx!) wsize$)))))) :pattern ((ens%lib!bin_sizes.result_idx_out_of_range_has_different_bin_size. bin_idx! wsize_start! wsize_end!)))))
(declare-fun ens%lib!bin_sizes.result2_idx_out_of_range_has_different_bin_size. (Int Int Int Int) Bool)
(assert (forall ((bin_idx_start! Int) (bin_idx_end! Int) (wsize_start! Int) (wsize_end! Int)) (! (= (ens%lib!bin_sizes.result2_idx_out_of_range_has_different_bin_size. bin_idx_start! bin_idx_end! wsize_start! wsize_end!) (=> (lib!bin_sizes.check2_idx_out_of_range_has_different_bin_size.? (I bin_idx_start!) (I bin_idx_end!) (I wsize_start!) (I wsize_end!)) (forall ((bin_idx$ Poly) (wsize$ Poly)) (! (=> (and (has_type bin_idx$ INT) (has_type wsize$ INT)) (=> (and (and (<= bin_idx_start! (%I bin_idx$)) (< (%I bin_idx$) bin_idx_end!)) (and (<= wsize_start! (%I wsize$)) (< (%I wsize$) wsize_end!))) (lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? bin_idx$ wsize$))) :pattern ((lib!bin_sizes.property_idx_out_of_range_has_different_bin_size.? bin_idx$ wsize$)))))) :pattern ((ens%lib!bin_sizes.result2_idx_out_of_range_has_different_bin_size. bin_idx_start! bin_idx_end! wsize_start! wsize_end!)))))
(declare-fun req%lib!bin_sizes.idx_out_of_range_has_different_bin_size. (Int Int) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((bin_idx! Int) (wsize! Int)) (! (= (req%lib!bin_sizes.idx_out_of_range_has_different_bin_size. bin_idx! wsize!) (and (=> %%global_location_label%%10 (lib!bin_sizes.valid_bin_idx.? (I bin_idx!))) (=> %%global_location_label%%11 (not (and (<= (lib!bin_sizes.pfd_lower.? (I bin_idx!)) wsize!) (<= wsize! (lib!bin_sizes.pfd_upper.? (I bin_idx!)))))) (=> %%global_location_label%%12 (and (<= 0 wsize!) (<= wsize! 128))))) :pattern ((req%lib!bin_sizes.idx_out_of_range_has_different_bin_size. bin_idx! wsize!)))))
(declare-fun ens%lib!bin_sizes.idx_out_of_range_has_different_bin_size. (Int Int) Bool)
(assert (forall ((bin_idx! Int) (wsize! Int)) (! (= (ens%lib!bin_sizes.idx_out_of_range_has_different_bin_size. bin_idx! wsize!) (not (= (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul wsize! lib!config.INTPTR_SIZE.?))) bin_idx!))) :pattern ((ens%lib!bin_sizes.idx_out_of_range_has_different_bin_size. bin_idx! wsize!)))))
(declare-fun req%lib!bin_sizes.div2. (Int Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (req%lib!bin_sizes.div2. x! y!) (=> %%global_location_label%%13 (> y! 0))) :pattern ((req%lib!bin_sizes.div2. x! y!)))))
(declare-fun ens%lib!bin_sizes.div2. (Int Int) Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (ens%lib!bin_sizes.div2. x! y!) (= (EucDiv x! (Mul y! 2)) (EucDiv (EucDiv x! y!) 2))) :pattern ((ens%lib!bin_sizes.div2. x! y!)))))
(declare-fun req%lib!bin_sizes.lemma_div_is_ordered. (Int Int Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (req%lib!bin_sizes.lemma_div_is_ordered. x! y! z!) (and (=> %%global_location_label%%14 (<= x! y!)) (=> %%global_location_label%%15 (< 0 z!)))) :pattern ((req%lib!bin_sizes.lemma_div_is_ordered. x! y! z!)))))
(declare-fun ens%lib!bin_sizes.lemma_div_is_ordered. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (ens%lib!bin_sizes.lemma_div_is_ordered. x! y! z!) (<= (EucDiv x! z!) (EucDiv y! z!))) :pattern ((ens%lib!bin_sizes.lemma_div_is_ordered. x! y! z!)))))
(declare-fun req%lib!bin_sizes.lemma_div_by_multiple. (Int Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((b! Int) (d! Int)) (! (= (req%lib!bin_sizes.lemma_div_by_multiple. b! d!) (and (=> %%global_location_label%%16 (<= 0 b!)) (=> %%global_location_label%%17 (< 0 d!)))) :pattern ((req%lib!bin_sizes.lemma_div_by_multiple. b! d!)))))
(declare-fun ens%lib!bin_sizes.lemma_div_by_multiple. (Int Int) Bool)
(assert (forall ((b! Int) (d! Int)) (! (= (ens%lib!bin_sizes.lemma_div_by_multiple. b! d!) (= (EucDiv (Mul b! d!) d!) b!)) :pattern ((ens%lib!bin_sizes.lemma_div_by_multiple. b! d!)))))
(declare-fun ens%lib!bin_sizes.mul_assoc. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (ens%lib!bin_sizes.mul_assoc. x! y! z!) (= (nClip (Mul (nClip (Mul x! y!)) z!)) (nClip (Mul y! (nClip (Mul x! z!)))))) :pattern ((ens%lib!bin_sizes.mul_assoc. x! y! z!)))))
(declare-fun req%lib!bin_sizes.mul_ordering. (Int Int Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (req%lib!bin_sizes.mul_ordering. x! y! z!) (and (=> %%global_location_label%%18 (and (and (< 0 x!) (< 1 y!)) (< 0 z!))) (=> %%global_location_label%%19 (= (nClip (Mul x! y!)) z!)))) :pattern ((req%lib!bin_sizes.mul_ordering. x! y! z!)))))
(declare-fun ens%lib!bin_sizes.mul_ordering. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (ens%lib!bin_sizes.mul_ordering. x! y! z!) (< x! z!)) :pattern ((ens%lib!bin_sizes.mul_ordering. x! y! z!)))))
(declare-fun ens%lib!bin_sizes.pow2_positive. (Int) Bool)
(assert (forall ((e! Int)) (! (= (ens%lib!bin_sizes.pow2_positive. e!) (> (lib!bin_sizes.pow2.? (I e!)) 0)) :pattern ((ens%lib!bin_sizes.pow2_positive. e!)))))
(declare-fun ens%lib!bin_sizes.pow2_adds. (Int Int) Bool)
(assert (forall ((e1! Int) (e2! Int)) (! (= (ens%lib!bin_sizes.pow2_adds. e1! e2!) (= (nClip (Mul (lib!bin_sizes.pow2.? (I e1!)) (lib!bin_sizes.pow2.? (I e2!)))) (lib!bin_sizes.pow2.? (I (nClip (Add e1! e2!)))))) :pattern ((ens%lib!bin_sizes.pow2_adds. e1! e2!)))))
(declare-fun req%lib!bin_sizes.pow2_subtracts. (Int Int) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((e1! Int) (e2! Int)) (! (= (req%lib!bin_sizes.pow2_subtracts. e1! e2!) (=> %%global_location_label%%20 (<= e1! e2!))) :pattern ((req%lib!bin_sizes.pow2_subtracts. e1! e2!)))))
(declare-fun ens%lib!bin_sizes.pow2_subtracts. (Int Int) Bool)
(assert (forall ((e1! Int) (e2! Int)) (! (= (ens%lib!bin_sizes.pow2_subtracts. e1! e2!) (= (nClip (EucDiv (lib!bin_sizes.pow2.? (I e2!)) (lib!bin_sizes.pow2.? (I e1!)))) (lib!bin_sizes.pow2.? (I (Sub e2! e1!))))) :pattern ((ens%lib!bin_sizes.pow2_subtracts. e1! e2!)))))
(declare-fun ens%lib!bin_sizes.pow2_properties. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!bin_sizes.pow2_properties. no%param) (and (forall ((e$ Poly)) (! (=> (has_type e$ INT) (> (lib!bin_sizes.pow2.? e$) 0)) :pattern ((lib!bin_sizes.pow2.? e$)))) (forall ((e$ Poly)) (! (=> (has_type e$ INT) (=> (> (%I e$) 0) (= (nClip (EucDiv (lib!bin_sizes.pow2.? e$) 2)) (lib!bin_sizes.pow2.? (I (Sub (%I e$) 1)))))) :pattern ((lib!bin_sizes.pow2.? e$)))) (forall ((e1$ Poly) (e2$ Poly)) (! (=> (and (has_type e1$ INT) (has_type e2$ INT)) (=> (and (<= 0 (%I e1$)) (< (%I e1$) (%I e2$))) (< (lib!bin_sizes.pow2.? e1$) (lib!bin_sizes.pow2.? e2$)))) :pattern ((lib!bin_sizes.pow2.? e1$) (lib!bin_sizes.pow2.? e2$)))) (forall ((e1$ Int) (e2$ Int)) (! (=> (and (<= 0 e1$) (<= 0 e2$)) (= (nClip (Mul (lib!bin_sizes.pow2.? (I e1$)) (lib!bin_sizes.pow2.? (I e2$)))) (lib!bin_sizes.pow2.? (I (Add e1$ e2$))))) :pattern ((lib!bin_sizes.pow2.? (I (Add e1$ e2$)))))) (forall ((e1$ Int) (e2$ Int)) (! (=> (and (<= 0 e1$) (<= e1$ e2$)) (= (nClip (EucDiv (lib!bin_sizes.pow2.? (I e2$)) (lib!bin_sizes.pow2.? (I e1$)))) (lib!bin_sizes.pow2.? (I (Sub e2$ e1$))))) :pattern ((lib!bin_sizes.pow2.? (I (Sub e2$ e1$)))))))) :pattern ((ens%lib!bin_sizes.pow2_properties. no%param)))))
(declare-fun req%lib!bin_sizes.shift_is_div. (Int Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((x! Int) (shift! Int)) (! (= (req%lib!bin_sizes.shift_is_div. x! shift!) (=> %%global_location_label%%21 (and (<= 0 shift!) (< shift! 64)))) :pattern ((req%lib!bin_sizes.shift_is_div. x! shift!)))))
(declare-fun ens%lib!bin_sizes.shift_is_div. (Int Int) Bool)
(assert (forall ((x! Int) (shift! Int)) (! (= (ens%lib!bin_sizes.shift_is_div. x! shift!) (= (uClip 64 (bitshr (I x!) (I shift!))) (nClip (EucDiv x! (lib!bin_sizes.pow2.? (I shift!)))))) :pattern ((ens%lib!bin_sizes.shift_is_div. x! shift!)))))
(declare-fun req%lib!bin_sizes.leading_zeros_powers_of_2. (Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((i! Int) (exp! Int)) (! (= (req%lib!bin_sizes.leading_zeros_powers_of_2. i! exp!) (and (=> %%global_location_label%%22 (= i! (lib!bin_sizes.pow2.? (I exp!)))) (=> %%global_location_label%%23 (< exp! 64)))) :pattern ((req%lib!bin_sizes.leading_zeros_powers_of_2. i! exp!)))))
(declare-fun ens%lib!bin_sizes.leading_zeros_powers_of_2. (Int Int) Bool)
(assert (forall ((i! Int) (exp! Int)) (! (= (ens%lib!bin_sizes.leading_zeros_powers_of_2. i! exp!) (= (vstd!std_specs.bits.u64_leading_zeros.? (I i!)) (Sub (Sub 64 exp!) 1))) :pattern ((ens%lib!bin_sizes.leading_zeros_powers_of_2. i! exp!)))))
(declare-fun req%lib!bin_sizes.leading_zeros_between_powers_of_2. (Int Int) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((i! Int) (exp! Int)) (! (= (req%lib!bin_sizes.leading_zeros_between_powers_of_2. i! exp!) (and (=> %%global_location_label%%24 (and (<= (lib!bin_sizes.pow2.? (I exp!)) i!) (< i! (lib!bin_sizes.pow2.? (I (nClip (Add exp! 1))))))) (=> %%global_location_label%%25 (and (<= 1 exp!) (< exp! 64))))) :pattern ((req%lib!bin_sizes.leading_zeros_between_powers_of_2. i! exp!)))))
(declare-fun ens%lib!bin_sizes.leading_zeros_between_powers_of_2. (Int Int) Bool)
(assert (forall ((i! Int) (exp! Int)) (! (= (ens%lib!bin_sizes.leading_zeros_between_powers_of_2. i! exp!) (= (vstd!std_specs.bits.u64_leading_zeros.? (I i!)) (Sub (Sub 64 exp!) 1))) :pattern ((ens%lib!bin_sizes.leading_zeros_between_powers_of_2. i! exp!)))))
(declare-fun req%lib!bin_sizes.log2. (Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((i! Int)) (! (= (req%lib!bin_sizes.log2. i!) (=> %%global_location_label%%26 (>= i! 1))) :pattern ((req%lib!bin_sizes.log2. i!)))))
(declare-fun ens%lib!bin_sizes.log2. (Int Int) Bool)
(assert (forall ((i! Int) (e! Int)) (! (= (ens%lib!bin_sizes.log2. i! e!) (and (<= 0 e!) (and (<= (lib!bin_sizes.pow2.? (I e!)) i!) (< i! (lib!bin_sizes.pow2.? (I (nClip (Add e! 1)))))))) :pattern ((ens%lib!bin_sizes.log2. i! e!)))))
(declare-fun ens%lib!bin_sizes.result_idx_in_range_has_bin_size. (Int Int Int) Bool)
(assert (forall ((bin_idx! Int) (wsize_start! Int) (wsize_end! Int)) (! (= (ens%lib!bin_sizes.result_idx_in_range_has_bin_size. bin_idx! wsize_start! wsize_end!) (=> (lib!bin_sizes.check_idx_in_range_has_bin_size.? (I bin_idx!) (I wsize_start!) (I wsize_end!)) (forall ((wsize$ Poly)) (! (=> (has_type wsize$ INT) (=> (and (<= wsize_start! (%I wsize$)) (< (%I wsize$) wsize_end!)) (lib!bin_sizes.property_idx_in_range_has_bin_size.? (I bin_idx!) wsize$))) :pattern ((lib!bin_sizes.property_idx_in_range_has_bin_size.? (I bin_idx!) wsize$)))))) :pattern ((ens%lib!bin_sizes.result_idx_in_range_has_bin_size. bin_idx! wsize_start! wsize_end!)))))
(declare-const bin_idx! Int)
(declare-const wsize_start! Int)
(declare-const wsize_end! Int)
(declare-const tmp%1 Int)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(declare-const %%switch_label%%0 Bool)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(assert (not (=> (= decrease%init0 (Sub wsize_end! wsize_start!)) (or (and (=> (>= wsize_start! wsize_end!) %%switch_label%%0) (=> (not (>= wsize_start! wsize_end!)) (=> (= tmp%1 (Add wsize_start! 1)) (and (=> %%location_label%%0 (check_decrease_int (let ((bin_idx!$0 bin_idx!) (wsize_start!$1 tmp%1) (wsize_end!$2 wsize_end!)) (Sub wsize_end!$2 wsize_start!$1)) decrease%init0 false)) (=> (ens%lib!bin_sizes.result_idx_in_range_has_bin_size. bin_idx! tmp%1 wsize_end!) %%switch_label%%0))))) (and (not %%switch_label%%0) (=> %%location_label%%1 (=> (lib!bin_sizes.check_idx_in_range_has_bin_size.? (I bin_idx!) (I wsize_start!) (I wsize_end!)) (forall ((wsize$ Poly)) (! (=> (has_type wsize$ INT) (=> (and (<= wsize_start! (%I wsize$)) (< (%I wsize$) wsize_end!)) (lib!bin_sizes.property_idx_in_range_has_bin_size.? (I bin_idx!) wsize$))) :pattern ((lib!bin_sizes.property_idx_in_range_has_bin_size.? (I bin_idx!) wsize$)))))))))))
(check-sat)
(exit)
