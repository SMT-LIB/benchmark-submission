(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module queues, function lib::queues::page_queue_push_back'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.num.usize_specs.wrapping_add. FuelId)
(declare-const fuel%vstd!std_specs.bits.axiom_u64_leading_zeros. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.constant. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%23.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%23.constant. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%2.arrow_0. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.ptr. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.opt_value. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.value. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.value. FuelId)
(declare-const fuel%vstd!raw_ptr.axiom_ptr_mut_from_data. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!raw_ptr.ptr_null_mut. FuelId)
(declare-const fuel%vstd!raw_ptr.spec_cast_ptr_to_usize. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_sub. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference_finite. FuelId)
(declare-const fuel%vstd!set_lib.set_int_range. FuelId)
(declare-const fuel%vstd!state_machine_internal.impl&%2.update_at_index. FuelId)
(declare-const fuel%vstd!state_machine_internal.impl&%3.update_at_index. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%32.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%46.view. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.invariant. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.public_invariant. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_basics. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.page_id_domain. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.count_off0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.end_is_unused. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.count_is_right. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.popped_basics. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.data_for_used_header. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.inv_segment_creating. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.inv_very_unready. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.inv_ready. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.inv_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.data_for_unused_header. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.valid_used_page. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.wf. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.wf_os. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.range_os. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.range_os_rw. FuelId)
(declare-const fuel%lib!os_mem.impl&%0.os_exact_range. FuelId)
(declare-const fuel%lib!types.impl&%0.wf. FuelId)
(declare-const fuel%lib!types.impl&%0.zeroed. FuelId)
(declare-const fuel%lib!types.impl&%0.zeroed_except_block_size. FuelId)
(declare-const fuel%lib!types.impl&%2.wf. FuelId)
(declare-const fuel%lib!types.impl&%3.is_empty. FuelId)
(declare-const fuel%lib!types.impl&%4.wf. FuelId)
(declare-const fuel%lib!types.impl&%4.wf_secondary. FuelId)
(declare-const fuel%lib!types.impl&%4.wf_unused. FuelId)
(declare-const fuel%lib!types.impl&%5.wf. FuelId)
(declare-const fuel%lib!types.impl&%5.wf_secondary. FuelId)
(declare-const fuel%lib!types.impl&%5.wf_unused. FuelId)
(declare-const fuel%lib!types.wf_reserved. FuelId)
(declare-const fuel%lib!types.impl&%6.wf. FuelId)
(declare-const fuel%lib!types.impl&%6.wf_unused. FuelId)
(declare-const fuel%lib!types.impl&%7.wf_empty_page_global. FuelId)
(declare-const fuel%lib!types.impl&%11.wf. FuelId)
(declare-const fuel%lib!types.impl&%12.wf. FuelId)
(declare-const fuel%lib!types.impl&%13.wf. FuelId)
(declare-const fuel%lib!types.impl&%16.wf. FuelId)
(declare-const fuel%lib!types.impl&%17.wf. FuelId)
(declare-const fuel%lib!types.pages_free_direct_match. FuelId)
(declare-const fuel%lib!types.pages_free_direct_is_correct. FuelId)
(declare-const fuel%lib!types.impl&%18.wf. FuelId)
(declare-const fuel%lib!types.impl&%18.wf_basic. FuelId)
(declare-const fuel%lib!types.common_preserves. FuelId)
(declare-const fuel%lib!types.impl&%21.wf. FuelId)
(declare-const fuel%lib!types.impl&%21.wf_basic. FuelId)
(declare-const fuel%lib!types.impl&%21.wf_main. FuelId)
(declare-const fuel%lib!types.impl&%21.page_organization_valid. FuelId)
(declare-const fuel%lib!types.impl&%21.commit_mask. FuelId)
(declare-const fuel%lib!types.impl&%21.decommit_mask. FuelId)
(declare-const fuel%lib!types.impl&%21.is_used_primary. FuelId)
(declare-const fuel%lib!types.impl&%21.page_reserved. FuelId)
(declare-const fuel%lib!types.impl&%21.page_count. FuelId)
(declare-const fuel%lib!types.impl&%21.page_capacity. FuelId)
(declare-const fuel%lib!types.impl&%21.block_size. FuelId)
(declare-const fuel%lib!types.page_organization_queues_match. FuelId)
(declare-const fuel%lib!types.page_organization_used_queues_match. FuelId)
(declare-const fuel%lib!types.page_organization_pages_match. FuelId)
(declare-const fuel%lib!types.page_organization_pages_match_data. FuelId)
(declare-const fuel%lib!types.page_organization_segments_match. FuelId)
(declare-const fuel%lib!types.page_organization_matches_token_page. FuelId)
(declare-const fuel%lib!types.impl&%24.wf. FuelId)
(declare-const fuel%lib!types.impl&%24.is_in. FuelId)
(declare-const fuel%lib!types.local_page_count_update. FuelId)
(declare-const fuel%lib!types.impl&%27.wf. FuelId)
(declare-const fuel%lib!types.impl&%33.wf. FuelId)
(declare-const fuel%lib!types.impl&%33.is_in. FuelId)
(declare-const fuel%lib!types.impl&%33.is_used_and_primary. FuelId)
(declare-const fuel%lib!flags.impl&%0.in_full. FuelId)
(declare-const fuel%lib!flags.impl&%0.has_aligned. FuelId)
(declare-const fuel%lib!layout.is_page_ptr. FuelId)
(declare-const fuel%lib!layout.is_segment_ptr. FuelId)
(declare-const fuel%lib!layout.is_heap_ptr. FuelId)
(declare-const fuel%lib!layout.is_tld_ptr. FuelId)
(declare-const fuel%lib!layout.page_header_start. FuelId)
(declare-const fuel%lib!layout.is_page_ptr_opt. FuelId)
(declare-const fuel%lib!config.INTPTR_SHIFT. FuelId)
(declare-const fuel%lib!config.INTPTR_SIZE. FuelId)
(declare-const fuel%lib!config.SLICE_SHIFT. FuelId)
(declare-const fuel%lib!config.SLICE_SIZE. FuelId)
(declare-const fuel%lib!config.SEGMENT_SHIFT. FuelId)
(declare-const fuel%lib!config.SEGMENT_SIZE. FuelId)
(declare-const fuel%lib!config.SLICES_PER_SEGMENT. FuelId)
(declare-const fuel%lib!config.BIN_HUGE. FuelId)
(declare-const fuel%lib!config.BIN_FULL. FuelId)
(declare-const fuel%lib!config.SMALL_PAGE_SHIFT. FuelId)
(declare-const fuel%lib!config.MEDIUM_PAGE_SHIFT. FuelId)
(declare-const fuel%lib!config.MEDIUM_PAGE_SIZE. FuelId)
(declare-const fuel%lib!config.MEDIUM_OBJ_SIZE_MAX. FuelId)
(declare-const fuel%lib!config.SMALL_WSIZE_MAX. FuelId)
(declare-const fuel%lib!config.PAGES_DIRECT. FuelId)
(declare-const fuel%lib!config.SEGMENT_BIN_MAX. FuelId)
(declare-const fuel%lib!config.SIZEOF_SEGMENT_HEADER. FuelId)
(declare-const fuel%lib!config.SIZEOF_PAGE_HEADER. FuelId)
(declare-const fuel%lib!bin_sizes.valid_bin_idx. FuelId)
(declare-const fuel%lib!bin_sizes.smallest_bin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.pfd_lower. FuelId)
(declare-const fuel%lib!bin_sizes.pfd_upper. FuelId)
(declare-const fuel%lib!bin_sizes.smallest_sbin_fitting_size. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_Ready. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_Ready_0. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_SegmentCreating. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_VeryUnready. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_VeryUnready_0. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_VeryUnready_1. FuelId)
(declare-const fuel%lib!page_organization.is_unused_header. FuelId)
(declare-const fuel%lib!page_organization.is_used_header. FuelId)
(declare-const fuel%lib!page_organization.get_next. FuelId)
(declare-const fuel%lib!page_organization.get_prev. FuelId)
(declare-const fuel%lib!page_organization.valid_ll_i. FuelId)
(declare-const fuel%lib!page_organization.valid_ll. FuelId)
(declare-const fuel%lib!page_organization.is_in_lls. FuelId)
(declare-const fuel%lib!os_mem_util.impl&%0.os_rw_bytes. FuelId)
(declare-const fuel%lib!os_mem_util.segment_info_range. FuelId)
(declare-const fuel%lib!os_mem_util.mem_chunk_good1. FuelId)
(declare-const fuel%lib!os_mem_util.impl&%1.mem_chunk_good. FuelId)
(declare-const fuel%lib!linked_list.impl&%7.wf. FuelId)
(declare-const fuel%lib!linked_list.impl&%8.is_empty. FuelId)
(declare-const fuel%lib!linked_list.impl&%8.block_size. FuelId)
(declare-const fuel%lib!linked_list.impl&%8.page_id. FuelId)
(declare-const fuel%lib!queues.local_direct_update. FuelId)
(declare-const fuel%lib!queues.pfd_direct_update. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.num.usize_specs.wrapping_add. fuel%vstd!std_specs.bits.axiom_u64_leading_zeros. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!atomic_ghost.impl&%1.well_formed. fuel%vstd!atomic_ghost.impl&%1.constant. fuel%vstd!atomic_ghost.impl&%23.well_formed. fuel%vstd!atomic_ghost.impl&%23.constant. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!raw_ptr.impl&%2.arrow_0. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%6.ptr. fuel%vstd!raw_ptr.impl&%6.opt_value. fuel%vstd!raw_ptr.impl&%6.is_init. fuel%vstd!raw_ptr.impl&%6.value. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.impl&%7.value. fuel%vstd!raw_ptr.axiom_ptr_mut_from_data. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!raw_ptr.ptr_null_mut. fuel%vstd!raw_ptr.spec_cast_ptr_to_usize. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_le. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.spec_sub. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_difference. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_difference_finite. fuel%vstd!set_lib.set_int_range. fuel%vstd!state_machine_internal.impl&%2.update_at_index. fuel%vstd!state_machine_internal.impl&%3.update_at_index. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%32.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%46.view. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled. fuel%lib!page_organization.PageOrg.impl&%4.invariant. fuel%lib!page_organization.PageOrg.impl&%4.public_invariant. fuel%lib!page_organization.PageOrg.impl&%4.ll_basics. fuel%lib!page_organization.PageOrg.impl&%4.page_id_domain. fuel%lib!page_organization.PageOrg.impl&%4.count_off0. fuel%lib!page_organization.PageOrg.impl&%4.end_is_unused. fuel%lib!page_organization.PageOrg.impl&%4.count_is_right. fuel%lib!page_organization.PageOrg.impl&%4.popped_basics. fuel%lib!page_organization.PageOrg.impl&%4.data_for_used_header. fuel%lib!page_organization.PageOrg.impl&%4.inv_segment_creating. fuel%lib!page_organization.PageOrg.impl&%4.inv_very_unready. fuel%lib!page_organization.PageOrg.impl&%4.inv_ready. fuel%lib!page_organization.PageOrg.impl&%4.inv_used. fuel%lib!page_organization.PageOrg.impl&%4.data_for_unused_header. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2. fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges. fuel%lib!page_organization.PageOrg.impl&%4.valid_used_page. fuel%lib!os_mem.impl&%0.wf. fuel%lib!os_mem.impl&%0.wf_os. fuel%lib!os_mem.impl&%0.range_os. fuel%lib!os_mem.impl&%0.range_os_rw. fuel%lib!os_mem.impl&%0.os_exact_range. fuel%lib!types.impl&%0.wf. fuel%lib!types.impl&%0.zeroed. fuel%lib!types.impl&%0.zeroed_except_block_size. fuel%lib!types.impl&%2.wf. fuel%lib!types.impl&%3.is_empty. fuel%lib!types.impl&%4.wf. fuel%lib!types.impl&%4.wf_secondary. fuel%lib!types.impl&%4.wf_unused. fuel%lib!types.impl&%5.wf. fuel%lib!types.impl&%5.wf_secondary. fuel%lib!types.impl&%5.wf_unused. fuel%lib!types.wf_reserved. fuel%lib!types.impl&%6.wf. fuel%lib!types.impl&%6.wf_unused. fuel%lib!types.impl&%7.wf_empty_page_global. fuel%lib!types.impl&%11.wf. fuel%lib!types.impl&%12.wf. fuel%lib!types.impl&%13.wf. fuel%lib!types.impl&%16.wf. fuel%lib!types.impl&%17.wf. fuel%lib!types.pages_free_direct_match. fuel%lib!types.pages_free_direct_is_correct. fuel%lib!types.impl&%18.wf. fuel%lib!types.impl&%18.wf_basic. fuel%lib!types.common_preserves. fuel%lib!types.impl&%21.wf. fuel%lib!types.impl&%21.wf_basic. fuel%lib!types.impl&%21.wf_main. fuel%lib!types.impl&%21.page_organization_valid. fuel%lib!types.impl&%21.commit_mask. fuel%lib!types.impl&%21.decommit_mask. fuel%lib!types.impl&%21.is_used_primary. fuel%lib!types.impl&%21.page_reserved. fuel%lib!types.impl&%21.page_count. fuel%lib!types.impl&%21.page_capacity. fuel%lib!types.impl&%21.block_size. fuel%lib!types.page_organization_queues_match. fuel%lib!types.page_organization_used_queues_match. fuel%lib!types.page_organization_pages_match. fuel%lib!types.page_organization_pages_match_data. fuel%lib!types.page_organization_segments_match. fuel%lib!types.page_organization_matches_token_page. fuel%lib!types.impl&%24.wf. fuel%lib!types.impl&%24.is_in. fuel%lib!types.local_page_count_update. fuel%lib!types.impl&%27.wf. fuel%lib!types.impl&%33.wf. fuel%lib!types.impl&%33.is_in. fuel%lib!types.impl&%33.is_used_and_primary. fuel%lib!flags.impl&%0.in_full. fuel%lib!flags.impl&%0.has_aligned. fuel%lib!layout.is_page_ptr. fuel%lib!layout.is_segment_ptr. fuel%lib!layout.is_heap_ptr. fuel%lib!layout.is_tld_ptr. fuel%lib!layout.page_header_start. fuel%lib!layout.is_page_ptr_opt. fuel%lib!config.INTPTR_SHIFT. fuel%lib!config.INTPTR_SIZE. fuel%lib!config.SLICE_SHIFT. fuel%lib!config.SLICE_SIZE. fuel%lib!config.SEGMENT_SHIFT. fuel%lib!config.SEGMENT_SIZE. fuel%lib!config.SLICES_PER_SEGMENT. fuel%lib!config.BIN_HUGE. fuel%lib!config.BIN_FULL. fuel%lib!config.SMALL_PAGE_SHIFT. fuel%lib!config.MEDIUM_PAGE_SHIFT. fuel%lib!config.MEDIUM_PAGE_SIZE. fuel%lib!config.MEDIUM_OBJ_SIZE_MAX. fuel%lib!config.SMALL_WSIZE_MAX. fuel%lib!config.PAGES_DIRECT. fuel%lib!config.SEGMENT_BIN_MAX. fuel%lib!config.SIZEOF_SEGMENT_HEADER. fuel%lib!config.SIZEOF_PAGE_HEADER. fuel%lib!bin_sizes.valid_bin_idx. fuel%lib!bin_sizes.smallest_bin_fitting_size. fuel%lib!bin_sizes.pfd_lower. fuel%lib!bin_sizes.pfd_upper. fuel%lib!bin_sizes.smallest_sbin_fitting_size. fuel%lib!page_organization.impl&%2.is_Ready. fuel%lib!page_organization.impl&%2.get_Ready_0. fuel%lib!page_organization.impl&%2.is_SegmentCreating. fuel%lib!page_organization.impl&%2.is_VeryUnready. fuel%lib!page_organization.impl&%2.get_VeryUnready_0. fuel%lib!page_organization.impl&%2.get_VeryUnready_1. fuel%lib!page_organization.is_unused_header. fuel%lib!page_organization.is_used_header. fuel%lib!page_organization.get_next. fuel%lib!page_organization.get_prev. fuel%lib!page_organization.valid_ll_i. fuel%lib!page_organization.valid_ll. fuel%lib!page_organization.is_in_lls. fuel%lib!os_mem_util.impl&%0.os_rw_bytes. fuel%lib!os_mem_util.segment_info_range. fuel%lib!os_mem_util.mem_chunk_good1. fuel%lib!os_mem_util.impl&%1.mem_chunk_good. fuel%lib!linked_list.impl&%7.wf. fuel%lib!linked_list.impl&%8.is_empty. fuel%lib!linked_list.impl&%8.block_size. fuel%lib!linked_list.impl&%8.page_id. fuel%lib!queues.local_direct_update. fuel%lib!queues.pfd_direct_update. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (and (fuel_bool_default fuel%vstd!raw_ptr.axiom_ptr_mut_from_data.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_difference.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_difference_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.axiom_u64_leading_zeros.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%core!ptr.metadata.Pointee./Metadata (Dcr Type) Dcr)
(declare-fun proj%core!ptr.metadata.Pointee./Metadata (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort lib!commit_mask.CommitMask. 0)
(declare-sort lib!linked_list.LL. 0)
(declare-sort lib!linked_list.StuffAgree.Instance. 0)
(declare-sort lib!linked_list.StuffAgree.x. 0)
(declare-sort lib!linked_list.StuffAgree.y. 0)
(declare-sort lib!os_mem.OsMem. 0)
(declare-sort lib!thread.IsThread. 0)
(declare-sort lib!tokens.Mim.Instance. 0)
(declare-sort lib!tokens.Mim.delay. 0)
(declare-sort lib!tokens.Mim.heap_of_page. 0)
(declare-sort lib!tokens.Mim.my_inst. 0)
(declare-sort lib!tokens.Mim.thread_checked_state. 0)
(declare-sort lib!tokens.Mim.thread_local_state. 0)
(declare-sort lib!tokens.Mim.thread_of_segment. 0)
(declare-sort lib!types.BoolAgree.Instance. 0)
(declare-sort lib!types.BoolAgree.x. 0)
(declare-sort lib!types.BoolAgree.y. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!cell.CellId. 0)
(declare-sort vstd!cell.PCell<u32.>. 0)
(declare-sort vstd!cell.PCell<usize.>. 0)
(declare-sort vstd!cell.PCell<lib!types.PageInner.>. 0)
(declare-sort vstd!cell.PCell<lib!types.SegmentHeaderMain.>. 0)
(declare-sort vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. 0)
(declare-sort vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. 0)
(declare-sort vstd!cell.PointsTo<u32.>. 0)
(declare-sort vstd!cell.PointsTo<usize.>. 0)
(declare-sort vstd!cell.PointsTo<lib!types.PageInner.>. 0)
(declare-sort vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. 0)
(declare-sort vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. 0)
(declare-sort vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. 0)
(declare-sort vstd!map.Map<int./lib!os_mem.OsMem.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.IsExposed. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.Heap.>. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.Page.>. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.Tld.>. 0)
(declare-sort vstd!raw_ptr.PointsToRaw. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<lib!page_organization.DlistHeader.>. 0)
(declare-sort vstd!seq.Seq<lib!tokens.PageId.>. 0)
(declare-sort vstd!seq.Seq<lib!types.PageQueue.>. 0)
(declare-sort vstd!seq.Seq<lib!types.SpanQueueHeader.>. 0)
(declare-sort vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. 0)
(declare-sort vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-sort vstd!set.Set<lib!tokens.PageId.>. 0)
(declare-sort vstd!set.Set<lib!tokens.SegmentId.>. 0)
(declare-sort vstd!shared.Shared<lib!types.PageFullAccess.>. 0)
(declare-sort ptr_mut%<lib!linked_list.Node.>. 0)
(declare-sort ptr_mut%<lib!types.Heap.>. 0)
(declare-sort ptr_mut%<lib!types.Page.>. 0)
(declare-sort ptr_mut%<lib!types.SegmentHeader.>. 0)
(declare-sort ptr_mut%<lib!types.Tld.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!atomic_ghost.AtomicPtr. 0) (vstd!cell.PointsToData. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (vstd!raw_ptr.PointsToData. 0) (lib!tokens.Mim.my_inst_token_data. 0) (lib!tokens.Mim.thread_local_state_token_data. 0) (lib!tokens.Mim.thread_checked_state_token_data. 0) (lib!types.BoolAgree.x_token_data. 0) (lib!page_organization.PageOrg.State. 0) (lib!linked_list.StuffAgree.x_token_data. 0) (lib!os_mem.MemProtect. 0) (lib!os_mem.OsMemData. 0) (lib!os_mem.MemChunk. 0) (lib!thread.ThreadId. 0) (lib!tokens.HeapId. 0) (lib!tokens.TldId. 0) (lib!tokens.SegmentId. 0) (lib!tokens.PageId. 0) (lib!tokens.PageState. 0) (lib!tokens.SegmentState. 0) (lib!tokens.HeapState. 0) (lib!tokens.ThreadState. 0) (lib!tokens.ThreadCheckedState. 0) (lib!types.PageInner. 0) (lib!types.AtomicHeapPtr. 0) (lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. 0) (lib!types.Page. 0) (lib!types.PageSharedAccess. 0) (lib!types.PageLocalAccess. 0) (lib!types.PageFullAccess. 0) (lib!types.SegmentKind. 0) (lib!types.SegmentHeaderMain. 0) (lib!types.SegmentHeaderMain2. 0) (lib!types.SegmentHeader. 0) (lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. 0) (lib!types.SegmentSharedAccess. 0) (lib!types.SegmentLocalAccess. 0) (lib!types.PageQueue. 0) (lib!types.Heap. 0) (lib!types.HeapSharedAccess. 0) (lib!types.HeapLocalAccess. 0) (lib!types.SegmentsTld. 0) (lib!types.SpanQueueHeader. 0) (lib!types.Tld. 0) (lib!types.Local. 0) (lib!types.HeapPtr. 0) (lib!types.TldPtr. 0) (lib!types.PagePtr. 0) (lib!page_organization.DlistHeader. 0) (lib!page_organization.DlistEntry. 0) (lib!page_organization.PageHeaderKind. 0) (lib!page_organization.PageData. 0) (lib!page_organization.SegmentData. 0) (lib!page_organization.Popped. 0) (lib!linked_list.Node. 0) (lib!linked_list.ThreadLLSimple. 0) (lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. 0) (lib!linked_list.BlockSizePageId. 0) (lib!linked_list.ThreadLLWithDelayBits. 0) (lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. 0) (tuple%0. 0) (tuple%2. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!atomic_ghost.AtomicPtr./AtomicPtr (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?patomic Poly) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?atomic_inv Poly))) ((vstd!cell.PointsToData./PointsToData (vstd!cell.PointsToData./PointsToData/?pcell vstd!cell.CellId.) (vstd!cell.PointsToData./PointsToData/?value core!option.Option.))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((vstd!raw_ptr.PointsToData./PointsToData (vstd!raw_ptr.PointsToData./PointsToData/?ptr Poly) (vstd!raw_ptr.PointsToData./PointsToData/?opt_value vstd!raw_ptr.MemContents.))) ((lib!tokens.Mim.my_inst_token_data./my_inst_token_data (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/?value lib!tokens.Mim.Instance.))) ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?key lib!thread.ThreadId.) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?value lib!tokens.ThreadState.))) ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?key lib!thread.ThreadId.) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?value lib!tokens.ThreadCheckedState.))) ((lib!types.BoolAgree.x_token_data./x_token_data (lib!types.BoolAgree.x_token_data./x_token_data/?instance lib!types.BoolAgree.Instance.) (lib!types.BoolAgree.x_token_data./x_token_data/?value Bool))) ((lib!page_organization.PageOrg.State./State (lib!page_organization.PageOrg.State./State/?unused_dlist_headers vstd!seq.Seq<lib!page_organization.DlistHeader.>.) (lib!page_organization.PageOrg.State./State/?used_dlist_headers vstd!seq.Seq<lib!page_organization.DlistHeader.>.) (lib!page_organization.PageOrg.State./State/?pages vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.) (lib!page_organization.PageOrg.State./State/?segments vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.) (lib!page_organization.PageOrg.State./State/?popped lib!page_organization.Popped.) (lib!page_organization.PageOrg.State./State/?unused_lists vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) (lib!page_organization.PageOrg.State./State/?used_lists vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.))) ((lib!linked_list.StuffAgree.x_token_data./x_token_data (lib!linked_list.StuffAgree.x_token_data./x_token_data/?instance lib!linked_list.StuffAgree.Instance.) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?value core!option.Option.))) ((lib!os_mem.MemProtect./MemProtect (lib!os_mem.MemProtect./MemProtect/?read Bool) (lib!os_mem.MemProtect./MemProtect/?write Bool))) ((lib!os_mem.OsMemData./OsMemData (lib!os_mem.OsMemData./OsMemData/?byte_addr Int) (lib!os_mem.OsMemData./OsMemData/?mem_protect lib!os_mem.MemProtect.))) ((lib!os_mem.MemChunk./MemChunk (lib!os_mem.MemChunk./MemChunk/?os vstd!map.Map<int./lib!os_mem.OsMem.>.) (lib!os_mem.MemChunk./MemChunk/?points_to vstd!raw_ptr.PointsToRaw.))) ((lib!thread.ThreadId./ThreadId (lib!thread.ThreadId./ThreadId/?thread_id Int))) ((lib!tokens.HeapId./HeapId (lib!tokens.HeapId./HeapId/?id Int) (lib!tokens.HeapId./HeapId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.HeapId./HeapId/?uniq Int))) ((lib!tokens.TldId./TldId (lib!tokens.TldId./TldId/?id Int) (lib!tokens.TldId./TldId/?provenance vstd!raw_ptr.Provenance.))) ((lib!tokens.SegmentId./SegmentId (lib!tokens.SegmentId./SegmentId/?id Int) (lib!tokens.SegmentId./SegmentId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.SegmentId./SegmentId/?uniq Int))) ((lib!tokens.PageId./PageId (lib!tokens.PageId./PageId/?segment_id lib!tokens.SegmentId.) (lib!tokens.PageId./PageId/?idx Int))) ((lib!tokens.PageState./PageState (lib!tokens.PageState./PageState/?offset Int) (lib!tokens.PageState./PageState/?block_size Int) (lib!tokens.PageState./PageState/?num_blocks Int) (lib!tokens.PageState./PageState/?shared_access lib!types.PageSharedAccess.) (lib!tokens.PageState./PageState/?is_enabled Bool))) ((lib!tokens.SegmentState./SegmentState (lib!tokens.SegmentState./SegmentState/?shared_access lib!types.SegmentSharedAccess.) (lib!tokens.SegmentState./SegmentState/?is_enabled Bool))) ((lib!tokens.HeapState./HeapState (lib!tokens.HeapState./HeapState/?shared_access lib!types.HeapSharedAccess.))) ((lib!tokens.ThreadState./ThreadState (lib!tokens.ThreadState./ThreadState/?heap_id lib!tokens.HeapId.) (lib!tokens.ThreadState./ThreadState/?heap lib!tokens.HeapState.) (lib!tokens.ThreadState./ThreadState/?segments vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) (lib!tokens.ThreadState./ThreadState/?pages vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.))) ((lib!tokens.ThreadCheckedState./ThreadCheckedState (lib!tokens.ThreadCheckedState./ThreadCheckedState/?pages vstd!set.Set<lib!tokens.PageId.>.))) ((lib!types.PageInner./PageInner (lib!types.PageInner./PageInner/?flags0 Int) (lib!types.PageInner./PageInner/?capacity Int) (lib!types.PageInner./PageInner/?reserved Int) (lib!types.PageInner./PageInner/?flags1 Int) (lib!types.PageInner./PageInner/?flags2 Int) (lib!types.PageInner./PageInner/?free lib!linked_list.LL.) (lib!types.PageInner./PageInner/?used Int) (lib!types.PageInner./PageInner/?xblock_size Int) (lib!types.PageInner./PageInner/?local_free lib!linked_list.LL.))) ((lib!types.AtomicHeapPtr./AtomicHeapPtr (lib!types.AtomicHeapPtr./AtomicHeapPtr/?atomic vstd!atomic_ghost.AtomicPtr.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?instance lib!tokens.Mim.Instance.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?page_id lib!tokens.PageId.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp lib!types.BoolAgree.x.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp_inst lib!types.BoolAgree.Instance.))) ((lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic./InvariantPredicate_auto_AtomicHeapPtr_atomic )) ((lib!types.Page./Page (lib!types.Page./Page/?count vstd!cell.PCell<u32.>.) (lib!types.Page./Page/?offset Int) (lib!types.Page./Page/?inner vstd!cell.PCell<lib!types.PageInner.>.) (lib!types.Page./Page/?xthread_free lib!linked_list.ThreadLLWithDelayBits.) (lib!types.Page./Page/?xheap lib!types.AtomicHeapPtr.) (lib!types.Page./Page/?prev vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (lib!types.Page./Page/?next vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (lib!types.Page./Page/?padding Int))) ((lib!types.PageSharedAccess./PageSharedAccess (lib!types.PageSharedAccess./PageSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.Page.>.) (lib!types.PageSharedAccess./PageSharedAccess/?exposed vstd!raw_ptr.IsExposed.))) ((lib!types.PageLocalAccess./PageLocalAccess (lib!types.PageLocalAccess./PageLocalAccess/?count vstd!cell.PointsTo<u32.>.) (lib!types.PageLocalAccess./PageLocalAccess/?inner vstd!cell.PointsTo<lib!types.PageInner.>.) (lib!types.PageLocalAccess./PageLocalAccess/?prev vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.) (lib!types.PageLocalAccess./PageLocalAccess/?next vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.))) ((lib!types.PageFullAccess./PageFullAccess (lib!types.PageFullAccess./PageFullAccess/?s lib!types.PageSharedAccess.) (lib!types.PageFullAccess./PageFullAccess/?l lib!types.PageLocalAccess.))) ((lib!types.SegmentKind./Normal ) (lib!types.SegmentKind./Huge )) ((lib!types.SegmentHeaderMain./SegmentHeaderMain (lib!types.SegmentHeaderMain./SegmentHeaderMain/?memid Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_pinned Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_large Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_committed Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_alignment Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_align_offset Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?allow_decommit Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_expire Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_mask lib!commit_mask.CommitMask.) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?commit_mask lib!commit_mask.CommitMask.))) ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2 (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?next ptr_mut%<lib!types.SegmentHeader.>.) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned_visits Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?used Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?cookie Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_slices Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_info_slices Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?kind lib!types.SegmentKind.) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?slice_entries Int))) ((lib!types.SegmentHeader./SegmentHeader (lib!types.SegmentHeader./SegmentHeader/?main vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) (lib!types.SegmentHeader./SegmentHeader/?abandoned_next Int) (lib!types.SegmentHeader./SegmentHeader/?main2 vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) (lib!types.SegmentHeader./SegmentHeader/?thread_id vstd!atomic_ghost.AtomicU64.) (lib!types.SegmentHeader./SegmentHeader/?instance lib!tokens.Mim.Instance.) (lib!types.SegmentHeader./SegmentHeader/?segment_id lib!tokens.SegmentId.))) ((lib!types.InvariantPredicate_auto_SegmentHeader_thread_id./InvariantPredicate_auto_SegmentHeader_thread_id )) ((lib!types.SegmentSharedAccess./SegmentSharedAccess (lib!types.SegmentSharedAccess./SegmentSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.))) ((lib!types.SegmentLocalAccess./SegmentLocalAccess (lib!types.SegmentLocalAccess./SegmentLocalAccess/?mem lib!os_mem.MemChunk.) (lib!types.SegmentLocalAccess./SegmentLocalAccess/?main vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>.) (lib!types.SegmentLocalAccess./SegmentLocalAccess/?main2 vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>.))) ((lib!types.PageQueue./PageQueue (lib!types.PageQueue./PageQueue/?first ptr_mut%<lib!types.Page.>.) (lib!types.PageQueue./PageQueue/?last ptr_mut%<lib!types.Page.>.) (lib!types.PageQueue./PageQueue/?block_size Int))) ((lib!types.Heap./Heap (lib!types.Heap./Heap/?tld_ptr lib!types.TldPtr.) (lib!types.Heap./Heap/?pages_free_direct Poly) (lib!types.Heap./Heap/?pages Poly) (lib!types.Heap./Heap/?thread_delayed_free lib!linked_list.ThreadLLSimple.) (lib!types.Heap./Heap/?thread_id lib!thread.ThreadId.) (lib!types.Heap./Heap/?arena_id Int) (lib!types.Heap./Heap/?page_count vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?page_retired_min vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?page_retired_max vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?no_reclaim Bool) (lib!types.Heap./Heap/?page_empty_ptr ptr_mut%<lib!types.Page.>.))) ((lib!types.HeapSharedAccess./HeapSharedAccess (lib!types.HeapSharedAccess./HeapSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.Heap.>.))) ((lib!types.HeapLocalAccess./HeapLocalAccess (lib!types.HeapLocalAccess./HeapLocalAccess/?pages_free_direct Poly) (lib!types.HeapLocalAccess./HeapLocalAccess/?pages Poly) (lib!types.HeapLocalAccess./HeapLocalAccess/?page_count vstd!cell.PointsTo<usize.>.) (lib!types.HeapLocalAccess./HeapLocalAccess/?page_retired_min vstd!cell.PointsTo<usize.>.) (lib!types.HeapLocalAccess./HeapLocalAccess/?page_retired_max vstd!cell.PointsTo<usize.>.))) ((lib!types.SegmentsTld./SegmentsTld (lib!types.SegmentsTld./SegmentsTld/?span_queue_headers %%Function%%) (lib!types.SegmentsTld./SegmentsTld/?count Int) (lib!types.SegmentsTld./SegmentsTld/?peak_count Int) (lib!types.SegmentsTld./SegmentsTld/?current_size Int) (lib!types.SegmentsTld./SegmentsTld/?peak_size Int))) ((lib!types.SpanQueueHeader./SpanQueueHeader (lib!types.SpanQueueHeader./SpanQueueHeader/?first ptr_mut%<lib!types.Page.>.) (lib!types.SpanQueueHeader./SpanQueueHeader/?last ptr_mut%<lib!types.Page.>.))) ((lib!types.Tld./Tld (lib!types.Tld./Tld/?heap_backing ptr_mut%<lib!types.Heap.>.) (lib!types.Tld./Tld/?segments lib!types.SegmentsTld.))) ((lib!types.Local./Local (lib!types.Local./Local/?thread_id lib!thread.ThreadId.) (lib!types.Local./Local/?my_inst lib!tokens.Mim.my_inst.) (lib!types.Local./Local/?instance lib!tokens.Mim.Instance.) (lib!types.Local./Local/?thread_token lib!tokens.Mim.thread_local_state.) (lib!types.Local./Local/?checked_token lib!tokens.Mim.thread_checked_state.) (lib!types.Local./Local/?is_thread lib!thread.IsThread.) (lib!types.Local./Local/?heap_id lib!tokens.HeapId.) (lib!types.Local./Local/?heap lib!types.HeapLocalAccess.) (lib!types.Local./Local/?tld_id lib!tokens.TldId.) (lib!types.Local./Local/?tld vstd!raw_ptr.PointsTo<lib!types.Tld.>.) (lib!types.Local./Local/?segments vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>.) (lib!types.Local./Local/?pages vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>.) (lib!types.Local./Local/?psa vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.) (lib!types.Local./Local/?unused_pages vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.) (lib!types.Local./Local/?page_organization lib!page_organization.PageOrg.State.) (lib!types.Local./Local/?page_empty_global vstd!shared.Shared<lib!types.PageFullAccess.>.))) ((lib!types.HeapPtr./HeapPtr (lib!types.HeapPtr./HeapPtr/?heap_ptr ptr_mut%<lib!types.Heap.>.) (lib!types.HeapPtr./HeapPtr/?heap_id lib!tokens.HeapId.))) ((lib!types.TldPtr./TldPtr (lib!types.TldPtr./TldPtr/?tld_ptr ptr_mut%<lib!types.Tld.>.) (lib!types.TldPtr./TldPtr/?tld_id lib!tokens.TldId.))) ((lib!types.PagePtr./PagePtr (lib!types.PagePtr./PagePtr/?page_ptr ptr_mut%<lib!types.Page.>.) (lib!types.PagePtr./PagePtr/?page_id lib!tokens.PageId.))) ((lib!page_organization.DlistHeader./DlistHeader (lib!page_organization.DlistHeader./DlistHeader/?first core!option.Option.) (lib!page_organization.DlistHeader./DlistHeader/?last core!option.Option.))) ((lib!page_organization.DlistEntry./DlistEntry (lib!page_organization.DlistEntry./DlistEntry/?prev core!option.Option.) (lib!page_organization.DlistEntry./DlistEntry/?next core!option.Option.))) ((lib!page_organization.PageHeaderKind./Normal (lib!page_organization.PageHeaderKind./Normal/?0 Int) (lib!page_organization.PageHeaderKind./Normal/?1 Int))) ((lib!page_organization.PageData./PageData (lib!page_organization.PageData./PageData/?dlist_entry core!option.Option.) (lib!page_organization.PageData./PageData/?count core!option.Option.) (lib!page_organization.PageData./PageData/?offset core!option.Option.) (lib!page_organization.PageData./PageData/?is_used Bool) (lib!page_organization.PageData./PageData/?full core!option.Option.) (lib!page_organization.PageData./PageData/?page_header_kind core!option.Option.))) ((lib!page_organization.SegmentData./SegmentData (lib!page_organization.SegmentData./SegmentData/?used Int))) ((lib!page_organization.Popped./No ) (lib!page_organization.Popped./Ready (lib!page_organization.Popped./Ready/?0 lib!tokens.PageId.) (lib!page_organization.Popped./Ready/?1 Bool)) (lib!page_organization.Popped./Used (lib!page_organization.Popped./Used/?0 lib!tokens.PageId.) (lib!page_organization.Popped./Used/?1 Bool)) (lib!page_organization.Popped./SegmentCreating (lib!page_organization.Popped./SegmentCreating/?0 lib!tokens.SegmentId.)) (lib!page_organization.Popped./VeryUnready (lib!page_organization.Popped./VeryUnready/?0 lib!tokens.SegmentId.) (lib!page_organization.Popped./VeryUnready/?1 Int) (lib!page_organization.Popped./VeryUnready/?2 Int) (lib!page_organization.Popped./VeryUnready/?3 Bool)) (lib!page_organization.Popped./SegmentFreeing (lib!page_organization.Popped./SegmentFreeing/?0 lib!tokens.SegmentId.) (lib!page_organization.Popped./SegmentFreeing/?1 Int)) (lib!page_organization.Popped./ExtraCount (lib!page_organization.Popped./ExtraCount/?0 lib!tokens.SegmentId.))) ((lib!linked_list.Node./Node (lib!linked_list.Node./Node/?ptr ptr_mut%<lib!linked_list.Node.>.))) ((lib!linked_list.ThreadLLSimple./ThreadLLSimple (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?instance lib!tokens.Mim.Instance.) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?heap_id lib!tokens.HeapId.) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?atomic vstd!atomic_ghost.AtomicPtr.))) ((lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic./InvariantPredicate_auto_ThreadLLSimple_atomic )) ((lib!linked_list.BlockSizePageId./BlockSizePageId (lib!linked_list.BlockSizePageId./BlockSizePageId/?block_size Int) (lib!linked_list.BlockSizePageId./BlockSizePageId/?page_id lib!tokens.PageId.))) ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?instance lib!tokens.Mim.Instance.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?atomic vstd!atomic_ghost.AtomicPtr.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp lib!linked_list.StuffAgree.x.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp_inst lib!linked_list.StuffAgree.Instance.))) ((lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic./InvariantPredicate_auto_ThreadLLWithDelayBits_atomic )) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun vstd!cell.PointsToData./PointsToData/pcell (vstd!cell.PointsToData.) vstd!cell.CellId.)
(declare-fun vstd!cell.PointsToData./PointsToData/value (vstd!cell.PointsToData.) core!option.Option.)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun vstd!raw_ptr.PointsToData./PointsToData/ptr (vstd!raw_ptr.PointsToData.) Poly)
(declare-fun vstd!raw_ptr.PointsToData./PointsToData/opt_value (vstd!raw_ptr.PointsToData.) vstd!raw_ptr.MemContents.)
(declare-fun lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance (lib!tokens.Mim.my_inst_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value (lib!tokens.Mim.my_inst_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (lib!tokens.Mim.thread_local_state_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (lib!tokens.Mim.thread_local_state_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (lib!tokens.Mim.thread_local_state_token_data.) lib!tokens.ThreadState.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (lib!tokens.Mim.thread_checked_state_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (lib!tokens.Mim.thread_checked_state_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (lib!tokens.Mim.thread_checked_state_token_data.) lib!tokens.ThreadCheckedState.)
(declare-fun lib!types.BoolAgree.x_token_data./x_token_data/instance (lib!types.BoolAgree.x_token_data.) lib!types.BoolAgree.Instance.)
(declare-fun lib!types.BoolAgree.x_token_data./x_token_data/value (lib!types.BoolAgree.x_token_data.) Bool)
(declare-fun lib!page_organization.PageOrg.State./State/unused_dlist_headers (lib!page_organization.PageOrg.State.) vstd!seq.Seq<lib!page_organization.DlistHeader.>.)
(declare-fun lib!page_organization.PageOrg.State./State/used_dlist_headers (lib!page_organization.PageOrg.State.) vstd!seq.Seq<lib!page_organization.DlistHeader.>.)
(declare-fun lib!page_organization.PageOrg.State./State/pages (lib!page_organization.PageOrg.State.) vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.)
(declare-fun lib!page_organization.PageOrg.State./State/segments (lib!page_organization.PageOrg.State.) vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.)
(declare-fun lib!page_organization.PageOrg.State./State/popped (lib!page_organization.PageOrg.State.) lib!page_organization.Popped.)
(declare-fun lib!page_organization.PageOrg.State./State/unused_lists (lib!page_organization.PageOrg.State.) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(declare-fun lib!page_organization.PageOrg.State./State/used_lists (lib!page_organization.PageOrg.State.) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(declare-fun lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (lib!linked_list.StuffAgree.x_token_data.) lib!linked_list.StuffAgree.Instance.)
(declare-fun lib!linked_list.StuffAgree.x_token_data./x_token_data/value (lib!linked_list.StuffAgree.x_token_data.) core!option.Option.)
(declare-fun lib!os_mem.MemProtect./MemProtect/read (lib!os_mem.MemProtect.) Bool)
(declare-fun lib!os_mem.MemProtect./MemProtect/write (lib!os_mem.MemProtect.) Bool)
(declare-fun lib!os_mem.OsMemData./OsMemData/byte_addr (lib!os_mem.OsMemData.) Int)
(declare-fun lib!os_mem.OsMemData./OsMemData/mem_protect (lib!os_mem.OsMemData.) lib!os_mem.MemProtect.)
(declare-fun lib!os_mem.MemChunk./MemChunk/os (lib!os_mem.MemChunk.) vstd!map.Map<int./lib!os_mem.OsMem.>.)
(declare-fun lib!os_mem.MemChunk./MemChunk/points_to (lib!os_mem.MemChunk.) vstd!raw_ptr.PointsToRaw.)
(declare-fun lib!thread.ThreadId./ThreadId/thread_id (lib!thread.ThreadId.) Int)
(declare-fun lib!tokens.HeapId./HeapId/id (lib!tokens.HeapId.) Int)
(declare-fun lib!tokens.HeapId./HeapId/provenance (lib!tokens.HeapId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.HeapId./HeapId/uniq (lib!tokens.HeapId.) Int)
(declare-fun lib!tokens.TldId./TldId/id (lib!tokens.TldId.) Int)
(declare-fun lib!tokens.TldId./TldId/provenance (lib!tokens.TldId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/id (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.SegmentId./SegmentId/provenance (lib!tokens.SegmentId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/uniq (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.PageId./PageId/segment_id (lib!tokens.PageId.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.PageId./PageId/idx (lib!tokens.PageId.) Int)
(declare-fun lib!tokens.PageState./PageState/offset (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/block_size (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/num_blocks (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/shared_access (lib!tokens.PageState.) lib!types.PageSharedAccess.)
(declare-fun lib!tokens.PageState./PageState/is_enabled (lib!tokens.PageState.) Bool)
(declare-fun lib!tokens.SegmentState./SegmentState/shared_access (lib!tokens.SegmentState.) lib!types.SegmentSharedAccess.)
(declare-fun lib!tokens.SegmentState./SegmentState/is_enabled (lib!tokens.SegmentState.) Bool)
(declare-fun lib!tokens.HeapState./HeapState/shared_access (lib!tokens.HeapState.) lib!types.HeapSharedAccess.)
(declare-fun lib!tokens.ThreadState./ThreadState/heap_id (lib!tokens.ThreadState.) lib!tokens.HeapId.)
(declare-fun lib!tokens.ThreadState./ThreadState/heap (lib!tokens.ThreadState.) lib!tokens.HeapState.)
(declare-fun lib!tokens.ThreadState./ThreadState/segments (lib!tokens.ThreadState.) vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)
(declare-fun lib!tokens.ThreadState./ThreadState/pages (lib!tokens.ThreadState.) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(declare-fun lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (lib!tokens.ThreadCheckedState.) vstd!set.Set<lib!tokens.PageId.>.)
(declare-fun lib!types.PageInner./PageInner/flags0 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/capacity (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/reserved (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags1 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags2 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.PageInner./PageInner/used (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/xblock_size (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/local_free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (lib!types.AtomicHeapPtr.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/instance (lib!types.AtomicHeapPtr.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (lib!types.AtomicHeapPtr.) lib!tokens.PageId.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/emp (lib!types.AtomicHeapPtr.) lib!types.BoolAgree.x.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst (lib!types.AtomicHeapPtr.) lib!types.BoolAgree.Instance.)
(declare-fun lib!types.Page./Page/count (lib!types.Page.) vstd!cell.PCell<u32.>.)
(declare-fun lib!types.Page./Page/offset (lib!types.Page.) Int)
(declare-fun lib!types.Page./Page/inner (lib!types.Page.) vstd!cell.PCell<lib!types.PageInner.>.)
(declare-fun lib!types.Page./Page/xthread_free (lib!types.Page.) lib!linked_list.ThreadLLWithDelayBits.)
(declare-fun lib!types.Page./Page/xheap (lib!types.Page.) lib!types.AtomicHeapPtr.)
(declare-fun lib!types.Page./Page/prev (lib!types.Page.) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.Page./Page/next (lib!types.Page.) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.Page./Page/padding (lib!types.Page.) Int)
(declare-fun lib!types.PageSharedAccess./PageSharedAccess/points_to (lib!types.PageSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-fun lib!types.PageSharedAccess./PageSharedAccess/exposed (lib!types.PageSharedAccess.) vstd!raw_ptr.IsExposed.)
(declare-fun lib!types.PageLocalAccess./PageLocalAccess/count (lib!types.PageLocalAccess.) vstd!cell.PointsTo<u32.>.)
(declare-fun lib!types.PageLocalAccess./PageLocalAccess/inner (lib!types.PageLocalAccess.) vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-fun lib!types.PageLocalAccess./PageLocalAccess/prev (lib!types.PageLocalAccess.) vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.PageLocalAccess./PageLocalAccess/next (lib!types.PageLocalAccess.) vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.PageFullAccess./PageFullAccess/s (lib!types.PageFullAccess.) lib!types.PageSharedAccess.)
(declare-fun lib!types.PageFullAccess./PageFullAccess/l (lib!types.PageFullAccess.) lib!types.PageLocalAccess.)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask (lib!types.SegmentHeaderMain.) lib!commit_mask.CommitMask.)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask (lib!types.SegmentHeaderMain.) lib!commit_mask.CommitMask.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next (lib!types.SegmentHeaderMain2.) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind (lib!types.SegmentHeaderMain2.) lib!types.SegmentKind.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeader./SegmentHeader/main (lib!types.SegmentHeader.) vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/abandoned_next (lib!types.SegmentHeader.) Int)
(declare-fun lib!types.SegmentHeader./SegmentHeader/main2 (lib!types.SegmentHeader.) vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/thread_id (lib!types.SegmentHeader.) vstd!atomic_ghost.AtomicU64.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/instance (lib!types.SegmentHeader.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/segment_id (lib!types.SegmentHeader.) lib!tokens.SegmentId.)
(declare-fun lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to (lib!types.SegmentSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)
(declare-fun lib!types.SegmentLocalAccess./SegmentLocalAccess/mem (lib!types.SegmentLocalAccess.) lib!os_mem.MemChunk.)
(declare-fun lib!types.SegmentLocalAccess./SegmentLocalAccess/main (lib!types.SegmentLocalAccess.) vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>.)
(declare-fun lib!types.SegmentLocalAccess./SegmentLocalAccess/main2 (lib!types.SegmentLocalAccess.) vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>.)
(declare-fun lib!types.PageQueue./PageQueue/first (lib!types.PageQueue.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PageQueue./PageQueue/last (lib!types.PageQueue.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PageQueue./PageQueue/block_size (lib!types.PageQueue.) Int)
(declare-fun lib!types.Heap./Heap/tld_ptr (lib!types.Heap.) lib!types.TldPtr.)
(declare-fun lib!types.Heap./Heap/pages_free_direct (lib!types.Heap.) Poly)
(declare-fun lib!types.Heap./Heap/pages (lib!types.Heap.) Poly)
(declare-fun lib!types.Heap./Heap/thread_delayed_free (lib!types.Heap.) lib!linked_list.ThreadLLSimple.)
(declare-fun lib!types.Heap./Heap/thread_id (lib!types.Heap.) lib!thread.ThreadId.)
(declare-fun lib!types.Heap./Heap/arena_id (lib!types.Heap.) Int)
(declare-fun lib!types.Heap./Heap/page_count (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/page_retired_min (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/page_retired_max (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/no_reclaim (lib!types.Heap.) Bool)
(declare-fun lib!types.Heap./Heap/page_empty_ptr (lib!types.Heap.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.HeapSharedAccess./HeapSharedAccess/points_to (lib!types.HeapSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-fun lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (lib!types.HeapLocalAccess.) Poly)
(declare-fun lib!types.HeapLocalAccess./HeapLocalAccess/pages (lib!types.HeapLocalAccess.) Poly)
(declare-fun lib!types.HeapLocalAccess./HeapLocalAccess/page_count (lib!types.HeapLocalAccess.) vstd!cell.PointsTo<usize.>.)
(declare-fun lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (lib!types.HeapLocalAccess.) vstd!cell.PointsTo<usize.>.)
(declare-fun lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (lib!types.HeapLocalAccess.) vstd!cell.PointsTo<usize.>.)
(declare-fun lib!types.SegmentsTld./SegmentsTld/span_queue_headers (lib!types.SegmentsTld.) %%Function%%)
(declare-fun lib!types.SegmentsTld./SegmentsTld/count (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/peak_count (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/current_size (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/peak_size (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SpanQueueHeader./SpanQueueHeader/first (lib!types.SpanQueueHeader.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.SpanQueueHeader./SpanQueueHeader/last (lib!types.SpanQueueHeader.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.Tld./Tld/heap_backing (lib!types.Tld.) ptr_mut%<lib!types.Heap.>.)
(declare-fun lib!types.Tld./Tld/segments (lib!types.Tld.) lib!types.SegmentsTld.)
(declare-fun lib!types.Local./Local/thread_id (lib!types.Local.) lib!thread.ThreadId.)
(declare-fun lib!types.Local./Local/my_inst (lib!types.Local.) lib!tokens.Mim.my_inst.)
(declare-fun lib!types.Local./Local/instance (lib!types.Local.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.Local./Local/thread_token (lib!types.Local.) lib!tokens.Mim.thread_local_state.)
(declare-fun lib!types.Local./Local/checked_token (lib!types.Local.) lib!tokens.Mim.thread_checked_state.)
(declare-fun lib!types.Local./Local/is_thread (lib!types.Local.) lib!thread.IsThread.)
(declare-fun lib!types.Local./Local/heap_id (lib!types.Local.) lib!tokens.HeapId.)
(declare-fun lib!types.Local./Local/heap (lib!types.Local.) lib!types.HeapLocalAccess.)
(declare-fun lib!types.Local./Local/tld_id (lib!types.Local.) lib!tokens.TldId.)
(declare-fun lib!types.Local./Local/tld (lib!types.Local.) vstd!raw_ptr.PointsTo<lib!types.Tld.>.)
(declare-fun lib!types.Local./Local/segments (lib!types.Local.) vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>.)
(declare-fun lib!types.Local./Local/pages (lib!types.Local.) vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>.)
(declare-fun lib!types.Local./Local/psa (lib!types.Local.) vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)
(declare-fun lib!types.Local./Local/unused_pages (lib!types.Local.) vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)
(declare-fun lib!types.Local./Local/page_organization (lib!types.Local.) lib!page_organization.PageOrg.State.)
(declare-fun lib!types.Local./Local/page_empty_global (lib!types.Local.) vstd!shared.Shared<lib!types.PageFullAccess.>.)
(declare-fun lib!types.HeapPtr./HeapPtr/heap_ptr (lib!types.HeapPtr.) ptr_mut%<lib!types.Heap.>.)
(declare-fun lib!types.HeapPtr./HeapPtr/heap_id (lib!types.HeapPtr.) lib!tokens.HeapId.)
(declare-fun lib!types.TldPtr./TldPtr/tld_ptr (lib!types.TldPtr.) ptr_mut%<lib!types.Tld.>.)
(declare-fun lib!types.TldPtr./TldPtr/tld_id (lib!types.TldPtr.) lib!tokens.TldId.)
(declare-fun lib!types.PagePtr./PagePtr/page_ptr (lib!types.PagePtr.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PagePtr./PagePtr/page_id (lib!types.PagePtr.) lib!tokens.PageId.)
(declare-fun lib!page_organization.DlistHeader./DlistHeader/first (lib!page_organization.DlistHeader.) core!option.Option.)
(declare-fun lib!page_organization.DlistHeader./DlistHeader/last (lib!page_organization.DlistHeader.) core!option.Option.)
(declare-fun lib!page_organization.DlistEntry./DlistEntry/prev (lib!page_organization.DlistEntry.) core!option.Option.)
(declare-fun lib!page_organization.DlistEntry./DlistEntry/next (lib!page_organization.DlistEntry.) core!option.Option.)
(declare-fun lib!page_organization.PageHeaderKind./Normal/0 (lib!page_organization.PageHeaderKind.) Int)
(declare-fun lib!page_organization.PageHeaderKind./Normal/1 (lib!page_organization.PageHeaderKind.) Int)
(declare-fun lib!page_organization.PageData./PageData/dlist_entry (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.PageData./PageData/count (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.PageData./PageData/offset (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.PageData./PageData/is_used (lib!page_organization.PageData.) Bool)
(declare-fun lib!page_organization.PageData./PageData/full (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.PageData./PageData/page_header_kind (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.SegmentData./SegmentData/used (lib!page_organization.SegmentData.) Int)
(declare-fun lib!page_organization.Popped./Ready/0 (lib!page_organization.Popped.) lib!tokens.PageId.)
(declare-fun lib!page_organization.Popped./Ready/1 (lib!page_organization.Popped.) Bool)
(declare-fun lib!page_organization.Popped./Used/0 (lib!page_organization.Popped.) lib!tokens.PageId.)
(declare-fun lib!page_organization.Popped./Used/1 (lib!page_organization.Popped.) Bool)
(declare-fun lib!page_organization.Popped./SegmentCreating/0 (lib!page_organization.Popped.) lib!tokens.SegmentId.)
(declare-fun lib!page_organization.Popped./VeryUnready/0 (lib!page_organization.Popped.) lib!tokens.SegmentId.)
(declare-fun lib!page_organization.Popped./VeryUnready/1 (lib!page_organization.Popped.) Int)
(declare-fun lib!page_organization.Popped./VeryUnready/2 (lib!page_organization.Popped.) Int)
(declare-fun lib!page_organization.Popped./VeryUnready/3 (lib!page_organization.Popped.) Bool)
(declare-fun lib!page_organization.Popped./SegmentFreeing/0 (lib!page_organization.Popped.) lib!tokens.SegmentId.)
(declare-fun lib!page_organization.Popped./SegmentFreeing/1 (lib!page_organization.Popped.) Int)
(declare-fun lib!page_organization.Popped./ExtraCount/0 (lib!page_organization.Popped.) lib!tokens.SegmentId.)
(declare-fun lib!linked_list.Node./Node/ptr (lib!linked_list.Node.) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (lib!linked_list.ThreadLLSimple.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (lib!linked_list.ThreadLLSimple.) lib!tokens.HeapId.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (lib!linked_list.ThreadLLSimple.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (lib!linked_list.BlockSizePageId.) Int)
(declare-fun lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (lib!linked_list.BlockSizePageId.) lib!tokens.PageId.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (lib!linked_list.ThreadLLWithDelayBits.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (lib!linked_list.ThreadLLWithDelayBits.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (lib!linked_list.ThreadLLWithDelayBits.) lib!linked_list.StuffAgree.x.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst (lib!linked_list.ThreadLLWithDelayBits.) lib!linked_list.StuffAgree.Instance.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-fun TYPE%vstd!atomic.PAtomicPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic.PermissionPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredPtr. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPtr. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!cell.CellId. Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!raw_ptr.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.IsExposed. Type)
(declare-const TYPE%vstd!raw_ptr.PointsToRaw. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!shared.Shared. (Dcr Type) Type)
(declare-const TYPE%lib!tokens.Mim.Instance. Type)
(declare-const TYPE%lib!tokens.Mim.my_inst. Type)
(declare-const TYPE%lib!tokens.Mim.my_inst_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.thread_local_state. Type)
(declare-const TYPE%lib!tokens.Mim.thread_local_state_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.thread_of_segment. Type)
(declare-const TYPE%lib!tokens.Mim.delay. Type)
(declare-const TYPE%lib!tokens.Mim.heap_of_page. Type)
(declare-const TYPE%lib!tokens.Mim.thread_checked_state. Type)
(declare-const TYPE%lib!tokens.Mim.thread_checked_state_token_data. Type)
(declare-const TYPE%lib!types.BoolAgree.Instance. Type)
(declare-const TYPE%lib!types.BoolAgree.x. Type)
(declare-const TYPE%lib!types.BoolAgree.x_token_data. Type)
(declare-const TYPE%lib!types.BoolAgree.y. Type)
(declare-const TYPE%lib!page_organization.PageOrg.State. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.Instance. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.x. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.x_token_data. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.y. Type)
(declare-const TYPE%lib!os_mem.OsMem. Type)
(declare-const TYPE%lib!os_mem.MemProtect. Type)
(declare-const TYPE%lib!os_mem.OsMemData. Type)
(declare-const TYPE%lib!os_mem.MemChunk. Type)
(declare-const TYPE%lib!thread.ThreadId. Type)
(declare-const TYPE%lib!thread.IsThread. Type)
(declare-const TYPE%lib!tokens.HeapId. Type)
(declare-const TYPE%lib!tokens.TldId. Type)
(declare-const TYPE%lib!tokens.SegmentId. Type)
(declare-const TYPE%lib!tokens.PageId. Type)
(declare-const TYPE%lib!tokens.PageState. Type)
(declare-const TYPE%lib!tokens.SegmentState. Type)
(declare-const TYPE%lib!tokens.HeapState. Type)
(declare-const TYPE%lib!tokens.ThreadState. Type)
(declare-const TYPE%lib!tokens.ThreadCheckedState. Type)
(declare-const TYPE%lib!types.PageInner. Type)
(declare-const TYPE%lib!types.AtomicHeapPtr. Type)
(declare-const TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. Type)
(declare-const TYPE%lib!types.Page. Type)
(declare-const TYPE%lib!types.PageSharedAccess. Type)
(declare-const TYPE%lib!types.PageLocalAccess. Type)
(declare-const TYPE%lib!types.PageFullAccess. Type)
(declare-const TYPE%lib!types.SegmentKind. Type)
(declare-const TYPE%lib!types.SegmentHeaderMain. Type)
(declare-const TYPE%lib!types.SegmentHeaderMain2. Type)
(declare-const TYPE%lib!types.SegmentHeader. Type)
(declare-const TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. Type)
(declare-const TYPE%lib!types.SegmentSharedAccess. Type)
(declare-const TYPE%lib!types.SegmentLocalAccess. Type)
(declare-const TYPE%lib!types.PageQueue. Type)
(declare-const TYPE%lib!types.Heap. Type)
(declare-const TYPE%lib!types.HeapSharedAccess. Type)
(declare-const TYPE%lib!types.HeapLocalAccess. Type)
(declare-const TYPE%lib!types.SegmentsTld. Type)
(declare-const TYPE%lib!types.SpanQueueHeader. Type)
(declare-const TYPE%lib!types.Tld. Type)
(declare-const TYPE%lib!types.Local. Type)
(declare-const TYPE%lib!types.HeapPtr. Type)
(declare-const TYPE%lib!types.TldPtr. Type)
(declare-const TYPE%lib!types.PagePtr. Type)
(declare-const TYPE%lib!page_organization.DlistHeader. Type)
(declare-const TYPE%lib!page_organization.DlistEntry. Type)
(declare-const TYPE%lib!page_organization.PageHeaderKind. Type)
(declare-const TYPE%lib!page_organization.PageData. Type)
(declare-const TYPE%lib!page_organization.SegmentData. Type)
(declare-const TYPE%lib!page_organization.Popped. Type)
(declare-const TYPE%lib!linked_list.Node. Type)
(declare-const TYPE%lib!linked_list.LL. Type)
(declare-const TYPE%lib!linked_list.ThreadLLSimple. Type)
(declare-const TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. Type)
(declare-const TYPE%lib!linked_list.BlockSizePageId. Type)
(declare-const TYPE%lib!linked_list.ThreadLLWithDelayBits. Type)
(declare-const TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. Type)
(declare-const TYPE%lib!commit_mask.CommitMask. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!commit_mask.CommitMask. (lib!commit_mask.CommitMask.) Poly)
(declare-fun %Poly%lib!commit_mask.CommitMask. (Poly) lib!commit_mask.CommitMask.)
(declare-fun Poly%lib!linked_list.LL. (lib!linked_list.LL.) Poly)
(declare-fun %Poly%lib!linked_list.LL. (Poly) lib!linked_list.LL.)
(declare-fun Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.Instance.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.Instance. (Poly) lib!linked_list.StuffAgree.Instance.)
(declare-fun Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.StuffAgree.x.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.x. (Poly) lib!linked_list.StuffAgree.x.)
(declare-fun Poly%lib!linked_list.StuffAgree.y. (lib!linked_list.StuffAgree.y.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.y. (Poly) lib!linked_list.StuffAgree.y.)
(declare-fun Poly%lib!os_mem.OsMem. (lib!os_mem.OsMem.) Poly)
(declare-fun %Poly%lib!os_mem.OsMem. (Poly) lib!os_mem.OsMem.)
(declare-fun Poly%lib!thread.IsThread. (lib!thread.IsThread.) Poly)
(declare-fun %Poly%lib!thread.IsThread. (Poly) lib!thread.IsThread.)
(declare-fun Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.Instance.) Poly)
(declare-fun %Poly%lib!tokens.Mim.Instance. (Poly) lib!tokens.Mim.Instance.)
(declare-fun Poly%lib!tokens.Mim.delay. (lib!tokens.Mim.delay.) Poly)
(declare-fun %Poly%lib!tokens.Mim.delay. (Poly) lib!tokens.Mim.delay.)
(declare-fun Poly%lib!tokens.Mim.heap_of_page. (lib!tokens.Mim.heap_of_page.) Poly)
(declare-fun %Poly%lib!tokens.Mim.heap_of_page. (Poly) lib!tokens.Mim.heap_of_page.)
(declare-fun Poly%lib!tokens.Mim.my_inst. (lib!tokens.Mim.my_inst.) Poly)
(declare-fun %Poly%lib!tokens.Mim.my_inst. (Poly) lib!tokens.Mim.my_inst.)
(declare-fun Poly%lib!tokens.Mim.thread_checked_state. (lib!tokens.Mim.thread_checked_state.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_checked_state. (Poly) lib!tokens.Mim.thread_checked_state.)
(declare-fun Poly%lib!tokens.Mim.thread_local_state. (lib!tokens.Mim.thread_local_state.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_local_state. (Poly) lib!tokens.Mim.thread_local_state.)
(declare-fun Poly%lib!tokens.Mim.thread_of_segment. (lib!tokens.Mim.thread_of_segment.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_of_segment. (Poly) lib!tokens.Mim.thread_of_segment.)
(declare-fun Poly%lib!types.BoolAgree.Instance. (lib!types.BoolAgree.Instance.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.Instance. (Poly) lib!types.BoolAgree.Instance.)
(declare-fun Poly%lib!types.BoolAgree.x. (lib!types.BoolAgree.x.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.x. (Poly) lib!types.BoolAgree.x.)
(declare-fun Poly%lib!types.BoolAgree.y. (lib!types.BoolAgree.y.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.y. (Poly) lib!types.BoolAgree.y.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!cell.CellId. (vstd!cell.CellId.) Poly)
(declare-fun %Poly%vstd!cell.CellId. (Poly) vstd!cell.CellId.)
(declare-fun Poly%vstd!cell.PCell<u32.>. (vstd!cell.PCell<u32.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<u32.>. (Poly) vstd!cell.PCell<u32.>.)
(declare-fun Poly%vstd!cell.PCell<usize.>. (vstd!cell.PCell<usize.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<usize.>. (Poly) vstd!cell.PCell<usize.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.PageInner.>. (vstd!cell.PCell<lib!types.PageInner.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.PageInner.>. (Poly) vstd!cell.PCell<lib!types.PageInner.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (Poly) vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (Poly) vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)
(declare-fun Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (Poly) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun Poly%vstd!cell.PointsTo<u32.>. (vstd!cell.PointsTo<u32.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<u32.>. (Poly) vstd!cell.PointsTo<u32.>.)
(declare-fun Poly%vstd!cell.PointsTo<usize.>. (vstd!cell.PointsTo<usize.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<usize.>. (Poly) vstd!cell.PointsTo<usize.>.)
(declare-fun Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (vstd!cell.PointsTo<lib!types.PageInner.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (Poly) vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-fun Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. (vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. (Poly) vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>.)
(declare-fun Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. (vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. (Poly) vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>.)
(declare-fun Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly) vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-fun Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (vstd!map.Map<int./lib!os_mem.OsMem.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (Poly) vstd!map.Map<int./lib!os_mem.OsMem.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.IsExposed. (vstd!raw_ptr.IsExposed.) Poly)
(declare-fun %Poly%vstd!raw_ptr.IsExposed. (Poly) vstd!raw_ptr.IsExposed.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (vstd!raw_ptr.PointsTo<lib!types.Heap.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (vstd!raw_ptr.PointsTo<lib!types.Page.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (vstd!raw_ptr.PointsTo<lib!types.Tld.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.Tld.>.)
(declare-fun Poly%vstd!raw_ptr.PointsToRaw. (vstd!raw_ptr.PointsToRaw.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsToRaw. (Poly) vstd!raw_ptr.PointsToRaw.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq<lib!page_organization.DlistHeader.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (Poly) vstd!seq.Seq<lib!page_organization.DlistHeader.>.)
(declare-fun Poly%vstd!seq.Seq<lib!tokens.PageId.>. (vstd!seq.Seq<lib!tokens.PageId.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!tokens.PageId.>. (Poly) vstd!seq.Seq<lib!tokens.PageId.>.)
(declare-fun Poly%vstd!seq.Seq<lib!types.PageQueue.>. (vstd!seq.Seq<lib!types.PageQueue.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!types.PageQueue.>. (Poly) vstd!seq.Seq<lib!types.PageQueue.>.)
(declare-fun Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. (vstd!seq.Seq<lib!types.SpanQueueHeader.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. (Poly) vstd!seq.Seq<lib!types.SpanQueueHeader.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (Poly) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(declare-fun Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. (vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. (Poly) vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.Set<lib!tokens.PageId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.PageId.>. (Poly) vstd!set.Set<lib!tokens.PageId.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.SegmentId.>. (vstd!set.Set<lib!tokens.SegmentId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.SegmentId.>. (Poly) vstd!set.Set<lib!tokens.SegmentId.>.)
(declare-fun Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (vstd!shared.Shared<lib!types.PageFullAccess.>.) Poly)
(declare-fun %Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (Poly) vstd!shared.Shared<lib!types.PageFullAccess.>.)
(declare-fun Poly%ptr_mut%<lib!linked_list.Node.>. (ptr_mut%<lib!linked_list.Node.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!linked_list.Node.>. (Poly) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun Poly%ptr_mut%<lib!types.Heap.>. (ptr_mut%<lib!types.Heap.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Heap.>. (Poly) ptr_mut%<lib!types.Heap.>.)
(declare-fun Poly%ptr_mut%<lib!types.Page.>. (ptr_mut%<lib!types.Page.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Page.>. (Poly) ptr_mut%<lib!types.Page.>.)
(declare-fun Poly%ptr_mut%<lib!types.SegmentHeader.>. (ptr_mut%<lib!types.SegmentHeader.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.SegmentHeader.>. (Poly) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun Poly%ptr_mut%<lib!types.Tld.>. (ptr_mut%<lib!types.Tld.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Tld.>. (Poly) ptr_mut%<lib!types.Tld.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPtr. (Poly) vstd!atomic_ghost.AtomicPtr.)
(declare-fun Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData.) Poly)
(declare-fun %Poly%vstd!cell.PointsToData. (Poly) vstd!cell.PointsToData.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsToData. (Poly) vstd!raw_ptr.PointsToData.)
(declare-fun Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.my_inst_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.my_inst_token_data. (Poly) lib!tokens.Mim.my_inst_token_data.)
(declare-fun Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly) lib!tokens.Mim.thread_local_state_token_data.)
(declare-fun Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly) lib!tokens.Mim.thread_checked_state_token_data.)
(declare-fun Poly%lib!types.BoolAgree.x_token_data. (lib!types.BoolAgree.x_token_data.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.x_token_data. (Poly) lib!types.BoolAgree.x_token_data.)
(declare-fun Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.State.) Poly)
(declare-fun %Poly%lib!page_organization.PageOrg.State. (Poly) lib!page_organization.PageOrg.State.)
(declare-fun Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.x_token_data. (Poly) lib!linked_list.StuffAgree.x_token_data.)
(declare-fun Poly%lib!os_mem.MemProtect. (lib!os_mem.MemProtect.) Poly)
(declare-fun %Poly%lib!os_mem.MemProtect. (Poly) lib!os_mem.MemProtect.)
(declare-fun Poly%lib!os_mem.OsMemData. (lib!os_mem.OsMemData.) Poly)
(declare-fun %Poly%lib!os_mem.OsMemData. (Poly) lib!os_mem.OsMemData.)
(declare-fun Poly%lib!os_mem.MemChunk. (lib!os_mem.MemChunk.) Poly)
(declare-fun %Poly%lib!os_mem.MemChunk. (Poly) lib!os_mem.MemChunk.)
(declare-fun Poly%lib!thread.ThreadId. (lib!thread.ThreadId.) Poly)
(declare-fun %Poly%lib!thread.ThreadId. (Poly) lib!thread.ThreadId.)
(declare-fun Poly%lib!tokens.HeapId. (lib!tokens.HeapId.) Poly)
(declare-fun %Poly%lib!tokens.HeapId. (Poly) lib!tokens.HeapId.)
(declare-fun Poly%lib!tokens.TldId. (lib!tokens.TldId.) Poly)
(declare-fun %Poly%lib!tokens.TldId. (Poly) lib!tokens.TldId.)
(declare-fun Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId.) Poly)
(declare-fun %Poly%lib!tokens.SegmentId. (Poly) lib!tokens.SegmentId.)
(declare-fun Poly%lib!tokens.PageId. (lib!tokens.PageId.) Poly)
(declare-fun %Poly%lib!tokens.PageId. (Poly) lib!tokens.PageId.)
(declare-fun Poly%lib!tokens.PageState. (lib!tokens.PageState.) Poly)
(declare-fun %Poly%lib!tokens.PageState. (Poly) lib!tokens.PageState.)
(declare-fun Poly%lib!tokens.SegmentState. (lib!tokens.SegmentState.) Poly)
(declare-fun %Poly%lib!tokens.SegmentState. (Poly) lib!tokens.SegmentState.)
(declare-fun Poly%lib!tokens.HeapState. (lib!tokens.HeapState.) Poly)
(declare-fun %Poly%lib!tokens.HeapState. (Poly) lib!tokens.HeapState.)
(declare-fun Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState.) Poly)
(declare-fun %Poly%lib!tokens.ThreadState. (Poly) lib!tokens.ThreadState.)
(declare-fun Poly%lib!tokens.ThreadCheckedState. (lib!tokens.ThreadCheckedState.) Poly)
(declare-fun %Poly%lib!tokens.ThreadCheckedState. (Poly) lib!tokens.ThreadCheckedState.)
(declare-fun Poly%lib!types.PageInner. (lib!types.PageInner.) Poly)
(declare-fun %Poly%lib!types.PageInner. (Poly) lib!types.PageInner.)
(declare-fun Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr.) Poly)
(declare-fun %Poly%lib!types.AtomicHeapPtr. (Poly) lib!types.AtomicHeapPtr.)
(declare-fun Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) Poly)
(declare-fun %Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly) lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)
(declare-fun Poly%lib!types.Page. (lib!types.Page.) Poly)
(declare-fun %Poly%lib!types.Page. (Poly) lib!types.Page.)
(declare-fun Poly%lib!types.PageSharedAccess. (lib!types.PageSharedAccess.) Poly)
(declare-fun %Poly%lib!types.PageSharedAccess. (Poly) lib!types.PageSharedAccess.)
(declare-fun Poly%lib!types.PageLocalAccess. (lib!types.PageLocalAccess.) Poly)
(declare-fun %Poly%lib!types.PageLocalAccess. (Poly) lib!types.PageLocalAccess.)
(declare-fun Poly%lib!types.PageFullAccess. (lib!types.PageFullAccess.) Poly)
(declare-fun %Poly%lib!types.PageFullAccess. (Poly) lib!types.PageFullAccess.)
(declare-fun Poly%lib!types.SegmentKind. (lib!types.SegmentKind.) Poly)
(declare-fun %Poly%lib!types.SegmentKind. (Poly) lib!types.SegmentKind.)
(declare-fun Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain.) Poly)
(declare-fun %Poly%lib!types.SegmentHeaderMain. (Poly) lib!types.SegmentHeaderMain.)
(declare-fun Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2.) Poly)
(declare-fun %Poly%lib!types.SegmentHeaderMain2. (Poly) lib!types.SegmentHeaderMain2.)
(declare-fun Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader.) Poly)
(declare-fun %Poly%lib!types.SegmentHeader. (Poly) lib!types.SegmentHeader.)
(declare-fun Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) Poly)
(declare-fun %Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly) lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)
(declare-fun Poly%lib!types.SegmentSharedAccess. (lib!types.SegmentSharedAccess.) Poly)
(declare-fun %Poly%lib!types.SegmentSharedAccess. (Poly) lib!types.SegmentSharedAccess.)
(declare-fun Poly%lib!types.SegmentLocalAccess. (lib!types.SegmentLocalAccess.) Poly)
(declare-fun %Poly%lib!types.SegmentLocalAccess. (Poly) lib!types.SegmentLocalAccess.)
(declare-fun Poly%lib!types.PageQueue. (lib!types.PageQueue.) Poly)
(declare-fun %Poly%lib!types.PageQueue. (Poly) lib!types.PageQueue.)
(declare-fun Poly%lib!types.Heap. (lib!types.Heap.) Poly)
(declare-fun %Poly%lib!types.Heap. (Poly) lib!types.Heap.)
(declare-fun Poly%lib!types.HeapSharedAccess. (lib!types.HeapSharedAccess.) Poly)
(declare-fun %Poly%lib!types.HeapSharedAccess. (Poly) lib!types.HeapSharedAccess.)
(declare-fun Poly%lib!types.HeapLocalAccess. (lib!types.HeapLocalAccess.) Poly)
(declare-fun %Poly%lib!types.HeapLocalAccess. (Poly) lib!types.HeapLocalAccess.)
(declare-fun Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld.) Poly)
(declare-fun %Poly%lib!types.SegmentsTld. (Poly) lib!types.SegmentsTld.)
(declare-fun Poly%lib!types.SpanQueueHeader. (lib!types.SpanQueueHeader.) Poly)
(declare-fun %Poly%lib!types.SpanQueueHeader. (Poly) lib!types.SpanQueueHeader.)
(declare-fun Poly%lib!types.Tld. (lib!types.Tld.) Poly)
(declare-fun %Poly%lib!types.Tld. (Poly) lib!types.Tld.)
(declare-fun Poly%lib!types.Local. (lib!types.Local.) Poly)
(declare-fun %Poly%lib!types.Local. (Poly) lib!types.Local.)
(declare-fun Poly%lib!types.HeapPtr. (lib!types.HeapPtr.) Poly)
(declare-fun %Poly%lib!types.HeapPtr. (Poly) lib!types.HeapPtr.)
(declare-fun Poly%lib!types.TldPtr. (lib!types.TldPtr.) Poly)
(declare-fun %Poly%lib!types.TldPtr. (Poly) lib!types.TldPtr.)
(declare-fun Poly%lib!types.PagePtr. (lib!types.PagePtr.) Poly)
(declare-fun %Poly%lib!types.PagePtr. (Poly) lib!types.PagePtr.)
(declare-fun Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader.) Poly)
(declare-fun %Poly%lib!page_organization.DlistHeader. (Poly) lib!page_organization.DlistHeader.)
(declare-fun Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry.) Poly)
(declare-fun %Poly%lib!page_organization.DlistEntry. (Poly) lib!page_organization.DlistEntry.)
(declare-fun Poly%lib!page_organization.PageHeaderKind. (lib!page_organization.PageHeaderKind.) Poly)
(declare-fun %Poly%lib!page_organization.PageHeaderKind. (Poly) lib!page_organization.PageHeaderKind.)
(declare-fun Poly%lib!page_organization.PageData. (lib!page_organization.PageData.) Poly)
(declare-fun %Poly%lib!page_organization.PageData. (Poly) lib!page_organization.PageData.)
(declare-fun Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData.) Poly)
(declare-fun %Poly%lib!page_organization.SegmentData. (Poly) lib!page_organization.SegmentData.)
(declare-fun Poly%lib!page_organization.Popped. (lib!page_organization.Popped.) Poly)
(declare-fun %Poly%lib!page_organization.Popped. (Poly) lib!page_organization.Popped.)
(declare-fun Poly%lib!linked_list.Node. (lib!linked_list.Node.) Poly)
(declare-fun %Poly%lib!linked_list.Node. (Poly) lib!linked_list.Node.)
(declare-fun Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple.) Poly)
(declare-fun %Poly%lib!linked_list.ThreadLLSimple. (Poly) lib!linked_list.ThreadLLSimple.)
(declare-fun Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) Poly)
(declare-fun %Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly) lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)
(declare-fun Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId.) Poly)
(declare-fun %Poly%lib!linked_list.BlockSizePageId. (Poly) lib!linked_list.BlockSizePageId.)
(declare-fun Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits.) Poly)
(declare-fun %Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly) lib!linked_list.ThreadLLWithDelayBits.)
(declare-fun Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) Poly)
(declare-fun %Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly) lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!commit_mask.CommitMask.)) (! (= x (%Poly%lib!commit_mask.CommitMask. (Poly%lib!commit_mask.CommitMask. x))) :pattern ((Poly%lib!commit_mask.CommitMask. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!commit_mask.CommitMask.) (= x (Poly%lib!commit_mask.CommitMask. (%Poly%lib!commit_mask.CommitMask. x)))) :pattern ((has_type x TYPE%lib!commit_mask.CommitMask.)))))
(assert (forall ((x lib!commit_mask.CommitMask.)) (! (has_type (Poly%lib!commit_mask.CommitMask. x) TYPE%lib!commit_mask.CommitMask.) :pattern ((has_type (Poly%lib!commit_mask.CommitMask. x) TYPE%lib!commit_mask.CommitMask.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (= x (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. x))) :pattern ((Poly%lib!linked_list.LL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LL.) (= x (Poly%lib!linked_list.LL. (%Poly%lib!linked_list.LL. x)))) :pattern ((has_type x TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (has_type (Poly%lib!linked_list.LL. x) TYPE%lib!linked_list.LL.) :pattern ((has_type (Poly%lib!linked_list.LL. x) TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (= x (%Poly%lib!linked_list.StuffAgree.Instance. (Poly%lib!linked_list.StuffAgree.Instance. x))) :pattern ((Poly%lib!linked_list.StuffAgree.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Instance.) (= x (Poly%lib!linked_list.StuffAgree.Instance. (%Poly%lib!linked_list.StuffAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.Instance.)))))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (has_type (Poly%lib!linked_list.StuffAgree.Instance. x) TYPE%lib!linked_list.StuffAgree.Instance.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Instance. x) TYPE%lib!linked_list.StuffAgree.Instance.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (= x (%Poly%lib!linked_list.StuffAgree.x. (Poly%lib!linked_list.StuffAgree.x. x))) :pattern ((Poly%lib!linked_list.StuffAgree.x. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x.) (= x (Poly%lib!linked_list.StuffAgree.x. (%Poly%lib!linked_list.StuffAgree.x. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.x.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (has_type (Poly%lib!linked_list.StuffAgree.x. x) TYPE%lib!linked_list.StuffAgree.x.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.x. x) TYPE%lib!linked_list.StuffAgree.x.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (= x (%Poly%lib!linked_list.StuffAgree.y. (Poly%lib!linked_list.StuffAgree.y. x))) :pattern ((Poly%lib!linked_list.StuffAgree.y. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y.) (= x (Poly%lib!linked_list.StuffAgree.y. (%Poly%lib!linked_list.StuffAgree.y. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.y.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (has_type (Poly%lib!linked_list.StuffAgree.y. x) TYPE%lib!linked_list.StuffAgree.y.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.y. x) TYPE%lib!linked_list.StuffAgree.y.)))))
(assert (forall ((x lib!os_mem.OsMem.)) (! (= x (%Poly%lib!os_mem.OsMem. (Poly%lib!os_mem.OsMem. x))) :pattern ((Poly%lib!os_mem.OsMem. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!os_mem.OsMem.) (= x (Poly%lib!os_mem.OsMem. (%Poly%lib!os_mem.OsMem. x)))) :pattern ((has_type x TYPE%lib!os_mem.OsMem.)))))
(assert (forall ((x lib!os_mem.OsMem.)) (! (has_type (Poly%lib!os_mem.OsMem. x) TYPE%lib!os_mem.OsMem.) :pattern ((has_type (Poly%lib!os_mem.OsMem. x) TYPE%lib!os_mem.OsMem.)))))
(assert (forall ((x lib!thread.IsThread.)) (! (= x (%Poly%lib!thread.IsThread. (Poly%lib!thread.IsThread. x))) :pattern ((Poly%lib!thread.IsThread. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.IsThread.) (= x (Poly%lib!thread.IsThread. (%Poly%lib!thread.IsThread. x)))) :pattern ((has_type x TYPE%lib!thread.IsThread.)))))
(assert (forall ((x lib!thread.IsThread.)) (! (has_type (Poly%lib!thread.IsThread. x) TYPE%lib!thread.IsThread.) :pattern ((has_type (Poly%lib!thread.IsThread. x) TYPE%lib!thread.IsThread.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (= x (%Poly%lib!tokens.Mim.Instance. (Poly%lib!tokens.Mim.Instance. x))) :pattern ((Poly%lib!tokens.Mim.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Instance.) (= x (Poly%lib!tokens.Mim.Instance. (%Poly%lib!tokens.Mim.Instance. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (has_type (Poly%lib!tokens.Mim.Instance. x) TYPE%lib!tokens.Mim.Instance.) :pattern ((has_type (Poly%lib!tokens.Mim.Instance. x) TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (= x (%Poly%lib!tokens.Mim.delay. (Poly%lib!tokens.Mim.delay. x))) :pattern ((Poly%lib!tokens.Mim.delay. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay.) (= x (Poly%lib!tokens.Mim.delay. (%Poly%lib!tokens.Mim.delay. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (has_type (Poly%lib!tokens.Mim.delay. x) TYPE%lib!tokens.Mim.delay.) :pattern ((has_type (Poly%lib!tokens.Mim.delay. x) TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (= x (%Poly%lib!tokens.Mim.heap_of_page. (Poly%lib!tokens.Mim.heap_of_page. x))) :pattern ((Poly%lib!tokens.Mim.heap_of_page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page.) (= x (Poly%lib!tokens.Mim.heap_of_page. (%Poly%lib!tokens.Mim.heap_of_page. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (has_type (Poly%lib!tokens.Mim.heap_of_page. x) TYPE%lib!tokens.Mim.heap_of_page.) :pattern ((has_type (Poly%lib!tokens.Mim.heap_of_page. x) TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((x lib!tokens.Mim.my_inst.)) (! (= x (%Poly%lib!tokens.Mim.my_inst. (Poly%lib!tokens.Mim.my_inst. x))) :pattern ((Poly%lib!tokens.Mim.my_inst. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.my_inst.) (= x (Poly%lib!tokens.Mim.my_inst. (%Poly%lib!tokens.Mim.my_inst. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.my_inst.)))))
(assert (forall ((x lib!tokens.Mim.my_inst.)) (! (has_type (Poly%lib!tokens.Mim.my_inst. x) TYPE%lib!tokens.Mim.my_inst.) :pattern ((has_type (Poly%lib!tokens.Mim.my_inst. x) TYPE%lib!tokens.Mim.my_inst.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state.)) (! (= x (%Poly%lib!tokens.Mim.thread_checked_state. (Poly%lib!tokens.Mim.thread_checked_state. x))) :pattern ((Poly%lib!tokens.Mim.thread_checked_state. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state.) (= x (Poly%lib!tokens.Mim.thread_checked_state. (%Poly%lib!tokens.Mim.thread_checked_state. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_checked_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state.)) (! (has_type (Poly%lib!tokens.Mim.thread_checked_state. x) TYPE%lib!tokens.Mim.thread_checked_state.) :pattern ((has_type (Poly%lib!tokens.Mim.thread_checked_state. x) TYPE%lib!tokens.Mim.thread_checked_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state.)) (! (= x (%Poly%lib!tokens.Mim.thread_local_state. (Poly%lib!tokens.Mim.thread_local_state. x))) :pattern ((Poly%lib!tokens.Mim.thread_local_state. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state.) (= x (Poly%lib!tokens.Mim.thread_local_state. (%Poly%lib!tokens.Mim.thread_local_state. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_local_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state.)) (! (has_type (Poly%lib!tokens.Mim.thread_local_state. x) TYPE%lib!tokens.Mim.thread_local_state.) :pattern ((has_type (Poly%lib!tokens.Mim.thread_local_state. x) TYPE%lib!tokens.Mim.thread_local_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (= x (%Poly%lib!tokens.Mim.thread_of_segment. (Poly%lib!tokens.Mim.thread_of_segment. x))) :pattern ((Poly%lib!tokens.Mim.thread_of_segment. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment.) (= x (Poly%lib!tokens.Mim.thread_of_segment. (%Poly%lib!tokens.Mim.thread_of_segment. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (has_type (Poly%lib!tokens.Mim.thread_of_segment. x) TYPE%lib!tokens.Mim.thread_of_segment.) :pattern ((has_type (Poly%lib!tokens.Mim.thread_of_segment. x) TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((x lib!types.BoolAgree.Instance.)) (! (= x (%Poly%lib!types.BoolAgree.Instance. (Poly%lib!types.BoolAgree.Instance. x))) :pattern ((Poly%lib!types.BoolAgree.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.Instance.) (= x (Poly%lib!types.BoolAgree.Instance. (%Poly%lib!types.BoolAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.Instance.)))))
(assert (forall ((x lib!types.BoolAgree.Instance.)) (! (has_type (Poly%lib!types.BoolAgree.Instance. x) TYPE%lib!types.BoolAgree.Instance.) :pattern ((has_type (Poly%lib!types.BoolAgree.Instance. x) TYPE%lib!types.BoolAgree.Instance.)))))
(assert (forall ((x lib!types.BoolAgree.x.)) (! (= x (%Poly%lib!types.BoolAgree.x. (Poly%lib!types.BoolAgree.x. x))) :pattern ((Poly%lib!types.BoolAgree.x. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.x.) (= x (Poly%lib!types.BoolAgree.x. (%Poly%lib!types.BoolAgree.x. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.x.)))))
(assert (forall ((x lib!types.BoolAgree.x.)) (! (has_type (Poly%lib!types.BoolAgree.x. x) TYPE%lib!types.BoolAgree.x.) :pattern ((has_type (Poly%lib!types.BoolAgree.x. x) TYPE%lib!types.BoolAgree.x.)))))
(assert (forall ((x lib!types.BoolAgree.y.)) (! (= x (%Poly%lib!types.BoolAgree.y. (Poly%lib!types.BoolAgree.y. x))) :pattern ((Poly%lib!types.BoolAgree.y. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.y.) (= x (Poly%lib!types.BoolAgree.y. (%Poly%lib!types.BoolAgree.y. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.y.)))))
(assert (forall ((x lib!types.BoolAgree.y.)) (! (has_type (Poly%lib!types.BoolAgree.y. x) TYPE%lib!types.BoolAgree.y.) :pattern ((has_type (Poly%lib!types.BoolAgree.y. x) TYPE%lib!types.BoolAgree.y.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (= x (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. x))) :pattern ((Poly%vstd!cell.CellId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!cell.CellId.) (= x (Poly%vstd!cell.CellId. (%Poly%vstd!cell.CellId. x)))) :pattern ((has_type x TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.CellId.)) (! (has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.) :pattern ((has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.)))))
(assert (forall ((x vstd!cell.PCell<u32.>.)) (! (= x (%Poly%vstd!cell.PCell<u32.>. (Poly%vstd!cell.PCell<u32.>. x))) :pattern ((Poly%vstd!cell.PCell<u32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (UINT 32))) (= x (Poly%vstd!cell.PCell<u32.>. (%Poly%vstd!cell.PCell<u32.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PCell<u32.>.)) (! (has_type (Poly%vstd!cell.PCell<u32.>. x) (TYPE%vstd!cell.PCell. $ (UINT 32))) :pattern ((has_type (Poly%vstd!cell.PCell<u32.>. x) (TYPE%vstd!cell.PCell. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PCell<usize.>.)) (! (= x (%Poly%vstd!cell.PCell<usize.>. (Poly%vstd!cell.PCell<usize.>. x))) :pattern ((Poly%vstd!cell.PCell<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (UINT SZ))) (= x (Poly%vstd!cell.PCell<usize.>. (%Poly%vstd!cell.PCell<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PCell<usize.>.)) (! (has_type (Poly%vstd!cell.PCell<usize.>. x) (TYPE%vstd!cell.PCell. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!cell.PCell<usize.>. x) (TYPE%vstd!cell.PCell. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PCell<lib!types.PageInner.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.PageInner.>. (Poly%vstd!cell.PCell<lib!types.PageInner.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.PageInner.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.)) (= x (Poly%vstd!cell.PCell<lib!types.PageInner.>. (%Poly%vstd!cell.PCell<lib!types.PageInner.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.PageInner.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.PageInner.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.PageInner.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.)) (= x (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.)) (= x (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)) (! (= x (%Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x))) :pattern ((Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.))) (= x (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (%Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)) (! (has_type (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.))) :pattern ((has_type (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!cell.PointsTo<u32.>.)) (! (= x (%Poly%vstd!cell.PointsTo<u32.>. (Poly%vstd!cell.PointsTo<u32.>. x))) :pattern ((Poly%vstd!cell.PointsTo<u32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ (UINT 32))) (= x (Poly%vstd!cell.PointsTo<u32.>. (%Poly%vstd!cell.PointsTo<u32.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PointsTo<u32.>.)) (! (has_type (Poly%vstd!cell.PointsTo<u32.>. x) (TYPE%vstd!cell.PointsTo. $ (UINT 32))) :pattern ((has_type (Poly%vstd!cell.PointsTo<u32.>. x) (TYPE%vstd!cell.PointsTo. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PointsTo<usize.>.)) (! (= x (%Poly%vstd!cell.PointsTo<usize.>. (Poly%vstd!cell.PointsTo<usize.>. x))) :pattern ((Poly%vstd!cell.PointsTo<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ (UINT SZ))) (= x (Poly%vstd!cell.PointsTo<usize.>. (%Poly%vstd!cell.PointsTo<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PointsTo<usize.>.)) (! (has_type (Poly%vstd!cell.PointsTo<usize.>. x) (TYPE%vstd!cell.PointsTo. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!cell.PointsTo<usize.>. x) (TYPE%vstd!cell.PointsTo. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PointsTo<lib!types.PageInner.>.)) (! (= x (%Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. x))) :pattern ((Poly%vstd!cell.PointsTo<lib!types.PageInner.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.PageInner.)) (= x (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (%Poly%vstd!cell.PointsTo<lib!types.PageInner.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PointsTo<lib!types.PageInner.>.)) (! (has_type (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. x) (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. x) (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>.)) (! (= x (%Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. x))) :pattern ((Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.SegmentHeaderMain.)) (= x (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. (%Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>.)) (! (has_type (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>.)) (! (= x (%Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. x))) :pattern ((Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.SegmentHeaderMain2.)) (= x (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. (%Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>.)) (! (has_type (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PointsTo. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)) (! (= x (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. x))) :pattern ((Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ (PTR $ TYPE%lib!types.Page.))) (= x (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)) (! (has_type (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PointsTo. $ (PTR $ TYPE%lib!types.Page.))) :pattern ((has_type (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PointsTo. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!map.Map<int./lib!os_mem.OsMem.>.)) (! (= x (%Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x))) :pattern ((Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%lib!os_mem.OsMem.)) (= x (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (%Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%lib!os_mem.OsMem.))))))
(assert (forall ((x vstd!map.Map<int./lib!os_mem.OsMem.>.)) (! (has_type (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%lib!os_mem.OsMem.)) :pattern ((has_type (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%lib!os_mem.OsMem.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess.))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.IsExposed.)) (! (= x (%Poly%vstd!raw_ptr.IsExposed. (Poly%vstd!raw_ptr.IsExposed. x))) :pattern ((Poly%vstd!raw_ptr.IsExposed. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.IsExposed.) (= x (Poly%vstd!raw_ptr.IsExposed. (%Poly%vstd!raw_ptr.IsExposed. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.IsExposed.)))))
(assert (forall ((x vstd!raw_ptr.IsExposed.)) (! (has_type (Poly%vstd!raw_ptr.IsExposed. x) TYPE%vstd!raw_ptr.IsExposed.) :pattern ((has_type (Poly%vstd!raw_ptr.IsExposed. x) TYPE%vstd!raw_ptr.IsExposed.)))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Heap.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Heap.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Page.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Page.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Tld.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Tld.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.))))))
(assert (forall ((x vstd!raw_ptr.PointsToRaw.)) (! (= x (%Poly%vstd!raw_ptr.PointsToRaw. (Poly%vstd!raw_ptr.PointsToRaw. x))) :pattern ((Poly%vstd!raw_ptr.PointsToRaw. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PointsToRaw.) (= x (Poly%vstd!raw_ptr.PointsToRaw. (%Poly%vstd!raw_ptr.PointsToRaw. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PointsToRaw.)))))
(assert (forall ((x vstd!raw_ptr.PointsToRaw.)) (! (has_type (Poly%vstd!raw_ptr.PointsToRaw. x) TYPE%vstd!raw_ptr.PointsToRaw.) :pattern ((has_type (Poly%vstd!raw_ptr.PointsToRaw. x) TYPE%vstd!raw_ptr.PointsToRaw.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<lib!page_organization.DlistHeader.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!page_organization.DlistHeader.)) (= x (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!page_organization.DlistHeader.))))))
(assert (forall ((x vstd!seq.Seq<lib!page_organization.DlistHeader.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!page_organization.DlistHeader.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!page_organization.DlistHeader.))))))
(assert (forall ((x vstd!seq.Seq<lib!tokens.PageId.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!tokens.PageId.>. (Poly%vstd!seq.Seq<lib!tokens.PageId.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!tokens.PageId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (= x (Poly%vstd!seq.Seq<lib!tokens.PageId.>. (%Poly%vstd!seq.Seq<lib!tokens.PageId.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!seq.Seq<lib!tokens.PageId.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!tokens.PageId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!tokens.PageId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!seq.Seq<lib!types.PageQueue.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!types.PageQueue.>. (Poly%vstd!seq.Seq<lib!types.PageQueue.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!types.PageQueue.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!types.PageQueue.)) (= x (Poly%vstd!seq.Seq<lib!types.PageQueue.>. (%Poly%vstd!seq.Seq<lib!types.PageQueue.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!types.PageQueue.))))))
(assert (forall ((x vstd!seq.Seq<lib!types.PageQueue.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!types.PageQueue.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!types.PageQueue.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!types.PageQueue.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!types.PageQueue.))))))
(assert (forall ((x vstd!seq.Seq<lib!types.SpanQueueHeader.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. (Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!types.SpanQueueHeader.)) (= x (Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. (%Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!types.SpanQueueHeader.))))))
(assert (forall ((x vstd!seq.Seq<lib!types.SpanQueueHeader.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!types.SpanQueueHeader.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!types.SpanQueueHeader.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!types.SpanQueueHeader.))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))) (= x (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)))))))
(assert (forall ((x vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>.)) (! (= x (%Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. x))) :pattern ((Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (PTR $ TYPE%lib!types.Page.))) (= x (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. (%Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>.)) (! (has_type (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!seq.Seq. $ (PTR $ TYPE%lib!types.Page.))) :pattern ((has_type (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!seq.Seq. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<lib!tokens.PageId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.PageId.>. (Poly%vstd!set.Set<lib!tokens.PageId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.PageId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.)) (= x (Poly%vstd!set.Set<lib!tokens.PageId.>. (%Poly%vstd!set.Set<lib!tokens.PageId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.PageId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.PageId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.PageId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.SegmentId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.SegmentId.>. (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.SegmentId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.)) (= x (Poly%vstd!set.Set<lib!tokens.SegmentId.>. (%Poly%vstd!set.Set<lib!tokens.SegmentId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.SegmentId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.))))))
(assert (forall ((x vstd!shared.Shared<lib!types.PageFullAccess.>.)) (! (= x (%Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. x))) :pattern ((Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!shared.Shared. $ TYPE%lib!types.PageFullAccess.)) (= x (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (%Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. x)))) :pattern ((has_type x (TYPE%vstd!shared.Shared. $ TYPE%lib!types.PageFullAccess.))))))
(assert (forall ((x vstd!shared.Shared<lib!types.PageFullAccess.>.)) (! (has_type (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. x) (TYPE%vstd!shared.Shared. $ TYPE%lib!types.PageFullAccess.)) :pattern ((has_type (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. x) (TYPE%vstd!shared.Shared. $ TYPE%lib!types.PageFullAccess.))))))
(assert (forall ((x ptr_mut%<lib!linked_list.Node.>.)) (! (= x (%Poly%ptr_mut%<lib!linked_list.Node.>. (Poly%ptr_mut%<lib!linked_list.Node.>. x))) :pattern ((Poly%ptr_mut%<lib!linked_list.Node.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!linked_list.Node.)) (= x (Poly%ptr_mut%<lib!linked_list.Node.>. (%Poly%ptr_mut%<lib!linked_list.Node.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x ptr_mut%<lib!linked_list.Node.>.)) (! (has_type (Poly%ptr_mut%<lib!linked_list.Node.>. x) (PTR $ TYPE%lib!linked_list.Node.)) :pattern ((has_type (Poly%ptr_mut%<lib!linked_list.Node.>. x) (PTR $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x ptr_mut%<lib!types.Heap.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Heap.>. (Poly%ptr_mut%<lib!types.Heap.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Heap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Heap.)) (= x (Poly%ptr_mut%<lib!types.Heap.>. (%Poly%ptr_mut%<lib!types.Heap.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Heap.))))))
(assert (forall ((x ptr_mut%<lib!types.Heap.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Heap.>. x) (PTR $ TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Heap.>. x) (PTR $ TYPE%lib!types.Heap.))))))
(assert (forall ((x ptr_mut%<lib!types.Page.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Page.>. (Poly%ptr_mut%<lib!types.Page.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Page.)) (= x (Poly%ptr_mut%<lib!types.Page.>. (%Poly%ptr_mut%<lib!types.Page.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Page.))))))
(assert (forall ((x ptr_mut%<lib!types.Page.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Page.>. x) (PTR $ TYPE%lib!types.Page.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Page.>. x) (PTR $ TYPE%lib!types.Page.))))))
(assert (forall ((x ptr_mut%<lib!types.SegmentHeader.>.)) (! (= x (%Poly%ptr_mut%<lib!types.SegmentHeader.>. (Poly%ptr_mut%<lib!types.SegmentHeader.>. x))) :pattern ((Poly%ptr_mut%<lib!types.SegmentHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.SegmentHeader.)) (= x (Poly%ptr_mut%<lib!types.SegmentHeader.>. (%Poly%ptr_mut%<lib!types.SegmentHeader.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x ptr_mut%<lib!types.SegmentHeader.>.)) (! (has_type (Poly%ptr_mut%<lib!types.SegmentHeader.>. x) (PTR $ TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.SegmentHeader.>. x) (PTR $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x ptr_mut%<lib!types.Tld.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Tld.>. (Poly%ptr_mut%<lib!types.Tld.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Tld.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Tld.)) (= x (Poly%ptr_mut%<lib!types.Tld.>. (%Poly%ptr_mut%<lib!types.Tld.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Tld.))))))
(assert (forall ((x ptr_mut%<lib!types.Tld.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Tld.>. x) (PTR $ TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Tld.>. x) (PTR $ TYPE%lib!types.Tld.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPtr. (Poly%vstd!atomic_ghost.AtomicPtr. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPtr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicPtr. (%Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! Poly) (_atomic_inv! Poly)) (! (=> (and (has_type _patomic! (TYPE%vstd!atomic.PAtomicPtr. T&. T&)) (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&)))) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr./AtomicPtr _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr./AtomicPtr _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (TYPE%vstd!atomic.PAtomicPtr. T&. T&))) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ ((c vstd!atomic_ghost.AtomicPtr.)) Bool ((_ is vstd!atomic_ghost.AtomicPtr./AtomicPtr) c))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (=> (is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ x) (height_lt (height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x)) (height (Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (=> (is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ x) (height_lt (height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= x (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. x))) :pattern ((Poly%vstd!cell.PointsToData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (= x (Poly%vstd!cell.PointsToData. (%Poly%vstd!cell.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_pcell! vstd!cell.CellId.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/pcell x) (vstd!cell.PointsToData./PointsToData/?pcell x)) :pattern ((vstd!cell.PointsToData./PointsToData/pcell x)))))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/value x) (vstd!cell.PointsToData./PointsToData/?value x)) :pattern ((vstd!cell.PointsToData./PointsToData/value x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (has_type (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x)) (has_type x (TYPE%vstd!cell.PointsToData. V&. V&))))))
(define-fun is-vstd!cell.PointsToData./PointsToData_ ((c vstd!cell.PointsToData.)) Bool ((_ is vstd!cell.PointsToData./PointsToData) c))
(assert (forall ((x vstd!cell.PointsToData.)) (! (=> (is-vstd!cell.PointsToData./PointsToData_ x) (height_lt (height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x))) (height (Poly%vstd!cell.PointsToData. x)))) :pattern ((height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x)))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= x (%Poly%vstd!raw_ptr.PointsToData. (Poly%vstd!raw_ptr.PointsToData. x))) :pattern ((Poly%vstd!raw_ptr.PointsToData. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (= x (Poly%vstd!raw_ptr.PointsToData. (%Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_ptr! Poly) (_opt_value! vstd!raw_ptr.MemContents.)) (! (=> (and (has_type _ptr! (PTR T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. _opt_value!) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) (has_type (Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData./PointsToData _ptr! _opt_value!)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData./PointsToData _ptr! _opt_value!)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= (vstd!raw_ptr.PointsToData./PointsToData/ptr x) (vstd!raw_ptr.PointsToData./PointsToData/?ptr x)) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/ptr x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (has_type (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. x)) (PTR T&. T&))) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. x)) (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= (vstd!raw_ptr.PointsToData./PointsToData/opt_value x) (vstd!raw_ptr.PointsToData./PointsToData/?opt_value x)) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/opt_value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. x))) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. x)) (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(define-fun is-vstd!raw_ptr.PointsToData./PointsToData_ ((c vstd!raw_ptr.PointsToData.)) Bool ((_ is vstd!raw_ptr.PointsToData./PointsToData) c))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (=> (is-vstd!raw_ptr.PointsToData./PointsToData_ x) (height_lt (height (vstd!raw_ptr.PointsToData./PointsToData/ptr x)) (height (Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((height (vstd!raw_ptr.PointsToData./PointsToData/ptr x))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (=> (is-vstd!raw_ptr.PointsToData./PointsToData_ x) (height_lt (height (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value x))) (height (Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((height (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value x)))))))
(assert (forall ((x lib!tokens.Mim.my_inst_token_data.)) (! (= x (%Poly%lib!tokens.Mim.my_inst_token_data. (Poly%lib!tokens.Mim.my_inst_token_data. x))) :pattern ((Poly%lib!tokens.Mim.my_inst_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.my_inst_token_data.) (= x (Poly%lib!tokens.Mim.my_inst_token_data. (%Poly%lib!tokens.Mim.my_inst_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.my_inst_token_data.)))))
(assert (forall ((x lib!tokens.Mim.my_inst_token_data.)) (! (= (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance x) (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/?instance x)) :pattern ((lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.my_inst_token_data.)) (! (= (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value x) (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/?value x)) :pattern ((lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value x)))))
(assert (forall ((x lib!tokens.Mim.my_inst_token_data.)) (! (has_type (Poly%lib!tokens.Mim.my_inst_token_data. x) TYPE%lib!tokens.Mim.my_inst_token_data.) :pattern ((has_type (Poly%lib!tokens.Mim.my_inst_token_data. x) TYPE%lib!tokens.Mim.my_inst_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= x (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. x))) :pattern ((Poly%lib!tokens.Mim.thread_local_state_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (= x (Poly%lib!tokens.Mim.thread_local_state_token_data. (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!thread.ThreadId.) (_value! lib!tokens.ThreadState.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _key!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.ThreadState. _value!) TYPE%lib!tokens.ThreadState.)) (has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?instance x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?key x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?value x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. x))) TYPE%lib!tokens.ThreadState.)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= x (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. x))) :pattern ((Poly%lib!tokens.Mim.thread_checked_state_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.) (= x (Poly%lib!tokens.Mim.thread_checked_state_token_data. (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!thread.ThreadId.) (_value! lib!tokens.ThreadCheckedState.)) (! (=> (has_type (Poly%lib!thread.ThreadId. _key!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?instance x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance x)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?key x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?value x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value x)))))
(assert (forall ((x lib!types.BoolAgree.x_token_data.)) (! (= x (%Poly%lib!types.BoolAgree.x_token_data. (Poly%lib!types.BoolAgree.x_token_data. x))) :pattern ((Poly%lib!types.BoolAgree.x_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.x_token_data.) (= x (Poly%lib!types.BoolAgree.x_token_data. (%Poly%lib!types.BoolAgree.x_token_data. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.x_token_data.)))))
(assert (forall ((x lib!types.BoolAgree.x_token_data.)) (! (= (lib!types.BoolAgree.x_token_data./x_token_data/instance x) (lib!types.BoolAgree.x_token_data./x_token_data/?instance x)) :pattern ((lib!types.BoolAgree.x_token_data./x_token_data/instance x)))))
(assert (forall ((x lib!types.BoolAgree.x_token_data.)) (! (= (lib!types.BoolAgree.x_token_data./x_token_data/value x) (lib!types.BoolAgree.x_token_data./x_token_data/?value x)) :pattern ((lib!types.BoolAgree.x_token_data./x_token_data/value x)))))
(assert (forall ((x lib!types.BoolAgree.x_token_data.)) (! (has_type (Poly%lib!types.BoolAgree.x_token_data. x) TYPE%lib!types.BoolAgree.x_token_data.) :pattern ((has_type (Poly%lib!types.BoolAgree.x_token_data. x) TYPE%lib!types.BoolAgree.x_token_data.)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= x (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. x))) :pattern ((Poly%lib!page_organization.PageOrg.State. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.State.) (= x (Poly%lib!page_organization.PageOrg.State. (%Poly%lib!page_organization.PageOrg.State. x)))) :pattern ((has_type x TYPE%lib!page_organization.PageOrg.State.)))))
(assert (forall ((_unused_dlist_headers! vstd!seq.Seq<lib!page_organization.DlistHeader.>.) (_used_dlist_headers! vstd!seq.Seq<lib!page_organization.DlistHeader.>.) (_pages! vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.) (_segments! vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.) (_popped! lib!page_organization.Popped.) (_unused_lists! vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) (_used_lists! vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)) (! (=> (has_type (Poly%lib!page_organization.Popped. _popped!) TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.State./State _unused_dlist_headers! _used_dlist_headers! _pages! _segments! _popped! _unused_lists! _used_lists!)) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.State./State _unused_dlist_headers! _used_dlist_headers! _pages! _segments! _popped! _unused_lists! _used_lists!)) TYPE%lib!page_organization.PageOrg.State.)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers x) (lib!page_organization.PageOrg.State./State/?unused_dlist_headers x)) :pattern ((lib!page_organization.PageOrg.State./State/unused_dlist_headers x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/used_dlist_headers x) (lib!page_organization.PageOrg.State./State/?used_dlist_headers x)) :pattern ((lib!page_organization.PageOrg.State./State/used_dlist_headers x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/pages x) (lib!page_organization.PageOrg.State./State/?pages x)) :pattern ((lib!page_organization.PageOrg.State./State/pages x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/segments x) (lib!page_organization.PageOrg.State./State/?segments x)) :pattern ((lib!page_organization.PageOrg.State./State/segments x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/popped x) (lib!page_organization.PageOrg.State./State/?popped x)) :pattern ((lib!page_organization.PageOrg.State./State/popped x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.State.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. x))) TYPE%lib!page_organization.Popped.)) :pattern ((lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. x)) (has_type x TYPE%lib!page_organization.PageOrg.State.)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/unused_lists x) (lib!page_organization.PageOrg.State./State/?unused_lists x)) :pattern ((lib!page_organization.PageOrg.State./State/unused_lists x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/used_lists x) (lib!page_organization.PageOrg.State./State/?used_lists x)) :pattern ((lib!page_organization.PageOrg.State./State/used_lists x)))))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= x (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. x))) :pattern ((Poly%lib!linked_list.StuffAgree.x_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.) (= x (Poly%lib!linked_list.StuffAgree.x_token_data. (%Poly%lib!linked_list.StuffAgree.x_token_data. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.)))))
(assert (forall ((_instance! lib!linked_list.StuffAgree.Instance.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.)) (has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data./x_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data./x_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance x) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?instance x)) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/instance x)))))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/value x) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?value x)) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. x)) (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.)))))
(assert (forall ((x lib!os_mem.MemProtect.)) (! (= x (%Poly%lib!os_mem.MemProtect. (Poly%lib!os_mem.MemProtect. x))) :pattern ((Poly%lib!os_mem.MemProtect. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!os_mem.MemProtect.) (= x (Poly%lib!os_mem.MemProtect. (%Poly%lib!os_mem.MemProtect. x)))) :pattern ((has_type x TYPE%lib!os_mem.MemProtect.)))))
(assert (forall ((x lib!os_mem.MemProtect.)) (! (= (lib!os_mem.MemProtect./MemProtect/read x) (lib!os_mem.MemProtect./MemProtect/?read x)) :pattern ((lib!os_mem.MemProtect./MemProtect/read x)))))
(assert (forall ((x lib!os_mem.MemProtect.)) (! (= (lib!os_mem.MemProtect./MemProtect/write x) (lib!os_mem.MemProtect./MemProtect/?write x)) :pattern ((lib!os_mem.MemProtect./MemProtect/write x)))))
(assert (forall ((x lib!os_mem.MemProtect.)) (! (has_type (Poly%lib!os_mem.MemProtect. x) TYPE%lib!os_mem.MemProtect.) :pattern ((has_type (Poly%lib!os_mem.MemProtect. x) TYPE%lib!os_mem.MemProtect.)))))
(assert (forall ((x lib!os_mem.OsMemData.)) (! (= x (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. x))) :pattern ((Poly%lib!os_mem.OsMemData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!os_mem.OsMemData.) (= x (Poly%lib!os_mem.OsMemData. (%Poly%lib!os_mem.OsMemData. x)))) :pattern ((has_type x TYPE%lib!os_mem.OsMemData.)))))
(assert (forall ((x lib!os_mem.OsMemData.)) (! (= (lib!os_mem.OsMemData./OsMemData/byte_addr x) (lib!os_mem.OsMemData./OsMemData/?byte_addr x)) :pattern ((lib!os_mem.OsMemData./OsMemData/byte_addr x)))))
(assert (forall ((x lib!os_mem.OsMemData.)) (! (= (lib!os_mem.OsMemData./OsMemData/mem_protect x) (lib!os_mem.OsMemData./OsMemData/?mem_protect x)) :pattern ((lib!os_mem.OsMemData./OsMemData/mem_protect x)))))
(assert (forall ((x lib!os_mem.OsMemData.)) (! (has_type (Poly%lib!os_mem.OsMemData. x) TYPE%lib!os_mem.OsMemData.) :pattern ((has_type (Poly%lib!os_mem.OsMemData. x) TYPE%lib!os_mem.OsMemData.)))))
(assert (forall ((x lib!os_mem.MemChunk.)) (! (= x (%Poly%lib!os_mem.MemChunk. (Poly%lib!os_mem.MemChunk. x))) :pattern ((Poly%lib!os_mem.MemChunk. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!os_mem.MemChunk.) (= x (Poly%lib!os_mem.MemChunk. (%Poly%lib!os_mem.MemChunk. x)))) :pattern ((has_type x TYPE%lib!os_mem.MemChunk.)))))
(assert (forall ((x lib!os_mem.MemChunk.)) (! (= (lib!os_mem.MemChunk./MemChunk/os x) (lib!os_mem.MemChunk./MemChunk/?os x)) :pattern ((lib!os_mem.MemChunk./MemChunk/os x)))))
(assert (forall ((x lib!os_mem.MemChunk.)) (! (= (lib!os_mem.MemChunk./MemChunk/points_to x) (lib!os_mem.MemChunk./MemChunk/?points_to x)) :pattern ((lib!os_mem.MemChunk./MemChunk/points_to x)))))
(assert (forall ((x lib!os_mem.MemChunk.)) (! (has_type (Poly%lib!os_mem.MemChunk. x) TYPE%lib!os_mem.MemChunk.) :pattern ((has_type (Poly%lib!os_mem.MemChunk. x) TYPE%lib!os_mem.MemChunk.)))))
(assert (forall ((x lib!thread.ThreadId.)) (! (= x (%Poly%lib!thread.ThreadId. (Poly%lib!thread.ThreadId. x))) :pattern ((Poly%lib!thread.ThreadId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.ThreadId.) (= x (Poly%lib!thread.ThreadId. (%Poly%lib!thread.ThreadId. x)))) :pattern ((has_type x TYPE%lib!thread.ThreadId.)))))
(assert (forall ((_thread_id! Int)) (! (=> (uInv 64 _thread_id!) (has_type (Poly%lib!thread.ThreadId. (lib!thread.ThreadId./ThreadId _thread_id!)) TYPE%lib!thread.ThreadId.)) :pattern ((has_type (Poly%lib!thread.ThreadId. (lib!thread.ThreadId./ThreadId _thread_id!)) TYPE%lib!thread.ThreadId.)))))
(assert (forall ((x lib!thread.ThreadId.)) (! (= (lib!thread.ThreadId./ThreadId/thread_id x) (lib!thread.ThreadId./ThreadId/?thread_id x)) :pattern ((lib!thread.ThreadId./ThreadId/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.ThreadId.) (uInv 64 (lib!thread.ThreadId./ThreadId/thread_id (%Poly%lib!thread.ThreadId. x)))) :pattern ((lib!thread.ThreadId./ThreadId/thread_id (%Poly%lib!thread.ThreadId. x)) (has_type x TYPE%lib!thread.ThreadId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= x (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. x))) :pattern ((Poly%lib!tokens.HeapId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapId.) (= x (Poly%lib!tokens.HeapId. (%Poly%lib!tokens.HeapId. x)))) :pattern ((has_type x TYPE%lib!tokens.HeapId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId _id! _provenance! _uniq!)) TYPE%lib!tokens.HeapId.)) :pattern ((has_type (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId _id! _provenance! _uniq!)) TYPE%lib!tokens.HeapId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/id x) (lib!tokens.HeapId./HeapId/?id x)) :pattern ((lib!tokens.HeapId./HeapId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapId.) (<= 0 (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. x)))) :pattern ((lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. x)) (has_type x TYPE%lib!tokens.HeapId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/provenance x) (lib!tokens.HeapId./HeapId/?provenance x)) :pattern ((lib!tokens.HeapId./HeapId/provenance x)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/uniq x) (lib!tokens.HeapId./HeapId/?uniq x)) :pattern ((lib!tokens.HeapId./HeapId/uniq x)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= x (%Poly%lib!tokens.TldId. (Poly%lib!tokens.TldId. x))) :pattern ((Poly%lib!tokens.TldId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.TldId.) (= x (Poly%lib!tokens.TldId. (%Poly%lib!tokens.TldId. x)))) :pattern ((has_type x TYPE%lib!tokens.TldId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.TldId. (lib!tokens.TldId./TldId _id! _provenance!)) TYPE%lib!tokens.TldId.)) :pattern ((has_type (Poly%lib!tokens.TldId. (lib!tokens.TldId./TldId _id! _provenance!)) TYPE%lib!tokens.TldId.)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= (lib!tokens.TldId./TldId/id x) (lib!tokens.TldId./TldId/?id x)) :pattern ((lib!tokens.TldId./TldId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.TldId.) (<= 0 (lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. x)))) :pattern ((lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. x)) (has_type x TYPE%lib!tokens.TldId.)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= (lib!tokens.TldId./TldId/provenance x) (lib!tokens.TldId./TldId/?provenance x)) :pattern ((lib!tokens.TldId./TldId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= x (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. x))) :pattern ((Poly%lib!tokens.SegmentId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (= x (Poly%lib!tokens.SegmentId. (%Poly%lib!tokens.SegmentId. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/id x) (lib!tokens.SegmentId./SegmentId/?id x)) :pattern ((lib!tokens.SegmentId./SegmentId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (<= 0 (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)))) :pattern ((lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)) (has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/provenance x) (lib!tokens.SegmentId./SegmentId/?provenance x)) :pattern ((lib!tokens.SegmentId./SegmentId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/uniq x) (lib!tokens.SegmentId./SegmentId/?uniq x)) :pattern ((lib!tokens.SegmentId./SegmentId/uniq x)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= x (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. x))) :pattern ((Poly%lib!tokens.PageId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (= x (Poly%lib!tokens.PageId. (%Poly%lib!tokens.PageId. x)))) :pattern ((has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((_segment_id! lib!tokens.SegmentId.) (_idx! Int)) (! (=> (and (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.) (<= 0 _idx!)) (has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/segment_id x) (lib!tokens.PageId./PageId/?segment_id x)) :pattern ((lib!tokens.PageId./PageId/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/idx x) (lib!tokens.PageId./PageId/?idx x)) :pattern ((lib!tokens.PageId./PageId/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (<= 0 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= x (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. x))) :pattern ((Poly%lib!tokens.PageState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (= x (Poly%lib!tokens.PageState. (%Poly%lib!tokens.PageState. x)))) :pattern ((has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((_offset! Int) (_block_size! Int) (_num_blocks! Int) (_shared_access! lib!types.PageSharedAccess.) (_is_enabled! Bool)) (! (=> (and (<= 0 _block_size!) (<= 0 _num_blocks!)) (has_type (Poly%lib!tokens.PageState. (lib!tokens.PageState./PageState _offset! _block_size! _num_blocks! _shared_access! _is_enabled!)) TYPE%lib!tokens.PageState.)) :pattern ((has_type (Poly%lib!tokens.PageState. (lib!tokens.PageState./PageState _offset! _block_size! _num_blocks! _shared_access! _is_enabled!)) TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/offset x) (lib!tokens.PageState./PageState/?offset x)) :pattern ((lib!tokens.PageState./PageState/offset x)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/block_size x) (lib!tokens.PageState./PageState/?block_size x)) :pattern ((lib!tokens.PageState./PageState/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (<= 0 (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. x)))) :pattern ((lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. x)) (has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/num_blocks x) (lib!tokens.PageState./PageState/?num_blocks x)) :pattern ((lib!tokens.PageState./PageState/num_blocks x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (<= 0 (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. x)))) :pattern ((lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. x)) (has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/shared_access x) (lib!tokens.PageState./PageState/?shared_access x)) :pattern ((lib!tokens.PageState./PageState/shared_access x)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/is_enabled x) (lib!tokens.PageState./PageState/?is_enabled x)) :pattern ((lib!tokens.PageState./PageState/is_enabled x)))))
(define-fun is-lib!tokens.PageState./PageState_ ((c lib!tokens.PageState.)) Bool ((_ is lib!tokens.PageState./PageState) c))
(assert (forall ((x lib!tokens.PageState.)) (! (=> (is-lib!tokens.PageState./PageState_ x) (height_lt (height (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access x))) (height (Poly%lib!tokens.PageState. x)))) :pattern ((height (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access x)))))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= x (%Poly%lib!tokens.SegmentState. (Poly%lib!tokens.SegmentState. x))) :pattern ((Poly%lib!tokens.SegmentState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentState.) (= x (Poly%lib!tokens.SegmentState. (%Poly%lib!tokens.SegmentState. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentState.)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= (lib!tokens.SegmentState./SegmentState/shared_access x) (lib!tokens.SegmentState./SegmentState/?shared_access x)) :pattern ((lib!tokens.SegmentState./SegmentState/shared_access x)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= (lib!tokens.SegmentState./SegmentState/is_enabled x) (lib!tokens.SegmentState./SegmentState/?is_enabled x)) :pattern ((lib!tokens.SegmentState./SegmentState/is_enabled x)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (has_type (Poly%lib!tokens.SegmentState. x) TYPE%lib!tokens.SegmentState.) :pattern ((has_type (Poly%lib!tokens.SegmentState. x) TYPE%lib!tokens.SegmentState.)))))
(define-fun is-lib!tokens.SegmentState./SegmentState_ ((c lib!tokens.SegmentState.)) Bool ((_ is lib!tokens.SegmentState./SegmentState) c))
(assert (forall ((x lib!tokens.SegmentState.)) (! (=> (is-lib!tokens.SegmentState./SegmentState_ x) (height_lt (height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access x))) (height (Poly%lib!tokens.SegmentState. x)))) :pattern ((height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access x)))))))
(assert (forall ((x lib!tokens.HeapState.)) (! (= x (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. x))) :pattern ((Poly%lib!tokens.HeapState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapState.) (= x (Poly%lib!tokens.HeapState. (%Poly%lib!tokens.HeapState. x)))) :pattern ((has_type x TYPE%lib!tokens.HeapState.)))))
(assert (forall ((x lib!tokens.HeapState.)) (! (= (lib!tokens.HeapState./HeapState/shared_access x) (lib!tokens.HeapState./HeapState/?shared_access x)) :pattern ((lib!tokens.HeapState./HeapState/shared_access x)))))
(assert (forall ((x lib!tokens.HeapState.)) (! (has_type (Poly%lib!tokens.HeapState. x) TYPE%lib!tokens.HeapState.) :pattern ((has_type (Poly%lib!tokens.HeapState. x) TYPE%lib!tokens.HeapState.)))))
(define-fun is-lib!tokens.HeapState./HeapState_ ((c lib!tokens.HeapState.)) Bool ((_ is lib!tokens.HeapState./HeapState) c))
(assert (forall ((x lib!tokens.HeapState.)) (! (=> (is-lib!tokens.HeapState./HeapState_ x) (height_lt (height (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access x))) (height (Poly%lib!tokens.HeapState. x)))) :pattern ((height (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= x (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. x))) :pattern ((Poly%lib!tokens.ThreadState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadState.) (= x (Poly%lib!tokens.ThreadState. (%Poly%lib!tokens.ThreadState. x)))) :pattern ((has_type x TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((_heap_id! lib!tokens.HeapId.) (_heap! lib!tokens.HeapState.) (_segments! vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) (_pages! vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (=> (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState./ThreadState _heap_id! _heap! _segments! _pages!)) TYPE%lib!tokens.ThreadState.)) :pattern ((has_type (Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState./ThreadState _heap_id! _heap! _segments! _pages!)) TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/heap_id x) (lib!tokens.ThreadState./ThreadState/?heap_id x)) :pattern ((lib!tokens.ThreadState./ThreadState/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadState.) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. x)) (has_type x TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/heap x) (lib!tokens.ThreadState./ThreadState/?heap x)) :pattern ((lib!tokens.ThreadState./ThreadState/heap x)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/segments x) (lib!tokens.ThreadState./ThreadState/?segments x)) :pattern ((lib!tokens.ThreadState./ThreadState/segments x)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/pages x) (lib!tokens.ThreadState./ThreadState/?pages x)) :pattern ((lib!tokens.ThreadState./ThreadState/pages x)))))
(define-fun is-lib!tokens.ThreadState./ThreadState_ ((c lib!tokens.ThreadState.)) Bool ((_ is lib!tokens.ThreadState./ThreadState) c))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x)))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x))))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x)))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x))))))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (= x (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. x))) :pattern ((Poly%lib!tokens.ThreadCheckedState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadCheckedState.) (= x (Poly%lib!tokens.ThreadCheckedState. (%Poly%lib!tokens.ThreadCheckedState. x)))) :pattern ((has_type x TYPE%lib!tokens.ThreadCheckedState.)))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (= (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages x) (lib!tokens.ThreadCheckedState./ThreadCheckedState/?pages x)) :pattern ((lib!tokens.ThreadCheckedState./ThreadCheckedState/pages x)))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (has_type (Poly%lib!tokens.ThreadCheckedState. x) TYPE%lib!tokens.ThreadCheckedState.) :pattern ((has_type (Poly%lib!tokens.ThreadCheckedState. x) TYPE%lib!tokens.ThreadCheckedState.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= x (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. x))) :pattern ((Poly%lib!types.PageInner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (= x (Poly%lib!types.PageInner. (%Poly%lib!types.PageInner. x)))) :pattern ((has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((_flags0! Int) (_capacity! Int) (_reserved! Int) (_flags1! Int) (_flags2! Int) (_free! lib!linked_list.LL.) (_used! Int) (_xblock_size! Int) (_local_free! lib!linked_list.LL.)) (! (=> (and (uInv 8 _flags0!) (uInv 16 _capacity!) (uInv 16 _reserved!) (uInv 8 _flags1!) (uInv 8 _flags2!) (uInv 32 _used!) (uInv 32 _xblock_size!)) (has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags0 x) (lib!types.PageInner./PageInner/?flags0 x)) :pattern ((lib!types.PageInner./PageInner/flags0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/capacity x) (lib!types.PageInner./PageInner/?capacity x)) :pattern ((lib!types.PageInner./PageInner/capacity x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/reserved x) (lib!types.PageInner./PageInner/?reserved x)) :pattern ((lib!types.PageInner./PageInner/reserved x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags1 x) (lib!types.PageInner./PageInner/?flags1 x)) :pattern ((lib!types.PageInner./PageInner/flags1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags2 x) (lib!types.PageInner./PageInner/?flags2 x)) :pattern ((lib!types.PageInner./PageInner/flags2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/free x) (lib!types.PageInner./PageInner/?free x)) :pattern ((lib!types.PageInner./PageInner/free x)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/used x) (lib!types.PageInner./PageInner/?used x)) :pattern ((lib!types.PageInner./PageInner/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/xblock_size x) (lib!types.PageInner./PageInner/?xblock_size x)) :pattern ((lib!types.PageInner./PageInner/xblock_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/local_free x) (lib!types.PageInner./PageInner/?local_free x)) :pattern ((lib!types.PageInner./PageInner/local_free x)))))
(define-fun is-lib!types.PageInner./PageInner_ ((c lib!types.PageInner.)) Bool ((_ is lib!types.PageInner./PageInner) c))
(assert (forall ((x lib!types.PageInner.)) (! (=> (is-lib!types.PageInner./PageInner_ x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x)))))))
(assert (forall ((x lib!types.PageInner.)) (! (=> (is-lib!types.PageInner./PageInner_ x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x)))))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= x (%Poly%lib!types.AtomicHeapPtr. (Poly%lib!types.AtomicHeapPtr. x))) :pattern ((Poly%lib!types.AtomicHeapPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (= x (Poly%lib!types.AtomicHeapPtr. (%Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((_atomic! vstd!atomic_ghost.AtomicPtr.) (_instance! lib!tokens.Mim.Instance.) (_page_id! lib!tokens.PageId.) (_emp! lib!types.BoolAgree.x.) (_emp_inst! lib!types.BoolAgree.Instance.)) (! (=> (and (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr _atomic! _instance! _page_id! _emp! _emp_inst!)) TYPE%lib!types.AtomicHeapPtr.)) :pattern ((has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr _atomic! _instance! _page_id! _emp! _emp_inst!)) TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?atomic x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.))) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?instance x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?page_id x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%lib!tokens.PageId. (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/emp x)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp_inst x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst x)))))
(define-fun is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ ((c lib!types.AtomicHeapPtr.)) Bool ((_ is lib!types.AtomicHeapPtr./AtomicHeapPtr) c))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (=> (is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x))) (height (Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x)))))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (=> (is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x))) (height (Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x)))))))
(assert (forall ((x lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (! (= x (%Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x))) :pattern ((Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) (= x (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (%Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x)))) :pattern ((has_type x TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)))))
(assert (forall ((x lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (! (has_type (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x) TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) :pattern ((has_type (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x) TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)))))
(assert (forall ((x lib!types.Page.)) (! (= x (%Poly%lib!types.Page. (Poly%lib!types.Page. x))) :pattern ((Poly%lib!types.Page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (= x (Poly%lib!types.Page. (%Poly%lib!types.Page. x)))) :pattern ((has_type x TYPE%lib!types.Page.)))))
(assert (forall ((_count! vstd!cell.PCell<u32.>.) (_offset! Int) (_inner! vstd!cell.PCell<lib!types.PageInner.>.) (_xthread_free! lib!linked_list.ThreadLLWithDelayBits.) (_xheap! lib!types.AtomicHeapPtr.) (_prev! vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (_next! vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (_padding! Int)) (! (=> (and (uInv 32 _offset!) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. _xthread_free!) TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%lib!types.AtomicHeapPtr. _xheap!) TYPE%lib!types.AtomicHeapPtr.) (uInv SZ _padding!)) (has_type (Poly%lib!types.Page. (lib!types.Page./Page _count! _offset! _inner! _xthread_free! _xheap! _prev! _next! _padding!)) TYPE%lib!types.Page.)) :pattern ((has_type (Poly%lib!types.Page. (lib!types.Page./Page _count! _offset! _inner! _xthread_free! _xheap! _prev! _next! _padding!)) TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/count x) (lib!types.Page./Page/?count x)) :pattern ((lib!types.Page./Page/count x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/offset x) (lib!types.Page./Page/?offset x)) :pattern ((lib!types.Page./Page/offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (uInv 32 (lib!types.Page./Page/offset (%Poly%lib!types.Page. x)))) :pattern ((lib!types.Page./Page/offset (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/inner x) (lib!types.Page./Page/?inner x)) :pattern ((lib!types.Page./Page/inner x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/xthread_free x) (lib!types.Page./Page/?xthread_free x)) :pattern ((lib!types.Page./Page/xthread_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. x))) TYPE%lib!linked_list.ThreadLLWithDelayBits.)) :pattern ((lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/xheap x) (lib!types.Page./Page/?xheap x)) :pattern ((lib!types.Page./Page/xheap x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap (%Poly%lib!types.Page. x))) TYPE%lib!types.AtomicHeapPtr.)) :pattern ((lib!types.Page./Page/xheap (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/prev x) (lib!types.Page./Page/?prev x)) :pattern ((lib!types.Page./Page/prev x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/next x) (lib!types.Page./Page/?next x)) :pattern ((lib!types.Page./Page/next x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/padding x) (lib!types.Page./Page/?padding x)) :pattern ((lib!types.Page./Page/padding x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (uInv SZ (lib!types.Page./Page/padding (%Poly%lib!types.Page. x)))) :pattern ((lib!types.Page./Page/padding (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(define-fun is-lib!types.Page./Page_ ((c lib!types.Page.)) Bool ((_ is lib!types.Page./Page) c))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next x)))))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= x (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. x))) :pattern ((Poly%lib!types.PageSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageSharedAccess.) (= x (Poly%lib!types.PageSharedAccess. (%Poly%lib!types.PageSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.PageSharedAccess.)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= (lib!types.PageSharedAccess./PageSharedAccess/points_to x) (lib!types.PageSharedAccess./PageSharedAccess/?points_to x)) :pattern ((lib!types.PageSharedAccess./PageSharedAccess/points_to x)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= (lib!types.PageSharedAccess./PageSharedAccess/exposed x) (lib!types.PageSharedAccess./PageSharedAccess/?exposed x)) :pattern ((lib!types.PageSharedAccess./PageSharedAccess/exposed x)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (has_type (Poly%lib!types.PageSharedAccess. x) TYPE%lib!types.PageSharedAccess.) :pattern ((has_type (Poly%lib!types.PageSharedAccess. x) TYPE%lib!types.PageSharedAccess.)))))
(define-fun is-lib!types.PageSharedAccess./PageSharedAccess_ ((c lib!types.PageSharedAccess.)) Bool ((_ is lib!types.PageSharedAccess./PageSharedAccess) c))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (=> (is-lib!types.PageSharedAccess./PageSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to x))) (height (Poly%lib!types.PageSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.PageLocalAccess.)) (! (= x (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. x))) :pattern ((Poly%lib!types.PageLocalAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageLocalAccess.) (= x (Poly%lib!types.PageLocalAccess. (%Poly%lib!types.PageLocalAccess. x)))) :pattern ((has_type x TYPE%lib!types.PageLocalAccess.)))))
(assert (forall ((x lib!types.PageLocalAccess.)) (! (= (lib!types.PageLocalAccess./PageLocalAccess/count x) (lib!types.PageLocalAccess./PageLocalAccess/?count x)) :pattern ((lib!types.PageLocalAccess./PageLocalAccess/count x)))))
(assert (forall ((x lib!types.PageLocalAccess.)) (! (= (lib!types.PageLocalAccess./PageLocalAccess/inner x) (lib!types.PageLocalAccess./PageLocalAccess/?inner x)) :pattern ((lib!types.PageLocalAccess./PageLocalAccess/inner x)))))
(assert (forall ((x lib!types.PageLocalAccess.)) (! (= (lib!types.PageLocalAccess./PageLocalAccess/prev x) (lib!types.PageLocalAccess./PageLocalAccess/?prev x)) :pattern ((lib!types.PageLocalAccess./PageLocalAccess/prev x)))))
(assert (forall ((x lib!types.PageLocalAccess.)) (! (= (lib!types.PageLocalAccess./PageLocalAccess/next x) (lib!types.PageLocalAccess./PageLocalAccess/?next x)) :pattern ((lib!types.PageLocalAccess./PageLocalAccess/next x)))))
(assert (forall ((x lib!types.PageLocalAccess.)) (! (has_type (Poly%lib!types.PageLocalAccess. x) TYPE%lib!types.PageLocalAccess.) :pattern ((has_type (Poly%lib!types.PageLocalAccess. x) TYPE%lib!types.PageLocalAccess.)))))
(assert (forall ((x lib!types.PageFullAccess.)) (! (= x (%Poly%lib!types.PageFullAccess. (Poly%lib!types.PageFullAccess. x))) :pattern ((Poly%lib!types.PageFullAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageFullAccess.) (= x (Poly%lib!types.PageFullAccess. (%Poly%lib!types.PageFullAccess. x)))) :pattern ((has_type x TYPE%lib!types.PageFullAccess.)))))
(assert (forall ((x lib!types.PageFullAccess.)) (! (= (lib!types.PageFullAccess./PageFullAccess/s x) (lib!types.PageFullAccess./PageFullAccess/?s x)) :pattern ((lib!types.PageFullAccess./PageFullAccess/s x)))))
(assert (forall ((x lib!types.PageFullAccess.)) (! (= (lib!types.PageFullAccess./PageFullAccess/l x) (lib!types.PageFullAccess./PageFullAccess/?l x)) :pattern ((lib!types.PageFullAccess./PageFullAccess/l x)))))
(assert (forall ((x lib!types.PageFullAccess.)) (! (has_type (Poly%lib!types.PageFullAccess. x) TYPE%lib!types.PageFullAccess.) :pattern ((has_type (Poly%lib!types.PageFullAccess. x) TYPE%lib!types.PageFullAccess.)))))
(assert (forall ((x lib!types.SegmentKind.)) (! (= x (%Poly%lib!types.SegmentKind. (Poly%lib!types.SegmentKind. x))) :pattern ((Poly%lib!types.SegmentKind. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentKind.) (= x (Poly%lib!types.SegmentKind. (%Poly%lib!types.SegmentKind. x)))) :pattern ((has_type x TYPE%lib!types.SegmentKind.)))))
(assert (forall ((x lib!types.SegmentKind.)) (! (has_type (Poly%lib!types.SegmentKind. x) TYPE%lib!types.SegmentKind.) :pattern ((has_type (Poly%lib!types.SegmentKind. x) TYPE%lib!types.SegmentKind.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= x (%Poly%lib!types.SegmentHeaderMain. (Poly%lib!types.SegmentHeaderMain. x))) :pattern ((Poly%lib!types.SegmentHeaderMain. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (= x (Poly%lib!types.SegmentHeaderMain. (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((_memid! Int) (_mem_is_pinned! Bool) (_mem_is_large! Bool) (_mem_is_committed! Bool) (_mem_alignment! Int) (_mem_align_offset! Int) (_allow_decommit! Bool) (_decommit_expire! Int) (_decommit_mask! lib!commit_mask.CommitMask.) (_commit_mask! lib!commit_mask.CommitMask.)) (! (=> (and (uInv SZ _memid!) (uInv SZ _mem_alignment!) (uInv SZ _mem_align_offset!) (iInv 64 _decommit_expire!)) (has_type (Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain./SegmentHeaderMain _memid! _mem_is_pinned! _mem_is_large! _mem_is_committed! _mem_alignment! _mem_align_offset! _allow_decommit! _decommit_expire! _decommit_mask! _commit_mask!)) TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain./SegmentHeaderMain _memid! _mem_is_pinned! _mem_is_large! _mem_is_committed! _mem_alignment! _mem_align_offset! _allow_decommit! _decommit_expire! _decommit_mask! _commit_mask!)) TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/memid x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?memid x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/memid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_pinned x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_large x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_committed x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_alignment x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_align_offset x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?allow_decommit x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_expire x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (iInv 64 (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_mask x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?commit_mask x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= x (%Poly%lib!types.SegmentHeaderMain2. (Poly%lib!types.SegmentHeaderMain2. x))) :pattern ((Poly%lib!types.SegmentHeaderMain2. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (= x (Poly%lib!types.SegmentHeaderMain2. (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((_next! ptr_mut%<lib!types.SegmentHeader.>.) (_abandoned! Int) (_abandoned_visits! Int) (_used! Int) (_cookie! Int) (_segment_slices! Int) (_segment_info_slices! Int) (_kind! lib!types.SegmentKind.) (_slice_entries! Int)) (! (=> (and (uInv SZ _abandoned!) (uInv SZ _abandoned_visits!) (uInv SZ _used!) (uInv SZ _cookie!) (uInv SZ _segment_slices!) (uInv SZ _segment_info_slices!) (uInv SZ _slice_entries!)) (has_type (Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2./SegmentHeaderMain2 _next! _abandoned! _abandoned_visits! _used! _cookie! _segment_slices! _segment_info_slices! _kind! _slice_entries!)) TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2./SegmentHeaderMain2 _next! _abandoned! _abandoned_visits! _used! _cookie! _segment_slices! _segment_info_slices! _kind! _slice_entries!)) TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?next x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned_visits x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?used x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?cookie x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_slices x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_info_slices x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?kind x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?slice_entries x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= x (%Poly%lib!types.SegmentHeader. (Poly%lib!types.SegmentHeader. x))) :pattern ((Poly%lib!types.SegmentHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (= x (Poly%lib!types.SegmentHeader. (%Poly%lib!types.SegmentHeader. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((_main! vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) (_abandoned_next! Int) (_main2! vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) (_thread_id! vstd!atomic_ghost.AtomicU64.) (_instance! lib!tokens.Mim.Instance.) (_segment_id! lib!tokens.SegmentId.)) (! (=> (and (uInv SZ _abandoned_next!) (has_type (Poly%vstd!atomic_ghost.AtomicU64. _thread_id!) (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.)) (has_type (Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader./SegmentHeader _main! _abandoned_next! _main2! _thread_id! _instance! _segment_id!)) TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader./SegmentHeader _main! _abandoned_next! _main2! _thread_id! _instance! _segment_id!)) TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/main x) (lib!types.SegmentHeader./SegmentHeader/?main x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/main x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/abandoned_next x) (lib!types.SegmentHeader./SegmentHeader/?abandoned_next x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/abandoned_next x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (uInv SZ (lib!types.SegmentHeader./SegmentHeader/abandoned_next (%Poly%lib!types.SegmentHeader. x)))) :pattern ((lib!types.SegmentHeader./SegmentHeader/abandoned_next (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/main2 x) (lib!types.SegmentHeader./SegmentHeader/?main2 x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/main2 x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/thread_id x) (lib!types.SegmentHeader./SegmentHeader/?thread_id x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. x))) (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.))) :pattern ((lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/instance x) (lib!types.SegmentHeader./SegmentHeader/?instance x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/instance x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/segment_id x) (lib!types.SegmentHeader./SegmentHeader/?segment_id x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%lib!tokens.SegmentId. (lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(define-fun is-lib!types.SegmentHeader./SegmentHeader_ ((c lib!types.SegmentHeader.)) Bool ((_ is lib!types.SegmentHeader./SegmentHeader) c))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 x)))))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id x)))))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance x)))))))
(assert (forall ((x lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (! (= x (%Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x))) :pattern ((Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) (= x (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (%Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x)))) :pattern ((has_type x TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)))))
(assert (forall ((x lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (! (has_type (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x) TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) :pattern ((has_type (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x) TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (= x (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. x))) :pattern ((Poly%lib!types.SegmentSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentSharedAccess.) (= x (Poly%lib!types.SegmentSharedAccess. (%Poly%lib!types.SegmentSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.SegmentSharedAccess.)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (= (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x) (lib!types.SegmentSharedAccess./SegmentSharedAccess/?points_to x)) :pattern ((lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (has_type (Poly%lib!types.SegmentSharedAccess. x) TYPE%lib!types.SegmentSharedAccess.) :pattern ((has_type (Poly%lib!types.SegmentSharedAccess. x) TYPE%lib!types.SegmentSharedAccess.)))))
(define-fun is-lib!types.SegmentSharedAccess./SegmentSharedAccess_ ((c lib!types.SegmentSharedAccess.)) Bool ((_ is lib!types.SegmentSharedAccess./SegmentSharedAccess) c))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (=> (is-lib!types.SegmentSharedAccess./SegmentSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x))) (height (Poly%lib!types.SegmentSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.SegmentLocalAccess.)) (! (= x (%Poly%lib!types.SegmentLocalAccess. (Poly%lib!types.SegmentLocalAccess. x))) :pattern ((Poly%lib!types.SegmentLocalAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentLocalAccess.) (= x (Poly%lib!types.SegmentLocalAccess. (%Poly%lib!types.SegmentLocalAccess. x)))) :pattern ((has_type x TYPE%lib!types.SegmentLocalAccess.)))))
(assert (forall ((x lib!types.SegmentLocalAccess.)) (! (= (lib!types.SegmentLocalAccess./SegmentLocalAccess/mem x) (lib!types.SegmentLocalAccess./SegmentLocalAccess/?mem x)) :pattern ((lib!types.SegmentLocalAccess./SegmentLocalAccess/mem x)))))
(assert (forall ((x lib!types.SegmentLocalAccess.)) (! (= (lib!types.SegmentLocalAccess./SegmentLocalAccess/main x) (lib!types.SegmentLocalAccess./SegmentLocalAccess/?main x)) :pattern ((lib!types.SegmentLocalAccess./SegmentLocalAccess/main x)))))
(assert (forall ((x lib!types.SegmentLocalAccess.)) (! (= (lib!types.SegmentLocalAccess./SegmentLocalAccess/main2 x) (lib!types.SegmentLocalAccess./SegmentLocalAccess/?main2 x)) :pattern ((lib!types.SegmentLocalAccess./SegmentLocalAccess/main2 x)))))
(assert (forall ((x lib!types.SegmentLocalAccess.)) (! (has_type (Poly%lib!types.SegmentLocalAccess. x) TYPE%lib!types.SegmentLocalAccess.) :pattern ((has_type (Poly%lib!types.SegmentLocalAccess. x) TYPE%lib!types.SegmentLocalAccess.)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= x (%Poly%lib!types.PageQueue. (Poly%lib!types.PageQueue. x))) :pattern ((Poly%lib!types.PageQueue. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageQueue.) (= x (Poly%lib!types.PageQueue. (%Poly%lib!types.PageQueue. x)))) :pattern ((has_type x TYPE%lib!types.PageQueue.)))))
(assert (forall ((_first! ptr_mut%<lib!types.Page.>.) (_last! ptr_mut%<lib!types.Page.>.) (_block_size! Int)) (! (=> (uInv SZ _block_size!) (has_type (Poly%lib!types.PageQueue. (lib!types.PageQueue./PageQueue _first! _last! _block_size!)) TYPE%lib!types.PageQueue.)) :pattern ((has_type (Poly%lib!types.PageQueue. (lib!types.PageQueue./PageQueue _first! _last! _block_size!)) TYPE%lib!types.PageQueue.)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/first x) (lib!types.PageQueue./PageQueue/?first x)) :pattern ((lib!types.PageQueue./PageQueue/first x)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/last x) (lib!types.PageQueue./PageQueue/?last x)) :pattern ((lib!types.PageQueue./PageQueue/last x)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/block_size x) (lib!types.PageQueue./PageQueue/?block_size x)) :pattern ((lib!types.PageQueue./PageQueue/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageQueue.) (uInv SZ (lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. x)))) :pattern ((lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. x)) (has_type x TYPE%lib!types.PageQueue.)))))
(assert (forall ((x lib!types.Heap.)) (! (= x (%Poly%lib!types.Heap. (Poly%lib!types.Heap. x))) :pattern ((Poly%lib!types.Heap. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (= x (Poly%lib!types.Heap. (%Poly%lib!types.Heap. x)))) :pattern ((has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((_tld_ptr! lib!types.TldPtr.) (_pages_free_direct! Poly) (_pages! Poly) (_thread_delayed_free! lib!linked_list.ThreadLLSimple.) (_thread_id! lib!thread.ThreadId.) (_arena_id! Int) (_page_count! vstd!cell.PCell<usize.>.) (_page_retired_min! vstd!cell.PCell<usize.>.) (_page_retired_max! vstd!cell.PCell<usize.>.) (_no_reclaim! Bool) (_page_empty_ptr! ptr_mut%<lib!types.Page.>.)) (! (=> (and (has_type (Poly%lib!types.TldPtr. _tld_ptr!) TYPE%lib!types.TldPtr.) (has_type _pages_free_direct! (TYPE%vstd!cell.PCell. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)))) (has_type _pages! (TYPE%vstd!cell.PCell. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)))) (has_type (Poly%lib!linked_list.ThreadLLSimple. _thread_delayed_free!) TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!thread.ThreadId. _thread_id!) TYPE%lib!thread.ThreadId.) (uInv SZ _arena_id!)) (has_type (Poly%lib!types.Heap. (lib!types.Heap./Heap _tld_ptr! _pages_free_direct! _pages! _thread_delayed_free! _thread_id! _arena_id! _page_count! _page_retired_min! _page_retired_max! _no_reclaim! _page_empty_ptr!)) TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%lib!types.Heap. (lib!types.Heap./Heap _tld_ptr! _pages_free_direct! _pages! _thread_delayed_free! _thread_id! _arena_id! _page_count! _page_retired_min! _page_retired_max! _no_reclaim! _page_empty_ptr!)) TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/tld_ptr x) (lib!types.Heap./Heap/?tld_ptr x)) :pattern ((lib!types.Heap./Heap/tld_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. x))) TYPE%lib!types.TldPtr.)) :pattern ((lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/pages_free_direct x) (lib!types.Heap./Heap/?pages_free_direct x)) :pattern ((lib!types.Heap./Heap/pages_free_direct x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. x)) (TYPE%vstd!cell.PCell. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129))))) :pattern ((lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/pages x) (lib!types.Heap./Heap/?pages x)) :pattern ((lib!types.Heap./Heap/pages x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. x)) (TYPE%vstd!cell.PCell. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75))))) :pattern ((lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/thread_delayed_free x) (lib!types.Heap./Heap/?thread_delayed_free x)) :pattern ((lib!types.Heap./Heap/thread_delayed_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. x))) TYPE%lib!linked_list.ThreadLLSimple.)) :pattern ((lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/thread_id x) (lib!types.Heap./Heap/?thread_id x)) :pattern ((lib!types.Heap./Heap/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!thread.ThreadId. (lib!types.Heap./Heap/thread_id (%Poly%lib!types.Heap. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!types.Heap./Heap/thread_id (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/arena_id x) (lib!types.Heap./Heap/?arena_id x)) :pattern ((lib!types.Heap./Heap/arena_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (uInv SZ (lib!types.Heap./Heap/arena_id (%Poly%lib!types.Heap. x)))) :pattern ((lib!types.Heap./Heap/arena_id (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_count x) (lib!types.Heap./Heap/?page_count x)) :pattern ((lib!types.Heap./Heap/page_count x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_retired_min x) (lib!types.Heap./Heap/?page_retired_min x)) :pattern ((lib!types.Heap./Heap/page_retired_min x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_retired_max x) (lib!types.Heap./Heap/?page_retired_max x)) :pattern ((lib!types.Heap./Heap/page_retired_max x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/no_reclaim x) (lib!types.Heap./Heap/?no_reclaim x)) :pattern ((lib!types.Heap./Heap/no_reclaim x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_empty_ptr x) (lib!types.Heap./Heap/?page_empty_ptr x)) :pattern ((lib!types.Heap./Heap/page_empty_ptr x)))))
(define-fun is-lib!types.Heap./Heap_ ((c lib!types.Heap.)) Bool ((_ is lib!types.Heap./Heap) c))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr x))) (height (Poly%lib!types.Heap. x)))) :pattern ((height (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr x)))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (lib!types.Heap./Heap/pages_free_direct x)) (height (Poly%lib!types.Heap. x)))) :pattern ((height (lib!types.Heap./Heap/pages_free_direct x))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (lib!types.Heap./Heap/pages x)) (height (Poly%lib!types.Heap. x)))) :pattern ((height (lib!types.Heap./Heap/pages x))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free x))) (height (Poly%lib!types.Heap. x)))) :pattern ((height (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free x)))))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (= x (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. x))) :pattern ((Poly%lib!types.HeapSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.HeapSharedAccess.) (= x (Poly%lib!types.HeapSharedAccess. (%Poly%lib!types.HeapSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.HeapSharedAccess.)))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (= (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x) (lib!types.HeapSharedAccess./HeapSharedAccess/?points_to x)) :pattern ((lib!types.HeapSharedAccess./HeapSharedAccess/points_to x)))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (has_type (Poly%lib!types.HeapSharedAccess. x) TYPE%lib!types.HeapSharedAccess.) :pattern ((has_type (Poly%lib!types.HeapSharedAccess. x) TYPE%lib!types.HeapSharedAccess.)))))
(define-fun is-lib!types.HeapSharedAccess./HeapSharedAccess_ ((c lib!types.HeapSharedAccess.)) Bool ((_ is lib!types.HeapSharedAccess./HeapSharedAccess) c))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (=> (is-lib!types.HeapSharedAccess./HeapSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x))) (height (Poly%lib!types.HeapSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.HeapLocalAccess.)) (! (= x (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. x))) :pattern ((Poly%lib!types.HeapLocalAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.HeapLocalAccess.) (= x (Poly%lib!types.HeapLocalAccess. (%Poly%lib!types.HeapLocalAccess. x)))) :pattern ((has_type x TYPE%lib!types.HeapLocalAccess.)))))
(assert (forall ((_pages_free_direct! Poly) (_pages! Poly) (_page_count! vstd!cell.PointsTo<usize.>.) (_page_retired_min! vstd!cell.PointsTo<usize.>.) (_page_retired_max! vstd!cell.PointsTo<usize.>.)) (! (=> (and (has_type _pages_free_direct! (TYPE%vstd!cell.PointsTo. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)))) (has_type _pages! (TYPE%vstd!cell.PointsTo. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75))))) (has_type (Poly%lib!types.HeapLocalAccess. (lib!types.HeapLocalAccess./HeapLocalAccess _pages_free_direct! _pages! _page_count! _page_retired_min! _page_retired_max!)) TYPE%lib!types.HeapLocalAccess.)) :pattern ((has_type (Poly%lib!types.HeapLocalAccess. (lib!types.HeapLocalAccess./HeapLocalAccess _pages_free_direct! _pages! _page_count! _page_retired_min! _page_retired_max!)) TYPE%lib!types.HeapLocalAccess.)))))
(assert (forall ((x lib!types.HeapLocalAccess.)) (! (= (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct x) (lib!types.HeapLocalAccess./HeapLocalAccess/?pages_free_direct x)) :pattern ((lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.HeapLocalAccess.) (has_type (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. x)) (TYPE%vstd!cell.PointsTo. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129))))) :pattern ((lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. x)) (has_type x TYPE%lib!types.HeapLocalAccess.)))))
(assert (forall ((x lib!types.HeapLocalAccess.)) (! (= (lib!types.HeapLocalAccess./HeapLocalAccess/pages x) (lib!types.HeapLocalAccess./HeapLocalAccess/?pages x)) :pattern ((lib!types.HeapLocalAccess./HeapLocalAccess/pages x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.HeapLocalAccess.) (has_type (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. x)) (TYPE%vstd!cell.PointsTo. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75))))) :pattern ((lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. x)) (has_type x TYPE%lib!types.HeapLocalAccess.)))))
(assert (forall ((x lib!types.HeapLocalAccess.)) (! (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_count x) (lib!types.HeapLocalAccess./HeapLocalAccess/?page_count x)) :pattern ((lib!types.HeapLocalAccess./HeapLocalAccess/page_count x)))))
(assert (forall ((x lib!types.HeapLocalAccess.)) (! (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min x) (lib!types.HeapLocalAccess./HeapLocalAccess/?page_retired_min x)) :pattern ((lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min x)))))
(assert (forall ((x lib!types.HeapLocalAccess.)) (! (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max x) (lib!types.HeapLocalAccess./HeapLocalAccess/?page_retired_max x)) :pattern ((lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max x)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= x (%Poly%lib!types.SegmentsTld. (Poly%lib!types.SegmentsTld. x))) :pattern ((Poly%lib!types.SegmentsTld. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (= x (Poly%lib!types.SegmentsTld. (%Poly%lib!types.SegmentsTld. x)))) :pattern ((has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((_span_queue_headers! %%Function%%) (_count! Int) (_peak_count! Int) (_current_size! Int) (_peak_size! Int)) (! (=> (and (has_type (Poly%array%. _span_queue_headers!) (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32))) (uInv SZ _count!) (uInv SZ _peak_count!) (uInv SZ _current_size!) (uInv SZ _peak_size!)) (has_type (Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld./SegmentsTld _span_queue_headers! _count! _peak_count! _current_size! _peak_size!)) TYPE%lib!types.SegmentsTld.)) :pattern ((has_type (Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld./SegmentsTld _span_queue_headers! _count! _peak_count! _current_size! _peak_size!)) TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/span_queue_headers x) (lib!types.SegmentsTld./SegmentsTld/?span_queue_headers x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/span_queue_headers x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (has_type (Poly%array%. (lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. x))) (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/count x) (lib!types.SegmentsTld./SegmentsTld/?count x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/count (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/count (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/peak_count x) (lib!types.SegmentsTld./SegmentsTld/?peak_count x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/peak_count (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_count (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/current_size x) (lib!types.SegmentsTld./SegmentsTld/?current_size x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/current_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/current_size (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/current_size (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/peak_size x) (lib!types.SegmentsTld./SegmentsTld/?peak_size x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/peak_size (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_size (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= x (%Poly%lib!types.SpanQueueHeader. (Poly%lib!types.SpanQueueHeader. x))) :pattern ((Poly%lib!types.SpanQueueHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SpanQueueHeader.) (= x (Poly%lib!types.SpanQueueHeader. (%Poly%lib!types.SpanQueueHeader. x)))) :pattern ((has_type x TYPE%lib!types.SpanQueueHeader.)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= (lib!types.SpanQueueHeader./SpanQueueHeader/first x) (lib!types.SpanQueueHeader./SpanQueueHeader/?first x)) :pattern ((lib!types.SpanQueueHeader./SpanQueueHeader/first x)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= (lib!types.SpanQueueHeader./SpanQueueHeader/last x) (lib!types.SpanQueueHeader./SpanQueueHeader/?last x)) :pattern ((lib!types.SpanQueueHeader./SpanQueueHeader/last x)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (has_type (Poly%lib!types.SpanQueueHeader. x) TYPE%lib!types.SpanQueueHeader.) :pattern ((has_type (Poly%lib!types.SpanQueueHeader. x) TYPE%lib!types.SpanQueueHeader.)))))
(assert (forall ((x lib!types.Tld.)) (! (= x (%Poly%lib!types.Tld. (Poly%lib!types.Tld. x))) :pattern ((Poly%lib!types.Tld. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Tld.) (= x (Poly%lib!types.Tld. (%Poly%lib!types.Tld. x)))) :pattern ((has_type x TYPE%lib!types.Tld.)))))
(assert (forall ((_heap_backing! ptr_mut%<lib!types.Heap.>.) (_segments! lib!types.SegmentsTld.)) (! (=> (has_type (Poly%lib!types.SegmentsTld. _segments!) TYPE%lib!types.SegmentsTld.) (has_type (Poly%lib!types.Tld. (lib!types.Tld./Tld _heap_backing! _segments!)) TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%lib!types.Tld. (lib!types.Tld./Tld _heap_backing! _segments!)) TYPE%lib!types.Tld.)))))
(assert (forall ((x lib!types.Tld.)) (! (= (lib!types.Tld./Tld/heap_backing x) (lib!types.Tld./Tld/?heap_backing x)) :pattern ((lib!types.Tld./Tld/heap_backing x)))))
(assert (forall ((x lib!types.Tld.)) (! (= (lib!types.Tld./Tld/segments x) (lib!types.Tld./Tld/?segments x)) :pattern ((lib!types.Tld./Tld/segments x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Tld.) (has_type (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. x))) TYPE%lib!types.SegmentsTld.)) :pattern ((lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. x)) (has_type x TYPE%lib!types.Tld.)))))
(define-fun is-lib!types.Tld./Tld_ ((c lib!types.Tld.)) Bool ((_ is lib!types.Tld./Tld) c))
(assert (forall ((x lib!types.Tld.)) (! (=> (is-lib!types.Tld./Tld_ x) (height_lt (height (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments x))) (height (Poly%lib!types.Tld. x)))) :pattern ((height (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments x)))))))
(assert (forall ((x lib!types.Local.)) (! (= x (%Poly%lib!types.Local. (Poly%lib!types.Local. x))) :pattern ((Poly%lib!types.Local. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Local.) (= x (Poly%lib!types.Local. (%Poly%lib!types.Local. x)))) :pattern ((has_type x TYPE%lib!types.Local.)))))
(assert (forall ((_thread_id! lib!thread.ThreadId.) (_my_inst! lib!tokens.Mim.my_inst.) (_instance! lib!tokens.Mim.Instance.) (_thread_token! lib!tokens.Mim.thread_local_state.) (_checked_token! lib!tokens.Mim.thread_checked_state.) (_is_thread! lib!thread.IsThread.) (_heap_id! lib!tokens.HeapId.) (_heap! lib!types.HeapLocalAccess.) (_tld_id! lib!tokens.TldId.) (_tld! vstd!raw_ptr.PointsTo<lib!types.Tld.>.) (_segments! vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>.) (_pages! vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>.) (_psa! vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.) (_unused_pages! vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.) (_page_organization! lib!page_organization.PageOrg.State.) (_page_empty_global! vstd!shared.Shared<lib!types.PageFullAccess.>.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _thread_id!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%lib!types.HeapLocalAccess. _heap!) TYPE%lib!types.HeapLocalAccess.) (has_type (Poly%lib!tokens.TldId. _tld_id!) TYPE%lib!tokens.TldId.) (has_type (Poly%lib!page_organization.PageOrg.State. _page_organization!) TYPE%lib!page_organization.PageOrg.State.)) (has_type (Poly%lib!types.Local. (lib!types.Local./Local _thread_id! _my_inst! _instance! _thread_token! _checked_token! _is_thread! _heap_id! _heap! _tld_id! _tld! _segments! _pages! _psa! _unused_pages! _page_organization! _page_empty_global!)) TYPE%lib!types.Local.)) :pattern ((has_type (Poly%lib!types.Local. (lib!types.Local./Local _thread_id! _my_inst! _instance! _thread_token! _checked_token! _is_thread! _heap_id! _heap! _tld_id! _tld! _segments! _pages! _psa! _unused_pages! _page_organization! _page_empty_global!)) TYPE%lib!types.Local.)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/thread_id x) (lib!types.Local./Local/?thread_id x)) :pattern ((lib!types.Local./Local/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Local.) (has_type (Poly%lib!thread.ThreadId. (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!types.Local./Local/thread_id (%Poly%lib!types.Local. x)) (has_type x TYPE%lib!types.Local.)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/my_inst x) (lib!types.Local./Local/?my_inst x)) :pattern ((lib!types.Local./Local/my_inst x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/instance x) (lib!types.Local./Local/?instance x)) :pattern ((lib!types.Local./Local/instance x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/thread_token x) (lib!types.Local./Local/?thread_token x)) :pattern ((lib!types.Local./Local/thread_token x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/checked_token x) (lib!types.Local./Local/?checked_token x)) :pattern ((lib!types.Local./Local/checked_token x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/is_thread x) (lib!types.Local./Local/?is_thread x)) :pattern ((lib!types.Local./Local/is_thread x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/heap_id x) (lib!types.Local./Local/?heap_id x)) :pattern ((lib!types.Local./Local/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Local.) (has_type (Poly%lib!tokens.HeapId. (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!types.Local./Local/heap_id (%Poly%lib!types.Local. x)) (has_type x TYPE%lib!types.Local.)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/heap x) (lib!types.Local./Local/?heap x)) :pattern ((lib!types.Local./Local/heap x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Local.) (has_type (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. x))) TYPE%lib!types.HeapLocalAccess.)) :pattern ((lib!types.Local./Local/heap (%Poly%lib!types.Local. x)) (has_type x TYPE%lib!types.Local.)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/tld_id x) (lib!types.Local./Local/?tld_id x)) :pattern ((lib!types.Local./Local/tld_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Local.) (has_type (Poly%lib!tokens.TldId. (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. x))) TYPE%lib!tokens.TldId.)) :pattern ((lib!types.Local./Local/tld_id (%Poly%lib!types.Local. x)) (has_type x TYPE%lib!types.Local.)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/tld x) (lib!types.Local./Local/?tld x)) :pattern ((lib!types.Local./Local/tld x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/segments x) (lib!types.Local./Local/?segments x)) :pattern ((lib!types.Local./Local/segments x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/pages x) (lib!types.Local./Local/?pages x)) :pattern ((lib!types.Local./Local/pages x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/psa x) (lib!types.Local./Local/?psa x)) :pattern ((lib!types.Local./Local/psa x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/unused_pages x) (lib!types.Local./Local/?unused_pages x)) :pattern ((lib!types.Local./Local/unused_pages x)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/page_organization x) (lib!types.Local./Local/?page_organization x)) :pattern ((lib!types.Local./Local/page_organization x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Local.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. x))) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((lib!types.Local./Local/page_organization (%Poly%lib!types.Local. x)) (has_type x TYPE%lib!types.Local.)))))
(assert (forall ((x lib!types.Local.)) (! (= (lib!types.Local./Local/page_empty_global x) (lib!types.Local./Local/?page_empty_global x)) :pattern ((lib!types.Local./Local/page_empty_global x)))))
(assert (forall ((x lib!types.HeapPtr.)) (! (= x (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. x))) :pattern ((Poly%lib!types.HeapPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.HeapPtr.) (= x (Poly%lib!types.HeapPtr. (%Poly%lib!types.HeapPtr. x)))) :pattern ((has_type x TYPE%lib!types.HeapPtr.)))))
(assert (forall ((_heap_ptr! ptr_mut%<lib!types.Heap.>.) (_heap_id! lib!tokens.HeapId.)) (! (=> (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%lib!types.HeapPtr. (lib!types.HeapPtr./HeapPtr _heap_ptr! _heap_id!)) TYPE%lib!types.HeapPtr.)) :pattern ((has_type (Poly%lib!types.HeapPtr. (lib!types.HeapPtr./HeapPtr _heap_ptr! _heap_id!)) TYPE%lib!types.HeapPtr.)))))
(assert (forall ((x lib!types.HeapPtr.)) (! (= (lib!types.HeapPtr./HeapPtr/heap_ptr x) (lib!types.HeapPtr./HeapPtr/?heap_ptr x)) :pattern ((lib!types.HeapPtr./HeapPtr/heap_ptr x)))))
(assert (forall ((x lib!types.HeapPtr.)) (! (= (lib!types.HeapPtr./HeapPtr/heap_id x) (lib!types.HeapPtr./HeapPtr/?heap_id x)) :pattern ((lib!types.HeapPtr./HeapPtr/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.HeapPtr.) (has_type (Poly%lib!tokens.HeapId. (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. x)) (has_type x TYPE%lib!types.HeapPtr.)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= x (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. x))) :pattern ((Poly%lib!types.TldPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.TldPtr.) (= x (Poly%lib!types.TldPtr. (%Poly%lib!types.TldPtr. x)))) :pattern ((has_type x TYPE%lib!types.TldPtr.)))))
(assert (forall ((_tld_ptr! ptr_mut%<lib!types.Tld.>.) (_tld_id! lib!tokens.TldId.)) (! (=> (has_type (Poly%lib!tokens.TldId. _tld_id!) TYPE%lib!tokens.TldId.) (has_type (Poly%lib!types.TldPtr. (lib!types.TldPtr./TldPtr _tld_ptr! _tld_id!)) TYPE%lib!types.TldPtr.)) :pattern ((has_type (Poly%lib!types.TldPtr. (lib!types.TldPtr./TldPtr _tld_ptr! _tld_id!)) TYPE%lib!types.TldPtr.)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= (lib!types.TldPtr./TldPtr/tld_ptr x) (lib!types.TldPtr./TldPtr/?tld_ptr x)) :pattern ((lib!types.TldPtr./TldPtr/tld_ptr x)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= (lib!types.TldPtr./TldPtr/tld_id x) (lib!types.TldPtr./TldPtr/?tld_id x)) :pattern ((lib!types.TldPtr./TldPtr/tld_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.TldPtr.) (has_type (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. x))) TYPE%lib!tokens.TldId.)) :pattern ((lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. x)) (has_type x TYPE%lib!types.TldPtr.)))))
(assert (forall ((x lib!types.PagePtr.)) (! (= x (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. x))) :pattern ((Poly%lib!types.PagePtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PagePtr.) (= x (Poly%lib!types.PagePtr. (%Poly%lib!types.PagePtr. x)))) :pattern ((has_type x TYPE%lib!types.PagePtr.)))))
(assert (forall ((_page_ptr! ptr_mut%<lib!types.Page.>.) (_page_id! lib!tokens.PageId.)) (! (=> (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!types.PagePtr. (lib!types.PagePtr./PagePtr _page_ptr! _page_id!)) TYPE%lib!types.PagePtr.)) :pattern ((has_type (Poly%lib!types.PagePtr. (lib!types.PagePtr./PagePtr _page_ptr! _page_id!)) TYPE%lib!types.PagePtr.)))))
(assert (forall ((x lib!types.PagePtr.)) (! (= (lib!types.PagePtr./PagePtr/page_ptr x) (lib!types.PagePtr./PagePtr/?page_ptr x)) :pattern ((lib!types.PagePtr./PagePtr/page_ptr x)))))
(assert (forall ((x lib!types.PagePtr.)) (! (= (lib!types.PagePtr./PagePtr/page_id x) (lib!types.PagePtr./PagePtr/?page_id x)) :pattern ((lib!types.PagePtr./PagePtr/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PagePtr.) (has_type (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. x)) (has_type x TYPE%lib!types.PagePtr.)))))
(assert (forall ((x lib!page_organization.DlistHeader.)) (! (= x (%Poly%lib!page_organization.DlistHeader. (Poly%lib!page_organization.DlistHeader. x))) :pattern ((Poly%lib!page_organization.DlistHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistHeader.) (= x (Poly%lib!page_organization.DlistHeader. (%Poly%lib!page_organization.DlistHeader. x)))) :pattern ((has_type x TYPE%lib!page_organization.DlistHeader.)))))
(assert (forall ((_first! core!option.Option.) (_last! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _first!) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.)) (has_type (Poly%core!option.Option. _last!) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) (has_type (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader _first! _last!)) TYPE%lib!page_organization.DlistHeader.)) :pattern ((has_type (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader _first! _last!)) TYPE%lib!page_organization.DlistHeader.)))))
(assert (forall ((x lib!page_organization.DlistHeader.)) (! (= (lib!page_organization.DlistHeader./DlistHeader/first x) (lib!page_organization.DlistHeader./DlistHeader/?first x)) :pattern ((lib!page_organization.DlistHeader./DlistHeader/first x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistHeader.) (has_type (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. x)) (has_type x TYPE%lib!page_organization.DlistHeader.)))))
(assert (forall ((x lib!page_organization.DlistHeader.)) (! (= (lib!page_organization.DlistHeader./DlistHeader/last x) (lib!page_organization.DlistHeader./DlistHeader/?last x)) :pattern ((lib!page_organization.DlistHeader./DlistHeader/last x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistHeader.) (has_type (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. x)) (has_type x TYPE%lib!page_organization.DlistHeader.)))))
(assert (forall ((x lib!page_organization.DlistEntry.)) (! (= x (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. x))) :pattern ((Poly%lib!page_organization.DlistEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistEntry.) (= x (Poly%lib!page_organization.DlistEntry. (%Poly%lib!page_organization.DlistEntry. x)))) :pattern ((has_type x TYPE%lib!page_organization.DlistEntry.)))))
(assert (forall ((_prev! core!option.Option.) (_next! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _prev!) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.)) (has_type (Poly%core!option.Option. _next!) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) (has_type (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry _prev! _next!)) TYPE%lib!page_organization.DlistEntry.)) :pattern ((has_type (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry _prev! _next!)) TYPE%lib!page_organization.DlistEntry.)))))
(assert (forall ((x lib!page_organization.DlistEntry.)) (! (= (lib!page_organization.DlistEntry./DlistEntry/prev x) (lib!page_organization.DlistEntry./DlistEntry/?prev x)) :pattern ((lib!page_organization.DlistEntry./DlistEntry/prev x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistEntry.) (has_type (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. x)) (has_type x TYPE%lib!page_organization.DlistEntry.)))))
(assert (forall ((x lib!page_organization.DlistEntry.)) (! (= (lib!page_organization.DlistEntry./DlistEntry/next x) (lib!page_organization.DlistEntry./DlistEntry/?next x)) :pattern ((lib!page_organization.DlistEntry./DlistEntry/next x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistEntry.) (has_type (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. x)) (has_type x TYPE%lib!page_organization.DlistEntry.)))))
(assert (forall ((x lib!page_organization.PageHeaderKind.)) (! (= x (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. x))) :pattern ((Poly%lib!page_organization.PageHeaderKind. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageHeaderKind.) (= x (Poly%lib!page_organization.PageHeaderKind. (%Poly%lib!page_organization.PageHeaderKind. x)))) :pattern ((has_type x TYPE%lib!page_organization.PageHeaderKind.)))))
(assert (forall ((x lib!page_organization.PageHeaderKind.)) (! (= (lib!page_organization.PageHeaderKind./Normal/0 x) (lib!page_organization.PageHeaderKind./Normal/?0 x)) :pattern ((lib!page_organization.PageHeaderKind./Normal/0 x)))))
(assert (forall ((x lib!page_organization.PageHeaderKind.)) (! (= (lib!page_organization.PageHeaderKind./Normal/1 x) (lib!page_organization.PageHeaderKind./Normal/?1 x)) :pattern ((lib!page_organization.PageHeaderKind./Normal/1 x)))))
(assert (forall ((x lib!page_organization.PageHeaderKind.)) (! (has_type (Poly%lib!page_organization.PageHeaderKind. x) TYPE%lib!page_organization.PageHeaderKind.) :pattern ((has_type (Poly%lib!page_organization.PageHeaderKind. x) TYPE%lib!page_organization.PageHeaderKind.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= x (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. x))) :pattern ((Poly%lib!page_organization.PageData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (= x (Poly%lib!page_organization.PageData. (%Poly%lib!page_organization.PageData. x)))) :pattern ((has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((_dlist_entry! core!option.Option.) (_count! core!option.Option.) (_offset! core!option.Option.) (_is_used! Bool) (_full! core!option.Option.) (_page_header_kind! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _dlist_entry!) (TYPE%core!option.Option. $ TYPE%lib!page_organization.DlistEntry.)) (has_type (Poly%core!option.Option. _count!) (TYPE%core!option.Option. $ NAT)) (has_type (Poly%core!option.Option. _offset!) (TYPE%core!option.Option. $ NAT)) (has_type (Poly%core!option.Option. _full!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _page_header_kind!) (TYPE%core!option.Option. $ TYPE%lib!page_organization.PageHeaderKind.))) (has_type (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData _dlist_entry! _count! _offset! _is_used! _full! _page_header_kind!)) TYPE%lib!page_organization.PageData.)) :pattern ((has_type (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData _dlist_entry! _count! _offset! _is_used! _full! _page_header_kind!)) TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/dlist_entry x) (lib!page_organization.PageData./PageData/?dlist_entry x)) :pattern ((lib!page_organization.PageData./PageData/dlist_entry x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ TYPE%lib!page_organization.DlistEntry.))) :pattern ((lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/count x) (lib!page_organization.PageData./PageData/?count x)) :pattern ((lib!page_organization.PageData./PageData/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ NAT))) :pattern ((lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/offset x) (lib!page_organization.PageData./PageData/?offset x)) :pattern ((lib!page_organization.PageData./PageData/offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ NAT))) :pattern ((lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/is_used x) (lib!page_organization.PageData./PageData/?is_used x)) :pattern ((lib!page_organization.PageData./PageData/is_used x)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/full x) (lib!page_organization.PageData./PageData/?full x)) :pattern ((lib!page_organization.PageData./PageData/full x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/page_header_kind x) (lib!page_organization.PageData./PageData/?page_header_kind x)) :pattern ((lib!page_organization.PageData./PageData/page_header_kind x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ TYPE%lib!page_organization.PageHeaderKind.))) :pattern ((lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.SegmentData.)) (! (= x (%Poly%lib!page_organization.SegmentData. (Poly%lib!page_organization.SegmentData. x))) :pattern ((Poly%lib!page_organization.SegmentData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.SegmentData.) (= x (Poly%lib!page_organization.SegmentData. (%Poly%lib!page_organization.SegmentData. x)))) :pattern ((has_type x TYPE%lib!page_organization.SegmentData.)))))
(assert (forall ((x lib!page_organization.SegmentData.)) (! (= (lib!page_organization.SegmentData./SegmentData/used x) (lib!page_organization.SegmentData./SegmentData/?used x)) :pattern ((lib!page_organization.SegmentData./SegmentData/used x)))))
(assert (forall ((x lib!page_organization.SegmentData.)) (! (has_type (Poly%lib!page_organization.SegmentData. x) TYPE%lib!page_organization.SegmentData.) :pattern ((has_type (Poly%lib!page_organization.SegmentData. x) TYPE%lib!page_organization.SegmentData.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= x (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. x))) :pattern ((Poly%lib!page_organization.Popped. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (= x (Poly%lib!page_organization.Popped. (%Poly%lib!page_organization.Popped. x)))) :pattern ((has_type x TYPE%lib!page_organization.Popped.)))))
(assert (has_type (Poly%lib!page_organization.Popped. lib!page_organization.Popped./No) TYPE%lib!page_organization.Popped.))
(assert (forall ((_0! lib!tokens.PageId.) (_1! Bool)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./Ready _0! _1!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./Ready _0! _1!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./Ready/0 x) (lib!page_organization.Popped./Ready/?0 x)) :pattern ((lib!page_organization.Popped./Ready/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./Ready/1 x) (lib!page_organization.Popped./Ready/?1 x)) :pattern ((lib!page_organization.Popped./Ready/1 x)))))
(assert (forall ((_0! lib!tokens.PageId.) (_1! Bool)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./Used _0! _1!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./Used _0! _1!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./Used/0 x) (lib!page_organization.Popped./Used/?0 x)) :pattern ((lib!page_organization.Popped./Used/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./Used/1 x) (lib!page_organization.Popped./Used/?1 x)) :pattern ((lib!page_organization.Popped./Used/1 x)))))
(assert (forall ((_0! lib!tokens.SegmentId.)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./SegmentCreating _0!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./SegmentCreating _0!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./SegmentCreating/0 x) (lib!page_organization.Popped./SegmentCreating/?0 x)) :pattern ((lib!page_organization.Popped./SegmentCreating/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((_0! lib!tokens.SegmentId.) (_1! Int) (_2! Int) (_3! Bool)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./VeryUnready _0! _1! _2! _3!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./VeryUnready _0! _1! _2! _3!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./VeryUnready/0 x) (lib!page_organization.Popped./VeryUnready/?0 x)) :pattern ((lib!page_organization.Popped./VeryUnready/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./VeryUnready/1 x) (lib!page_organization.Popped./VeryUnready/?1 x)) :pattern ((lib!page_organization.Popped./VeryUnready/1 x)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./VeryUnready/2 x) (lib!page_organization.Popped./VeryUnready/?2 x)) :pattern ((lib!page_organization.Popped./VeryUnready/2 x)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./VeryUnready/3 x) (lib!page_organization.Popped./VeryUnready/?3 x)) :pattern ((lib!page_organization.Popped./VeryUnready/3 x)))))
(assert (forall ((_0! lib!tokens.SegmentId.) (_1! Int)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./SegmentFreeing _0! _1!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./SegmentFreeing _0! _1!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./SegmentFreeing/0 x) (lib!page_organization.Popped./SegmentFreeing/?0 x)) :pattern ((lib!page_organization.Popped./SegmentFreeing/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./SegmentFreeing/1 x) (lib!page_organization.Popped./SegmentFreeing/?1 x)) :pattern ((lib!page_organization.Popped./SegmentFreeing/1 x)))))
(assert (forall ((_0! lib!tokens.SegmentId.)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./ExtraCount _0!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./ExtraCount _0!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./ExtraCount/0 x) (lib!page_organization.Popped./ExtraCount/?0 x)) :pattern ((lib!page_organization.Popped./ExtraCount/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!linked_list.Node.)) (! (= x (%Poly%lib!linked_list.Node. (Poly%lib!linked_list.Node. x))) :pattern ((Poly%lib!linked_list.Node. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.Node.) (= x (Poly%lib!linked_list.Node. (%Poly%lib!linked_list.Node. x)))) :pattern ((has_type x TYPE%lib!linked_list.Node.)))))
(assert (forall ((x lib!linked_list.Node.)) (! (= (lib!linked_list.Node./Node/ptr x) (lib!linked_list.Node./Node/?ptr x)) :pattern ((lib!linked_list.Node./Node/ptr x)))))
(assert (forall ((x lib!linked_list.Node.)) (! (has_type (Poly%lib!linked_list.Node. x) TYPE%lib!linked_list.Node.) :pattern ((has_type (Poly%lib!linked_list.Node. x) TYPE%lib!linked_list.Node.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= x (%Poly%lib!linked_list.ThreadLLSimple. (Poly%lib!linked_list.ThreadLLSimple. x))) :pattern ((Poly%lib!linked_list.ThreadLLSimple. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (= x (Poly%lib!linked_list.ThreadLLSimple. (%Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_heap_id! lib!tokens.HeapId.) (_atomic! vstd!atomic_ghost.AtomicPtr.)) (! (=> (and (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) (has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple./ThreadLLSimple _instance! _heap_id! _atomic!)) TYPE%lib!linked_list.ThreadLLSimple.)) :pattern ((has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple./ThreadLLSimple _instance! _heap_id! _atomic!)) TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?instance x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?heap_id x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!tokens.HeapId. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?atomic x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(define-fun is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ ((c lib!linked_list.ThreadLLSimple.)) Bool ((_ is lib!linked_list.ThreadLLSimple./ThreadLLSimple) c))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (=> (is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x))) (height (Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x)))))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (=> (is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x))) (height (Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x)))))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (! (= x (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x))) :pattern ((Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) (= x (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x)))) :pattern ((has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (! (has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) :pattern ((has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= x (%Poly%lib!linked_list.BlockSizePageId. (Poly%lib!linked_list.BlockSizePageId. x))) :pattern ((Poly%lib!linked_list.BlockSizePageId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (= x (Poly%lib!linked_list.BlockSizePageId. (%Poly%lib!linked_list.BlockSizePageId. x)))) :pattern ((has_type x TYPE%lib!linked_list.BlockSizePageId.)))))
(assert (forall ((_block_size! Int) (_page_id! lib!tokens.PageId.)) (! (=> (and (<= 0 _block_size!) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId./BlockSizePageId _block_size! _page_id!)) TYPE%lib!linked_list.BlockSizePageId.)) :pattern ((has_type (Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId./BlockSizePageId _block_size! _page_id!)) TYPE%lib!linked_list.BlockSizePageId.)))))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size x) (lib!linked_list.BlockSizePageId./BlockSizePageId/?block_size x)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (<= 0 (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. x)))) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. x)) (has_type x TYPE%lib!linked_list.BlockSizePageId.)))))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id x) (lib!linked_list.BlockSizePageId./BlockSizePageId/?page_id x)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. x)) (has_type x TYPE%lib!linked_list.BlockSizePageId.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= x (%Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly%lib!linked_list.ThreadLLWithDelayBits. x))) :pattern ((Poly%lib!linked_list.ThreadLLWithDelayBits. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (= x (Poly%lib!linked_list.ThreadLLWithDelayBits. (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_atomic! vstd!atomic_ghost.AtomicPtr.) (_emp! lib!linked_list.StuffAgree.x.) (_emp_inst! lib!linked_list.StuffAgree.Instance.)) (! (=> (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits _instance! _atomic! _emp! _emp_inst!)) TYPE%lib!linked_list.ThreadLLWithDelayBits.)) :pattern ((has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits _instance! _atomic! _emp! _emp_inst!)) TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?instance x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?atomic x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)) (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp x)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp_inst x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst x)))))
(define-fun is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ ((c lib!linked_list.ThreadLLWithDelayBits.)) Bool ((_ is lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits) c))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (=> (is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x))) (height (Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x)))))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (=> (is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x))) (height (Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x)))))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (! (= x (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x))) :pattern ((Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) (= x (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x)))) :pattern ((has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (! (has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) :pattern ((has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!invariant.InvariantPredicate. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%core!marker.Freeze. (Dcr Type) Bool)
(declare-fun tr_bound%core!fmt.Debug. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.Eq. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.Ord. (Dcr Type) Bool)
(declare-fun tr_bound%core!hash.Hash. (Dcr Type) Bool)
(declare-fun tr_bound%core!ptr.metadata.Pointee. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (G&. Dcr) (G& Type)) (! true :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Self%&. Self%& K&. K& V&. V& G&. G&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! true :pattern ((tr_bound%vstd!invariant.InvariantPredicate. Self%&. Self%& K&. K& V&. V&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!marker.Freeze. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!fmt.Debug. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!cmp.Eq. Self%&. Self%&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Self%&. Self%&)) :pattern ((tr_bound%core!cmp.Eq. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) :pattern ((tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!cmp.Ord. Self%&. Self%&) (and (tr_bound%core!cmp.Eq. Self%&. Self%&) (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Self%&. Self%&))) :pattern ((tr_bound%core!cmp.Ord. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!hash.Hash. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!ptr.metadata.Pointee. Self%&. Self%&) (and (tr_bound%core!marker.Freeze. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!fmt.Debug. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!hash.Hash. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!cmp.Ord. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!cmp.PartialOrd. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!cmp.PartialEq. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!cmp.Eq. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)) (tr_bound%core!clone.Clone. (proj%%core!ptr.metadata.Pointee./Metadata Self%&. Self%&) (proj%core!ptr.metadata.Pointee./Metadata Self%&. Self%&)))) :pattern ((tr_bound%core!ptr.metadata.Pointee. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 16)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 16)) (UINT 16)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 64)) (SINT 64)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::num::usize_specs::wrapping_add")
(declare-fun vstd!std_specs.num.usize_specs.wrapping_add.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::bits::u64_leading_zeros")
(declare-fun vstd!std_specs.bits.u64_leading_zeros.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_specs::spec_addr")
(declare-fun vstd!raw_ptr.ptr_mut_specs.spec_addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_from_data")
(declare-fun vstd!raw_ptr.ptr_mut_from_data.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%9::id")
(declare-fun vstd!atomic.impl&%9.id.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%23::id")
(declare-fun vstd!atomic.impl&%23.id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::invariant::impl&%0::constant")
(declare-fun vstd!invariant.impl&%0.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::well_formed")
(declare-fun vstd!atomic_ghost.impl&%1.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::constant")
(declare-fun vstd!atomic_ghost.impl&%1.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%23::well_formed")
(declare-fun vstd!atomic_ghost.impl&%23.well_formed.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%23::constant")
(declare-fun vstd!atomic_ghost.impl&%23.constant.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::cell::impl&%2::view")
(declare-fun vstd!cell.impl&%2.view.? (Dcr Type Poly) vstd!cell.PointsToData.)
(set-info :comment ";; Function-Decl vstd::cell::impl&%3::id")
(declare-fun vstd!cell.impl&%3.id.? (Dcr Type Poly) vstd!cell.CellId.)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%0::null")
(declare-fun vstd!raw_ptr.impl&%0.null.? (Poly) vstd!raw_ptr.Provenance.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::ptr")
(declare-fun vstd!raw_ptr.impl&%6.ptr.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::opt_value")
(declare-fun vstd!raw_ptr.impl&%6.opt_value.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_null_mut")
(declare-fun vstd!raw_ptr.ptr_null_mut.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::spec_cast_ptr_to_usize")
(declare-fun vstd!raw_ptr.spec_cast_ptr_to_usize.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::is_init")
(declare-fun vstd!raw_ptr.impl&%6.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%2::arrow_0")
(declare-fun vstd!raw_ptr.impl&%2.arrow_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::value")
(declare-fun vstd!raw_ptr.impl&%7.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::value")
(declare-fun vstd!raw_ptr.impl&%6.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%10::provenance")
(declare-fun vstd!raw_ptr.impl&%10.provenance.? (Poly) vstd!raw_ptr.Provenance.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%11::provenance")
(declare-fun vstd!raw_ptr.impl&%11.provenance.? (Poly) vstd!raw_ptr.Provenance.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%11::dom")
(declare-fun vstd!raw_ptr.impl&%11.dom.? (Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::set_int_range")
(declare-fun vstd!set_lib.set_int_range.? (Poly Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl vstd::shared::impl&%0::view")
(declare-fun vstd!shared.impl&%0.view.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::layout::is_heap_ptr")
(declare-fun lib!layout.is_heap_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::INTPTR_SHIFT")
(declare-fun lib!config.INTPTR_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SLICE_SHIFT")
(declare-fun lib!config.SLICE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SEGMENT_SHIFT")
(declare-fun lib!config.SEGMENT_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SEGMENT_SIZE")
(declare-fun lib!config.SEGMENT_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::layout::segment_start")
(declare-fun lib!layout.segment_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::config::SLICE_SIZE")
(declare-fun lib!config.SLICE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::SLICES_PER_SEGMENT")
(declare-fun lib!config.SLICES_PER_SEGMENT.? () Int)
(set-info :comment ";; Function-Decl lib::config::INTPTR_SIZE")
(declare-fun lib!config.INTPTR_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::layout::start_offset")
(declare-fun lib!layout.start_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::linked_list::LL::wf")
(declare-fun lib!linked_list.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::LL::instance")
(declare-fun lib!linked_list.impl&%2.instance.? (Poly) lib!tokens.Mim.Instance.)
(set-info :comment ";; Function-Decl lib::linked_list::LL::fixed_page")
(declare-fun lib!linked_list.impl&%2.fixed_page.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::LL::heap_id")
(declare-fun lib!linked_list.impl&%2.heap_id.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLSimple::wf")
(declare-fun lib!linked_list.impl&%4.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_tld_ptr")
(declare-fun lib!layout.is_tld_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::TldPtr::wf")
(declare-fun lib!types.impl&%27.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Heap::wf")
(declare-fun lib!types.impl&%16.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::HeapSharedAccess::wf")
(declare-fun lib!types.impl&%17.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::SEGMENT_BIN_MAX")
(declare-fun lib!config.SEGMENT_BIN_MAX.? () Int)
(set-info :comment ";; Function-Decl vstd::state_machine_internal::impl&%3::update_at_index")
(declare-fun vstd!state_machine_internal.impl&%3.update_at_index.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::state_machine_internal::impl&%2::update_at_index")
(declare-fun vstd!state_machine_internal.impl&%2.update_at_index.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::bin_sizes::smallest_sbin_fitting_size")
(declare-fun lib!bin_sizes.smallest_sbin_fitting_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::config::BIN_HUGE")
(declare-fun lib!config.BIN_HUGE.? () Int)
(set-info :comment ";; Function-Decl lib::bin_sizes::valid_bin_idx")
(declare-fun lib!bin_sizes.valid_bin_idx.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::BIN_FULL")
(declare-fun lib!config.BIN_FULL.? () Int)
(set-info :comment ";; Function-Decl lib::bin_sizes::size_of_bin")
(declare-fun lib!bin_sizes.size_of_bin.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::config::SMALL_PAGE_SHIFT")
(declare-fun lib!config.SMALL_PAGE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_PAGE_SHIFT")
(declare-fun lib!config.MEDIUM_PAGE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_PAGE_SIZE")
(declare-fun lib!config.MEDIUM_PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_OBJ_SIZE_MAX")
(declare-fun lib!config.MEDIUM_OBJ_SIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::insert_back")
(declare-fun lib!page_organization.PageOrg.impl&%4.insert_back.? (Poly Poly Poly) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list_back")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list_back.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::valid_used_page")
(declare-fun lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::my_inst::view")
(declare-fun lib!tokens.Mim.impl&%5.view.? (Poly) lib!tokens.Mim.my_inst_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_local_state::view")
(declare-fun lib!tokens.Mim.impl&%8.view.? (Poly) lib!tokens.Mim.thread_local_state_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_checked_state::view")
(declare-fun lib!tokens.Mim.impl&%17.view.? (Poly) lib!tokens.Mim.thread_checked_state_token_data.)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_le")
(declare-fun vstd!set.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::BoolAgree::x::view")
(declare-fun lib!types.BoolAgree.impl&%4.view.? (Poly) lib!types.BoolAgree.x_token_data.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::public_invariant")
(declare-fun lib!page_organization.PageOrg.impl&%4.public_invariant.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_basics")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_basics.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::page_id_domain")
(declare-fun lib!page_organization.PageOrg.impl&%4.page_id_domain.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::count_off0")
(declare-fun lib!page_organization.PageOrg.impl&%4.count_off0.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::end_is_unused")
(declare-fun lib!page_organization.PageOrg.impl&%4.end_is_unused.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ucount")
(declare-fun lib!page_organization.PageOrg.impl&%4.ucount.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_ec")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_ec.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::count_is_right")
(declare-fun lib!page_organization.PageOrg.impl&%4.count_is_right.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::is_unused_header")
(declare-fun lib!page_organization.is_unused_header.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::is_in_lls")
(declare-fun lib!page_organization.is_in_lls.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::is_used_header")
(declare-fun lib!page_organization.is_used_header.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::seg_free_prefix")
(declare-fun lib!page_organization.PageOrg.impl&%4.seg_free_prefix.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::good_range_very_unready")
(declare-fun lib!page_organization.PageOrg.impl&%4.good_range_very_unready.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_basics")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_basics.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::data_for_used_header")
(declare-fun lib!page_organization.PageOrg.impl&%4.data_for_used_header.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::inv_segment_creating")
(declare-fun lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::inv_very_unready")
(declare-fun lib!page_organization.PageOrg.impl&%4.inv_very_unready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::inv_ready")
(declare-fun lib!page_organization.PageOrg.impl&%4.inv_ready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::inv_used")
(declare-fun lib!page_organization.PageOrg.impl&%4.inv_used.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::data_for_unused_header")
(declare-fun lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::get_prev")
(declare-fun lib!page_organization.get_prev.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::page_organization::get_next")
(declare-fun lib!page_organization.get_next.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::page_organization::valid_ll_i")
(declare-fun lib!page_organization.valid_ll_i.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::valid_ll")
(declare-fun lib!page_organization.valid_ll.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_valid_unused")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_valid_used")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_valid_unused2")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_valid_used2")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_exists_in_some_list")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::attached_ranges_segment")
(declare-fun lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::attached_ranges")
(declare-fun lib!page_organization.PageOrg.impl&%4.attached_ranges.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::x::view")
(declare-fun lib!linked_list.StuffAgree.impl&%4.view.? (Poly) lib!linked_list.StuffAgree.x_token_data.)
(set-info :comment ";; Function-Decl lib::os_mem::OsMem::view")
(declare-fun lib!os_mem.impl&%1.view.? (Poly) lib!os_mem.OsMemData.)
(set-info :comment ";; Function-Decl lib::os_mem::MemChunk::wf_os")
(declare-fun lib!os_mem.impl&%0.wf_os.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::os_mem::MemChunk::wf")
(declare-fun lib!os_mem.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::os_mem::MemChunk::range_os")
(declare-fun lib!os_mem.impl&%0.range_os.? (Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl lib::os_mem::MemChunk::os_exact_range")
(declare-fun lib!os_mem.impl&%0.os_exact_range.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::os_mem::MemChunk::range_os_rw")
(declare-fun lib!os_mem.impl&%0.range_os_rw.? (Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl lib::thread::IsThread::view")
(declare-fun lib!thread.impl&%2.view.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_sub")
(declare-fun vstd!set.impl&%0.spec_sub.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list_back_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list_back_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::invariant")
(declare-fun lib!page_organization.PageOrg.impl&%4.invariant.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::LL::page_id")
(declare-fun lib!linked_list.impl&%2.page_id.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::linked_list::LL::block_size")
(declare-fun lib!linked_list.impl&%2.block_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::linked_list::LL::len")
(declare-fun lib!linked_list.impl&%2.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::types::PageInner::wf")
(declare-fun lib!types.impl&%0.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageInner::zeroed")
(declare-fun lib!types.impl&%0.zeroed.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageInner::zeroed_except_block_size")
(declare-fun lib!types.impl&%0.zeroed_except_block_size.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::AtomicHeapPtr::wf")
(declare-fun lib!types.impl&%2.wf.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::AtomicHeapPtr::is_empty")
(declare-fun lib!types.impl&%3.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLWithDelayBits::wf")
(declare-fun lib!linked_list.impl&%7.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLWithDelayBits::is_empty")
(declare-fun lib!linked_list.impl&%8.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLWithDelayBits::page_id")
(declare-fun lib!linked_list.impl&%8.page_id.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLWithDelayBits::block_size")
(declare-fun lib!linked_list.impl&%8.block_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::types::Page::wf")
(declare-fun lib!types.impl&%4.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Page::wf_secondary")
(declare-fun lib!types.impl&%4.wf_secondary.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Page::wf_unused")
(declare-fun lib!types.impl&%4.wf_unused.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::SIZEOF_SEGMENT_HEADER")
(declare-fun lib!config.SIZEOF_SEGMENT_HEADER.? () Int)
(set-info :comment ";; Function-Decl lib::config::SIZEOF_PAGE_HEADER")
(declare-fun lib!config.SIZEOF_PAGE_HEADER.? () Int)
(set-info :comment ";; Function-Decl lib::layout::page_header_start")
(declare-fun lib!layout.page_header_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::layout::is_page_ptr")
(declare-fun lib!layout.is_page_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageSharedAccess::wf")
(declare-fun lib!types.impl&%5.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageSharedAccess::wf_secondary")
(declare-fun lib!types.impl&%5.wf_secondary.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageSharedAccess::wf_unused")
(declare-fun lib!types.impl&%5.wf_unused.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::wf_reserved")
(declare-fun lib!types.wf_reserved.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageLocalAccess::wf")
(declare-fun lib!types.impl&%6.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageLocalAccess::wf_unused")
(declare-fun lib!types.impl&%6.wf_unused.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageFullAccess::wf_empty_page_global")
(declare-fun lib!types.impl&%7.wf_empty_page_global.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::SegmentHeader::wf")
(declare-fun lib!types.impl&%11.wf.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_segment_ptr")
(declare-fun lib!layout.is_segment_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::SegmentSharedAccess::wf")
(declare-fun lib!types.impl&%12.wf.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::SegmentLocalAccess::wf")
(declare-fun lib!types.impl&%13.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::pages_free_direct_match")
(declare-fun lib!types.pages_free_direct_match.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::SMALL_WSIZE_MAX")
(declare-fun lib!config.SMALL_WSIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::config::PAGES_DIRECT")
(declare-fun lib!config.PAGES_DIRECT.? () Int)
(set-info :comment ";; Function-Decl lib::bin_sizes::smallest_bin_fitting_size")
(declare-fun lib!bin_sizes.smallest_bin_fitting_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::types::pages_free_direct_is_correct")
(declare-fun lib!types.pages_free_direct_is_correct.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::HeapLocalAccess::wf_basic")
(declare-fun lib!types.impl&%18.wf_basic.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::HeapLocalAccess::wf")
(declare-fun lib!types.impl&%18.wf.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::common_preserves")
(declare-fun lib!types.common_preserves.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::os_mem::MemChunk::os_rw_bytes")
(declare-fun lib!os_mem_util.impl&%0.os_rw_bytes.? (Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl lib::os_mem_util::segment_info_range")
(declare-fun lib!os_mem_util.segment_info_range.? (Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl lib::os_mem_util::mem_chunk_good1")
(declare-fun lib!os_mem_util.mem_chunk_good1.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::commit_mask::CommitMask::bytes")
(declare-fun lib!commit_mask.impl&%0.bytes.? (Poly Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl lib::types::Local::commit_mask")
(declare-fun lib!types.impl&%21.commit_mask.? (Poly Poly) lib!commit_mask.CommitMask.)
(set-info :comment ";; Function-Decl lib::types::Local::decommit_mask")
(declare-fun lib!types.impl&%21.decommit_mask.? (Poly Poly) lib!commit_mask.CommitMask.)
(set-info :comment ";; Function-Decl lib::types::Local::is_used_primary")
(declare-fun lib!types.impl&%21.is_used_primary.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Local::block_size")
(declare-fun lib!types.impl&%21.block_size.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::types::Local::page_capacity")
(declare-fun lib!types.impl&%21.page_capacity.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::types::Local::segment_pages_range_total")
(declare-fun lib!os_mem_util.impl&%1.segment_pages_range_total.? (Poly Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl lib::types::Local::page_count")
(declare-fun lib!types.impl&%21.page_count.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::types::Local::segment_pages_used_total")
(declare-fun lib!os_mem_util.impl&%1.segment_pages_used_total.? (Poly Poly) vstd!set.Set<int.>.)
(set-info :comment ";; Function-Decl lib::types::Local::mem_chunk_good")
(declare-fun lib!os_mem_util.impl&%1.mem_chunk_good.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_page_ptr_opt")
(declare-fun lib!layout.is_page_ptr_opt.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::page_organization_queues_match")
(declare-fun lib!types.page_organization_queues_match.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::page_organization_used_queues_match")
(declare-fun lib!types.page_organization_used_queues_match.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::flags::flags1_in_full")
(declare-fun lib!flags.flags1_in_full.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageInner::in_full")
(declare-fun lib!flags.impl&%0.in_full.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_SegmentCreating")
(declare-fun lib!page_organization.impl&%2.is_SegmentCreating.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_Ready")
(declare-fun lib!page_organization.impl&%2.is_Ready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_Ready_0")
(declare-fun lib!page_organization.impl&%2.get_Ready_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_VeryUnready")
(declare-fun lib!page_organization.impl&%2.is_VeryUnready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_VeryUnready_0")
(declare-fun lib!page_organization.impl&%2.get_VeryUnready_0.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_VeryUnready_1")
(declare-fun lib!page_organization.impl&%2.get_VeryUnready_1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::types::page_organization_pages_match_data")
(declare-fun lib!types.page_organization_pages_match_data.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::page_organization_pages_match")
(declare-fun lib!types.page_organization_pages_match.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::page_organization_segments_match")
(declare-fun lib!types.page_organization_segments_match.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::page_organization_matches_token_page")
(declare-fun lib!types.page_organization_matches_token_page.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Local::page_organization_valid")
(declare-fun lib!types.impl&%21.page_organization_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Local::wf_main")
(declare-fun lib!types.impl&%21.wf_main.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Local::wf")
(declare-fun lib!types.impl&%21.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Local::wf_basic")
(declare-fun lib!types.impl&%21.wf_basic.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Local::page_reserved")
(declare-fun lib!types.impl&%21.page_reserved.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::types::HeapPtr::wf")
(declare-fun lib!types.impl&%24.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::HeapPtr::is_in")
(declare-fun lib!types.impl&%24.is_in.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::local_page_count_update")
(declare-fun lib!types.local_page_count_update.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PagePtr::wf")
(declare-fun lib!types.impl&%33.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PagePtr::is_in")
(declare-fun lib!types.impl&%33.is_in.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PagePtr::is_used_and_primary")
(declare-fun lib!types.impl&%33.is_used_and_primary.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::flags::flags1_has_aligned")
(declare-fun lib!flags.flags1_has_aligned.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::PageInner::has_aligned")
(declare-fun lib!flags.impl&%0.has_aligned.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::bin_sizes::pfd_lower")
(declare-fun lib!bin_sizes.pfd_lower.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::bin_sizes::pfd_upper")
(declare-fun lib!bin_sizes.pfd_upper.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::queues::pfd_direct_update")
(declare-fun lib!queues.pfd_direct_update.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::queues::local_direct_update")
(declare-fun lib!queues.local_direct_update.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::num::usize_specs::wrapping_add")
(assert (fuel_bool_default fuel%vstd!std_specs.num.usize_specs.wrapping_add.))
(assert (=> (fuel_bool fuel%vstd!std_specs.num.usize_specs.wrapping_add.) (forall ((x! Poly) (y! Poly)) (! (= (vstd!std_specs.num.usize_specs.wrapping_add.? x! y!) (ite (> (Add (%I x!) (%I y!)) (- (uHi SZ) 1)) (uClip SZ (Sub (Add (%I x!) (%I y!)) (Add (Sub (- (uHi SZ) 1) 0) 1))) (uClip SZ (Add (%I x!) (%I y!))))) :pattern ((vstd!std_specs.num.usize_specs.wrapping_add.? x! y!))))))
(assert (forall ((x! Poly) (y! Poly)) (! (=> (and (has_type x! (UINT SZ)) (has_type y! (UINT SZ))) (uInv SZ (vstd!std_specs.num.usize_specs.wrapping_add.? x! y!))) :pattern ((vstd!std_specs.num.usize_specs.wrapping_add.? x! y!)))))
(set-info :comment ";; Function-Specs core::num::impl&%11::wrapping_add")
(declare-fun ens%core!num.impl&%11.wrapping_add. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (res! Int)) (! (= (ens%core!num.impl&%11.wrapping_add. x! y! res!) (and (uInv SZ res!) (= res! (vstd!std_specs.num.usize_specs.wrapping_add.? (I x!) (I y!))))) :pattern ((ens%core!num.impl&%11.wrapping_add. x! y! res!)))))
(set-info :comment ";; Broadcast vstd::std_specs::bits::axiom_u64_leading_zeros")
(assert (=> (fuel_bool fuel%vstd!std_specs.bits.axiom_u64_leading_zeros.) (forall ((i! Poly)) (! (=> (has_type i! (UINT 64)) (and (and (and (and (let ((tmp%%$ (vstd!std_specs.bits.u64_leading_zeros.? i!))) (and (<= 0 tmp%%$) (<= tmp%%$ 64))) (= (= (%I i!) 0) (= (vstd!std_specs.bits.u64_leading_zeros.? i!) 64))) (=> (let ((tmp%%$ (vstd!std_specs.bits.u64_leading_zeros.? i!))) (and (<= 0 tmp%%$) (< tmp%%$ 64))) (not (= (uClip 64 (bitand (I (uClip 64 (bitshr (I (%I i!)) (I (uClip 64 (Sub 63 (uClip 64 (vstd!std_specs.bits.u64_leading_zeros.? i!)))))))) (I 1))) 0)))) (= (uClip 64 (bitshr (I (%I i!)) (I (uClip 64 (Sub 64 (uClip 64 (vstd!std_specs.bits.u64_leading_zeros.? i!))))))) 0)) (forall ((j$ Poly)) (! (=> (has_type j$ (UINT 64)) (=> (and (<= (Sub 64 (vstd!std_specs.bits.u64_leading_zeros.? i!)) (%I j$)) (< (%I j$) 64)) (= (uClip 64 (bitand (I (uClip 64 (bitshr (I (%I i!)) (I (%I j$))))) (I 1))) 0))) :pattern ((uClip 64 (bitshr (I (%I i!)) (I (%I j$))))))))) :pattern ((vstd!std_specs.bits.u64_leading_zeros.? i!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_specs::spec_addr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.) (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (= (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))))))
(assert (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (=> (has_type p! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!)))))
(set-info :comment ";; Function-Specs core::ptr::mut_ptr::impl&%0::addr")
(declare-fun ens%core!ptr.mut_ptr.impl&%0.addr. (Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (p! Poly) (addr! Int)) (! (= (ens%core!ptr.mut_ptr.impl&%0.addr. T&. T& p! addr!) (and (uInv SZ addr!) (= addr! (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))))) :pattern ((ens%core!ptr.mut_ptr.impl&%0.addr. T&. T& p! addr!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_from_data")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Specs vstd::array::impl&%3::set")
(declare-fun req%vstd!array.impl&%3.set. (Dcr Type Dcr Type %%Function%% Int Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! %%Function%%) (idx! Int) (t! Poly)) (! (= (req%vstd!array.impl&%3.set. T&. T& N&. N& pre%self! idx! t!) (=> %%global_location_label%%5 (and (<= 0 idx!) (< idx! (const_int N&))))) :pattern ((req%vstd!array.impl&%3.set. T&. T& N&. N& pre%self! idx! t!)))))
(declare-fun ens%vstd!array.impl&%3.set. (Dcr Type Dcr Type %%Function%% %%Function%% Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! %%Function%%) (self! %%Function%%) (idx! Int) (t! Poly)) (! (= (ens%vstd!array.impl&%3.set. T&. T& N&. N& pre%self! self! idx! t!) (and (has_type (Poly%array%. self!) (ARRAY T&. T& N&. N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) (Poly%array%. self!)) (vstd!seq.Seq.update.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) (Poly%array%. pre%self!)) (I idx!) t!)))) :pattern ((ens%vstd!array.impl&%3.set. T&. T& N&. N& pre%self! self! idx! t!)))))
(set-info :comment ";; Function-Specs vstd::array::array_index_get")
(declare-fun req%vstd!array.array_index_get. (Dcr Type Dcr Type %%Function%% Int) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! %%Function%%) (i! Int)) (! (= (req%vstd!array.array_index_get. T&. T& N&. N& ar! i!) (=> %%global_location_label%%6 (and (<= 0 i!) (< i! (const_int N&))))) :pattern ((req%vstd!array.array_index_get. T&. T& N&. N& ar! i!)))))
(declare-fun ens%vstd!array.array_index_get. (Dcr Type Dcr Type %%Function%% Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! %%Function%%) (i! Int) (out! Poly)) (! (= (ens%vstd!array.array_index_get. T&. T& N&. N& ar! i! out!) (and (has_type out! T&) (= out! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) (Poly%array%. ar!)) (I i!))))) :pattern ((ens%vstd!array.array_index_get. T&. T& N&. N& ar! i! out!)))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (UINT 64) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))))))
(set-info :comment ";; Function-Axioms vstd::invariant::impl&%0::constant")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!invariant.AtomicInvariant. K&. K& V&. V& Pred&. Pred&)) (has_type (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) K&)) :pattern ((vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (PTR T&. T&) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%23::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%23.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%23.well_formed.) (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%23.well_formed.? T&. T& K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. self!)))))) (vstd!atomic.impl&%23.id.? T&. T& (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. self!))))) :pattern ((vstd!atomic_ghost.impl&%23.well_formed.? T&. T& K&. K& G&. G& Pred&. Pred& self!))))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%23::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%23.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%23.constant.) (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. self!)))))) :pattern ((vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%23.constant.? T&. T& K&. K& G&. G& Pred&. Pred& self!)))))
(set-info :comment ";; Function-Axioms vstd::cell::impl&%2::view")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!cell.PointsTo. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& self!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((vstd!cell.impl&%2.view.? V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::put")
(declare-fun req%vstd!cell.impl&%3.put. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (v! Poly)) (! (= (req%vstd!cell.impl&%3.put. V&. V& self! pre%perm! v!) (=> %%global_location_label%%7 (= (vstd!cell.impl&%2.view.? V&. V& pre%perm!) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& self!))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((req%vstd!cell.impl&%3.put. V&. V& self! pre%perm! v!)))))
(declare-fun ens%vstd!cell.impl&%3.put. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!cell.impl&%3.put. V&. V& self! pre%perm! perm! v!) (and (has_type perm! (TYPE%vstd!cell.PointsTo. V&. V&)) (= (vstd!cell.impl&%2.view.? V&. V& perm!) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& self!))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some v!))))))) :pattern ((ens%vstd!cell.impl&%3.put. V&. V& self! pre%perm! perm! v!)))))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::take")
(declare-fun req%vstd!cell.impl&%3.take. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly)) (! (= (req%vstd!cell.impl&%3.take. V&. V& self! pre%perm!) (and (=> %%global_location_label%%8 (= (vstd!cell.impl&%3.id.? V&. V& self!) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))) (=> %%global_location_label%%9 (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))))) :pattern ((req%vstd!cell.impl&%3.take. V&. V& self! pre%perm!)))))
(declare-fun ens%vstd!cell.impl&%3.take. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!cell.impl&%3.take. V&. V& self! pre%perm! perm! v!) (and (has_type v! V&) (has_type perm! (TYPE%vstd!cell.PointsTo. V&. V&)) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!))))) (= (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))) core!option.Option./None) (= v! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))))))) :pattern ((ens%vstd!cell.impl&%3.take. V&. V& self! pre%perm! perm! v!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_insert")
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_remove")
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::ptr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.ptr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.ptr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.ptr.? T&. T& self!) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!)))) :pattern ((vstd!raw_ptr.impl&%6.ptr.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (vstd!raw_ptr.impl&%6.ptr.? T&. T& self!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.impl&%6.ptr.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::opt_value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.opt_value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.opt_value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!) (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!)))) :pattern ((vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::axiom_ptr_mut_from_data")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.axiom_ptr_mut_from_data.) (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (= (vstd!view.View.view.? $ (PTR T&. T&) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!)) data!)) :pattern ((vstd!raw_ptr.ptr_mut_from_data.? T&. T& data!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_null_mut")
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_null_mut.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_null_mut.) (forall ((T&. Dcr) (T& Type)) (! (= (vstd!raw_ptr.ptr_null_mut.? T&. T&) (vstd!raw_ptr.ptr_mut_from_data.? T&. T& (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin)))))) :pattern ((vstd!raw_ptr.ptr_null_mut.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (vstd!raw_ptr.ptr_null_mut.? T&. T&) (PTR T&. T&)) :pattern ((vstd!raw_ptr.ptr_null_mut.? T&. T&)))))
(set-info :comment ";; Function-Specs core::ptr::null_mut")
(declare-fun ens%core!ptr.null_mut. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (res! Poly)) (! (= (ens%core!ptr.null_mut. T&. T& res!) (and (has_type res! (PTR T&. T&)) (= res! (vstd!raw_ptr.ptr_mut_from_data.? T&. T& (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin)))))))) :pattern ((ens%core!ptr.null_mut. T&. T& res!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::spec_cast_ptr_to_usize")
(assert (fuel_bool_default fuel%vstd!raw_ptr.spec_cast_ptr_to_usize.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.spec_cast_ptr_to_usize.) (forall ((T&. Dcr) (T& Type) (ptr! Poly)) (! (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) ptr!)))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!))))))
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly)) (! (=> (has_type ptr! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!))) :pattern ((vstd!raw_ptr.spec_cast_ptr_to_usize.? T&. T& ptr!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!))))) :pattern ((vstd!raw_ptr.impl&%6.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%2::arrow_0")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%2.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%7.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!))))))) :pattern ((vstd!raw_ptr.impl&%6.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (vstd!raw_ptr.impl&%6.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%6.value.? T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::ptr_ref")
(declare-fun req%vstd!raw_ptr.ptr_ref. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly) (perm! Poly)) (! (= (req%vstd!raw_ptr.ptr_ref. T&. T& ptr! perm!) (and (=> %%global_location_label%%13 (= (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))) ptr!)) (=> %%global_location_label%%14 (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))))))) :pattern ((req%vstd!raw_ptr.ptr_ref. T&. T& ptr! perm!)))))
(declare-fun ens%vstd!raw_ptr.ptr_ref. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!raw_ptr.ptr_ref. T&. T& ptr! perm! v!) (and (has_type v! T&) (= v! (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) perm!))))))))) :pattern ((ens%vstd!raw_ptr.ptr_ref. T&. T& ptr! perm! v!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set_lib::set_int_range")
(assert (fuel_bool_default fuel%vstd!set_lib.set_int_range.))
(declare-fun %%lambda%%1 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) i$) (B (and (<= %%hole%%0 (%I i$)) (< (%I i$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) i$)))))
(assert (=> (fuel_bool fuel%vstd!set_lib.set_int_range.) (forall ((lo! Poly) (hi! Poly)) (! (= (vstd!set_lib.set_int_range.? lo! hi!) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.new.? $ INT $ (TYPE%fun%1. $ INT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 (%I lo!) (%I hi!))))))) :pattern ((vstd!set_lib.set_int_range.? lo! hi!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))))))
(set-info :comment ";; Function-Axioms vstd::shared::impl&%0::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!shared.Shared. T&. T&)) (has_type (vstd!shared.impl&%0.view.? T&. T& self!) T&)) :pattern ((vstd!shared.impl&%0.view.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms lib::layout::is_heap_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_heap_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_heap_ptr.) (forall ((ptr! Poly) (heap_id! Poly)) (! (= (lib!layout.is_heap_ptr.? ptr! heap_id!) (and (and (= (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. heap_id!)) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!)))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!))) (lib!tokens.HeapId./HeapId/provenance (%Poly%lib!tokens.HeapId. heap_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_heap_ptr.? ptr! heap_id!))))))
(set-info :comment ";; Function-Axioms lib::config::INTPTR_SHIFT")
(assert (fuel_bool_default fuel%lib!config.INTPTR_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SHIFT.) (= lib!config.INTPTR_SHIFT.? 3)))
(assert (uInv 64 lib!config.INTPTR_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SLICE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SLICE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SHIFT.) (= lib!config.SLICE_SHIFT.? (uClip 64 (Add 13 lib!config.INTPTR_SHIFT.?)))))
(assert (uInv 64 lib!config.SLICE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SEGMENT_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SHIFT.) (= lib!config.SEGMENT_SHIFT.? (uClip 64 (Add 9 lib!config.SLICE_SHIFT.?)))))
(assert (uInv 64 lib!config.SEGMENT_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SEGMENT_SIZE")
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SIZE.) (= lib!config.SEGMENT_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.SEGMENT_SHIFT.?))))))
(assert (uInv 64 lib!config.SEGMENT_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::SLICE_SIZE")
(assert (fuel_bool_default fuel%lib!config.SLICE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SIZE.) (= lib!config.SLICE_SIZE.? 65536)))
(assert (uInv 64 lib!config.SLICE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::SLICES_PER_SEGMENT")
(assert (fuel_bool_default fuel%lib!config.SLICES_PER_SEGMENT.))
(assert (=> (fuel_bool fuel%lib!config.SLICES_PER_SEGMENT.) (= lib!config.SLICES_PER_SEGMENT.? (uClip 64 (EucDiv lib!config.SEGMENT_SIZE.? lib!config.SLICE_SIZE.?)))))
(assert (uInv 64 lib!config.SLICES_PER_SEGMENT.?))
(set-info :comment ";; Function-Axioms lib::config::INTPTR_SIZE")
(assert (fuel_bool_default fuel%lib!config.INTPTR_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SIZE.) (= lib!config.INTPTR_SIZE.? 8)))
(assert (uInv 64 lib!config.INTPTR_SIZE.?))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::heap_id")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.LL.) (has_type (Poly%core!option.Option. (lib!linked_list.impl&%2.heap_id.? self!)) (TYPE%core!option.Option. $ TYPE%lib!tokens.HeapId.))) :pattern ((lib!linked_list.impl&%2.heap_id.? self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ (PTR $ TYPE%lib!linked_list.Node.) $ TYPE%lib!linked_list.LL.))
(set-info :comment ";; Function-Axioms lib::layout::is_tld_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_tld_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_tld_ptr.) (forall ((ptr! Poly) (tld_id! Poly)) (! (= (lib!layout.is_tld_ptr.? ptr! tld_id!) (and (and (= (lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. tld_id!)) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!)))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!))) (lib!tokens.TldId./TldId/provenance (%Poly%lib!tokens.TldId. tld_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_tld_ptr.? ptr! tld_id!))))))
(set-info :comment ";; Function-Axioms lib::types::TldPtr::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%27.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%27.wf.) (forall ((self! Poly)) (! (= (lib!types.impl&%27.wf.? self!) (lib!layout.is_tld_ptr.? (Poly%ptr_mut%<lib!types.Tld.>. (lib!types.TldPtr./TldPtr/tld_ptr (%Poly%lib!types.TldPtr. self!))) (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. self!))))) :pattern ((lib!types.impl&%27.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::Heap::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%16.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%16.wf.) (forall ((self! Poly) (heap_id! Poly) (tld_id! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%16.wf.? self! heap_id! tld_id! mim_instance!) (and (and (and (and (lib!linked_list.impl&%4.wf.? (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. self!)))) (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (%Poly%lib!linked_list.ThreadLLSimple. (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. self!))))) (%Poly%lib!tokens.Mim.Instance. mim_instance!))) (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. self!))))) (%Poly%lib!tokens.HeapId. heap_id!))) (lib!layout.is_tld_ptr.? (Poly%ptr_mut%<lib!types.Tld.>. (lib!types.TldPtr./TldPtr/tld_ptr (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. self!)))))) (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. self!)))))))) (= (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. self!))))) (%Poly%lib!tokens.TldId. tld_id!)))) :pattern ((lib!types.impl&%16.wf.? self! heap_id! tld_id! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::HeapSharedAccess::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%17.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%17.wf.) (forall ((self! Poly) (heap_id! Poly) (tld_id! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%17.wf.? self! heap_id! tld_id! mim_instance!) (and (and (lib!layout.is_heap_ptr.? (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. self!)))))) heap_id!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. self!)))))))) (lib!types.impl&%16.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. self!))))))))) heap_id! tld_id! mim_instance!))) :pattern ((lib!types.impl&%17.wf.? self! heap_id! tld_id! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::config::SEGMENT_BIN_MAX")
(assert (fuel_bool_default fuel%lib!config.SEGMENT_BIN_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_BIN_MAX.) (= lib!config.SEGMENT_BIN_MAX.? 31)))
(assert (uInv SZ lib!config.SEGMENT_BIN_MAX.?))
(set-info :comment ";; Function-Axioms vstd::state_machine_internal::impl&%3::update_at_index")
(assert (fuel_bool_default fuel%vstd!state_machine_internal.impl&%3.update_at_index.))
(assert (=> (fuel_bool fuel%vstd!state_machine_internal.impl&%3.update_at_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!state_machine_internal.impl&%3.update_at_index.? K&. K& V&. V& self! k! v!) (vstd!map.impl&%0.insert.? K&. K& V&. V& self! k! v!)) :pattern ((vstd!state_machine_internal.impl&%3.update_at_index.? K&. K& V&. V& self! k! v!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type k! K&) (has_type v! V&)) (has_type (vstd!state_machine_internal.impl&%3.update_at_index.? K&. K& V&. V& self! k! v!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!state_machine_internal.impl&%3.update_at_index.? K&. K& V&. V& self! k! v!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::impl&%2::update_at_index")
(declare-fun req%vstd!state_machine_internal.impl&%2.update_at_index. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!state_machine_internal.impl&%2.update_at_index. A&. A& self! i! a!) (=> %%global_location_label%%15 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!state_machine_internal.impl&%2.update_at_index. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::state_machine_internal::impl&%2::update_at_index")
(assert (fuel_bool_default fuel%vstd!state_machine_internal.impl&%2.update_at_index.))
(assert (=> (fuel_bool fuel%vstd!state_machine_internal.impl&%2.update_at_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!state_machine_internal.impl&%2.update_at_index.? A&. A& self! i! a!) (vstd!seq.Seq.update.? A&. A& self! i! a!)) :pattern ((vstd!state_machine_internal.impl&%2.update_at_index.? A&. A& self! i! a!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!state_machine_internal.impl&%2.update_at_index.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!state_machine_internal.impl&%2.update_at_index.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms lib::bin_sizes::smallest_sbin_fitting_size")
(assert (fuel_bool_default fuel%lib!bin_sizes.smallest_sbin_fitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.smallest_sbin_fitting_size.) (forall ((i! Poly)) (! (= (lib!bin_sizes.smallest_sbin_fitting_size.? i!) (ite (<= (%I i!) 8) (%I i!) (let ((w$ (uClip 64 (Sub (%I i!) 1)))) (let ((lz$ (vstd!std_specs.bits.u64_leading_zeros.? (I w$)))) (let ((b$ (uClip 8 (Sub (Sub SZ 1) lz$)))) (let ((sbin_idx$ (Sub (uClip 64 (bitor (I (uClip 64 (uClip 8 (bitshl (I b$) (I 2))))) (I (uClip 64 (bitand (I (uClip 64 (bitshr (I w$) (I (uClip 64 (Sub (uClip 64 b$) 2)))))) (I 3)))))) 4))) sbin_idx$)))))) :pattern ((lib!bin_sizes.smallest_sbin_fitting_size.? i!))))))
(set-info :comment ";; Function-Axioms lib::config::BIN_HUGE")
(assert (fuel_bool_default fuel%lib!config.BIN_HUGE.))
(assert (=> (fuel_bool fuel%lib!config.BIN_HUGE.) (= lib!config.BIN_HUGE.? 73)))
(assert (uInv 64 lib!config.BIN_HUGE.?))
(set-info :comment ";; Function-Axioms lib::bin_sizes::valid_bin_idx")
(assert (fuel_bool_default fuel%lib!bin_sizes.valid_bin_idx.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.valid_bin_idx.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.valid_bin_idx.? bin_idx!) (and (<= 1 (%I bin_idx!)) (<= (%I bin_idx!) lib!config.BIN_HUGE.?))) :pattern ((lib!bin_sizes.valid_bin_idx.? bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::config::BIN_FULL")
(assert (fuel_bool_default fuel%lib!config.BIN_FULL.))
(assert (=> (fuel_bool fuel%lib!config.BIN_FULL.) (= lib!config.BIN_FULL.? (uClip 64 (Add lib!config.BIN_HUGE.? 1)))))
(assert (uInv 64 lib!config.BIN_FULL.?))
(set-info :comment ";; Function-Specs lib::bin_sizes::size_of_bin")
(declare-fun req%lib!bin_sizes.size_of_bin. (Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((bin_idx! Poly)) (! (= (req%lib!bin_sizes.size_of_bin. bin_idx!) (=> %%global_location_label%%16 (lib!bin_sizes.valid_bin_idx.? bin_idx!))) :pattern ((req%lib!bin_sizes.size_of_bin. bin_idx!)))))
(set-info :comment ";; Function-Axioms lib::bin_sizes::size_of_bin")
(assert (forall ((bin_idx! Poly)) (! (=> (has_type bin_idx! INT) (<= 0 (lib!bin_sizes.size_of_bin.? bin_idx!))) :pattern ((lib!bin_sizes.size_of_bin.? bin_idx!)))))
(set-info :comment ";; Function-Axioms lib::config::SMALL_PAGE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SMALL_PAGE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_PAGE_SHIFT.) (= lib!config.SMALL_PAGE_SHIFT.? lib!config.SLICE_SHIFT.?)))
(assert (uInv 64 lib!config.SMALL_PAGE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_PAGE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_PAGE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_PAGE_SHIFT.) (= lib!config.MEDIUM_PAGE_SHIFT.? (uClip 64 (Add 3 lib!config.SMALL_PAGE_SHIFT.?)))))
(assert (uInv 64 lib!config.MEDIUM_PAGE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_PAGE_SIZE.) (= lib!config.MEDIUM_PAGE_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.MEDIUM_PAGE_SHIFT.?))))))
(assert (uInv 64 lib!config.MEDIUM_PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_OBJ_SIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_OBJ_SIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_OBJ_SIZE_MAX.) (= lib!config.MEDIUM_OBJ_SIZE_MAX.? (uClip 64 (EucDiv lib!config.MEDIUM_PAGE_SIZE.? 4)))))
(assert (uInv 64 lib!config.MEDIUM_OBJ_SIZE_MAX.?))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list_back")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back.))
(define-fun is-lib!page_organization.Popped./Used_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./Used) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back.) (forall ((pre! Poly) (post! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list_back.? pre! post! bin_idx!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (= tru$ true)) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (and (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (=> tmp_assert$2 (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?)))))) (let ((tmp_assert$3 (and tmp_assert$2 (= (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))))))) (let ((update_tmp_used_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp%%$2 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((tmp%%$3 (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((tmp_assert$4 (and tmp_assert$3 (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$)) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))) (not (= last_id$ page_id$)))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$4 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$5 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$6 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5))))))))) (let ((tmp%%$7 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$4)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))))))))))) (tuple%2./tuple%2 (B tmp_assert$4) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1))))))) (let ((tmp_assert$5 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3)))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3)))))) (tuple%2./tuple%2 (B tmp_assert$5) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2))))) (tuple%2./tuple%2 (B tmp_assert$3) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$))))) (let ((tmp_assert$6 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2)))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2)))))) (let ((tmp_assert$7 (and tmp_assert$6 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$8 (and tmp_assert$7 (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))))) (let ((tmp_assert$9 (and tmp_assert$8 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$10 (and tmp_assert$9 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$8 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (let ((tmp%%$9 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$10 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_back.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4)) (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$1)))))))))))))))))))))))))) (let ((tmp_assert$11 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$12 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_assert$13 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$14 (and tmp_assert$13 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$15 (and tmp_assert$14 (= (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))))))) (let ((update_tmp_used_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp%%$12 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((tmp%%$13 (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((tmp_assert$16 (and tmp_assert$15 (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$)) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))) (not (= last_id$ page_id$)))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$14 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$15 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$16 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$15))))))))) (let ((tmp%%$17 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$14)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))))))))))) (tuple%2./tuple%2 (B tmp_assert$16) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$5))))))) (let ((tmp_assert$17 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$13)))))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$13)))))) (tuple%2./tuple%2 (B tmp_assert$17) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$6))))) (tuple%2./tuple%2 (B tmp_assert$15) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$))))) (let ((tmp_assert$18 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$12)))))) (let ((update_tmp_pages$7 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$12)))))) (let ((tmp_assert$19 (and tmp_assert$18 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$20 (and tmp_assert$19 (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))))) (let ((tmp_assert$21 (and tmp_assert$20 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$22 (and tmp_assert$21 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$18 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (let ((tmp%%$19 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$20 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$18)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$19)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_back.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) tmp_assert$22))))))))))))))))))) tmp_assert$12)))) (and (=> tmp_assert$11 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$11 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$11 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list_back.? pre! post! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::valid_used_page")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.valid_used_page.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.valid_used_page.) (forall ((self! Poly) (page_id! Poly) (bin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.valid_used_page.? self! page_id! bin_idx! list_idx!) (and (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id!) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))) true)) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))) (core!option.Option./Some (I 0)))) (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?))) (and (<= 0 (%I list_idx!)) (< (%I list_idx!) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) bin_idx!))))) (= (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) bin_idx!) list_idx!) page_id!)) (let ((tmp%%$ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (and (not (is-core!option.Option./None_ tmp%%$)) (let ((bin$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (and (and (lib!bin_sizes.valid_bin_idx.? (I bin$)) (= (lib!bin_sizes.size_of_bin.? (I bin$)) bsize$)) (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) bin$))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.valid_used_page.? self! page_id! bin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_local_state::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.thread_local_state.) (has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? self!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)) :pattern ((lib!tokens.Mim.impl&%8.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_checked_state::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.thread_checked_state.) (has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? self!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)) :pattern ((lib!tokens.Mim.impl&%17.view.? self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_le.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_le.? A&. A& self! s2!) (vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_le.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::public_invariant")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.public_invariant.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.public_invariant.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.public_invariant.? self!) (and (and (= (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!)))) (Add lib!config.SEGMENT_BIN_MAX.? 1)) (= (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!)))) (Add lib!config.BIN_FULL.? 1))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$)))))) :pattern ((lib!page_organization.PageOrg.impl&%4.public_invariant.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_basics")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_basics.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_basics.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_basics.? self!) (and (= (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!)))) (Add lib!config.SEGMENT_BIN_MAX.? 1)) (= (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!)))) (Add lib!config.BIN_FULL.? 1)))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_basics.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::page_id_domain")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.page_id_domain.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.page_id_domain.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.page_id_domain.? self!) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (<= tmp%%$ lib!config.SLICES_PER_SEGMENT.?)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.page_id_domain.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::count_off0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.count_off0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.count_off0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.count_off0.? self!) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (core!option.Option./Some (I 0)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.count_off0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::end_is_unused")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.end_is_unused.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.end_is_unused.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.end_is_unused.? self!) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) lib!config.SLICES_PER_SEGMENT.?)) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.end_is_unused.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ucount")
(assert (forall ((self! Poly) (segment_id! Poly)) (! (=> (and (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type segment_id! TYPE%lib!tokens.SegmentId.)) (<= 0 (lib!page_organization.PageOrg.impl&%4.ucount.? self! segment_id!))) :pattern ((lib!page_organization.PageOrg.impl&%4.ucount.? self! segment_id!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::count_is_right")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.count_is_right.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.count_is_right.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.count_is_right.? self!) (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) sid$) (= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!))) sid$))) (Add (lib!page_organization.PageOrg.impl&%4.ucount.? self! sid$) (lib!page_organization.PageOrg.impl&%4.popped_ec.? self! sid$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) sid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.count_is_right.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::is_unused_header")
(assert (fuel_bool_default fuel%lib!page_organization.is_unused_header.))
(assert (=> (fuel_bool fuel%lib!page_organization.is_unused_header.) (forall ((pd! Poly)) (! (= (lib!page_organization.is_unused_header.? pd!) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. pd!)) (core!option.Option./Some (I 0))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. pd!))))) :pattern ((lib!page_organization.is_unused_header.? pd!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::is_in_lls")
(assert (fuel_bool_default fuel%lib!page_organization.is_in_lls.))
(assert (=> (fuel_bool fuel%lib!page_organization.is_in_lls.) (forall ((page_id! Poly) (s! Poly)) (! (= (lib!page_organization.is_in_lls.? page_id! s!) (exists ((i$ Poly) (j$ Poly)) (! (and (and (has_type i$ INT) (has_type j$ INT)) (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) s!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) s! i$))))) (= (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) s! i$) j$) page_id!))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) s! i$) j$))))) :pattern ((lib!page_organization.is_in_lls.? page_id! s!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::is_used_header")
(assert (fuel_bool_default fuel%lib!page_organization.is_used_header.))
(assert (=> (fuel_bool fuel%lib!page_organization.is_used_header.) (forall ((pd! Poly)) (! (= (lib!page_organization.is_used_header.? pd!) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. pd!)) (core!option.Option./Some (I 0))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. pd!)))) :pattern ((lib!page_organization.is_used_header.? pd!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::popped_basics")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.popped_basics.))
(define-fun is-lib!page_organization.Popped./No_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./No) c))
(define-fun is-lib!page_organization.Popped./Ready_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./Ready) c))
(define-fun is-lib!page_organization.Popped./SegmentCreating_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./SegmentCreating) c))
(define-fun is-lib!page_organization.Popped./SegmentFreeing_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./SegmentFreeing) c))
(define-fun is-lib!page_organization.Popped./VeryUnready_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./VeryUnready) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.popped_basics.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.popped_basics.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (not (is-lib!page_organization.Popped./No_ tmp%%$)) (ite (is-lib!page_organization.Popped./Ready_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id$)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) false)) (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) 0))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))) (<= (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))) lib!config.SLICES_PER_SEGMENT.?)) (not (lib!page_organization.is_in_lls.? (Poly%lib!tokens.PageId. page_id$) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))))))) (ite (is-lib!page_organization.Popped./Used_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id$)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) true)) (lib!page_organization.is_used_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) 0))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))) (<= (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))) lib!config.SLICES_PER_SEGMENT.?))) (ite (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. segment_id$))) (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. segment_id$)) (and (< 0 idx$) (<= idx$ lib!config.SLICES_PER_SEGMENT.?))) (lib!page_organization.PageOrg.impl&%4.seg_free_prefix.? self! (Poly%lib!tokens.SegmentId. segment_id$) (I idx$))) (= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 0)) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (and (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)) segment_id$) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id$)))) (and (<= 0 tmp%%$1) (< tmp%%$1 idx$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))) false))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$))))))) (ite (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip start$)))))) (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id$)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) false)) (lib!page_organization.PageOrg.impl&%4.good_range_very_unready.? self! (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip start$))))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. segment_id$))) (let ((tmp%%$2 (Add start$ count$))) (and (and (<= 1 start$) (< start$ tmp%%$2)) (<= tmp%%$2 lib!config.SLICES_PER_SEGMENT.?)))))))) (let ((segment_id$ (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. segment_id$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_basics.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::data_for_used_header")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.data_for_used_header.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.data_for_used_header.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.data_for_used_header.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$) (=> (lib!page_organization.is_used_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$)) (and (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$)))) (> (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))))))) 0)) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))) (core!option.Option./Some (I 0))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.data_for_used_header.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::inv_segment_creating")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.inv_segment_creating.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.inv_segment_creating.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)) (and (and (and (and (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::inv_very_unready")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.inv_very_unready.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.inv_very_unready.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.inv_very_unready.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= start$ tmp%%$1) (< tmp%%$1 (Add start$ count$))))) (and (and (and (and (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.inv_very_unready.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::inv_ready")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.inv_ready.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.inv_ready.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.inv_ready.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (is-lib!page_organization.Popped./Ready_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))))))) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (and (and (and (and (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (core!option.Option./Some (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (%Poly%lib!tokens.PageId. pid$) page_id$))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.inv_ready.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::inv_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.inv_used.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.inv_used.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.inv_used.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (is-lib!page_organization.Popped./Used_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (core!option.Option./Some (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (%Poly%lib!tokens.PageId. pid$) page_id$))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (%Poly%lib!tokens.PageId. pid$) page_id$))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.inv_used.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::data_for_unused_header")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.data_for_unused_header.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.data_for_unused_header.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$) (=> (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$)) (and (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$)))) (> (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))))))) 0)) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))) (core!option.Option./Some (I 0))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::get_prev")
(assert (fuel_bool_default fuel%lib!page_organization.get_prev.))
(assert (=> (fuel_bool fuel%lib!page_organization.get_prev.) (forall ((ll! Poly) (j! Poly)) (! (= (lib!page_organization.get_prev.? ll! j!) (ite (= (%I j!) 0) core!option.Option./None (core!option.Option./Some (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! (I (Sub (%I j!) 1)))))) :pattern ((lib!page_organization.get_prev.? ll! j!))))))
(assert (forall ((ll! Poly) (j! Poly)) (! (=> (and (has_type ll! (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (has_type j! INT)) (has_type (Poly%core!option.Option. (lib!page_organization.get_prev.? ll! j!)) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.get_prev.? ll! j!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::get_next")
(assert (fuel_bool_default fuel%lib!page_organization.get_next.))
(assert (=> (fuel_bool fuel%lib!page_organization.get_next.) (forall ((ll! Poly) (j! Poly)) (! (= (lib!page_organization.get_next.? ll! j!) (ite (= (%I j!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 1)) core!option.Option./None (core!option.Option./Some (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! (I (Add (%I j!) 1)))))) :pattern ((lib!page_organization.get_next.? ll! j!))))))
(assert (forall ((ll! Poly) (j! Poly)) (! (=> (and (has_type ll! (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (has_type j! INT)) (has_type (Poly%core!option.Option. (lib!page_organization.get_next.? ll! j!)) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.get_next.? ll! j!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::valid_ll_i")
(assert (fuel_bool_default fuel%lib!page_organization.valid_ll_i.))
(assert (=> (fuel_bool fuel%lib!page_organization.valid_ll_i.) (forall ((pages! Poly) (ll! Poly) (j! Poly)) (! (= (lib!page_organization.valid_ll_i.? pages! ll! j!) (and (and (and (and (and (<= 0 (%I j!)) (< (%I j!) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. pages!) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! j!))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. pages! (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! j!)))))) (= (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. pages! (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! j!))))))))) (lib!page_organization.get_prev.? ll! j!))) (= (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. pages! (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! j!))))))))) (lib!page_organization.get_next.? ll! j!)))) :pattern ((lib!page_organization.valid_ll_i.? pages! ll! j!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::valid_ll")
(assert (fuel_bool_default fuel%lib!page_organization.valid_ll.))
(assert (=> (fuel_bool fuel%lib!page_organization.valid_ll.) (forall ((pages! Poly) (header! Poly) (ll! Poly)) (! (= (lib!page_organization.valid_ll.? pages! header! ll!) (and (and (let ((tmp%%$ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. header!)))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (not (= (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 0)) (= (%Poly%lib!tokens.PageId. (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! (I 0))) first_id$))) (= (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 0))) (let ((tmp%%$ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. header!)))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (not (= (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 0)) (= (%Poly%lib!tokens.PageId. (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! (I (Sub (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 1)))) last_id$))) (= (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 0)))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!))) (lib!page_organization.valid_ll_i.? pages! ll! j$))) :pattern ((lib!page_organization.valid_ll_i.? pages! ll! j$)))))) :pattern ((lib!page_organization.valid_ll.? pages! header! ll!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_valid_unused")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!)))))) (lib!page_organization.valid_ll.? (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!))) i$) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_valid_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!)))))) (lib!page_organization.valid_ll.? (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!))) i$) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_valid_unused2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!)))))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$)))) (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)) (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$))) 0))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) (= (%I i$) (lib!bin_sizes.smallest_sbin_fitting_size.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_valid_used2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!)))))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$)))) (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)) (lib!page_organization.is_used_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$))) 0))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) (= (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))))) (= (%I i$) lib!config.BIN_FULL.?))) (let ((tmp%%$ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) (and (not (is-core!option.Option./None_ tmp%%$)) (let ((bin$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (and (and (and (lib!bin_sizes.valid_bin_idx.? (I bin$)) (= bsize$ (lib!bin_sizes.size_of_bin.? (I bin$)))) (=> (not (= (%I i$) lib!config.BIN_FULL.?)) (= (%I i$) bin$))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::attached_ranges")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.attached_ranges.? self!) (forall ((segment_id$ Poly)) (! (=> (has_type segment_id$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) segment_id$) (lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.? self! segment_id$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) segment_id$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.attached_ranges.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::x::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.x.) (has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? self!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)) :pattern ((lib!linked_list.StuffAgree.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::os_mem::MemChunk::wf_os")
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.wf_os.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.wf_os.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.wf_os.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) addr$) (= (lib!os_mem.OsMemData./OsMemData/byte_addr (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. (lib!os_mem.impl&%1.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!))) addr$))))) (%I addr$)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) addr$))))) :pattern ((lib!os_mem.impl&%0.wf_os.? self!))))))
(set-info :comment ";; Function-Axioms lib::os_mem::MemChunk::wf")
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.wf.? self!) (lib!os_mem.impl&%0.wf_os.? self!)) :pattern ((lib!os_mem.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::os_mem::MemChunk::range_os")
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.range_os.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.range_os.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.range_os.? self!) (%Poly%vstd!set.Set<int.>. (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))))) :pattern ((lib!os_mem.impl&%0.range_os.? self!))))))
(set-info :comment ";; Function-Axioms lib::os_mem::MemChunk::os_exact_range")
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.os_exact_range.))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.os_exact_range.) (forall ((self! Poly) (start! Poly) (len! Poly)) (! (= (lib!os_mem.impl&%0.os_exact_range.? self! start! len!) (ext_eq false (TYPE%vstd!set.Set. $ INT) (Poly%vstd!set.Set<int.>. (vstd!set_lib.set_int_range.? start! (I (Add (%I start!) (%I len!))))) (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))))) :pattern ((lib!os_mem.impl&%0.os_exact_range.? self! start! len!))))))
(set-info :comment ";; Function-Axioms lib::os_mem::MemChunk::range_os_rw")
(assert (fuel_bool_default fuel%lib!os_mem.impl&%0.range_os_rw.))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Dcr Type Poly lib!os_mem.MemProtect.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 lib!os_mem.MemProtect.) (addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) addr$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 addr$) (= (lib!os_mem.OsMemData./OsMemData/mem_protect (%Poly%lib!os_mem.OsMemData. (Poly%lib!os_mem.OsMemData. (lib!os_mem.impl&%1.view.? (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 addr$))))) %%hole%%8)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) addr$)))))
(assert (=> (fuel_bool fuel%lib!os_mem.impl&%0.range_os_rw.) (forall ((self! Poly)) (! (= (lib!os_mem.impl&%0.range_os_rw.? self!) (%Poly%vstd!set.Set<int.>. (vstd!set.impl&%0.new.? $ INT $ (TYPE%fun%1. $ INT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!)))) $ INT $ TYPE%lib!os_mem.OsMem. (Poly%vstd!map.Map<int./lib!os_mem.OsMem.>. (lib!os_mem.MemChunk./MemChunk/os (%Poly%lib!os_mem.MemChunk. self!))) (lib!os_mem.MemProtect./MemProtect (%B (B true)) (%B (B true))))))))) :pattern ((lib!os_mem.impl&%0.range_os_rw.? self!))))))
(set-info :comment ";; Function-Axioms lib::thread::IsThread::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!thread.IsThread.) (has_type (Poly%lib!thread.ThreadId. (lib!thread.impl&%2.view.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!thread.impl&%2.view.? self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_sub")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_sub.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_sub.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_sub.? A&. A& self! s2!) (vstd!set.impl&%0.difference.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_sub.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_sub.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_sub.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%16::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 16) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%32::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%32.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%32.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%46::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%46.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%46.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list_back_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.) (forall ((pre! Poly) (post! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.? pre! post! bin_idx!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= tru$ true) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (and (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))) (and (= (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))) (let ((update_tmp_used_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))))))))) (and (=> (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$)) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))) (not (= last_id$ page_id$))))) (let ((update_tmp_pages$1 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((update_tmp_pages$2 (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$2 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$3 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$4 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3))))))))) (let ((tmp%%$5 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))))))))))) update_tmp_pages$3)))) update_tmp_pages$2) update_tmp_pages$))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0))) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$6 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (let ((tmp%%$7 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_back.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$1)))))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.? pre! post! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list_back_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.) (forall ((pre! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.? pre! bin_idx!) (let ((tmp_assert$ true)) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (= tru$ true)) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (=> tmp_assert$2 (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.? pre! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::invariant")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.invariant.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.invariant.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.invariant.? self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!page_organization.PageOrg.impl&%4.public_invariant.? self!) (lib!page_organization.PageOrg.impl&%4.ll_basics.? self!)) (lib!page_organization.PageOrg.impl&%4.page_id_domain.? self!)) (lib!page_organization.PageOrg.impl&%4.count_off0.? self!)) (lib!page_organization.PageOrg.impl&%4.end_is_unused.? self!)) (lib!page_organization.PageOrg.impl&%4.count_is_right.? self!)) (lib!page_organization.PageOrg.impl&%4.popped_basics.? self!)) (lib!page_organization.PageOrg.impl&%4.data_for_used_header.? self!)) (lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? self!)) (lib!page_organization.PageOrg.impl&%4.inv_very_unready.? self!)) (lib!page_organization.PageOrg.impl&%4.inv_ready.? self!)) (lib!page_organization.PageOrg.impl&%4.inv_used.? self!)) (lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? self!)) (lib!page_organization.PageOrg.impl&%4.attached_ranges.? self!))) :pattern ((lib!page_organization.PageOrg.impl&%4.invariant.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::page_id")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.LL.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.impl&%2.page_id.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.impl&%2.page_id.? self!)))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::block_size")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.LL.) (<= 0 (lib!linked_list.impl&%2.block_size.? self!))) :pattern ((lib!linked_list.impl&%2.block_size.? self!)))))
(set-info :comment ";; Function-Axioms lib::linked_list::LL::len")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.LL.) (<= 0 (lib!linked_list.impl&%2.len.? self!))) :pattern ((lib!linked_list.impl&%2.len.? self!)))))
(set-info :comment ";; Function-Axioms lib::types::PageInner::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%0.wf.) (forall ((self! Poly) (page_id! Poly) (page_state! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%0.wf.? self! page_id! page_state! mim_instance!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. page_state!)) (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. self!))) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!))))) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!))))) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))) (%Poly%lib!tokens.PageId. page_id!))) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))) (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. page_state!)))) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))) (%Poly%lib!tokens.Mim.Instance. mim_instance!))) (is-core!option.Option./None_ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))))) (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!))))) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!))))) (= (lib!linked_list.impl&%2.page_id.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))) (%Poly%lib!tokens.PageId. page_id!))) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))) (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. page_state!)))) (= (lib!linked_list.impl&%2.instance.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))) (%Poly%lib!tokens.Mim.Instance. mim_instance!))) (is-core!option.Option./None_ (lib!linked_list.impl&%2.heap_id.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))))) (= (Add (Add (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. self!)) (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!))))) (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!))))) (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. page_state!)))) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!))))) (lib!linked_list.impl&%2.fixed_page.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!))))) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))) (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. page_state!)))) (= (lib!linked_list.impl&%2.block_size.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))) (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. page_state!)))) (<= (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. self!)) (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. self!)))) (= (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. self!)) (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. page_state!)))) (> (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. self!)) 0))) :pattern ((lib!types.impl&%0.wf.? self! page_id! page_state! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::PageInner::zeroed")
(assert (fuel_bool_default fuel%lib!types.impl&%0.zeroed.))
(assert (=> (fuel_bool fuel%lib!types.impl&%0.zeroed.) (forall ((self! Poly)) (! (= (lib!types.impl&%0.zeroed.? self!) (and (and (and (and (and (= (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. self!)) 0) (= (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. self!)) 0)) (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))) 0))) (= (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. self!)) 0)) (= (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. self!)) 0)) (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))) 0)))) :pattern ((lib!types.impl&%0.zeroed.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::PageInner::zeroed_except_block_size")
(assert (fuel_bool_default fuel%lib!types.impl&%0.zeroed_except_block_size.))
(assert (=> (fuel_bool fuel%lib!types.impl&%0.zeroed_except_block_size.) (forall ((self! Poly)) (! (= (lib!types.impl&%0.zeroed_except_block_size.? self!) (and (and (and (and (= (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. self!)) 0) (= (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. self!)) 0)) (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. self!)))) 0))) (= (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. self!)) 0)) (and (lib!linked_list.impl&%2.wf.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))) (= (lib!linked_list.impl&%2.len.? (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. self!)))) 0)))) :pattern ((lib!types.impl&%0.zeroed_except_block_size.? self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (PTR $ TYPE%lib!types.Heap.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.))))
(set-info :comment ";; Function-Axioms lib::types::AtomicHeapPtr::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%2.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%2.wf.) (forall ((self! Poly) (instance! Poly) (page_id! Poly)) (! (= (lib!types.impl&%2.wf.? self! instance! page_id!) (and (and (and (and (and (and (and (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance (%Poly%lib!types.AtomicHeapPtr. self!)) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. self!)) (%Poly%lib!tokens.PageId. page_id!))) (= (lib!types.BoolAgree.x_token_data./x_token_data/instance (%Poly%lib!types.BoolAgree.x_token_data. (Poly%lib!types.BoolAgree.x_token_data. (lib!types.BoolAgree.impl&%4.view.? (Poly%lib!types.BoolAgree.x. (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp (%Poly%lib!types.AtomicHeapPtr. self!))))))) (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst (%Poly%lib!types.AtomicHeapPtr. self!)))) (vstd!atomic_ghost.impl&%23.well_formed.? $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. self!))))) (= (%Poly%lib!tokens.Mim.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. self!))))))) (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance (%Poly%lib!types.AtomicHeapPtr. self!)))) (= (%Poly%lib!tokens.PageId. (tuple%4./tuple%4/1 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. self!))))))) (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. self!)))) (= (%Poly%lib!types.BoolAgree.x. (tuple%4./tuple%4/2 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. self!))))))) (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp (%Poly%lib!types.AtomicHeapPtr. self!)))) (= (%Poly%lib!types.BoolAgree.Instance. (tuple%4./tuple%4/3 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. self!))))))) (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst (%Poly%lib!types.AtomicHeapPtr. self!))))) :pattern ((lib!types.impl&%2.wf.? self! instance! page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::AtomicHeapPtr::is_empty")
(assert (fuel_bool_default fuel%lib!types.impl&%3.is_empty.))
(assert (=> (fuel_bool fuel%lib!types.impl&%3.is_empty.) (forall ((self! Poly)) (! (= (lib!types.impl&%3.is_empty.? self!) (lib!types.BoolAgree.x_token_data./x_token_data/value (%Poly%lib!types.BoolAgree.x_token_data. (Poly%lib!types.BoolAgree.x_token_data. (lib!types.BoolAgree.impl&%4.view.? (Poly%lib!types.BoolAgree.x. (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp (%Poly%lib!types.AtomicHeapPtr. self!)))))))) :pattern ((lib!types.impl&%3.is_empty.? self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (PTR $ TYPE%lib!linked_list.Node.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.)))))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLWithDelayBits::wf")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%7.wf.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%7.wf.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%7.wf.? self!) (and (and (and (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))) (vstd!atomic_ghost.impl&%23.well_formed.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))) (= (%Poly%lib!tokens.Mim.Instance. (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!)))) (= (%Poly%lib!linked_list.StuffAgree.Instance. (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%23.constant.? $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))) :pattern ((lib!linked_list.impl&%7.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLWithDelayBits::is_empty")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%8.is_empty.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%8.is_empty.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%8.is_empty.? self!) (is-core!option.Option./None_ (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))))) :pattern ((lib!linked_list.impl&%8.is_empty.? self!))))))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLWithDelayBits::page_id")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%8.page_id.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%8.page_id.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%8.page_id.? self!) (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))))))))) :pattern ((lib!linked_list.impl&%8.page_id.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.impl&%8.page_id.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.impl&%8.page_id.? self!)))))
(set-info :comment ";; Function-Axioms lib::linked_list::ThreadLLWithDelayBits::block_size")
(assert (fuel_bool_default fuel%lib!linked_list.impl&%8.block_size.))
(assert (=> (fuel_bool fuel%lib!linked_list.impl&%8.block_size.) (forall ((self! Poly)) (! (= (lib!linked_list.impl&%8.block_size.? self!) (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (%Poly%lib!linked_list.ThreadLLWithDelayBits. self!))))))))))))) :pattern ((lib!linked_list.impl&%8.block_size.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.ThreadLLWithDelayBits.) (<= 0 (lib!linked_list.impl&%8.block_size.? self!))) :pattern ((lib!linked_list.impl&%8.block_size.? self!)))))
(set-info :comment ";; Function-Axioms lib::types::Page::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%4.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%4.wf.) (forall ((self! Poly) (page_id! Poly) (block_size! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%4.wf.? self! page_id! block_size! mim_instance!) (and (and (and (and (and (and (lib!linked_list.impl&%7.wf.? (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!)))) (not (lib!linked_list.impl&%8.is_empty.? (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!)))))) (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (%Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!))))) (%Poly%lib!tokens.Mim.Instance. mim_instance!))) (= (lib!linked_list.impl&%8.page_id.? (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!)))) (%Poly%lib!tokens.PageId. page_id!))) (= (lib!linked_list.impl&%8.block_size.? (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!)))) (%I block_size!))) (lib!types.impl&%2.wf.? (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap (%Poly%lib!types.Page. self!))) mim_instance! page_id!)) (not (lib!types.impl&%3.is_empty.? (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap (%Poly%lib!types.Page. self!))))))) :pattern ((lib!types.impl&%4.wf.? self! page_id! block_size! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::Page::wf_secondary")
(assert (fuel_bool_default fuel%lib!types.impl&%4.wf_secondary.))
(assert (=> (fuel_bool fuel%lib!types.impl&%4.wf_secondary.) (forall ((self! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%4.wf_secondary.? self! mim_instance!) (and (and (lib!linked_list.impl&%7.wf.? (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!)))) (lib!linked_list.impl&%8.is_empty.? (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!))))) (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (%Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!))))) (%Poly%lib!tokens.Mim.Instance. mim_instance!)))) :pattern ((lib!types.impl&%4.wf_secondary.? self! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::Page::wf_unused")
(assert (fuel_bool_default fuel%lib!types.impl&%4.wf_unused.))
(assert (=> (fuel_bool fuel%lib!types.impl&%4.wf_unused.) (forall ((self! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%4.wf_unused.? self! mim_instance!) (and (and (lib!linked_list.impl&%7.wf.? (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!)))) (lib!linked_list.impl&%8.is_empty.? (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!))))) (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (%Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. self!))))) (%Poly%lib!tokens.Mim.Instance. mim_instance!)))) :pattern ((lib!types.impl&%4.wf_unused.? self! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::config::SIZEOF_SEGMENT_HEADER")
(assert (fuel_bool_default fuel%lib!config.SIZEOF_SEGMENT_HEADER.))
(assert (=> (fuel_bool fuel%lib!config.SIZEOF_SEGMENT_HEADER.) (= lib!config.SIZEOF_SEGMENT_HEADER.? 264)))
(assert (uInv SZ lib!config.SIZEOF_SEGMENT_HEADER.?))
(set-info :comment ";; Function-Axioms lib::config::SIZEOF_PAGE_HEADER")
(assert (fuel_bool_default fuel%lib!config.SIZEOF_PAGE_HEADER.))
(assert (=> (fuel_bool fuel%lib!config.SIZEOF_PAGE_HEADER.) (= lib!config.SIZEOF_PAGE_HEADER.? 80)))
(assert (uInv SZ lib!config.SIZEOF_PAGE_HEADER.?))
(set-info :comment ";; Function-Axioms lib::layout::page_header_start")
(assert (fuel_bool_default fuel%lib!layout.page_header_start.))
(assert (=> (fuel_bool fuel%lib!layout.page_header_start.) (forall ((page_id! Poly)) (! (= (lib!layout.page_header_start.? page_id!) (Add (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) lib!config.SIZEOF_SEGMENT_HEADER.?) (Mul (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) lib!config.SIZEOF_PAGE_HEADER.?))) :pattern ((lib!layout.page_header_start.? page_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_page_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_page_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_page_ptr.) (forall ((ptr! Poly) (page_id! Poly)) (! (= (lib!layout.is_page_ptr.? ptr! page_id!) (and (and (and (and (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. ptr!) (lib!layout.page_header_start.? page_id!)) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (and (<= 0 tmp%%$) (<= tmp%%$ lib!config.SLICES_PER_SEGMENT.?)))) (< (Add (lib!layout.segment_start.? (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) lib!config.SEGMENT_SIZE.?) (- (uHi SZ) 1))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) ptr!))) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_page_ptr.? ptr! page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::PageSharedAccess::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%5.wf.) (forall ((self! Poly) (page_id! Poly) (block_size! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%5.wf.? self! page_id! block_size! mim_instance!) (and (and (and (lib!layout.is_page_ptr.? (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))) page_id!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))))) (lib!types.impl&%4.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!))))))))) page_id! block_size! mim_instance!)) (= (vstd!raw_ptr.impl&%10.provenance.? (Poly%vstd!raw_ptr.IsExposed. (lib!types.PageSharedAccess./PageSharedAccess/exposed (%Poly%lib!types.PageSharedAccess. self!)))) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))))))))) :pattern ((lib!types.impl&%5.wf.? self! page_id! block_size! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::PageSharedAccess::wf_secondary")
(assert (fuel_bool_default fuel%lib!types.impl&%5.wf_secondary.))
(assert (=> (fuel_bool fuel%lib!types.impl&%5.wf_secondary.) (forall ((self! Poly) (page_id! Poly) (block_size! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%5.wf_secondary.? self! page_id! block_size! mim_instance!) (and (and (and (lib!layout.is_page_ptr.? (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))) page_id!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))))) (lib!types.impl&%4.wf_secondary.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!))))))))) mim_instance!)) (= (vstd!raw_ptr.impl&%10.provenance.? (Poly%vstd!raw_ptr.IsExposed. (lib!types.PageSharedAccess./PageSharedAccess/exposed (%Poly%lib!types.PageSharedAccess. self!)))) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))))))))) :pattern ((lib!types.impl&%5.wf_secondary.? self! page_id! block_size! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::PageSharedAccess::wf_unused")
(assert (fuel_bool_default fuel%lib!types.impl&%5.wf_unused.))
(assert (=> (fuel_bool fuel%lib!types.impl&%5.wf_unused.) (forall ((self! Poly) (page_id! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%5.wf_unused.? self! page_id! mim_instance!) (and (and (and (lib!layout.is_page_ptr.? (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))) page_id!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))))) (lib!types.impl&%4.wf_unused.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!))))))))) mim_instance!)) (= (vstd!raw_ptr.impl&%10.provenance.? (Poly%vstd!raw_ptr.IsExposed. (lib!types.PageSharedAccess./PageSharedAccess/exposed (%Poly%lib!types.PageSharedAccess. self!)))) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. self!)))))))))))) :pattern ((lib!types.impl&%5.wf_unused.? self! page_id! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::wf_reserved")
(assert (fuel_bool_default fuel%lib!types.wf_reserved.))
(assert (=> (fuel_bool fuel%lib!types.wf_reserved.) (forall ((block_size! Poly) (reserved! Poly) (count! Poly)) (! (= (lib!types.wf_reserved.? block_size! reserved! count!) (<= (Add (Mul (%I reserved!) (%I block_size!)) (lib!layout.start_offset.? block_size!)) (Mul (%I count!) lib!config.SLICE_SIZE.?))) :pattern ((lib!types.wf_reserved.? block_size! reserved! count!))))))
(set-info :comment ";; Function-Axioms lib::types::PageLocalAccess::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%6.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%6.wf.) (forall ((self! Poly) (page_id! Poly) (page_state! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%6.wf.? self! page_id! page_state! mim_instance!) (and (and (and (=> (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. page_state!)) 0) (lib!types.impl&%5.wf.? (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. page_state!))) page_id! (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. page_state!))) mim_instance!)) (=> (not (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. page_state!)) 0)) (lib!types.impl&%5.wf_secondary.? (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. page_state!))) page_id! (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. page_state!))) mim_instance!))) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. page_state!))) (let ((tmp%%$ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. page_state!))))))))))) (and (is-vstd!raw_ptr.MemContents./Init_ tmp%%$) (let ((page$ (%Poly%lib!types.Page. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. tmp%%$)))))) (and (and (and (and (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. self!))))))) (vstd!cell.impl&%3.id.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner (%Poly%lib!types.Page. (Poly%lib!types.Page. page$)))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT 32) (Poly%vstd!cell.PointsTo<u32.>. (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. self!))))))) (vstd!cell.impl&%3.id.? $ (UINT 32) (Poly%vstd!cell.PCell<u32.>. (lib!types.Page./Page/count (%Poly%lib!types.Page. (Poly%lib!types.Page. page$))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (lib!types.PageLocalAccess./PageLocalAccess/prev (%Poly%lib!types.PageLocalAccess. self!))))))) (vstd!cell.impl&%3.id.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev (%Poly%lib!types.Page. (Poly%lib!types.Page. page$))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (lib!types.PageLocalAccess./PageLocalAccess/next (%Poly%lib!types.PageLocalAccess. self!))))))) (vstd!cell.impl&%3.id.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next (%Poly%lib!types.Page. (Poly%lib!types.Page. page$))))))) (let ((tmp%%$1 (tuple%4./tuple%4 (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT 32) (Poly%vstd!cell.PointsTo<u32.>. (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. self!)))))))) (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. self!)))))))) (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (lib!types.PageLocalAccess./PageLocalAccess/prev (%Poly%lib!types.PageLocalAccess. self!)))))))) (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (lib!types.PageLocalAccess./PageLocalAccess/next (%Poly%lib!types.PageLocalAccess. self!))))))))))) (and (and (and (and (and (is-tuple%4./tuple%4_ tmp%%$1) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$1)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$1)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$1)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$1)))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$1)))))))) (let ((page_inner$ (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$1)))))))) (let ((prev$ (%Poly%ptr_mut%<lib!types.Page.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$1)))))))) (let ((next$ (%Poly%ptr_mut%<lib!types.Page.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$1)))))))) (and (=> (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. page_state!)) 0) (and (lib!types.impl&%0.wf.? (Poly%lib!types.PageInner. page_inner$) page_id! page_state! mim_instance!) (lib!types.wf_reserved.? (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. page_state!))) (I (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. page_inner$)))) (I count$)))) (=> (not (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. page_state!)) 0)) (lib!types.impl&%0.zeroed_except_block_size.? (Poly%lib!types.PageInner. page_inner$)))))))))))))))) :pattern ((lib!types.impl&%6.wf.? self! page_id! page_state! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::PageLocalAccess::wf_unused")
(assert (fuel_bool_default fuel%lib!types.impl&%6.wf_unused.))
(assert (=> (fuel_bool fuel%lib!types.impl&%6.wf_unused.) (forall ((self! Poly) (page_id! Poly) (shared_access! Poly) (popped! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%6.wf_unused.? self! page_id! shared_access! popped! mim_instance!) (and (lib!types.impl&%5.wf_unused.? shared_access! page_id! mim_instance!) (let ((tmp%%$ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. shared_access!)))))))) (and (is-vstd!raw_ptr.MemContents./Init_ tmp%%$) (let ((page$ (%Poly%lib!types.Page. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. tmp%%$)))))) (and (and (and (and (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT 32) (Poly%vstd!cell.PointsTo<u32.>. (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. self!))))))) (vstd!cell.impl&%3.id.? $ (UINT 32) (Poly%vstd!cell.PCell<u32.>. (lib!types.Page./Page/count (%Poly%lib!types.Page. (Poly%lib!types.Page. page$)))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. self!))))))) (vstd!cell.impl&%3.id.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner (%Poly%lib!types.Page. (Poly%lib!types.Page. page$))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (lib!types.PageLocalAccess./PageLocalAccess/prev (%Poly%lib!types.PageLocalAccess. self!))))))) (vstd!cell.impl&%3.id.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev (%Poly%lib!types.Page. (Poly%lib!types.Page. page$))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (lib!types.PageLocalAccess./PageLocalAccess/next (%Poly%lib!types.PageLocalAccess. self!))))))) (vstd!cell.impl&%3.id.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next (%Poly%lib!types.Page. (Poly%lib!types.Page. page$))))))) (let ((tmp%%$1 (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. self!))))))))) (and (is-core!option.Option./Some_ tmp%%$1) (let ((page_inner$ (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)))))) (lib!types.impl&%0.zeroed_except_block_size.? (Poly%lib!types.PageInner. page_inner$))))))))))) :pattern ((lib!types.impl&%6.wf_unused.? self! page_id! shared_access! popped! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::PageFullAccess::wf_empty_page_global")
(assert (fuel_bool_default fuel%lib!types.impl&%7.wf_empty_page_global.))
(assert (=> (fuel_bool fuel%lib!types.impl&%7.wf_empty_page_global.) (forall ((self! Poly)) (! (= (lib!types.impl&%7.wf_empty_page_global.? self!) (and (and (and (and (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. self!)))))))))) (= (vstd!cell.impl&%3.id.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner (%Poly%lib!types.Page. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. self!)))))))))))))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. (lib!types.PageFullAccess./PageFullAccess/l (%Poly%lib!types.PageFullAccess. self!)))))))))))) (= (vstd!raw_ptr.impl&%10.provenance.? (Poly%vstd!raw_ptr.IsExposed. (lib!types.PageSharedAccess./PageSharedAccess/exposed (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. self!))))))) (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. self!)))))))))))))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. self!)))))))))))) vstd!raw_ptr.Metadata./Thin)) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. (lib!types.PageFullAccess./PageFullAccess/l (%Poly%lib!types.PageFullAccess. self!)))))))))))) (lib!types.impl&%0.zeroed.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. (lib!types.PageFullAccess./PageFullAccess/l (%Poly%lib!types.PageFullAccess. self!)))))))))))))))) :pattern ((lib!types.impl&%7.wf_empty_page_global.? self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ (UINT 64) $ TYPE%lib!tokens.Mim.thread_of_segment.))
(set-info :comment ";; Function-Axioms lib::types::SegmentHeader::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%11.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%11.wf.) (forall ((self! Poly) (instance! Poly) (segment_id! Poly)) (! (= (lib!types.impl&%11.wf.? self! instance! segment_id!) (and (and (and (and (= (lib!types.SegmentHeader./SegmentHeader/instance (%Poly%lib!types.SegmentHeader. self!)) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. self!)) (%Poly%lib!tokens.SegmentId. segment_id!))) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. self!))))) (= (%Poly%lib!tokens.Mim.Instance. (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. self!))))))) (lib!types.SegmentHeader./SegmentHeader/instance (%Poly%lib!types.SegmentHeader. self!)))) (= (%Poly%lib!tokens.SegmentId. (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. self!))))))) (lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. self!))))) :pattern ((lib!types.impl&%11.wf.? self! instance! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_segment_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_segment_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_segment_ptr.) (forall ((ptr! Poly) (segment_id! Poly)) (! (= (lib!layout.is_segment_ptr.? ptr! segment_id!) (and (and (and (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.SegmentHeader. ptr!) (lib!layout.segment_start.? segment_id!)) (< (Add (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.SegmentHeader. ptr!) lib!config.SEGMENT_SIZE.?) (- (uHi SZ) 1))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.SegmentHeader.) ptr!))) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. segment_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.SegmentHeader.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_segment_ptr.? ptr! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::types::SegmentSharedAccess::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%12.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%12.wf.) (forall ((self! Poly) (segment_id! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%12.wf.? self! segment_id! mim_instance!) (and (lib!layout.is_segment_ptr.? (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.) (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to (%Poly%lib!types.SegmentSharedAccess. self!)))))) segment_id!) (let ((tmp%%$ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.) (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to (%Poly%lib!types.SegmentSharedAccess. self!)))))))) (and (is-vstd!raw_ptr.MemContents./Init_ tmp%%$) (let ((segment_header$ (%Poly%lib!types.SegmentHeader. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. tmp%%$)))))) (lib!types.impl&%11.wf.? (Poly%lib!types.SegmentHeader. segment_header$) mim_instance! segment_id!)))))) :pattern ((lib!types.impl&%12.wf.? self! segment_id! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::SegmentLocalAccess::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%13.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%13.wf.) (forall ((self! Poly) (segment_id! Poly) (segment_state! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%13.wf.? self! segment_id! segment_state! mim_instance!) (and (and (and (and (and (lib!types.impl&%12.wf.? (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access (%Poly%lib!tokens.SegmentState. segment_state!))) segment_id! mim_instance!) (= (vstd!cell.impl&%3.id.? $ TYPE%lib!types.SegmentHeaderMain. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (lib!types.SegmentHeader./SegmentHeader/main (%Poly%lib!types.SegmentHeader. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.) (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access (%Poly%lib!tokens.SegmentState. segment_state!)))))))))))))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.SegmentHeaderMain. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. (lib!types.SegmentLocalAccess./SegmentLocalAccess/main (%Poly%lib!types.SegmentLocalAccess. self!))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.SegmentHeaderMain. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. (lib!types.SegmentLocalAccess./SegmentLocalAccess/main (%Poly%lib!types.SegmentLocalAccess. self!))))))))) (= (vstd!cell.impl&%3.id.? $ TYPE%lib!types.SegmentHeaderMain2. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 (%Poly%lib!types.SegmentHeader. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.) (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access (%Poly%lib!tokens.SegmentState. segment_state!)))))))))))))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.SegmentHeaderMain2. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentLocalAccess./SegmentLocalAccess/main2 (%Poly%lib!types.SegmentLocalAccess. self!))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.SegmentHeaderMain2. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentLocalAccess./SegmentLocalAccess/main2 (%Poly%lib!types.SegmentLocalAccess. self!))))))))) (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. segment_state!)))) :pattern ((lib!types.impl&%13.wf.? self! segment_id! segment_state! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::pages_free_direct_match")
(assert (fuel_bool_default fuel%lib!types.pages_free_direct_match.))
(assert (=> (fuel_bool fuel%lib!types.pages_free_direct_match.) (forall ((pfd_val! Poly) (p_val! Poly) (emp! Poly)) (! (= (lib!types.pages_free_direct_match.? pfd_val! p_val! emp!) (and (=> (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. p_val!) 0) (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. pfd_val!) (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. emp!))) (=> (not (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. p_val!) 0)) (= (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. pfd_val!) (vstd!raw_ptr.spec_cast_ptr_to_usize.? $ TYPE%lib!types.Page. p_val!))))) :pattern ((lib!types.pages_free_direct_match.? pfd_val! p_val! emp!))))))
(set-info :comment ";; Function-Axioms lib::config::SMALL_WSIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.SMALL_WSIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_WSIZE_MAX.) (= lib!config.SMALL_WSIZE_MAX.? 128)))
(assert (uInv SZ lib!config.SMALL_WSIZE_MAX.?))
(set-info :comment ";; Function-Axioms lib::config::PAGES_DIRECT")
(assert (fuel_bool_default fuel%lib!config.PAGES_DIRECT.))
(assert (=> (fuel_bool fuel%lib!config.PAGES_DIRECT.) (= lib!config.PAGES_DIRECT.? (uClip SZ (Add lib!config.SMALL_WSIZE_MAX.? 1)))))
(assert (uInv SZ lib!config.PAGES_DIRECT.?))
(set-info :comment ";; Function-Axioms lib::bin_sizes::smallest_bin_fitting_size")
(assert (fuel_bool_default fuel%lib!bin_sizes.smallest_bin_fitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.smallest_bin_fitting_size.) (forall ((size! Poly)) (! (= (lib!bin_sizes.smallest_bin_fitting_size.? size!) (let ((bytes_per_word$ (uClip 32 (EucDiv SZ 8)))) (let ((wsize$ (EucDiv (Sub (Add (%I size!) bytes_per_word$) 1) bytes_per_word$))) (ite (<= wsize$ 1) 1 (ite (<= wsize$ 8) wsize$ (ite (> wsize$ 524288) lib!config.BIN_HUGE.? (let ((w$ (uClip 64 (Sub wsize$ 1)))) (let ((lz$ (vstd!std_specs.bits.u64_leading_zeros.? (I w$)))) (let ((b$ (uClip 8 (Sub (Sub SZ 1) lz$)))) (let ((shifted$ (uClip 8 (uClip 64 (bitshr (I w$) (I (uClip 64 (Sub b$ 2)))))))) (let ((bin_idx$ (Sub (Add (Mul b$ 4) (uClip 8 (bitand (I shifted$) (I 3)))) 3))) bin_idx$))))))))))) :pattern ((lib!bin_sizes.smallest_bin_fitting_size.? size!))))))
(set-info :comment ";; Function-Axioms lib::types::pages_free_direct_is_correct")
(assert (fuel_bool_default fuel%lib!types.pages_free_direct_is_correct.))
(assert (=> (fuel_bool fuel%lib!types.pages_free_direct_is_correct.) (forall ((pfd! Poly) (pages! Poly) (emp! Poly)) (! (= (lib!types.pages_free_direct_is_correct.? pfd! pages! emp!) (and (and (= (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) pfd!) lib!config.PAGES_DIRECT.?) (= (vstd!seq.Seq.len.? $ TYPE%lib!types.PageQueue. pages!) (Add lib!config.BIN_FULL.? 1))) (forall ((wsize$ Poly)) (! (=> (has_type wsize$ INT) (=> (and (<= 0 (%I wsize$)) (< (%I wsize$) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) pfd!))) (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) pfd! wsize$) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. pages! (I (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize$) lib!config.INTPTR_SIZE.?)))))))) emp!))) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) pfd! wsize$)))))) :pattern ((lib!types.pages_free_direct_is_correct.? pfd! pages! emp!))))))
(set-info :comment ";; Function-Axioms lib::types::HeapLocalAccess::wf_basic")
(assert (fuel_bool_default fuel%lib!types.impl&%18.wf_basic.))
(assert (=> (fuel_bool fuel%lib!types.impl&%18.wf_basic.) (forall ((self! Poly) (heap_id! Poly) (heap_state! Poly) (tld_id! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%18.wf_basic.? self! heap_id! heap_state! tld_id! mim_instance!) (and (lib!types.impl&%17.wf.? (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. heap_state!))) heap_id! tld_id! mim_instance!) (let ((heap$ (%Poly%lib!types.Heap. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. heap_state!))))))))))))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (vstd!cell.impl&%3.id.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. (Poly%lib!types.Heap. heap$)))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. self!))))))) (= (vstd!cell.impl&%3.id.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. (Poly%lib!types.Heap. heap$)))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. self!)))))))) (= (vstd!cell.impl&%3.id.? $ (UINT SZ) (Poly%vstd!cell.PCell<usize.>. (lib!types.Heap./Heap/page_count (%Poly%lib!types.Heap. (Poly%lib!types.Heap. heap$))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. self!))))))))) (= (vstd!cell.impl&%3.id.? $ (UINT SZ) (Poly%vstd!cell.PCell<usize.>. (lib!types.Heap./Heap/page_retired_min (%Poly%lib!types.Heap. (Poly%lib!types.Heap. heap$))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (%Poly%lib!types.HeapLocalAccess. self!))))))))) (= (vstd!cell.impl&%3.id.? $ (UINT SZ) (Poly%vstd!cell.PCell<usize.>. (lib!types.Heap./Heap/page_retired_max (%Poly%lib!types.Heap. (Poly%lib!types.Heap. heap$))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (%Poly%lib!types.HeapLocalAccess. self!))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. self!)))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. self!)))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. self!))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (%Poly%lib!types.HeapLocalAccess. self!))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (%Poly%lib!types.HeapLocalAccess. self!))))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (lib!bin_sizes.valid_bin_idx.? i$) (= (lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. self!)))))))))) i$))) (lib!bin_sizes.size_of_bin.? i$)))) :pattern ((lib!bin_sizes.valid_bin_idx.? i$))))) (= (lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. self!)))))))))) (I 0)))) 8)) (= (lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. self!)))))))))) (I lib!config.BIN_FULL.?)))) (nClip (Mul 8 (nClip (Add 524288 2)))))) (= (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. self!))))))))))) lib!config.PAGES_DIRECT.?)) (= (vstd!seq.Seq.len.? $ TYPE%lib!types.PageQueue. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. self!))))))))))) (Add lib!config.BIN_FULL.? 1)))))) :pattern ((lib!types.impl&%18.wf_basic.? self! heap_id! heap_state! tld_id! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::HeapLocalAccess::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%18.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%18.wf.) (forall ((self! Poly) (heap_id! Poly) (heap_state! Poly) (tld_id! Poly) (mim_instance! Poly) (emp! Poly)) (! (= (lib!types.impl&%18.wf.? self! heap_id! heap_state! tld_id! mim_instance! emp!) (and (and (lib!types.impl&%18.wf_basic.? self! heap_id! heap_state! tld_id! mim_instance!) (lib!types.pages_free_direct_is_correct.? (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. self!)))))))))) (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. self!)))))))))) emp!)) (= (lib!types.Heap./Heap/page_empty_ptr (%Poly%lib!types.Heap. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. heap_state!)))))))))))))) (%Poly%ptr_mut%<lib!types.Page.>. emp!)))) :pattern ((lib!types.impl&%18.wf.? self! heap_id! heap_state! tld_id! mim_instance! emp!))))))
(set-info :comment ";; Function-Axioms lib::types::common_preserves")
(assert (fuel_bool_default fuel%lib!types.common_preserves.))
(assert (=> (fuel_bool fuel%lib!types.common_preserves.) (forall ((l1! Poly) (l2! Poly)) (! (= (lib!types.common_preserves.? l1! l2!) (and (and (= (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. l1!)) (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. l2!))) (= (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. l1!)) (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. l2!)))) (= (lib!types.Local./Local/instance (%Poly%lib!types.Local. l1!)) (lib!types.Local./Local/instance (%Poly%lib!types.Local. l2!))))) :pattern ((lib!types.common_preserves.? l1! l2!))))))
(set-info :comment ";; Function-Axioms lib::os_mem::MemChunk::os_rw_bytes")
(assert (fuel_bool_default fuel%lib!os_mem_util.impl&%0.os_rw_bytes.))
(assert (=> (fuel_bool fuel%lib!os_mem_util.impl&%0.os_rw_bytes.) (forall ((self! Poly)) (! (= (lib!os_mem_util.impl&%0.os_rw_bytes.? self!) (lib!os_mem.impl&%0.range_os_rw.? self!)) :pattern ((lib!os_mem_util.impl&%0.os_rw_bytes.? self!))))))
(set-info :comment ";; Function-Axioms lib::os_mem_util::segment_info_range")
(assert (fuel_bool_default fuel%lib!os_mem_util.segment_info_range.))
(assert (=> (fuel_bool fuel%lib!os_mem_util.segment_info_range.) (forall ((segment_id! Poly)) (! (= (lib!os_mem_util.segment_info_range.? segment_id!) (vstd!set_lib.set_int_range.? (I (lib!layout.segment_start.? segment_id!)) (I (Add (Add (lib!layout.segment_start.? segment_id!) lib!config.SIZEOF_SEGMENT_HEADER.?) (Mul lib!config.SIZEOF_PAGE_HEADER.? (Add lib!config.SLICES_PER_SEGMENT.? 1)))))) :pattern ((lib!os_mem_util.segment_info_range.? segment_id!))))))
(set-info :comment ";; Function-Axioms lib::os_mem_util::mem_chunk_good1")
(assert (fuel_bool_default fuel%lib!os_mem_util.mem_chunk_good1.))
(assert (=> (fuel_bool fuel%lib!os_mem_util.mem_chunk_good1.) (forall ((mem! Poly) (segment_id! Poly) (commit_bytes! Poly) (decommit_bytes! Poly) (pages_range_total! Poly) (pages_used_total! Poly)) (! (= (lib!os_mem_util.mem_chunk_good1.? mem! segment_id! commit_bytes! decommit_bytes! pages_range_total! pages_used_total!) (and (and (and (and (and (and (and (lib!os_mem.impl&%0.wf.? mem!) (lib!os_mem.impl&%0.os_exact_range.? mem! (I (lib!layout.segment_start.? segment_id!)) (I lib!config.SEGMENT_SIZE.?))) (= (vstd!raw_ptr.impl&%11.provenance.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. mem!)))) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. segment_id!)))) (vstd!set.impl&%0.subset_of.? $ INT commit_bytes! (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? mem!)))) (vstd!set.impl&%0.subset_of.? $ INT decommit_bytes! commit_bytes!)) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem_util.segment_info_range.? segment_id!)) (vstd!set.impl&%0.difference.? $ INT commit_bytes! decommit_bytes!))) (vstd!set.impl&%0.subset_of.? $ INT pages_used_total! (vstd!set.impl&%0.difference.? $ INT commit_bytes! decommit_bytes!))) (vstd!set.impl&%0.subset_of.? $ INT (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%0.os_rw_bytes.? mem!)) (vstd!set.impl&%0.union.? $ INT (vstd!set.impl&%0.union.? $ INT (Poly%vstd!set.Set<int.>. (vstd!raw_ptr.impl&%11.dom.? (Poly%vstd!raw_ptr.PointsToRaw. (lib!os_mem.MemChunk./MemChunk/points_to (%Poly%lib!os_mem.MemChunk. mem!))))) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.segment_info_range.? segment_id!))) pages_range_total!)))) :pattern ((lib!os_mem_util.mem_chunk_good1.? mem! segment_id! commit_bytes! decommit_bytes! pages_range_total! pages_used_total!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::commit_mask")
(assert (fuel_bool_default fuel%lib!types.impl&%21.commit_mask.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.commit_mask.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!types.impl&%21.commit_mask.? self! segment_id!) (lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask (%Poly%lib!types.SegmentHeaderMain. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.SegmentHeaderMain. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. (lib!types.SegmentLocalAccess./SegmentLocalAccess/main (%Poly%lib!types.SegmentLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!))) segment_id!)))))))))))))) :pattern ((lib!types.impl&%21.commit_mask.? self! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::decommit_mask")
(assert (fuel_bool_default fuel%lib!types.impl&%21.decommit_mask.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.decommit_mask.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!types.impl&%21.decommit_mask.? self! segment_id!) (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask (%Poly%lib!types.SegmentHeaderMain. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.SegmentHeaderMain. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain.>. (lib!types.SegmentLocalAccess./SegmentLocalAccess/main (%Poly%lib!types.SegmentLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!))) segment_id!)))))))))))))) :pattern ((lib!types.impl&%21.decommit_mask.? self! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::is_used_primary")
(assert (fuel_bool_default fuel%lib!types.impl&%21.is_used_primary.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.is_used_primary.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!types.impl&%21.is_used_primary.? self! page_id!) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!))))))) page_id!) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) page_id!)))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) page_id!))) (core!option.Option./Some (I 0))))) :pattern ((lib!types.impl&%21.is_used_primary.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::block_size")
(assert (fuel_bool_default fuel%lib!types.impl&%21.block_size.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.block_size.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!types.impl&%21.block_size.? self! page_id!) (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!))) page_id!)))))))))))))) :pattern ((lib!types.impl&%21.block_size.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::page_capacity")
(assert (fuel_bool_default fuel%lib!types.impl&%21.page_capacity.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.page_capacity.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!types.impl&%21.page_capacity.? self! page_id!) (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!))) page_id!)))))))))))))) :pattern ((lib!types.impl&%21.page_capacity.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::page_count")
(assert (fuel_bool_default fuel%lib!types.impl&%21.page_count.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.page_count.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!types.impl&%21.page_count.? self! page_id!) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT 32) (Poly%vstd!cell.PointsTo<u32.>. (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!))) page_id!))))))))))))) :pattern ((lib!types.impl&%21.page_count.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::mem_chunk_good")
(assert (fuel_bool_default fuel%lib!os_mem_util.impl&%1.mem_chunk_good.))
(assert (=> (fuel_bool fuel%lib!os_mem_util.impl&%1.mem_chunk_good.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!os_mem_util.impl&%1.mem_chunk_good.? self! segment_id!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!)))) segment_id!) (lib!os_mem_util.mem_chunk_good1.? (Poly%lib!os_mem.MemChunk. (lib!types.SegmentLocalAccess./SegmentLocalAccess/mem (%Poly%lib!types.SegmentLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!))) segment_id!)))) segment_id! (Poly%vstd!set.Set<int.>. (lib!commit_mask.impl&%0.bytes.? (Poly%lib!commit_mask.CommitMask. (lib!types.impl&%21.commit_mask.? self! segment_id!)) segment_id!)) (Poly%vstd!set.Set<int.>. (lib!commit_mask.impl&%0.bytes.? (Poly%lib!commit_mask.CommitMask. (lib!types.impl&%21.decommit_mask.? self! segment_id!)) segment_id!)) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%1.segment_pages_range_total.? self! segment_id!)) (Poly%vstd!set.Set<int.>. (lib!os_mem_util.impl&%1.segment_pages_used_total.? self! segment_id!))))) :pattern ((lib!os_mem_util.impl&%1.mem_chunk_good.? self! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_page_ptr_opt")
(assert (fuel_bool_default fuel%lib!layout.is_page_ptr_opt.))
(assert (=> (fuel_bool fuel%lib!layout.is_page_ptr_opt.) (forall ((pptr! Poly) (opt_page_id! Poly)) (! (= (lib!layout.is_page_ptr_opt.? pptr! opt_page_id!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. opt_page_id!)) (let ((page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. opt_page_id!))))) (and (lib!layout.is_page_ptr.? pptr! (Poly%lib!tokens.PageId. page_id$)) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) pptr!))) 0)))) (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) pptr!))) 0))) :pattern ((lib!layout.is_page_ptr_opt.? pptr! opt_page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::page_organization_queues_match")
(assert (fuel_bool_default fuel%lib!types.page_organization_queues_match.))
(assert (=> (fuel_bool fuel%lib!types.page_organization_queues_match.) (forall ((org_queues! Poly) (queues! Poly)) (! (= (lib!types.page_organization_queues_match.? org_queues! queues!) (and (and (= (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. org_queues!) (vstd!seq.Seq.len.? $ TYPE%lib!types.SpanQueueHeader. queues!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. org_queues!))) (lib!layout.is_page_ptr_opt.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.SpanQueueHeader./SpanQueueHeader/first (%Poly%lib!types.SpanQueueHeader. (vstd!seq.Seq.index.? $ TYPE%lib!types.SpanQueueHeader. queues! i$)))) (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. org_queues! i$))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!types.SpanQueueHeader. queues! i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. org_queues!))) (lib!layout.is_page_ptr_opt.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.SpanQueueHeader./SpanQueueHeader/last (%Poly%lib!types.SpanQueueHeader. (vstd!seq.Seq.index.? $ TYPE%lib!types.SpanQueueHeader. queues! i$)))) (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. org_queues! i$))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!types.SpanQueueHeader. queues! i$)))))) :pattern ((lib!types.page_organization_queues_match.? org_queues! queues!))))))
(set-info :comment ";; Function-Axioms lib::types::page_organization_used_queues_match")
(assert (fuel_bool_default fuel%lib!types.page_organization_used_queues_match.))
(assert (=> (fuel_bool fuel%lib!types.page_organization_used_queues_match.) (forall ((org_queues! Poly) (queues! Poly)) (! (= (lib!types.page_organization_used_queues_match.? org_queues! queues!) (and (and (= (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. org_queues!) (vstd!seq.Seq.len.? $ TYPE%lib!types.PageQueue. queues!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. org_queues!))) (lib!layout.is_page_ptr_opt.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. queues! i$)))) (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. org_queues! i$))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. queues! i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. org_queues!))) (lib!layout.is_page_ptr_opt.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/last (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. queues! i$)))) (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. org_queues! i$))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. queues! i$)))))) :pattern ((lib!types.page_organization_used_queues_match.? org_queues! queues!))))))
(set-info :comment ";; Function-Axioms lib::types::PageInner::in_full")
(assert (fuel_bool_default fuel%lib!flags.impl&%0.in_full.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.in_full.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.in_full.? self!) (lib!flags.flags1_in_full.? (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.in_full.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_SegmentCreating")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_SegmentCreating.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_SegmentCreating.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_SegmentCreating.? self!) (is-lib!page_organization.Popped./SegmentCreating_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_SegmentCreating.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_Ready")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_Ready.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_Ready.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_Ready.? self!) (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_Ready.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_Ready_0")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_Ready_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_Ready_0.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_Ready_0.? self!) (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_Ready_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.impl&%2.get_Ready_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.impl&%2.get_Ready_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_VeryUnready")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_VeryUnready.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_VeryUnready.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_VeryUnready.? self!) (is-lib!page_organization.Popped./VeryUnready_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_VeryUnready.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_VeryUnready_0")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_VeryUnready_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_VeryUnready_0.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_VeryUnready_0.? self!) (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_VeryUnready_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.impl&%2.get_VeryUnready_0.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.impl&%2.get_VeryUnready_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_VeryUnready_1")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_VeryUnready_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_VeryUnready_1.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_VeryUnready_1.? self!) (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_VeryUnready_1.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::page_organization_pages_match_data")
(assert (fuel_bool_default fuel%lib!types.page_organization_pages_match_data.))
(assert (=> (fuel_bool fuel%lib!types.page_organization_pages_match_data.) (forall ((page_data! Poly) (pla! Poly) (psa! Poly) (page_id! Poly) (popped! Poly)) (! (= (lib!types.page_organization_pages_match_data.? page_data! pla! psa! page_id! popped!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. psa!))))))) (let ((tmp%%$ (tuple%4./tuple%4 (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT 32) (Poly%vstd!cell.PointsTo<u32.>. (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. pla!)))))))) (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. pla!)))))))) (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (lib!types.PageLocalAccess./PageLocalAccess/prev (%Poly%lib!types.PageLocalAccess. pla!)))))))) (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (lib!types.PageLocalAccess./PageLocalAccess/next (%Poly%lib!types.PageLocalAccess. pla!))))))))))) (and (and (and (and (and (is-tuple%4./tuple%4_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))))) (let ((inner$ (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))))) (let ((prev$ (%Poly%ptr_mut%<lib!types.Page.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))))) (let ((next$ (%Poly%ptr_mut%<lib!types.Page.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))))) (and (and (and (and (let ((tmp%%$1 (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. page_data!)))) (=> (not (is-core!option.Option./None_ tmp%%$1)) (let ((c$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)))))) (= count$ c$)))) (let ((tmp%%$2 (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. page_data!)))) (=> (not (is-core!option.Option./None_ tmp%%$2)) (let ((b$ (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)))))) (= (lib!flags.impl&%0.in_full.? (Poly%lib!types.PageInner. inner$)) b$))))) (let ((tmp%%$3 (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. page_data!)))) (=> (not (is-core!option.Option./None_ tmp%%$3)) (let ((o$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)))))) (= (lib!types.Page./Page/offset (%Poly%lib!types.Page. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. psa!))))))))))) (Mul o$ lib!config.SIZEOF_PAGE_HEADER.?)))))) (let ((tmp%%$4 (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. page_data!)))) (=> (not (is-core!option.Option./None_ tmp%%$4)) (let ((page_queue_data$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$4)))))) (and (lib!layout.is_page_ptr_opt.? (Poly%ptr_mut%<lib!types.Page.>. prev$) (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. page_queue_data$))))) (lib!layout.is_page_ptr_opt.? (Poly%ptr_mut%<lib!types.Page.>. next$) (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. page_queue_data$)))))))))) (let ((tmp%%$5 (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. page_data!)))) (ite (is-core!option.Option./None_ tmp%%$5) (and (=> (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) 0) (and (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. page_data!))) (ite (let ((sid$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. popped!)))) (and (is-lib!page_organization.Popped./SegmentCreating_ (%Poly%lib!page_organization.Popped. popped!)) (= sid$ (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))) (let ((sid$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. popped!)))) true) (not (= (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. inner$))) 0)))) (=> (not (is-lib!page_organization.Popped./SegmentCreating_ (%Poly%lib!page_organization.Popped. popped!))) (not (= (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. inner$))) 0))))) (=> (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) 0)) (=> (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. page_data!)) (core!option.Option./Some (I 0))) (=> (and (not (and (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. popped!)) (= (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. popped!)) (%Poly%lib!tokens.PageId. page_id!)))) (not (and (and (is-lib!page_organization.Popped./VeryUnready_ (%Poly%lib!page_organization.Popped. popped!)) (= (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. popped!)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (= (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. popped!)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. page_data!)) (not (= (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. inner$))) 0))))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5))))))) (and (and (and (and (and (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) 0)) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. page_data!))) (not (= (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. inner$))) 0))) (= (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. inner$))) bsize$)) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. page_data!))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. page_data!)) (core!option.Option./Some (I 0)))))))))))))))) :pattern ((lib!types.page_organization_pages_match_data.? page_data! pla! psa! page_id! popped!))))))
(set-info :comment ";; Function-Axioms lib::types::page_organization_pages_match")
(assert (fuel_bool_default fuel%lib!types.page_organization_pages_match.))
(assert (=> (fuel_bool fuel%lib!types.page_organization_pages_match.) (forall ((org_pages! Poly) (pages! Poly) (psa! Poly) (popped! Poly)) (! (= (lib!types.page_organization_pages_match.? org_pages! pages! psa! popped!) (and (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. org_pages!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. pages!)) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. org_pages!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa!))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. org_pages!) page_id$) (lib!types.page_organization_pages_match_data.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. org_pages! page_id$) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. pages! page_id$) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa! page_id$) page_id$ popped!))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. org_pages!) page_id$)))))) :pattern ((lib!types.page_organization_pages_match.? org_pages! pages! psa! popped!))))))
(set-info :comment ";; Function-Axioms lib::types::page_organization_segments_match")
(assert (fuel_bool_default fuel%lib!types.page_organization_segments_match.))
(assert (=> (fuel_bool fuel%lib!types.page_organization_segments_match.) (forall ((org_segments! Poly) (segments! Poly)) (! (= (lib!types.page_organization_segments_match.? org_segments! segments!) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. org_segments!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. segments!)) (forall ((segment_id$ Poly)) (! (=> (has_type segment_id$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. segments!) segment_id$) (= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. org_segments! segment_id$))) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.SegmentHeaderMain2. (Poly%vstd!cell.PointsTo<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentLocalAccess./SegmentLocalAccess/main2 (%Poly%lib!types.SegmentLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. segments! segment_id$)))))))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. segments!) segment_id$)))))) :pattern ((lib!types.page_organization_segments_match.? org_segments! segments!))))))
(set-info :comment ";; Function-Axioms lib::types::page_organization_matches_token_page")
(assert (fuel_bool_default fuel%lib!types.page_organization_matches_token_page.))
(assert (=> (fuel_bool fuel%lib!types.page_organization_matches_token_page.) (forall ((page_data! Poly) (page_state! Poly)) (! (= (lib!types.page_organization_matches_token_page.? page_data! page_state!) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. page_data!))) (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. page_data!)))))) (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. page_state!))))) :pattern ((lib!types.page_organization_matches_token_page.? page_data! page_state!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::page_organization_valid")
(assert (fuel_bool_default fuel%lib!types.impl&%21.page_organization_valid.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.page_organization_valid.) (forall ((self! Poly)) (! (= (lib!types.impl&%21.page_organization_valid.? self!) (and (and (and (and (and (and (and (and (and (and (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (lib!types.Local./Local/tld (%Poly%lib!types.Local. self!)))))))) (lib!types.page_organization_queues_match.? (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32)) (Poly%array%. (lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (lib!types.Local./Local/tld (%Poly%lib!types.Local. self!)))))))))))))))))) (lib!types.page_organization_used_queues_match.? (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. self!))))))))))))))) (lib!types.page_organization_pages_match.? (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/psa (%Poly%lib!types.Local. self!))) (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))))) (lib!types.page_organization_segments_match.? (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!))))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!))))))) page_id$) (= (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) page_id$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!)))) page_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!))))))) page_id$))))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!))))))) page_id$) (=> (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) page_id$))) (lib!types.page_organization_matches_token_page.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) page_id$) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))))))) page_id$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!))))))) page_id$))))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!)))) page_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!))))))) page_id$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!)))) page_id$))))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!)))) page_id$) (= (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!))) page_id$) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/psa (%Poly%lib!types.Local. self!))) page_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!)))) page_id$))))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))))) page_id$) (= (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))))))) page_id$))) (%Poly%lib!types.PageSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/psa (%Poly%lib!types.Local. self!))) page_id$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))))) page_id$)))))) :pattern ((lib!types.impl&%21.page_organization_valid.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::wf_main")
(assert (fuel_bool_default fuel%lib!types.impl&%21.wf_main.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.wf_main.) (forall ((self! Poly)) (! (= (lib!types.impl&%21.wf_main.? self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!layout.is_tld_ptr.? (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (lib!types.Local./Local/tld (%Poly%lib!types.Local. self!)))))) (Poly%lib!tokens.TldId. (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. self!)))) (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))) (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!)))) (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))) (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. self!)))) (= (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. self!)) (lib!thread.impl&%2.view.? (Poly%lib!thread.IsThread. (lib!types.Local./Local/is_thread (%Poly%lib!types.Local. self!)))))) (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. (lib!types.Local./Local/checked_token (%Poly%lib!types.Local. self!))))))) (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!)))) (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (Poly%lib!tokens.Mim.thread_checked_state. (lib!types.Local./Local/checked_token (%Poly%lib!types.Local. self!))))))) (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. self!)))) (= (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance (%Poly%lib!tokens.Mim.my_inst_token_data. (Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.impl&%5.view.? (Poly%lib!tokens.Mim.my_inst. (lib!types.Local./Local/my_inst (%Poly%lib!types.Local. self!))))))) (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!)))) (= (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value (%Poly%lib!tokens.Mim.my_inst_token_data. (Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.impl&%5.view.? (Poly%lib!tokens.Mim.my_inst. (lib!types.Local./Local/my_inst (%Poly%lib!types.Local. self!))))))) (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!)))) (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!)))))) (= (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))) (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. self!)))) (lib!types.impl&%18.wf.? (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. self!))) (Poly%lib!tokens.HeapId. (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. self!))) (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))))))) (Poly%lib!tokens.TldId. (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. self!))) (Poly%lib!tokens.Mim.Instance. (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!))) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. self!))))))))))))))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!)))) page_id$) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!)))) page_id$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))))) page_id$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!)))) page_id$))))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!)))))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!)))) page_id$) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))))) page_id$) (lib!types.impl&%6.wf.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!))) page_id$) page_id$ (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))))))) page_id$) (Poly%lib!tokens.Mim.Instance. (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!)))) page_id$))))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!)))) page_id$) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!)))) page_id$) (lib!types.impl&%6.wf_unused.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!))) page_id$) page_id$ (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. self!))) page_id$) (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!)))))) (Poly%lib!tokens.Mim.Instance. (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!)))) page_id$))))) (forall ((segment_id$ Poly)) (! (=> (has_type segment_id$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!)))) segment_id$) (lib!types.impl&%13.wf.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!))) segment_id$) segment_id$ (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))))))) segment_id$) (Poly%lib!tokens.Mim.Instance. (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!)))) segment_id$))))) (forall ((segment_id$ Poly)) (! (=> (has_type segment_id$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!)))) segment_id$) (lib!os_mem_util.impl&%1.mem_chunk_good.? self! segment_id$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!)))) segment_id$))))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (lib!types.Local./Local/tld (%Poly%lib!types.Local. self!)))))))) (lib!types.impl&%21.page_organization_valid.? self!)) (lib!types.impl&%7.wf_empty_page_global.? (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. self!))))))) :pattern ((lib!types.impl&%21.wf_main.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%21.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.wf.) (forall ((self! Poly)) (! (= (lib!types.impl&%21.wf.? self!) (and (lib!types.impl&%21.wf_main.? self!) (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. self!))))) lib!page_organization.Popped./No))) :pattern ((lib!types.impl&%21.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::wf_basic")
(assert (fuel_bool_default fuel%lib!types.impl&%21.wf_basic.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.wf_basic.) (forall ((self! Poly)) (! (= (lib!types.impl&%21.wf_basic.? self!) (and (and (and (and (and (and (and (lib!layout.is_tld_ptr.? (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Tld.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (lib!types.Local./Local/tld (%Poly%lib!types.Local. self!)))))) (Poly%lib!tokens.TldId. (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. self!)))) (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))) (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!)))) (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))) (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. self!)))) (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. self!)))))) (= (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!)))))))))) (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. self!)))) (lib!types.impl&%18.wf_basic.? (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. self!))) (Poly%lib!tokens.HeapId. (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. self!))) (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))))))) (Poly%lib!tokens.TldId. (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. self!))) (Poly%lib!tokens.Mim.Instance. (lib!types.Local./Local/instance (%Poly%lib!types.Local. self!))))) (= (lib!types.Heap./Heap/page_empty_ptr (%Poly%lib!types.Heap. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. self!))))))))))))))))))))))))) (%Poly%ptr_mut%<lib!types.Page.>. (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. self!)))))))))))))))) (lib!types.impl&%7.wf_empty_page_global.? (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. self!))))))) :pattern ((lib!types.impl&%21.wf_basic.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::Local::page_reserved")
(assert (fuel_bool_default fuel%lib!types.impl&%21.page_reserved.))
(assert (=> (fuel_bool fuel%lib!types.impl&%21.page_reserved.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!types.impl&%21.page_reserved.? self! page_id!) (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. self!))) page_id!)))))))))))))) :pattern ((lib!types.impl&%21.page_reserved.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::types::HeapPtr::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%24.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%24.wf.) (forall ((self! Poly)) (! (= (lib!types.impl&%24.wf.? self!) (lib!layout.is_heap_ptr.? (Poly%ptr_mut%<lib!types.Heap.>. (lib!types.HeapPtr./HeapPtr/heap_ptr (%Poly%lib!types.HeapPtr. self!))) (Poly%lib!tokens.HeapId. (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. self!))))) :pattern ((lib!types.impl&%24.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::HeapPtr::is_in")
(assert (fuel_bool_default fuel%lib!types.impl&%24.is_in.))
(assert (=> (fuel_bool fuel%lib!types.impl&%24.is_in.) (forall ((self! Poly) (local! Poly)) (! (= (lib!types.impl&%24.is_in.? self! local!) (= (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. local!)) (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. self!)))) :pattern ((lib!types.impl&%24.is_in.? self! local!))))))
(set-info :comment ";; Function-Axioms lib::types::local_page_count_update")
(assert (fuel_bool_default fuel%lib!types.local_page_count_update.))
(assert (=> (fuel_bool fuel%lib!types.local_page_count_update.) (forall ((loc1! Poly) (loc2! Poly)) (! (= (lib!types.local_page_count_update.? loc1! loc2!) (and (and (and (and (= (%Poly%lib!types.Local. loc2!) (lib!types.Local./Local (%Poly%lib!thread.ThreadId. (Poly%lib!thread.ThreadId. (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.Mim.my_inst. (Poly%lib!tokens.Mim.my_inst. (lib!types.Local./Local/my_inst (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.Mim.Instance. (Poly%lib!tokens.Mim.Instance. (lib!types.Local./Local/instance (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.Mim.thread_local_state. (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.Mim.thread_checked_state. (Poly%lib!tokens.Mim.thread_checked_state. (lib!types.Local./Local/checked_token (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!thread.IsThread. (Poly%lib!thread.IsThread. (lib!types.Local./Local/is_thread (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!)))) (%Poly%lib!tokens.TldId. (Poly%lib!tokens.TldId. (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (lib!types.Local./Local/tld (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/psa (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. loc1!)))))) (= (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!)) (let ((tmp%%$ (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!))))))) (let ((tmp%%$1 (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc1!)))) (lib!types.HeapLocalAccess./HeapLocalAccess (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. tmp%%$1))) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. tmp%%$1))) (%Poly%vstd!cell.PointsTo<usize.>. (Poly%vstd!cell.PointsTo<usize.>. tmp%%$)) (%Poly%vstd!cell.PointsTo<usize.>. (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. tmp%%$1))))) (%Poly%vstd!cell.PointsTo<usize.>. (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. tmp%%$1)))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc1!)))))))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!)))))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc1!)))))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!))))))))))))) :pattern ((lib!types.local_page_count_update.? loc1! loc2!))))))
(set-info :comment ";; Function-Axioms lib::types::PagePtr::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%33.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%33.wf.) (forall ((self! Poly)) (! (= (lib!types.impl&%33.wf.? self!) (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. self!))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. self!)))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. self!)))))) 0)))) :pattern ((lib!types.impl&%33.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::PagePtr::is_in")
(assert (fuel_bool_default fuel%lib!types.impl&%33.is_in.))
(assert (=> (fuel_bool fuel%lib!types.impl&%33.is_in.) (forall ((self! Poly) (local! Poly)) (! (= (lib!types.impl&%33.is_in.? self! local!) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. local!)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. self!))))) :pattern ((lib!types.impl&%33.is_in.? self! local!))))))
(set-info :comment ";; Function-Axioms lib::types::PagePtr::is_used_and_primary")
(assert (fuel_bool_default fuel%lib!types.impl&%33.is_used_and_primary.))
(assert (=> (fuel_bool fuel%lib!types.impl&%33.is_used_and_primary.) (forall ((self! Poly) (local! Poly)) (! (= (lib!types.impl&%33.is_used_and_primary.? self! local!) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. local!)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. self!)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. local!)))))))))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. self!))))) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. local!))))))))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. self!)))))) 0))) :pattern ((lib!types.impl&%33.is_used_and_primary.? self! local!))))))
(set-info :comment ";; Function-Axioms lib::types::PageInner::has_aligned")
(assert (fuel_bool_default fuel%lib!flags.impl&%0.has_aligned.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.has_aligned.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.has_aligned.? self!) (lib!flags.flags1_has_aligned.? (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.has_aligned.? self!))))))
(set-info :comment ";; Function-Specs lib::bin_sizes::pfd_lower")
(declare-fun req%lib!bin_sizes.pfd_lower. (Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((bin_idx! Poly)) (! (= (req%lib!bin_sizes.pfd_lower. bin_idx!) (=> %%global_location_label%%17 (lib!bin_sizes.valid_bin_idx.? bin_idx!))) :pattern ((req%lib!bin_sizes.pfd_lower. bin_idx!)))))
(set-info :comment ";; Function-Axioms lib::bin_sizes::pfd_lower")
(assert (fuel_bool_default fuel%lib!bin_sizes.pfd_lower.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.pfd_lower.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.pfd_lower.? bin_idx!) (ite (= (%I bin_idx!) 1) 0 (nClip (Add (nClip (EucDiv (lib!bin_sizes.size_of_bin.? (I (Sub (%I bin_idx!) 1))) lib!config.INTPTR_SIZE.?)) 1)))) :pattern ((lib!bin_sizes.pfd_lower.? bin_idx!))))))
(assert (forall ((bin_idx! Poly)) (! (=> (has_type bin_idx! INT) (<= 0 (lib!bin_sizes.pfd_lower.? bin_idx!))) :pattern ((lib!bin_sizes.pfd_lower.? bin_idx!)))))
(set-info :comment ";; Function-Specs lib::bin_sizes::pfd_upper")
(declare-fun req%lib!bin_sizes.pfd_upper. (Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((bin_idx! Poly)) (! (= (req%lib!bin_sizes.pfd_upper. bin_idx!) (=> %%global_location_label%%18 (lib!bin_sizes.valid_bin_idx.? bin_idx!))) :pattern ((req%lib!bin_sizes.pfd_upper. bin_idx!)))))
(set-info :comment ";; Function-Axioms lib::bin_sizes::pfd_upper")
(assert (fuel_bool_default fuel%lib!bin_sizes.pfd_upper.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.pfd_upper.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.pfd_upper.? bin_idx!) (nClip (EucDiv (lib!bin_sizes.size_of_bin.? bin_idx!) lib!config.INTPTR_SIZE.?))) :pattern ((lib!bin_sizes.pfd_upper.? bin_idx!))))))
(assert (forall ((bin_idx! Poly)) (! (=> (has_type bin_idx! INT) (<= 0 (lib!bin_sizes.pfd_upper.? bin_idx!))) :pattern ((lib!bin_sizes.pfd_upper.? bin_idx!)))))
(set-info :comment ";; Function-Axioms lib::queues::pfd_direct_update")
(assert (fuel_bool_default fuel%lib!queues.pfd_direct_update.))
(assert (=> (fuel_bool fuel%lib!queues.pfd_direct_update.) (forall ((pfd1! Poly) (pfd2! Poly) (i! Poly) (j! Poly) (emp! Poly) (p! Poly)) (! (= (lib!queues.pfd_direct_update.? pfd1! pfd2! i! j! emp! p!) (and (and (let ((tmp%%$ (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) pfd2!))) (and (= (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) pfd1!) tmp%%$) (= tmp%%$ lib!config.PAGES_DIRECT.?))) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (and (<= 0 (%I k$)) (< (%I k$) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) pfd1!))) (not (and (<= (%I i!) (%I k$)) (< (%I k$) (%I j!))))) (= (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) pfd1! k$) (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) pfd2! k$)))) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) pfd1! k$)) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) pfd2! k$))))) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (and (<= 0 (%I k$)) (< (%I k$) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) pfd2!))) (and (<= (%I i!) (%I k$)) (< (%I k$) (%I j!)))) (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) pfd2! k$) p! emp!))) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) pfd2! k$)))))) :pattern ((lib!queues.pfd_direct_update.? pfd1! pfd2! i! j! emp! p!))))))
(set-info :comment ";; Function-Axioms lib::queues::local_direct_update")
(assert (fuel_bool_default fuel%lib!queues.local_direct_update.))
(assert (=> (fuel_bool fuel%lib!queues.local_direct_update.) (forall ((loc1! Poly) (loc2! Poly) (i! Poly) (j! Poly) (pq! Poly)) (! (= (lib!queues.local_direct_update.? loc1! loc2! i! j! pq!) (and (and (and (and (and (= (%Poly%lib!types.Local. loc2!) (lib!types.Local./Local (%Poly%lib!thread.ThreadId. (Poly%lib!thread.ThreadId. (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.Mim.my_inst. (Poly%lib!tokens.Mim.my_inst. (lib!types.Local./Local/my_inst (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.Mim.Instance. (Poly%lib!tokens.Mim.Instance. (lib!types.Local./Local/instance (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.Mim.thread_local_state. (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.Mim.thread_checked_state. (Poly%lib!tokens.Mim.thread_checked_state. (lib!types.Local./Local/checked_token (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!thread.IsThread. (Poly%lib!thread.IsThread. (lib!types.Local./Local/is_thread (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!)))) (%Poly%lib!tokens.TldId. (Poly%lib!tokens.TldId. (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Tld.>. (lib!types.Local./Local/tld (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/psa (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!types.Local./Local/unused_pages (%Poly%lib!types.Local. loc1!)))) (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. loc1!)))) (%Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. loc1!)))))) (= (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!)) (let ((tmp%%$ (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!))))))) (let ((tmp%%$1 (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc1!)))) (lib!types.HeapLocalAccess./HeapLocalAccess tmp%%$ (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. tmp%%$1))) (%Poly%vstd!cell.PointsTo<usize.>. (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. tmp%%$1))))) (%Poly%vstd!cell.PointsTo<usize.>. (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. tmp%%$1))))) (%Poly%vstd!cell.PointsTo<usize.>. (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. tmp%%$1)))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc1!))))))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!))))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc1!))))))))))) (is-core!option.Option./Some_ (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!))))))))))) (lib!queues.pfd_direct_update.? (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc1!))))))))))))) (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc2!))))))))))))) i! j! (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. loc1!))))))))))))) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. loc1!))))))))))))) pq!))))))) :pattern ((lib!queues.local_direct_update.? loc1! loc2! i! j! pq!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%vstd!raw_ptr.IsExposed.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 16) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (SINT 64) $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Eq. U&. U&) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!cmp.Eq. A&. A&) (tr_bound%core!cmp.Eq. (REF A&.) A&)) :pattern ((tr_bound%core!cmp.Eq. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Eq. $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Eq. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& U&. U&) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Eq. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Eq. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.Eq. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. W&. W& W&. W&) (tr_bound%core!cmp.PartialEq. V&. V& V&. V&) (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Eq. W&. W&) (tr_bound%core!cmp.Eq. V&. V&) (tr_bound%core!cmp.Eq. U&. U&) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!marker.Freeze. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!marker.Freeze. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!marker.Freeze. (REF T&.) T&) :pattern ((tr_bound%core!marker.Freeze. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!marker.Freeze. $ (PTR T&. T&)) :pattern ((tr_bound%core!marker.Freeze. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!fmt.Debug. U&. U&) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!fmt.Debug. $ (PTR T&. T&)) :pattern ((tr_bound%core!fmt.Debug. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. (REF T&.) T&)) :pattern ((tr_bound%core!fmt.Debug. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!fmt.Debug. W&. W&) (tr_bound%core!fmt.Debug. V&. V&) (tr_bound%core!fmt.Debug. U&. U&) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. $ (SLICE T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!fmt.Debug. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!fmt.Debug. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!fmt.Debug. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) (REF $) (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) (REF $) (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. A&. A& B&. B&) (tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (SINT 64) $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 16) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. W&. W& W&. W&) (tr_bound%core!cmp.PartialOrd. V&. V& V&. V&) (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Ord. $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Ord. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Ord. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Ord. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Ord. T&. T&) (tr_bound%core!cmp.Ord. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Ord. W&. W&) (tr_bound%core!cmp.Ord. V&. V&) (tr_bound%core!cmp.Ord. U&. U&) (tr_bound%core!cmp.Ord. T&. T&)) (tr_bound%core!cmp.Ord. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%tuple%4. W&. W& V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!cmp.Ord. A&. A&) (tr_bound%core!cmp.Ord. (REF A&.) A&)) :pattern ((tr_bound%core!cmp.Ord. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Ord. U&. U&) (tr_bound%core!cmp.Ord. T&. T&)) (tr_bound%core!cmp.Ord. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.Ord. T&. T&)) (tr_bound%core!cmp.Ord. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.Ord. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Ord. T&. T&) (tr_bound%core!cmp.Ord. $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.Ord. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Ord. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. (REF T&.) T&)) :pattern ((tr_bound%core!hash.Hash. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (B&. Dcr) (B& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. B&. B&)) (tr_bound%core!hash.Hash. $ (TYPE%tuple%2. T&. T& B&. B&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%2. T&. T& B&. B&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (D&. Dcr) (D& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. B&. B&) (tr_bound%core!hash.Hash. C&. C&) (tr_bound%core!hash.Hash. D&. D&)) (tr_bound%core!hash.Hash. $ (TYPE%tuple%4. T&. T& B&. B& C&. C& D&. D&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%4. T&. T& B&. B& C&. C& D&. D&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!hash.Hash. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!hash.Hash. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!hash.Hash. T&. T&)) (tr_bound%core!hash.Hash. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!hash.Hash. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. $ (SLICE T&. T&))) :pattern ((tr_bound%core!hash.Hash. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!hash.Hash. $ (PTR T&. T&)) :pattern ((tr_bound%core!hash.Hash. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!thread.IsThread.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!tokens.Mim.my_inst.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!tokens.Mim.Instance.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.BoolAgree.Instance.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.PageQueue.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.SpanQueueHeader.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.HeapPtr.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.TldPtr.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.PagePtr.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!linked_list.Node.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!linked_list.StuffAgree.Instance.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.SegmentKind.))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::take_step::into_used_list_back")
(declare-fun req%lib!page_organization.PageOrg.take_step.into_used_list_back. (lib!page_organization.PageOrg.State. Int) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (bin_idx! Int)) (! (= (req%lib!page_organization.PageOrg.take_step.into_used_list_back. pre! bin_idx!) (=> %%global_location_label%%19 (and (lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.? (Poly%lib!page_organization.PageOrg.State. pre!) (I bin_idx!)) (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))))) :pattern ((req%lib!page_organization.PageOrg.take_step.into_used_list_back. pre! bin_idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.take_step.into_used_list_back. (lib!page_organization.PageOrg.State. Int lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (bin_idx! Int) (post! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.take_step.into_used_list_back. pre! bin_idx! post!) (and (has_type (Poly%lib!page_organization.PageOrg.State. post!) TYPE%lib!page_organization.PageOrg.State.) (and (lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (I bin_idx!)) (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. post!))))) :pattern ((ens%lib!page_organization.PageOrg.take_step.into_used_list_back. pre! bin_idx! post!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::Instance::thread_local_state_guards_page")
(declare-fun req%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. (lib!tokens.Mim.Instance. lib!thread.ThreadId. lib!tokens.PageId. lib!tokens.Mim.thread_local_state.) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (thread_id! lib!thread.ThreadId.) (page_id! lib!tokens.PageId.) (param_token_0_thread_local_state! lib!tokens.Mim.thread_local_state.)) (! (= (req%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. self! thread_id! page_id! param_token_0_thread_local_state!) (and (=> %%global_location_label%%20 (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))) self!)) (=> %%global_location_label%%21 (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))) thread_id!)) (=> %%global_location_label%%22 (let ((thread_state$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. thread_state$))))) (Poly%lib!tokens.PageId. page_id!)))) (=> %%global_location_label%%23 (let ((thread_state$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. thread_state$)))) (Poly%lib!tokens.PageId. page_id!)))))))) :pattern ((req%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. self! thread_id! page_id! param_token_0_thread_local_state!)))))
(declare-fun ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. (lib!tokens.Mim.Instance. lib!thread.ThreadId. lib!tokens.PageId. lib!tokens.Mim.thread_local_state. lib!types.PageSharedAccess.) Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (thread_id! lib!thread.ThreadId.) (page_id! lib!tokens.PageId.) (param_token_0_thread_local_state! lib!tokens.Mim.thread_local_state.) (param_token_1_page_shared_access! lib!types.PageSharedAccess.)) (! (= (ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. self! thread_id! page_id! param_token_0_thread_local_state! param_token_1_page_shared_access!) (let ((thread_state$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (= param_token_1_page_shared_access! (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. thread_state$)))) (Poly%lib!tokens.PageId. page_id!))))))) :pattern ((ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. self! thread_id! page_id! param_token_0_thread_local_state! param_token_1_page_shared_access!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::Instance::thread_local_state_guards_heap")
(declare-fun req%lib!tokens.Mim.impl&%18.thread_local_state_guards_heap. (lib!tokens.Mim.Instance. lib!thread.ThreadId. lib!tokens.Mim.thread_local_state.) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (thread_id! lib!thread.ThreadId.) (param_token_0_thread_local_state! lib!tokens.Mim.thread_local_state.)) (! (= (req%lib!tokens.Mim.impl&%18.thread_local_state_guards_heap. self! thread_id! param_token_0_thread_local_state!) (and (=> %%global_location_label%%24 (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))) self!)) (=> %%global_location_label%%25 (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))) thread_id!)))) :pattern ((req%lib!tokens.Mim.impl&%18.thread_local_state_guards_heap. self! thread_id! param_token_0_thread_local_state!)))))
(declare-fun ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_heap. (lib!tokens.Mim.Instance. lib!thread.ThreadId. lib!tokens.Mim.thread_local_state. lib!types.HeapSharedAccess.) Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (thread_id! lib!thread.ThreadId.) (param_token_0_thread_local_state! lib!tokens.Mim.thread_local_state.) (param_token_1_heap_shared_access! lib!types.HeapSharedAccess.)) (! (= (ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_heap. self! thread_id! param_token_0_thread_local_state! param_token_1_heap_shared_access!) (let ((thread_state$ (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. param_token_0_thread_local_state!))))))) (= param_token_1_heap_shared_access! (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. thread_state$))))))))) :pattern ((ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_heap. self! thread_id! param_token_0_thread_local_state! param_token_1_heap_shared_access!)))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::preserved_by_into_used_list_back")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.preserved_by_into_used_list_back. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. Int lib!tokens.PageId. Int Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (bin_idx! Int) (other_page_id! lib!tokens.PageId.) (other_bin_idx! Int) (other_list_idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.preserved_by_into_used_list_back. pre! post! bin_idx! other_page_id! other_bin_idx! other_list_idx!) (and (=> %%global_location_label%%26 (lib!page_organization.PageOrg.impl&%4.into_used_list_back.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (I bin_idx!))) (=> %%global_location_label%%27 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%28 (lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!tokens.PageId. other_page_id!) (I other_bin_idx!) (I other_list_idx!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.preserved_by_into_used_list_back. pre! post! bin_idx! other_page_id! other_bin_idx! other_list_idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.preserved_by_into_used_list_back. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. Int lib!tokens.PageId. Int Int) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (bin_idx! Int) (other_page_id! lib!tokens.PageId.) (other_bin_idx! Int) (other_list_idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.preserved_by_into_used_list_back. pre! post! bin_idx! other_page_id! other_bin_idx! other_list_idx!) (lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.PageId. other_page_id!) (I other_bin_idx!) (I other_list_idx!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.preserved_by_into_used_list_back. pre! post! bin_idx! other_page_id! other_bin_idx! other_list_idx!)))))
(set-info :comment ";; Function-Specs lib::types::HeapPtr::get_page_count")
(declare-fun req%lib!types.impl&%24.get_page_count. (lib!types.HeapPtr. lib!types.Local.) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((self! lib!types.HeapPtr.) (local! lib!types.Local.)) (! (= (req%lib!types.impl&%24.get_page_count. self! local!) (and (=> %%global_location_label%%29 (lib!types.impl&%21.wf_basic.? (Poly%lib!types.Local. local!))) (=> %%global_location_label%%30 (lib!layout.is_heap_ptr.? (Poly%ptr_mut%<lib!types.Heap.>. (lib!types.HeapPtr./HeapPtr/heap_ptr (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. self!)))) (Poly%lib!tokens.HeapId. (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. self!)))))) (=> %%global_location_label%%31 (= (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!))) (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. self!))))))) :pattern ((req%lib!types.impl&%24.get_page_count. self! local!)))))
(declare-fun ens%lib!types.impl&%24.get_page_count. (lib!types.HeapPtr. lib!types.Local. Int) Bool)
(assert (forall ((self! lib!types.HeapPtr.) (local! lib!types.Local.) (page_count! Int)) (! (= (ens%lib!types.impl&%24.get_page_count. self! local! page_count!) (and (uInv SZ page_count!) (= (core!option.Option./Some (I page_count!)) (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (UINT SZ) (Poly%vstd!cell.PointsTo<usize.>. (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!)))))))))))))) :pattern ((ens%lib!types.impl&%24.get_page_count. self! local! page_count!)))))
(set-info :comment ";; Function-Specs lib::types::HeapPtr::set_page_count")
(declare-fun req%lib!types.impl&%24.set_page_count. (lib!types.HeapPtr. lib!types.Local. Int) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((self! lib!types.HeapPtr.) (pre%local! lib!types.Local.) (page_count! Int)) (! (= (req%lib!types.impl&%24.set_page_count. self! pre%local! page_count!) (and (=> %%global_location_label%%32 (lib!types.impl&%21.wf_basic.? (Poly%lib!types.Local. pre%local!))) (=> %%global_location_label%%33 (lib!layout.is_heap_ptr.? (Poly%ptr_mut%<lib!types.Heap.>. (lib!types.HeapPtr./HeapPtr/heap_ptr (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. self!)))) (Poly%lib!tokens.HeapId. (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. self!)))))) (=> %%global_location_label%%34 (= (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!))) (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. self!))))))) :pattern ((req%lib!types.impl&%24.set_page_count. self! pre%local! page_count!)))))
(declare-fun ens%lib!types.impl&%24.set_page_count. (lib!types.HeapPtr. lib!types.Local. lib!types.Local. Int) Bool)
(assert (forall ((self! lib!types.HeapPtr.) (pre%local! lib!types.Local.) (local! lib!types.Local.) (page_count! Int)) (! (= (ens%lib!types.impl&%24.set_page_count. self! pre%local! local! page_count!) (and (has_type (Poly%lib!types.Local. local!) TYPE%lib!types.Local.) (lib!types.local_page_count_update.? (Poly%lib!types.Local. pre%local!) (Poly%lib!types.Local. local!)))) :pattern ((ens%lib!types.impl&%24.set_page_count. self! pre%local! local! page_count!)))))
(set-info :comment ";; Function-Specs lib::types::PageInner::set_in_full")
(declare-fun ens%lib!flags.impl&%0.set_in_full. (lib!types.PageInner. lib!types.PageInner. Bool) Bool)
(assert (forall ((pre%self! lib!types.PageInner.) (self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.set_in_full. pre%self! self! b!) (and (has_type (Poly%lib!types.PageInner. self!) TYPE%lib!types.PageInner.) (= self! (lib!types.PageInner./PageInner (%I (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. self!))))) (%I (I (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))))) (= (lib!flags.impl&%0.has_aligned.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.has_aligned.? (Poly%lib!types.PageInner. pre%self!))) (= (lib!flags.impl&%0.in_full.? (Poly%lib!types.PageInner. self!)) b!))) :pattern ((ens%lib!flags.impl&%0.set_in_full. pre%self! self! b!)))))
(set-info :comment ";; Function-Specs lib::bin_sizes::idx_out_of_range_has_different_bin_size")
(declare-fun req%lib!bin_sizes.idx_out_of_range_has_different_bin_size. (Int Int) Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((bin_idx! Int) (wsize! Int)) (! (= (req%lib!bin_sizes.idx_out_of_range_has_different_bin_size. bin_idx! wsize!) (and (=> %%global_location_label%%35 (lib!bin_sizes.valid_bin_idx.? (I bin_idx!))) (=> %%global_location_label%%36 (not (and (<= (lib!bin_sizes.pfd_lower.? (I bin_idx!)) wsize!) (<= wsize! (lib!bin_sizes.pfd_upper.? (I bin_idx!)))))) (=> %%global_location_label%%37 (and (<= 0 wsize!) (<= wsize! 128))))) :pattern ((req%lib!bin_sizes.idx_out_of_range_has_different_bin_size. bin_idx! wsize!)))))
(declare-fun ens%lib!bin_sizes.idx_out_of_range_has_different_bin_size. (Int Int) Bool)
(assert (forall ((bin_idx! Int) (wsize! Int)) (! (= (ens%lib!bin_sizes.idx_out_of_range_has_different_bin_size. bin_idx! wsize!) (not (= (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul wsize! lib!config.INTPTR_SIZE.?))) bin_idx!))) :pattern ((ens%lib!bin_sizes.idx_out_of_range_has_different_bin_size. bin_idx! wsize!)))))
(set-info :comment ";; Function-Specs lib::bin_sizes::idx_in_range_has_bin_size")
(declare-fun req%lib!bin_sizes.idx_in_range_has_bin_size. (Int Int) Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((bin_idx! Int) (wsize! Int)) (! (= (req%lib!bin_sizes.idx_in_range_has_bin_size. bin_idx! wsize!) (and (=> %%global_location_label%%38 (lib!bin_sizes.valid_bin_idx.? (I bin_idx!))) (=> %%global_location_label%%39 (and (<= (lib!bin_sizes.pfd_lower.? (I bin_idx!)) wsize!) (<= wsize! (lib!bin_sizes.pfd_upper.? (I bin_idx!))))) (=> %%global_location_label%%40 (<= wsize! 128)))) :pattern ((req%lib!bin_sizes.idx_in_range_has_bin_size. bin_idx! wsize!)))))
(declare-fun ens%lib!bin_sizes.idx_in_range_has_bin_size. (Int Int) Bool)
(assert (forall ((bin_idx! Int) (wsize! Int)) (! (= (ens%lib!bin_sizes.idx_in_range_has_bin_size. bin_idx! wsize!) (= (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul wsize! lib!config.INTPTR_SIZE.?))) bin_idx!)) :pattern ((ens%lib!bin_sizes.idx_in_range_has_bin_size. bin_idx! wsize!)))))
(set-info :comment ";; Function-Specs lib::bin_sizes::bounds_for_smallest_bin_fitting_size")
(declare-fun req%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. (Int) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((size! Int)) (! (= (req%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. size!) (=> %%global_location_label%%41 (and (<= 0 size!) (<= size! (nClip (Mul 128 8)))))) :pattern ((req%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. size!)))))
(declare-fun ens%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. (Int) Bool)
(assert (forall ((size! Int)) (! (= (ens%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. size!) (and (lib!bin_sizes.valid_bin_idx.? (I (lib!bin_sizes.smallest_bin_fitting_size.? (I size!)))) (>= (lib!bin_sizes.size_of_bin.? (I (lib!bin_sizes.smallest_bin_fitting_size.? (I size!)))) size!))) :pattern ((ens%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. size!)))))
(set-info :comment ";; Function-Specs lib::os_mem_util::preserves_mem_chunk_good")
(declare-fun req%lib!os_mem_util.preserves_mem_chunk_good. (lib!types.Local. lib!types.Local.) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((local1! lib!types.Local.) (local2! lib!types.Local.)) (! (= (req%lib!os_mem_util.preserves_mem_chunk_good. local1! local2!) (and (=> %%global_location_label%%42 (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local2!))))))) (=> %%global_location_label%%43 (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) sid$) (= (lib!commit_mask.impl&%0.bytes.? (Poly%lib!commit_mask.CommitMask. (lib!types.impl&%21.commit_mask.? (Poly%lib!types.Local. local2!) sid$)) sid$) (lib!commit_mask.impl&%0.bytes.? (Poly%lib!commit_mask.CommitMask. (lib!types.impl&%21.commit_mask.? (Poly%lib!types.Local. local1!) sid$)) sid$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) sid$))))) (=> %%global_location_label%%44 (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) sid$) (= (lib!commit_mask.impl&%0.bytes.? (Poly%lib!commit_mask.CommitMask. (lib!types.impl&%21.decommit_mask.? (Poly%lib!types.Local. local2!) sid$)) sid$) (lib!commit_mask.impl&%0.bytes.? (Poly%lib!commit_mask.CommitMask. (lib!types.impl&%21.decommit_mask.? (Poly%lib!types.Local. local1!) sid$)) sid$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) sid$))))) (=> %%global_location_label%%45 (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) sid$) (= (lib!types.SegmentLocalAccess./SegmentLocalAccess/mem (%Poly%lib!types.SegmentLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local2!)))) sid$))) (lib!types.SegmentLocalAccess./SegmentLocalAccess/mem (%Poly%lib!types.SegmentLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!)))) sid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) sid$))))) (=> %%global_location_label%%46 (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (lib!types.impl&%21.is_used_primary.? (Poly%lib!types.Local. local1!) page_id$) (and (and (and (and (lib!types.impl&%21.is_used_primary.? (Poly%lib!types.Local. local2!) page_id$) (<= (lib!types.impl&%21.page_capacity.? (Poly%lib!types.Local. local1!) page_id$) (lib!types.impl&%21.page_capacity.? (Poly%lib!types.Local. local2!) page_id$))) (<= (lib!types.impl&%21.page_reserved.? (Poly%lib!types.Local. local1!) page_id$) (lib!types.impl&%21.page_reserved.? (Poly%lib!types.Local. local2!) page_id$))) (= (lib!types.impl&%21.page_count.? (Poly%lib!types.Local. local1!) page_id$) (lib!types.impl&%21.page_count.? (Poly%lib!types.Local. local2!) page_id$))) (= (lib!types.impl&%21.block_size.? (Poly%lib!types.Local. local1!) page_id$) (lib!types.impl&%21.block_size.? (Poly%lib!types.Local. local2!) page_id$))))) :pattern ((lib!types.impl&%21.is_used_primary.? (Poly%lib!types.Local. local1!) page_id$)) :pattern ((lib!types.impl&%21.is_used_primary.? (Poly%lib!types.Local. local2!) page_id$)) :pattern ((lib!types.impl&%21.page_count.? (Poly%lib!types.Local. local1!) page_id$)) :pattern ((lib!types.impl&%21.page_count.? (Poly%lib!types.Local. local2!) page_id$)) :pattern ((lib!types.impl&%21.block_size.? (Poly%lib!types.Local. local1!) page_id$)) :pattern ((lib!types.impl&%21.block_size.? (Poly%lib!types.Local. local2!) page_id$))))) (=> %%global_location_label%%47 (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (lib!types.impl&%21.is_used_primary.? (Poly%lib!types.Local. local2!) page_id$) (lib!types.impl&%21.is_used_primary.? (Poly%lib!types.Local. local1!) page_id$))) :pattern ((lib!types.impl&%21.is_used_primary.? (Poly%lib!types.Local. local2!) page_id$))))))) :pattern ((req%lib!os_mem_util.preserves_mem_chunk_good. local1! local2!)))))
(declare-fun ens%lib!os_mem_util.preserves_mem_chunk_good. (lib!types.Local. lib!types.Local.) Bool)
(assert (forall ((local1! lib!types.Local.) (local2! lib!types.Local.)) (! (= (ens%lib!os_mem_util.preserves_mem_chunk_good. local1! local2!) (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) sid$) (=> (lib!os_mem_util.impl&%1.mem_chunk_good.? (Poly%lib!types.Local. local1!) sid$) (lib!os_mem_util.impl&%1.mem_chunk_good.? (Poly%lib!types.Local. local2!) sid$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentLocalAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentLocalAccess.>. (lib!types.Local./Local/segments (%Poly%lib!types.Local. (Poly%lib!types.Local. local1!))))) sid$))))) :pattern ((ens%lib!os_mem_util.preserves_mem_chunk_good. local1! local2!)))))
(set-info :comment ";; Function-Specs lib::queues::holds_on_present_value")
(declare-fun req%lib!queues.holds_on_present_value. (lib!types.Local. Int) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((local! lib!types.Local.) (pq! Int)) (! (= (req%lib!queues.holds_on_present_value. local! pq!) (and (=> %%global_location_label%%48 (lib!types.impl&%21.wf_main.? (Poly%lib!types.Local. local!))) (=> %%global_location_label%%49 (or (lib!bin_sizes.valid_bin_idx.? (I pq!)) (= pq! lib!config.BIN_FULL.?))))) :pattern ((req%lib!queues.holds_on_present_value. local! pq!)))))
(declare-fun ens%lib!queues.holds_on_present_value. (lib!types.Local. Int) Bool)
(assert (forall ((local! lib!types.Local.) (pq! Int)) (! (= (ens%lib!queues.holds_on_present_value. local! pq!) (=> (not (= pq! lib!config.BIN_FULL.?)) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (< (%I k$) lib!config.PAGES_DIRECT.?) (and (<= (lib!bin_sizes.pfd_lower.? (I pq!)) (%I k$)) (<= (%I k$) (lib!bin_sizes.pfd_upper.? (I pq!))))) (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!)))))))))))))) k$) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!)))))))))))))) (I pq!))))) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. (Poly%lib!types.Local. local!))))))))))))))))) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!)))))))))))))) k$)))))) :pattern ((ens%lib!queues.holds_on_present_value. local! pq!)))))
(set-info :comment ";; Function-Specs lib::queues::heap_queue_first_update")
(declare-fun req%lib!queues.heap_queue_first_update. (lib!types.HeapPtr. Int lib!types.Local. ptr_mut%<lib!types.Page.>.) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((heap! lib!types.HeapPtr.) (pq! Int) (pre%local! lib!types.Local.) (old_p! ptr_mut%<lib!types.Page.>.)) (! (= (req%lib!queues.heap_queue_first_update. heap! pq! pre%local! old_p!) (and (=> %%global_location_label%%50 (lib!types.impl&%21.wf_basic.? (Poly%lib!types.Local. pre%local!))) (=> %%global_location_label%%51 (lib!layout.is_heap_ptr.? (Poly%ptr_mut%<lib!types.Heap.>. (lib!types.HeapPtr./HeapPtr/heap_ptr (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!)))) (Poly%lib!tokens.HeapId. (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!)))))) (=> %%global_location_label%%52 (= (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!))) (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!))))) (=> %%global_location_label%%53 (or (lib!bin_sizes.valid_bin_idx.? (I pq!)) (= pq! lib!config.BIN_FULL.?))) (=> %%global_location_label%%54 (=> (not (= pq! lib!config.BIN_FULL.?)) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (< (%I k$) lib!config.PAGES_DIRECT.?) (and (<= (lib!bin_sizes.pfd_lower.? (I pq!)) (%I k$)) (<= (%I k$) (lib!bin_sizes.pfd_upper.? (I pq!))))) (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!)))))))))))))) k$) (Poly%ptr_mut%<lib!types.Page.>. old_p!) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!))))))))))))))))) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!)))))))))))))) k$)))))))) :pattern ((req%lib!queues.heap_queue_first_update. heap! pq! pre%local! old_p!)))))
(declare-fun ens%lib!queues.heap_queue_first_update. (lib!types.HeapPtr. Int lib!types.Local. lib!types.Local. ptr_mut%<lib!types.Page.>.) Bool)
(assert (forall ((heap! lib!types.HeapPtr.) (pq! Int) (pre%local! lib!types.Local.) (local! lib!types.Local.) (old_p! ptr_mut%<lib!types.Page.>.)) (! (= (ens%lib!queues.heap_queue_first_update. heap! pq! pre%local! local! old_p!) (and (has_type (Poly%lib!types.Local. local!) TYPE%lib!types.Local.) (=> (= pq! lib!config.BIN_FULL.?) (= local! pre%local!)) (=> (not (= pq! lib!config.BIN_FULL.?)) (lib!queues.local_direct_update.? (Poly%lib!types.Local. pre%local!) (Poly%lib!types.Local. local!) (I (lib!bin_sizes.pfd_lower.? (I pq!))) (I (Add (lib!bin_sizes.pfd_upper.? (I pq!)) 1)) (I pq!))))) :pattern ((ens%lib!queues.heap_queue_first_update. heap! pq! pre%local! local! old_p!)))))
(set-info :comment ";; Function-Specs lib::queues::page_queue_push_back")
(declare-fun req%lib!queues.page_queue_push_back. (lib!types.HeapPtr. Int lib!types.PagePtr. lib!types.Local. lib!tokens.PageId. Int Int) Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((heap! lib!types.HeapPtr.) (pq! Int) (page! lib!types.PagePtr.) (pre%local! lib!types.Local.) (other_id! lib!tokens.PageId.) (other_pq! Int) (other_list_idx! Int)) (! (= (req%lib!queues.page_queue_push_back. heap! pq! page! pre%local! other_id! other_pq! other_list_idx!) (and (=> %%global_location_label%%55 (lib!types.impl&%21.wf_main.? (Poly%lib!types.Local. pre%local!))) (=> %%global_location_label%%56 (or (= pq! lib!config.BIN_FULL.?) (lib!bin_sizes.valid_bin_idx.? (I pq!)))) (=> %%global_location_label%%57 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!)))))) (lib!page_organization.Popped./Used (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (%B (B true))))) (=> %%global_location_label%%58 (let ((tmp%%$ (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!))))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))))))))) (let ((b$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$))))) (and (and (and (or (= pq! lib!config.BIN_FULL.?) (= b$ pq!)) (lib!bin_sizes.valid_bin_idx.? (I b$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I b$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?)))))) (=> %%global_location_label%%59 (lib!layout.is_heap_ptr.? (Poly%ptr_mut%<lib!types.Heap.>. (lib!types.HeapPtr./HeapPtr/heap_ptr (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!)))) (Poly%lib!tokens.HeapId. (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!)))))) (=> %%global_location_label%%60 (= (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!))) (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!))))) (=> %%global_location_label%%61 (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))) 0)))))) :pattern ((req%lib!queues.page_queue_push_back. heap! pq! page! pre%local! other_id! other_pq! other_list_idx!)))))
(declare-fun ens%lib!queues.page_queue_push_back. (lib!types.HeapPtr. Int lib!types.PagePtr. lib!types.Local. lib!types.Local. lib!tokens.PageId. Int Int) Bool)
(assert (forall ((heap! lib!types.HeapPtr.) (pq! Int) (page! lib!types.PagePtr.) (pre%local! lib!types.Local.) (local! lib!types.Local.) (other_id! lib!tokens.PageId.) (other_pq! Int) (other_list_idx! Int)) (! (= (ens%lib!queues.page_queue_push_back. heap! pq! page! pre%local! local! other_id! other_pq! other_list_idx!) (and (has_type (Poly%lib!types.Local. local!) TYPE%lib!types.Local.) (lib!types.impl&%21.wf.? (Poly%lib!types.Local. local!)) (lib!types.common_preserves.? (Poly%lib!types.Local. pre%local!) (Poly%lib!types.Local. local!)) (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))) 0))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!))))))))))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))))) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!)))))))))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))) 0)) (= (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))))))))))))) (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))))))))))))))))) (= (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!))) (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!)))) (=> (lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. pre%local!)))) (Poly%lib!tokens.PageId. other_id!) (I other_pq!) (I other_list_idx!)) (lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!)))) (Poly%lib!tokens.PageId. other_id!) (I other_pq!) (I other_list_idx!))))) :pattern ((ens%lib!queues.page_queue_push_back. heap! pq! page! pre%local! local! other_id! other_pq! other_list_idx!)))))
(set-info :comment ";; Function-Def lib::queues::page_queue_push_back")
(set-info :comment ";; queues.rs:400:1: 400:202 (#0)")
(declare-const heap! lib!types.HeapPtr.)
(declare-const pq! Int)
(declare-const page! lib!types.PagePtr.)
(declare-const local!@0 lib!types.Local.)
(declare-const other_id! lib!tokens.PageId.)
(declare-const other_pq! Int)
(declare-const other_list_idx! Int)
(declare-const tmp%1 lib!page_organization.PageOrg.State.)
(declare-const tmp%2 lib!page_organization.PageOrg.State.)
(declare-const tmp%3 lib!types.PageSharedAccess.)
(declare-const tmp%4 lib!tokens.Mim.Instance.)
(declare-const tmp%5 lib!thread.ThreadId.)
(declare-const tmp%6 lib!tokens.PageId.)
(declare-const tmp%7 lib!tokens.Mim.thread_local_state.)
(declare-const verus_tmp_perm@ vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const tmp%8 Poly)
(declare-const tmp%9 ptr_mut%<lib!types.Page.>.)
(declare-const tmp%10 Poly)
(declare-const tmp%11 lib!tokens.PageId.)
(declare-const verus_tmp_inner_0@0 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const verus_tmp_prev_0@ vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const verus_tmp_next_0@ vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const verus_tmp_count_0@ vstd!cell.PointsTo<u32.>.)
(declare-const tmp%12 Poly)
(declare-const tmp%13 vstd!cell.PCell<lib!types.PageInner.>.)
(declare-const tmp%14 Bool)
(declare-const tmp%15 vstd!cell.PCell<lib!types.PageInner.>.)
(declare-const tmp%16 lib!tokens.PageId.)
(declare-const tmp%17 lib!types.PageLocalAccess.)
(declare-const page_ptr@ lib!types.PagePtr.)
(declare-const verus_tmp@ vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const perm@0 vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const page@ lib!types.Page.)
(declare-const verus_tmp$1@ lib!types.PageLocalAccess.)
(declare-const inner_0@0 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const prev_0@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const next_0@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const count_0@0 vstd!cell.PointsTo<u32.>.)
(declare-const inner@0 lib!types.PageInner.)
(declare-const tmp%18 lib!types.HeapSharedAccess.)
(declare-const tmp%19 lib!tokens.Mim.Instance.)
(declare-const tmp%20 lib!thread.ThreadId.)
(declare-const tmp%21 lib!tokens.Mim.thread_local_state.)
(declare-const verus_tmp_perm$1@ vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-const tmp%22 Poly)
(declare-const tmp%23 ptr_mut%<lib!types.Heap.>.)
(declare-const tmp%24 Poly)
(declare-const tmp%25 Poly)
(declare-const tmp%26 Poly)
(declare-const tmp%27 ptr_mut%<lib!types.Page.>.)
(declare-const tmp%28 Int)
(declare-const tmp%29 ptr_mut%<lib!types.Page.>.)
(declare-const cq@0 lib!types.PageQueue.)
(declare-const tmp%30 Poly)
(declare-const heap_ptr@ lib!types.HeapPtr.)
(declare-const verus_tmp$2@ vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-const perm$1@0 vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-const heap@ lib!types.Heap.)
(declare-const pages@0 %%Function%%)
(declare-const tmp%31 Bool)
(declare-const tmp%32 lib!types.PageSharedAccess.)
(declare-const tmp%33 lib!tokens.Mim.Instance.)
(declare-const tmp%34 lib!thread.ThreadId.)
(declare-const tmp%35 lib!tokens.PageId.)
(declare-const tmp%36 lib!tokens.Mim.thread_local_state.)
(declare-const verus_tmp_perm$2@ vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const tmp%37 Poly)
(declare-const tmp%38 ptr_mut%<lib!types.Page.>.)
(declare-const tmp%39 Poly)
(declare-const tmp%40 lib!tokens.PageId.)
(declare-const verus_tmp_inner_0$1@ vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const verus_tmp_prev_0$1@ vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const verus_tmp_next_0$1@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const verus_tmp_count_0$1@ vstd!cell.PointsTo<u32.>.)
(declare-const tmp%41 Poly)
(declare-const tmp%42 vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-const tmp%43 Poly)
(declare-const tmp%44 vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-const tmp%45 lib!tokens.PageId.)
(declare-const tmp%46 lib!types.PageLocalAccess.)
(declare-const page_ptr$1@ lib!types.PagePtr.)
(declare-const verus_tmp$3@ vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const perm$2@0 vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const page$1@ lib!types.Page.)
(declare-const verus_tmp$4@ lib!types.PageLocalAccess.)
(declare-const inner_0$1@0 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const prev_0$1@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const next_0$1@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const count_0$1@0 vstd!cell.PointsTo<u32.>.)
(declare-const n@0 ptr_mut%<lib!types.Page.>.)
(declare-const tmp%47 Bool)
(declare-const tmp%48 lib!types.PageSharedAccess.)
(declare-const tmp%49 lib!tokens.Mim.Instance.)
(declare-const tmp%50 lib!thread.ThreadId.)
(declare-const tmp%51 lib!tokens.PageId.)
(declare-const tmp%52 lib!tokens.Mim.thread_local_state.)
(declare-const verus_tmp_perm$3@ vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const tmp%53 Poly)
(declare-const tmp%54 ptr_mut%<lib!types.Page.>.)
(declare-const tmp%55 Poly)
(declare-const tmp%56 lib!tokens.PageId.)
(declare-const verus_tmp_inner_0$2@ vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const verus_tmp_prev_0$2@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const verus_tmp_next_0$2@ vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const verus_tmp_count_0$2@ vstd!cell.PointsTo<u32.>.)
(declare-const tmp%57 Poly)
(declare-const tmp%58 vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-const tmp%59 vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-const tmp%60 lib!tokens.PageId.)
(declare-const tmp%61 lib!types.PageLocalAccess.)
(declare-const page_ptr$2@ lib!types.PagePtr.)
(declare-const verus_tmp$5@ vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const perm$3@0 vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const page$2@ lib!types.Page.)
(declare-const verus_tmp$6@ lib!types.PageLocalAccess.)
(declare-const inner_0$2@0 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const prev_0$2@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const next_0$2@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const count_0$2@0 vstd!cell.PointsTo<u32.>.)
(declare-const p@0 ptr_mut%<lib!types.Page.>.)
(declare-const tmp%62 Int)
(declare-const tmp%63 Bool)
(declare-const tmp%64 lib!types.PageSharedAccess.)
(declare-const tmp%65 lib!tokens.Mim.Instance.)
(declare-const tmp%66 lib!thread.ThreadId.)
(declare-const tmp%67 lib!tokens.PageId.)
(declare-const tmp%68 lib!tokens.Mim.thread_local_state.)
(declare-const verus_tmp_perm$4@ vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const tmp%69 Poly)
(declare-const tmp%70 ptr_mut%<lib!types.Page.>.)
(declare-const tmp%71 Poly)
(declare-const tmp%72 lib!tokens.PageId.)
(declare-const verus_tmp_inner_0$3@ vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const verus_tmp_prev_0$3@ vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const verus_tmp_next_0$3@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const verus_tmp_count_0$3@ vstd!cell.PointsTo<u32.>.)
(declare-const tmp%73 Poly)
(declare-const tmp%74 vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-const tmp%75 vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-const tmp%76 lib!tokens.PageId.)
(declare-const tmp%77 lib!types.PageLocalAccess.)
(declare-const page_ptr$3@ lib!types.PagePtr.)
(declare-const verus_tmp$7@ vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const perm$4@0 vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const page$3@ lib!types.Page.)
(declare-const verus_tmp$8@ lib!types.PageLocalAccess.)
(declare-const inner_0$3@0 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const prev_0$3@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const next_0$3@0 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const count_0$3@0 vstd!cell.PointsTo<u32.>.)
(declare-const n$1@0 ptr_mut%<lib!types.Page.>.)
(declare-const last_in_queue_ptr@ lib!types.PagePtr.)
(declare-const verus_tmp_local_snap@ lib!types.Local.)
(declare-const tmp%78 Int)
(declare-const tmp%79 ptr_mut%<lib!types.Page.>.)
(declare-const tmp%80 Int)
(declare-const wsize@ Poly)
(declare-const tmp%81 Int)
(declare-const sbfs@ Int)
(declare-const opfd@ vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>.)
(declare-const pfd@ vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>.)
(declare-const pages$1@ vstd!seq.Seq<lib!types.PageQueue.>.)
(declare-const emp@ ptr_mut%<lib!types.Page.>.)
(declare-const i@ Int)
(declare-const j@ Int)
(declare-const wsize$1@ Poly)
(declare-const tmp%82 Int)
(declare-const pfd$1@ vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>.)
(declare-const pages$2@ vstd!seq.Seq<lib!types.PageQueue.>.)
(declare-const emp$1@ ptr_mut%<lib!types.Page.>.)
(declare-const wsize$2@ Poly)
(declare-const tmp%83 Int)
(declare-const pfd$2@ vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>.)
(declare-const pages$3@ vstd!seq.Seq<lib!types.PageQueue.>.)
(declare-const emp$2@ ptr_mut%<lib!types.Page.>.)
(declare-const next_state@0 lib!page_organization.PageOrg.State.)
(declare-const last_in_queue@ ptr_mut%<lib!types.Page.>.)
(declare-const verus_tmp$9@0 lib!types.Local.)
(declare-const local_snap@0 lib!types.Local.)
(declare-const c@ Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!types.HeapPtr. heap!) TYPE%lib!types.HeapPtr.))
(assert (uInv SZ pq!))
(assert (has_type (Poly%lib!types.PagePtr. page!) TYPE%lib!types.PagePtr.))
(assert (has_type (Poly%lib!types.Local. local!@0) TYPE%lib!types.Local.))
(assert (has_type (Poly%lib!tokens.PageId. other_id!) TYPE%lib!tokens.PageId.))
(assert (lib!types.impl&%21.wf_main.? (Poly%lib!types.Local. local!@0)))
(assert (or (= pq! lib!config.BIN_FULL.?) (lib!bin_sizes.valid_bin_idx.? (I pq!))))
(assert (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))))) (lib!page_organization.Popped./Used (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (%B (B true)))))
(assert (let ((tmp%%$ (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0))))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))))))))) (let ((b$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$))))) (and (and (and (or (= pq! lib!config.BIN_FULL.?) (= b$ pq!)) (lib!bin_sizes.valid_bin_idx.? (I b$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I b$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))))
(assert (lib!layout.is_heap_ptr.? (Poly%ptr_mut%<lib!types.Heap.>. (lib!types.HeapPtr./HeapPtr/heap_ptr (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!)))) (Poly%lib!tokens.HeapId. (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!))))))
(assert (= (lib!types.Local./Local/heap_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0))) (lib!types.HeapPtr./HeapPtr/heap_id (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap!)))))
(assert (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))) 0))))
(declare-const next_state@1 lib!page_organization.PageOrg.State.)
(declare-const perm@1 vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const local!@1 lib!types.Local.)
(declare-const inner_0@1 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const prev_0@1 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const next_0@1 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const count_0@1 vstd!cell.PointsTo<u32.>.)
(declare-const inner_0@2 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const inner@1 lib!types.PageInner.)
(declare-const inner_0@3 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const local!@2 lib!types.Local.)
(declare-const perm$1@1 vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-const local!@3 lib!types.Local.)
(declare-const cq@1 lib!types.PageQueue.)
(declare-const cq@2 lib!types.PageQueue.)
(declare-const pages@1 %%Function%%)
(declare-const local!@4 lib!types.Local.)
(declare-const perm$2@1 vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const local!@5 lib!types.Local.)
(declare-const inner_0$1@1 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const prev_0$1@1 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const next_0$1@1 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const count_0$1@1 vstd!cell.PointsTo<u32.>.)
(declare-const next_0$1@2 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const n@1 ptr_mut%<lib!types.Page.>.)
(declare-const next_0$1@3 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const local!@6 lib!types.Local.)
(declare-const perm$3@1 vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const local!@7 lib!types.Local.)
(declare-const inner_0$2@1 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const prev_0$2@1 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const next_0$2@1 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const count_0$2@1 vstd!cell.PointsTo<u32.>.)
(declare-const prev_0$2@2 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const p@1 ptr_mut%<lib!types.Page.>.)
(declare-const prev_0$2@3 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const local!@8 lib!types.Local.)
(declare-const perm$4@1 vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-const local!@9 lib!types.Local.)
(declare-const inner_0$3@1 vstd!cell.PointsTo<lib!types.PageInner.>.)
(declare-const prev_0$3@1 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const next_0$3@1 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const count_0$3@1 vstd!cell.PointsTo<u32.>.)
(declare-const next_0$3@2 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const n$1@1 ptr_mut%<lib!types.Page.>.)
(declare-const next_0$3@3 vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>.)
(declare-const local!@10 lib!types.Local.)
(declare-const local!@11 lib!types.Local.)
(declare-const verus_tmp$9@1 lib!types.Local.)
(declare-const local_snap@1 lib!types.Local.)
(declare-const local!@12 lib!types.Local.)
(declare-const local!@13 lib!types.Local.)
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(declare-const %%switch_label%%5 Bool)
(declare-const %%switch_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%42 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%43 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%44 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%45 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%46 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%47 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%48 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%49 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%50 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%51 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%52 Bool)
(assert (not (=> (= tmp%1 (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (and (=> %%location_label%%0 (req%lib!page_organization.PageOrg.take_step.into_used_list_back. tmp%1 pq!)) (=> (ens%lib!page_organization.PageOrg.take_step.into_used_list_back. tmp%1 pq! next_state@1) (and (=> %%location_label%%1 (req%lib!queues.holds_on_present_value. local!@0 pq!)) (=> (ens%lib!queues.holds_on_present_value. local!@0 pq!) (or (and (=> (lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (Poly%lib!tokens.PageId. other_id!) (I other_pq!) (I other_list_idx!)) (=> (= tmp%2 (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (and (=> %%location_label%%2 (req%lib!page_organization.PageOrg.impl&%4.preserved_by_into_used_list_back. tmp%2 next_state@1 pq! other_id! other_pq! other_list_idx!)) (=> (ens%lib!page_organization.PageOrg.impl&%4.preserved_by_into_used_list_back. tmp%2 next_state@1 pq! other_id! other_pq! other_list_idx!) %%switch_label%%6)))) (=> (not (lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (Poly%lib!tokens.PageId. other_id!) (I other_pq!) (I other_list_idx!))) %%switch_label%%6)) (and (not %%switch_label%%6) (=> (= page_ptr@ page!) (=> (= tmp%4 (lib!types.Local./Local/instance (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (=> (= tmp%5 (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (=> (= tmp%6 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr@)))) (=> (= tmp%7 (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (and (=> %%location_label%%3 (req%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. tmp%4 tmp%5 tmp%6 tmp%7)) (=> (ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. tmp%4 tmp%5 tmp%6 tmp%7 tmp%3) (=> (= verus_tmp@ (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. tmp%3)))) (=> (= verus_tmp_perm@ verus_tmp@) (=> (= perm@1 verus_tmp_perm@) (=> (= tmp%9 (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr@)))) (and (=> %%location_label%%4 (req%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. tmp%9) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. perm@1))) (=> (ens%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. tmp%9) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. perm@1) tmp%8) (=> (= page@ (%Poly%lib!types.Page. tmp%8)) (=> (= tmp%11 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr@)))) (and (=> %%location_label%%5 (req%vstd!map.impl&%0.tracked_remove. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (Poly%lib!tokens.PageId. tmp%11))) (=> (and (= (lib!types.Local./Local/thread_id local!@0) (lib!types.Local./Local/thread_id local!@1)) (= (lib!types.Local./Local/my_inst local!@0) (lib!types.Local./Local/my_inst local!@1)) (= (lib!types.Local./Local/instance local!@0) (lib!types.Local./Local/instance local!@1)) (= (lib!types.Local./Local/thread_token local!@0) (lib!types.Local./Local/thread_token local!@1)) (= (lib!types.Local./Local/checked_token local!@0) (lib!types.Local./Local/checked_token local!@1)) (= (lib!types.Local./Local/is_thread local!@0) (lib!types.Local./Local/is_thread local!@1)) (= (lib!types.Local./Local/heap_id local!@0) (lib!types.Local./Local/heap_id local!@1)) (= (lib!types.Local./Local/heap local!@0) (lib!types.Local./Local/heap local!@1)) (= (lib!types.Local./Local/tld_id local!@0) (lib!types.Local./Local/tld_id local!@1)) (= (lib!types.Local./Local/tld local!@0) (lib!types.Local./Local/tld local!@1)) (= (lib!types.Local./Local/segments local!@0) (lib!types.Local./Local/segments local!@1)) (= (lib!types.Local./Local/psa local!@0) (lib!types.Local./Local/psa local!@1)) (= (lib!types.Local./Local/unused_pages local!@0) (lib!types.Local./Local/unused_pages local!@1)) (= (lib!types.Local./Local/page_organization local!@0) (lib!types.Local./Local/page_organization local!@1)) (= (lib!types.Local./Local/page_empty_global local!@0) (lib!types.Local./Local/page_empty_global local!@1))) (=> (has_type (Poly%lib!types.Local. local!@1) TYPE%lib!types.Local.) (=> (ens%vstd!map.impl&%0.tracked_remove. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@1)))) (Poly%lib!tokens.PageId. tmp%11) tmp%10) (=> (= verus_tmp$1@ (%Poly%lib!types.PageLocalAccess. tmp%10)) (=> (= verus_tmp_inner_0@0 (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$1@)))) (=> (= verus_tmp_prev_0@ (lib!types.PageLocalAccess./PageLocalAccess/prev (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$1@)))) (=> (= verus_tmp_next_0@ (lib!types.PageLocalAccess./PageLocalAccess/next (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$1@)))) (=> (= verus_tmp_count_0@ (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$1@)))) (=> (= inner_0@1 verus_tmp_inner_0@0) (=> (= prev_0@1 verus_tmp_prev_0@) (=> (= next_0@1 verus_tmp_next_0@) (=> (= count_0@1 verus_tmp_count_0@) (=> (= tmp%13 (lib!types.Page./Page/inner (%Poly%lib!types.Page. (Poly%lib!types.Page. page@)))) (and (=> %%location_label%%6 (req%vstd!cell.impl&%3.take. $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PCell<lib!types.PageInner.>. tmp%13) (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0@1))) (=> (ens%vstd!cell.impl&%3.take. $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PCell<lib!types.PageInner.>. tmp%13) (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0@1) (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0@2) tmp%12) (=> (= inner@0 (%Poly%lib!types.PageInner. tmp%12)) (=> (= tmp%14 (= pq! (uClip SZ lib!config.BIN_FULL.?))) (=> (has_type (Poly%lib!types.PageInner. inner@1) TYPE%lib!types.PageInner.) (=> (ens%lib!flags.impl&%0.set_in_full. inner@0 inner@1 tmp%14) (=> (= tmp%15 (lib!types.Page./Page/inner (%Poly%lib!types.Page. (Poly%lib!types.Page. page@)))) (and (=> %%location_label%%7 (req%vstd!cell.impl&%3.put. $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PCell<lib!types.PageInner.>. tmp%15) (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0@2) (Poly%lib!types.PageInner. inner@1))) (=> (ens%vstd!cell.impl&%3.put. $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PCell<lib!types.PageInner.>. tmp%15) (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0@2) (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0@3) (Poly%lib!types.PageInner. inner@1)) (=> (= tmp%16 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr@)))) (=> (= tmp%17 (lib!types.PageLocalAccess./PageLocalAccess (%Poly%vstd!cell.PointsTo<u32.>. (Poly%vstd!cell.PointsTo<u32.>. count_0@1)) (%Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0@3)) (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0@1)) (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0@1)))) (=> (and (= (lib!types.Local./Local/thread_id local!@1) (lib!types.Local./Local/thread_id local!@2)) (= (lib!types.Local./Local/my_inst local!@1) (lib!types.Local./Local/my_inst local!@2)) (= (lib!types.Local./Local/instance local!@1) (lib!types.Local./Local/instance local!@2)) (= (lib!types.Local./Local/thread_token local!@1) (lib!types.Local./Local/thread_token local!@2)) (= (lib!types.Local./Local/checked_token local!@1) (lib!types.Local./Local/checked_token local!@2)) (= (lib!types.Local./Local/is_thread local!@1) (lib!types.Local./Local/is_thread local!@2)) (= (lib!types.Local./Local/heap_id local!@1) (lib!types.Local./Local/heap_id local!@2)) (= (lib!types.Local./Local/heap local!@1) (lib!types.Local./Local/heap local!@2)) (= (lib!types.Local./Local/tld_id local!@1) (lib!types.Local./Local/tld_id local!@2)) (= (lib!types.Local./Local/tld local!@1) (lib!types.Local./Local/tld local!@2)) (= (lib!types.Local./Local/segments local!@1) (lib!types.Local./Local/segments local!@2)) (= (lib!types.Local./Local/psa local!@1) (lib!types.Local./Local/psa local!@2)) (= (lib!types.Local./Local/unused_pages local!@1) (lib!types.Local./Local/unused_pages local!@2)) (= (lib!types.Local./Local/page_organization local!@1) (lib!types.Local./Local/page_organization local!@2)) (= (lib!types.Local./Local/page_empty_global local!@1) (lib!types.Local./Local/page_empty_global local!@2))) (=> (has_type (Poly%lib!types.Local. local!@2) TYPE%lib!types.Local.) (=> (ens%vstd!map.impl&%0.tracked_insert. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@1)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@2)))) (Poly%lib!tokens.PageId. tmp%16) (Poly%lib!types.PageLocalAccess. tmp%17)) (=> (= heap_ptr@ heap!) (=> (= tmp%19 (lib!types.Local./Local/instance (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@2)))) (=> (= tmp%20 (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@2)))) (=> (= tmp%21 (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@2)))) (and (=> %%location_label%%8 (req%lib!tokens.Mim.impl&%18.thread_local_state_guards_heap. tmp%19 tmp%20 tmp%21)) (=> (ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_heap. tmp%19 tmp%20 tmp%21 tmp%18) (=> (= verus_tmp$2@ (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. tmp%18)))) (=> (= verus_tmp_perm$1@ verus_tmp$2@) (=> (= perm$1@1 verus_tmp_perm$1@) (=> (= tmp%23 (lib!types.HeapPtr./HeapPtr/heap_ptr (%Poly%lib!types.HeapPtr. (Poly%lib!types.HeapPtr. heap_ptr@)))) (and (=> %%location_label%%9 (req%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Heap. (Poly%ptr_mut%<lib!types.Heap.>. tmp%23) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. perm$1@1))) (=> (ens%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Heap. (Poly%ptr_mut%<lib!types.Heap.>. tmp%23) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. perm$1@1) tmp%22) (=> (= heap@ (%Poly%lib!types.Heap. tmp%22)) (=> (= tmp%25 (lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. (Poly%lib!types.Heap. heap@)))) (and (=> %%location_label%%10 (req%vstd!cell.impl&%3.take. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) tmp%25 (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@2)))))))) (=> (and (= (lib!types.Local./Local/thread_id local!@2) (lib!types.Local./Local/thread_id local!@3)) (= (lib!types.Local./Local/my_inst local!@2) (lib!types.Local./Local/my_inst local!@3)) (= (lib!types.Local./Local/instance local!@2) (lib!types.Local./Local/instance local!@3)) (= (lib!types.Local./Local/thread_token local!@2) (lib!types.Local./Local/thread_token local!@3)) (= (lib!types.Local./Local/checked_token local!@2) (lib!types.Local./Local/checked_token local!@3)) (= (lib!types.Local./Local/is_thread local!@2) (lib!types.Local./Local/is_thread local!@3)) (= (lib!types.Local./Local/heap_id local!@2) (lib!types.Local./Local/heap_id local!@3)) (= (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (lib!types.Local./Local/heap local!@2)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (lib!types.Local./Local/heap local!@3))) (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (lib!types.Local./Local/heap local!@2)) (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (lib!types.Local./Local/heap local!@3))) (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (lib!types.Local./Local/heap local!@2)) (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (lib!types.Local./Local/heap local!@3))) (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (lib!types.Local./Local/heap local!@2)) (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (lib!types.Local./Local/heap local!@3))) (= (lib!types.Local./Local/tld_id local!@2) (lib!types.Local./Local/tld_id local!@3)) (= (lib!types.Local./Local/tld local!@2) (lib!types.Local./Local/tld local!@3)) (= (lib!types.Local./Local/segments local!@2) (lib!types.Local./Local/segments local!@3)) (= (lib!types.Local./Local/pages local!@2) (lib!types.Local./Local/pages local!@3)) (= (lib!types.Local./Local/psa local!@2) (lib!types.Local./Local/psa local!@3)) (= (lib!types.Local./Local/unused_pages local!@2) (lib!types.Local./Local/unused_pages local!@3)) (= (lib!types.Local./Local/page_organization local!@2) (lib!types.Local./Local/page_organization local!@3)) (= (lib!types.Local./Local/page_empty_global local!@2) (lib!types.Local./Local/page_empty_global local!@3))) (=> (has_type (Poly%lib!types.Local. local!@3) TYPE%lib!types.Local.) (=> (ens%vstd!cell.impl&%3.take. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) tmp%25 (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@2)))))) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@3)))))) tmp%24) (=> (= pages@0 (%Poly%array%. tmp%24)) (and (=> %%location_label%%11 (req%vstd!array.array_index_get. $ TYPE%lib!types.PageQueue. $ (CONST_INT 75) pages@0 pq!)) (=> (ens%vstd!array.array_index_get. $ TYPE%lib!types.PageQueue. $ (CONST_INT 75) pages@0 pq! tmp%26) (=> (= cq@0 (%Poly%lib!types.PageQueue. tmp%26)) (=> (= last_in_queue@ (lib!types.PageQueue./PageQueue/last (%Poly%lib!types.PageQueue. (Poly%lib!types.PageQueue. cq@0)))) (=> (= tmp%27 (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))) (=> (= (lib!types.PageQueue./PageQueue/last (%Poly%lib!types.PageQueue. (Poly%lib!types.PageQueue. cq@1))) tmp%27) (=> (and (= (lib!types.PageQueue./PageQueue/first cq@0) (lib!types.PageQueue./PageQueue/first cq@1)) (= (lib!types.PageQueue./PageQueue/block_size cq@0) (lib!types.PageQueue./PageQueue/block_size cq@1))) (=> (ens%core!ptr.mut_ptr.impl&%0.addr. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. last_in_queue@) tmp%28) (or (and (=> (= tmp%28 0) (=> (= tmp%29 (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))) (=> (= (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (Poly%lib!types.PageQueue. cq@2))) tmp%29) (=> (and (= (lib!types.PageQueue./PageQueue/last cq@1) (lib!types.PageQueue./PageQueue/last cq@2)) (= (lib!types.PageQueue./PageQueue/block_size cq@1) (lib!types.PageQueue./PageQueue/block_size cq@2))) %%switch_label%%5)))) (=> (not (= tmp%28 0)) (=> (= cq@2 cq@1) %%switch_label%%5))) (and (not %%switch_label%%5) (and (=> %%location_label%%12 (req%vstd!array.impl&%3.set. $ TYPE%lib!types.PageQueue. $ (CONST_INT 75) pages@0 pq! (Poly%lib!types.PageQueue. cq@2))) (=> (has_type (Poly%array%. pages@1) (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75))) (=> (ens%vstd!array.impl&%3.set. $ TYPE%lib!types.PageQueue. $ (CONST_INT 75) pages@0 pages@1 pq! (Poly%lib!types.PageQueue. cq@2)) (=> (= tmp%30 (lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. (Poly%lib!types.Heap. heap@)))) (and (=> %%location_label%%13 (req%vstd!cell.impl&%3.put. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) tmp%30 (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@3)))))) (Poly%array%. pages@1))) (=> (and (= (lib!types.Local./Local/thread_id local!@3) (lib!types.Local./Local/thread_id local!@4)) (= (lib!types.Local./Local/my_inst local!@3) (lib!types.Local./Local/my_inst local!@4)) (= (lib!types.Local./Local/instance local!@3) (lib!types.Local./Local/instance local!@4)) (= (lib!types.Local./Local/thread_token local!@3) (lib!types.Local./Local/thread_token local!@4)) (= (lib!types.Local./Local/checked_token local!@3) (lib!types.Local./Local/checked_token local!@4)) (= (lib!types.Local./Local/is_thread local!@3) (lib!types.Local./Local/is_thread local!@4)) (= (lib!types.Local./Local/heap_id local!@3) (lib!types.Local./Local/heap_id local!@4)) (= (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (lib!types.Local./Local/heap local!@3)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (lib!types.Local./Local/heap local!@4))) (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (lib!types.Local./Local/heap local!@3)) (lib!types.HeapLocalAccess./HeapLocalAccess/page_count (lib!types.Local./Local/heap local!@4))) (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (lib!types.Local./Local/heap local!@3)) (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_min (lib!types.Local./Local/heap local!@4))) (= (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (lib!types.Local./Local/heap local!@3)) (lib!types.HeapLocalAccess./HeapLocalAccess/page_retired_max (lib!types.Local./Local/heap local!@4))) (= (lib!types.Local./Local/tld_id local!@3) (lib!types.Local./Local/tld_id local!@4)) (= (lib!types.Local./Local/tld local!@3) (lib!types.Local./Local/tld local!@4)) (= (lib!types.Local./Local/segments local!@3) (lib!types.Local./Local/segments local!@4)) (= (lib!types.Local./Local/pages local!@3) (lib!types.Local./Local/pages local!@4)) (= (lib!types.Local./Local/psa local!@3) (lib!types.Local./Local/psa local!@4)) (= (lib!types.Local./Local/unused_pages local!@3) (lib!types.Local./Local/unused_pages local!@4)) (= (lib!types.Local./Local/page_organization local!@3) (lib!types.Local./Local/page_organization local!@4)) (= (lib!types.Local./Local/page_empty_global local!@3) (lib!types.Local./Local/page_empty_global local!@4))) (=> (has_type (Poly%lib!types.Local. local!@4) TYPE%lib!types.Local.) (=> (ens%vstd!cell.impl&%3.put. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) tmp%30 (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@3)))))) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@4)))))) (Poly%array%. pages@1)) (=> (= page_ptr$1@ page!) (=> (= tmp%31 (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$1@)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$1@))))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$1@))))))) 0)))) (and (=> %%location_label%%14 tmp%31) (=> tmp%31 (=> (= tmp%33 (lib!types.Local./Local/instance (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@4)))) (=> (= tmp%34 (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@4)))) (=> (= tmp%35 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$1@)))) (=> (= tmp%36 (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@4)))) (and (=> %%location_label%%15 (req%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. tmp%33 tmp%34 tmp%35 tmp%36)) (=> (ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. tmp%33 tmp%34 tmp%35 tmp%36 tmp%32) (=> (= verus_tmp$3@ (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. tmp%32)))) (=> (= verus_tmp_perm$2@ verus_tmp$3@) (=> (= perm$2@1 verus_tmp_perm$2@) (=> (= tmp%38 (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$1@)))) (and (=> %%location_label%%16 (req%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. tmp%38) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. perm$2@1))) (=> (ens%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. tmp%38) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. perm$2@1) tmp%37) (=> (= page$1@ (%Poly%lib!types.Page. tmp%37)) (=> (= tmp%40 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$1@)))) (and (=> %%location_label%%17 (req%vstd!map.impl&%0.tracked_remove. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@4)))) (Poly%lib!tokens.PageId. tmp%40))) (=> (and (= (lib!types.Local./Local/thread_id local!@4) (lib!types.Local./Local/thread_id local!@5)) (= (lib!types.Local./Local/my_inst local!@4) (lib!types.Local./Local/my_inst local!@5)) (= (lib!types.Local./Local/instance local!@4) (lib!types.Local./Local/instance local!@5)) (= (lib!types.Local./Local/thread_token local!@4) (lib!types.Local./Local/thread_token local!@5)) (= (lib!types.Local./Local/checked_token local!@4) (lib!types.Local./Local/checked_token local!@5)) (= (lib!types.Local./Local/is_thread local!@4) (lib!types.Local./Local/is_thread local!@5)) (= (lib!types.Local./Local/heap_id local!@4) (lib!types.Local./Local/heap_id local!@5)) (= (lib!types.Local./Local/heap local!@4) (lib!types.Local./Local/heap local!@5)) (= (lib!types.Local./Local/tld_id local!@4) (lib!types.Local./Local/tld_id local!@5)) (= (lib!types.Local./Local/tld local!@4) (lib!types.Local./Local/tld local!@5)) (= (lib!types.Local./Local/segments local!@4) (lib!types.Local./Local/segments local!@5)) (= (lib!types.Local./Local/psa local!@4) (lib!types.Local./Local/psa local!@5)) (= (lib!types.Local./Local/unused_pages local!@4) (lib!types.Local./Local/unused_pages local!@5)) (= (lib!types.Local./Local/page_organization local!@4) (lib!types.Local./Local/page_organization local!@5)) (= (lib!types.Local./Local/page_empty_global local!@4) (lib!types.Local./Local/page_empty_global local!@5))) (=> (has_type (Poly%lib!types.Local. local!@5) TYPE%lib!types.Local.) (=> (ens%vstd!map.impl&%0.tracked_remove. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@4)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@5)))) (Poly%lib!tokens.PageId. tmp%40) tmp%39) (=> (= verus_tmp$4@ (%Poly%lib!types.PageLocalAccess. tmp%39)) (=> (= verus_tmp_inner_0$1@ (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$4@)))) (=> (= verus_tmp_prev_0$1@ (lib!types.PageLocalAccess./PageLocalAccess/prev (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$4@)))) (=> (= verus_tmp_next_0$1@0 (lib!types.PageLocalAccess./PageLocalAccess/next (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$4@)))) (=> (= verus_tmp_count_0$1@ (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$4@)))) (=> (= inner_0$1@1 verus_tmp_inner_0$1@) (=> (= prev_0$1@1 verus_tmp_prev_0$1@) (=> (= next_0$1@1 verus_tmp_next_0$1@0) (=> (= count_0$1@1 verus_tmp_count_0$1@) (=> (= tmp%42 (lib!types.Page./Page/next (%Poly%lib!types.Page. (Poly%lib!types.Page. page$1@)))) (and (=> %%location_label%%18 (req%vstd!cell.impl&%3.take. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%42) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$1@1))) (=> (ens%vstd!cell.impl&%3.take. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%42) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$1@1) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$1@2) tmp%41) (=> (= n@0 (%Poly%ptr_mut%<lib!types.Page.>. tmp%41)) (=> (ens%core!ptr.null_mut. $ TYPE%lib!types.Page. tmp%43) (=> (= n@1 (%Poly%ptr_mut%<lib!types.Page.>. tmp%43)) (=> (= tmp%44 (lib!types.Page./Page/next (%Poly%lib!types.Page. (Poly%lib!types.Page. page$1@)))) (and (=> %%location_label%%19 (req%vstd!cell.impl&%3.put. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%44) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$1@2) (Poly%ptr_mut%<lib!types.Page.>. n@1))) (=> (ens%vstd!cell.impl&%3.put. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%44) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$1@2) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$1@3) (Poly%ptr_mut%<lib!types.Page.>. n@1)) (=> (= tmp%45 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$1@)))) (=> (= tmp%46 (lib!types.PageLocalAccess./PageLocalAccess (%Poly%vstd!cell.PointsTo<u32.>. (Poly%vstd!cell.PointsTo<u32.>. count_0$1@1)) (%Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0$1@1)) (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$1@1)) (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$1@3)))) (=> (and (= (lib!types.Local./Local/thread_id local!@5) (lib!types.Local./Local/thread_id local!@6)) (= (lib!types.Local./Local/my_inst local!@5) (lib!types.Local./Local/my_inst local!@6)) (= (lib!types.Local./Local/instance local!@5) (lib!types.Local./Local/instance local!@6)) (= (lib!types.Local./Local/thread_token local!@5) (lib!types.Local./Local/thread_token local!@6)) (= (lib!types.Local./Local/checked_token local!@5) (lib!types.Local./Local/checked_token local!@6)) (= (lib!types.Local./Local/is_thread local!@5) (lib!types.Local./Local/is_thread local!@6)) (= (lib!types.Local./Local/heap_id local!@5) (lib!types.Local./Local/heap_id local!@6)) (= (lib!types.Local./Local/heap local!@5) (lib!types.Local./Local/heap local!@6)) (= (lib!types.Local./Local/tld_id local!@5) (lib!types.Local./Local/tld_id local!@6)) (= (lib!types.Local./Local/tld local!@5) (lib!types.Local./Local/tld local!@6)) (= (lib!types.Local./Local/segments local!@5) (lib!types.Local./Local/segments local!@6)) (= (lib!types.Local./Local/psa local!@5) (lib!types.Local./Local/psa local!@6)) (= (lib!types.Local./Local/unused_pages local!@5) (lib!types.Local./Local/unused_pages local!@6)) (= (lib!types.Local./Local/page_organization local!@5) (lib!types.Local./Local/page_organization local!@6)) (= (lib!types.Local./Local/page_empty_global local!@5) (lib!types.Local./Local/page_empty_global local!@6))) (=> (has_type (Poly%lib!types.Local. local!@6) TYPE%lib!types.Local.) (=> (ens%vstd!map.impl&%0.tracked_insert. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@5)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@6)))) (Poly%lib!tokens.PageId. tmp%45) (Poly%lib!types.PageLocalAccess. tmp%46)) (=> (= page_ptr$2@ page!) (=> (= tmp%47 (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$2@)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$2@))))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$2@))))))) 0)))) (and (=> %%location_label%%20 tmp%47) (=> tmp%47 (=> (= tmp%49 (lib!types.Local./Local/instance (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@6)))) (=> (= tmp%50 (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@6)))) (=> (= tmp%51 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$2@)))) (=> (= tmp%52 (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@6)))) (and (=> %%location_label%%21 (req%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. tmp%49 tmp%50 tmp%51 tmp%52)) (=> (ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. tmp%49 tmp%50 tmp%51 tmp%52 tmp%48) (=> (= verus_tmp$5@ (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. tmp%48)))) (=> (= verus_tmp_perm$3@ verus_tmp$5@) (=> (= perm$3@1 verus_tmp_perm$3@) (=> (= tmp%54 (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$2@)))) (and (=> %%location_label%%22 (req%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. tmp%54) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. perm$3@1))) (=> (ens%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. tmp%54) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. perm$3@1) tmp%53) (=> (= page$2@ (%Poly%lib!types.Page. tmp%53)) (=> (= tmp%56 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$2@)))) (and (=> %%location_label%%23 (req%vstd!map.impl&%0.tracked_remove. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@6)))) (Poly%lib!tokens.PageId. tmp%56))) (=> (and (= (lib!types.Local./Local/thread_id local!@6) (lib!types.Local./Local/thread_id local!@7)) (= (lib!types.Local./Local/my_inst local!@6) (lib!types.Local./Local/my_inst local!@7)) (= (lib!types.Local./Local/instance local!@6) (lib!types.Local./Local/instance local!@7)) (= (lib!types.Local./Local/thread_token local!@6) (lib!types.Local./Local/thread_token local!@7)) (= (lib!types.Local./Local/checked_token local!@6) (lib!types.Local./Local/checked_token local!@7)) (= (lib!types.Local./Local/is_thread local!@6) (lib!types.Local./Local/is_thread local!@7)) (= (lib!types.Local./Local/heap_id local!@6) (lib!types.Local./Local/heap_id local!@7)) (= (lib!types.Local./Local/heap local!@6) (lib!types.Local./Local/heap local!@7)) (= (lib!types.Local./Local/tld_id local!@6) (lib!types.Local./Local/tld_id local!@7)) (= (lib!types.Local./Local/tld local!@6) (lib!types.Local./Local/tld local!@7)) (= (lib!types.Local./Local/segments local!@6) (lib!types.Local./Local/segments local!@7)) (= (lib!types.Local./Local/psa local!@6) (lib!types.Local./Local/psa local!@7)) (= (lib!types.Local./Local/unused_pages local!@6) (lib!types.Local./Local/unused_pages local!@7)) (= (lib!types.Local./Local/page_organization local!@6) (lib!types.Local./Local/page_organization local!@7)) (= (lib!types.Local./Local/page_empty_global local!@6) (lib!types.Local./Local/page_empty_global local!@7))) (=> (has_type (Poly%lib!types.Local. local!@7) TYPE%lib!types.Local.) (=> (ens%vstd!map.impl&%0.tracked_remove. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@6)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@7)))) (Poly%lib!tokens.PageId. tmp%56) tmp%55) (=> (= verus_tmp$6@ (%Poly%lib!types.PageLocalAccess. tmp%55)) (=> (= verus_tmp_inner_0$2@ (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$6@)))) (=> (= verus_tmp_prev_0$2@0 (lib!types.PageLocalAccess./PageLocalAccess/prev (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$6@)))) (=> (= verus_tmp_next_0$2@ (lib!types.PageLocalAccess./PageLocalAccess/next (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$6@)))) (=> (= verus_tmp_count_0$2@ (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$6@)))) (=> (= inner_0$2@1 verus_tmp_inner_0$2@) (=> (= prev_0$2@1 verus_tmp_prev_0$2@0) (=> (= next_0$2@1 verus_tmp_next_0$2@) (=> (= count_0$2@1 verus_tmp_count_0$2@) (=> (= tmp%58 (lib!types.Page./Page/prev (%Poly%lib!types.Page. (Poly%lib!types.Page. page$2@)))) (and (=> %%location_label%%24 (req%vstd!cell.impl&%3.take. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%58) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$2@1))) (=> (ens%vstd!cell.impl&%3.take. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%58) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$2@1) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$2@2) tmp%57) (=> (= p@0 (%Poly%ptr_mut%<lib!types.Page.>. tmp%57)) (=> (= p@1 last_in_queue@) (=> (= tmp%59 (lib!types.Page./Page/prev (%Poly%lib!types.Page. (Poly%lib!types.Page. page$2@)))) (and (=> %%location_label%%25 (req%vstd!cell.impl&%3.put. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%59) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$2@2) (Poly%ptr_mut%<lib!types.Page.>. p@1))) (=> (ens%vstd!cell.impl&%3.put. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%59) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$2@2) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$2@3) (Poly%ptr_mut%<lib!types.Page.>. p@1)) (=> (= tmp%60 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$2@)))) (=> (= tmp%61 (lib!types.PageLocalAccess./PageLocalAccess (%Poly%vstd!cell.PointsTo<u32.>. (Poly%vstd!cell.PointsTo<u32.>. count_0$2@1)) (%Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0$2@1)) (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$2@3)) (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$2@1)))) (=> (and (= (lib!types.Local./Local/thread_id local!@7) (lib!types.Local./Local/thread_id local!@8)) (= (lib!types.Local./Local/my_inst local!@7) (lib!types.Local./Local/my_inst local!@8)) (= (lib!types.Local./Local/instance local!@7) (lib!types.Local./Local/instance local!@8)) (= (lib!types.Local./Local/thread_token local!@7) (lib!types.Local./Local/thread_token local!@8)) (= (lib!types.Local./Local/checked_token local!@7) (lib!types.Local./Local/checked_token local!@8)) (= (lib!types.Local./Local/is_thread local!@7) (lib!types.Local./Local/is_thread local!@8)) (= (lib!types.Local./Local/heap_id local!@7) (lib!types.Local./Local/heap_id local!@8)) (= (lib!types.Local./Local/heap local!@7) (lib!types.Local./Local/heap local!@8)) (= (lib!types.Local./Local/tld_id local!@7) (lib!types.Local./Local/tld_id local!@8)) (= (lib!types.Local./Local/tld local!@7) (lib!types.Local./Local/tld local!@8)) (= (lib!types.Local./Local/segments local!@7) (lib!types.Local./Local/segments local!@8)) (= (lib!types.Local./Local/psa local!@7) (lib!types.Local./Local/psa local!@8)) (= (lib!types.Local./Local/unused_pages local!@7) (lib!types.Local./Local/unused_pages local!@8)) (= (lib!types.Local./Local/page_organization local!@7) (lib!types.Local./Local/page_organization local!@8)) (= (lib!types.Local./Local/page_empty_global local!@7) (lib!types.Local./Local/page_empty_global local!@8))) (=> (has_type (Poly%lib!types.Local. local!@8) TYPE%lib!types.Local.) (=> (ens%vstd!map.impl&%0.tracked_insert. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@7)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@8)))) (Poly%lib!tokens.PageId. tmp%60) (Poly%lib!types.PageLocalAccess. tmp%61)) (=> (ens%core!ptr.mut_ptr.impl&%0.addr. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. last_in_queue@) tmp%62) (or (and (=> (not (= tmp%62 0)) (=> (= last_in_queue_ptr@ (lib!types.PagePtr./PagePtr (%Poly%ptr_mut%<lib!types.Page.>. (Poly%ptr_mut%<lib!types.Page.>. last_in_queue@)) (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@8))))))) (I pq!)))))))))) (=> (= page_ptr$3@ last_in_queue_ptr@) (=> (= tmp%63 (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$3@)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$3@))))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$3@))))))) 0)))) (and (=> %%location_label%%26 tmp%63) (=> tmp%63 (=> (= tmp%65 (lib!types.Local./Local/instance (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@8)))) (=> (= tmp%66 (lib!types.Local./Local/thread_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@8)))) (=> (= tmp%67 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$3@)))) (=> (= tmp%68 (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@8)))) (and (=> %%location_label%%27 (req%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. tmp%65 tmp%66 tmp%67 tmp%68)) (=> (ens%lib!tokens.Mim.impl&%18.thread_local_state_guards_page. tmp%65 tmp%66 tmp%67 tmp%68 tmp%64) (=> (= verus_tmp$7@ (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. tmp%64)))) (=> (= verus_tmp_perm$4@ verus_tmp$7@) (=> (= perm$4@1 verus_tmp_perm$4@) (=> (= tmp%70 (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$3@)))) (and (=> %%location_label%%28 (req%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. tmp%70) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. perm$4@1))) (=> (ens%vstd!raw_ptr.ptr_ref. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. tmp%70) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. perm$4@1) tmp%69) (=> (= page$3@ (%Poly%lib!types.Page. tmp%69)) (=> (= tmp%72 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$3@)))) (and (=> %%location_label%%29 (req%vstd!map.impl&%0.tracked_remove. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@8)))) (Poly%lib!tokens.PageId. tmp%72))) (=> (and (= (lib!types.Local./Local/thread_id local!@8) (lib!types.Local./Local/thread_id local!@9)) (= (lib!types.Local./Local/my_inst local!@8) (lib!types.Local./Local/my_inst local!@9)) (= (lib!types.Local./Local/instance local!@8) (lib!types.Local./Local/instance local!@9)) (= (lib!types.Local./Local/thread_token local!@8) (lib!types.Local./Local/thread_token local!@9)) (= (lib!types.Local./Local/checked_token local!@8) (lib!types.Local./Local/checked_token local!@9)) (= (lib!types.Local./Local/is_thread local!@8) (lib!types.Local./Local/is_thread local!@9)) (= (lib!types.Local./Local/heap_id local!@8) (lib!types.Local./Local/heap_id local!@9)) (= (lib!types.Local./Local/heap local!@8) (lib!types.Local./Local/heap local!@9)) (= (lib!types.Local./Local/tld_id local!@8) (lib!types.Local./Local/tld_id local!@9)) (= (lib!types.Local./Local/tld local!@8) (lib!types.Local./Local/tld local!@9)) (= (lib!types.Local./Local/segments local!@8) (lib!types.Local./Local/segments local!@9)) (= (lib!types.Local./Local/psa local!@8) (lib!types.Local./Local/psa local!@9)) (= (lib!types.Local./Local/unused_pages local!@8) (lib!types.Local./Local/unused_pages local!@9)) (= (lib!types.Local./Local/page_organization local!@8) (lib!types.Local./Local/page_organization local!@9)) (= (lib!types.Local./Local/page_empty_global local!@8) (lib!types.Local./Local/page_empty_global local!@9))) (=> (has_type (Poly%lib!types.Local. local!@9) TYPE%lib!types.Local.) (=> (ens%vstd!map.impl&%0.tracked_remove. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@8)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@9)))) (Poly%lib!tokens.PageId. tmp%72) tmp%71) (=> (= verus_tmp$8@ (%Poly%lib!types.PageLocalAccess. tmp%71)) (=> (= verus_tmp_inner_0$3@ (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$8@)))) (=> (= verus_tmp_prev_0$3@ (lib!types.PageLocalAccess./PageLocalAccess/prev (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$8@)))) (=> (= verus_tmp_next_0$3@0 (lib!types.PageLocalAccess./PageLocalAccess/next (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$8@)))) (=> (= verus_tmp_count_0$3@ (lib!types.PageLocalAccess./PageLocalAccess/count (%Poly%lib!types.PageLocalAccess. (Poly%lib!types.PageLocalAccess. verus_tmp$8@)))) (=> (= inner_0$3@1 verus_tmp_inner_0$3@) (=> (= prev_0$3@1 verus_tmp_prev_0$3@) (=> (= next_0$3@1 verus_tmp_next_0$3@0) (=> (= count_0$3@1 verus_tmp_count_0$3@) (=> (= tmp%74 (lib!types.Page./Page/next (%Poly%lib!types.Page. (Poly%lib!types.Page. page$3@)))) (and (=> %%location_label%%30 (req%vstd!cell.impl&%3.take. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%74) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$3@1))) (=> (ens%vstd!cell.impl&%3.take. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%74) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$3@1) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$3@2) tmp%73) (=> (= n$1@0 (%Poly%ptr_mut%<lib!types.Page.>. tmp%73)) (=> (= n$1@1 (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))) (=> (= tmp%75 (lib!types.Page./Page/next (%Poly%lib!types.Page. (Poly%lib!types.Page. page$3@)))) (and (=> %%location_label%%31 (req%vstd!cell.impl&%3.put. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%75) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$3@2) (Poly%ptr_mut%<lib!types.Page.>. n$1@1))) (=> (ens%vstd!cell.impl&%3.put. $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. tmp%75) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$3@2) (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$3@3) (Poly%ptr_mut%<lib!types.Page.>. n$1@1)) (=> (= tmp%76 (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page_ptr$3@)))) (=> (= tmp%77 (lib!types.PageLocalAccess./PageLocalAccess (%Poly%vstd!cell.PointsTo<u32.>. (Poly%vstd!cell.PointsTo<u32.>. count_0$3@1)) (%Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. inner_0$3@1)) (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. prev_0$3@1)) (%Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PointsTo<ptr_mut%<lib!types.Page.>.>. next_0$3@3)))) (=> (and (= (lib!types.Local./Local/thread_id local!@9) (lib!types.Local./Local/thread_id local!@10)) (= (lib!types.Local./Local/my_inst local!@9) (lib!types.Local./Local/my_inst local!@10)) (= (lib!types.Local./Local/instance local!@9) (lib!types.Local./Local/instance local!@10)) (= (lib!types.Local./Local/thread_token local!@9) (lib!types.Local./Local/thread_token local!@10)) (= (lib!types.Local./Local/checked_token local!@9) (lib!types.Local./Local/checked_token local!@10)) (= (lib!types.Local./Local/is_thread local!@9) (lib!types.Local./Local/is_thread local!@10)) (= (lib!types.Local./Local/heap_id local!@9) (lib!types.Local./Local/heap_id local!@10)) (= (lib!types.Local./Local/heap local!@9) (lib!types.Local./Local/heap local!@10)) (= (lib!types.Local./Local/tld_id local!@9) (lib!types.Local./Local/tld_id local!@10)) (= (lib!types.Local./Local/tld local!@9) (lib!types.Local./Local/tld local!@10)) (= (lib!types.Local./Local/segments local!@9) (lib!types.Local./Local/segments local!@10)) (= (lib!types.Local./Local/psa local!@9) (lib!types.Local./Local/psa local!@10)) (= (lib!types.Local./Local/unused_pages local!@9) (lib!types.Local./Local/unused_pages local!@10)) (= (lib!types.Local./Local/page_organization local!@9) (lib!types.Local./Local/page_organization local!@10)) (= (lib!types.Local./Local/page_empty_global local!@9) (lib!types.Local./Local/page_empty_global local!@10))) (=> (has_type (Poly%lib!types.Local. local!@10) TYPE%lib!types.Local.) (=> (ens%vstd!map.impl&%0.tracked_insert. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@9)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@10)))) (Poly%lib!tokens.PageId. tmp%76) (Poly%lib!types.PageLocalAccess. tmp%77)) %%switch_label%%4)))))))))))))))))))))))))))))))))))))))))))))) (=> (not (not (= tmp%62 0))) (=> (= local!@10 local!@8) (=> (= perm$4@1 perm$4@0) (=> (= inner_0$3@1 inner_0$3@0) (=> (= prev_0$3@1 prev_0$3@0) (=> (= next_0$3@3 next_0$3@0) (=> (= count_0$3@1 count_0$3@0) (=> (= n$1@1 n$1@0) %%switch_label%%4))))))))) (and (not %%switch_label%%4) (=> (= (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@11))) next_state@1) (=> (and (= (lib!types.Local./Local/thread_id local!@10) (lib!types.Local./Local/thread_id local!@11)) (= (lib!types.Local./Local/my_inst local!@10) (lib!types.Local./Local/my_inst local!@11)) (= (lib!types.Local./Local/instance local!@10) (lib!types.Local./Local/instance local!@11)) (= (lib!types.Local./Local/thread_token local!@10) (lib!types.Local./Local/thread_token local!@11)) (= (lib!types.Local./Local/checked_token local!@10) (lib!types.Local./Local/checked_token local!@11)) (= (lib!types.Local./Local/is_thread local!@10) (lib!types.Local./Local/is_thread local!@11)) (= (lib!types.Local./Local/heap_id local!@10) (lib!types.Local./Local/heap_id local!@11)) (= (lib!types.Local./Local/heap local!@10) (lib!types.Local./Local/heap local!@11)) (= (lib!types.Local./Local/tld_id local!@10) (lib!types.Local./Local/tld_id local!@11)) (= (lib!types.Local./Local/tld local!@10) (lib!types.Local./Local/tld local!@11)) (= (lib!types.Local./Local/segments local!@10) (lib!types.Local./Local/segments local!@11)) (= (lib!types.Local./Local/pages local!@10) (lib!types.Local./Local/pages local!@11)) (= (lib!types.Local./Local/psa local!@10) (lib!types.Local./Local/psa local!@11)) (= (lib!types.Local./Local/unused_pages local!@10) (lib!types.Local./Local/unused_pages local!@11)) (= (lib!types.Local./Local/page_empty_global local!@10) (lib!types.Local./Local/page_empty_global local!@11))) (and (=> %%location_label%%32 (req%lib!os_mem_util.preserves_mem_chunk_good. local!@0 local!@11)) (=> (ens%lib!os_mem_util.preserves_mem_chunk_good. local!@0 local!@11) (=> (= verus_tmp$9@1 local!@11) (=> (= verus_tmp_local_snap@ verus_tmp$9@1) (=> (= local_snap@1 verus_tmp_local_snap@) (=> (ens%core!ptr.mut_ptr.impl&%0.addr. $ TYPE%lib!types.Page. (Poly%ptr_mut%<lib!types.Page.>. last_in_queue@) tmp%78) (or (and (=> (= tmp%78 0) (=> (= tmp%79 (%Poly%ptr_mut%<lib!types.Page.>. (vstd!raw_ptr.ptr_mut_from_data.? $ TYPE%lib!types.Page. (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin))))))) (and (=> %%location_label%%33 (req%lib!queues.heap_queue_first_update. heap! pq! local!@11 tmp%79)) (=> (has_type (Poly%lib!types.Local. local!@12) TYPE%lib!types.Local.) (=> (ens%lib!queues.heap_queue_first_update. heap! pq! local!@11 local!@12 tmp%79) %%switch_label%%3))))) (=> (not (= tmp%78 0)) (=> (= local!@12 local!@11) %%switch_label%%3))) (and (not %%switch_label%%3) (and (=> %%location_label%%34 (req%lib!types.impl&%24.get_page_count. heap! local!@12)) (=> (ens%lib!types.impl&%24.get_page_count. heap! local!@12 c@) (=> (ens%core!num.impl&%11.wrapping_add. c@ 1 tmp%80) (and (=> %%location_label%%35 (req%lib!types.impl&%24.set_page_count. heap! local!@12 tmp%80)) (=> (has_type (Poly%lib!types.Local. local!@13) TYPE%lib!types.Local.) (=> (ens%lib!types.impl&%24.set_page_count. heap! local!@12 local!@13 tmp%80) (or (and (=> (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. last_in_queue@)))) 0) (or (and (=> (not (= pq! lib!config.BIN_FULL.?)) (=> (= opfd@ (%Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local_snap@1)))))))))))))))) (=> (= pfd@ (%Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (=> (= pages$1@ (%Poly%vstd!seq.Seq<lib!types.PageQueue.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (=> (= emp@ (%Poly%ptr_mut%<lib!types.Page.>. (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (=> (= i@ (lib!bin_sizes.pfd_lower.? (I pq!))) (=> (= j@ (Add (lib!bin_sizes.pfd_upper.? (I pq!)) 1)) (and (=> (has_type wsize@ INT) (=> (and (<= 0 (%I wsize@)) (< (%I wsize@) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd@)))) (or (and (=> (and (<= i@ (%I wsize@)) (< (%I wsize@) j@)) (and (=> %%location_label%%36 (req%lib!bin_sizes.idx_in_range_has_bin_size. pq! (%I wsize@))) (=> (ens%lib!bin_sizes.idx_in_range_has_bin_size. pq! (%I wsize@)) %%switch_label%%2))) (=> (not (and (<= i@ (%I wsize@)) (< (%I wsize@) j@))) (=> (= sbfs@ (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize@) lib!config.INTPTR_SIZE.?)))) (=> (= tmp%81 (Mul (%I wsize@) lib!config.INTPTR_SIZE.?)) (and (=> %%location_label%%37 (req%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. tmp%81)) (=> (ens%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. tmp%81) (and (=> %%location_label%%38 (req%lib!bin_sizes.idx_out_of_range_has_different_bin_size. pq! (%I wsize@))) (=> (ens%lib!bin_sizes.idx_out_of_range_has_different_bin_size. pq! (%I wsize@)) %%switch_label%%2)))))))) (and (not %%switch_label%%2) (=> %%location_label%%39 (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd@) wsize@) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (Poly%vstd!seq.Seq<lib!types.PageQueue.>. pages$1@) (I (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize@) lib!config.INTPTR_SIZE.?)))))))) (Poly%ptr_mut%<lib!types.Page.>. emp@))))))) (=> (forall ((wsize$ Poly)) (! (=> (has_type wsize$ INT) (=> (and (<= 0 (%I wsize$)) (< (%I wsize$) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd@)))) (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd@) wsize$) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (Poly%vstd!seq.Seq<lib!types.PageQueue.>. pages$1@) (I (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize$) lib!config.INTPTR_SIZE.?)))))))) (Poly%ptr_mut%<lib!types.Page.>. emp@)))) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd@) wsize$)))) %%switch_label%%1))))))))) (=> (not (not (= pq! lib!config.BIN_FULL.?))) (=> (= pfd$1@ (%Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (=> (= pages$2@ (%Poly%vstd!seq.Seq<lib!types.PageQueue.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (=> (= emp$1@ (%Poly%ptr_mut%<lib!types.Page.>. (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (and (=> (has_type wsize$1@ INT) (=> (and (<= 0 (%I wsize$1@)) (< (%I wsize$1@) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$1@)))) (=> (= tmp%82 (Mul (%I wsize$1@) lib!config.INTPTR_SIZE.?)) (and (=> %%location_label%%40 (req%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. tmp%82)) (=> (ens%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. tmp%82) (=> %%location_label%%41 (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$1@) wsize$1@) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (Poly%vstd!seq.Seq<lib!types.PageQueue.>. pages$2@) (I (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize$1@) lib!config.INTPTR_SIZE.?)))))))) (Poly%ptr_mut%<lib!types.Page.>. emp$1@)))))))) (=> (forall ((wsize$ Poly)) (! (=> (has_type wsize$ INT) (=> (and (<= 0 (%I wsize$)) (< (%I wsize$) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$1@)))) (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$1@) wsize$) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (Poly%vstd!seq.Seq<lib!types.PageQueue.>. pages$2@) (I (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize$) lib!config.INTPTR_SIZE.?)))))))) (Poly%ptr_mut%<lib!types.Page.>. emp$1@)))) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$1@) wsize$)))) %%switch_label%%1))))))) (and (not %%switch_label%%1) %%switch_label%%0))) (=> (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. last_in_queue@)))) 0)) (=> (= pfd$2@ (%Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. (vstd!view.View.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages_free_direct (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (=> (= pages$3@ (%Poly%vstd!seq.Seq<lib!types.PageQueue.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)) (lib!types.HeapLocalAccess./HeapLocalAccess/pages (%Poly%lib!types.HeapLocalAccess. (Poly%lib!types.HeapLocalAccess. (lib!types.Local./Local/heap (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (=> (= emp$2@ (%Poly%ptr_mut%<lib!types.Page.>. (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!types.PageFullAccess./PageFullAccess/s (%Poly%lib!types.PageFullAccess. (vstd!shared.impl&%0.view.? $ TYPE%lib!types.PageFullAccess. (Poly%vstd!shared.Shared<lib!types.PageFullAccess.>. (lib!types.Local./Local/page_empty_global (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))))))) (and (=> (has_type wsize$2@ INT) (=> (and (<= 0 (%I wsize$2@)) (< (%I wsize$2@) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$2@)))) (=> (= tmp%83 (Mul (%I wsize$2@) lib!config.INTPTR_SIZE.?)) (and (=> %%location_label%%42 (req%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. tmp%83)) (=> (ens%lib!bin_sizes.bounds_for_smallest_bin_fitting_size. tmp%83) (=> %%location_label%%43 (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$2@) wsize$2@) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (Poly%vstd!seq.Seq<lib!types.PageQueue.>. pages$3@) (I (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize$2@) lib!config.INTPTR_SIZE.?)))))))) (Poly%ptr_mut%<lib!types.Page.>. emp$2@)))))))) (=> (forall ((wsize$ Poly)) (! (=> (has_type wsize$ INT) (=> (and (<= 0 (%I wsize$)) (< (%I wsize$) (vstd!seq.Seq.len.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$2@)))) (lib!types.pages_free_direct_match.? (vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$2@) wsize$) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PageQueue./PageQueue/first (%Poly%lib!types.PageQueue. (vstd!seq.Seq.index.? $ TYPE%lib!types.PageQueue. (Poly%vstd!seq.Seq<lib!types.PageQueue.>. pages$3@) (I (lib!bin_sizes.smallest_bin_fitting_size.? (I (Mul (%I wsize$) lib!config.INTPTR_SIZE.?)))))))) (Poly%ptr_mut%<lib!types.Page.>. emp$2@)))) :pattern ((vstd!seq.Seq.index.? $ (PTR $ TYPE%lib!types.Page.) (Poly%vstd!seq.Seq<ptr_mut%<lib!types.Page.>.>. pfd$2@) wsize$)))) %%switch_label%%0))))))) (and (not %%switch_label%%0) (and (=> %%location_label%%44 (req%lib!os_mem_util.preserves_mem_chunk_good. local_snap@1 local!@13)) (=> (ens%lib!os_mem_util.preserves_mem_chunk_good. local_snap@1 local!@13) (and (=> %%location_label%%45 (lib!types.impl&%21.wf.? (Poly%lib!types.Local. local!@13))) (and (=> %%location_label%%46 (lib!types.common_preserves.? (Poly%lib!types.Local. local!@0) (Poly%lib!types.Local. local!@13))) (and (=> %%location_label%%47 (and (lib!layout.is_page_ptr.? (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (not (= (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Page.) (Poly%ptr_mut%<lib!types.Page.>. (lib!types.PagePtr./PagePtr/page_ptr (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))) 0)))) (and (=> %%location_label%%48 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))))) (and (=> %%location_label%%49 (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13))))))))))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!)))))) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (Poly%lib!tokens.Mim.thread_local_state. (lib!types.Local./Local/thread_token (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))))))))))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))) 0))) (and (=> %%location_label%%50 (= (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))))))))))))) (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ TYPE%lib!types.PageInner. (Poly%vstd!cell.PointsTo<lib!types.PageInner.>. (lib!types.PageLocalAccess./PageLocalAccess/inner (%Poly%lib!types.PageLocalAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageLocalAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageLocalAccess.>. (lib!types.Local./Local/pages (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (Poly%lib!tokens.PageId. (lib!types.PagePtr./PagePtr/page_id (%Poly%lib!types.PagePtr. (Poly%lib!types.PagePtr. page!))))))))))))))))))) (and (=> %%location_label%%51 (= (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13))) (lib!types.Local./Local/tld_id (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0))))) (=> %%location_label%%52 (=> (lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@0)))) (Poly%lib!tokens.PageId. other_id!) (I other_pq!) (I other_list_idx!)) (lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly%lib!page_organization.PageOrg.State. (lib!types.Local./Local/page_organization (%Poly%lib!types.Local. (Poly%lib!types.Local. local!@13)))) (Poly%lib!tokens.PageId. other_id!) (I other_pq!) (I other_list_idx!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
