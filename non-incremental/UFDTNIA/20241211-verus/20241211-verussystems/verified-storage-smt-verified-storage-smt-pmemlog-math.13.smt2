(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module math'")
(set-info :comment ";; Fuel")
(declare-const fuel%main!math.mul_pos. FuelId)
(declare-const fuel%main!math.mul_recursive. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%main!math.mul_pos. fuel%main!math.mul_recursive. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Function-Decl main::math::mul_pos")
(declare-fun main!math.mul_pos.? (Poly Poly) Int)
(declare-fun main!math.rec%mul_pos.? (Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl main::math::mul_recursive")
(declare-fun main!math.mul_recursive.? (Poly Poly) Int)
(set-info :comment ";; Function-Specs main::math::mul_pos")
(declare-fun req%main!math.mul_pos. (Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((x! Poly) (y! Poly)) (! (= (req%main!math.mul_pos. x! y!) (=> %%global_location_label%%0 (>= (%I x!) 0))) :pattern ((req%main!math.mul_pos. x! y!)))))
(set-info :comment ";; Spec-Termination main::math::mul_pos")
(set-info :comment ";; src/math.rs:73:5: 73:52 (#0)")
(set-info :comment ";; Function-Axioms main::math::mul_pos")
(declare-const fuel_nat%main!math.mul_pos. Fuel)
(assert (forall ((x! Poly) (y! Poly) (fuel% Fuel)) (! (= (main!math.rec%mul_pos.? x! y! fuel%) (main!math.rec%mul_pos.? x! y! zero)) :pattern ((main!math.rec%mul_pos.? x! y! fuel%)))))
(assert (forall ((x! Poly) (y! Poly) (fuel% Fuel)) (! (=> (and (has_type x! INT) (has_type y! INT)) (= (main!math.rec%mul_pos.? x! y! (succ fuel%)) (ite (<= (%I x!) 0) 0 (Add (%I y!) (main!math.rec%mul_pos.? (I (Sub (%I x!) 1)) y! fuel%))))) :pattern ((main!math.rec%mul_pos.? x! y! (succ fuel%))))))
(assert (=> (fuel_bool fuel%main!math.mul_pos.) (forall ((x! Poly) (y! Poly)) (! (=> (and (has_type x! INT) (has_type y! INT)) (= (main!math.mul_pos.? x! y!) (main!math.rec%mul_pos.? x! y! (succ fuel_nat%main!math.mul_pos.)))) :pattern ((main!math.mul_pos.? x! y!))))))
(set-info :comment ";; Function-Axioms main::math::mul_recursive")
(assert (fuel_bool_default fuel%main!math.mul_recursive.))
(assert (=> (fuel_bool fuel%main!math.mul_recursive.) (forall ((x! Poly) (y! Poly)) (! (= (main!math.mul_recursive.? x! y!) (ite (>= (%I x!) 0) (main!math.mul_pos.? x! y!) (Mul (Sub 0 1) (main!math.mul_pos.? (I (Mul (Sub 0 1) (%I x!))) y!)))) :pattern ((main!math.mul_recursive.? x! y!))))))
(set-info :comment ";; Function-Specs main::math::lemma_mod_range")
(declare-fun req%main!math.lemma_mod_range. (Int Int) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((x! Int) (m! Int)) (! (= (req%main!math.lemma_mod_range. x! m!) (=> %%global_location_label%%1 (> m! 0))) :pattern ((req%main!math.lemma_mod_range. x! m!)))))
(declare-fun ens%main!math.lemma_mod_range. (Int Int) Bool)
(assert (forall ((x! Int) (m! Int)) (! (= (ens%main!math.lemma_mod_range. x! m!) (let ((tmp%%$ (EucMod x! m!))) (and (<= 0 tmp%%$) (< tmp%%$ m!)))) :pattern ((ens%main!math.lemma_mod_range. x! m!)))))
(set-info :comment ";; Function-Def main::math::lemma_mod_range")
(set-info :comment ";; src/math.rs:415:5: 415:49 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_fundamental_div_mod")
(declare-fun req%main!math.lemma_fundamental_div_mod. (Int Int) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((x! Int) (d! Int)) (! (= (req%main!math.lemma_fundamental_div_mod. x! d!) (=> %%global_location_label%%2 (not (= d! 0)))) :pattern ((req%main!math.lemma_fundamental_div_mod. x! d!)))))
(declare-fun ens%main!math.lemma_fundamental_div_mod. (Int Int) Bool)
(assert (forall ((x! Int) (d! Int)) (! (= (ens%main!math.lemma_fundamental_div_mod. x! d!) (= x! (Add (Mul d! (EucDiv x! d!)) (EucMod x! d!)))) :pattern ((ens%main!math.lemma_fundamental_div_mod. x! d!)))))
(set-info :comment ";; Function-Specs main::math::lemma_mul_is_distributive_sub")
(declare-fun ens%main!math.lemma_mul_is_distributive_sub. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (ens%main!math.lemma_mul_is_distributive_sub. x! y! z!) (= (Mul x! (Sub y! z!)) (Sub (Mul x! y!) (Mul x! z!)))) :pattern ((ens%main!math.lemma_mul_is_distributive_sub. x! y! z!)))))
(set-info :comment ";; Function-Specs main::math::lemma_mul_is_distributive_sub_other_way")
(declare-fun ens%main!math.lemma_mul_is_distributive_sub_other_way. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (ens%main!math.lemma_mul_is_distributive_sub_other_way. x! y! z!) (= (Mul (Sub y! z!) x!) (Sub (Mul y! x!) (Mul z! x!)))) :pattern ((ens%main!math.lemma_mul_is_distributive_sub_other_way. x! y! z!)))))
(set-info :comment ";; Function-Specs main::math::lemma_mul_is_commutative")
(declare-fun ens%main!math.lemma_mul_is_commutative. (Int Int) Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (ens%main!math.lemma_mul_is_commutative. x! y!) (= (Mul x! y!) (Mul y! x!))) :pattern ((ens%main!math.lemma_mul_is_commutative. x! y!)))))
(set-info :comment ";; Function-Def main::math::lemma_mul_is_commutative")
(set-info :comment ";; src/math.rs:138:5: 138:58 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_mul_is_distributive_add")
(declare-fun ens%main!math.lemma_mul_is_distributive_add. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (ens%main!math.lemma_mul_is_distributive_add. x! y! z!) (= (Mul x! (Add y! z!)) (Add (Mul x! y!) (Mul x! z!)))) :pattern ((ens%main!math.lemma_mul_is_distributive_add. x! y! z!)))))
(set-info :comment ";; Function-Specs main::math::lemma_mul_basics")
(declare-fun ens%main!math.lemma_mul_basics. (Int) Bool)
(assert (forall ((x! Int)) (! (= (ens%main!math.lemma_mul_basics. x!) (and (= (Mul 0 x!) 0) (= (Mul x! 0) 0) (= (Mul 1 x!) x!) (= (Mul x! 1) x!))) :pattern ((ens%main!math.lemma_mul_basics. x!)))))
(set-info :comment ";; Function-Def main::math::lemma_mul_basics")
(set-info :comment ";; src/math.rs:129:5: 129:42 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_mul_inequality")
(declare-fun req%main!math.lemma_mul_inequality. (Int Int Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (req%main!math.lemma_mul_inequality. x! y! z!) (and (=> %%global_location_label%%3 (<= x! y!)) (=> %%global_location_label%%4 (>= z! 0)))) :pattern ((req%main!math.lemma_mul_inequality. x! y! z!)))))
(declare-fun ens%main!math.lemma_mul_inequality. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (z! Int)) (! (= (ens%main!math.lemma_mul_inequality. x! y! z!) (<= (Mul x! z!) (Mul y! z!))) :pattern ((ens%main!math.lemma_mul_inequality. x! y! z!)))))
(set-info :comment ";; Function-Def main::math::lemma_mul_inequality")
(set-info :comment ";; src/math.rs:144:5: 144:62 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_div_relation_when_mods_have_same_order_alt")
(declare-fun req%main!math.lemma_div_relation_when_mods_have_same_order_alt. (Int Int Int) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((d! Int) (x! Int) (y! Int)) (! (= (req%main!math.lemma_div_relation_when_mods_have_same_order_alt. d! x! y!) (and (=> %%global_location_label%%5 (> d! 0)) (=> %%global_location_label%%6 (<= x! y!)) (=> %%global_location_label%%7 (< (Sub y! x!) d!)) (=> %%global_location_label%%8 (<= (EucMod x! d!) (EucMod y! d!))))) :pattern ((req%main!math.lemma_div_relation_when_mods_have_same_order_alt. d! x! y!)))))
(declare-fun ens%main!math.lemma_div_relation_when_mods_have_same_order_alt. (Int Int Int) Bool)
(assert (forall ((d! Int) (x! Int) (y! Int)) (! (= (ens%main!math.lemma_div_relation_when_mods_have_same_order_alt. d! x! y!) (= (EucDiv y! d!) (EucDiv x! d!))) :pattern ((ens%main!math.lemma_div_relation_when_mods_have_same_order_alt. d! x! y!)))))
(set-info :comment ";; Function-Def main::math::lemma_div_relation_when_mods_have_same_order_alt")
(set-info :comment ";; src/math.rs:584:5: 584:90 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_mod_difference_equal")
(declare-fun req%main!math.lemma_mod_difference_equal. (Int Int Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((x! Int) (y! Int) (d! Int)) (! (= (req%main!math.lemma_mod_difference_equal. x! y! d!) (and (=> %%global_location_label%%9 (> d! 0)) (=> %%global_location_label%%10 (<= x! y!)) (=> %%global_location_label%%11 (<= (EucMod x! d!) (EucMod y! d!))) (=> %%global_location_label%%12 (< (Sub y! x!) d!)))) :pattern ((req%main!math.lemma_mod_difference_equal. x! y! d!)))))
(declare-fun ens%main!math.lemma_mod_difference_equal. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (d! Int)) (! (= (ens%main!math.lemma_mod_difference_equal. x! y! d!) (= (Sub (EucMod y! d!) (EucMod x! d!)) (Sub y! x!))) :pattern ((ens%main!math.lemma_mod_difference_equal. x! y! d!)))))
(set-info :comment ";; Function-Def main::math::lemma_mod_difference_equal")
(set-info :comment ";; src/math.rs:768:5: 768:68 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_div_relation_when_mods_have_different_order_alt")
(declare-fun req%main!math.lemma_div_relation_when_mods_have_different_order_alt. (Int Int Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((d! Int) (x! Int) (y! Int)) (! (= (req%main!math.lemma_div_relation_when_mods_have_different_order_alt. d! x! y!) (and (=> %%global_location_label%%13 (> d! 0)) (=> %%global_location_label%%14 (<= x! y!)) (=> %%global_location_label%%15 (< (Sub y! x!) d!)) (=> %%global_location_label%%16 (< (EucMod y! d!) (EucMod x! d!))))) :pattern ((req%main!math.lemma_div_relation_when_mods_have_different_order_alt. d! x! y!)))))
(declare-fun ens%main!math.lemma_div_relation_when_mods_have_different_order_alt. (Int Int Int) Bool)
(assert (forall ((d! Int) (x! Int) (y! Int)) (! (= (ens%main!math.lemma_div_relation_when_mods_have_different_order_alt. d! x! y!) (= (EucDiv y! d!) (Add (EucDiv x! d!) 1))) :pattern ((ens%main!math.lemma_div_relation_when_mods_have_different_order_alt. d! x! y!)))))
(set-info :comment ";; Function-Def main::math::lemma_div_relation_when_mods_have_different_order_alt")
(set-info :comment ";; src/math.rs:648:5: 648:95 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_mod_wrapped_len")
(declare-fun req%main!math.lemma_mod_wrapped_len. (Int Int Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((x! Int) (y! Int) (d! Int)) (! (= (req%main!math.lemma_mod_wrapped_len. x! y! d!) (and (=> %%global_location_label%%17 (> d! 0)) (=> %%global_location_label%%18 (<= x! y!)) (=> %%global_location_label%%19 (> (EucMod x! d!) (EucMod y! d!))) (=> %%global_location_label%%20 (< (Sub y! x!) d!)))) :pattern ((req%main!math.lemma_mod_wrapped_len. x! y! d!)))))
(declare-fun ens%main!math.lemma_mod_wrapped_len. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (d! Int)) (! (= (ens%main!math.lemma_mod_wrapped_len. x! y! d!) (= (Add (Sub d! (EucMod x! d!)) (EucMod y! d!)) (Sub y! x!))) :pattern ((ens%main!math.lemma_mod_wrapped_len. x! y! d!)))))
(set-info :comment ";; Function-Def main::math::lemma_mod_wrapped_len")
(set-info :comment ";; src/math.rs:790:5: 790:63 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_mod_equal")
(declare-fun req%main!math.lemma_mod_equal. (Int Int Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((x! Int) (y! Int) (d! Int)) (! (= (req%main!math.lemma_mod_equal. x! y! d!) (and (=> %%global_location_label%%21 (> d! 0)) (=> %%global_location_label%%22 (<= x! y!)) (=> %%global_location_label%%23 (= (EucMod x! d!) (EucMod y! d!))) (=> %%global_location_label%%24 (< (Sub y! x!) d!)))) :pattern ((req%main!math.lemma_mod_equal. x! y! d!)))))
(declare-fun ens%main!math.lemma_mod_equal. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (d! Int)) (! (= (ens%main!math.lemma_mod_equal. x! y! d!) (= x! y!)) :pattern ((ens%main!math.lemma_mod_equal. x! y! d!)))))
(set-info :comment ";; Function-Def main::math::lemma_mod_equal")
(set-info :comment ";; src/math.rs:812:5: 812:57 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_mul_by_zero_is_zero")
(declare-fun ens%main!math.lemma_mul_by_zero_is_zero. (Int) Bool)
(assert (forall ((x! Int)) (! (= (ens%main!math.lemma_mul_by_zero_is_zero. x!) (and (= (Mul 0 x!) 0) (= (Mul x! 0) 0))) :pattern ((ens%main!math.lemma_mul_by_zero_is_zero. x!)))))
(set-info :comment ";; Function-Def main::math::lemma_mul_by_zero_is_zero")
(set-info :comment ";; src/math.rs:61:5: 61:51 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_small_div")
(declare-fun req%main!math.lemma_small_div. (Int Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((x! Int) (d! Int)) (! (= (req%main!math.lemma_small_div. x! d!) (and (=> %%global_location_label%%25 (and (<= 0 x!) (< x! d!))) (=> %%global_location_label%%26 (> d! 0)))) :pattern ((req%main!math.lemma_small_div. x! d!)))))
(declare-fun ens%main!math.lemma_small_div. (Int Int) Bool)
(assert (forall ((x! Int) (d! Int)) (! (= (ens%main!math.lemma_small_div. x! d!) (= (EucDiv x! d!) 0)) :pattern ((ens%main!math.lemma_small_div. x! d!)))))
(set-info :comment ";; Function-Specs main::math::lemma_mod_auto_basics")
(declare-fun req%main!math.lemma_mod_auto_basics. (Int Int) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((n! Int) (x! Int)) (! (= (req%main!math.lemma_mod_auto_basics. n! x!) (=> %%global_location_label%%27 (> n! 0))) :pattern ((req%main!math.lemma_mod_auto_basics. n! x!)))))
(declare-fun ens%main!math.lemma_mod_auto_basics. (Int Int) Bool)
(assert (forall ((n! Int) (x! Int)) (! (= (ens%main!math.lemma_mod_auto_basics. n! x!) (and (= (EucMod (Add x! n!) n!) (EucMod x! n!)) (= (EucMod (Sub x! n!) n!) (EucMod x! n!)) (= (EucDiv (Add x! n!) n!) (Add (EucDiv x! n!) 1)) (= (EucDiv (Sub x! n!) n!) (Sub (EucDiv x! n!) 1)) (= (and (<= 0 x!) (< x! n!)) (= (EucMod x! n!) x!)))) :pattern ((ens%main!math.lemma_mod_auto_basics. n! x!)))))
(set-info :comment ";; Function-Def main::math::lemma_mod_auto_basics")
(set-info :comment ";; src/math.rs:427:5: 427:55 (#0)")
(set-info :comment ";; Function-Specs main::math::lemma_div_relation_when_mods_have_same_order")
(declare-fun req%main!math.lemma_div_relation_when_mods_have_same_order. (Int Int Int) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((d! Int) (x! Int) (y! Int)) (! (= (req%main!math.lemma_div_relation_when_mods_have_same_order. d! x! y!) (and (=> %%global_location_label%%28 (> d! 0)) (=> %%global_location_label%%29 (< x! y!)) (=> %%global_location_label%%30 (<= (Sub y! x!) d!)) (=> %%global_location_label%%31 (< (EucMod x! d!) (EucMod y! d!))))) :pattern ((req%main!math.lemma_div_relation_when_mods_have_same_order. d! x! y!)))))
(declare-fun ens%main!math.lemma_div_relation_when_mods_have_same_order. (Int Int Int) Bool)
(assert (forall ((d! Int) (x! Int) (y! Int)) (! (= (ens%main!math.lemma_div_relation_when_mods_have_same_order. d! x! y!) (= (EucDiv y! d!) (EucDiv x! d!))) :pattern ((ens%main!math.lemma_div_relation_when_mods_have_same_order. d! x! y!)))))
(set-info :comment ";; Function-Def main::math::lemma_div_relation_when_mods_have_same_order")
(set-info :comment ";; src/math.rs:552:5: 552:86 (#0)")
(declare-const d! Int)
(declare-const x! Int)
(declare-const y! Int)
(declare-const tmp%1 Int)
(declare-const tmp%2 Int)
(declare-const tmp%3 Int)
(declare-const tmp%4 Int)
(declare-const tmp%5 Int)
(declare-const tmp%6 Bool)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Int)
(declare-const tmp%9 Int)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Int)
(declare-const tmp%12 Int)
(assert fuel_defaults)
(assert (> d! 0))
(assert (< x! y!))
(assert (<= (Sub y! x!) d!))
(assert (< (EucMod x! d!) (EucMod y! d!)))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%11 Bool)
(assert (not (and (=> %%location_label%%0 (req%main!math.lemma_fundamental_div_mod. x! d!)) (=> (ens%main!math.lemma_fundamental_div_mod. x! d!) (and (=> %%location_label%%1 (req%main!math.lemma_fundamental_div_mod. y! d!)) (=> (ens%main!math.lemma_fundamental_div_mod. y! d!) (and (=> %%location_label%%2 (req%main!math.lemma_mod_range. x! d!)) (=> (ens%main!math.lemma_mod_range. x! d!) (and (=> %%location_label%%3 (req%main!math.lemma_mod_range. y! d!)) (=> (ens%main!math.lemma_mod_range. y! d!) (=> (= tmp%1 (EucDiv y! d!)) (=> (= tmp%2 (EucDiv x! d!)) (=> (ens%main!math.lemma_mul_is_distributive_sub_other_way. d! tmp%1 tmp%2) (=> (= tmp%3 (EucDiv y! d!)) (=> (ens%main!math.lemma_mul_is_commutative. tmp%3 d!) (=> (= tmp%4 (EucDiv x! d!)) (=> (ens%main!math.lemma_mul_is_commutative. tmp%4 d!) (or (and (=> (> (EucDiv y! d!) (EucDiv x! d!)) (=> (= tmp%5 (Sub (EucDiv y! d!) (EucDiv x! d!))) (and (=> %%location_label%%4 (req%main!math.lemma_mul_inequality. 1 tmp%5 d!)) (=> (ens%main!math.lemma_mul_inequality. 1 tmp%5 d!) (=> (= tmp%6 (>= (Mul (Sub (EucDiv y! d!) (EucDiv x! d!)) d!) (Mul 1 d!))) (and (=> %%location_label%%5 tmp%6) (=> tmp%6 (=> (= tmp%7 (>= (Sub (Mul (EucDiv y! d!) d!) (Mul (EucDiv x! d!) d!)) d!)) (and (=> %%location_label%%6 tmp%7) (=> tmp%7 (=> %%location_label%%7 false))))))))))) (=> (not (> (EucDiv y! d!) (EucDiv x! d!))) %%switch_label%%1)) (and (not %%switch_label%%1) (or (and (=> (< (EucDiv y! d!) (EucDiv x! d!)) (=> (= tmp%8 (Sub (EucDiv y! d!) (EucDiv x! d!))) (=> (= tmp%9 (Sub 0 1)) (and (=> %%location_label%%8 (req%main!math.lemma_mul_inequality. tmp%8 tmp%9 d!)) (=> (ens%main!math.lemma_mul_inequality. tmp%8 tmp%9 d!) (=> (= tmp%10 (<= (Mul (Sub (EucDiv y! d!) (EucDiv x! d!)) d!) (Mul (Sub 0 1) d!))) (and (=> %%location_label%%9 tmp%10) (=> tmp%10 (=> (= tmp%11 (EucDiv y! d!)) (=> (= tmp%12 (EucDiv x! d!)) (=> (ens%main!math.lemma_mul_is_distributive_sub_other_way. d! tmp%11 tmp%12) (=> %%location_label%%10 false)))))))))))) (=> (not (< (EucDiv y! d!) (EucDiv x! d!))) %%switch_label%%0)) (and (not %%switch_label%%0) (=> %%location_label%%11 (= (EucDiv y! d!) (EucDiv x! d!))))))))))))))))))))))))
(check-sat)
(exit)
