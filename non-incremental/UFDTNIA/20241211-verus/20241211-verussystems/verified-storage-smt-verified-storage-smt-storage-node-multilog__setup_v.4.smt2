(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module multilog::setup_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.core.iter_into_iter_spec. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap_or. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%0.ghost_iter. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.exec_invariant. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_invariant. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_ensures. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_peek_next. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_advance. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%2.view. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%3.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%3.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%3.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%3.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_u8. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%5.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%5.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%5.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%5.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_u32. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_u64. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%7.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%7.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%7.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%7.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_u128. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_usize. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_vec_index_decreases. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_first. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!multilog.inv_v.log_index_trigger. FuelId)
(declare-const fuel%lib!multilog.inv_v.metadata_types_set. FuelId)
(declare-const fuel%lib!multilog.inv_v.metadata_types_set_in_first_region. FuelId)
(declare-const fuel%lib!multilog.inv_v.metadata_types_set_in_region. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE. FuelId)
(declare-const fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA. FuelId)
(declare-const fuel%lib!multilog.layout_v.MIN_LOG_AREA_SIZE. FuelId)
(declare-const fuel%lib!multilog.layout_v.MULTILOG_PROGRAM_GUID. FuelId)
(declare-const fuel%lib!multilog.layout_v.MULTILOG_PROGRAM_VERSION_NUMBER. FuelId)
(declare-const fuel%lib!multilog.layout_v.impl&%3.spec_size_of. FuelId)
(declare-const fuel%lib!multilog.layout_v.impl&%3.spec_align_of. FuelId)
(declare-const fuel%lib!multilog.layout_v.impl&%12.spec_size_of. FuelId)
(declare-const fuel%lib!multilog.layout_v.impl&%12.spec_align_of. FuelId)
(declare-const fuel%lib!multilog.layout_v.impl&%21.spec_size_of. FuelId)
(declare-const fuel%lib!multilog.layout_v.impl&%21.spec_align_of. FuelId)
(declare-const fuel%lib!multilog.layout_v.extract_global_metadata. FuelId)
(declare-const fuel%lib!multilog.layout_v.deserialize_global_metadata. FuelId)
(declare-const fuel%lib!multilog.layout_v.extract_global_crc. FuelId)
(declare-const fuel%lib!multilog.layout_v.deserialize_global_crc. FuelId)
(declare-const fuel%lib!multilog.layout_v.extract_region_metadata. FuelId)
(declare-const fuel%lib!multilog.layout_v.deserialize_region_metadata. FuelId)
(declare-const fuel%lib!multilog.layout_v.extract_region_crc. FuelId)
(declare-const fuel%lib!multilog.layout_v.deserialize_region_crc. FuelId)
(declare-const fuel%lib!multilog.layout_v.extract_log_cdb. FuelId)
(declare-const fuel%lib!multilog.layout_v.deserialize_log_cdb. FuelId)
(declare-const fuel%lib!multilog.layout_v.deserialize_and_check_log_cdb. FuelId)
(declare-const fuel%lib!multilog.layout_v.get_log_metadata_pos. FuelId)
(declare-const fuel%lib!multilog.layout_v.extract_log_metadata. FuelId)
(declare-const fuel%lib!multilog.layout_v.deserialize_log_metadata. FuelId)
(declare-const fuel%lib!multilog.layout_v.extract_log_crc. FuelId)
(declare-const fuel%lib!multilog.layout_v.deserialize_log_crc. FuelId)
(declare-const fuel%lib!multilog.layout_v.relative_log_pos_to_log_area_offset. FuelId)
(declare-const fuel%lib!multilog.layout_v.extract_log. FuelId)
(declare-const fuel%lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata. FuelId)
(declare-const fuel%lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb. FuelId)
(declare-const fuel%lib!multilog.layout_v.recover_given_cdb. FuelId)
(declare-const fuel%lib!multilog.layout_v.recover_cdb. FuelId)
(declare-const fuel%lib!multilog.layout_v.recover_all. FuelId)
(declare-const fuel%lib!multilog.multilogspec_t.impl&%0.initialize. FuelId)
(declare-const fuel%lib!multilog.multilogspec_t.impl&%1.initialize. FuelId)
(declare-const fuel%lib!multilog.setup_v.memory_correctly_set_up_on_single_region. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.CDB_FALSE. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.CDB_TRUE. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.write. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.len. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.write. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.committed. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.len. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.spec_index. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.write. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.committed. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.extract_bytes. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.axiom_bytes_len. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.axiom_to_from_bytes. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%15.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%15.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.spec_padding_needed. FuelId)
(declare-const fuel%lib!util_v.nat_seq_max. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.pmcopy_axioms. FuelId)
(assert (distinct fuel%vstd!std_specs.core.iter_into_iter_spec. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.option.spec_unwrap_or. fuel%vstd!std_specs.range.impl&%0.ghost_iter. fuel%vstd!std_specs.range.impl&%1.exec_invariant. fuel%vstd!std_specs.range.impl&%1.ghost_invariant. fuel%vstd!std_specs.range.impl&%1.ghost_ensures. fuel%vstd!std_specs.range.impl&%1.ghost_peek_next. fuel%vstd!std_specs.range.impl&%1.ghost_advance. fuel%vstd!std_specs.range.impl&%2.view. fuel%vstd!std_specs.range.impl&%3.spec_is_lt. fuel%vstd!std_specs.range.impl&%3.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%3.spec_forward_checked. fuel%vstd!std_specs.range.impl&%3.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_u8. fuel%vstd!std_specs.range.impl&%5.spec_is_lt. fuel%vstd!std_specs.range.impl&%5.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%5.spec_forward_checked. fuel%vstd!std_specs.range.impl&%5.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_u32. fuel%vstd!std_specs.range.impl&%6.spec_is_lt. fuel%vstd!std_specs.range.impl&%6.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%6.spec_forward_checked. fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_u64. fuel%vstd!std_specs.range.impl&%7.spec_is_lt. fuel%vstd!std_specs.range.impl&%7.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%7.spec_forward_checked. fuel%vstd!std_specs.range.impl&%7.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_u128. fuel%vstd!std_specs.range.impl&%8.spec_is_lt. fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%8.spec_forward_checked. fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_usize. fuel%vstd!std_specs.vec.impl&%0.spec_index. fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!std_specs.vec.axiom_vec_index_decreases. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.drop_first. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%lib!multilog.inv_v.log_index_trigger. fuel%lib!multilog.inv_v.metadata_types_set. fuel%lib!multilog.inv_v.metadata_types_set_in_first_region. fuel%lib!multilog.inv_v.metadata_types_set_in_region. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE. fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA. fuel%lib!multilog.layout_v.MIN_LOG_AREA_SIZE. fuel%lib!multilog.layout_v.MULTILOG_PROGRAM_GUID. fuel%lib!multilog.layout_v.MULTILOG_PROGRAM_VERSION_NUMBER. fuel%lib!multilog.layout_v.impl&%3.spec_size_of. fuel%lib!multilog.layout_v.impl&%3.spec_align_of. fuel%lib!multilog.layout_v.impl&%12.spec_size_of. fuel%lib!multilog.layout_v.impl&%12.spec_align_of. fuel%lib!multilog.layout_v.impl&%21.spec_size_of. fuel%lib!multilog.layout_v.impl&%21.spec_align_of. fuel%lib!multilog.layout_v.extract_global_metadata. fuel%lib!multilog.layout_v.deserialize_global_metadata. fuel%lib!multilog.layout_v.extract_global_crc. fuel%lib!multilog.layout_v.deserialize_global_crc. fuel%lib!multilog.layout_v.extract_region_metadata. fuel%lib!multilog.layout_v.deserialize_region_metadata. fuel%lib!multilog.layout_v.extract_region_crc. fuel%lib!multilog.layout_v.deserialize_region_crc. fuel%lib!multilog.layout_v.extract_log_cdb. fuel%lib!multilog.layout_v.deserialize_log_cdb. fuel%lib!multilog.layout_v.deserialize_and_check_log_cdb. fuel%lib!multilog.layout_v.get_log_metadata_pos. fuel%lib!multilog.layout_v.extract_log_metadata. fuel%lib!multilog.layout_v.deserialize_log_metadata. fuel%lib!multilog.layout_v.extract_log_crc. fuel%lib!multilog.layout_v.deserialize_log_crc. fuel%lib!multilog.layout_v.relative_log_pos_to_log_area_offset. fuel%lib!multilog.layout_v.extract_log. fuel%lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata. fuel%lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb. fuel%lib!multilog.layout_v.recover_given_cdb. fuel%lib!multilog.layout_v.recover_cdb. fuel%lib!multilog.layout_v.recover_all. fuel%lib!multilog.multilogspec_t.impl&%0.initialize. fuel%lib!multilog.multilogspec_t.impl&%1.initialize. fuel%lib!multilog.setup_v.memory_correctly_set_up_on_single_region. fuel%lib!pmem.pmemspec_t.CDB_FALSE. fuel%lib!pmem.pmemspec_t.CDB_TRUE. fuel%lib!pmem.pmemspec_t.impl&%5.write. fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. fuel%lib!pmem.pmemspec_t.impl&%5.flush. fuel%lib!pmem.pmemspec_t.impl&%6.len. fuel%lib!pmem.pmemspec_t.impl&%6.write. fuel%lib!pmem.pmemspec_t.impl&%6.flush. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%6.committed. fuel%lib!pmem.pmemspec_t.impl&%7.len. fuel%lib!pmem.pmemspec_t.impl&%7.spec_index. fuel%lib!pmem.pmemspec_t.impl&%7.write. fuel%lib!pmem.pmemspec_t.impl&%7.flush. fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range. fuel%lib!pmem.pmemspec_t.impl&%7.committed. fuel%lib!pmem.pmemspec_t.extract_bytes. fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc. fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. fuel%lib!pmem.pmcopy_t.axiom_bytes_len. fuel%lib!pmem.pmcopy_t.axiom_to_from_bytes. fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%15.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%15.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of. fuel%lib!pmem.pmcopy_t.spec_padding_needed. fuel%lib!util_v.nat_seq_max. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default. fuel%lib!pmem.pmcopy_t.pmcopy_axioms.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_u8.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_u32.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_u64.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_u128.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_usize.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_vec_index_decreases.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(assert (=> (fuel_bool_default fuel%lib!pmem.pmcopy_t.pmcopy_axioms.) (and (fuel_bool_default fuel%lib!pmem.pmcopy_t.axiom_bytes_len.) (fuel_bool_default fuel%lib!pmem.pmcopy_t.axiom_to_from_bytes.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIterator./ExecIter (Dcr Type) Type)
(declare-fun proj%%vstd!pervasive.ForLoopGhostIterator./Item (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIterator./Item (Dcr Type) Type)
(declare-fun proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter (Dcr Type) Type)
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u64./allocator_global%.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. 0)
(declare-sort vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. 0)
(declare-sort vstd!seq.Seq<vstd!seq.Seq<u8.>.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (core!ops.range.Range. 0) (vstd!std_specs.range.RangeGhostIterator. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!multilog.layout_v.GlobalMetadata. 0) (lib!multilog.layout_v.RegionMetadata. 0) (lib!multilog.layout_v.LogMetadata. 0) (lib!multilog.multilogimpl_t.MultiLogErr. 0) (lib!multilog.multilogspec_t.AbstractLogState. 0) (lib!multilog.multilogspec_t.AbstractMultiLogState. 0) (lib!pmem.pmemspec_t.PmemError. 0) (lib!pmem.pmemspec_t.PersistentMemoryByte. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionView. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView. 0) (lib!pmem.pmemspec_t.PersistentMemoryConstants. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((core!ops.range.Range./Range (core!ops.range.Range./Range/?start Poly) (core!ops.range.Range./Range/?end Poly))) ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?start Poly) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?cur Poly) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?end Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!multilog.layout_v.GlobalMetadata./GlobalMetadata (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/?version_number Int) (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/?length_of_region_metadata Int) (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/?program_guid Int))) ((lib!multilog.layout_v.RegionMetadata./RegionMetadata (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?num_logs Int) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?which_log Int) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?_padding Int) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?region_size Int) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?log_area_len Int) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?multilog_id Int))) ((lib!multilog.layout_v.LogMetadata./LogMetadata (lib!multilog.layout_v.LogMetadata./LogMetadata/?log_length Int) (lib!multilog.layout_v.LogMetadata./LogMetadata/?_padding Int) (lib!multilog.layout_v.LogMetadata./LogMetadata/?head Int))) ((lib!multilog.multilogimpl_t.MultiLogErr./CantSetupWithFewerThanOneRegion ) (lib!multilog.multilogimpl_t.MultiLogErr./CantSetupWithMoreThanU32MaxRegions ) (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/?which_log Int) (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/?required_space Int)) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/?which_log Int) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/?multilog_id_expected Int) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/?multilog_id_read Int)) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/?which_log Int) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/?region_size_expected Int) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/?region_size_read Int)) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/?which_log Int) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/?version_number Int) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/?max_supported Int)) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents/?which_log Int)) (lib!multilog.multilogimpl_t.MultiLogErr./CRCMismatch ) (lib!multilog.multilogimpl_t.MultiLogErr./InvalidLogIndex ) (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend/?available_space Int)) (lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead (lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead/?head Int)) (lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail (lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail/?tail Int)) (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead/?head Int)) (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail/?tail Int)) (lib!multilog.multilogimpl_t.MultiLogErr./PmemErr (lib!multilog.multilogimpl_t.MultiLogErr./PmemErr/?err lib!pmem.pmemspec_t.PmemError.))) ((lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/?head Int) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/?log vstd!seq.Seq<u8.>.) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/?pending vstd!seq.Seq<u8.>.) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/?capacity Int))) ((lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState (lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState/?states vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>.))) ((lib!pmem.pmemspec_t.PmemError./InvalidFileName ) (lib!pmem.pmemspec_t.PmemError./CannotOpenPmFile ) (lib!pmem.pmemspec_t.PmemError./NotPm ) (lib!pmem.pmemspec_t.PmemError./PmdkError ) (lib!pmem.pmemspec_t.PmemError./AccessOutOfRange )) ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush Int) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write core!option.Option.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/?regions vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.))) ((lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption Bool))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun core!ops.range.Range./Range/start (core!ops.range.Range.) Poly)
(declare-fun core!ops.range.Range./Range/end (core!ops.range.Range.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/version_number (lib!multilog.layout_v.GlobalMetadata.) Int)
(declare-fun lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (lib!multilog.layout_v.GlobalMetadata.) Int)
(declare-fun lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/program_guid (lib!multilog.layout_v.GlobalMetadata.) Int)
(declare-fun lib!multilog.layout_v.RegionMetadata./RegionMetadata/num_logs (lib!multilog.layout_v.RegionMetadata.) Int)
(declare-fun lib!multilog.layout_v.RegionMetadata./RegionMetadata/which_log (lib!multilog.layout_v.RegionMetadata.) Int)
(declare-fun lib!multilog.layout_v.RegionMetadata./RegionMetadata/_padding (lib!multilog.layout_v.RegionMetadata.) Int)
(declare-fun lib!multilog.layout_v.RegionMetadata./RegionMetadata/region_size (lib!multilog.layout_v.RegionMetadata.) Int)
(declare-fun lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len (lib!multilog.layout_v.RegionMetadata.) Int)
(declare-fun lib!multilog.layout_v.RegionMetadata./RegionMetadata/multilog_id (lib!multilog.layout_v.RegionMetadata.) Int)
(declare-fun lib!multilog.layout_v.LogMetadata./LogMetadata/log_length (lib!multilog.layout_v.LogMetadata.) Int)
(declare-fun lib!multilog.layout_v.LogMetadata./LogMetadata/_padding (lib!multilog.layout_v.LogMetadata.) Int)
(declare-fun lib!multilog.layout_v.LogMetadata./LogMetadata/head (lib!multilog.layout_v.LogMetadata.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/which_log (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/required_space (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/which_log (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_expected (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_read (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/which_log (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_read (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/which_log (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents/which_log (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend/available_space (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead/head (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail/tail (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead/head (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail/tail (lib!multilog.multilogimpl_t.MultiLogErr.) Int)
(declare-fun lib!multilog.multilogimpl_t.MultiLogErr./PmemErr/err (lib!multilog.multilogimpl_t.MultiLogErr.) lib!pmem.pmemspec_t.PmemError.)
(declare-fun lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/head (lib!multilog.multilogspec_t.AbstractLogState.) Int)
(declare-fun lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/log (lib!multilog.multilogspec_t.AbstractLogState.) vstd!seq.Seq<u8.>.)
(declare-fun lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/pending (lib!multilog.multilogspec_t.AbstractLogState.) vstd!seq.Seq<u8.>.)
(declare-fun lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/capacity (lib!multilog.multilogspec_t.AbstractLogState.) Int)
(declare-fun lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState/states (lib!multilog.multilogspec_t.AbstractMultiLogState.) vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (lib!pmem.pmemspec_t.PersistentMemoryByte.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (lib!pmem.pmemspec_t.PersistentMemoryByte.) core!option.Option.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (lib!pmem.pmemspec_t.PersistentMemoryConstants.) Bool)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!ops.range.Range. (Dcr Type) Type)
(declare-fun TYPE%vstd!std_specs.range.RangeGhostIterator. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!multilog.layout_v.GlobalMetadata. Type)
(declare-const TYPE%lib!multilog.layout_v.RegionMetadata. Type)
(declare-const TYPE%lib!multilog.layout_v.LogMetadata. Type)
(declare-const TYPE%lib!multilog.multilogimpl_t.MultiLogErr. Type)
(declare-const TYPE%lib!multilog.multilogspec_t.AbstractLogState. Type)
(declare-const TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PmemError. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u64./allocator_global%.>. (alloc!vec.Vec<u64./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u64./allocator_global%.>. (Poly) alloc!vec.Vec<u64./allocator_global%.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. (vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. (Poly) vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. (vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. (Poly) vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (vstd!seq.Seq<vstd!seq.Seq<u8.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (Poly) vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%core!ops.range.Range. (core!ops.range.Range.) Poly)
(declare-fun %Poly%core!ops.range.Range. (Poly) core!ops.range.Range.)
(declare-fun Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun %Poly%vstd!std_specs.range.RangeGhostIterator. (Poly) vstd!std_specs.range.RangeGhostIterator.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!multilog.layout_v.GlobalMetadata. (lib!multilog.layout_v.GlobalMetadata.) Poly)
(declare-fun %Poly%lib!multilog.layout_v.GlobalMetadata. (Poly) lib!multilog.layout_v.GlobalMetadata.)
(declare-fun Poly%lib!multilog.layout_v.RegionMetadata. (lib!multilog.layout_v.RegionMetadata.) Poly)
(declare-fun %Poly%lib!multilog.layout_v.RegionMetadata. (Poly) lib!multilog.layout_v.RegionMetadata.)
(declare-fun Poly%lib!multilog.layout_v.LogMetadata. (lib!multilog.layout_v.LogMetadata.) Poly)
(declare-fun %Poly%lib!multilog.layout_v.LogMetadata. (Poly) lib!multilog.layout_v.LogMetadata.)
(declare-fun Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr.) Poly)
(declare-fun %Poly%lib!multilog.multilogimpl_t.MultiLogErr. (Poly) lib!multilog.multilogimpl_t.MultiLogErr.)
(declare-fun Poly%lib!multilog.multilogspec_t.AbstractLogState. (lib!multilog.multilogspec_t.AbstractLogState.) Poly)
(declare-fun %Poly%lib!multilog.multilogspec_t.AbstractLogState. (Poly) lib!multilog.multilogspec_t.AbstractLogState.)
(declare-fun Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. (lib!multilog.multilogspec_t.AbstractMultiLogState.) Poly)
(declare-fun %Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. (Poly) lib!multilog.multilogspec_t.AbstractMultiLogState.)
(declare-fun Poly%lib!pmem.pmemspec_t.PmemError. (lib!pmem.pmemspec_t.PmemError.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PmemError. (Poly) lib!pmem.pmemspec_t.PmemError.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryConstants.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly) lib!pmem.pmemspec_t.PersistentMemoryConstants.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x alloc!vec.Vec<u64./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u64./allocator_global%.>. (Poly%alloc!vec.Vec<u64./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u64./allocator_global%.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u64./allocator_global%.>. (%Poly%alloc!vec.Vec<u64./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL))))))
(assert (forall ((x alloc!vec.Vec<u64./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u64./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u64./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.))) (= x (Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. (%Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.)))))))
(assert (forall ((x vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. (Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.)) (= x (Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. (%Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.))))))
(assert (forall ((x vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.))))))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))))))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))))))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.))))))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= x (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x core!ops.range.Range.)) (! (= x (%Poly%core!ops.range.Range. (Poly%core!ops.range.Range. x))) :pattern ((Poly%core!ops.range.Range. x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (= x (Poly%core!ops.range.Range. (%Poly%core!ops.range.Range. x)))) :pattern ((has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (_start! Poly) (_end! Poly)) (! (=> (and (has_type _start! Idx&) (has_type _end! Idx&)) (has_type (Poly%core!ops.range.Range. (core!ops.range.Range./Range _start! _end!)) (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((has_type (Poly%core!ops.range.Range. (core!ops.range.Range./Range _start! _end!)) (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((x core!ops.range.Range.)) (! (= (core!ops.range.Range./Range/start x) (core!ops.range.Range./Range/?start x)) :pattern ((core!ops.range.Range./Range/start x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (has_type (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. x)) Idx&)) :pattern ((core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. x)) (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((x core!ops.range.Range.)) (! (= (core!ops.range.Range./Range/end x) (core!ops.range.Range./Range/?end x)) :pattern ((core!ops.range.Range./Range/end x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (has_type (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. x)) Idx&)) :pattern ((core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. x)) (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(define-fun is-core!ops.range.Range./Range_ ((c core!ops.range.Range.)) Bool ((_ is core!ops.range.Range./Range) c))
(assert (forall ((x core!ops.range.Range.)) (! (=> (is-core!ops.range.Range./Range_ x) (height_lt (height (core!ops.range.Range./Range/start x)) (height (Poly%core!ops.range.Range. x)))) :pattern ((height (core!ops.range.Range./Range/start x))))))
(assert (forall ((x core!ops.range.Range.)) (! (=> (is-core!ops.range.Range./Range_ x) (height_lt (height (core!ops.range.Range./Range/end x)) (height (Poly%core!ops.range.Range. x)))) :pattern ((height (core!ops.range.Range./Range/end x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= x (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. x))) :pattern ((Poly%vstd!std_specs.range.RangeGhostIterator. x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (= x (Poly%vstd!std_specs.range.RangeGhostIterator. (%Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type) (_start! Poly) (_cur! Poly) (_end! Poly)) (! (=> (and (has_type _start! A&) (has_type _cur! A&) (has_type _end! A&)) (has_type (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator _start! _cur! _end!)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((has_type (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator _start! _cur! _end!)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?start x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?cur x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?end x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(define-fun is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ ((c vstd!std_specs.range.RangeGhostIterator.)) Bool ((_ is vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator) c))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!multilog.layout_v.GlobalMetadata.)) (! (= x (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. x))) :pattern ((Poly%lib!multilog.layout_v.GlobalMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.GlobalMetadata.) (= x (Poly%lib!multilog.layout_v.GlobalMetadata. (%Poly%lib!multilog.layout_v.GlobalMetadata. x)))) :pattern ((has_type x TYPE%lib!multilog.layout_v.GlobalMetadata.)))))
(assert (forall ((_version_number! Int) (_length_of_region_metadata! Int) (_program_guid! Int)) (! (=> (and (uInv 64 _version_number!) (uInv 64 _length_of_region_metadata!) (uInv 128 _program_guid!)) (has_type (Poly%lib!multilog.layout_v.GlobalMetadata. (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata _version_number! _length_of_region_metadata! _program_guid!)) TYPE%lib!multilog.layout_v.GlobalMetadata.)) :pattern ((has_type (Poly%lib!multilog.layout_v.GlobalMetadata. (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata _version_number! _length_of_region_metadata! _program_guid!)) TYPE%lib!multilog.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.GlobalMetadata.)) (! (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/version_number x) (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/?version_number x)) :pattern ((lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/version_number x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.GlobalMetadata.) (uInv 64 (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!multilog.layout_v.GlobalMetadata. x)))) :pattern ((lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!multilog.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.GlobalMetadata.)) (! (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata x) (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/?length_of_region_metadata x)) :pattern ((lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.GlobalMetadata.) (uInv 64 (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!multilog.layout_v.GlobalMetadata. x)))) :pattern ((lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!multilog.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.GlobalMetadata.)) (! (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/program_guid x) (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/?program_guid x)) :pattern ((lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/program_guid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.GlobalMetadata.) (uInv 128 (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!multilog.layout_v.GlobalMetadata. x)))) :pattern ((lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!multilog.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.GlobalMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.RegionMetadata.)) (! (= x (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. x))) :pattern ((Poly%lib!multilog.layout_v.RegionMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.) (= x (Poly%lib!multilog.layout_v.RegionMetadata. (%Poly%lib!multilog.layout_v.RegionMetadata. x)))) :pattern ((has_type x TYPE%lib!multilog.layout_v.RegionMetadata.)))))
(assert (forall ((_num_logs! Int) (_which_log! Int) (__padding! Int) (_region_size! Int) (_log_area_len! Int) (_multilog_id! Int)) (! (=> (and (uInv 32 _num_logs!) (uInv 32 _which_log!) (uInv 64 __padding!) (uInv 64 _region_size!) (uInv 64 _log_area_len!) (uInv 128 _multilog_id!)) (has_type (Poly%lib!multilog.layout_v.RegionMetadata. (lib!multilog.layout_v.RegionMetadata./RegionMetadata _num_logs! _which_log! __padding! _region_size! _log_area_len! _multilog_id!)) TYPE%lib!multilog.layout_v.RegionMetadata.)) :pattern ((has_type (Poly%lib!multilog.layout_v.RegionMetadata. (lib!multilog.layout_v.RegionMetadata./RegionMetadata _num_logs! _which_log! __padding! _region_size! _log_area_len! _multilog_id!)) TYPE%lib!multilog.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.RegionMetadata.)) (! (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/num_logs x) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?num_logs x)) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/num_logs x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.) (uInv 32 (lib!multilog.layout_v.RegionMetadata./RegionMetadata/num_logs (%Poly%lib!multilog.layout_v.RegionMetadata. x)))) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/num_logs (%Poly%lib!multilog.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.RegionMetadata.)) (! (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/which_log x) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?which_log x)) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/which_log x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.) (uInv 32 (lib!multilog.layout_v.RegionMetadata./RegionMetadata/which_log (%Poly%lib!multilog.layout_v.RegionMetadata. x)))) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/which_log (%Poly%lib!multilog.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.RegionMetadata.)) (! (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/_padding x) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?_padding x)) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/_padding x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.) (uInv 64 (lib!multilog.layout_v.RegionMetadata./RegionMetadata/_padding (%Poly%lib!multilog.layout_v.RegionMetadata. x)))) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/_padding (%Poly%lib!multilog.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.RegionMetadata.)) (! (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/region_size x) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?region_size x)) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/region_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.) (uInv 64 (lib!multilog.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!multilog.layout_v.RegionMetadata. x)))) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!multilog.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.RegionMetadata.)) (! (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len x) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?log_area_len x)) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.) (uInv 64 (lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!multilog.layout_v.RegionMetadata. x)))) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!multilog.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.RegionMetadata.)) (! (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/multilog_id x) (lib!multilog.layout_v.RegionMetadata./RegionMetadata/?multilog_id x)) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/multilog_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.) (uInv 128 (lib!multilog.layout_v.RegionMetadata./RegionMetadata/multilog_id (%Poly%lib!multilog.layout_v.RegionMetadata. x)))) :pattern ((lib!multilog.layout_v.RegionMetadata./RegionMetadata/multilog_id (%Poly%lib!multilog.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.RegionMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.LogMetadata.)) (! (= x (%Poly%lib!multilog.layout_v.LogMetadata. (Poly%lib!multilog.layout_v.LogMetadata. x))) :pattern ((Poly%lib!multilog.layout_v.LogMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.LogMetadata.) (= x (Poly%lib!multilog.layout_v.LogMetadata. (%Poly%lib!multilog.layout_v.LogMetadata. x)))) :pattern ((has_type x TYPE%lib!multilog.layout_v.LogMetadata.)))))
(assert (forall ((_log_length! Int) (__padding! Int) (_head! Int)) (! (=> (and (uInv 64 _log_length!) (uInv 64 __padding!) (uInv 128 _head!)) (has_type (Poly%lib!multilog.layout_v.LogMetadata. (lib!multilog.layout_v.LogMetadata./LogMetadata _log_length! __padding! _head!)) TYPE%lib!multilog.layout_v.LogMetadata.)) :pattern ((has_type (Poly%lib!multilog.layout_v.LogMetadata. (lib!multilog.layout_v.LogMetadata./LogMetadata _log_length! __padding! _head!)) TYPE%lib!multilog.layout_v.LogMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.LogMetadata.)) (! (= (lib!multilog.layout_v.LogMetadata./LogMetadata/log_length x) (lib!multilog.layout_v.LogMetadata./LogMetadata/?log_length x)) :pattern ((lib!multilog.layout_v.LogMetadata./LogMetadata/log_length x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.LogMetadata.) (uInv 64 (lib!multilog.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!multilog.layout_v.LogMetadata. x)))) :pattern ((lib!multilog.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!multilog.layout_v.LogMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.LogMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.LogMetadata.)) (! (= (lib!multilog.layout_v.LogMetadata./LogMetadata/_padding x) (lib!multilog.layout_v.LogMetadata./LogMetadata/?_padding x)) :pattern ((lib!multilog.layout_v.LogMetadata./LogMetadata/_padding x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.LogMetadata.) (uInv 64 (lib!multilog.layout_v.LogMetadata./LogMetadata/_padding (%Poly%lib!multilog.layout_v.LogMetadata. x)))) :pattern ((lib!multilog.layout_v.LogMetadata./LogMetadata/_padding (%Poly%lib!multilog.layout_v.LogMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.LogMetadata.)))))
(assert (forall ((x lib!multilog.layout_v.LogMetadata.)) (! (= (lib!multilog.layout_v.LogMetadata./LogMetadata/head x) (lib!multilog.layout_v.LogMetadata./LogMetadata/?head x)) :pattern ((lib!multilog.layout_v.LogMetadata./LogMetadata/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.layout_v.LogMetadata.) (uInv 128 (lib!multilog.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!multilog.layout_v.LogMetadata. x)))) :pattern ((lib!multilog.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!multilog.layout_v.LogMetadata. x)) (has_type x TYPE%lib!multilog.layout_v.LogMetadata.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= x (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. (Poly%lib!multilog.multilogimpl_t.MultiLogErr. x))) :pattern ((Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (= x (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. lib!multilog.multilogimpl_t.MultiLogErr./CantSetupWithFewerThanOneRegion) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.))
(assert (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. lib!multilog.multilogimpl_t.MultiLogErr./CantSetupWithMoreThanU32MaxRegions) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.))
(assert (forall ((_which_log! Int) (_required_space! Int)) (! (=> (and (uInv 32 _which_log!) (uInv 64 _required_space!)) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup _which_log! _required_space!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup _which_log! _required_space!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/which_log x) (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/?which_log x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/which_log x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 32 (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/required_space x) (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/?required_space x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/required_space x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 64 (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/required_space (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/required_space (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_which_log! Int) (_multilog_id_expected! Int) (_multilog_id_read! Int)) (! (=> (and (uInv 32 _which_log!) (uInv 128 _multilog_id_expected!) (uInv 128 _multilog_id_read!)) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch _which_log! _multilog_id_expected! _multilog_id_read!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch _which_log! _multilog_id_expected! _multilog_id_read!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/which_log x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/?which_log x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/which_log x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 32 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_expected x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/?multilog_id_expected x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_expected x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 128 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_expected (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_expected (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_read x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/?multilog_id_read x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_read x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 128 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_read (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToMultilogIDMismatch/multilog_id_read (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_which_log! Int) (_region_size_expected! Int) (_region_size_read! Int)) (! (=> (and (uInv 32 _which_log!) (uInv 64 _region_size_expected!) (uInv 64 _region_size_read!)) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch _which_log! _region_size_expected! _region_size_read!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch _which_log! _region_size_expected! _region_size_read!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/which_log x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/?which_log x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/which_log x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 32 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_expected x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/?region_size_expected x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_expected x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 64 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_expected (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_read x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/?region_size_read x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_read x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 64 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToRegionSizeMismatch/region_size_read (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_which_log! Int) (_version_number! Int) (_max_supported! Int)) (! (=> (and (uInv 32 _which_log!) (uInv 64 _version_number!) (uInv 64 _max_supported!)) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported _which_log! _version_number! _max_supported!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported _which_log! _version_number! _max_supported!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/which_log x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/?which_log x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/which_log x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 32 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/?version_number x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 64 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/version_number (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/?max_supported x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 64 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToProgramVersionNumberUnsupported/max_supported (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_which_log! Int)) (! (=> (uInv 32 _which_log!) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents _which_log!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents _which_log!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents/which_log x) (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents/?which_log x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents/which_log x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 32 (lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./StartFailedDueToInvalidMemoryContents/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. lib!multilog.multilogimpl_t.MultiLogErr./CRCMismatch) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.))
(assert (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. lib!multilog.multilogimpl_t.MultiLogErr./InvalidLogIndex) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.))
(assert (forall ((_available_space! Int)) (! (=> (uInv 64 _available_space!) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend _available_space!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend _available_space!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend/available_space x) (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend/?available_space x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend/available_space x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 64 (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend/available_space (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForAppend/available_space (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_head! Int)) (! (=> (uInv 128 _head!) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead _head!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead _head!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead/head x) (lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead/?head x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 128 (lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead/head (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./CantReadBeforeHead/head (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_tail! Int)) (! (=> (uInv 128 _tail!) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail _tail!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail _tail!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail/tail x) (lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail/?tail x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 128 (lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail/tail (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./CantReadPastTail/tail (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_head! Int)) (! (=> (uInv 128 _head!) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead _head!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead _head!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead/head x) (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead/?head x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead/head x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 128 (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead/head (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeforeHead/head (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_tail! Int)) (! (=> (uInv 128 _tail!) (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail _tail!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail _tail!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail/tail x) (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail/?tail x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail/tail x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) (uInv 128 (lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail/tail (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)))) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./CantAdvanceHeadPositionBeyondTail/tail (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. x)) (has_type x TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((_err! lib!pmem.pmemspec_t.PmemError.)) (! (has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./PmemErr _err!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.) :pattern ((has_type (Poly%lib!multilog.multilogimpl_t.MultiLogErr. (lib!multilog.multilogimpl_t.MultiLogErr./PmemErr _err!)) TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)))))
(assert (forall ((x lib!multilog.multilogimpl_t.MultiLogErr.)) (! (= (lib!multilog.multilogimpl_t.MultiLogErr./PmemErr/err x) (lib!multilog.multilogimpl_t.MultiLogErr./PmemErr/?err x)) :pattern ((lib!multilog.multilogimpl_t.MultiLogErr./PmemErr/err x)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractLogState.)) (! (= x (%Poly%lib!multilog.multilogspec_t.AbstractLogState. (Poly%lib!multilog.multilogspec_t.AbstractLogState. x))) :pattern ((Poly%lib!multilog.multilogspec_t.AbstractLogState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogspec_t.AbstractLogState.) (= x (Poly%lib!multilog.multilogspec_t.AbstractLogState. (%Poly%lib!multilog.multilogspec_t.AbstractLogState. x)))) :pattern ((has_type x TYPE%lib!multilog.multilogspec_t.AbstractLogState.)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractLogState.)) (! (= (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/head x) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/?head x)) :pattern ((lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/head x)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractLogState.)) (! (= (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/log x) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/?log x)) :pattern ((lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/log x)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractLogState.)) (! (= (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/pending x) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/?pending x)) :pattern ((lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/pending x)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractLogState.)) (! (= (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/capacity x) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/?capacity x)) :pattern ((lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/capacity x)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractLogState.)) (! (has_type (Poly%lib!multilog.multilogspec_t.AbstractLogState. x) TYPE%lib!multilog.multilogspec_t.AbstractLogState.) :pattern ((has_type (Poly%lib!multilog.multilogspec_t.AbstractLogState. x) TYPE%lib!multilog.multilogspec_t.AbstractLogState.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!multilog.multilogspec_t.AbstractLogState.) (has_type y TYPE%lib!multilog.multilogspec_t.AbstractLogState.) (= (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!multilog.multilogspec_t.AbstractLogState. x)) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!multilog.multilogspec_t.AbstractLogState. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!multilog.multilogspec_t.AbstractLogState. x))) (Poly%vstd!seq.Seq<u8.>. (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!multilog.multilogspec_t.AbstractLogState. y)))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!multilog.multilogspec_t.AbstractLogState. x))) (Poly%vstd!seq.Seq<u8.>. (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!multilog.multilogspec_t.AbstractLogState. y)))) (= (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!multilog.multilogspec_t.AbstractLogState. x)) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!multilog.multilogspec_t.AbstractLogState. y)))) (ext_eq deep TYPE%lib!multilog.multilogspec_t.AbstractLogState. x y)) :pattern ((ext_eq deep TYPE%lib!multilog.multilogspec_t.AbstractLogState. x y)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractMultiLogState.)) (! (= x (%Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. (Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. x))) :pattern ((Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState.) (= x (Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. (%Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. x)))) :pattern ((has_type x TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState.)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractMultiLogState.)) (! (= (lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState/states x) (lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState/?states x)) :pattern ((lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState/states x)))))
(assert (forall ((x lib!multilog.multilogspec_t.AbstractMultiLogState.)) (! (has_type (Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. x) TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState.) :pattern ((has_type (Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. x) TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState.) (has_type y TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.) (Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. (lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState/states (%Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. x))) (Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. (lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState/states (%Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. y))))) (ext_eq deep TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState. x y)) :pattern ((ext_eq deep TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PmemError.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PmemError. (Poly%lib!pmem.pmemspec_t.PmemError. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PmemError. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PmemError.) (= x (Poly%lib!pmem.pmemspec_t.PmemError. (%Poly%lib!pmem.pmemspec_t.PmemError. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PmemError.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PmemError.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PmemError. x) TYPE%lib!pmem.pmemspec_t.PmemError.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PmemError. x) TYPE%lib!pmem.pmemspec_t.PmemError.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((_state_at_last_flush! Int) (_outstanding_write! core!option.Option.)) (! (=> (and (uInv 8 _state_at_last_flush!) (has_type (Poly%core!option.Option. _outstanding_write!) (TYPE%core!option.Option. $ (UINT 8)))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (TYPE%core!option.Option. $ (UINT 8)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))) (ext_eq deep (TYPE%core!option.Option. $ (UINT 8)) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions x) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/?regions x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions x)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)))))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x y)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x) (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x)))))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%2 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%2 Fn i) T)) :pattern ((has_type (%%apply%%2 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%2 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%2 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!pervasive.ForLoopGhostIterator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!iter.traits.iterator.Iterator. (Dcr Type) Bool)
(declare-fun tr_bound%core!iter.range.Step. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.range.StepSpec. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopy. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.SpecPmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSafe. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIterator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) :pattern ((tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!iter.traits.iterator.Iterator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!iter.range.Step. Self%&. Self%&) (and (tr_bound%core!clone.Clone. Self%&. Self%&) (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Self%&. Self%&))) :pattern ((tr_bound%core!iter.range.Step. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!std_specs.range.StepSpec. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&) (and (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT 128)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 128)) (UINT 128)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&)) $) :pattern ((proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) :pattern ((proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) $) :pattern ((proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (TYPE%core!ops.range.Range. A&. A&)) :pattern ((proj%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) A&.) :pattern ((proj%%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) A&) :pattern ((proj%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((proj%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegions::view")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegions::inv")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.inv%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegions::constants")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.constants%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::len")
(declare-fun lib!pmem.pmemspec_t.impl&%7.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::len")
(declare-fun lib!pmem.pmemspec_t.impl&%6.len.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::spec_index")
(declare-fun lib!pmem.pmemspec_t.impl&%7.spec_index.? (Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::SpecPmSized::spec_size_of")
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::SpecPmSized::spec_align_of")
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_align_of%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes_in_range")
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::no_outstanding_writes_in_range")
(declare-fun lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::spec_to_bytes")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::spec_from_bytes")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::bytes_parseable")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::spec_crc")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_crc%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::committed")
(declare-fun lib!pmem.pmemspec_t.impl&%6.committed.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::write")
(declare-fun lib!pmem.pmemspec_t.impl&%5.write.? (Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::write")
(declare-fun lib!pmem.pmemspec_t.impl&%6.write.? (Poly Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::write")
(declare-fun lib!pmem.pmemspec_t.impl&%7.write.? (Poly Poly Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::flush_byte")
(declare-fun lib!pmem.pmemspec_t.impl&%5.flush_byte.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::flush")
(declare-fun lib!pmem.pmemspec_t.impl&%5.flush.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::flush")
(declare-fun lib!pmem.pmemspec_t.impl&%6.flush.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::flush")
(declare-fun lib!pmem.pmemspec_t.impl&%7.flush.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap_or")
(declare-fun vstd!std_specs.option.spec_unwrap_or.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_is_lt")
(declare-fun vstd!std_specs.range.StepSpec.spec_is_lt.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_is_lt%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_steps_between_int")
(declare-fun vstd!std_specs.range.StepSpec.spec_steps_between_int.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_steps_between_int%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_forward_checked")
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_forward_checked_int")
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked_int.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked_int%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::spec_range_next")
(declare-fun vstd!std_specs.range.spec_range_next.? (Dcr Type Poly) tuple%2.)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::exec_invariant")
(declare-fun vstd!pervasive.ForLoopGhostIterator.exec_invariant.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.exec_invariant%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_invariant")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_invariant%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_ensures")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_ensures%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_peek_next")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_peek_next%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_advance")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_advance.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_advance%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIteratorNew::ghost_iter")
(declare-fun vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::drop_first")
(declare-fun vstd!seq_lib.impl&%0.drop_first.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes")
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::no_outstanding_writes")
(declare-fun lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::spec_crc_u64")
(declare-fun lib!pmem.pmemspec_t.spec_crc_u64.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::CDB_FALSE")
(declare-fun lib!pmem.pmemspec_t.CDB_FALSE.? () Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::CDB_TRUE")
(declare-fun lib!pmem.pmemspec_t.CDB_TRUE.? () Int)
(set-info :comment ";; Function-Decl vstd::std_specs::core::iter_into_iter_spec")
(declare-fun vstd!std_specs.core.iter_into_iter_spec.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::spec_padding_needed")
(declare-fun lib!pmem.pmcopy_t.spec_padding_needed.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::extract_bytes")
(declare-fun lib!pmem.pmemspec_t.extract_bytes.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::util_v::nat_seq_max")
(declare-fun lib!util_v.nat_seq_max.? (Poly) Int)
(declare-fun lib!util_v.rec%nat_seq_max.? (Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::multilog::inv_v::log_index_trigger")
(declare-fun lib!multilog.inv_v.log_index_trigger.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_GLOBAL_METADATA")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_AREA")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_CDB")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::extract_log_cdb")
(declare-fun lib!multilog.layout_v.extract_log_cdb.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::deserialize_log_cdb")
(declare-fun lib!multilog.layout_v.deserialize_log_cdb.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::deserialize_and_check_log_cdb")
(declare-fun lib!multilog.layout_v.deserialize_and_check_log_cdb.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::extract_global_metadata")
(declare-fun lib!multilog.layout_v.extract_global_metadata.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::deserialize_global_metadata")
(declare-fun lib!multilog.layout_v.deserialize_global_metadata.? (Poly) lib!multilog.layout_v.GlobalMetadata.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_GLOBAL_CRC")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::extract_global_crc")
(declare-fun lib!multilog.layout_v.extract_global_crc.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::deserialize_global_crc")
(declare-fun lib!multilog.layout_v.deserialize_global_crc.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_REGION_METADATA")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::extract_region_metadata")
(declare-fun lib!multilog.layout_v.extract_region_metadata.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::deserialize_region_metadata")
(declare-fun lib!multilog.layout_v.deserialize_region_metadata.? (Poly) lib!multilog.layout_v.RegionMetadata.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_REGION_CRC")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::extract_region_crc")
(declare-fun lib!multilog.layout_v.extract_region_crc.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::deserialize_region_crc")
(declare-fun lib!multilog.layout_v.deserialize_region_crc.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::get_log_metadata_pos")
(declare-fun lib!multilog.layout_v.get_log_metadata_pos.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::extract_log_metadata")
(declare-fun lib!multilog.layout_v.extract_log_metadata.? (Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::deserialize_log_metadata")
(declare-fun lib!multilog.layout_v.deserialize_log_metadata.? (Poly Poly) lib!multilog.layout_v.LogMetadata.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE")
(declare-fun lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::extract_log_crc")
(declare-fun lib!multilog.layout_v.extract_log_crc.? (Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::deserialize_log_crc")
(declare-fun lib!multilog.layout_v.deserialize_log_crc.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::MULTILOG_PROGRAM_GUID")
(declare-fun lib!multilog.layout_v.MULTILOG_PROGRAM_GUID.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::MULTILOG_PROGRAM_VERSION_NUMBER")
(declare-fun lib!multilog.layout_v.MULTILOG_PROGRAM_VERSION_NUMBER.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::MIN_LOG_AREA_SIZE")
(declare-fun lib!multilog.layout_v.MIN_LOG_AREA_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::relative_log_pos_to_log_area_offset")
(declare-fun lib!multilog.layout_v.relative_log_pos_to_log_area_offset.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::multilog::inv_v::metadata_types_set_in_first_region")
(declare-fun lib!multilog.inv_v.metadata_types_set_in_first_region.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::multilog::inv_v::metadata_types_set_in_region")
(declare-fun lib!multilog.inv_v.metadata_types_set_in_region.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::multilog::inv_v::metadata_types_set")
(declare-fun lib!multilog.inv_v.metadata_types_set.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::extract_log")
(declare-fun lib!multilog.layout_v.extract_log.? (Poly Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::recover_abstract_log_from_region_given_metadata")
(declare-fun lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::recover_abstract_log_from_region_given_cdb")
(declare-fun lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb.? (Poly Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::recover_given_cdb")
(declare-fun lib!multilog.layout_v.recover_given_cdb.? (Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::recover_cdb")
(declare-fun lib!multilog.layout_v.recover_cdb.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::multilog::layout_v::recover_all")
(declare-fun lib!multilog.layout_v.recover_all.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::committed")
(declare-fun lib!pmem.pmemspec_t.impl&%7.committed.? (Poly) vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::multilog::multilogspec_t::AbstractLogState::initialize")
(declare-fun lib!multilog.multilogspec_t.impl&%0.initialize.? (Poly) lib!multilog.multilogspec_t.AbstractLogState.)
(set-info :comment ";; Function-Decl lib::multilog::multilogspec_t::AbstractMultiLogState::initialize")
(declare-fun lib!multilog.multilogspec_t.impl&%1.initialize.? (Poly) lib!multilog.multilogspec_t.AbstractMultiLogState.)
(set-info :comment ";; Function-Decl lib::multilog::setup_v::memory_correctly_set_up_on_single_region")
(declare-fun lib!multilog.setup_v.memory_correctly_set_up_on_single_region.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegions::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegions::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!) BOOL)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegions::constants")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::len")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.len.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.len.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.len.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (<= 0 (lib!pmem.pmemspec_t.impl&%7.len.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%7.len.? self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::len")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.len.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.len.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (<= 0 (lib!pmem.pmemspec_t.impl&%6.len.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::spec_index")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.spec_index.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.spec_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i!) (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))) i!))) :pattern ((lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::SpecPmSized::spec_size_of")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::SpecPmSized::spec_align_of")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes_in_range")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.) (forall ((self! Poly) (i! Poly) (j! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (<= (%I i!) (%I k$)) (< (%I k$) (%I j!))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$)))))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::no_outstanding_writes_in_range")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.) (forall ((self! Poly) (index! Poly) (start! Poly) (end! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? self! index! start! end!) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? self! index!)) start! end!)) :pattern ((lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? self! index! start! end!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::spec_to_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::spec_from_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!) Self%&)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::bytes_parseable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!) BOOL)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::spec_crc")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? Self%&. Self%& self!) (UINT 64))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%0::T::bytes_parseable")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.) (forall ((T&. Dcr) (T& Type) (bytes! Poly)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (= (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!) (B (= (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? T&. T& (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? T&. T& bytes!)) bytes!)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%0 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::committed")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.committed.))
(declare-fun %%lambda%%1 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%1 _addr$ b$) (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. b$)))) :pattern ((%%apply%%1 %%lambda%%1 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.committed.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.committed.? self!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ (UINT 8) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%1))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.committed.? self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::write")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.write.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.write.) (forall ((self! Poly) (byte! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.write.? self! byte!) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (%I (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some byte!))))) :pattern ((lib!pmem.pmemspec_t.impl&%5.write.? self! byte!))))))
(assert (forall ((self! Poly) (byte! Poly)) (! (=> (and (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type byte! (UINT 8))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.write.? self! byte!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((lib!pmem.pmemspec_t.impl&%5.write.? self! byte!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::write")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.write.))
(declare-fun %%lambda%%2 (Int Int Int Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (pos$ Poly) (pre_byte$ Poly)) (! (= (%%apply%%1 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pos$ pre_byte$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (ite (and (<= %%hole%%0 (%I pos$)) (< (%I pos$) %%hole%%1)) (lib!pmem.pmemspec_t.impl&%5.write.? pre_byte$ (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 (I (Sub (%I pos$) %%hole%%2)))) (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pre_byte$)))) :pattern ((%%apply%%1 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pos$ pre_byte$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.write.) (forall ((self! Poly) (addr! Poly) (bytes! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.write.? self! addr! bytes!) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun (%%lambda%%2 (%I addr!) (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) bytes!)) (%I addr!) $ (UINT 8) bytes!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.write.? self! addr! bytes!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::write")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.write.))
(declare-fun %%lambda%%3 (Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (pos$ Poly) (pre_view$ Poly)) (! (= (%%apply%%1 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) pos$ pre_view$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (ite (= pos$ %%hole%%0) (lib!pmem.pmemspec_t.impl&%6.write.? pre_view$ %%hole%%1 %%hole%%2) (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pre_view$)))) :pattern ((%%apply%%1 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) pos$ pre_view$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.write.) (forall ((self! Poly) (index! Poly) (addr! Poly) (bytes! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.write.? self! index! addr! bytes!) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))) (Poly%fun%2. (mk_fun (%%lambda%%3 index! addr! bytes!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.write.? self! index! addr! bytes!))))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::serialize_and_write")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (pre%self! Poly) (index! Poly) (addr! Poly) (to_write! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. Self%&. Self%& S&. S& pre%self! index! addr! to_write!) (and (=> %%global_location_label%%5 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& pre%self!))) (=> %%global_location_label%%6 (< (%I index!) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!)))) (=> %%global_location_label%%7 (<= (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index!))))) (=> %%global_location_label%%8 (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index! addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. Self%&. Self%& S&. S& pre%self! index! addr! to_write!)))))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. (Dcr Type Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (pre%self! Poly) (self! Poly) (index! Poly) (addr! Poly) (to_write! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. Self%&. Self%& S&. S& pre%self! self! index! addr! to_write!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%7.write.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index! addr! (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& to_write!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. Self%&. Self%& S&. S& pre%self! self! index! addr! to_write!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::flush_byte")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!) (let ((tmp%%$ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)))) (ite (is-core!option.Option./None_ tmp%%$) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)) (let ((b$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) b$)))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.flush.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.flush.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.flush.? self!) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (%I (I (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.flush.? self!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush.? self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.flush.))
(declare-fun %%lambda%%4 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%4 _addr$ b$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.flush.? b$))) :pattern ((%%apply%%1 %%lambda%%4 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.flush.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.flush.? self!) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%4)))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.flush.? self!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.flush.))
(declare-fun %%lambda%%5 () %%Function%%)
(assert (forall ((_pos$ Poly) (pm$ Poly)) (! (= (%%apply%%1 %%lambda%%5 _pos$ pm$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? pm$))) :pattern ((%%apply%%1 %%lambda%%5 _pos$ pm$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.flush.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.flush.? self!) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))) (Poly%fun%2. (mk_fun %%lambda%%5)))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.flush.? self!))))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::flush")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. Self%&. Self%& pre%self!) (=> %%global_location_label%%9 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& pre%self!)))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. Self%&. Self%& pre%self!)))))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. Self%&. Self%& pre%self! self!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%7.flush.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. Self%&. Self%& pre%self! self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%10 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs core::iter::traits::collect::impl&%1::into_iter")
(declare-fun ens%core!iter.traits.collect.impl&%1.into_iter. (Dcr Type Poly Poly) Bool)
(assert (forall ((I&. Dcr) (I& Type) (i! Poly) (r! Poly)) (! (= (ens%core!iter.traits.collect.impl&%1.into_iter. I&. I& i! r!) (and (has_type r! I&) (= r! i!))) :pattern ((ens%core!iter.traits.collect.impl&%1.into_iter. I&. I& i! r!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap_or")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap_or.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap_or.) (forall ((T&. Dcr) (T& Type) (option! Poly) (default! Poly)) (! (= (vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)) (let ((t$ (core!option.Option./Some/0 (%Poly%core!option.Option. option!)))) t$) default!)) :pattern ((vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly) (default! Poly)) (! (=> (and (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type default! T&)) (has_type (vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_is_lt")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (vstd!std_specs.range.StepSpec.spec_is_lt.? Self%&. Self%& self! other!) BOOL)) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? Self%&. Self%& self! other!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_steps_between_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (end! Poly)) (! (=> (and (has_type self! Self%&) (has_type end! Self%&)) (has_type (vstd!std_specs.range.StepSpec.spec_steps_between_int.? Self%&. Self%& self! end!) INT)) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? Self%&. Self%& self! end!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_forward_checked")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (count! Poly)) (! (=> (and (has_type self! Self%&) (has_type count! (UINT SZ))) (has_type (vstd!std_specs.range.StepSpec.spec_forward_checked.? Self%&. Self%& self! count!) (TYPE%core!option.Option. Self%&. Self%&))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? Self%&. Self%& self! count!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_forward_checked_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (count! Poly)) (! (=> (and (has_type self! Self%&) (has_type count! INT)) (has_type (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? Self%&. Self%& self! count!) (TYPE%core!option.Option. Self%&. Self%&))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? Self%&. Self%& self! count!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::spec_range_next")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! (TYPE%core!ops.range.Range. A&. A&)) (has_type (Poly%tuple%2. (vstd!std_specs.range.spec_range_next.? A&. A& a!)) (TYPE%tuple%2. $ (TYPE%core!ops.range.Range. A&. A&) $ (TYPE%core!option.Option. A&. A&)))) :pattern ((vstd!std_specs.range.spec_range_next.? A&. A& a!)))))
(set-info :comment ";; Function-Specs core::iter::range::impl&%6::next")
(declare-fun ens%core!iter.range.impl&%6.next. (Dcr Type core!ops.range.Range. core!ops.range.Range. core!option.Option.) Bool)
(assert (forall ((A&. Dcr) (A& Type) (pre%range! core!ops.range.Range.) (range! core!ops.range.Range.) (r! core!option.Option.)) (! (= (ens%core!iter.range.impl&%6.next. A&. A& pre%range! range! r!) (and (has_type (Poly%core!option.Option. r!) (TYPE%core!option.Option. A&. A&)) (has_type (Poly%core!ops.range.Range. range!) (TYPE%core!ops.range.Range. A&. A&)) (= (tuple%2./tuple%2 (Poly%core!ops.range.Range. range!) (Poly%core!option.Option. r!)) (vstd!std_specs.range.spec_range_next.? A&. A& (Poly%core!ops.range.Range. pre%range!))))) :pattern ((ens%core!iter.range.impl&%6.next. A&. A& pre%range! range! r!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%3::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%3.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%3.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 8) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 8) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%3::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%3.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%3.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 8) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 255) (core!option.Option./Some (I (uClip 8 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 8) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%3::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%3.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%3.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 8) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 8) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 8) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_u8")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_u8.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT 8))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 8) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 8) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 8) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 8) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 8) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT 8) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%5::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%5.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%5.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 32) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 32) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%5::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%5.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%5.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 32) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 4294967295) (core!option.Option./Some (I (uClip 32 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 32) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%5::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%5.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%5.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 32) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 32) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 32) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_u32")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_u32.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT 32))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 32) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 32) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT 32) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 18446744073709551615) (core!option.Option./Some (I (uClip 64 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_u64")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_u64.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT 64))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%7::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%7.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%7.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 128) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 128) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%7::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%7.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%7.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 128) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 340282366920938463463374607431768211455) (core!option.Option./Some (I (uClip 128 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 128) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%7::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%7.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%7.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 128) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 128) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 128) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_u128")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_u128.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT 128))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 128) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 128) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 128) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 128) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 128) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT 128) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) (- (uHi SZ) 1)) (core!option.Option./Some (I (uClip SZ (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_usize")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_usize.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT SZ))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::vec_index")
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%11 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)))))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)))))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::new")
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::push")
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%0.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!))))))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_vec_index_decreases")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_vec_index_decreases.) (forall ((A&. Dcr) (A& Type) (v! Poly) (i! Poly)) (! (=> (and (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!)) (height v!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!)))))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%6 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%6 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::exec_invariant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (has_type self! Self%&) (has_type exec_iter! (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter Self%&. Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? Self%&. Self%& self! exec_iter!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.exec_invariant.? Self%&. Self%& self! exec_iter!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_invariant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (init! Poly)) (! (=> (and (has_type self! Self%&) (has_type init! (TYPE%core!option.Option. (REF Self%&.) Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? Self%&. Self%& self! init!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? Self%&. Self%& self! init!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_ensures")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? Self%&. Self%& self!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_peek_next")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? Self%&. Self%& self!) (TYPE%core!option.Option. (proj%%vstd!pervasive.ForLoopGhostIterator./Item Self%&. Self%&) (proj%vstd!pervasive.ForLoopGhostIterator./Item Self%&. Self%&)))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_advance")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (has_type self! Self%&) (has_type exec_iter! (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter Self%&. Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? Self%&. Self%& self! exec_iter!) Self%&)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_advance.? Self%&. Self%& self! exec_iter!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIteratorNew::ghost_iter")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? Self%&. Self%& self!) (proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter Self%&. Self%&))) :pattern ((vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::drop_first")
(declare-fun req%vstd!seq_lib.impl&%0.drop_first. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_first. A&. A& self!) (=> %%global_location_label%%12 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_first. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::drop_first")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_first.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_first.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_first.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 1) (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq_lib.impl&%0.drop_first.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_first.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_first.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! (I 0) (I (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::no_outstanding_writes")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!pmem.pmemspec_t.impl&%7.len.? self!))) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i$))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i$))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? self!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::spec_crc_u64")
(assert (forall ((bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!pmem.pmemspec_t.spec_crc_u64.? bytes!))) :pattern ((lib!pmem.pmemspec_t.spec_crc_u64.? bytes!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%19::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 64)))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%19::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ (UINT 64)))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::CDB_FALSE")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.CDB_FALSE.) (= lib!pmem.pmemspec_t.CDB_FALSE.? 11756720295082287198)))
(assert (uInv 64 lib!pmem.pmemspec_t.CDB_FALSE.?))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::CDB_TRUE")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.CDB_TRUE.) (= lib!pmem.pmemspec_t.CDB_TRUE.? 12331324665725530551)))
(assert (uInv 64 lib!pmem.pmemspec_t.CDB_TRUE.?))
(set-info :comment ";; Function-Axioms vstd::std_specs::core::iter_into_iter_spec")
(assert (fuel_bool_default fuel%vstd!std_specs.core.iter_into_iter_spec.))
(assert (=> (fuel_bool fuel%vstd!std_specs.core.iter_into_iter_spec.) (forall ((I&. Dcr) (I& Type) (i! Poly)) (! (= (vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!) i!) :pattern ((vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!))))))
(assert (forall ((I&. Dcr) (I& Type) (i! Poly)) (! (=> (has_type i! I&) (has_type (vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!) I&)) :pattern ((vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%0::ghost_iter")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%0.ghost_iter.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%0.ghost_iter.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (= (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. A&. A&) self!) (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. self!)) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. self!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::exec_invariant")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.exec_invariant.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.exec_invariant.) (forall ((A&. Dcr) (A& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! exec_iter!) (B (and (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. exec_iter!))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. exec_iter!))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! exec_iter!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_invariant")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_invariant.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_invariant.) (forall ((A&. Dcr) (A& Type) (self! Poly) (init! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! init!) (B (and (and (or (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (or (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!))))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. init!)) (let ((init$ (%Poly%vstd!std_specs.range.RangeGhostIterator. (core!option.Option./Some/0 (%Poly%core!option.Option. init!))))) (and (and (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! init!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_ensures")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_ensures.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_ensures.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (B (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_peek_next")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_peek_next.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_peek_next.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (Poly%core!option.Option. (core!option.Option./Some (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_advance")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_advance.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_advance.) (forall ((A&. Dcr) (A& Type) (self! Poly) (_exec_iter! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! _exec_iter!) (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (I 1)))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! _exec_iter!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%2.view.))
(declare-fun %%lambda%%7 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2) i$) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!view.View.view.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I (nClip (%I (vstd!std_specs.range.StepSpec.spec_steps_between_int.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) (Poly%fun%1. (mk_fun (%%lambda%%7 A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))) :pattern ((vstd!view.View.view.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%3::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%3.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%3.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 8) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 8) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%5::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%5.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%5.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 32) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 32) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 64) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 64) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%7::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%7.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%7.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 128) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 128) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT SZ) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT SZ) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%22::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 128) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::spec_padding_needed")
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.spec_padding_needed.) (forall ((offset! Poly) (align! Poly)) (! (= (lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!) (let ((misalignment$ (nClip (EucMod (%I offset!) (%I align!))))) (ite (> misalignment$ 0) (nClip (Sub (%I align!) misalignment$)) 0))) :pattern ((lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!))))))
(assert (forall ((offset! Poly) (align! Poly)) (! (=> (and (has_type offset! NAT) (has_type align! NAT)) (<= 0 (lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!))) :pattern ((lib!pmem.pmcopy_t.spec_padding_needed.? offset! align!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%23::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128)) (I 16))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%23::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)) (I 16))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::extract_bytes")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.extract_bytes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.extract_bytes.) (forall ((bytes! Poly) (pos! Poly) (len! Poly)) (! (= (lib!pmem.pmemspec_t.extract_bytes.? bytes! pos! len!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) bytes! pos! (I (nClip (Add (%I pos!) (%I len!))))))) :pattern ((lib!pmem.pmemspec_t.extract_bytes.? bytes! pos! len!))))))
(set-info :comment ";; Function-Specs lib::util_v::nat_seq_max")
(declare-fun req%lib!util_v.nat_seq_max. (Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((seq! Poly)) (! (= (req%lib!util_v.nat_seq_max. seq!) (=> %%global_location_label%%13 (< 0 (vstd!seq.Seq.len.? $ NAT seq!)))) :pattern ((req%lib!util_v.nat_seq_max. seq!)))))
(set-info :comment ";; Function-Axioms lib::util_v::nat_seq_max")
(assert (fuel_bool_default fuel%lib!util_v.nat_seq_max.))
(declare-const fuel_nat%lib!util_v.nat_seq_max. Fuel)
(assert (forall ((seq! Poly) (fuel% Fuel)) (! (= (lib!util_v.rec%nat_seq_max.? seq! fuel%) (lib!util_v.rec%nat_seq_max.? seq! zero)) :pattern ((lib!util_v.rec%nat_seq_max.? seq! fuel%)))))
(assert (forall ((seq! Poly) (fuel% Fuel)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (= (lib!util_v.rec%nat_seq_max.? seq! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? $ NAT seq!) 1) (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) (ite (= (vstd!seq.Seq.len.? $ NAT seq!) 0) 0 (let ((later_max$ (lib!util_v.rec%nat_seq_max.? (vstd!seq_lib.impl&%0.drop_first.? $ NAT seq!) fuel%))) (ite (>= (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) later_max$) (%I (vstd!seq.Seq.index.? $ NAT seq! (I 0))) later_max$)))))) :pattern ((lib!util_v.rec%nat_seq_max.? seq! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!util_v.nat_seq_max.) (forall ((seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (= (lib!util_v.nat_seq_max.? seq!) (lib!util_v.rec%nat_seq_max.? seq! (succ fuel_nat%lib!util_v.nat_seq_max.)))) :pattern ((lib!util_v.nat_seq_max.? seq!))))))
(assert (forall ((seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. $ NAT)) (<= 0 (lib!util_v.nat_seq_max.? seq!))) :pattern ((lib!util_v.nat_seq_max.? seq!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128)))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%0::T::spec_crc")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (= (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? T&. T& self!) (I (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? T&. T& self!))))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? T&. T& self!))))))
(set-info :comment ";; Broadcast lib::pmem::pmcopy_t::axiom_bytes_len")
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.axiom_bytes_len.) (forall ((S&. Dcr) (S& Type) (s! Poly)) (! (=> (has_type s! S&) (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. S&. S&) (= (vstd!seq.Seq.len.? $ (UINT 8) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& s!)) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) :pattern ((vstd!seq.Seq.len.? $ (UINT 8) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& s!)))))))
(set-info :comment ";; Broadcast lib::pmem::pmcopy_t::axiom_to_from_bytes")
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.axiom_to_from_bytes.) (forall ((S&. Dcr) (S& Type) (s! Poly)) (! (=> (has_type s! S&) (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. S&. S&) (= s! (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? S&. S& (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& s!))))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? S&. S& (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& s!)))))))
(set-info :comment ";; Function-Axioms lib::multilog::inv_v::log_index_trigger")
(assert (fuel_bool_default fuel%lib!multilog.inv_v.log_index_trigger.))
(assert (=> (fuel_bool fuel%lib!multilog.inv_v.log_index_trigger.) (forall ((which_log! Poly)) (! (= (lib!multilog.inv_v.log_index_trigger.? which_log!) true) :pattern ((lib!multilog.inv_v.log_index_trigger.? which_log!))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_GLOBAL_METADATA")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.? 0)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_AREA")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? 256)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_CDB")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? 96)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::extract_log_cdb")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.extract_log_cdb.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.extract_log_cdb.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.extract_log_cdb.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!multilog.layout_v.extract_log_cdb.? mem!))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::deserialize_log_cdb")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.deserialize_log_cdb.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.deserialize_log_cdb.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.deserialize_log_cdb.? mem!) (%I (let ((bytes$ (lib!multilog.layout_v.extract_log_cdb.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!multilog.layout_v.deserialize_log_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!multilog.layout_v.deserialize_log_cdb.? mem!))) :pattern ((lib!multilog.layout_v.deserialize_log_cdb.? mem!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::deserialize_and_check_log_cdb")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.deserialize_and_check_log_cdb.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.deserialize_and_check_log_cdb.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.deserialize_and_check_log_cdb.? mem!) (let ((log_cdb$ (lib!multilog.layout_v.deserialize_log_cdb.? mem!))) (ite (= log_cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?) (core!option.Option./Some (B false)) (ite (= log_cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) (core!option.Option./Some (B true)) core!option.Option./None)))) :pattern ((lib!multilog.layout_v.deserialize_and_check_log_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%core!option.Option. (lib!multilog.layout_v.deserialize_and_check_log_cdb.? mem!)) (TYPE%core!option.Option. $ BOOL))) :pattern ((lib!multilog.layout_v.deserialize_and_check_log_cdb.? mem!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? 104)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? 144)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::LogMetadata::spec_size_of")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.impl&%21.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.impl&%21.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.LogMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$3))))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::GlobalMetadata::spec_size_of")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.impl&%3.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.impl&%3.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.GlobalMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$3))))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::extract_global_metadata")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.extract_global_metadata.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.extract_global_metadata.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.extract_global_metadata.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.GlobalMetadata.))) :pattern ((lib!multilog.layout_v.extract_global_metadata.? mem!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!multilog.layout_v.GlobalMetadata.))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::GlobalMetadata::spec_align_of")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.impl&%3.spec_align_of.))
(declare-fun %%array%%0 (Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2))) (and (= (%%apply%%2 %%x%% 0) %%hole%%0) (= (%%apply%%2 %%x%% 1) %%hole%%1) (= (%%apply%%2 %%x%% 2) %%hole%%2))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2)))))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.impl&%3.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!multilog.layout_v.GlobalMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 3)) (array_new $ NAT 3 (%%array%%0 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!multilog.layout_v.GlobalMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!multilog.layout_v.GlobalMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!multilog.layout_v.GlobalMetadata.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!multilog.layout_v.GlobalMetadata.))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::deserialize_global_metadata")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.deserialize_global_metadata.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.deserialize_global_metadata.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.deserialize_global_metadata.? mem!) (%Poly%lib!multilog.layout_v.GlobalMetadata. (let ((bytes$ (lib!multilog.layout_v.extract_global_metadata.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!multilog.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!multilog.layout_v.deserialize_global_metadata.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%lib!multilog.layout_v.GlobalMetadata. (lib!multilog.layout_v.deserialize_global_metadata.? mem!)) TYPE%lib!multilog.layout_v.GlobalMetadata.)) :pattern ((lib!multilog.layout_v.deserialize_global_metadata.? mem!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_GLOBAL_CRC")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.? 32)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::extract_global_crc")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.extract_global_crc.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.extract_global_crc.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.extract_global_crc.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!multilog.layout_v.extract_global_crc.? mem!))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::deserialize_global_crc")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.deserialize_global_crc.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.deserialize_global_crc.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.deserialize_global_crc.? mem!) (%I (let ((bytes$ (lib!multilog.layout_v.extract_global_crc.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!multilog.layout_v.deserialize_global_crc.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!multilog.layout_v.deserialize_global_crc.? mem!))) :pattern ((lib!multilog.layout_v.deserialize_global_crc.? mem!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_REGION_METADATA")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.? 40)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%15::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%15.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%15.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 32)) (I 4))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%15::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%15.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%15.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 32)) (I 4))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::RegionMetadata::spec_size_of")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.impl&%12.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.impl&%12.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.RegionMetadata.) (I (let ((offset$ 0)) (let ((offset$1 (nClip (Add (nClip (Add offset$ (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 32))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 32))))))) (let ((offset$2 (nClip (Add (nClip (Add offset$1 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 32))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$1) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 32))))))) (let ((offset$3 (nClip (Add (nClip (Add offset$2 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$2) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$4 (nClip (Add (nClip (Add offset$3 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$3) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$5 (nClip (Add (nClip (Add offset$4 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$4) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64))))))) (let ((offset$6 (nClip (Add (nClip (Add offset$5 (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 128))))) (lib!pmem.pmcopy_t.spec_padding_needed.? (I offset$5) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128))))))) offset$6)))))))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::extract_region_metadata")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.extract_region_metadata.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.extract_region_metadata.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.extract_region_metadata.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.RegionMetadata.))) :pattern ((lib!multilog.layout_v.extract_region_metadata.? mem!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!multilog.layout_v.RegionMetadata.))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::RegionMetadata::spec_align_of")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.impl&%12.spec_align_of.))
(declare-fun %%array%%1 (Poly Poly Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Poly) (%%hole%%4 Poly) (%%hole%%5 Poly)) (! (let ((%%x%% (%%array%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5))) (and (= (%%apply%%2 %%x%% 0) %%hole%%0) (= (%%apply%%2 %%x%% 1) %%hole%%1) (= (%%apply%%2 %%x%% 2) %%hole%%2) (= (%%apply%%2 %%x%% 3) %%hole%%3) (= (%%apply%%2 %%x%% 4) %%hole%%4) (= (%%apply%%2 %%x%% 5) %%hole%%5))) :pattern ((%%array%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5)))))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.impl&%12.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!multilog.layout_v.RegionMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 6)) (array_new $ NAT 6 (%%array%%1 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 32)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 32)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!multilog.layout_v.RegionMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!multilog.layout_v.RegionMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 32)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!multilog.layout_v.RegionMetadata.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!multilog.layout_v.RegionMetadata.))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::deserialize_region_metadata")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.deserialize_region_metadata.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.deserialize_region_metadata.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.deserialize_region_metadata.? mem!) (%Poly%lib!multilog.layout_v.RegionMetadata. (let ((bytes$ (lib!multilog.layout_v.extract_region_metadata.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!multilog.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!multilog.layout_v.deserialize_region_metadata.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%lib!multilog.layout_v.RegionMetadata. (lib!multilog.layout_v.deserialize_region_metadata.? mem!)) TYPE%lib!multilog.layout_v.RegionMetadata.)) :pattern ((lib!multilog.layout_v.deserialize_region_metadata.? mem!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_REGION_CRC")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC.? 88)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::extract_region_crc")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.extract_region_crc.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.extract_region_crc.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.extract_region_crc.? mem!) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))) :pattern ((lib!multilog.layout_v.extract_region_crc.? mem!))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::deserialize_region_crc")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.deserialize_region_crc.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.deserialize_region_crc.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.deserialize_region_crc.? mem!) (%I (let ((bytes$ (lib!multilog.layout_v.extract_region_crc.? mem!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!multilog.layout_v.deserialize_region_crc.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!multilog.layout_v.deserialize_region_crc.? mem!))) :pattern ((lib!multilog.layout_v.deserialize_region_crc.? mem!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::get_log_metadata_pos")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.get_log_metadata_pos.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.get_log_metadata_pos.) (forall ((cdb! Poly)) (! (= (lib!multilog.layout_v.get_log_metadata_pos.? cdb!) (ite (%B cdb!) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?)) :pattern ((lib!multilog.layout_v.get_log_metadata_pos.? cdb!))))))
(assert (forall ((cdb! Poly)) (! (=> (has_type cdb! BOOL) (uInv 64 (lib!multilog.layout_v.get_log_metadata_pos.? cdb!))) :pattern ((lib!multilog.layout_v.get_log_metadata_pos.? cdb!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::extract_log_metadata")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.extract_log_metadata.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.extract_log_metadata.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!multilog.layout_v.extract_log_metadata.? mem! cdb!) (let ((pos$ (lib!multilog.layout_v.get_log_metadata_pos.? cdb!))) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.LogMetadata.)))) :pattern ((lib!multilog.layout_v.extract_log_metadata.? mem! cdb!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ TYPE%lib!multilog.layout_v.LogMetadata.))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::LogMetadata::spec_align_of")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.impl&%21.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.impl&%21.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ TYPE%lib!multilog.layout_v.LogMetadata.) (I (let ((alignment_seq$ (%Poly%vstd!seq.Seq<nat.>. (vstd!view.View.view.? $ (ARRAY $ NAT $ (CONST_INT 3)) (array_new $ NAT 3 (%%array%%0 (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 128)))))))) (lib!util_v.nat_seq_max.? (Poly%vstd!seq.Seq<nat.>. alignment_seq$)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ TYPE%lib!multilog.layout_v.LogMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ TYPE%lib!multilog.layout_v.LogMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (=> (and (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128))) (tr_bound%lib!pmem.traits_t.PmSafe. $ TYPE%lib!multilog.layout_v.LogMetadata.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ TYPE%lib!multilog.layout_v.LogMetadata.))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::deserialize_log_metadata")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.deserialize_log_metadata.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.deserialize_log_metadata.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!multilog.layout_v.deserialize_log_metadata.? mem! cdb!) (%Poly%lib!multilog.layout_v.LogMetadata. (let ((bytes$ (lib!multilog.layout_v.extract_log_metadata.? mem! cdb!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!multilog.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!multilog.layout_v.deserialize_log_metadata.? mem! cdb!))))))
(assert (forall ((mem! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type cdb! BOOL)) (has_type (Poly%lib!multilog.layout_v.LogMetadata. (lib!multilog.layout_v.deserialize_log_metadata.? mem! cdb!)) TYPE%lib!multilog.layout_v.LogMetadata.)) :pattern ((lib!multilog.layout_v.deserialize_log_metadata.? mem! cdb!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? 176)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.) (= lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.? 136)))
(assert (uInv 64 lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::extract_log_crc")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.extract_log_crc.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.extract_log_crc.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!multilog.layout_v.extract_log_crc.? mem! cdb!) (let ((pos$ (ite (%B cdb!) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))) (lib!pmem.pmemspec_t.extract_bytes.? mem! (I pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) :pattern ((lib!multilog.layout_v.extract_log_crc.? mem! cdb!))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::deserialize_log_crc")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.deserialize_log_crc.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.deserialize_log_crc.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!multilog.layout_v.deserialize_log_crc.? mem! cdb!) (%I (let ((bytes$ (lib!multilog.layout_v.extract_log_crc.? mem! cdb!))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. bytes$))))) :pattern ((lib!multilog.layout_v.deserialize_log_crc.? mem! cdb!))))))
(assert (forall ((mem! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type cdb! BOOL)) (uInv 64 (lib!multilog.layout_v.deserialize_log_crc.? mem! cdb!))) :pattern ((lib!multilog.layout_v.deserialize_log_crc.? mem! cdb!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::MULTILOG_PROGRAM_GUID")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.MULTILOG_PROGRAM_GUID.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.MULTILOG_PROGRAM_GUID.) (= lib!multilog.layout_v.MULTILOG_PROGRAM_GUID.? 44823571560282867255561390389479338015)))
(assert (uInv 128 lib!multilog.layout_v.MULTILOG_PROGRAM_GUID.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::MULTILOG_PROGRAM_VERSION_NUMBER")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.MULTILOG_PROGRAM_VERSION_NUMBER.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.MULTILOG_PROGRAM_VERSION_NUMBER.) (= lib!multilog.layout_v.MULTILOG_PROGRAM_VERSION_NUMBER.? 1)))
(assert (uInv 64 lib!multilog.layout_v.MULTILOG_PROGRAM_VERSION_NUMBER.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::MIN_LOG_AREA_SIZE")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.MIN_LOG_AREA_SIZE.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.MIN_LOG_AREA_SIZE.) (= lib!multilog.layout_v.MIN_LOG_AREA_SIZE.? 1)))
(assert (uInv 64 lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::relative_log_pos_to_log_area_offset")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.relative_log_pos_to_log_area_offset.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.relative_log_pos_to_log_area_offset.) (forall ((pos_relative_to_head! Poly) (head_log_area_offset! Poly) (log_area_len! Poly)) (! (= (lib!multilog.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head! head_log_area_offset! log_area_len!) (let ((log_area_offset$ (Add (%I head_log_area_offset!) (%I pos_relative_to_head!)))) (ite (>= log_area_offset$ (%I log_area_len!)) (Sub log_area_offset$ (%I log_area_len!)) log_area_offset$))) :pattern ((lib!multilog.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head! head_log_area_offset! log_area_len!))))))
(set-info :comment ";; Function-Axioms lib::multilog::inv_v::metadata_types_set_in_first_region")
(assert (fuel_bool_default fuel%lib!multilog.inv_v.metadata_types_set_in_first_region.))
(assert (=> (fuel_bool fuel%lib!multilog.inv_v.metadata_types_set_in_first_region.) (forall ((mem! Poly)) (! (= (lib!multilog.inv_v.metadata_types_set_in_first_region.? mem!) (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))) (let ((cdb$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.?) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (or (= cdb$ lib!pmem.pmemspec_t.CDB_TRUE.?) (= cdb$ lib!pmem.pmemspec_t.CDB_FALSE.?))))) :pattern ((lib!multilog.inv_v.metadata_types_set_in_first_region.? mem!))))))
(set-info :comment ";; Function-Axioms lib::multilog::inv_v::metadata_types_set_in_region")
(assert (fuel_bool_default fuel%lib!multilog.inv_v.metadata_types_set_in_region.))
(assert (=> (fuel_bool fuel%lib!multilog.inv_v.metadata_types_set_in_region.) (forall ((mem! Poly) (cdb! Poly)) (! (= (lib!multilog.inv_v.metadata_types_set_in_region.? mem! cdb!) (and (and (let ((metadata_pos$ lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?)) (let ((crc_pos$ lib!multilog.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.?)) (let ((metadata$ (%Poly%lib!multilog.layout_v.GlobalMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!multilog.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.GlobalMetadata.))))))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!multilog.layout_v.GlobalMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.GlobalMetadata.))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. metadata$))))))))) (let ((metadata_pos$ lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?)) (let ((crc_pos$ lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_CRC.?)) (let ((metadata$ (%Poly%lib!multilog.layout_v.RegionMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!multilog.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.RegionMetadata.))))))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!multilog.layout_v.RegionMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip metadata_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.RegionMetadata.))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I (nClip crc_pos$)) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. metadata$)))))))))) (let ((metadata_pos$ (ite (%B cdb!) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.?))) (let ((crc_pos$ (ite (%B cdb!) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.?))) (let ((metadata$ (%Poly%lib!multilog.layout_v.LogMetadata. (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ TYPE%lib!multilog.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I metadata_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.LogMetadata.))))))) (let ((crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I crc_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)))))))) (and (and (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ TYPE%lib!multilog.layout_v.LogMetadata. (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I metadata_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.LogMetadata.))))) (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? $ (UINT 64) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.extract_bytes.? mem! (I crc_pos$) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))))) (= crc$ (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? $ TYPE%lib!multilog.layout_v.LogMetadata. (Poly%lib!multilog.layout_v.LogMetadata. metadata$))))))))))) :pattern ((lib!multilog.inv_v.metadata_types_set_in_region.? mem! cdb!))))))
(set-info :comment ";; Function-Axioms lib::multilog::inv_v::metadata_types_set")
(assert (fuel_bool_default fuel%lib!multilog.inv_v.metadata_types_set.))
(assert (=> (fuel_bool fuel%lib!multilog.inv_v.metadata_types_set.) (forall ((mems! Poly)) (! (= (lib!multilog.inv_v.metadata_types_set.? mems!) (and (lib!multilog.inv_v.metadata_types_set_in_first_region.? (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) mems! (I 0))) (let ((tmp%%$ (lib!multilog.layout_v.deserialize_and_check_log_cdb.? (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) mems! (I 0))))) (and (is-core!option.Option./Some_ tmp%%$) (let ((cdb$ (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (lib!multilog.inv_v.log_index_trigger.? i$) (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) mems!)))) (lib!multilog.inv_v.metadata_types_set_in_region.? (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) mems! i$) (B cdb$)))) :pattern ((lib!multilog.inv_v.log_index_trigger.? i$))))))))) :pattern ((lib!multilog.inv_v.metadata_types_set.? mems!))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::extract_log")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.extract_log.))
(declare-fun %%lambda%%8 (Poly Poly Int Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (pos_relative_to_head$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pos_relative_to_head$) (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 (I (Add %%hole%%2 (lib!multilog.layout_v.relative_log_pos_to_log_area_offset.? pos_relative_to_head$ %%hole%%0 %%hole%%1))))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pos_relative_to_head$)))))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.extract_log.) (forall ((mem! Poly) (log_area_len! Poly) (head! Poly) (log_length! Poly)) (! (= (lib!multilog.layout_v.extract_log.? mem! log_area_len! head! log_length!) (%Poly%vstd!seq.Seq<u8.>. (let ((head_log_area_offset$ (EucMod (%I head!) (%I log_area_len!)))) (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (nClip (%I log_length!))) (Poly%fun%1. (mk_fun (%%lambda%%8 (I head_log_area_offset$) log_area_len! lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? $ (UINT 8) mem!))))))) :pattern ((lib!multilog.layout_v.extract_log.? mem! log_area_len! head! log_length!))))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::recover_abstract_log_from_region_given_metadata")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata.) (forall ((mem! Poly) (log_area_len! Poly) (head! Poly) (log_length! Poly)) (! (= (lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata.? mem! log_area_len! head! log_length!) (ite (or (> (%I log_length!) (%I log_area_len!)) (> (Add (%I head!) (%I log_length!)) 340282366920938463463374607431768211455)) core!option.Option./None (core!option.Option./Some (Poly%lib!multilog.multilogspec_t.AbstractLogState. (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState (%I head!) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!multilog.layout_v.extract_log.? mem! log_area_len! head! log_length!))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%I log_area_len!)))))) :pattern ((lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata.? mem! log_area_len! head! log_length!))))))
(assert (forall ((mem! Poly) (log_area_len! Poly) (head! Poly) (log_length! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type log_area_len! (UINT 64)) (has_type head! (UINT 128)) (has_type log_length! (UINT 64))) (has_type (Poly%core!option.Option. (lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata.? mem! log_area_len! head! log_length!)) (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.))) :pattern ((lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata.? mem! log_area_len! head! log_length!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::recover_abstract_log_from_region_given_cdb")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb.) (forall ((mem! Poly) (multilog_id! Poly) (num_logs! Poly) (which_log! Poly) (cdb! Poly)) (! (= (lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb.? mem! multilog_id! num_logs! which_log! cdb!) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?)) core!option.Option./None (let ((global_metadata$ (lib!multilog.layout_v.deserialize_global_metadata.? mem!))) (let ((global_crc$ (lib!multilog.layout_v.deserialize_global_crc.? mem!))) (ite (not (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))))) core!option.Option./None (ite (not (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))) lib!multilog.layout_v.MULTILOG_PROGRAM_GUID.?)) core!option.Option./None (ite (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))) 1) (ite (not (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.RegionMetadata.)))) core!option.Option./None (let ((region_metadata$ (lib!multilog.layout_v.deserialize_region_metadata.? mem!))) (let ((region_crc$ (lib!multilog.layout_v.deserialize_region_crc.? mem!))) (ite (not (= region_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))))) core!option.Option./None (ite (or (or (or (or (or (not (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (vstd!seq.Seq.len.? $ (UINT 8) mem!))) (not (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/multilog_id (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (%I multilog_id!)))) (not (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/num_logs (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (%I num_logs!)))) (not (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/which_log (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (%I which_log!)))) (< (lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?)) (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? (lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$)))))) core!option.Option./None (let ((log_metadata$ (lib!multilog.layout_v.deserialize_log_metadata.? mem! cdb!))) (let ((log_crc$ (lib!multilog.layout_v.deserialize_log_crc.? mem! cdb!))) (ite (not (= log_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!multilog.layout_v.LogMetadata. (Poly%lib!multilog.layout_v.LogMetadata. log_metadata$))))) core!option.Option./None (lib!multilog.layout_v.recover_abstract_log_from_region_given_metadata.? mem! (I (lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$)))) (I (lib!multilog.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!multilog.layout_v.LogMetadata. (Poly%lib!multilog.layout_v.LogMetadata. log_metadata$)))) (I (lib!multilog.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!multilog.layout_v.LogMetadata. (Poly%lib!multilog.layout_v.LogMetadata. log_metadata$))))))))))))) core!option.Option./None))))))) :pattern ((lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb.? mem! multilog_id! num_logs! which_log! cdb!))))))
(assert (forall ((mem! Poly) (multilog_id! Poly) (num_logs! Poly) (which_log! Poly) (cdb! Poly)) (! (=> (and (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type multilog_id! (UINT 128)) (has_type num_logs! INT) (has_type which_log! INT) (has_type cdb! BOOL)) (has_type (Poly%core!option.Option. (lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb.? mem! multilog_id! num_logs! which_log! cdb!)) (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.))) :pattern ((lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb.? mem! multilog_id! num_logs! which_log! cdb!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::recover_given_cdb")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.recover_given_cdb.))
(declare-fun %%lambda%%9 (Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (idx$ Poly) (c$ Poly)) (! (= (%%apply%%1 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2) idx$ c$) (Poly%core!option.Option. (lib!multilog.layout_v.recover_abstract_log_from_region_given_cdb.? c$ %%hole%%0 %%hole%%1 idx$ %%hole%%2))) :pattern ((%%apply%%1 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2) idx$ c$)))))
(declare-fun %%lambda%%10 () %%Function%%)
(assert (forall ((_idx$ Poly) (ot$ Poly)) (! (= (%%apply%%1 %%lambda%%10 _idx$ ot$) (core!option.Option./Some/0 (%Poly%core!option.Option. ot$))) :pattern ((%%apply%%1 %%lambda%%10 _idx$ ot$)))))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.recover_given_cdb.) (forall ((mems! Poly) (multilog_id! Poly) (cdb! Poly)) (! (= (lib!multilog.layout_v.recover_given_cdb.? mems! multilog_id! cdb!) (let ((seq_option$ (%Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. (vstd!seq_lib.impl&%0.map.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.) mems! (Poly%fun%2. (mk_fun (%%lambda%%9 multilog_id! (I (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) mems!)) cdb!))))))) (ite (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.) (Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. seq_option$)))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.) (Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. seq_option$) i$))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.) (Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. seq_option$) i$)))) (core!option.Option./Some (Poly%lib!multilog.multilogspec_t.AbstractMultiLogState. (lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState (%Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. (vstd!seq_lib.impl&%0.map.? $ (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.) $ TYPE%lib!multilog.multilogspec_t.AbstractLogState. (Poly%vstd!seq.Seq<core!option.Option<lib!multilog.multilogspec_t.AbstractLogState.>.>. seq_option$) (Poly%fun%2. (mk_fun %%lambda%%10))))))) core!option.Option./None))) :pattern ((lib!multilog.layout_v.recover_given_cdb.? mems! multilog_id! cdb!))))))
(assert (forall ((mems! Poly) (multilog_id! Poly) (cdb! Poly)) (! (=> (and (has_type mems! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type multilog_id! (UINT 128)) (has_type cdb! BOOL)) (has_type (Poly%core!option.Option. (lib!multilog.layout_v.recover_given_cdb.? mems! multilog_id! cdb!)) (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState.))) :pattern ((lib!multilog.layout_v.recover_given_cdb.? mems! multilog_id! cdb!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::recover_cdb")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.recover_cdb.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.recover_cdb.) (forall ((mem! Poly)) (! (= (lib!multilog.layout_v.recover_cdb.? mem!) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) lib!multilog.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.?) core!option.Option./None (let ((global_metadata$ (lib!multilog.layout_v.deserialize_global_metadata.? mem!))) (let ((global_crc$ (lib!multilog.layout_v.deserialize_global_crc.? mem!))) (ite (not (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))))) core!option.Option./None (ite (not (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))) lib!multilog.layout_v.MULTILOG_PROGRAM_GUID.?)) core!option.Option./None (ite (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))) 1) (ite (< (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64))))) core!option.Option./None (lib!multilog.layout_v.deserialize_and_check_log_cdb.? mem!)) core!option.Option./None))))))) :pattern ((lib!multilog.layout_v.recover_cdb.? mem!))))))
(assert (forall ((mem! Poly)) (! (=> (has_type mem! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (Poly%core!option.Option. (lib!multilog.layout_v.recover_cdb.? mem!)) (TYPE%core!option.Option. $ BOOL))) :pattern ((lib!multilog.layout_v.recover_cdb.? mem!)))))
(set-info :comment ";; Function-Axioms lib::multilog::layout_v::recover_all")
(assert (fuel_bool_default fuel%lib!multilog.layout_v.recover_all.))
(assert (=> (fuel_bool fuel%lib!multilog.layout_v.recover_all.) (forall ((mems! Poly) (multilog_id! Poly)) (! (= (lib!multilog.layout_v.recover_all.? mems! multilog_id!) (ite (or (< (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) mems!) 1) (> (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) mems!) 4294967295)) core!option.Option./None (let ((tmp%%$ (lib!multilog.layout_v.recover_cdb.? (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) mems! (I 0))))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((cdb$ (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (lib!multilog.layout_v.recover_given_cdb.? mems! multilog_id! (B cdb$))) core!option.Option./None)))) :pattern ((lib!multilog.layout_v.recover_all.? mems! multilog_id!))))))
(assert (forall ((mems! Poly) (multilog_id! Poly)) (! (=> (and (has_type mems! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type multilog_id! (UINT 128))) (has_type (Poly%core!option.Option. (lib!multilog.layout_v.recover_all.? mems! multilog_id!)) (TYPE%core!option.Option. $ TYPE%lib!multilog.multilogspec_t.AbstractMultiLogState.))) :pattern ((lib!multilog.layout_v.recover_all.? mems! multilog_id!)))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::committed")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.committed.))
(declare-fun %%lambda%%11 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%11 %%hole%%0) i$) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? %%hole%%0 i$))))) :pattern ((%%apply%%0 (%%lambda%%11 %%hole%%0) i$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.committed.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.committed.? self!) (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (vstd!seq.Seq.new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%fun%1. $ INT $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (I (lib!pmem.pmemspec_t.impl&%7.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%11 self!)))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.committed.? self!))))))
(set-info :comment ";; Function-Axioms lib::multilog::multilogspec_t::AbstractLogState::initialize")
(assert (fuel_bool_default fuel%lib!multilog.multilogspec_t.impl&%0.initialize.))
(assert (=> (fuel_bool fuel%lib!multilog.multilogspec_t.impl&%0.initialize.) (forall ((capacity! Poly)) (! (= (lib!multilog.multilogspec_t.impl&%0.initialize.? capacity!) (lib!multilog.multilogspec_t.AbstractLogState./AbstractLogState (%I (I 0)) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.empty.? $ (UINT 8))) (%I capacity!))) :pattern ((lib!multilog.multilogspec_t.impl&%0.initialize.? capacity!))))))
(set-info :comment ";; Function-Axioms lib::multilog::multilogspec_t::AbstractMultiLogState::initialize")
(assert (fuel_bool_default fuel%lib!multilog.multilogspec_t.impl&%1.initialize.))
(declare-fun %%lambda%%12 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2) i$) (Poly%lib!multilog.multilogspec_t.AbstractLogState. (lib!multilog.multilogspec_t.impl&%0.initialize.? (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%lib!multilog.multilogspec_t.impl&%1.initialize.) (forall ((capacities! Poly)) (! (= (lib!multilog.multilogspec_t.impl&%1.initialize.? capacities!) (lib!multilog.multilogspec_t.AbstractMultiLogState./AbstractMultiLogState (%Poly%vstd!seq.Seq<lib!multilog.multilogspec_t.AbstractLogState.>. (vstd!seq.Seq.new.? $ TYPE%lib!multilog.multilogspec_t.AbstractLogState. $ (TYPE%fun%1. $ INT $ TYPE%lib!multilog.multilogspec_t.AbstractLogState.) (I (vstd!seq.Seq.len.? $ (UINT 64) capacities!)) (Poly%fun%1. (mk_fun (%%lambda%%12 $ (UINT 64) capacities!))))))) :pattern ((lib!multilog.multilogspec_t.impl&%1.initialize.? capacities!))))))
(set-info :comment ";; Function-Axioms lib::multilog::setup_v::memory_correctly_set_up_on_single_region")
(assert (fuel_bool_default fuel%lib!multilog.setup_v.memory_correctly_set_up_on_single_region.))
(assert (=> (fuel_bool fuel%lib!multilog.setup_v.memory_correctly_set_up_on_single_region.) (forall ((mem! Poly) (region_size! Poly) (multilog_id! Poly) (num_logs! Poly) (which_log! Poly)) (! (= (lib!multilog.setup_v.memory_correctly_set_up_on_single_region.? mem! region_size! multilog_id! num_logs! which_log!) (let ((global_crc$ (lib!multilog.layout_v.deserialize_global_crc.? mem!))) (let ((global_metadata$ (lib!multilog.layout_v.deserialize_global_metadata.? mem!))) (let ((region_crc$ (lib!multilog.layout_v.deserialize_region_crc.? mem!))) (let ((region_metadata$ (lib!multilog.layout_v.deserialize_region_metadata.? mem!))) (let ((log_cdb$ (lib!multilog.layout_v.deserialize_and_check_log_cdb.? mem!))) (let ((log_metadata$ (lib!multilog.layout_v.deserialize_log_metadata.? mem! (B false)))) (let ((log_crc$ (lib!multilog.layout_v.deserialize_log_crc.? mem! (B false)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (>= (vstd!seq.Seq.len.? $ (UINT 8) mem!) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?)) (= (vstd!seq.Seq.len.? $ (UINT 8) mem!) (%I region_size!))) (= global_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))))) (= region_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))))) (= log_crc$ (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? $ TYPE%lib!multilog.layout_v.LogMetadata. (Poly%lib!multilog.layout_v.LogMetadata. log_metadata$))))) (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))) lib!multilog.layout_v.MULTILOG_PROGRAM_GUID.?)) (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))) lib!multilog.layout_v.MULTILOG_PROGRAM_VERSION_NUMBER.?)) (= (lib!multilog.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!multilog.layout_v.GlobalMetadata. (Poly%lib!multilog.layout_v.GlobalMetadata. global_metadata$))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ TYPE%lib!multilog.layout_v.RegionMetadata.)))) (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (%I region_size!))) (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/multilog_id (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (%I multilog_id!))) (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/num_logs (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (%I num_logs!))) (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/which_log (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (%I which_log!))) (= (lib!multilog.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!multilog.layout_v.RegionMetadata. (Poly%lib!multilog.layout_v.RegionMetadata. region_metadata$))) (Sub (%I region_size!) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))) (= log_cdb$ (core!option.Option./Some (B false)))) (= (lib!multilog.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!multilog.layout_v.LogMetadata. (Poly%lib!multilog.layout_v.LogMetadata. log_metadata$))) 0)) (= (lib!multilog.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!multilog.layout_v.LogMetadata. (Poly%lib!multilog.layout_v.LogMetadata. log_metadata$))) 0)))))))))) :pattern ((lib!multilog.setup_v.memory_correctly_set_up_on_single_region.? mem! region_size! multilog_id! num_logs! which_log!))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%7::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%7::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%27::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT SZ)) (I 8))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%27::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT SZ)) (I 8))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%55::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ BOOL) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%55::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ BOOL) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%60::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (ARRAY T&. T& N&. N&)) (I (nClip (Mul (const_int N&) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? T&. T&))))))) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (ARRAY T&. T& N&. N&)))))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%60::spec_align_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (ARRAY T&. T& N&. N&)) (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? T&. T&))) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (ARRAY T&. T& N&. N&)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. $ (TYPE%core!ops.range.Range. A&. A&))) :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. $ (TYPE%core!ops.range.Range. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (tr_bound%vstd!pervasive.ForLoopGhostIterator. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIterator. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (tr_bound%vstd!view.View. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 128) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& U&. U&) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. E&. E& E&. E&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Idx&. Dcr) (Idx& Type)) (! (=> (tr_bound%core!cmp.PartialEq. Idx&. Idx& Idx&. Idx&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.range.Range. Idx&. Idx&) $ (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.range.Range. Idx&. Idx&) $ (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A1&. A1&) (tr_bound%core!alloc.Allocator. A2&. A2&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A1&. A1&) $ (TYPE%alloc!vec.Vec. U&. U& A2&. A2&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A1&. A1&) $ (TYPE%alloc!vec.Vec. U&. U& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (TYPE%alloc!vec.Vec. U&. U& A&. A&))) :pattern ((tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (TYPE%alloc!vec.Vec. U&. U& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) $ (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) (REF $) (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY T&. T& N&. N&) (REF $) (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (TYPE%alloc!vec.Vec. U&. U& A&. A&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (TYPE%alloc!vec.Vec. U&. U& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) (REF $) (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) (REF $) (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) $ (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) $ (ARRAY U&. U& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) $ (ARRAY U&. U& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) (REF $) (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) (REF $) (SLICE U&. U&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. A&. A& B&. B&) (tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. E&. E& E&. E&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 128) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!alloc.Allocator. A1&. A1&) (tr_bound%core!alloc.Allocator. A2&. A2&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%alloc!vec.Vec. T&. T& A1&. A1&) $ (TYPE%alloc!vec.Vec. T&. T& A2&. A2&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%alloc!vec.Vec. T&. T& A1&. A1&) $ (TYPE%alloc!vec.Vec. T&. T& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!iter.range.Step. A&. A&) (tr_bound%core!iter.traits.iterator.Iterator. $ (TYPE%core!ops.range.Range. A&. A&))) :pattern ((tr_bound%core!iter.traits.iterator.Iterator. $ (TYPE%core!ops.range.Range. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. E&. E&)) (tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Idx&. Dcr) (Idx& Type)) (! (=> (tr_bound%core!clone.Clone. Idx&. Idx&) (tr_bound%core!clone.Clone. $ (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. T&. T&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%lib!pmem.pmemspec_t.PmemError. $ TYPE%lib!pmem.pmemspec_t.PmemError.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!multilog.layout_v.GlobalMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!multilog.layout_v.RegionMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!multilog.layout_v.LogMetadata.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!pmem.pmemspec_t.PmemError.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&)) (tr_bound%lib!pmem.traits_t.PmSafe. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%lib!pmem.traits_t.PmSafe. T&. T&) (tr_bound%lib!pmem.traits_t.PmSized. T&. T&)) (tr_bound%lib!pmem.traits_t.PmSized. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Function-Specs lib::pmem::traits_t::size_of")
(declare-fun ens%lib!pmem.traits_t.size_of. (Dcr Type Int) Bool)
(assert (forall ((S&. Dcr) (S& Type) (out! Int)) (! (= (ens%lib!pmem.traits_t.size_of. S&. S& out!) (and (uInv SZ out!) (= out! (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) :pattern ((ens%lib!pmem.traits_t.size_of. S&. S& out!)))))
(set-info :comment ";; Function-Specs lib::pmem::pmemutil_v::calculate_crc")
(declare-fun req%lib!pmem.pmemutil_v.calculate_crc. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((S&. Dcr) (S& Type) (val! Poly)) (! (= (req%lib!pmem.pmemutil_v.calculate_crc. S&. S& val!) (=> %%global_location_label%%14 (= (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? S&. S& val!)) (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& val!))))) :pattern ((req%lib!pmem.pmemutil_v.calculate_crc. S&. S& val!)))))
(declare-fun ens%lib!pmem.pmemutil_v.calculate_crc. (Dcr Type Poly Int) Bool)
(assert (forall ((S&. Dcr) (S& Type) (val! Poly) (out! Int)) (! (= (ens%lib!pmem.pmemutil_v.calculate_crc. S&. S& val! out!) (and (uInv 64 out!) (= (%I (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? S&. S& val!)) out!) (= (lib!pmem.pmemspec_t.spec_crc_u64.? (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& val!)) out!))) :pattern ((ens%lib!pmem.pmemutil_v.calculate_crc. S&. S& val! out!)))))
(set-info :comment ";; Function-Specs lib::multilog::inv_v::lemma_metadata_types_set_flush_committed")
(declare-fun ens%lib!multilog.inv_v.lemma_metadata_types_set_flush_committed. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView. Bool) Bool)
(assert (forall ((pm_regions_view! lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (cdb! Bool)) (! (= (ens%lib!multilog.inv_v.lemma_metadata_types_set_flush_committed. pm_regions_view! cdb!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (lib!multilog.inv_v.log_index_trigger.? i$) (and (<= 0 (%I i$)) (< (%I i$) (lib!pmem.pmemspec_t.impl&%7.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. pm_regions_view!))))) (lib!multilog.inv_v.metadata_types_set_in_region.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. pm_regions_view!) i$)))))) (B cdb!))) (lib!multilog.inv_v.metadata_types_set_in_region.? (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (lib!pmem.pmemspec_t.impl&%7.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.impl&%7.flush.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. pm_regions_view!))))) i$) (B cdb!)))) :pattern ((lib!multilog.inv_v.log_index_trigger.? i$))))) :pattern ((ens%lib!multilog.inv_v.lemma_metadata_types_set_flush_committed. pm_regions_view! cdb!)))))
(set-info :comment ";; Function-Specs lib::multilog::setup_v::check_for_required_space")
(declare-fun req%lib!multilog.setup_v.check_for_required_space. (alloc!vec.Vec<u64./allocator_global%.>. Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((region_sizes! alloc!vec.Vec<u64./allocator_global%.>.) (num_regions! Int)) (! (= (req%lib!multilog.setup_v.check_for_required_space. region_sizes! num_regions!) (=> %%global_location_label%%15 (= num_regions! (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!))))) :pattern ((req%lib!multilog.setup_v.check_for_required_space. region_sizes! num_regions!)))))
(declare-fun ens%lib!multilog.setup_v.check_for_required_space. (alloc!vec.Vec<u64./allocator_global%.>. Int core!result.Result.) Bool)
(define-fun is-tuple%0./tuple%0_ ((c tuple%0.)) Bool ((_ is tuple%0./tuple%0) c))
(define-fun is-lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup_ ((c lib!multilog.multilogimpl_t.MultiLogErr.)) Bool ((_ is lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup) c))
(assert (forall ((region_sizes! alloc!vec.Vec<u64./allocator_global%.>.) (num_regions! Int) (result! core!result.Result.)) (! (= (ens%lib!multilog.setup_v.check_for_required_space. region_sizes! num_regions! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%lib!multilog.multilogimpl_t.MultiLogErr.)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!))))) (>= (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)))) (and (and (is-core!result.Result./Err_ result!) (is-lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup_ (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((which_log$ (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/which_log (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (let ((required_space$ (lib!multilog.multilogimpl_t.MultiLogErr./InsufficientSpaceForSetup/required_space (%Poly%lib!multilog.multilogimpl_t.MultiLogErr. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) (and (and (and (<= 0 which_log$) (< which_log$ (vstd!seq.Seq.len.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!))))) (< (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) (I which_log$))) required_space$)) (= required_space$ (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?))))))))) :pattern ((ens%lib!multilog.setup_v.check_for_required_space. region_sizes! num_regions! result!)))))
(set-info :comment ";; Function-Def lib::multilog::setup_v::check_for_required_space")
(set-info :comment ";; src/multilog/setup_v.rs:55:9: 66:10 (#0)")
(set-info :comment ";; Function-Def lib::multilog::setup_v::check_for_required_space")
(set-info :comment ";; src/multilog/setup_v.rs:35:5: 35:115 (#0)")
(set-info :comment ";; Function-Specs lib::multilog::setup_v::compute_log_capacities")
(declare-fun req%lib!multilog.setup_v.compute_log_capacities. (alloc!vec.Vec<u64./allocator_global%.>.) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((region_sizes! alloc!vec.Vec<u64./allocator_global%.>.)) (! (= (req%lib!multilog.setup_v.compute_log_capacities. region_sizes!) (=> %%global_location_label%%16 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))) (>= (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)))))) :pattern ((req%lib!multilog.setup_v.compute_log_capacities. region_sizes!)))))
(declare-fun ens%lib!multilog.setup_v.compute_log_capacities. (alloc!vec.Vec<u64./allocator_global%.>. alloc!vec.Vec<u64./allocator_global%.>.) Bool)
(assert (forall ((region_sizes! alloc!vec.Vec<u64./allocator_global%.>.) (result! alloc!vec.Vec<u64./allocator_global%.>.)) (! (= (ens%lib!multilog.setup_v.compute_log_capacities. region_sizes! result!) (and (= (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. result!)) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))) (= (Add (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. result!)) i$)) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$))))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. result!)) i$)))))) :pattern ((ens%lib!multilog.setup_v.compute_log_capacities. region_sizes! result!)))))
(set-info :comment ";; Function-Def lib::multilog::setup_v::compute_log_capacities")
(set-info :comment ";; src/multilog/setup_v.rs:80:9: 89:10 (#0)")
(set-info :comment ";; Function-Def lib::multilog::setup_v::compute_log_capacities")
(set-info :comment ";; src/multilog/setup_v.rs:71:5: 71:80 (#0)")
(declare-const result! alloc!vec.Vec<u64./allocator_global%.>.)
(declare-const region_sizes! alloc!vec.Vec<u64./allocator_global%.>.)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Int)
(declare-const tmp%3 Poly)
(declare-const tmp%4 core!ops.range.Range.)
(declare-const VERUS_loop_val@ Int)
(declare-const tmp%%$1@ core!option.Option.)
(declare-const tmp%5 Poly)
(declare-const tmp%6 Int)
(declare-const VERUS_loop_next@0 Int)
(declare-const which_region@ Int)
(declare-const tmp%%$2@ tuple%0.)
(declare-const iter@0 vstd!std_specs.range.RangeGhostIterator.)
(declare-const VERUS_exec_iter@0 core!ops.range.Range.)
(declare-const tmp%%@ core!ops.range.Range.)
(declare-const VERUS_loop_result@ tuple%0.)
(declare-const result@0 alloc!vec.Vec<u64./allocator_global%.>.)
(assert fuel_defaults)
(assert (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))) (>= (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)))))
(declare-const iter@1 vstd!std_specs.range.RangeGhostIterator.)
(declare-const VERUS_exec_iter@1 core!ops.range.Range.)
(declare-const VERUS_loop_next@1 Int)
(declare-const result@1 alloc!vec.Vec<u64./allocator_global%.>.)
(declare-const iter@2 vstd!std_specs.range.RangeGhostIterator.)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%7 Bool)
(assert (not (=> (ens%alloc!vec.impl&%0.new. $ (UINT 64) tmp%1) (=> (= result@0 (%Poly%alloc!vec.Vec<u64./allocator_global%.>. tmp%1)) (=> (ens%alloc!vec.impl&%1.len. $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!) tmp%2) (=> (= tmp%4 (core!ops.range.Range./Range (I 0) (I tmp%2))) (=> (ens%core!iter.traits.collect.impl&%1.into_iter. $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. tmp%4) tmp%3) (=> (= tmp%%@ (%Poly%core!ops.range.Range. tmp%3)) (=> (= VERUS_exec_iter@0 tmp%%@) (=> (= iter@1 (%Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. VERUS_exec_iter@0)))) (and (=> %%location_label%%0 (%B (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1) (Poly%core!ops.range.Range. VERUS_exec_iter@0)))) (and (=> %%location_label%%1 (%B (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1) (Poly%core!option.Option. (core!option.Option./Some (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (vstd!std_specs.core.iter_into_iter_spec.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I 0) (I (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))))))))))) (and (=> %%location_label%%2 (let ((which_region$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (%I (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1)))) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!))))) (and (=> %%location_label%%3 (let ((which_region$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))) (>= (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)))))) (and (=> %%location_label%%4 (let ((which_region$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. result@0)) which_region$))) (and (=> %%location_label%%5 (let ((which_region$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) which_region$)) (= (Add (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. result@0)) i$)) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$))))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. result@0)) i$)))))) (=> (has_type (Poly%core!ops.range.Range. VERUS_exec_iter@1) (TYPE%core!ops.range.Range. $ (UINT SZ))) (=> (has_type (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2) (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ))) (=> (%B (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2) (Poly%core!ops.range.Range. VERUS_exec_iter@1))) (=> (%B (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2) (Poly%core!option.Option. (core!option.Option./Some (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (vstd!std_specs.core.iter_into_iter_spec.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I 0) (I (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!))))))))))) (=> (let ((which_region$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (%I (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2)))) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))) (=> (let ((which_region$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))) (>= (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$)) (Add lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? lib!multilog.layout_v.MIN_LOG_AREA_SIZE.?)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$))))) (=> (let ((which_region$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. result@1)) which_region$)) (=> (let ((which_region$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) which_region$)) (= (Add (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. result@1)) i$)) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$))))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. result@1)) i$))))) (=> (%B (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. iter@2))) (=> (= VERUS_loop_result@ tuple%0./tuple%0) (=> (= result! result@1) (and (=> %%location_label%%6 (= (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. result!)) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))) (=> %%location_label%%7 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)))) (= (Add (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. result!)) i$)) lib!multilog.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?) (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. region_sizes!)) i$))))) :pattern ((vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u64./allocator_global%.>. result!)) i$)))))))))))))))))))))))))))))))))
(check-sat)
(exit)
