(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Err. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Err_0. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference_finite. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.inv. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.entry_at_spec. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.view_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.ghost_pt_matches_structure. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.directories_obey_invariant_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.empty_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.layer_in_range. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.inv_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.directories_have_flags. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.hp_pat_is_zero. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.interp_at. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.interp_at_entry. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.interp_at_aux. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.interp. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.PT.accepted_mapping. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.inv. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_mapping. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.valid_mapping. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.map_frame. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_resolve. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.resolve. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.remove. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_unmap. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.unmap. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%0.arrow_Page_0. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.well_formed. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_size. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.num_entries. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.empty. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_match_arch. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.frames_aligned. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.inv. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.upper_vaddr. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.index_for_vaddr. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_base. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_bounds. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp_of_entry. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp_aux. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.resolve. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.update. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.accepted_mapping. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.new_empty_dir. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.map_frame. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.accepted_unmap. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.unmap. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.addr_is_zero_padded. FuelId)
(declare-const fuel%lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_addr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_addr. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_P. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_RW. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_US. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_PWT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_PCD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_A. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_FLAG_XD. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_D. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_G. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.MASK_DIR_ADDR_SPEC. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%3.view. FuelId)
(declare-const fuel%lib!spec_t.hardware.impl&%3.layer. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.inv. FuelId)
(declare-const fuel%lib!spec_t.mem.impl&%1.spec_read. FuelId)
(declare-const fuel%lib!definitions_u.permissive_flags. FuelId)
(declare-const fuel%lib!definitions_u.impl&%1.view. FuelId)
(declare-const fuel%lib!definitions_u.impl&%2.view. FuelId)
(declare-const fuel%lib!extra.result_map_ok. FuelId)
(declare-const fuel%lib!extra.result_map. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_LAYERS. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_ENTRIES. FuelId)
(declare-const fuel%lib!definitions_t.MAX_PHYADDR_SPEC. FuelId)
(declare-const fuel%lib!definitions_t.WORD_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.PAGE_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.MAX_BASE. FuelId)
(declare-const fuel%lib!definitions_t.L3_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L2_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L1_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.L0_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.index_from_offset. FuelId)
(declare-const fuel%lib!definitions_t.index_from_base_and_addr. FuelId)
(declare-const fuel%lib!definitions_t.entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.next_entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.aligned. FuelId)
(declare-const fuel%lib!definitions_t.between. FuelId)
(declare-const fuel%lib!definitions_t.new_seq. FuelId)
(declare-const fuel%lib!definitions_t.impl&%2.contains. FuelId)
(declare-const fuel%lib!definitions_t.overlap. FuelId)
(declare-const fuel%lib!definitions_t.impl&%4.view. FuelId)
(declare-const fuel%lib!definitions_t.impl&%7.view. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.num_entries. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.upper_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.inv. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.contains_entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.index_for_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_base. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.next_entry_base. FuelId)
(declare-const fuel%lib!definitions_t.x86_arch_spec. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.impl&%0.is_Err. fuel%vstd!std_specs.result.impl&%0.get_Err_0. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_difference. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_difference_finite. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%lib!impl_u.l2_impl.PT.inv. fuel%lib!impl_u.l2_impl.PT.entry_at_spec. fuel%lib!impl_u.l2_impl.PT.view_at. fuel%lib!impl_u.l2_impl.PT.ghost_pt_matches_structure. fuel%lib!impl_u.l2_impl.PT.directories_obey_invariant_at. fuel%lib!impl_u.l2_impl.PT.empty_at. fuel%lib!impl_u.l2_impl.PT.layer_in_range. fuel%lib!impl_u.l2_impl.PT.inv_at. fuel%lib!impl_u.l2_impl.PT.directories_have_flags. fuel%lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero. fuel%lib!impl_u.l2_impl.PT.hp_pat_is_zero. fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint. fuel%lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions. fuel%lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl. fuel%lib!impl_u.l2_impl.PT.interp_at. fuel%lib!impl_u.l2_impl.PT.interp_at_entry. fuel%lib!impl_u.l2_impl.PT.interp_at_aux. fuel%lib!impl_u.l2_impl.PT.interp. fuel%lib!impl_u.l2_impl.PT.accepted_mapping. fuel%lib!impl_u.l0.impl&%0.inv. fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size. fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned. fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap. fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds. fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds. fuel%lib!impl_u.l0.impl&%0.accepted_mapping. fuel%lib!impl_u.l0.impl&%0.valid_mapping. fuel%lib!impl_u.l0.impl&%0.map_frame. fuel%lib!impl_u.l0.impl&%0.accepted_resolve. fuel%lib!impl_u.l0.impl&%0.resolve. fuel%lib!impl_u.l0.impl&%0.remove. fuel%lib!impl_u.l0.impl&%0.accepted_unmap. fuel%lib!impl_u.l0.impl&%0.unmap. fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0. fuel%lib!impl_u.l1.impl&%0.arrow_Page_0. fuel%lib!impl_u.l1.impl&%1.well_formed. fuel%lib!impl_u.l1.impl&%1.entry_size. fuel%lib!impl_u.l1.impl&%1.num_entries. fuel%lib!impl_u.l1.impl&%1.empty. fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size. fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant. fuel%lib!impl_u.l1.impl&%1.directories_match_arch. fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty. fuel%lib!impl_u.l1.impl&%1.frames_aligned. fuel%lib!impl_u.l1.impl&%1.inv. fuel%lib!impl_u.l1.impl&%1.interp. fuel%lib!impl_u.l1.impl&%1.upper_vaddr. fuel%lib!impl_u.l1.impl&%1.index_for_vaddr. fuel%lib!impl_u.l1.impl&%1.entry_base. fuel%lib!impl_u.l1.impl&%1.entry_bounds. fuel%lib!impl_u.l1.impl&%1.interp_of_entry. fuel%lib!impl_u.l1.impl&%1.interp_aux. fuel%lib!impl_u.l1.impl&%1.resolve. fuel%lib!impl_u.l1.impl&%1.update. fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. fuel%lib!impl_u.l1.impl&%1.accepted_mapping. fuel%lib!impl_u.l1.impl&%1.new_empty_dir. fuel%lib!impl_u.l1.impl&%1.map_frame. fuel%lib!impl_u.l1.impl&%1.accepted_unmap. fuel%lib!impl_u.l1.impl&%1.unmap. fuel%lib!impl_u.l2_impl.addr_is_zero_padded. fuel%lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero. fuel%lib!spec_t.hardware.impl&%1.get_Directory_addr. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_RW. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_US. fuel%lib!spec_t.hardware.impl&%1.get_Directory_flag_XD. fuel%lib!spec_t.hardware.impl&%1.get_Page_addr. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_RW. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_US. fuel%lib!spec_t.hardware.impl&%1.get_Page_flag_XD. fuel%lib!spec_t.hardware.MASK_FLAG_P. fuel%lib!spec_t.hardware.MASK_FLAG_RW. fuel%lib!spec_t.hardware.MASK_FLAG_US. fuel%lib!spec_t.hardware.MASK_FLAG_PWT. fuel%lib!spec_t.hardware.MASK_FLAG_PCD. fuel%lib!spec_t.hardware.MASK_FLAG_A. fuel%lib!spec_t.hardware.MASK_FLAG_XD. fuel%lib!spec_t.hardware.MASK_PG_FLAG_D. fuel%lib!spec_t.hardware.MASK_PG_FLAG_G. fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT. fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS. fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS. fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT. fuel%lib!spec_t.hardware.MASK_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC. fuel%lib!spec_t.hardware.MASK_DIR_ADDR_SPEC. fuel%lib!spec_t.hardware.impl&%3.view. fuel%lib!spec_t.hardware.impl&%3.layer. fuel%lib!spec_t.mem.impl&%1.inv. fuel%lib!spec_t.mem.impl&%1.spec_read. fuel%lib!definitions_u.permissive_flags. fuel%lib!definitions_u.impl&%1.view. fuel%lib!definitions_u.impl&%2.view. fuel%lib!extra.result_map_ok. fuel%lib!extra.result_map. fuel%lib!definitions_t.X86_NUM_LAYERS. fuel%lib!definitions_t.X86_NUM_ENTRIES. fuel%lib!definitions_t.MAX_PHYADDR_SPEC. fuel%lib!definitions_t.WORD_SIZE. fuel%lib!definitions_t.PAGE_SIZE. fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. fuel%lib!definitions_t.MAX_BASE. fuel%lib!definitions_t.L3_ENTRY_SIZE. fuel%lib!definitions_t.L2_ENTRY_SIZE. fuel%lib!definitions_t.L1_ENTRY_SIZE. fuel%lib!definitions_t.L0_ENTRY_SIZE. fuel%lib!definitions_t.index_from_offset. fuel%lib!definitions_t.index_from_base_and_addr. fuel%lib!definitions_t.entry_base_from_index. fuel%lib!definitions_t.next_entry_base_from_index. fuel%lib!definitions_t.aligned. fuel%lib!definitions_t.between. fuel%lib!definitions_t.new_seq. fuel%lib!definitions_t.impl&%2.contains. fuel%lib!definitions_t.overlap. fuel%lib!definitions_t.impl&%4.view. fuel%lib!definitions_t.impl&%7.view. fuel%lib!definitions_t.impl&%8.entry_size. fuel%lib!definitions_t.impl&%8.num_entries. fuel%lib!definitions_t.impl&%8.upper_vaddr. fuel%lib!definitions_t.impl&%8.inv. fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast. fuel%lib!definitions_t.impl&%8.contains_entry_size. fuel%lib!definitions_t.impl&%8.index_for_vaddr. fuel%lib!definitions_t.impl&%8.entry_base. fuel%lib!definitions_t.impl&%8.next_entry_base. fuel%lib!definitions_t.x86_arch_spec. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_difference.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_difference_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-sort lib!spec_t.mem.PageTableMemory. 0)
(declare-sort vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayer.>. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. 0)
(declare-sort vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!definitions_t.MemRegion.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!impl_u.l0.PageTableContents. 0) (lib!impl_u.l1.NodeEntry. 0) (lib!impl_u.l1.Directory. 0) (lib!impl_u.l2_impl.PTDir. 0) (lib!spec_t.hardware.GhostPageDirectoryEntry. 0) (lib!spec_t.hardware.PageDirectoryEntry. 0) (lib!definitions_t.MemRegion. 0) (lib!definitions_t.MemRegionExec. 0) (lib!definitions_t.Flags. 0) (lib!definitions_t.PageTableEntry. 0) (lib!definitions_t.PageTableEntryExec. 0) (lib!definitions_t.ArchLayer. 0) (lib!definitions_t.Arch. 0) (lib!definitions_t.ArchLayerExec. 0) (lib!definitions_t.ArchExec. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!impl_u.l0.PageTableContents./PageTableContents (lib!impl_u.l0.PageTableContents./PageTableContents/?map vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) (lib!impl_u.l0.PageTableContents./PageTableContents/?arch lib!definitions_t.Arch.) (lib!impl_u.l0.PageTableContents./PageTableContents/?lower Int) (lib!impl_u.l0.PageTableContents./PageTableContents/?upper Int))) ((lib!impl_u.l1.NodeEntry./Directory (lib!impl_u.l1.NodeEntry./Directory/?0 lib!impl_u.l1.Directory.)) (lib!impl_u.l1.NodeEntry./Page (lib!impl_u.l1.NodeEntry./Page/?0 lib!definitions_t.PageTableEntry.)) (lib!impl_u.l1.NodeEntry./Empty )) ((lib!impl_u.l1.Directory./Directory (lib!impl_u.l1.Directory./Directory/?entries vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) (lib!impl_u.l1.Directory./Directory/?layer Int) (lib!impl_u.l1.Directory./Directory/?base_vaddr Int) (lib!impl_u.l1.Directory./Directory/?arch lib!definitions_t.Arch.) (lib!impl_u.l1.Directory./Directory/?flags lib!definitions_t.Flags.))) ((lib!impl_u.l2_impl.PTDir./PTDir (lib!impl_u.l2_impl.PTDir./PTDir/?region lib!definitions_t.MemRegion.) (lib!impl_u.l2_impl.PTDir./PTDir/?entries vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.) (lib!impl_u.l2_impl.PTDir./PTDir/?used_regions vstd!set.Set<lib!definitions_t.MemRegion.>.))) ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?addr Int) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_P Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_RW Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_US Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PWT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PCD Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_A Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_XD Bool)) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?addr Int) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_P Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_RW Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_US Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PWT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PCD Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_A Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_D Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_G Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PAT Bool) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_XD Bool)) (lib!spec_t.hardware.GhostPageDirectoryEntry./Empty )) ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?entry Int) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?layer Int))) ((lib!definitions_t.MemRegion./MemRegion (lib!definitions_t.MemRegion./MemRegion/?base Int) (lib!definitions_t.MemRegion./MemRegion/?size Int))) ((lib!definitions_t.MemRegionExec./MemRegionExec (lib!definitions_t.MemRegionExec./MemRegionExec/?base Int) (lib!definitions_t.MemRegionExec./MemRegionExec/?size Int))) ((lib!definitions_t.Flags./Flags (lib!definitions_t.Flags./Flags/?is_writable Bool) (lib!definitions_t.Flags./Flags/?is_supervisor Bool) (lib!definitions_t.Flags./Flags/?disable_execute Bool))) ((lib!definitions_t.PageTableEntry./PageTableEntry (lib!definitions_t.PageTableEntry./PageTableEntry/?frame lib!definitions_t.MemRegion.) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags lib!definitions_t.Flags.))) ((lib!definitions_t.PageTableEntryExec./PageTableEntryExec (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/?frame lib!definitions_t.MemRegionExec.) (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/?flags lib!definitions_t.Flags.))) ((lib!definitions_t.ArchLayer./ArchLayer (lib!definitions_t.ArchLayer./ArchLayer/?entry_size Int) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries Int))) ((lib!definitions_t.Arch./Arch (lib!definitions_t.Arch./Arch/?layers vstd!seq.Seq<lib!definitions_t.ArchLayer.>.))) ((lib!definitions_t.ArchLayerExec./ArchLayerExec (lib!definitions_t.ArchLayerExec./ArchLayerExec/?entry_size Int) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?num_entries Int))) ((lib!definitions_t.ArchExec./ArchExec (lib!definitions_t.ArchExec./ArchExec/?layers %%Function%%))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/map (lib!impl_u.l0.PageTableContents.) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/arch (lib!impl_u.l0.PageTableContents.) lib!definitions_t.Arch.)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/lower (lib!impl_u.l0.PageTableContents.) Int)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/upper (lib!impl_u.l0.PageTableContents.) Int)
(declare-fun lib!impl_u.l1.NodeEntry./Directory/0 (lib!impl_u.l1.NodeEntry.) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.NodeEntry./Page/0 (lib!impl_u.l1.NodeEntry.) lib!definitions_t.PageTableEntry.)
(declare-fun lib!impl_u.l1.Directory./Directory/entries (lib!impl_u.l1.Directory.) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun lib!impl_u.l1.Directory./Directory/layer (lib!impl_u.l1.Directory.) Int)
(declare-fun lib!impl_u.l1.Directory./Directory/base_vaddr (lib!impl_u.l1.Directory.) Int)
(declare-fun lib!impl_u.l1.Directory./Directory/arch (lib!impl_u.l1.Directory.) lib!definitions_t.Arch.)
(declare-fun lib!impl_u.l1.Directory./Directory/flags (lib!impl_u.l1.Directory.) lib!definitions_t.Flags.)
(declare-fun lib!impl_u.l2_impl.PTDir./PTDir/region (lib!impl_u.l2_impl.PTDir.) lib!definitions_t.MemRegion.)
(declare-fun lib!impl_u.l2_impl.PTDir./PTDir/entries (lib!impl_u.l2_impl.PTDir.) vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.)
(declare-fun lib!impl_u.l2_impl.PTDir./PTDir/used_regions (lib!impl_u.l2_impl.PTDir.) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (lib!spec_t.hardware.GhostPageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (lib!spec_t.hardware.GhostPageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD (lib!spec_t.hardware.GhostPageDirectoryEntry.) Bool)
(declare-fun lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (lib!spec_t.hardware.PageDirectoryEntry.) Int)
(declare-fun lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (lib!spec_t.hardware.PageDirectoryEntry.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/base (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/size (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/base (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.MemRegionExec./MemRegionExec/size (lib!definitions_t.MemRegionExec.) Int)
(declare-fun lib!definitions_t.Flags./Flags/is_writable (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/is_supervisor (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/disable_execute (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/frame (lib!definitions_t.PageTableEntry.) lib!definitions_t.MemRegion.)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/flags (lib!definitions_t.PageTableEntry.) lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (lib!definitions_t.PageTableEntryExec.) lib!definitions_t.MemRegionExec.)
(declare-fun lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (lib!definitions_t.PageTableEntryExec.) lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/entry_size (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/num_entries (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.Arch./Arch/layers (lib!definitions_t.Arch.) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (lib!definitions_t.ArchLayerExec.) Int)
(declare-fun lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (lib!definitions_t.ArchLayerExec.) Int)
(declare-fun lib!definitions_t.ArchExec./ArchExec/layers (lib!definitions_t.ArchExec.) %%Function%%)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!impl_u.l0.PageTableContents. Type)
(declare-const TYPE%lib!impl_u.l1.NodeEntry. Type)
(declare-const TYPE%lib!impl_u.l1.Directory. Type)
(declare-const TYPE%lib!impl_u.l2_impl.PTDir. Type)
(declare-const TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry. Type)
(declare-const TYPE%lib!spec_t.hardware.PageDirectoryEntry. Type)
(declare-const TYPE%lib!spec_t.mem.PageTableMemory. Type)
(declare-const TYPE%lib!definitions_t.MemRegion. Type)
(declare-const TYPE%lib!definitions_t.MemRegionExec. Type)
(declare-const TYPE%lib!definitions_t.Flags. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntry. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntryExec. Type)
(declare-const TYPE%lib!definitions_t.ArchLayer. Type)
(declare-const TYPE%lib!definitions_t.Arch. Type)
(declare-const TYPE%lib!definitions_t.ArchLayerExec. Type)
(declare-const TYPE%lib!definitions_t.ArchExec. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!spec_t.mem.PageTableMemory. (lib!spec_t.mem.PageTableMemory.) Poly)
(declare-fun %Poly%lib!spec_t.mem.PageTableMemory. (Poly) lib!spec_t.mem.PageTableMemory.)
(declare-fun Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (Poly) vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!seq.Seq<lib!definitions_t.ArchLayer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)
(declare-fun Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (Poly) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.Set<lib!definitions_t.MemRegion.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (Poly) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents.) Poly)
(declare-fun %Poly%lib!impl_u.l0.PageTableContents. (Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry.) Poly)
(declare-fun %Poly%lib!impl_u.l1.NodeEntry. (Poly) lib!impl_u.l1.NodeEntry.)
(declare-fun Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory.) Poly)
(declare-fun %Poly%lib!impl_u.l1.Directory. (Poly) lib!impl_u.l1.Directory.)
(declare-fun Poly%lib!impl_u.l2_impl.PTDir. (lib!impl_u.l2_impl.PTDir.) Poly)
(declare-fun %Poly%lib!impl_u.l2_impl.PTDir. (Poly) lib!impl_u.l2_impl.PTDir.)
(declare-fun Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-fun Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry.) Poly)
(declare-fun %Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly) lib!spec_t.hardware.PageDirectoryEntry.)
(declare-fun Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegion. (Poly) lib!definitions_t.MemRegion.)
(declare-fun Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegionExec. (Poly) lib!definitions_t.MemRegionExec.)
(declare-fun Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags.) Poly)
(declare-fun %Poly%lib!definitions_t.Flags. (Poly) lib!definitions_t.Flags.)
(declare-fun Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntry. (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun Poly%lib!definitions_t.PageTableEntryExec. (lib!definitions_t.PageTableEntryExec.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntryExec. (Poly) lib!definitions_t.PageTableEntryExec.)
(declare-fun Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayer. (Poly) lib!definitions_t.ArchLayer.)
(declare-fun Poly%lib!definitions_t.Arch. (lib!definitions_t.Arch.) Poly)
(declare-fun %Poly%lib!definitions_t.Arch. (Poly) lib!definitions_t.Arch.)
(declare-fun Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayerExec. (Poly) lib!definitions_t.ArchLayerExec.)
(declare-fun Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchExec. (Poly) lib!definitions_t.ArchExec.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (= x (%Poly%lib!spec_t.mem.PageTableMemory. (Poly%lib!spec_t.mem.PageTableMemory. x))) :pattern ((Poly%lib!spec_t.mem.PageTableMemory. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.mem.PageTableMemory.) (= x (Poly%lib!spec_t.mem.PageTableMemory. (%Poly%lib!spec_t.mem.PageTableMemory. x)))) :pattern ((has_type x TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x lib!spec_t.mem.PageTableMemory.)) (! (has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.) :pattern ((has_type (Poly%lib!spec_t.mem.PageTableMemory. x) TYPE%lib!spec_t.mem.PageTableMemory.)))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (= x (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.))) (= x (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (%Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!impl_u.l2_impl.PTDir.)))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayerExec.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayerExec.))))))
(assert (forall ((x vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.)) (= x (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.))))))
(assert (forall ((x vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (= x (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x))) :pattern ((Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) (= x (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.))))))
(assert (forall ((x vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (has_type (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!definitions_t.MemRegion.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= x (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. x))) :pattern ((Poly%lib!impl_u.l0.PageTableContents. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (= x (Poly%lib!impl_u.l0.PageTableContents. (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((_map! vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) (_arch! lib!definitions_t.Arch.) (_lower! Int) (_upper! Int)) (! (=> (and (<= 0 _lower!) (<= 0 _upper!)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents./PageTableContents _map! _arch! _lower! _upper!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents./PageTableContents _map! _arch! _lower! _upper!)) TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/map x) (lib!impl_u.l0.PageTableContents./PageTableContents/?map x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/map x)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/arch x) (lib!impl_u.l0.PageTableContents./PageTableContents/?arch x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/arch x)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower x) (lib!impl_u.l0.PageTableContents./PageTableContents/?lower x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/lower x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (<= 0 (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. x)) (has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper x) (lib!impl_u.l0.PageTableContents./PageTableContents/?upper x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/upper x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (<= 0 (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. x)) (has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= x (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. x))) :pattern ((Poly%lib!impl_u.l1.NodeEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (= x (Poly%lib!impl_u.l1.NodeEntry. (%Poly%lib!impl_u.l1.NodeEntry. x)))) :pattern ((has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((_0! lib!impl_u.l1.Directory.)) (! (=> (has_type (Poly%lib!impl_u.l1.Directory. _0!) TYPE%lib!impl_u.l1.Directory.) (has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory _0!)) TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory _0!)) TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= (lib!impl_u.l1.NodeEntry./Directory/0 x) (lib!impl_u.l1.NodeEntry./Directory/?0 x)) :pattern ((lib!impl_u.l1.NodeEntry./Directory/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. x))) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. x)) (has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((_0! lib!definitions_t.PageTableEntry.)) (! (=> (has_type (Poly%lib!definitions_t.PageTableEntry. _0!) TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Page _0!)) TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Page _0!)) TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= (lib!impl_u.l1.NodeEntry./Page/0 x) (lib!impl_u.l1.NodeEntry./Page/?0 x)) :pattern ((lib!impl_u.l1.NodeEntry./Page/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. x))) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. x)) (has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (has_type (Poly%lib!impl_u.l1.NodeEntry. lib!impl_u.l1.NodeEntry./Empty) TYPE%lib!impl_u.l1.NodeEntry.))
(define-fun is-lib!impl_u.l1.NodeEntry./Directory_ ((c lib!impl_u.l1.NodeEntry.)) Bool ((_ is lib!impl_u.l1.NodeEntry./Directory) c))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (=> (is-lib!impl_u.l1.NodeEntry./Directory_ x) (height_lt (height (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 x))) (height (Poly%lib!impl_u.l1.NodeEntry. x)))) :pattern ((height (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 x)))))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= x (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. x))) :pattern ((Poly%lib!impl_u.l1.Directory. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (= x (Poly%lib!impl_u.l1.Directory. (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((_entries! vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) (_layer! Int) (_base_vaddr! Int) (_arch! lib!definitions_t.Arch.) (_flags! lib!definitions_t.Flags.)) (! (=> (and (<= 0 _layer!) (<= 0 _base_vaddr!)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory./Directory _entries! _layer! _base_vaddr! _arch! _flags!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory./Directory _entries! _layer! _base_vaddr! _arch! _flags!)) TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/entries x) (lib!impl_u.l1.Directory./Directory/?entries x)) :pattern ((lib!impl_u.l1.Directory./Directory/entries x)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/layer x) (lib!impl_u.l1.Directory./Directory/?layer x)) :pattern ((lib!impl_u.l1.Directory./Directory/layer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. x)) (has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/base_vaddr x) (lib!impl_u.l1.Directory./Directory/?base_vaddr x)) :pattern ((lib!impl_u.l1.Directory./Directory/base_vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. x)) (has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/arch x) (lib!impl_u.l1.Directory./Directory/?arch x)) :pattern ((lib!impl_u.l1.Directory./Directory/arch x)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/flags x) (lib!impl_u.l1.Directory./Directory/?flags x)) :pattern ((lib!impl_u.l1.Directory./Directory/flags x)))))
(define-fun is-lib!impl_u.l1.Directory./Directory_ ((c lib!impl_u.l1.Directory.)) Bool ((_ is lib!impl_u.l1.Directory./Directory) c))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (=> (is-lib!impl_u.l1.Directory./Directory_ x) (height_lt (height (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries x))) (height (Poly%lib!impl_u.l1.Directory. x)))) :pattern ((height (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries x)))))))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (= x (%Poly%lib!impl_u.l2_impl.PTDir. (Poly%lib!impl_u.l2_impl.PTDir. x))) :pattern ((Poly%lib!impl_u.l2_impl.PTDir. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l2_impl.PTDir.) (= x (Poly%lib!impl_u.l2_impl.PTDir. (%Poly%lib!impl_u.l2_impl.PTDir. x)))) :pattern ((has_type x TYPE%lib!impl_u.l2_impl.PTDir.)))))
(assert (forall ((_region! lib!definitions_t.MemRegion.) (_entries! vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>.) (_used_regions! vstd!set.Set<lib!definitions_t.MemRegion.>.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _region!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!impl_u.l2_impl.PTDir. (lib!impl_u.l2_impl.PTDir./PTDir _region! _entries! _used_regions!)) TYPE%lib!impl_u.l2_impl.PTDir.)) :pattern ((has_type (Poly%lib!impl_u.l2_impl.PTDir. (lib!impl_u.l2_impl.PTDir./PTDir _region! _entries! _used_regions!)) TYPE%lib!impl_u.l2_impl.PTDir.)))))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (= (lib!impl_u.l2_impl.PTDir./PTDir/region x) (lib!impl_u.l2_impl.PTDir./PTDir/?region x)) :pattern ((lib!impl_u.l2_impl.PTDir./PTDir/region x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l2_impl.PTDir.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!impl_u.l2_impl.PTDir./PTDir/region (%Poly%lib!impl_u.l2_impl.PTDir. x)) (has_type x TYPE%lib!impl_u.l2_impl.PTDir.)))))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (= (lib!impl_u.l2_impl.PTDir./PTDir/entries x) (lib!impl_u.l2_impl.PTDir./PTDir/?entries x)) :pattern ((lib!impl_u.l2_impl.PTDir./PTDir/entries x)))))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (= (lib!impl_u.l2_impl.PTDir./PTDir/used_regions x) (lib!impl_u.l2_impl.PTDir./PTDir/?used_regions x)) :pattern ((lib!impl_u.l2_impl.PTDir./PTDir/used_regions x)))))
(define-fun is-lib!impl_u.l2_impl.PTDir./PTDir_ ((c lib!impl_u.l2_impl.PTDir.)) Bool ((_ is lib!impl_u.l2_impl.PTDir./PTDir) c))
(assert (forall ((x lib!impl_u.l2_impl.PTDir.)) (! (=> (is-lib!impl_u.l2_impl.PTDir./PTDir_ x) (height_lt (height (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries x))) (height (Poly%lib!impl_u.l2_impl.PTDir. x)))) :pattern ((height (Poly%vstd!seq.Seq<core!option.Option<lib!impl_u.l2_impl.PTDir.>.>. (lib!impl_u.l2_impl.PTDir./PTDir/entries x)))))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= x (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x))) :pattern ((Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (= x (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((_addr! Int) (_flag_P! Bool) (_flag_RW! Bool) (_flag_US! Bool) (_flag_PWT! Bool) (_flag_PCD! Bool) (_flag_A! Bool) (_flag_XD! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?addr x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_P x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_P x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_RW x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_RW x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_US x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_US x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PWT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PWT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_PCD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_PCD x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_A x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_A x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/?flag_XD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Directory/flag_XD x)))))
(assert (forall ((_addr! Int) (_flag_P! Bool) (_flag_RW! Bool) (_flag_US! Bool) (_flag_PWT! Bool) (_flag_PCD! Bool) (_flag_A! Bool) (_flag_D! Bool) (_flag_G! Bool) (_flag_PAT! Bool) (_flag_XD! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Page _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_D! _flag_G! _flag_PAT! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.GhostPageDirectoryEntry./Page _addr! _flag_P! _flag_RW! _flag_US! _flag_PWT! _flag_PCD! _flag_A! _flag_D! _flag_G! _flag_PAT! _flag_XD!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?addr x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.) (uInv SZ (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/addr (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_P x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_P x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_RW x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_RW x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_US x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_US x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PWT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PWT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PCD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PCD x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_A x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_A x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_D x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_D x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_G x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_G x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_PAT x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_PAT x)))))
(assert (forall ((x lib!spec_t.hardware.GhostPageDirectoryEntry.)) (! (= (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD x) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page/?flag_XD x)) :pattern ((lib!spec_t.hardware.GhostPageDirectoryEntry./Page/flag_XD x)))))
(assert (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. lib!spec_t.hardware.GhostPageDirectoryEntry./Empty) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= x (%Poly%lib!spec_t.hardware.PageDirectoryEntry. (Poly%lib!spec_t.hardware.PageDirectoryEntry. x))) :pattern ((Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (= x (Poly%lib!spec_t.hardware.PageDirectoryEntry. (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((_entry! Int) (_layer! Int)) (! (=> (and (uInv 64 _entry!) (<= 0 _layer!)) (has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry _entry! _layer!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)) :pattern ((has_type (Poly%lib!spec_t.hardware.PageDirectoryEntry. (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry _entry! _layer!)) TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry x) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?entry x)) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (uInv 64 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!spec_t.hardware.PageDirectoryEntry.)) (! (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer x) (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/?layer x)) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (<= 0 (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)))) :pattern ((lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. x)) (has_type x TYPE%lib!spec_t.hardware.PageDirectoryEntry.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= x (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. x))) :pattern ((Poly%lib!definitions_t.MemRegion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (= x (Poly%lib!definitions_t.MemRegion. (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (<= 0 _base!) (<= 0 _size!)) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/base x) (lib!definitions_t.MemRegion./MemRegion/?base x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/size x) (lib!definitions_t.MemRegion./MemRegion/?size x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= x (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. x))) :pattern ((Poly%lib!definitions_t.MemRegionExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (= x (Poly%lib!definitions_t.MemRegionExec. (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (uInv SZ _base!) (uInv SZ _size!)) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.MemRegionExec./MemRegionExec _base! _size!)) TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/base x) (lib!definitions_t.MemRegionExec./MemRegionExec/?base x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.MemRegionExec.)) (! (= (lib!definitions_t.MemRegionExec./MemRegionExec/size x) (lib!definitions_t.MemRegionExec./MemRegionExec/?size x)) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegionExec.) (uInv SZ (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)))) :pattern ((lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. x)) (has_type x TYPE%lib!definitions_t.MemRegionExec.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= x (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. x))) :pattern ((Poly%lib!definitions_t.Flags. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Flags.) (= x (Poly%lib!definitions_t.Flags. (%Poly%lib!definitions_t.Flags. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_writable x) (lib!definitions_t.Flags./Flags/?is_writable x)) :pattern ((lib!definitions_t.Flags./Flags/is_writable x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_supervisor x) (lib!definitions_t.Flags./Flags/?is_supervisor x)) :pattern ((lib!definitions_t.Flags./Flags/is_supervisor x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/disable_execute x) (lib!definitions_t.Flags./Flags/?disable_execute x)) :pattern ((lib!definitions_t.Flags./Flags/disable_execute x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.) :pattern ((has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= x (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. x))) :pattern ((Poly%lib!definitions_t.PageTableEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (= x (Poly%lib!definitions_t.PageTableEntry. (%Poly%lib!definitions_t.PageTableEntry. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegion.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _frame!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/frame x) (lib!definitions_t.PageTableEntry./PageTableEntry/?frame x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x)) (has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/flags x) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/flags x)))))
(assert (forall ((x lib!definitions_t.PageTableEntryExec.)) (! (= x (%Poly%lib!definitions_t.PageTableEntryExec. (Poly%lib!definitions_t.PageTableEntryExec. x))) :pattern ((Poly%lib!definitions_t.PageTableEntryExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntryExec.) (= x (Poly%lib!definitions_t.PageTableEntryExec. (%Poly%lib!definitions_t.PageTableEntryExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntryExec.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegionExec.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegionExec. _frame!) TYPE%lib!definitions_t.MemRegionExec.) (has_type (Poly%lib!definitions_t.PageTableEntryExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntryExec.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntryExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntryExec.)))))
(assert (forall ((x lib!definitions_t.PageTableEntryExec.)) (! (= (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame x) (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/?frame x)) :pattern ((lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntryExec.) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. x))) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. x)) (has_type x TYPE%lib!definitions_t.PageTableEntryExec.)))))
(assert (forall ((x lib!definitions_t.PageTableEntryExec.)) (! (= (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags x) (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/?flags x)) :pattern ((lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags x)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= x (%Poly%lib!definitions_t.ArchLayer. (Poly%lib!definitions_t.ArchLayer. x))) :pattern ((Poly%lib!definitions_t.ArchLayer. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (= x (Poly%lib!definitions_t.ArchLayer. (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (<= 0 _entry_size!) (<= 0 _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/entry_size x) (lib!definitions_t.ArchLayer./ArchLayer/?entry_size x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/num_entries x) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= x (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. x))) :pattern ((Poly%lib!definitions_t.Arch. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Arch.) (= x (Poly%lib!definitions_t.Arch. (%Poly%lib!definitions_t.Arch. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= (lib!definitions_t.Arch./Arch/layers x) (lib!definitions_t.Arch./Arch/?layers x)) :pattern ((lib!definitions_t.Arch./Arch/layers x)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.) :pattern ((has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= x (%Poly%lib!definitions_t.ArchLayerExec. (Poly%lib!definitions_t.ArchLayerExec. x))) :pattern ((Poly%lib!definitions_t.ArchLayerExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (= x (Poly%lib!definitions_t.ArchLayerExec. (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (uInv SZ _entry_size!) (uInv SZ _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec./ArchLayerExec _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayerExec.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayerExec. (lib!definitions_t.ArchLayerExec./ArchLayerExec _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= (lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size x) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?entry_size x)) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (uInv SZ (lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%lib!definitions_t.ArchLayerExec. x)) (has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchLayerExec.)) (! (= (lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries x) (lib!definitions_t.ArchLayerExec./ArchLayerExec/?num_entries x)) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayerExec.) (uInv SZ (lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%lib!definitions_t.ArchLayerExec. x)))) :pattern ((lib!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%lib!definitions_t.ArchLayerExec. x)) (has_type x TYPE%lib!definitions_t.ArchLayerExec.)))))
(assert (forall ((x lib!definitions_t.ArchExec.)) (! (= x (%Poly%lib!definitions_t.ArchExec. (Poly%lib!definitions_t.ArchExec. x))) :pattern ((Poly%lib!definitions_t.ArchExec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchExec.) (= x (Poly%lib!definitions_t.ArchExec. (%Poly%lib!definitions_t.ArchExec. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((_layers! %%Function%%)) (! (=> (has_type (Poly%array%. _layers!) (ARRAY $ TYPE%lib!definitions_t.ArchLayerExec. $ (CONST_INT 4))) (has_type (Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec./ArchExec _layers!)) TYPE%lib!definitions_t.ArchExec.)) :pattern ((has_type (Poly%lib!definitions_t.ArchExec. (lib!definitions_t.ArchExec./ArchExec _layers!)) TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((x lib!definitions_t.ArchExec.)) (! (= (lib!definitions_t.ArchExec./ArchExec/layers x) (lib!definitions_t.ArchExec./ArchExec/?layers x)) :pattern ((lib!definitions_t.ArchExec./ArchExec/layers x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchExec.) (has_type (Poly%array%. (lib!definitions_t.ArchExec./ArchExec/layers (%Poly%lib!definitions_t.ArchExec. x))) (ARRAY $ TYPE%lib!definitions_t.ArchLayerExec. $ (CONST_INT 4)))) :pattern ((lib!definitions_t.ArchExec./ArchExec/layers (%Poly%lib!definitions_t.ArchExec. x)) (has_type x TYPE%lib!definitions_t.ArchExec.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%2 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%2 Fn i) T)) :pattern ((has_type (%%apply%%2 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%2 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%2 Fn i)))))
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! true :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. Self%&. Self%& T&. T& E&. E&)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly) Int)
(declare-fun lib!spec_t.mem.impl&%1.regions.? (Poly) vstd!set.Set<lib!definitions_t.MemRegion.>.)
(declare-fun lib!definitions_t.overlap.? (Poly Poly) Bool)
(declare-fun lib!definitions_t.aligned.? (Poly Poly) Bool)
(declare-fun lib!spec_t.mem.impl&%1.cr3_spec.? (Poly) lib!definitions_t.MemRegionExec.)
(declare-fun lib!definitions_t.PAGE_SIZE.? () Int)
(declare-fun lib!spec_t.mem.impl&%1.inv.? (Poly) Bool)
(declare-fun lib!definitions_t.impl&%4.view.? (Poly) lib!definitions_t.MemRegion.)
(declare-fun lib!spec_t.mem.impl&%1.region_view.? (Poly Poly) vstd!seq.Seq<u64.>.)
(declare-fun lib!definitions_t.MAX_PHYADDR_WIDTH.? () Int)
(declare-fun lib!definitions_t.MAX_PHYADDR_SPEC.? () Int)
(declare-fun lib!definitions_t.X86_NUM_LAYERS.? () Int)
(declare-fun lib!definitions_t.impl&%8.entry_size.? (Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.num_entries.? (Poly Poly) Int)
(declare-fun lib!definitions_t.X86_MAX_ENTRY_SIZE.? () Int)
(declare-fun lib!definitions_t.X86_NUM_ENTRIES.? () Int)
(declare-fun lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? (Poly Poly) Bool)
(declare-fun lib!definitions_t.impl&%8.inv.? (Poly) Bool)
(declare-fun lib!definitions_t.entry_base_from_index.? (Poly Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.entry_base.? (Poly Poly Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.upper_vaddr.? (Poly Poly Poly) Int)
(declare-fun lib!definitions_t.L3_ENTRY_SIZE.? () Int)
(declare-fun lib!definitions_t.L2_ENTRY_SIZE.? () Int)
(declare-fun lib!definitions_t.L1_ENTRY_SIZE.? () Int)
(declare-fun lib!definitions_t.L0_ENTRY_SIZE.? () Int)
(declare-fun lib!definitions_t.x86_arch_spec.? () lib!definitions_t.Arch.)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_t.MAX_BASE.? () Int)
(declare-fun lib!spec_t.hardware.MASK_FLAG_P.? () Int)
(declare-fun lib!spec_t.hardware.MASK_FLAG_RW.? () Int)
(declare-fun lib!spec_t.hardware.MASK_FLAG_US.? () Int)
(declare-fun lib!spec_t.hardware.MASK_FLAG_PWT.? () Int)
(declare-fun lib!spec_t.hardware.MASK_FLAG_PCD.? () Int)
(declare-fun lib!spec_t.hardware.MASK_FLAG_A.? () Int)
(declare-fun lib!spec_t.hardware.MASK_FLAG_XD.? () Int)
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_D.? () Int)
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_G.? () Int)
(declare-fun lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.? () Int)
(declare-fun lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.? () Int)
(declare-fun lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? (Poly) Bool)
(declare-fun lib!spec_t.hardware.MASK_ADDR_SPEC.? () Int)
(declare-fun lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.? () Int)
(declare-fun lib!spec_t.hardware.MASK_PG_FLAG_PAT.? () Int)
(declare-fun lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.? () Int)
(declare-fun lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.? () Int)
(declare-fun lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.? () Int)
(declare-fun lib!spec_t.hardware.impl&%3.view.? (Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-fun lib!spec_t.mem.impl&%1.spec_read.? (Poly Poly Poly) Int)
(declare-fun lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly) Int)
(declare-fun lib!definitions_t.impl&%7.view.? (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun lib!definitions_t.between.? (Poly Poly Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!extra.result_map_ok.? (Dcr Type Dcr Type Dcr Type Poly Poly) core!result.Result.)
(declare-fun lib!definitions_t.new_seq.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_t.rec%new_seq.? (Dcr Type Poly Poly Fuel) Poly)
(declare-fun lib!definitions_t.WORD_SIZE.? () Int)
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.layer_in_range.? (Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.view_at.? (Poly Poly Poly Poly Poly) lib!spec_t.hardware.GhostPageDirectoryEntry.)
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_addr.? (Poly) Int)
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_RW.? (Poly) Bool)
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_US.? (Poly) Bool)
(declare-fun lib!spec_t.hardware.impl&%1.get_Directory_flag_XD.? (Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.directories_have_flags.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.ghost_pt_matches_structure.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.ghost_pt_used_regions_rtrancl.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.ghost_pt_used_regions_pairwise_disjoint.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.ghost_pt_region_notin_used_regions.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.impl&%0.hp_pat_is_zero.? (Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.entry_at_spec.? (Poly Poly Poly Poly Poly) lib!spec_t.hardware.PageDirectoryEntry.)
(declare-fun lib!impl_u.l2_impl.PT.hp_pat_is_zero.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.entry_mb0_bits_are_zero.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.directories_obey_invariant_at.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.rec%directories_obey_invariant_at.? (Poly Poly Poly Poly Fuel) Bool)
(declare-fun lib!impl_u.l2_impl.PT.inv_at.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.rec%inv_at.? (Poly Poly Poly Poly Fuel) Bool)
(declare-fun lib!impl_u.l2_impl.PT.inv.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.empty_at.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!definitions_u.permissive_flags.? () lib!definitions_t.Flags.)
(declare-fun lib!impl_u.l2_impl.PT.interp_at_entry.? (Poly Poly Poly Poly Poly Poly) lib!impl_u.l1.NodeEntry.)
(declare-fun lib!impl_u.l2_impl.PT.rec%interp_at_entry.? (Poly Poly Poly Poly Poly Poly Fuel) lib!impl_u.l1.NodeEntry.)
(declare-fun lib!impl_u.l2_impl.PT.interp_at_aux.? (Poly Poly Poly Poly Poly Poly) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun lib!impl_u.l2_impl.PT.rec%interp_at_aux.? (Poly Poly Poly Poly Poly Poly Fuel) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun lib!impl_u.l2_impl.PT.interp_at.? (Poly Poly Poly Poly Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l2_impl.PT.rec%interp_at.? (Poly Poly Poly Poly Poly Fuel) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l2_impl.PT.interp.? (Poly Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l2_impl.PT.accepted_mapping.? (Poly Poly) Bool)
(declare-fun lib!definitions_t.impl&%8.contains_entry_size.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_are_aligned.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_dont_overlap.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_in_bounds.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.inv.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.accepted_mapping.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.valid_mapping.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.map_frame.? (Poly Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.resolve.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l0.impl&%0.remove.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l0.impl&%0.accepted_unmap.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.unmap.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%0.arrow_Directory_0.? (Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.impl&%0.arrow_Page_0.? (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun lib!impl_u.l1.impl&%1.entry_size.? (Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.num_entries.? (Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.well_formed.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.empty.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.pages_match_entry_size.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.directories_match_arch.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.directories_are_nonempty.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.frames_aligned.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.inv.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.rec%inv.? (Poly Fuel) Bool)
(declare-fun lib!impl_u.l1.impl&%1.directories_obey_invariant.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? (Poly Fuel) Bool)
(declare-fun lib!impl_u.l1.impl&%1.upper_vaddr.? (Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.entry_base.? (Poly Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.entry_bounds.? (Poly Poly) tuple%2.)
(declare-fun lib!impl_u.l1.impl&%1.interp_of_entry.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.rec%interp_of_entry.? (Poly Poly Fuel) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.interp_aux.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.rec%interp_aux.? (Poly Poly Fuel) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.interp.? (Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!definitions_t.index_from_offset.? (Poly Poly) Int)
(declare-fun lib!definitions_t.index_from_base_and_addr.? (Poly Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.index_for_vaddr.? (Poly Poly Poly Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.index_for_vaddr.? (Poly Poly) Int)
(declare-fun lib!definitions_t.next_entry_base_from_index.? (Poly Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.next_entry_base.? (Poly Poly Poly Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.resolve.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%resolve.? (Poly Poly Fuel) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.update.? (Poly Poly Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.impl&%1.map_frame.? (Poly Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%map_frame.? (Poly Poly Poly Fuel) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.accepted_unmap.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.unmap.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%unmap.? (Poly Poly Fuel) core!result.Result.)
(declare-fun lib!impl_u.l2_impl.addr_is_zero_padded.? (Poly Poly Poly) Bool)
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_addr.? (Poly) Int)
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_RW.? (Poly) Bool)
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_US.? (Poly) Bool)
(declare-fun lib!spec_t.hardware.impl&%1.get_Page_flag_XD.? (Poly) Bool)
(declare-fun lib!spec_t.hardware.MASK_DIR_ADDR_SPEC.? () Int)
(declare-fun lib!spec_t.hardware.impl&%3.layer.? (Poly) Int)
(declare-fun lib!definitions_u.impl&%1.view.? (Poly) lib!definitions_t.ArchLayer.)
(declare-fun lib!definitions_u.impl&%2.view.? (Poly) lib!definitions_t.Arch.)
(declare-fun lib!extra.result_map.? (Dcr Type Dcr Type Poly Poly) core!result.Result.)
(declare-fun lib!definitions_t.impl&%2.contains.? (Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!) E&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (uInv SZ (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!))) :pattern ((lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.overlap.))
(assert (=> (fuel_bool fuel%lib!definitions_t.overlap.) (forall ((region1! Poly) (region2! Poly)) (! (= (lib!definitions_t.overlap.? region1! region2!) (ite (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region1!))))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region2!))))))) :pattern ((lib!definitions_t.overlap.? region1! region2!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%lib!definitions_t.aligned.) (forall ((addr! Poly) (size! Poly)) (! (= (lib!definitions_t.aligned.? addr! size!) (= (nClip (EucMod (%I addr!) (%I size!))) 0)) :pattern ((lib!definitions_t.aligned.? addr! size!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)) TYPE%lib!definitions_t.MemRegionExec.)) :pattern ((lib!spec_t.mem.impl&%1.cr3_spec.? self!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.PAGE_SIZE.) (= lib!definitions_t.PAGE_SIZE.? 4096)))
(assert (uInv SZ lib!definitions_t.PAGE_SIZE.?))
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.inv.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.inv.) (forall ((self! Poly)) (! (= (lib!spec_t.mem.impl&%1.inv.? self!) (and (and (and (<= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self!) 9214364837600034816) (forall ((s1$ Poly) (s2$ Poly)) (! (=> (and (has_type s1$ TYPE%lib!definitions_t.MemRegion.) (has_type s2$ TYPE%lib!definitions_t.MemRegion.)) (=> (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? self!)) s1$) (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? self!)) s2$)) (not (= s1$ s2$))) (not (lib!definitions_t.overlap.? s1$ s2$)))) :pattern ((lib!definitions_t.overlap.? s1$ s2$))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!))))) (I lib!definitions_t.PAGE_SIZE.?))) (= (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. (Poly%lib!definitions_t.MemRegionExec. (lib!spec_t.mem.impl&%1.cr3_spec.? self!)))) lib!definitions_t.PAGE_SIZE.?))) :pattern ((lib!spec_t.mem.impl&%1.inv.? self!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%4.view.? self!) (lib!definitions_t.MemRegion./MemRegion (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%lib!definitions_t.MemRegionExec. self!)))) (%I (I (lib!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%lib!definitions_t.MemRegionExec. self!)))))) :pattern ((lib!definitions_t.impl&%4.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.MemRegionExec.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? self!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.impl&%4.view.? self!)))))
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_WIDTH.?))
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_PHYADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_PHYADDR_SPEC.) (= lib!definitions_t.MAX_PHYADDR_SPEC.? (uClip 64 (Sub (uClip 64 (bitshl (I 1) (I lib!definitions_t.MAX_PHYADDR_WIDTH.?))) 1)))))
(assert (uInv 64 lib!definitions_t.MAX_PHYADDR_SPEC.?))
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_LAYERS.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_LAYERS.) (= lib!definitions_t.X86_NUM_LAYERS.? 4)))
(assert (uInv SZ lib!definitions_t.X86_NUM_LAYERS.?))
(declare-fun req%lib!definitions_t.impl&%8.entry_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size. self! layer!) (=> %%global_location_label%%6 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size. self! layer!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_size.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!)))))
(declare-fun req%lib!definitions_t.impl&%8.num_entries. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.num_entries. self! layer!) (=> %%global_location_label%%7 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.num_entries. self! layer!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.num_entries.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.num_entries.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.num_entries.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.num_entries.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.) (= lib!definitions_t.X86_MAX_ENTRY_SIZE.? (nClip (Mul (nClip (Mul (nClip (Mul 512 512)) 512)) 4096)))))
(assert (<= 0 lib!definitions_t.X86_MAX_ENTRY_SIZE.?))
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_ENTRIES.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_ENTRIES.) (= lib!definitions_t.X86_NUM_ENTRIES.? 512)))
(assert (uInv SZ lib!definitions_t.X86_NUM_ENTRIES.?))
(declare-fun req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!) (=> %%global_location_label%%8 (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.) (forall ((self! Poly) (i! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!) (=> (< (nClip (Add (%I i!) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i!) (nClip (Mul (lib!definitions_t.impl&%8.entry_size.? self! (I (nClip (Add (%I i!) 1)))) (lib!definitions_t.impl&%8.num_entries.? self! (I (nClip (Add (%I i!) 1))))))))) :pattern ((lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.inv.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.inv.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%8.inv.? self!) (and (<= (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))) lib!definitions_t.X86_NUM_LAYERS.?) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (and (and (let ((tmp%%$ (lib!definitions_t.impl&%8.entry_size.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_MAX_ENTRY_SIZE.?))) (let ((tmp%%$ (lib!definitions_t.impl&%8.num_entries.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_NUM_ENTRIES.?)))) (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i$)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$)) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! i$)))))) :pattern ((lib!definitions_t.impl&%8.inv.? self!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (%I idx!) (%I entry_size!)))))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!)))))
(declare-fun req%lib!definitions_t.impl&%8.entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%9 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%10 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!) (lib!definitions_t.entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!)))))
(declare-fun req%lib!definitions_t.impl&%8.upper_vaddr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!) (and (=> %%global_location_label%%11 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%12 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.upper_vaddr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.upper_vaddr.) (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!) (lib!definitions_t.entry_base_from_index.? base! (I (lib!definitions_t.impl&%8.num_entries.? self! layer!)) (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT)) (<= 0 (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.L3_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L3_ENTRY_SIZE.) (= lib!definitions_t.L3_ENTRY_SIZE.? lib!definitions_t.PAGE_SIZE.?)))
(assert (uInv SZ lib!definitions_t.L3_ENTRY_SIZE.?))
(assert (fuel_bool_default fuel%lib!definitions_t.L2_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L2_ENTRY_SIZE.) (= lib!definitions_t.L2_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L3_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L2_ENTRY_SIZE.?))
(assert (fuel_bool_default fuel%lib!definitions_t.L1_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L1_ENTRY_SIZE.) (= lib!definitions_t.L1_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L2_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L1_ENTRY_SIZE.?))
(assert (fuel_bool_default fuel%lib!definitions_t.L0_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.L0_ENTRY_SIZE.) (= lib!definitions_t.L0_ENTRY_SIZE.? (uClip SZ (Mul 512 lib!definitions_t.L1_ENTRY_SIZE.?)))))
(assert (uInv SZ lib!definitions_t.L0_ENTRY_SIZE.?))
(assert (fuel_bool_default fuel%lib!definitions_t.x86_arch_spec.))
(declare-fun %%array%%0 (Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3))) (and (= (%%apply%%2 %%x%% 0) %%hole%%0) (= (%%apply%%2 %%x%% 1) %%hole%%1) (= (%%apply%%2 %%x%% 2) %%hole%%2) (= (%%apply%%2 %%x%% 3) %%hole%%3))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3)))))
(assert (=> (fuel_bool fuel%lib!definitions_t.x86_arch_spec.) (= lib!definitions_t.x86_arch_spec.? (lib!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!definitions_t.ArchLayer. $ (CONST_INT 4)) (array_new $ TYPE%lib!definitions_t.ArchLayer. 4 (%%array%%0 (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L0_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L1_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L2_ENTRY_SIZE.?)) (%I (I 512)))) (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer (%I (I lib!definitions_t.L3_ENTRY_SIZE.?)) (%I (I 512))))))))))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.MAX_BASE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.MAX_BASE.) (= lib!definitions_t.MAX_BASE.? (nClip (Mul lib!definitions_t.X86_MAX_ENTRY_SIZE.? lib!definitions_t.X86_NUM_ENTRIES.?)))))
(assert (<= 0 lib!definitions_t.MAX_BASE.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_P.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_P.) (= lib!spec_t.hardware.MASK_FLAG_P.? (uClip 64 (bitshl (I 1) (I 0))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_P.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_RW.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_RW.) (= lib!spec_t.hardware.MASK_FLAG_RW.? (uClip 64 (bitshl (I 1) (I 1))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_RW.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_US.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_US.) (= lib!spec_t.hardware.MASK_FLAG_US.? (uClip 64 (bitshl (I 1) (I 2))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_US.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_PWT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_PWT.) (= lib!spec_t.hardware.MASK_FLAG_PWT.? (uClip 64 (bitshl (I 1) (I 3))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_PWT.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_PCD.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_PCD.) (= lib!spec_t.hardware.MASK_FLAG_PCD.? (uClip 64 (bitshl (I 1) (I 4))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_PCD.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_A.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_A.) (= lib!spec_t.hardware.MASK_FLAG_A.? (uClip 64 (bitshl (I 1) (I 5))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_A.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_FLAG_XD.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_FLAG_XD.) (= lib!spec_t.hardware.MASK_FLAG_XD.? (uClip 64 (bitshl (I 1) (I 63))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_FLAG_XD.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_D.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_D.) (= lib!spec_t.hardware.MASK_PG_FLAG_D.? (uClip 64 (bitshl (I 1) (I 6))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_D.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_G.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_G.) (= lib!spec_t.hardware.MASK_PG_FLAG_G.? (uClip 64 (bitshl (I 1) (I 8))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_G.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.) (= lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.) (= lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?))
(declare-fun req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. (Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. self!) (=> %%global_location_label%%13 (<= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 3))) :pattern ((req%lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero. self!)))))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 12))))))))) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_ADDR_SPEC.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 30))))))))) (I 30))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_PG_FLAG_PAT.) (= lib!spec_t.hardware.MASK_PG_FLAG_PAT.? (uClip 64 (bitshl (I 1) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 21))))))))) (I 21))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.) (= lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.? (uClip 64 (bitshl (I (uClip 64 (bitnot (I (uClip 64 (bitshl (I (uClip 64 (bitnot (I 0)))) (I (uClip 64 (Sub (uClip 64 (Add (uClip 64 (Sub lib!definitions_t.MAX_PHYADDR_WIDTH.? 1)) 1)) 12))))))))) (I 12))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.) (= lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.? (uClip 64 (bitshl (I 1) (I 7))))))
(assert (uInv 64 lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))
(assert (fuel_bool_default fuel%lib!spec_t.hardware.impl&%3.view.))
(assert (=> (fuel_bool fuel%lib!spec_t.hardware.impl&%3.view.) (forall ((self! Poly)) (! (= (lib!spec_t.hardware.impl&%3.view.? self!) (let ((v$ (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)))) (let ((flag_P$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_P.?))) lib!spec_t.hardware.MASK_FLAG_P.?))) (let ((flag_RW$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_RW.?))) lib!spec_t.hardware.MASK_FLAG_RW.?))) (let ((flag_US$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_US.?))) lib!spec_t.hardware.MASK_FLAG_US.?))) (let ((flag_PWT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_PWT.?))) lib!spec_t.hardware.MASK_FLAG_PWT.?))) (let ((flag_PCD$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_PCD.?))) lib!spec_t.hardware.MASK_FLAG_PCD.?))) (let ((flag_A$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_A.?))) lib!spec_t.hardware.MASK_FLAG_A.?))) (let ((flag_XD$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_XD.?))) lib!spec_t.hardware.MASK_FLAG_XD.?))) (let ((flag_D$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_D.?))) lib!spec_t.hardware.MASK_PG_FLAG_D.?))) (let ((flag_G$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_G.?))) lib!spec_t.hardware.MASK_PG_FLAG_G.?))) (ite (<= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 3) (ite (and (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_FLAG_P.?))) lib!spec_t.hardware.MASK_FLAG_P.?) (lib!spec_t.hardware.impl&%3.all_mb0_bits_are_zero.? self!)) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 0) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$)))) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 1) (ite (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?))) lib!spec_t.hardware.MASK_L1_PG_FLAG_PS.?) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L1_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$))))) (ite (= (lib!spec_t.hardware.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%lib!spec_t.hardware.PageDirectoryEntry. self!)) 2) (ite (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?))) lib!spec_t.hardware.MASK_L2_PG_FLAG_PS.?) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L2_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_ADDR_SPEC.?)))))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Directory (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_XD$))))) (let ((addr$ (uClip SZ (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L3_PG_ADDR_SPEC.?)))))) (let ((flag_PAT$ (= (uClip 64 (bitand (I v$) (I lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))) lib!spec_t.hardware.MASK_L3_PG_FLAG_PAT.?))) (lib!spec_t.hardware.GhostPageDirectoryEntry./Page (%I (I addr$)) (%B (B flag_P$)) (%B (B flag_RW$)) (%B (B flag_US$)) (%B (B flag_PWT$)) (%B (B flag_PCD$)) (%B (B flag_A$)) (%B (B flag_D$)) (%B (B flag_G$)) (%B (B flag_PAT$)) (%B (B flag_XD$)))))))) lib!spec_t.hardware.GhostPageDirectoryEntry./Empty) (%Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)))))))))))))) :pattern ((lib!spec_t.hardware.impl&%3.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.hardware.PageDirectoryEntry.) (has_type (Poly%lib!spec_t.hardware.GhostPageDirectoryEntry. (lib!spec_t.hardware.impl&%3.view.? self!)) TYPE%lib!spec_t.hardware.GhostPageDirectoryEntry.)) :pattern ((lib!spec_t.hardware.impl&%3.view.? self!)))))
(assert (fuel_bool_default fuel%lib!spec_t.mem.impl&%1.spec_read.))
(assert (=> (fuel_bool fuel%lib!spec_t.mem.impl&%1.spec_read.) (forall ((self! Poly) (idx! Poly) (region! Poly)) (! (= (lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!) (%I (vstd!seq.Seq.index.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? self! region!)) idx!))) :pattern ((lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!))))))
(assert (forall ((self! Poly) (idx! Poly) (region! Poly)) (! (=> (and (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (has_type idx! NAT) (has_type region! TYPE%lib!definitions_t.MemRegion.)) (uInv 64 (lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!))) :pattern ((lib!spec_t.mem.impl&%1.spec_read.? self! idx! region!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec_t.mem.PageTableMemory.) (<= 0 (lib!spec_t.mem.impl&%1.alloc_available_pages.? self!))) :pattern ((lib!spec_t.mem.impl&%1.alloc_available_pages.? self!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%7.view.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%7.view.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%7.view.? self!) (lib!definitions_t.PageTableEntry./PageTableEntry (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%lib!definitions_t.PageTableEntryExec. self!)))))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%lib!definitions_t.PageTableEntryExec. self!)))))) :pattern ((lib!definitions_t.impl&%7.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!definitions_t.PageTableEntryExec.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.impl&%7.view.? self!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!definitions_t.impl&%7.view.? self!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.between.))
(assert (=> (fuel_bool fuel%lib!definitions_t.between.) (forall ((x! Poly) (a! Poly) (b! Poly)) (! (= (lib!definitions_t.between.? x! a! b!) (and (<= (%I a!) (%I x!)) (< (%I x!) (%I b!)))) :pattern ((lib!definitions_t.between.? x! a! b!))))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!))))))
(assert (fuel_bool_default fuel%lib!extra.result_map_ok.))
(assert (=> (fuel_bool fuel%lib!extra.result_map_ok.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (res! Poly) (f! Poly)) (! (= (lib!extra.result_map_ok.? A&. A& B&. B& C&. C& res! f!) (ite (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)) (let ((a$ (core!result.Result./Ok/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Ok (%%apply%%0 (%Poly%fun%1. f!) a$))) (let ((b$ (core!result.Result./Err/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Err b$)))) :pattern ((lib!extra.result_map_ok.? A&. A& B&. B& C&. C& res! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (res! Poly) (f! Poly)) (! (=> (and (has_type res! (TYPE%core!result.Result. A&. A& B&. B&)) (has_type f! (TYPE%fun%1. A&. A& C&. C&))) (has_type (Poly%core!result.Result. (lib!extra.result_map_ok.? A&. A& B&. B& C&. C& res! f!)) (TYPE%core!result.Result. C&. C& B&. B&))) :pattern ((lib!extra.result_map_ok.? A&. A& B&. B& C&. C& res! f!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.cr3. (lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (res! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.cr3. self! res!) (and (has_type (Poly%lib!definitions_t.MemRegionExec. res!) TYPE%lib!definitions_t.MemRegionExec.) (= res! (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.cr3. self! res!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.new_seq.))
(declare-const fuel_nat%lib!definitions_t.new_seq. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%) (lib!definitions_t.rec%new_seq.? T&. T& i! e! zero)) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%)) (ite (= (%I i!) 0) (vstd!seq.Seq.empty.? T&. T&) (vstd!seq.Seq.push.? T&. T& (lib!definitions_t.rec%new_seq.? T&. T& (I (nClip (Sub (%I i!) 1))) e! fuel%) e!)))) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!definitions_t.new_seq.) (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.new_seq.? T&. T& i! e!) (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel_nat%lib!definitions_t.new_seq.)))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (has_type (lib!definitions_t.new_seq.? T&. T& i! e!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!)))))
(declare-fun req%lib!spec_t.mem.impl&%1.alloc_page. (lib!spec_t.mem.PageTableMemory.) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.)) (! (= (req%lib!spec_t.mem.impl&%1.alloc_page. pre%self!) (and (=> %%global_location_label%%14 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%15 (< 0 (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!)))))) :pattern ((req%lib!spec_t.mem.impl&%1.alloc_page. pre%self!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.alloc_page. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.alloc_page. pre%self! self! r!) (and (has_type (Poly%lib!definitions_t.MemRegionExec. r!) TYPE%lib!definitions_t.MemRegionExec.) (= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (Sub (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!)) 1)) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) lib!definitions_t.PAGE_SIZE.?) (<= (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) lib!definitions_t.PAGE_SIZE.?) lib!definitions_t.MAX_PHYADDR_SPEC.?) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (I lib!definitions_t.PAGE_SIZE.?)) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))) (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (%Poly%vstd!seq.Seq<u64.>. (lib!definitions_t.new_seq.? $ (UINT 64) (I 512) (I 0)))) (forall ((r2$ Poly)) (! (=> (has_type r2$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r2$) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r2$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$)))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. self!)))) :pattern ((ens%lib!spec_t.mem.impl&%1.alloc_page. pre%self! self! r!)))))
(declare-fun req%lib!spec_t.mem.impl&%1.dealloc_page. (lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (req%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! r!) (and (=> %%global_location_label%%16 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%17 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!))))))) :pattern ((req%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! r!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.dealloc_page. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. lib!definitions_t.MemRegionExec.) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (r! lib!definitions_t.MemRegionExec.)) (! (= (ens%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! self! r!) (and (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (%Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))))) (forall ((r2$ Poly)) (! (=> (has_type r2$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r2$) (lib!definitions_t.impl&%4.view.? (Poly%lib!definitions_t.MemRegionExec. r!)))) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r2$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r2$)))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. self!)))) :pattern ((ens%lib!spec_t.mem.impl&%1.dealloc_page. pre%self! self! r!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.WORD_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.WORD_SIZE.) (= lib!definitions_t.WORD_SIZE.? 8)))
(assert (uInv SZ lib!definitions_t.WORD_SIZE.?))
(declare-fun req%lib!spec_t.mem.impl&%1.write. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (value! Int)) (! (= (req%lib!spec_t.mem.impl&%1.write. pre%self! pbase! idx! region! value!) (and (=> %%global_location_label%%18 (= pbase! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. region!))))) (=> %%global_location_label%%19 (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%20 (lib!spec_t.mem.impl&%1.inv.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (=> %%global_location_label%%21 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (Poly%lib!definitions_t.MemRegion. region!))) (=> %%global_location_label%%22 (< idx! 512)))) :pattern ((req%lib!spec_t.mem.impl&%1.write. pre%self! pbase! idx! region! value!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.write. (lib!spec_t.mem.PageTableMemory. lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(assert (forall ((pre%self! lib!spec_t.mem.PageTableMemory.) (self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (value! Int)) (! (= (ens%lib!spec_t.mem.impl&%1.write. pre%self! self! pbase! idx! region! value!) (and (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (Poly%lib!definitions_t.MemRegion. region!)) (%Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq.update.? $ (UINT 64) (Poly%vstd!seq.Seq<u64.>. (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) (Poly%lib!definitions_t.MemRegion. region!))) (I idx!) (I value!)))) (forall ((r$ Poly)) (! (=> (has_type r$ TYPE%lib!definitions_t.MemRegion.) (=> (not (= (%Poly%lib!definitions_t.MemRegion. r$) region!)) (= (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r$) (lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r$)))) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. self!) r$)) :pattern ((lib!spec_t.mem.impl&%1.region_view.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!) r$)))) (= (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.cr3_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))) (= (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. self!)) (lib!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%lib!spec_t.mem.PageTableMemory. pre%self!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.write. pre%self! self! pbase! idx! region! value!)))))
(declare-fun req%lib!spec_t.mem.impl&%1.read. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion.) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.)) (! (= (req%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region!) (and (=> %%global_location_label%%23 (= pbase! (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. region!))))) (=> %%global_location_label%%24 (lib!definitions_t.aligned.? (I pbase!) (I lib!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%25 (vstd!set.impl&%0.contains.? $ TYPE%lib!definitions_t.MemRegion. (Poly%vstd!set.Set<lib!definitions_t.MemRegion.>. (lib!spec_t.mem.impl&%1.regions.? (Poly%lib!spec_t.mem.PageTableMemory. self!))) (Poly%lib!definitions_t.MemRegion. region!))) (=> %%global_location_label%%26 (< idx! 512)))) :pattern ((req%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region!)))))
(declare-fun ens%lib!spec_t.mem.impl&%1.read. (lib!spec_t.mem.PageTableMemory. Int Int lib!definitions_t.MemRegion. Int) Bool)
(assert (forall ((self! lib!spec_t.mem.PageTableMemory.) (pbase! Int) (idx! Int) (region! lib!definitions_t.MemRegion.) (res! Int)) (! (= (ens%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region! res!) (and (uInv 64 res!) (= res! (lib!spec_t.mem.impl&%1.spec_read.? (Poly%lib!spec_t.mem.PageTableMemory. self!) (I idx!) (Poly%lib!definitions_t.MemRegion. region!))))) :pattern ((ens%lib!spec_t.mem.impl&%1.read. self! pbase! idx! region! res!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Err.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Err.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Err_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Err_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Err_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Err/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%3 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%3 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(declare-const %return! Bool)
(declare-const layer! Poly)
(assert fuel_defaults)
(assert (has_type layer! NAT))
(assert (not true))
(check-sat)
(exit)
